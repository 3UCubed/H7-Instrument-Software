
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019ae0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08019d80  08019d80  00029d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a218  0801a218  0002a218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a220  0801a220  0002a220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a224  0801a224  0002a224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000138  24000000  0801a228  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801a360  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801a360  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040c3e  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007cce  00000000  00000000  00070da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bb8  00000000  00000000  00078a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002870  00000000  00000000  0007b630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046837  00000000  00000000  0007dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004327c  00000000  00000000  000c46d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196ac2  00000000  00000000  00107953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029e415  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bce4  00000000  00000000  0029e468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019d68 	.word	0x08019d68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	08019d68 	.word	0x08019d68

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f004 fdd7 	bl	800521c <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f002 fab8 	bl	8002be8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 fef2 	bl	800646c <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f002 faab 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 f835 	bl	8005724 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f002 fa92 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 f827 	bl	8005724 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f002 fa84 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 f819 	bl	8005724 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f002 fa76 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 f80b 	bl	8005724 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f002 fa68 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 fffc 	bl	8005724 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f002 fa59 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 ffed 	bl	8005724 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f002 fa4a 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 ffde 	bl	8005724 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f002 fa3b 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 ffcf 	bl	8005724 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f002 fa2c 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 ffc0 	bl	8005724 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f002 fa1d 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 ffb1 	bl	8005724 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f002 fa0e 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 ffa2 	bl	8005724 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f002 f9ff 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f004 fcbf 	bl	800521c <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f002 f9a0 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 ff2a 	bl	8005724 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 f987 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 ff1c 	bl	8005724 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 f979 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 ff0e 	bl	8005724 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 f96b 	bl	8002be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 ff00 	bl	8005724 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 f95d 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f009 fc2a 	bl	800a254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f009 fc1e 	bl	800a254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f009 fc12 	bl	800a254 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f006 fabd 	bl	8006ff4 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 f8b2 	bl	8002be8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 f978 	bl	8004dd4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 f972 	bl	8004dd4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f006 fa5d 	bl	8006ff4 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 f852 	bl	8002be8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f018 fbe5 	bl	801935c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f005 fe25 	bl	80067e8 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 f820 	bl	8002be8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 f840 	bl	8006c48 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 f80b 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f009 fafd 	bl	800a254 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 f9a8 	bl	8006ff4 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 ff9d 	bl	8002be8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f005 fd6a 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f005 fd81 	bl	80067cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f005 fd41 	bl	8006798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f005 fd58 	bl	80067cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f005 fd39 	bl	8006798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f005 fd50 	bl	80067cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f005 fd31 	bl	8006798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f005 fd48 	bl	80067cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f005 fd29 	bl	8006798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f005 fd40 	bl	80067cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f005 fd21 	bl	8006798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f005 fd38 	bl	80067cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f005 fd19 	bl	8006798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f005 fd30 	bl	80067cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f005 fd11 	bl	8006798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f005 fd28 	bl	80067cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f005 fd09 	bl	8006798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f005 fd20 	bl	80067cc <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000da8:	f245 5355 	movw	r3, #21845	; 0x5555
 8000dac:	81bb      	strh	r3, [r7, #12]
 8000dae:	2301      	movs	r3, #1
 8000db0:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <EE_ReadVariable+0x88>)
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <EE_ReadVariable+0x88>)
 8000db8:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f856 	bl	8000e6c <EE_FindValidPage>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000dc4:	89fb      	ldrh	r3, [r7, #14]
 8000dc6:	2bab      	cmp	r3, #171	; 0xab
 8000dc8:	d101      	bne.n	8000dce <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000dca:	23ab      	movs	r3, #171	; 0xab
 8000dcc:	e024      	b.n	8000e18 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8000dd4:	045b      	lsls	r3, r3, #17
 8000dd6:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	045a      	lsls	r2, r3, #17
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <EE_ReadVariable+0x8c>)
 8000de0:	4413      	add	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8000de4:	e012      	b.n	8000e0c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000dec:	89ba      	ldrh	r2, [r7, #12]
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d108      	bne.n	8000e06 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	3b20      	subs	r3, #32
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	82fb      	strh	r3, [r7, #22]

      break;
 8000e04:	e007      	b.n	8000e16 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	3b40      	subs	r3, #64	; 0x40
 8000e0a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3320      	adds	r3, #32
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d8e7      	bhi.n	8000de6 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000e16:	8afb      	ldrh	r3, [r7, #22]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	081c0000 	.word	0x081c0000
 8000e24:	081bffe0 	.word	0x081bffe0

08000e28 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	80fb      	strh	r3, [r7, #6]
 8000e34:	4613      	mov	r3, r2
 8000e36:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000e3c:	88ba      	ldrh	r2, [r7, #4]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f858 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	2b80      	cmp	r3, #128	; 0x80
 8000e50:	d107      	bne.n	8000e62 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000e52:	88ba      	ldrh	r2, [r7, #4]
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f8ff 	bl	800105c <EE_PageTransfer>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000e62:	89fb      	ldrh	r3, [r7, #14]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000e76:	2306      	movs	r3, #6
 8000e78:	81fb      	strh	r3, [r7, #14]
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <EE_FindValidPage+0x84>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <EE_FindValidPage+0x88>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01b      	beq.n	8000ec8 <EE_FindValidPage+0x5c>
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d125      	bne.n	8000ee0 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d108      	bne.n	8000eac <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d101      	bne.n	8000ea8 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e01c      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e01a      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d108      	bne.n	8000ec4 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000eb2:	89bb      	ldrh	r3, [r7, #12]
 8000eb4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e010      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e00e      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000ec4:	23ab      	movs	r3, #171	; 0xab
 8000ec6:	e00c      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e007      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000ed2:	89bb      	ldrh	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e002      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000edc:	23ab      	movs	r3, #171	; 0xab
 8000ede:	e000      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000ee0:	2300      	movs	r3, #0
  }
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	081c0000 	.word	0x081c0000
 8000ef4:	081e0000 	.word	0x081e0000

08000ef8 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b096      	sub	sp, #88	; 0x58
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	80fb      	strh	r3, [r7, #6]
 8000f04:	4613      	mov	r3, r2
 8000f06:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000f14:	4b4d      	ldr	r3, [pc, #308]	; (800104c <EE_VerifyPageFullWriteVariable+0x154>)
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
 8000f18:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <EE_VerifyPageFullWriteVariable+0x158>)
 8000f1a:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8000f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f018 fa19 	bl	801935c <memset>
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2220      	movs	r2, #32
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f018 fa10 	bl	801935c <memset>
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff ff93 	bl	8000e6c <EE_FindValidPage>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000f4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f50:	2bab      	cmp	r3, #171	; 0xab
 8000f52:	d101      	bne.n	8000f58 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8000f54:	23ab      	movs	r3, #171	; 0xab
 8000f56:	e075      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000f58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f5c:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8000f60:	045b      	lsls	r3, r3, #17
 8000f62:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000f64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f68:	3301      	adds	r3, #1
 8000f6a:	045a      	lsls	r2, r3, #17
 8000f6c:	4b39      	ldr	r3, [pc, #228]	; (8001054 <EE_VerifyPageFullWriteVariable+0x15c>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f72:	f3bf 8f4f 	dsb	sy
}
 8000f76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f78:	f3bf 8f6f 	isb	sy
}
 8000f7c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a35      	ldr	r2, [pc, #212]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f92:	f3bf 8f4f 	dsb	sy
}
 8000f96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f98:	f3bf 8f6f 	isb	sy
}
 8000f9c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f9e:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8000fa0:	e028      	b.n	8000ff4 <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000faa:	d120      	bne.n	8000fee <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8000fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f008 fe73 	bl	8009ca0 <HAL_FLASH_Program>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000fc0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8000fc8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	e039      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8000fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd2:	3320      	adds	r3, #32
 8000fd4:	f107 020c 	add.w	r2, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f008 fe60 	bl	8009ca0 <HAL_FLASH_Program>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8000fe6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	e02a      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8000fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff0:	3340      	adds	r3, #64	; 0x40
 8000ff2:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8000ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3d2      	bcc.n	8000fa2 <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d11b      	bne.n	8001040 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001008:	f3bf 8f4f 	dsb	sy
}
 800100c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800100e:	f3bf 8f6f 	isb	sy
}
 8001012:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800101c:	f3bf 8f4f 	dsb	sy
}
 8001020:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001022:	f3bf 8f6f 	isb	sy
}
 8001026:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 800102e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001032:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001034:	f3bf 8f4f 	dsb	sy
}
 8001038:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103a:	f3bf 8f6f 	isb	sy
}
 800103e:	e000      	b.n	8001042 <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001040:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001042:	2380      	movs	r3, #128	; 0x80
}
 8001044:	4618      	mov	r0, r3
 8001046:	3758      	adds	r7, #88	; 0x58
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	081c0000 	.word	0x081c0000
 8001050:	081e0000 	.word	0x081e0000
 8001054:	081bffff 	.word	0x081bffff
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09c      	sub	sp, #112	; 0x70
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	80fb      	strh	r3, [r7, #6]
 8001068:	4613      	mov	r3, r2
 800106a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001072:	4bc3      	ldr	r3, [pc, #780]	; (8001380 <EE_PageTransfer+0x324>)
 8001074:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001076:	2300      	movs	r3, #0
 8001078:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001082:	2300      	movs	r3, #0
 8001084:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800108e:	2300      	movs	r3, #0
 8001090:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f018 f95b 	bl	801935c <memset>
  uint32_t receive[8] = {0xEEEE};
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2220      	movs	r2, #32
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f018 f954 	bl	801935c <memset>
 80010b4:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 80010b8:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fed6 	bl	8000e6c <EE_FindValidPage>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 80010c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d105      	bne.n	80010da <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80010ce:	4bac      	ldr	r3, [pc, #688]	; (8001380 <EE_PageTransfer+0x324>)
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80010d2:	2307      	movs	r3, #7
 80010d4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80010d8:	e00b      	b.n	80010f2 <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80010da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d105      	bne.n	80010ee <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80010e2:	4ba8      	ldr	r3, [pc, #672]	; (8001384 <EE_PageTransfer+0x328>)
 80010e4:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80010e6:	2306      	movs	r3, #6
 80010e8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80010ec:	e001      	b.n	80010f2 <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80010ee:	23ab      	movs	r3, #171	; 0xab
 80010f0:	e142      	b.n	8001378 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 80010f2:	f3bf 8f4f 	dsb	sy
}
 80010f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010f8:	f3bf 8f6f 	isb	sy
}
 80010fc:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010fe:	4ba2      	ldr	r3, [pc, #648]	; (8001388 <EE_PageTransfer+0x32c>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4aa1      	ldr	r2, [pc, #644]	; (8001388 <EE_PageTransfer+0x32c>)
 8001104:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001108:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800110a:	4b9f      	ldr	r3, [pc, #636]	; (8001388 <EE_PageTransfer+0x32c>)
 800110c:	2200      	movs	r2, #0
 800110e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001112:	f3bf 8f4f 	dsb	sy
}
 8001116:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001118:	f3bf 8f6f 	isb	sy
}
 800111c:	bf00      	nop
}
 800111e:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	461a      	mov	r2, r3
 8001126:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001128:	2001      	movs	r0, #1
 800112a:	f008 fdb9 	bl	8009ca0 <HAL_FLASH_Program>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001134:	4b94      	ldr	r3, [pc, #592]	; (8001388 <EE_PageTransfer+0x32c>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11b      	bne.n	8001178 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001140:	f3bf 8f4f 	dsb	sy
}
 8001144:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001146:	f3bf 8f6f 	isb	sy
}
 800114a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800114c:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <EE_PageTransfer+0x32c>)
 800114e:	2200      	movs	r2, #0
 8001150:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001154:	f3bf 8f4f 	dsb	sy
}
 8001158:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800115a:	f3bf 8f6f 	isb	sy
}
 800115e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001160:	4b89      	ldr	r3, [pc, #548]	; (8001388 <EE_PageTransfer+0x32c>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4a88      	ldr	r2, [pc, #544]	; (8001388 <EE_PageTransfer+0x32c>)
 8001166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800116c:	f3bf 8f4f 	dsb	sy
}
 8001170:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001172:	f3bf 8f6f 	isb	sy
}
 8001176:	e000      	b.n	800117a <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001178:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800117a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001182:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001186:	b29b      	uxth	r3, r3
 8001188:	e0f6      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800118a:	88ba      	ldrh	r2, [r7, #4]
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff feb1 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 8001196:	4603      	mov	r3, r0
 8001198:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800119c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 80011a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80011a8:	e0e6      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80011b0:	e031      	b.n	8001216 <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80011b2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011b6:	4a75      	ldr	r2, [pc, #468]	; (800138c <EE_PageTransfer+0x330>)
 80011b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d024      	beq.n	800120c <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80011c2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011c6:	4a71      	ldr	r2, [pc, #452]	; (800138c <EE_PageTransfer+0x330>)
 80011c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011cc:	4970      	ldr	r1, [pc, #448]	; (8001390 <EE_PageTransfer+0x334>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fde2 	bl	8000d98 <EE_ReadVariable>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80011da:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d014      	beq.n	800120c <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80011e2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011e6:	4a69      	ldr	r2, [pc, #420]	; (800138c <EE_PageTransfer+0x330>)
 80011e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ec:	4a68      	ldr	r2, [pc, #416]	; (8001390 <EE_PageTransfer+0x334>)
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fe80 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80011fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001206:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800120a:	e0b5      	b.n	8001378 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800120c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001210:	3301      	adds	r3, #1
 8001212:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001216:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800121a:	2b1c      	cmp	r3, #28
 800121c:	d9c9      	bls.n	80011b2 <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 800121e:	f008 fdd1 	bl	8009dc4 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001222:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <EE_PageTransfer+0x338>)
 8001224:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001228:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800122a:	2300      	movs	r3, #0
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 800122e:	2302      	movs	r3, #2
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001232:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001236:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800123c:	2320      	movs	r3, #32
 800123e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001240:	f3bf 8f4f 	dsb	sy
}
 8001244:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001246:	f3bf 8f6f 	isb	sy
}
 800124a:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <EE_PageTransfer+0x32c>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <EE_PageTransfer+0x32c>)
 8001252:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001256:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <EE_PageTransfer+0x32c>)
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001260:	f3bf 8f4f 	dsb	sy
}
 8001264:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001266:	f3bf 8f6f 	isb	sy
}
 800126a:	bf00      	nop
}
 800126c:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800126e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f008 fe79 	bl	8009f70 <HAL_FLASHEx_Erase>
 800127e:	4603      	mov	r3, r0
 8001280:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <EE_PageTransfer+0x32c>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d11b      	bne.n	80012c8 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001290:	f3bf 8f4f 	dsb	sy
}
 8001294:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001296:	f3bf 8f6f 	isb	sy
}
 800129a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800129c:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <EE_PageTransfer+0x32c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <EE_PageTransfer+0x32c>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4a34      	ldr	r2, [pc, #208]	; (8001388 <EE_PageTransfer+0x32c>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012bc:	f3bf 8f4f 	dsb	sy
}
 80012c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012c2:	f3bf 8f6f 	isb	sy
}
 80012c6:	e000      	b.n	80012ca <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012c8:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80012ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 80012d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	e04e      	b.n	8001378 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 80012da:	f3bf 8f4f 	dsb	sy
}
 80012de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e0:	f3bf 8f6f 	isb	sy
}
 80012e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <EE_PageTransfer+0x32c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a27      	ldr	r2, [pc, #156]	; (8001388 <EE_PageTransfer+0x32c>)
 80012ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <EE_PageTransfer+0x32c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012fa:	f3bf 8f4f 	dsb	sy
}
 80012fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001300:	f3bf 8f6f 	isb	sy
}
 8001304:	bf00      	nop
}
 8001306:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130c:	461a      	mov	r2, r3
 800130e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001310:	2001      	movs	r0, #1
 8001312:	f008 fcc5 	bl	8009ca0 <HAL_FLASH_Program>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <EE_PageTransfer+0x32c>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d11b      	bne.n	8001360 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001328:	f3bf 8f4f 	dsb	sy
}
 800132c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800132e:	f3bf 8f6f 	isb	sy
}
 8001332:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <EE_PageTransfer+0x32c>)
 8001336:	2200      	movs	r2, #0
 8001338:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800133c:	f3bf 8f4f 	dsb	sy
}
 8001340:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001342:	f3bf 8f6f 	isb	sy
}
 8001346:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <EE_PageTransfer+0x32c>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <EE_PageTransfer+0x32c>)
 800134e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001352:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001354:	f3bf 8f4f 	dsb	sy
}
 8001358:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800135a:	f3bf 8f6f 	isb	sy
}
 800135e:	e000      	b.n	8001362 <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001360:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001362:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 800136a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800136e:	b29b      	uxth	r3, r3
 8001370:	e002      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001376:	b29b      	uxth	r3, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	3770      	adds	r7, #112	; 0x70
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	081c0000 	.word	0x081c0000
 8001384:	081e0000 	.word	0x081e0000
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	24000000 	.word	0x24000000
 8001390:	240003a0 	.word	0x240003a0
 8001394:	52002000 	.word	0x52002000

08001398 <handle_error>:
uint16_t VirtAddVarTab[NB_OF_VAR] = {0x5550, 0x5551, 0x5552, 0x5553, 0x5554, 0x5555, 0x5556, 0x5557, 0x5558, 0x5559, 0x555A, 0x555B, 0x555C, 0x555D, 0x555E, 0x555F, 0x6660, 0x6661, 0x6662, 0x6663, 0x6664, 0x6665, 0x6666, 0x6667, 0x6668, 0x6669, 0x666A, 0x666B, 0x666C};
uint16_t VarDataTab[NB_OF_VAR] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

uint16_t local_cpy[NUM_ERROR_COUNTERS];

void handle_error(ERROR_STRUCT error) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	80b8      	strh	r0, [r7, #4]
	default:
		// Should not be possible to get here
		break;
	}
#endif
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <reset_error_counters>:
		}
	}
}


void reset_error_counters() {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	// Resets all error counters to 0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e00f      	b.n	80013d8 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <reset_error_counters+0x3c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fd30 	bl	8000e28 <EE_WriteVariable>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <reset_error_counters+0x26>
			Error_Handler();
 80013ce:	f001 fc0b 	bl	8002be8 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b1a      	cmp	r3, #26
 80013dc:	ddec      	ble.n	80013b8 <reset_error_counters+0xc>
		}
	}
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	24000000 	.word	0x24000000

080013ec <send_error_counter_packet>:
	prev_error.detail = detail;

	return prev_error;
}

void send_error_counter_packet() {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 80013f2:	23cc      	movs	r3, #204	; 0xcc
 80013f4:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 80013f6:	23cc      	movs	r3, #204	; 0xcc
 80013f8:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 80013fa:	4b98      	ldr	r3, [pc, #608]	; (800165c <send_error_counter_packet+0x270>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b29b      	uxth	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 8001406:	4b95      	ldr	r3, [pc, #596]	; (800165c <send_error_counter_packet+0x270>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 800140e:	4b93      	ldr	r3, [pc, #588]	; (800165c <send_error_counter_packet+0x270>)
 8001410:	885b      	ldrh	r3, [r3, #2]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b29b      	uxth	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 800141a:	4b90      	ldr	r3, [pc, #576]	; (800165c <send_error_counter_packet+0x270>)
 800141c:	885b      	ldrh	r3, [r3, #2]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 8001422:	4b8e      	ldr	r3, [pc, #568]	; (800165c <send_error_counter_packet+0x270>)
 8001424:	889b      	ldrh	r3, [r3, #4]
 8001426:	0a1b      	lsrs	r3, r3, #8
 8001428:	b29b      	uxth	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 800142e:	4b8b      	ldr	r3, [pc, #556]	; (800165c <send_error_counter_packet+0x270>)
 8001430:	889b      	ldrh	r3, [r3, #4]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 8001436:	4b89      	ldr	r3, [pc, #548]	; (800165c <send_error_counter_packet+0x270>)
 8001438:	88db      	ldrh	r3, [r3, #6]
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	b29b      	uxth	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 8001442:	4b86      	ldr	r3, [pc, #536]	; (800165c <send_error_counter_packet+0x270>)
 8001444:	88db      	ldrh	r3, [r3, #6]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 800144a:	4b84      	ldr	r3, [pc, #528]	; (800165c <send_error_counter_packet+0x270>)
 800144c:	891b      	ldrh	r3, [r3, #8]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b29b      	uxth	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 8001456:	4b81      	ldr	r3, [pc, #516]	; (800165c <send_error_counter_packet+0x270>)
 8001458:	891b      	ldrh	r3, [r3, #8]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 800145e:	4b7f      	ldr	r3, [pc, #508]	; (800165c <send_error_counter_packet+0x270>)
 8001460:	895b      	ldrh	r3, [r3, #10]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	b29b      	uxth	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 800146a:	4b7c      	ldr	r3, [pc, #496]	; (800165c <send_error_counter_packet+0x270>)
 800146c:	895b      	ldrh	r3, [r3, #10]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 8001472:	4b7a      	ldr	r3, [pc, #488]	; (800165c <send_error_counter_packet+0x270>)
 8001474:	899b      	ldrh	r3, [r3, #12]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b29b      	uxth	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 800147e:	4b77      	ldr	r3, [pc, #476]	; (800165c <send_error_counter_packet+0x270>)
 8001480:	899b      	ldrh	r3, [r3, #12]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 8001486:	4b75      	ldr	r3, [pc, #468]	; (800165c <send_error_counter_packet+0x270>)
 8001488:	89db      	ldrh	r3, [r3, #14]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 8001492:	4b72      	ldr	r3, [pc, #456]	; (800165c <send_error_counter_packet+0x270>)
 8001494:	89db      	ldrh	r3, [r3, #14]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <send_error_counter_packet+0x270>)
 800149c:	8a1b      	ldrh	r3, [r3, #16]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 80014a6:	4b6d      	ldr	r3, [pc, #436]	; (800165c <send_error_counter_packet+0x270>)
 80014a8:	8a1b      	ldrh	r3, [r3, #16]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 80014ae:	4b6b      	ldr	r3, [pc, #428]	; (800165c <send_error_counter_packet+0x270>)
 80014b0:	8a5b      	ldrh	r3, [r3, #18]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 80014ba:	4b68      	ldr	r3, [pc, #416]	; (800165c <send_error_counter_packet+0x270>)
 80014bc:	8a5b      	ldrh	r3, [r3, #18]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 80014c2:	4b66      	ldr	r3, [pc, #408]	; (800165c <send_error_counter_packet+0x270>)
 80014c4:	8a9b      	ldrh	r3, [r3, #20]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 80014ce:	4b63      	ldr	r3, [pc, #396]	; (800165c <send_error_counter_packet+0x270>)
 80014d0:	8a9b      	ldrh	r3, [r3, #20]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 80014d6:	4b61      	ldr	r3, [pc, #388]	; (800165c <send_error_counter_packet+0x270>)
 80014d8:	8adb      	ldrh	r3, [r3, #22]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 80014e2:	4b5e      	ldr	r3, [pc, #376]	; (800165c <send_error_counter_packet+0x270>)
 80014e4:	8adb      	ldrh	r3, [r3, #22]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 80014ea:	4b5c      	ldr	r3, [pc, #368]	; (800165c <send_error_counter_packet+0x270>)
 80014ec:	8b1b      	ldrh	r3, [r3, #24]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 80014f6:	4b59      	ldr	r3, [pc, #356]	; (800165c <send_error_counter_packet+0x270>)
 80014f8:	8b1b      	ldrh	r3, [r3, #24]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 80014fe:	4b57      	ldr	r3, [pc, #348]	; (800165c <send_error_counter_packet+0x270>)
 8001500:	8b5b      	ldrh	r3, [r3, #26]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	b29b      	uxth	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 800150a:	4b54      	ldr	r3, [pc, #336]	; (800165c <send_error_counter_packet+0x270>)
 800150c:	8b5b      	ldrh	r3, [r3, #26]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 8001512:	4b52      	ldr	r3, [pc, #328]	; (800165c <send_error_counter_packet+0x270>)
 8001514:	8b9b      	ldrh	r3, [r3, #28]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b29b      	uxth	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 800151e:	4b4f      	ldr	r3, [pc, #316]	; (800165c <send_error_counter_packet+0x270>)
 8001520:	8b9b      	ldrh	r3, [r3, #28]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 8001526:	4b4d      	ldr	r3, [pc, #308]	; (800165c <send_error_counter_packet+0x270>)
 8001528:	8bdb      	ldrh	r3, [r3, #30]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 8001534:	4b49      	ldr	r3, [pc, #292]	; (800165c <send_error_counter_packet+0x270>)
 8001536:	8bdb      	ldrh	r3, [r3, #30]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <send_error_counter_packet+0x270>)
 8001540:	8c1b      	ldrh	r3, [r3, #32]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	b29b      	uxth	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 800154c:	4b43      	ldr	r3, [pc, #268]	; (800165c <send_error_counter_packet+0x270>)
 800154e:	8c1b      	ldrh	r3, [r3, #32]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <send_error_counter_packet+0x270>)
 8001558:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b29b      	uxth	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 8001564:	4b3d      	ldr	r3, [pc, #244]	; (800165c <send_error_counter_packet+0x270>)
 8001566:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <send_error_counter_packet+0x270>)
 8001570:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 800157c:	4b37      	ldr	r3, [pc, #220]	; (800165c <send_error_counter_packet+0x270>)
 800157e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 8001586:	4b35      	ldr	r3, [pc, #212]	; (800165c <send_error_counter_packet+0x270>)
 8001588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	b29b      	uxth	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <send_error_counter_packet+0x270>)
 8001596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <send_error_counter_packet+0x270>)
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <send_error_counter_packet+0x270>)
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 80015b6:	4b29      	ldr	r3, [pc, #164]	; (800165c <send_error_counter_packet+0x270>)
 80015b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <send_error_counter_packet+0x270>)
 80015c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <send_error_counter_packet+0x270>)
 80015d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <send_error_counter_packet+0x270>)
 80015de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <send_error_counter_packet+0x270>)
 80015e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <send_error_counter_packet+0x270>)
 80015f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <send_error_counter_packet+0x270>)
 8001600:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	b29b      	uxth	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <send_error_counter_packet+0x270>)
 800160e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <send_error_counter_packet+0x270>)
 8001618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	b29b      	uxth	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <send_error_counter_packet+0x270>)
 8001626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <send_error_counter_packet+0x270>)
 8001630:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	b29b      	uxth	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <send_error_counter_packet+0x270>)
 800163e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 8001646:	4639      	mov	r1, r7
 8001648:	2364      	movs	r3, #100	; 0x64
 800164a:	2238      	movs	r2, #56	; 0x38
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <send_error_counter_packet+0x274>)
 800164e:	f011 fe5d 	bl	801330c <HAL_UART_Transmit>
}
 8001652:	bf00      	nop
 8001654:	3738      	adds	r7, #56	; 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	240003a4 	.word	0x240003a4
 8001660:	24001e3c 	.word	0x24001e3c

08001664 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <vApplicationTickHook+0x18>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a03      	ldr	r2, [pc, #12]	; (800167c <vApplicationTickHook+0x18>)
 8001670:	6013      	str	r3, [r2, #0]
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	24001ae0 	.word	0x24001ae0

08001680 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 800169c:	4a24      	ldr	r2, [pc, #144]	; (8001730 <MX_FREERTOS_Init+0x98>)
 800169e:	2100      	movs	r1, #0
 80016a0:	4824      	ldr	r0, [pc, #144]	; (8001734 <MX_FREERTOS_Init+0x9c>)
 80016a2:	f014 fc8b 	bl	8015fbc <osThreadNew>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a23      	ldr	r2, [pc, #140]	; (8001738 <MX_FREERTOS_Init+0xa0>)
 80016aa:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <MX_FREERTOS_Init+0xa4>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4823      	ldr	r0, [pc, #140]	; (8001740 <MX_FREERTOS_Init+0xa8>)
 80016b2:	f014 fc83 	bl	8015fbc <osThreadNew>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <MX_FREERTOS_Init+0xac>)
 80016ba:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80016bc:	4a22      	ldr	r2, [pc, #136]	; (8001748 <MX_FREERTOS_Init+0xb0>)
 80016be:	2100      	movs	r1, #0
 80016c0:	4822      	ldr	r0, [pc, #136]	; (800174c <MX_FREERTOS_Init+0xb4>)
 80016c2:	f014 fc7b 	bl	8015fbc <osThreadNew>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a21      	ldr	r2, [pc, #132]	; (8001750 <MX_FREERTOS_Init+0xb8>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <MX_FREERTOS_Init+0xbc>)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4821      	ldr	r0, [pc, #132]	; (8001758 <MX_FREERTOS_Init+0xc0>)
 80016d2:	f014 fc73 	bl	8015fbc <osThreadNew>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <MX_FREERTOS_Init+0xc4>)
 80016da:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 80016dc:	4a20      	ldr	r2, [pc, #128]	; (8001760 <MX_FREERTOS_Init+0xc8>)
 80016de:	2100      	movs	r1, #0
 80016e0:	4820      	ldr	r0, [pc, #128]	; (8001764 <MX_FREERTOS_Init+0xcc>)
 80016e2:	f014 fc6b 	bl	8015fbc <osThreadNew>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <MX_FREERTOS_Init+0xd0>)
 80016ea:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 80016ec:	4a1f      	ldr	r2, [pc, #124]	; (800176c <MX_FREERTOS_Init+0xd4>)
 80016ee:	2100      	movs	r1, #0
 80016f0:	481f      	ldr	r0, [pc, #124]	; (8001770 <MX_FREERTOS_Init+0xd8>)
 80016f2:	f014 fc63 	bl	8015fbc <osThreadNew>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <MX_FREERTOS_Init+0xdc>)
 80016fa:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 80016fc:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <MX_FREERTOS_Init+0xe0>)
 80016fe:	2100      	movs	r1, #0
 8001700:	481e      	ldr	r0, [pc, #120]	; (800177c <MX_FREERTOS_Init+0xe4>)
 8001702:	f014 fc5b 	bl	8015fbc <osThreadNew>
 8001706:	4603      	mov	r3, r0
 8001708:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <MX_FREERTOS_Init+0xe8>)
 800170a:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <MX_FREERTOS_Init+0xec>)
 800170e:	2100      	movs	r1, #0
 8001710:	481d      	ldr	r0, [pc, #116]	; (8001788 <MX_FREERTOS_Init+0xf0>)
 8001712:	f014 fc53 	bl	8015fbc <osThreadNew>
 8001716:	4603      	mov	r3, r0
 8001718:	4a1c      	ldr	r2, [pc, #112]	; (800178c <MX_FREERTOS_Init+0xf4>)
 800171a:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 800171c:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <MX_FREERTOS_Init+0xf8>)
 800171e:	2100      	movs	r1, #0
 8001720:	481c      	ldr	r0, [pc, #112]	; (8001794 <MX_FREERTOS_Init+0xfc>)
 8001722:	f014 fc4b 	bl	8015fbc <osThreadNew>
 8001726:	4603      	mov	r3, r0
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <MX_FREERTOS_Init+0x100>)
 800172a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	08019fe8 	.word	0x08019fe8
 8001734:	0800179d 	.word	0x0800179d
 8001738:	240003dc 	.word	0x240003dc
 800173c:	0801a00c 	.word	0x0801a00c
 8001740:	080017c5 	.word	0x080017c5
 8001744:	2400063c 	.word	0x2400063c
 8001748:	0801a030 	.word	0x0801a030
 800174c:	080017ed 	.word	0x080017ed
 8001750:	2400089c 	.word	0x2400089c
 8001754:	0801a054 	.word	0x0801a054
 8001758:	08001815 	.word	0x08001815
 800175c:	24000afc 	.word	0x24000afc
 8001760:	0801a078 	.word	0x0801a078
 8001764:	0800188d 	.word	0x0800188d
 8001768:	24000d5c 	.word	0x24000d5c
 800176c:	0801a09c 	.word	0x0801a09c
 8001770:	08001905 	.word	0x08001905
 8001774:	24000fbc 	.word	0x24000fbc
 8001778:	0801a0c0 	.word	0x0801a0c0
 800177c:	08001935 	.word	0x08001935
 8001780:	2400121c 	.word	0x2400121c
 8001784:	0801a0e4 	.word	0x0801a0e4
 8001788:	08001965 	.word	0x08001965
 800178c:	2400147c 	.word	0x2400147c
 8001790:	0801a108 	.word	0x0801a108
 8001794:	08001a45 	.word	0x08001a45
 8001798:	240016dc 	.word	0x240016dc

0800179c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <PMT_init+0x24>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ac:	2200      	movs	r2, #0
 80017ae:	2101      	movs	r1, #1
 80017b0:	f014 fd86 	bl	80162c0 <osEventFlagsWait>

		create_pmt_packet();
 80017b4:	f001 fa26 	bl	8002c04 <create_pmt_packet>

		osThreadYield();
 80017b8:	f014 fc92 	bl	80160e0 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017bc:	e7f2      	b.n	80017a4 <PMT_init+0x8>
 80017be:	bf00      	nop
 80017c0:	24001a90 	.word	0x24001a90

080017c4 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <ERPA_init+0x24>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d4:	2200      	movs	r2, #0
 80017d6:	2102      	movs	r1, #2
 80017d8:	f014 fd72 	bl	80162c0 <osEventFlagsWait>

		create_erpa_packet();
 80017dc:	f001 fa58 	bl	8002c90 <create_erpa_packet>

		osThreadYield();
 80017e0:	f014 fc7e 	bl	80160e0 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017e4:	e7f2      	b.n	80017cc <ERPA_init+0x8>
 80017e6:	bf00      	nop
 80017e8:	24001a90 	.word	0x24001a90

080017ec <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HK_init+0x24>)
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fc:	2200      	movs	r2, #0
 80017fe:	2104      	movs	r1, #4
 8001800:	f014 fd5e 	bl	80162c0 <osEventFlagsWait>

		create_hk_packet();
 8001804:	f001 faa2 	bl	8002d4c <create_hk_packet>

		osThreadYield();
 8001808:	f014 fc6a 	bl	80160e0 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800180c:	e7f2      	b.n	80017f4 <HK_init+0x8>
 800180e:	bf00      	nop
 8001810:	24001a90 	.word	0x24001a90

08001814 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <AUTOINIT_init+0x70>)
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001824:	2200      	movs	r2, #0
 8001826:	2104      	movs	r1, #4
 8001828:	f014 fd4a 	bl	80162c0 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e012      	b.n	8001858 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8001832:	4a15      	ldr	r2, [pc, #84]	; (8001888 <AUTOINIT_init+0x74>)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <AUTOINIT_init+0x74>)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	889b      	ldrh	r3, [r3, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	4619      	mov	r1, r3
 8001848:	f008 fecc 	bl	800a5e4 <HAL_GPIO_WritePin>
			osDelay(100);
 800184c:	2064      	movs	r0, #100	; 0x64
 800184e:	f014 fc67 	bl	8016120 <osDelay>
		for (int i = 0; i < 7; i++) {
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b06      	cmp	r3, #6
 800185c:	dde9      	ble.n	8001832 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800185e:	2308      	movs	r3, #8
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	e008      	b.n	8001876 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2101      	movs	r1, #1
 800186a:	4618      	mov	r0, r3
 800186c:	f003 f8ac 	bl	80049c8 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	3301      	adds	r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b0d      	cmp	r3, #13
 800187a:	ddf3      	ble.n	8001864 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 800187c:	f014 fc30 	bl	80160e0 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8001880:	e7cc      	b.n	800181c <AUTOINIT_init+0x8>
 8001882:	bf00      	nop
 8001884:	24001a94 	.word	0x24001a94
 8001888:	0801a12c 	.word	0x0801a12c

0800188c <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <AUTODEINIT_init+0x70>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189c:	2200      	movs	r2, #0
 800189e:	2108      	movs	r1, #8
 80018a0:	f014 fd0e 	bl	80162c0 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80018a4:	230d      	movs	r3, #13
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e008      	b.n	80018bc <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 f889 	bl	80049c8 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b07      	cmp	r3, #7
 80018c0:	dcf3      	bgt.n	80018aa <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 80018c2:	2306      	movs	r3, #6
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	e012      	b.n	80018ee <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <AUTODEINIT_init+0x74>)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80018d0:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <AUTODEINIT_init+0x74>)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	889b      	ldrh	r3, [r3, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	f008 fe81 	bl	800a5e4 <HAL_GPIO_WritePin>
			osDelay(100);
 80018e2:	2064      	movs	r0, #100	; 0x64
 80018e4:	f014 fc1c 	bl	8016120 <osDelay>
		for (int i = 6; i >= 0; i--) {
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	dae9      	bge.n	80018c8 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 80018f4:	f014 fbf4 	bl	80160e0 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80018f8:	e7cc      	b.n	8001894 <AUTODEINIT_init+0x8>
 80018fa:	bf00      	nop
 80018fc:	24001a94 	.word	0x24001a94
 8001900:	0801a12c 	.word	0x0801a12c

08001904 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <Voltage_Monitor_init+0x28>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001914:	2200      	movs	r2, #0
 8001916:	2101      	movs	r1, #1
 8001918:	f014 fcd2 	bl	80162c0 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <Voltage_Monitor_init+0x2c>)
 800191e:	f00b fa2e 	bl	800cd7e <HAL_IWDG_Refresh>
	  set_rail_monitor();
 8001922:	f003 f871 	bl	8004a08 <set_rail_monitor>
	  monitor_rails();
 8001926:	f003 f8f3 	bl	8004b10 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800192a:	e7ef      	b.n	800190c <Voltage_Monitor_init+0x8>
 800192c:	24001a94 	.word	0x24001a94
 8001930:	24001a80 	.word	0x24001a80

08001934 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <STOP_init+0x2c>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001944:	2200      	movs	r2, #0
 8001946:	2102      	movs	r1, #2
 8001948:	f014 fcba 	bl	80162c0 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <STOP_init+0x2c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2102      	movs	r1, #2
 8001952:	4618      	mov	r0, r3
 8001954:	f014 fc82 	bl	801625c <osEventFlagsClear>

	  enter_stop();
 8001958:	f001 f928 	bl	8002bac <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800195c:	e7ee      	b.n	800193c <STOP_init+0x8>
 800195e:	bf00      	nop
 8001960:	24001a94 	.word	0x24001a94

08001964 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af02      	add	r7, sp, #8
 800196a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800196c:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <Science_init+0xbc>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001974:	2200      	movs	r2, #0
 8001976:	2101      	movs	r1, #1
 8001978:	f014 fca2 	bl	80162c0 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e012      	b.n	80019a8 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8001982:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <Science_init+0xc0>)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800198a:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <Science_init+0xc0>)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	889b      	ldrh	r3, [r3, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	4619      	mov	r1, r3
 8001998:	f008 fe24 	bl	800a5e4 <HAL_GPIO_WritePin>
			osDelay(200);
 800199c:	20c8      	movs	r0, #200	; 0xc8
 800199e:	f014 fbbf 	bl	8016120 <osDelay>
		for (int i = 0; i < 9; i++) {
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3301      	adds	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	dde9      	ble.n	8001982 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80019ae:	2308      	movs	r3, #8
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	e008      	b.n	80019c6 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2101      	movs	r1, #1
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 f804 	bl	80049c8 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	3301      	adds	r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	ddf3      	ble.n	80019b4 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2320      	movs	r3, #32
 80019d6:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <Science_init+0xc4>)
 80019d8:	2100      	movs	r1, #0
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <Science_init+0xc8>)
 80019dc:	f004 ff7e 	bl	80068dc <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <Science_init+0xcc>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <Science_init+0xd0>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <Science_init+0xd4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80019f2:	f001 faf9 	bl	8002fe8 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <Science_init+0xd8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2104      	movs	r1, #4
 80019fc:	4618      	mov	r0, r3
 80019fe:	f014 fbe9 	bl	80161d4 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8001a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a06:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	480c      	ldr	r0, [pc, #48]	; (8001a40 <Science_init+0xdc>)
 8001a10:	f010 f8f2 	bl	8011bf8 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a14:	b662      	cpsie	i
}
 8001a16:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8001a18:	f014 fb62 	bl	80160e0 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001a1c:	e7a6      	b.n	800196c <Science_init+0x8>
 8001a1e:	bf00      	nop
 8001a20:	24001a98 	.word	0x24001a98
 8001a24:	0801a12c 	.word	0x0801a12c
 8001a28:	2400003c 	.word	0x2400003c
 8001a2c:	24000314 	.word	0x24000314
 8001a30:	24001adc 	.word	0x24001adc
 8001a34:	24001add 	.word	0x24001add
 8001a38:	24001ae0 	.word	0x24001ae0
 8001a3c:	24001a90 	.word	0x24001a90
 8001a40:	24001da4 	.word	0x24001da4

08001a44 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <Idle_init+0x94>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a54:	2200      	movs	r2, #0
 8001a56:	2102      	movs	r1, #2
 8001a58:	f014 fc32 	bl	80162c0 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <Idle_init+0x98>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8001a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a66:	2200      	movs	r2, #0
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	481c      	ldr	r0, [pc, #112]	; (8001ae0 <Idle_init+0x9c>)
 8001a6e:	f010 fa1d 	bl	8011eac <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <Idle_init+0xa0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8001a78:	2100      	movs	r1, #0
 8001a7a:	481b      	ldr	r0, [pc, #108]	; (8001ae8 <Idle_init+0xa4>)
 8001a7c:	f004 ffee 	bl	8006a5c <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001a80:	2310      	movs	r3, #16
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e008      	b.n	8001a98 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 ff9b 	bl	80049c8 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b07      	cmp	r3, #7
 8001a9c:	dcf3      	bgt.n	8001a86 <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	e012      	b.n	8001aca <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <Idle_init+0xa8>)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001aac:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <Idle_init+0xa8>)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	889b      	ldrh	r3, [r3, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f008 fd93 	bl	800a5e4 <HAL_GPIO_WritePin>
			osDelay(200);
 8001abe:	20c8      	movs	r0, #200	; 0xc8
 8001ac0:	f014 fb2e 	bl	8016120 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dae9      	bge.n	8001aa4 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 8001ad0:	f014 fb06 	bl	80160e0 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001ad4:	e7ba      	b.n	8001a4c <Idle_init+0x8>
 8001ad6:	bf00      	nop
 8001ad8:	24001a98 	.word	0x24001a98
 8001adc:	24001add 	.word	0x24001add
 8001ae0:	24001da4 	.word	0x24001da4
 8001ae4:	24001adc 	.word	0x24001adc
 8001ae8:	24000314 	.word	0x24000314
 8001aec:	0801a12c 	.word	0x0801a12c

08001af0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0c:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	4a2b      	ldr	r2, [pc, #172]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b48:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_GPIO_Init+0xe8>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001b84:	4815      	ldr	r0, [pc, #84]	; (8001bdc <MX_GPIO_Init+0xec>)
 8001b86:	f008 fd2d 	bl	800a5e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2164      	movs	r1, #100	; 0x64
 8001b8e:	4814      	ldr	r0, [pc, #80]	; (8001be0 <MX_GPIO_Init+0xf0>)
 8001b90:	f008 fd28 	bl	800a5e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001b94:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001b98:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <MX_GPIO_Init+0xec>)
 8001bae:	f008 fb51 	bl	800a254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_GPIO_Init+0xf0>)
 8001bca:	f008 fb43 	bl	800a254 <HAL_GPIO_Init>

}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	58020800 	.word	0x58020800
 8001be0:	58020400 	.word	0x58020400

08001be4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001bea:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <MX_I2C1_Init+0x7c>)
 8001bec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <MX_I2C1_Init+0x80>)
 8001bf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c1e:	480f      	ldr	r0, [pc, #60]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c20:	f008 fcfa 	bl	800a618 <HAL_I2C_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c2a:	f000 ffdd 	bl	8002be8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	480a      	ldr	r0, [pc, #40]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c32:	f00a ff99 	bl	800cb68 <HAL_I2CEx_ConfigAnalogFilter>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c3c:	f000 ffd4 	bl	8002be8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c40:	2100      	movs	r1, #0
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <MX_I2C1_Init+0x78>)
 8001c44:	f00a ffdb 	bl	800cbfe <HAL_I2CEx_ConfigDigitalFilter>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c4e:	f000 ffcb 	bl	8002be8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001c52:	2001      	movs	r0, #1
 8001c54:	f00b f820 	bl	800cc98 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2400193c 	.word	0x2400193c
 8001c60:	40005400 	.word	0x40005400
 8001c64:	00100517 	.word	0x00100517

08001c68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0ba      	sub	sp, #232	; 0xe8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	22c0      	movs	r2, #192	; 0xc0
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f017 fb67 	bl	801935c <memset>
  if(i2cHandle->Instance==I2C1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a5d      	ldr	r2, [pc, #372]	; (8001e08 <HAL_I2C_MspInit+0x1a0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	f040 80b3 	bne.w	8001e00 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c9a:	f04f 0208 	mov.w	r2, #8
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00c f913 	bl	800dedc <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001cbc:	f000 ff94 	bl	8002be8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b52      	ldr	r3, [pc, #328]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce6:	2312      	movs	r3, #18
 8001ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4842      	ldr	r0, [pc, #264]	; (8001e10 <HAL_I2C_MspInit+0x1a8>)
 8001d06:	f008 faa5 	bl	800a254 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d0a:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d10:	4a3e      	ldr	r2, [pc, #248]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d1a:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <HAL_I2C_MspInit+0x1a4>)
 8001d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001d28:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d2a:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <HAL_I2C_MspInit+0x1b0>)
 8001d2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d30:	2222      	movs	r2, #34	; 0x22
 8001d32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d36:	2240      	movs	r2, #64	; 0x40
 8001d38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d60:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d68:	482a      	ldr	r0, [pc, #168]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d6a:	f005 f943 	bl	8006ff4 <HAL_DMA_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8001d74:	f000 ff38 	bl	8002be8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d7e:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_I2C_MspInit+0x1ac>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001d86:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <HAL_I2C_MspInit+0x1b8>)
 8001d88:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001d8a:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001d8c:	2221      	movs	r2, #33	; 0x21
 8001d8e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d90:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001db8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001dbc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001dc6:	f005 f915 	bl	8006ff4 <HAL_DMA_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8001dd0:	f000 ff0a 	bl	8002be8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001dd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dda:	4a10      	ldr	r2, [pc, #64]	; (8001e1c <HAL_I2C_MspInit+0x1b4>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2105      	movs	r1, #5
 8001de4:	201f      	movs	r0, #31
 8001de6:	f004 fcd7 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001dea:	201f      	movs	r0, #31
 8001dec:	f004 fcee 	bl	80067cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2105      	movs	r1, #5
 8001df4:	2020      	movs	r0, #32
 8001df6:	f004 fccf 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001dfa:	2020      	movs	r0, #32
 8001dfc:	f004 fce6 	bl	80067cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e00:	bf00      	nop
 8001e02:	37e8      	adds	r7, #232	; 0xe8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	58020400 	.word	0x58020400
 8001e14:	24001990 	.word	0x24001990
 8001e18:	400200a0 	.word	0x400200a0
 8001e1c:	24001a08 	.word	0x24001a08
 8001e20:	400200b8 	.word	0x400200b8

08001e24 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_IWDG1_Init+0x34>)
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <MX_IWDG1_Init+0x38>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <MX_IWDG1_Init+0x34>)
 8001e30:	2204      	movs	r2, #4
 8001e32:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 499;
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_IWDG1_Init+0x34>)
 8001e36:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001e3a:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 499;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_IWDG1_Init+0x34>)
 8001e3e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001e42:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <MX_IWDG1_Init+0x34>)
 8001e46:	f00a ff4b 	bl	800cce0 <HAL_IWDG_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001e50:	f000 feca 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	24001a80 	.word	0x24001a80
 8001e5c:	58004800 	.word	0x58004800

08001e60 <__NVIC_SystemReset>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001e64:	f3bf 8f4f 	dsb	sy
}
 8001e68:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <__NVIC_SystemReset+0x24>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e72:	4904      	ldr	r1, [pc, #16]	; (8001e84 <__NVIC_SystemReset+0x24>)
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <__NVIC_SystemReset+0x28>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e7a:	f3bf 8f4f 	dsb	sy
}
 8001e7e:	bf00      	nop
    __NOP();
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <__NVIC_SystemReset+0x20>
 8001e84:	e000ed00 	.word	0xe000ed00
 8001e88:	05fa0004 	.word	0x05fa0004

08001e8c <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d106      	bne.n	8001eaa <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f014 f996 	bl	80161d4 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8001ea8:	e032      	b.n	8001f10 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12b      	bne.n	8001f0a <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f014 f986 	bl	80161d4 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d113      	bne.n	8001efa <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f014 f97b 	bl	80161d4 <osEventFlagsSet>
			if (HK_ENABLED){
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2104      	movs	r1, #4
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f014 f970 	bl	80161d4 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f06:	701a      	strb	r2, [r3, #0]
}
 8001f08:	e002      	b.n	8001f10 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8001f0a:	480a      	ldr	r0, [pc, #40]	; (8001f34 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001f0c:	f017 fa9c 	bl	8019448 <puts>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	24001da4 	.word	0x24001da4
 8001f1c:	24001a90 	.word	0x24001a90
 8001f20:	24001df0 	.word	0x24001df0
 8001f24:	24001add 	.word	0x24001add
 8001f28:	24001ae4 	.word	0x24001ae4
 8001f2c:	24001a94 	.word	0x24001a94
 8001f30:	24001adc 	.word	0x24001adc
 8001f34:	08019df8 	.word	0x08019df8

08001f38 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001f40:	2201      	movs	r2, #1
 8001f42:	49f7      	ldr	r1, [pc, #988]	; (8002320 <HAL_UART_RxCpltCallback+0x3e8>)
 8001f44:	48f7      	ldr	r0, [pc, #988]	; (8002324 <HAL_UART_RxCpltCallback+0x3ec>)
 8001f46:	f011 fb37 	bl	80135b8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001f4a:	4bf5      	ldr	r3, [pc, #980]	; (8002320 <HAL_UART_RxCpltCallback+0x3e8>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2bef      	cmp	r3, #239	; 0xef
 8001f54:	f200 843b 	bhi.w	80027ce <HAL_UART_RxCpltCallback+0x896>
 8001f58:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <HAL_UART_RxCpltCallback+0x28>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	0800233d 	.word	0x0800233d
 8001f64:	0800236d 	.word	0x0800236d
 8001f68:	080023dd 	.word	0x080023dd
 8001f6c:	08002417 	.word	0x08002417
 8001f70:	0800244f 	.word	0x0800244f
 8001f74:	08002489 	.word	0x08002489
 8001f78:	080024c5 	.word	0x080024c5
 8001f7c:	08002501 	.word	0x08002501
 8001f80:	0800253b 	.word	0x0800253b
 8001f84:	0800256f 	.word	0x0800256f
 8001f88:	080025a3 	.word	0x080025a3
 8001f8c:	080025d5 	.word	0x080025d5
 8001f90:	080025ff 	.word	0x080025ff
 8001f94:	080026db 	.word	0x080026db
 8001f98:	08002743 	.word	0x08002743
 8001f9c:	0800276b 	.word	0x0800276b
 8001fa0:	08002329 	.word	0x08002329
 8001fa4:	08002351 	.word	0x08002351
 8001fa8:	080023bf 	.word	0x080023bf
 8001fac:	080023fb 	.word	0x080023fb
 8001fb0:	08002433 	.word	0x08002433
 8001fb4:	0800246b 	.word	0x0800246b
 8001fb8:	080024a7 	.word	0x080024a7
 8001fbc:	080024e3 	.word	0x080024e3
 8001fc0:	0800251f 	.word	0x0800251f
 8001fc4:	08002557 	.word	0x08002557
 8001fc8:	0800257f 	.word	0x0800257f
 8001fcc:	080025b9 	.word	0x080025b9
 8001fd0:	080025e5 	.word	0x080025e5
 8001fd4:	08002699 	.word	0x08002699
 8001fd8:	0800271b 	.word	0x0800271b
 8001fdc:	080027cf 	.word	0x080027cf
 8001fe0:	080027cf 	.word	0x080027cf
 8001fe4:	080027cf 	.word	0x080027cf
 8001fe8:	080027cf 	.word	0x080027cf
 8001fec:	080027cf 	.word	0x080027cf
 8001ff0:	080027cf 	.word	0x080027cf
 8001ff4:	080027cf 	.word	0x080027cf
 8001ff8:	080027cf 	.word	0x080027cf
 8001ffc:	080027cf 	.word	0x080027cf
 8002000:	080027cf 	.word	0x080027cf
 8002004:	080027cf 	.word	0x080027cf
 8002008:	080027cf 	.word	0x080027cf
 800200c:	080027cf 	.word	0x080027cf
 8002010:	080027cf 	.word	0x080027cf
 8002014:	080027cf 	.word	0x080027cf
 8002018:	080027cf 	.word	0x080027cf
 800201c:	080027cf 	.word	0x080027cf
 8002020:	080027cf 	.word	0x080027cf
 8002024:	080027cf 	.word	0x080027cf
 8002028:	080027cf 	.word	0x080027cf
 800202c:	080027cf 	.word	0x080027cf
 8002030:	080027cf 	.word	0x080027cf
 8002034:	080027cf 	.word	0x080027cf
 8002038:	080027cf 	.word	0x080027cf
 800203c:	080027cf 	.word	0x080027cf
 8002040:	080027cf 	.word	0x080027cf
 8002044:	080027cf 	.word	0x080027cf
 8002048:	080027cf 	.word	0x080027cf
 800204c:	080027cf 	.word	0x080027cf
 8002050:	080027cf 	.word	0x080027cf
 8002054:	080027cf 	.word	0x080027cf
 8002058:	080027cf 	.word	0x080027cf
 800205c:	080027cf 	.word	0x080027cf
 8002060:	080027cf 	.word	0x080027cf
 8002064:	080027cf 	.word	0x080027cf
 8002068:	080027cf 	.word	0x080027cf
 800206c:	080027cf 	.word	0x080027cf
 8002070:	080027cf 	.word	0x080027cf
 8002074:	080027cf 	.word	0x080027cf
 8002078:	080027cf 	.word	0x080027cf
 800207c:	080027cf 	.word	0x080027cf
 8002080:	080027cf 	.word	0x080027cf
 8002084:	080027cf 	.word	0x080027cf
 8002088:	080027cf 	.word	0x080027cf
 800208c:	080027cf 	.word	0x080027cf
 8002090:	080027cf 	.word	0x080027cf
 8002094:	080027cf 	.word	0x080027cf
 8002098:	080027cf 	.word	0x080027cf
 800209c:	080027cf 	.word	0x080027cf
 80020a0:	080027cf 	.word	0x080027cf
 80020a4:	080027cf 	.word	0x080027cf
 80020a8:	080027cf 	.word	0x080027cf
 80020ac:	080027cf 	.word	0x080027cf
 80020b0:	080027cf 	.word	0x080027cf
 80020b4:	080027cf 	.word	0x080027cf
 80020b8:	080027cf 	.word	0x080027cf
 80020bc:	080027cf 	.word	0x080027cf
 80020c0:	080027cf 	.word	0x080027cf
 80020c4:	080027cf 	.word	0x080027cf
 80020c8:	080027cf 	.word	0x080027cf
 80020cc:	080027cf 	.word	0x080027cf
 80020d0:	080027cf 	.word	0x080027cf
 80020d4:	080027cf 	.word	0x080027cf
 80020d8:	080027cf 	.word	0x080027cf
 80020dc:	080027cf 	.word	0x080027cf
 80020e0:	080027cf 	.word	0x080027cf
 80020e4:	080027cf 	.word	0x080027cf
 80020e8:	080027cf 	.word	0x080027cf
 80020ec:	080027cf 	.word	0x080027cf
 80020f0:	080027cf 	.word	0x080027cf
 80020f4:	080027cf 	.word	0x080027cf
 80020f8:	080027cf 	.word	0x080027cf
 80020fc:	080027cf 	.word	0x080027cf
 8002100:	080027cf 	.word	0x080027cf
 8002104:	080027cf 	.word	0x080027cf
 8002108:	080027cf 	.word	0x080027cf
 800210c:	080027cf 	.word	0x080027cf
 8002110:	080027cf 	.word	0x080027cf
 8002114:	080027cf 	.word	0x080027cf
 8002118:	080027cf 	.word	0x080027cf
 800211c:	080027cf 	.word	0x080027cf
 8002120:	080027cf 	.word	0x080027cf
 8002124:	080027cf 	.word	0x080027cf
 8002128:	080027cf 	.word	0x080027cf
 800212c:	080027cf 	.word	0x080027cf
 8002130:	080027cf 	.word	0x080027cf
 8002134:	080027cf 	.word	0x080027cf
 8002138:	080027cf 	.word	0x080027cf
 800213c:	080027cf 	.word	0x080027cf
 8002140:	080027cf 	.word	0x080027cf
 8002144:	080027cf 	.word	0x080027cf
 8002148:	080027cf 	.word	0x080027cf
 800214c:	080027cf 	.word	0x080027cf
 8002150:	080027cf 	.word	0x080027cf
 8002154:	080027cf 	.word	0x080027cf
 8002158:	080027cf 	.word	0x080027cf
 800215c:	080027cf 	.word	0x080027cf
 8002160:	080027cf 	.word	0x080027cf
 8002164:	080027cf 	.word	0x080027cf
 8002168:	080027cf 	.word	0x080027cf
 800216c:	080027cf 	.word	0x080027cf
 8002170:	080027cf 	.word	0x080027cf
 8002174:	080027cf 	.word	0x080027cf
 8002178:	080027cf 	.word	0x080027cf
 800217c:	080027cf 	.word	0x080027cf
 8002180:	080027cf 	.word	0x080027cf
 8002184:	080027cf 	.word	0x080027cf
 8002188:	080027cf 	.word	0x080027cf
 800218c:	080027cf 	.word	0x080027cf
 8002190:	080027cf 	.word	0x080027cf
 8002194:	080027cf 	.word	0x080027cf
 8002198:	080027cf 	.word	0x080027cf
 800219c:	080027cf 	.word	0x080027cf
 80021a0:	080027cf 	.word	0x080027cf
 80021a4:	080027cf 	.word	0x080027cf
 80021a8:	080027cf 	.word	0x080027cf
 80021ac:	080027cf 	.word	0x080027cf
 80021b0:	080027cf 	.word	0x080027cf
 80021b4:	080027cf 	.word	0x080027cf
 80021b8:	080027cf 	.word	0x080027cf
 80021bc:	080027cf 	.word	0x080027cf
 80021c0:	080027cf 	.word	0x080027cf
 80021c4:	080027cf 	.word	0x080027cf
 80021c8:	080027cf 	.word	0x080027cf
 80021cc:	080027cf 	.word	0x080027cf
 80021d0:	080027cf 	.word	0x080027cf
 80021d4:	080027cf 	.word	0x080027cf
 80021d8:	080027cf 	.word	0x080027cf
 80021dc:	080027cf 	.word	0x080027cf
 80021e0:	080027cf 	.word	0x080027cf
 80021e4:	080027cf 	.word	0x080027cf
 80021e8:	080027cf 	.word	0x080027cf
 80021ec:	080027cf 	.word	0x080027cf
 80021f0:	080027cf 	.word	0x080027cf
 80021f4:	080027cf 	.word	0x080027cf
 80021f8:	080027cf 	.word	0x080027cf
 80021fc:	080027cf 	.word	0x080027cf
 8002200:	080027cf 	.word	0x080027cf
 8002204:	080027cf 	.word	0x080027cf
 8002208:	080027cf 	.word	0x080027cf
 800220c:	080027cf 	.word	0x080027cf
 8002210:	080027cf 	.word	0x080027cf
 8002214:	080027cf 	.word	0x080027cf
 8002218:	080027cf 	.word	0x080027cf
 800221c:	080027a7 	.word	0x080027a7
 8002220:	080027cf 	.word	0x080027cf
 8002224:	080027cf 	.word	0x080027cf
 8002228:	080027cf 	.word	0x080027cf
 800222c:	080027cf 	.word	0x080027cf
 8002230:	080027cf 	.word	0x080027cf
 8002234:	080027cf 	.word	0x080027cf
 8002238:	080027cf 	.word	0x080027cf
 800223c:	080027cf 	.word	0x080027cf
 8002240:	080027cf 	.word	0x080027cf
 8002244:	080027cf 	.word	0x080027cf
 8002248:	080027cf 	.word	0x080027cf
 800224c:	080027cf 	.word	0x080027cf
 8002250:	080027cf 	.word	0x080027cf
 8002254:	080027cf 	.word	0x080027cf
 8002258:	080027cf 	.word	0x080027cf
 800225c:	080027ad 	.word	0x080027ad
 8002260:	080027cf 	.word	0x080027cf
 8002264:	080027cf 	.word	0x080027cf
 8002268:	080027cf 	.word	0x080027cf
 800226c:	080027cf 	.word	0x080027cf
 8002270:	080027cf 	.word	0x080027cf
 8002274:	080027cf 	.word	0x080027cf
 8002278:	080027cf 	.word	0x080027cf
 800227c:	080027cf 	.word	0x080027cf
 8002280:	080027cf 	.word	0x080027cf
 8002284:	080027cf 	.word	0x080027cf
 8002288:	080027cf 	.word	0x080027cf
 800228c:	080027cf 	.word	0x080027cf
 8002290:	080027cf 	.word	0x080027cf
 8002294:	080027cf 	.word	0x080027cf
 8002298:	080027cf 	.word	0x080027cf
 800229c:	080027bb 	.word	0x080027bb
 80022a0:	08002793 	.word	0x08002793
 80022a4:	080027cf 	.word	0x080027cf
 80022a8:	080027cf 	.word	0x080027cf
 80022ac:	080027cf 	.word	0x080027cf
 80022b0:	080027cf 	.word	0x080027cf
 80022b4:	080027cf 	.word	0x080027cf
 80022b8:	080027cf 	.word	0x080027cf
 80022bc:	080027cf 	.word	0x080027cf
 80022c0:	080027cf 	.word	0x080027cf
 80022c4:	080027cf 	.word	0x080027cf
 80022c8:	080027cf 	.word	0x080027cf
 80022cc:	080027cf 	.word	0x080027cf
 80022d0:	080027cf 	.word	0x080027cf
 80022d4:	080027cf 	.word	0x080027cf
 80022d8:	080027cf 	.word	0x080027cf
 80022dc:	080027c9 	.word	0x080027c9
 80022e0:	0800277f 	.word	0x0800277f
 80022e4:	080027cf 	.word	0x080027cf
 80022e8:	080027cf 	.word	0x080027cf
 80022ec:	080027cf 	.word	0x080027cf
 80022f0:	080027cf 	.word	0x080027cf
 80022f4:	080027cf 	.word	0x080027cf
 80022f8:	080027cf 	.word	0x080027cf
 80022fc:	080027cf 	.word	0x080027cf
 8002300:	080027cf 	.word	0x080027cf
 8002304:	080027cf 	.word	0x080027cf
 8002308:	080027cf 	.word	0x080027cf
 800230c:	080027cf 	.word	0x080027cf
 8002310:	080027cf 	.word	0x080027cf
 8002314:	080027cf 	.word	0x080027cf
 8002318:	080027cf 	.word	0x080027cf
 800231c:	080027d7 	.word	0x080027d7
 8002320:	24001a9c 	.word	0x24001a9c
 8002324:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 8002328:	48b8      	ldr	r0, [pc, #736]	; (800260c <HAL_UART_RxCpltCallback+0x6d4>)
 800232a:	f017 f88d 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800232e:	4bb8      	ldr	r3, [pc, #736]	; (8002610 <HAL_UART_RxCpltCallback+0x6d8>)
 8002330:	2104      	movs	r1, #4
 8002332:	2201      	movs	r2, #1
 8002334:	4618      	mov	r0, r3
 8002336:	f008 f955 	bl	800a5e4 <HAL_GPIO_WritePin>
		break;
 800233a:	e255      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 800233c:	48b5      	ldr	r0, [pc, #724]	; (8002614 <HAL_UART_RxCpltCallback+0x6dc>)
 800233e:	f017 f883 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8002342:	4bb3      	ldr	r3, [pc, #716]	; (8002610 <HAL_UART_RxCpltCallback+0x6d8>)
 8002344:	2104      	movs	r1, #4
 8002346:	2200      	movs	r2, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f008 f94b 	bl	800a5e4 <HAL_GPIO_WritePin>
		break;
 800234e:	e24b      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8002350:	48b1      	ldr	r0, [pc, #708]	; (8002618 <HAL_UART_RxCpltCallback+0x6e0>)
 8002352:	f017 f879 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8002356:	4bae      	ldr	r3, [pc, #696]	; (8002610 <HAL_UART_RxCpltCallback+0x6d8>)
 8002358:	2120      	movs	r1, #32
 800235a:	2201      	movs	r2, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f008 f941 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8002362:	2101      	movs	r1, #1
 8002364:	2008      	movs	r0, #8
 8002366:	f002 fb2f 	bl	80049c8 <set_rail_monitor_enable>
		break;
 800236a:	e23d      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 800236c:	48ab      	ldr	r0, [pc, #684]	; (800261c <HAL_UART_RxCpltCallback+0x6e4>)
 800236e:	f017 f86b 	bl	8019448 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8002372:	2308      	movs	r3, #8
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e00f      	b.n	8002398 <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002378:	4aa9      	ldr	r2, [pc, #676]	; (8002620 <HAL_UART_RxCpltCallback+0x6e8>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002380:	4aa7      	ldr	r2, [pc, #668]	; (8002620 <HAL_UART_RxCpltCallback+0x6e8>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	889b      	ldrh	r3, [r3, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	4619      	mov	r1, r3
 800238e:	f008 f929 	bl	800a5e4 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3b01      	subs	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	dcec      	bgt.n	8002378 <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800239e:	2310      	movs	r3, #16
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	e008      	b.n	80023b6 <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 fb0c 	bl	80049c8 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	dcf3      	bgt.n	80023a4 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 80023bc:	e214      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80023be:	4899      	ldr	r0, [pc, #612]	; (8002624 <HAL_UART_RxCpltCallback+0x6ec>)
 80023c0:	f017 f842 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80023c4:	4b98      	ldr	r3, [pc, #608]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 80023c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ca:	2201      	movs	r2, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f008 f909 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80023d2:	2101      	movs	r1, #1
 80023d4:	2009      	movs	r0, #9
 80023d6:	f002 faf7 	bl	80049c8 <set_rail_monitor_enable>

		break;
 80023da:	e205      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80023dc:	4893      	ldr	r0, [pc, #588]	; (800262c <HAL_UART_RxCpltCallback+0x6f4>)
 80023de:	f017 f833 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80023e2:	4b91      	ldr	r3, [pc, #580]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 80023e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e8:	2200      	movs	r2, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f008 f8fa 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80023f0:	2100      	movs	r1, #0
 80023f2:	2009      	movs	r0, #9
 80023f4:	f002 fae8 	bl	80049c8 <set_rail_monitor_enable>
		break;
 80023f8:	e1f6      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80023fa:	488d      	ldr	r0, [pc, #564]	; (8002630 <HAL_UART_RxCpltCallback+0x6f8>)
 80023fc:	f017 f824 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8002400:	4b89      	ldr	r3, [pc, #548]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	2201      	movs	r2, #1
 8002406:	4618      	mov	r0, r3
 8002408:	f008 f8ec 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 800240c:	2101      	movs	r1, #1
 800240e:	200a      	movs	r0, #10
 8002410:	f002 fada 	bl	80049c8 <set_rail_monitor_enable>

		break;
 8002414:	e1e8      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8002416:	4887      	ldr	r0, [pc, #540]	; (8002634 <HAL_UART_RxCpltCallback+0x6fc>)
 8002418:	f017 f816 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800241c:	4b82      	ldr	r3, [pc, #520]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	2200      	movs	r2, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f008 f8de 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8002428:	2100      	movs	r1, #0
 800242a:	200a      	movs	r0, #10
 800242c:	f002 facc 	bl	80049c8 <set_rail_monitor_enable>
		break;
 8002430:	e1da      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8002432:	4881      	ldr	r0, [pc, #516]	; (8002638 <HAL_UART_RxCpltCallback+0x700>)
 8002434:	f017 f808 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8002438:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 800243a:	2140      	movs	r1, #64	; 0x40
 800243c:	2201      	movs	r2, #1
 800243e:	4618      	mov	r0, r3
 8002440:	f008 f8d0 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8002444:	2101      	movs	r1, #1
 8002446:	200b      	movs	r0, #11
 8002448:	f002 fabe 	bl	80049c8 <set_rail_monitor_enable>

		break;
 800244c:	e1cc      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 800244e:	487b      	ldr	r0, [pc, #492]	; (800263c <HAL_UART_RxCpltCallback+0x704>)
 8002450:	f016 fffa 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8002454:	4b74      	ldr	r3, [pc, #464]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 8002456:	2140      	movs	r1, #64	; 0x40
 8002458:	2200      	movs	r2, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f008 f8c2 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8002460:	2100      	movs	r1, #0
 8002462:	200b      	movs	r0, #11
 8002464:	f002 fab0 	bl	80049c8 <set_rail_monitor_enable>
		break;
 8002468:	e1be      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 800246a:	4875      	ldr	r0, [pc, #468]	; (8002640 <HAL_UART_RxCpltCallback+0x708>)
 800246c:	f016 ffec 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8002470:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 8002472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002476:	2201      	movs	r2, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f008 f8b3 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 800247e:	2101      	movs	r1, #1
 8002480:	200c      	movs	r0, #12
 8002482:	f002 faa1 	bl	80049c8 <set_rail_monitor_enable>

		break;
 8002486:	e1af      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8002488:	486e      	ldr	r0, [pc, #440]	; (8002644 <HAL_UART_RxCpltCallback+0x70c>)
 800248a:	f016 ffdd 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 800248e:	4b66      	ldr	r3, [pc, #408]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 8002490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002494:	2200      	movs	r2, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f008 f8a4 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 800249c:	2100      	movs	r1, #0
 800249e:	200c      	movs	r0, #12
 80024a0:	f002 fa92 	bl	80049c8 <set_rail_monitor_enable>
		break;
 80024a4:	e1a0      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80024a6:	4868      	ldr	r0, [pc, #416]	; (8002648 <HAL_UART_RxCpltCallback+0x710>)
 80024a8:	f016 ffce 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80024ac:	4b5e      	ldr	r3, [pc, #376]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 80024ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024b2:	2201      	movs	r2, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f008 f895 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80024ba:	2101      	movs	r1, #1
 80024bc:	200d      	movs	r0, #13
 80024be:	f002 fa83 	bl	80049c8 <set_rail_monitor_enable>

		break;
 80024c2:	e191      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80024c4:	4861      	ldr	r0, [pc, #388]	; (800264c <HAL_UART_RxCpltCallback+0x714>)
 80024c6:	f016 ffbf 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80024ca:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 80024cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024d0:	2200      	movs	r2, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f008 f886 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 80024d8:	2100      	movs	r1, #0
 80024da:	200d      	movs	r0, #13
 80024dc:	f002 fa74 	bl	80049c8 <set_rail_monitor_enable>
		break;
 80024e0:	e182      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 80024e2:	485b      	ldr	r0, [pc, #364]	; (8002650 <HAL_UART_RxCpltCallback+0x718>)
 80024e4:	f016 ffb0 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80024e8:	4b4f      	ldr	r3, [pc, #316]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 80024ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ee:	2201      	movs	r2, #1
 80024f0:	4618      	mov	r0, r3
 80024f2:	f008 f877 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 80024f6:	2101      	movs	r1, #1
 80024f8:	200f      	movs	r0, #15
 80024fa:	f002 fa65 	bl	80049c8 <set_rail_monitor_enable>

		break;
 80024fe:	e173      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8002500:	4854      	ldr	r0, [pc, #336]	; (8002654 <HAL_UART_RxCpltCallback+0x71c>)
 8002502:	f016 ffa1 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_UART_RxCpltCallback+0x6f0>)
 8002508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800250c:	2200      	movs	r2, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f008 f868 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8002514:	2100      	movs	r1, #0
 8002516:	200f      	movs	r0, #15
 8002518:	f002 fa56 	bl	80049c8 <set_rail_monitor_enable>
		break;
 800251c:	e164      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 800251e:	484e      	ldr	r0, [pc, #312]	; (8002658 <HAL_UART_RxCpltCallback+0x720>)
 8002520:	f016 ff92 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8002524:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <HAL_UART_RxCpltCallback+0x6d8>)
 8002526:	2140      	movs	r1, #64	; 0x40
 8002528:	2201      	movs	r2, #1
 800252a:	4618      	mov	r0, r3
 800252c:	f008 f85a 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8002530:	2101      	movs	r1, #1
 8002532:	2010      	movs	r0, #16
 8002534:	f002 fa48 	bl	80049c8 <set_rail_monitor_enable>

		break;
 8002538:	e156      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 800253a:	4848      	ldr	r0, [pc, #288]	; (800265c <HAL_UART_RxCpltCallback+0x724>)
 800253c:	f016 ff84 	bl	8019448 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8002540:	4b33      	ldr	r3, [pc, #204]	; (8002610 <HAL_UART_RxCpltCallback+0x6d8>)
 8002542:	2140      	movs	r1, #64	; 0x40
 8002544:	2200      	movs	r2, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f008 f84c 	bl	800a5e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 800254c:	2100      	movs	r1, #0
 800254e:	2010      	movs	r0, #16
 8002550:	f002 fa3a 	bl	80049c8 <set_rail_monitor_enable>
		break;
 8002554:	e148      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8002556:	4842      	ldr	r0, [pc, #264]	; (8002660 <HAL_UART_RxCpltCallback+0x728>)
 8002558:	f016 ff76 	bl	8019448 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 800255c:	2300      	movs	r3, #0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2320      	movs	r3, #32
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_UART_RxCpltCallback+0x72c>)
 8002564:	2100      	movs	r1, #0
 8002566:	4840      	ldr	r0, [pc, #256]	; (8002668 <HAL_UART_RxCpltCallback+0x730>)
 8002568:	f004 f9b8 	bl	80068dc <HAL_DAC_Start_DMA>
		break;
 800256c:	e13c      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 800256e:	483f      	ldr	r0, [pc, #252]	; (800266c <HAL_UART_RxCpltCallback+0x734>)
 8002570:	f016 ff6a 	bl	8019448 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8002574:	2100      	movs	r1, #0
 8002576:	483c      	ldr	r0, [pc, #240]	; (8002668 <HAL_UART_RxCpltCallback+0x730>)
 8002578:	f004 fa70 	bl	8006a5c <HAL_DAC_Stop_DMA>
		break;
 800257c:	e134      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 800257e:	483c      	ldr	r0, [pc, #240]	; (8002670 <HAL_UART_RxCpltCallback+0x738>)
 8002580:	f016 ff62 	bl	8019448 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002584:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_UART_RxCpltCallback+0x73c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2102      	movs	r1, #2
 800258a:	4618      	mov	r0, r3
 800258c:	f013 fe22 	bl	80161d4 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002594:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_UART_RxCpltCallback+0x740>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]

		break;
 80025a0:	e122      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80025a2:	4836      	ldr	r0, [pc, #216]	; (800267c <HAL_UART_RxCpltCallback+0x744>)
 80025a4:	f016 ff50 	bl	8019448 <puts>
		ERPA_ENABLED = 0;
 80025a8:	4b33      	ldr	r3, [pc, #204]	; (8002678 <HAL_UART_RxCpltCallback+0x740>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80025ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b2:	2200      	movs	r2, #0
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80025b6:	e117      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80025b8:	4831      	ldr	r0, [pc, #196]	; (8002680 <HAL_UART_RxCpltCallback+0x748>)
 80025ba:	f016 ff45 	bl	8019448 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80025be:	2100      	movs	r1, #0
 80025c0:	4830      	ldr	r0, [pc, #192]	; (8002684 <HAL_UART_RxCpltCallback+0x74c>)
 80025c2:	f00f fb19 	bl	8011bf8 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_UART_RxCpltCallback+0x73c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f013 fe01 	bl	80161d4 <osEventFlagsSet>
		break;
 80025d2:	e109      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 80025d4:	482c      	ldr	r0, [pc, #176]	; (8002688 <HAL_UART_RxCpltCallback+0x750>)
 80025d6:	f016 ff37 	bl	8019448 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80025da:	2100      	movs	r1, #0
 80025dc:	4829      	ldr	r0, [pc, #164]	; (8002684 <HAL_UART_RxCpltCallback+0x74c>)
 80025de:	f00f fc65 	bl	8011eac <HAL_TIM_OC_Stop_IT>
		break;
 80025e2:	e101      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x1C: {
		printf("HK ON \n");
 80025e4:	4829      	ldr	r0, [pc, #164]	; (800268c <HAL_UART_RxCpltCallback+0x754>)
 80025e6:	f016 ff2f 	bl	8019448 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_UART_RxCpltCallback+0x73c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2104      	movs	r1, #4
 80025f0:	4618      	mov	r0, r3
 80025f2:	f013 fdef 	bl	80161d4 <osEventFlagsSet>
		HK_ENABLED = 1;
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_UART_RxCpltCallback+0x758>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
		break;
 80025fc:	e0f4      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0C: {
		printf("HK OFF\n");
 80025fe:	4825      	ldr	r0, [pc, #148]	; (8002694 <HAL_UART_RxCpltCallback+0x75c>)
 8002600:	f016 ff22 	bl	8019448 <puts>
		HK_ENABLED = 0;
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <HAL_UART_RxCpltCallback+0x758>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
		break;
 800260a:	e0ed      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
 800260c:	08019e10 	.word	0x08019e10
 8002610:	58020400 	.word	0x58020400
 8002614:	08019e18 	.word	0x08019e18
 8002618:	08019e24 	.word	0x08019e24
 800261c:	08019e30 	.word	0x08019e30
 8002620:	0801a12c 	.word	0x0801a12c
 8002624:	08019e3c 	.word	0x08019e3c
 8002628:	58020800 	.word	0x58020800
 800262c:	08019e48 	.word	0x08019e48
 8002630:	08019e58 	.word	0x08019e58
 8002634:	08019e64 	.word	0x08019e64
 8002638:	08019e70 	.word	0x08019e70
 800263c:	08019e7c 	.word	0x08019e7c
 8002640:	08019e8c 	.word	0x08019e8c
 8002644:	08019e98 	.word	0x08019e98
 8002648:	08019ea4 	.word	0x08019ea4
 800264c:	08019eb0 	.word	0x08019eb0
 8002650:	08019ebc 	.word	0x08019ebc
 8002654:	08019ecc 	.word	0x08019ecc
 8002658:	08019edc 	.word	0x08019edc
 800265c:	08019ee8 	.word	0x08019ee8
 8002660:	08019ef8 	.word	0x08019ef8
 8002664:	2400003c 	.word	0x2400003c
 8002668:	24000314 	.word	0x24000314
 800266c:	08019f08 	.word	0x08019f08
 8002670:	08019f18 	.word	0x08019f18
 8002674:	24001a90 	.word	0x24001a90
 8002678:	24001add 	.word	0x24001add
 800267c:	08019f20 	.word	0x08019f20
 8002680:	08019f2c 	.word	0x08019f2c
 8002684:	24001da4 	.word	0x24001da4
 8002688:	08019f34 	.word	0x08019f34
 800268c:	08019f3c 	.word	0x08019f3c
 8002690:	24001adc 	.word	0x24001adc
 8002694:	08019f44 	.word	0x08019f44
	}
	case 0x1D: {
		printf("Step Up\n");
 8002698:	4855      	ldr	r0, [pc, #340]	; (80027f0 <HAL_UART_RxCpltCallback+0x8b8>)
 800269a:	f016 fed5 	bl	8019448 <puts>
		if (step < 14) {
 800269e:	4b55      	ldr	r3, [pc, #340]	; (80027f4 <HAL_UART_RxCpltCallback+0x8bc>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b0d      	cmp	r3, #13
 80026a6:	f200 8098 	bhi.w	80027da <HAL_UART_RxCpltCallback+0x8a2>
			step += 2;
 80026aa:	4b52      	ldr	r3, [pc, #328]	; (80027f4 <HAL_UART_RxCpltCallback+0x8bc>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3302      	adds	r3, #2
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b4f      	ldr	r3, [pc, #316]	; (80027f4 <HAL_UART_RxCpltCallback+0x8bc>)
 80026b6:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80026b8:	4b4e      	ldr	r3, [pc, #312]	; (80027f4 <HAL_UART_RxCpltCallback+0x8bc>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <HAL_UART_RxCpltCallback+0x8c0>)
 80026c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	484c      	ldr	r0, [pc, #304]	; (80027fc <HAL_UART_RxCpltCallback+0x8c4>)
 80026cc:	f004 fa69 	bl	8006ba2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80026d0:	2100      	movs	r1, #0
 80026d2:	484a      	ldr	r0, [pc, #296]	; (80027fc <HAL_UART_RxCpltCallback+0x8c4>)
 80026d4:	f004 f8aa 	bl	800682c <HAL_DAC_Start>
		}
		break;
 80026d8:	e07f      	b.n	80027da <HAL_UART_RxCpltCallback+0x8a2>
	}
	case 0x0D: {
		printf("Step Down\n");
 80026da:	4849      	ldr	r0, [pc, #292]	; (8002800 <HAL_UART_RxCpltCallback+0x8c8>)
 80026dc:	f016 feb4 	bl	8019448 <puts>
		if (step > 1) {
 80026e0:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <HAL_UART_RxCpltCallback+0x8bc>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d979      	bls.n	80027de <HAL_UART_RxCpltCallback+0x8a6>
			step -= 2;
 80026ea:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_UART_RxCpltCallback+0x8bc>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	3b02      	subs	r3, #2
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_UART_RxCpltCallback+0x8bc>)
 80026f6:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80026f8:	4b3e      	ldr	r3, [pc, #248]	; (80027f4 <HAL_UART_RxCpltCallback+0x8bc>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_UART_RxCpltCallback+0x8c0>)
 8002702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	483c      	ldr	r0, [pc, #240]	; (80027fc <HAL_UART_RxCpltCallback+0x8c4>)
 800270c:	f004 fa49 	bl	8006ba2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002710:	2100      	movs	r1, #0
 8002712:	483a      	ldr	r0, [pc, #232]	; (80027fc <HAL_UART_RxCpltCallback+0x8c4>)
 8002714:	f004 f88a 	bl	800682c <HAL_DAC_Start>
		}
		break;
 8002718:	e061      	b.n	80027de <HAL_UART_RxCpltCallback+0x8a6>
	}
	case 0x1E: {
		printf("Factor Up\n");
 800271a:	483a      	ldr	r0, [pc, #232]	; (8002804 <HAL_UART_RxCpltCallback+0x8cc>)
 800271c:	f016 fe94 	bl	8019448 <puts>
		if (cadence <= 50000) {
 8002720:	4b39      	ldr	r3, [pc, #228]	; (8002808 <HAL_UART_RxCpltCallback+0x8d0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002728:	4293      	cmp	r3, r2
 800272a:	d85a      	bhi.n	80027e2 <HAL_UART_RxCpltCallback+0x8aa>
			cadence *= 2;
 800272c:	4b36      	ldr	r3, [pc, #216]	; (8002808 <HAL_UART_RxCpltCallback+0x8d0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4a35      	ldr	r2, [pc, #212]	; (8002808 <HAL_UART_RxCpltCallback+0x8d0>)
 8002734:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8002736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800273a:	4b33      	ldr	r3, [pc, #204]	; (8002808 <HAL_UART_RxCpltCallback+0x8d0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8002740:	e04f      	b.n	80027e2 <HAL_UART_RxCpltCallback+0x8aa>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8002742:	4832      	ldr	r0, [pc, #200]	; (800280c <HAL_UART_RxCpltCallback+0x8d4>)
 8002744:	f016 fe80 	bl	8019448 <puts>
		if (cadence >= 6250) {
 8002748:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <HAL_UART_RxCpltCallback+0x8d0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f641 0269 	movw	r2, #6249	; 0x1869
 8002750:	4293      	cmp	r3, r2
 8002752:	d948      	bls.n	80027e6 <HAL_UART_RxCpltCallback+0x8ae>
			cadence /= 2;
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <HAL_UART_RxCpltCallback+0x8d0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <HAL_UART_RxCpltCallback+0x8d0>)
 800275c:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800275e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <HAL_UART_RxCpltCallback+0x8d0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8002768:	e03d      	b.n	80027e6 <HAL_UART_RxCpltCallback+0x8ae>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 800276a:	4829      	ldr	r0, [pc, #164]	; (8002810 <HAL_UART_RxCpltCallback+0x8d8>)
 800276c:	f016 fe6c 	bl	8019448 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8002770:	4b28      	ldr	r3, [pc, #160]	; (8002814 <HAL_UART_RxCpltCallback+0x8dc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2102      	movs	r1, #2
 8002776:	4618      	mov	r0, r3
 8002778:	f013 fd2c 	bl	80161d4 <osEventFlagsSet>
		break;
 800277c:	e034      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xE0: {
		printf("Auto Init\n");
 800277e:	4826      	ldr	r0, [pc, #152]	; (8002818 <HAL_UART_RxCpltCallback+0x8e0>)
 8002780:	f016 fe62 	bl	8019448 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8002784:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_UART_RxCpltCallback+0x8dc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2104      	movs	r1, #4
 800278a:	4618      	mov	r0, r3
 800278c:	f013 fd22 	bl	80161d4 <osEventFlagsSet>
		break;
 8002790:	e02a      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8002792:	4822      	ldr	r0, [pc, #136]	; (800281c <HAL_UART_RxCpltCallback+0x8e4>)
 8002794:	f016 fe58 	bl	8019448 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8002798:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <HAL_UART_RxCpltCallback+0x8dc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2108      	movs	r1, #8
 800279e:	4618      	mov	r0, r3
 80027a0:	f013 fd18 	bl	80161d4 <osEventFlagsSet>
		break;
 80027a4:	e020      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xAF: {
		sync();
 80027a6:	f000 f967 	bl	8002a78 <sync>
		break;
 80027aa:	e01d      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_UART_RxCpltCallback+0x8e8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f013 fd0e 	bl	80161d4 <osEventFlagsSet>
		break;
 80027b8:	e016      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_UART_RxCpltCallback+0x8e8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2102      	movs	r1, #2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f013 fd07 	bl	80161d4 <osEventFlagsSet>
		break;
 80027c6:	e00f      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xDF: {
		reset_error_counters();
 80027c8:	f7fe fdf0 	bl	80013ac <reset_error_counters>
		break;
 80027cc:	e00c      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
		send_previous_error_packet();
#endif
		break;
	}
	default: {
		printf("Unknown Command\n");
 80027ce:	4815      	ldr	r0, [pc, #84]	; (8002824 <HAL_UART_RxCpltCallback+0x8ec>)
 80027d0:	f016 fe3a 	bl	8019448 <puts>
		break;
 80027d4:	e008      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
		break;
 80027d6:	bf00      	nop
 80027d8:	e006      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
		break;
 80027da:	bf00      	nop
 80027dc:	e004      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
		break;
 80027de:	bf00      	nop
 80027e0:	e002      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
		break;
 80027e2:	bf00      	nop
 80027e4:	e000      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x8b0>
		break;
 80027e6:	bf00      	nop
	}
	}
}
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	08019f4c 	.word	0x08019f4c
 80027f4:	24001ade 	.word	0x24001ade
 80027f8:	2400003c 	.word	0x2400003c
 80027fc:	24000314 	.word	0x24000314
 8002800:	08019f54 	.word	0x08019f54
 8002804:	08019f60 	.word	0x08019f60
 8002808:	240000bc 	.word	0x240000bc
 800280c:	08019f6c 	.word	0x08019f6c
 8002810:	08019f78 	.word	0x08019f78
 8002814:	24001a94 	.word	0x24001a94
 8002818:	08019f88 	.word	0x08019f88
 800281c:	08019f94 	.word	0x08019f94
 8002820:	24001a98 	.word	0x24001a98
 8002824:	08019fa0 	.word	0x08019fa0

08002828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800282c:	f002 fa6a 	bl	8004d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002830:	f000 f826 	bl	8002880 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002834:	f000 f8a6 	bl	8002984 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002838:	f7ff f95a 	bl	8001af0 <MX_GPIO_Init>
  MX_DMA_Init();
 800283c:	f7fe fa54 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002840:	f001 fdfa 	bl	8004438 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002844:	f7ff f9ce 	bl	8001be4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002848:	f000 fe6e 	bl	8003528 <MX_SPI2_Init>
  MX_TIM2_Init();
 800284c:	f001 fb5a 	bl	8003f04 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002850:	f001 faaa 	bl	8003da8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8002854:	f7fd ffe8 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8002858:	f7fd fec4 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 800285c:	f7fe f990 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8002860:	f000 fe0a 	bl	8003478 <MX_SPI1_Init>
  MX_RTC_Init();
 8002864:	f000 fbd6 	bl	8003014 <MX_RTC_Init>
  MX_IWDG1_Init();
 8002868:	f7ff fadc 	bl	8001e24 <MX_IWDG1_Init>
#ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
  	get_reset_cause();
#endif

  system_setup();
 800286c:	f000 f8ba 	bl	80029e4 <system_setup>
//  handle_error(error);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002870:	f013 fb5a 	bl	8015f28 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002874:	f7fe ff10 	bl	8001698 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002878:	f013 fb7a 	bl	8015f70 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800287c:	e7fe      	b.n	800287c <main+0x54>
	...

08002880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b09c      	sub	sp, #112	; 0x70
 8002884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288a:	224c      	movs	r2, #76	; 0x4c
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f016 fd64 	bl	801935c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2220      	movs	r2, #32
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f016 fd5e 	bl	801935c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80028a0:	2002      	movs	r0, #2
 80028a2:	f00a fab9 	bl	800ce18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80028a6:	2300      	movs	r3, #0
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4b34      	ldr	r3, [pc, #208]	; (800297c <SystemClock_Config+0xfc>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	4a33      	ldr	r2, [pc, #204]	; (800297c <SystemClock_Config+0xfc>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028b6:	4b31      	ldr	r3, [pc, #196]	; (800297c <SystemClock_Config+0xfc>)
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	4b2f      	ldr	r3, [pc, #188]	; (8002980 <SystemClock_Config+0x100>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028c8:	4a2d      	ldr	r2, [pc, #180]	; (8002980 <SystemClock_Config+0x100>)
 80028ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <SystemClock_Config+0x100>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028dc:	bf00      	nop
 80028de:	4b28      	ldr	r3, [pc, #160]	; (8002980 <SystemClock_Config+0x100>)
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ea:	d1f8      	bne.n	80028de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80028ec:	230b      	movs	r3, #11
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80028f6:	2309      	movs	r3, #9
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028fa:	2340      	movs	r3, #64	; 0x40
 80028fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028fe:	2301      	movs	r3, #1
 8002900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002902:	2302      	movs	r3, #2
 8002904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002906:	2302      	movs	r3, #2
 8002908:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800290a:	2304      	movs	r3, #4
 800290c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800290e:	2318      	movs	r3, #24
 8002910:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002912:	2302      	movs	r3, #2
 8002914:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002916:	2302      	movs	r3, #2
 8002918:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800291a:	2302      	movs	r3, #2
 800291c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800291e:	2308      	movs	r3, #8
 8002920:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8002922:	2302      	movs	r3, #2
 8002924:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800292a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292e:	4618      	mov	r0, r3
 8002930:	f00a faac 	bl	800ce8c <HAL_RCC_OscConfig>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800293a:	f000 f955 	bl	8002be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800293e:	233f      	movs	r3, #63	; 0x3f
 8002940:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002942:	2303      	movs	r3, #3
 8002944:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002952:	2340      	movs	r3, #64	; 0x40
 8002954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	2101      	movs	r1, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f00a feec 	bl	800d740 <HAL_RCC_ClockConfig>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800296e:	f000 f93b 	bl	8002be8 <Error_Handler>
  }
}
 8002972:	bf00      	nop
 8002974:	3770      	adds	r7, #112	; 0x70
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	58000400 	.word	0x58000400
 8002980:	58024800 	.word	0x58024800

08002984 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b0b0      	sub	sp, #192	; 0xc0
 8002988:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800298a:	463b      	mov	r3, r7
 800298c:	22c0      	movs	r2, #192	; 0xc0
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f016 fce3 	bl	801935c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002996:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80029a2:	2304      	movs	r3, #4
 80029a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80029a6:	2318      	movs	r3, #24
 80029a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80029aa:	2308      	movs	r3, #8
 80029ac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80029ae:	2302      	movs	r3, #2
 80029b0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80029ba:	2320      	movs	r3, #32
 80029bc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029c8:	463b      	mov	r3, r7
 80029ca:	4618      	mov	r0, r3
 80029cc:	f00b fa86 	bl	800dedc <HAL_RCCEx_PeriphCLKConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80029d6:	f000 f907 	bl	8002be8 <Error_Handler>
  }
}
 80029da:	bf00      	nop
 80029dc:	37c0      	adds	r7, #192	; 0xc0
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts



	packet_event_flags = osEventFlagsNew(NULL);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f013 fbb4 	bl	8016156 <osEventFlagsNew>
 80029ee:	4603      	mov	r3, r0
 80029f0:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <system_setup+0x7c>)
 80029f2:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <system_setup+0x7c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d100      	bne.n	80029fe <system_setup+0x1a>
        while (1);
 80029fc:	e7fe      	b.n	80029fc <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f013 fba9 	bl	8016156 <osEventFlagsNew>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <system_setup+0x80>)
 8002a08:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <system_setup+0x80>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d100      	bne.n	8002a14 <system_setup+0x30>
        while (1);
 8002a12:	e7fe      	b.n	8002a12 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f013 fb9e 	bl	8016156 <osEventFlagsNew>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <system_setup+0x84>)
 8002a1e:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <system_setup+0x84>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d100      	bne.n	8002a2a <system_setup+0x46>
        while (1);
 8002a28:	e7fe      	b.n	8002a28 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 8002a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8002a32:	210c      	movs	r1, #12
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <system_setup+0x88>)
 8002a36:	f00f f8df 	bl	8011bf8 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 8002a3a:	f001 fe07 	bl	800464c <voltage_monitor_init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d100      	bne.n	8002a46 <system_setup+0x62>
		while (1);
 8002a44:	e7fe      	b.n	8002a44 <system_setup+0x60>
	}

	if (!init_adc_dma()) {
 8002a46:	f000 fb77 	bl	8003138 <init_adc_dma>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d100      	bne.n	8002a52 <system_setup+0x6e>
		while (1);
 8002a50:	e7fe      	b.n	8002a50 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a52:	2201      	movs	r2, #1
 8002a54:	4906      	ldr	r1, [pc, #24]	; (8002a70 <system_setup+0x8c>)
 8002a56:	4807      	ldr	r0, [pc, #28]	; (8002a74 <system_setup+0x90>)
 8002a58:	f010 fdae 	bl	80135b8 <HAL_UART_Receive_IT>

}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	24001a90 	.word	0x24001a90
 8002a64:	24001a94 	.word	0x24001a94
 8002a68:	24001a98 	.word	0x24001a98
 8002a6c:	24001df0 	.word	0x24001df0
 8002a70:	24001a9c 	.word	0x24001a9c
 8002a74:	24001e3c 	.word	0x24001e3c

08002a78 <sync>:

void sync() {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
	send_ACK();
 8002a7e:	f000 f821 	bl	8002ac4 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002a82:	480e      	ldr	r0, [pc, #56]	; (8002abc <sync+0x44>)
 8002a84:	f010 fde4 	bl	8013650 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002a88:	2364      	movs	r3, #100	; 0x64
 8002a8a:	2209      	movs	r2, #9
 8002a8c:	490c      	ldr	r1, [pc, #48]	; (8002ac0 <sync+0x48>)
 8002a8e:	480b      	ldr	r0, [pc, #44]	; (8002abc <sync+0x44>)
 8002a90:	f010 fcca 	bl	8013428 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <sync+0x48>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2bff      	cmp	r3, #255	; 0xff
 8002a9e:	d1f3      	bne.n	8002a88 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8002aa0:	4807      	ldr	r0, [pc, #28]	; (8002ac0 <sync+0x48>)
 8002aa2:	f001 fc07 	bl	80042b4 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4905      	ldr	r1, [pc, #20]	; (8002ac0 <sync+0x48>)
 8002aaa:	4804      	ldr	r0, [pc, #16]	; (8002abc <sync+0x44>)
 8002aac:	f010 fd84 	bl	80135b8 <HAL_UART_Receive_IT>
	send_error_counter_packet();
 8002ab0:	f7fe fc9c 	bl	80013ec <send_error_counter_packet>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	24001e3c 	.word	0x24001e3c
 8002ac0:	24001a9c 	.word	0x24001a9c

08002ac4 <send_ACK>:

void send_ACK() {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <send_ACK+0x1c>)
 8002aca:	22ff      	movs	r2, #255	; 0xff
 8002acc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002ace:	2364      	movs	r3, #100	; 0x64
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4903      	ldr	r1, [pc, #12]	; (8002ae0 <send_ACK+0x1c>)
 8002ad4:	4803      	ldr	r0, [pc, #12]	; (8002ae4 <send_ACK+0x20>)
 8002ad6:	f010 fc19 	bl	801330c <HAL_UART_Transmit>
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	24001ae8 	.word	0x24001ae8
 8002ae4:	24001e3c 	.word	0x24001e3c

08002ae8 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8002aee:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <get_current_step+0xc0>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d04a      	beq.n	8002b94 <get_current_step+0xac>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b04:	da48      	bge.n	8002b98 <get_current_step+0xb0>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d03f      	beq.n	8002b90 <get_current_step+0xa8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002b16:	4293      	cmp	r3, r2
 8002b18:	dc3e      	bgt.n	8002b98 <get_current_step+0xb0>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d033      	beq.n	8002b8c <get_current_step+0xa4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002b2a:	da35      	bge.n	8002b98 <get_current_step+0xb0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d028      	beq.n	8002b88 <get_current_step+0xa0>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	dc2b      	bgt.n	8002b98 <get_current_step+0xb0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f240 7245 	movw	r2, #1861	; 0x745
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01c      	beq.n	8002b84 <get_current_step+0x9c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f240 7245 	movw	r2, #1861	; 0x745
 8002b50:	4293      	cmp	r3, r2
 8002b52:	dc21      	bgt.n	8002b98 <get_current_step+0xb0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d010      	beq.n	8002b80 <get_current_step+0x98>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002b64:	4293      	cmp	r3, r2
 8002b66:	dc17      	bgt.n	8002b98 <get_current_step+0xb0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d004      	beq.n	8002b78 <get_current_step+0x90>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002b74:	d002      	beq.n	8002b7c <get_current_step+0x94>
 8002b76:	e00f      	b.n	8002b98 <get_current_step+0xb0>
	case 0:
		return 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e00e      	b.n	8002b9a <get_current_step+0xb2>
	case 620:
		return 1;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e00c      	b.n	8002b9a <get_current_step+0xb2>
	case 1241:
		return 2;
 8002b80:	2302      	movs	r3, #2
 8002b82:	e00a      	b.n	8002b9a <get_current_step+0xb2>
	case 1861:
		return 3;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e008      	b.n	8002b9a <get_current_step+0xb2>
	case 2482:
		return 4;
 8002b88:	2304      	movs	r3, #4
 8002b8a:	e006      	b.n	8002b9a <get_current_step+0xb2>
	case 3103:
		return 5;
 8002b8c:	2305      	movs	r3, #5
 8002b8e:	e004      	b.n	8002b9a <get_current_step+0xb2>
	case 3723:
		return 6;
 8002b90:	2306      	movs	r3, #6
 8002b92:	e002      	b.n	8002b9a <get_current_step+0xb2>
	case 4095:
		return 7;
 8002b94:	2307      	movs	r3, #7
 8002b96:	e000      	b.n	8002b9a <get_current_step+0xb2>
	default:
		return -1;
 8002b98:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40007400 	.word	0x40007400

08002bac <enter_stop>:

void enter_stop() {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	  send_ACK();
 8002bb0:	f7ff ff88 	bl	8002ac4 <send_ACK>

	  vTaskSuspendAll();
 8002bb4:	f014 fe66 	bl	8017884 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002bb8:	2101      	movs	r1, #1
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f00a f8f0 	bl	800cda0 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8002bc0:	f7ff f94e 	bl	8001e60 <__NVIC_SystemReset>

08002bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bd6:	f002 f8d1 	bl	8004d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40001000 	.word	0x40001000

08002be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8002bf2:	231a      	movs	r3, #26
 8002bf4:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fbce 	bl	8001398 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002c0a:	bf00      	nop
 8002c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c10:	481c      	ldr	r0, [pc, #112]	; (8002c84 <create_pmt_packet+0x80>)
 8002c12:	f007 fccf 	bl	800a5b4 <HAL_GPIO_ReadPin>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f7      	bne.n	8002c0c <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002c1c:	1d3b      	adds	r3, r7, #4
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 faa8 	bl	8004174 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8002c24:	f107 0308 	add.w	r3, r7, #8
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fad9 	bl	80031e0 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8002c2e:	23ff      	movs	r3, #255	; 0xff
 8002c30:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8002c32:	23ff      	movs	r3, #255	; 0xff
 8002c34:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <create_pmt_packet+0x84>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <create_pmt_packet+0x84>)
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8002c4a:	7a3b      	ldrb	r3, [r7, #8]
 8002c4c:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8002c4e:	7a7b      	ldrb	r3, [r7, #9]
 8002c50:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8002c52:	793b      	ldrb	r3, [r7, #4]
 8002c54:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8002c56:	797b      	ldrb	r3, [r7, #5]
 8002c58:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8002c5a:	79bb      	ldrb	r3, [r7, #6]
 8002c5c:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8002c62:	f107 010c 	add.w	r1, r7, #12
 8002c66:	2364      	movs	r3, #100	; 0x64
 8002c68:	220a      	movs	r2, #10
 8002c6a:	4808      	ldr	r0, [pc, #32]	; (8002c8c <create_pmt_packet+0x88>)
 8002c6c:	f010 fb4e 	bl	801330c <HAL_UART_Transmit>

	pmt_seq++;
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <create_pmt_packet+0x84>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <create_pmt_packet+0x84>)
 8002c7a:	801a      	strh	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	58020000 	.word	0x58020000
 8002c88:	24001aea 	.word	0x24001aea
 8002c8c:	24001e3c 	.word	0x24001e3c

08002c90 <create_erpa_packet>:


void create_erpa_packet() {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002c96:	bf00      	nop
 8002c98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c9c:	4828      	ldr	r0, [pc, #160]	; (8002d40 <create_erpa_packet+0xb0>)
 8002c9e:	f007 fc89 	bl	800a5b4 <HAL_GPIO_ReadPin>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f7      	bne.n	8002c98 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002ca8:	23ff      	movs	r3, #255	; 0xff
 8002caa:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 fa60 	bl	8004174 <get_uptime>
	sweep_step = get_current_step();
 8002cb4:	f7ff ff18 	bl	8002ae8 <get_current_step>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 faad 	bl	8003220 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002cc6:	f107 0308 	add.w	r3, r7, #8
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fac8 	bl	8003260 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002cd0:	23ee      	movs	r3, #238	; 0xee
 8002cd2:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8002cd4:	23ee      	movs	r3, #238	; 0xee
 8002cd6:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <create_erpa_packet+0xb4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <create_erpa_packet+0xb4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8002cec:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <create_erpa_packet+0xb4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8002cf4:	7ffb      	ldrb	r3, [r7, #31]
 8002cf6:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002cf8:	893b      	ldrh	r3, [r7, #8]
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002d02:	893b      	ldrh	r3, [r7, #8]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002d08:	7b3b      	ldrb	r3, [r7, #12]
 8002d0a:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002d0c:	7b7b      	ldrb	r3, [r7, #13]
 8002d0e:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8002d10:	793b      	ldrb	r3, [r7, #4]
 8002d12:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8002d14:	797b      	ldrb	r3, [r7, #5]
 8002d16:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8002d18:	79bb      	ldrb	r3, [r7, #6]
 8002d1a:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8002d20:	f107 0110 	add.w	r1, r7, #16
 8002d24:	2364      	movs	r3, #100	; 0x64
 8002d26:	220e      	movs	r2, #14
 8002d28:	4807      	ldr	r0, [pc, #28]	; (8002d48 <create_erpa_packet+0xb8>)
 8002d2a:	f010 faef 	bl	801330c <HAL_UART_Transmit>

	erpa_seq++;
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <create_erpa_packet+0xb4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <create_erpa_packet+0xb4>)
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	3720      	adds	r7, #32
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	58020400 	.word	0x58020400
 8002d44:	24001aec 	.word	0x24001aec
 8002d48:	24001e3c 	.word	0x24001e3c

08002d4c <create_hk_packet>:


void create_hk_packet() {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b094      	sub	sp, #80	; 0x50
 8002d50:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 fa0d 	bl	8004174 <get_uptime>
	get_timestamp(timestamp);
 8002d5a:	f107 0308 	add.w	r3, r7, #8
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fa58 	bl	8004214 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002d64:	f001 feb2 	bl	8004acc <get_rail_monitor>
 8002d68:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002d6a:	23dd      	movs	r3, #221	; 0xdd
 8002d6c:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002d6e:	23dd      	movs	r3, #221	; 0xdd
 8002d70:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002d72:	4b9b      	ldr	r3, [pc, #620]	; (8002fe0 <create_hk_packet+0x294>)
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002d7e:	4b98      	ldr	r3, [pc, #608]	; (8002fe0 <create_hk_packet+0x294>)
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d88:	889b      	ldrh	r3, [r3, #4]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8002d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d94:	889b      	ldrh	r3, [r3, #4]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9c:	330a      	adds	r3, #10
 8002d9e:	889b      	ldrh	r3, [r3, #4]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002daa:	330a      	adds	r3, #10
 8002dac:	889b      	ldrh	r3, [r3, #4]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db4:	3314      	adds	r3, #20
 8002db6:	889b      	ldrh	r3, [r3, #4]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc2:	3314      	adds	r3, #20
 8002dc4:	889b      	ldrh	r3, [r3, #4]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dcc:	331e      	adds	r3, #30
 8002dce:	889b      	ldrh	r3, [r3, #4]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8002dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dda:	331e      	adds	r3, #30
 8002ddc:	889b      	ldrh	r3, [r3, #4]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de4:	3328      	adds	r3, #40	; 0x28
 8002de6:	889b      	ldrh	r3, [r3, #4]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8002df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df4:	3328      	adds	r3, #40	; 0x28
 8002df6:	889b      	ldrh	r3, [r3, #4]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e00:	3332      	adds	r3, #50	; 0x32
 8002e02:	889b      	ldrh	r3, [r3, #4]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8002e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e10:	3332      	adds	r3, #50	; 0x32
 8002e12:	889b      	ldrh	r3, [r3, #4]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1c:	333c      	adds	r3, #60	; 0x3c
 8002e1e:	889b      	ldrh	r3, [r3, #4]
 8002e20:	0a1b      	lsrs	r3, r3, #8
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2c:	333c      	adds	r3, #60	; 0x3c
 8002e2e:	889b      	ldrh	r3, [r3, #4]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e38:	3346      	adds	r3, #70	; 0x46
 8002e3a:	889b      	ldrh	r3, [r3, #4]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8002e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e48:	3346      	adds	r3, #70	; 0x46
 8002e4a:	889b      	ldrh	r3, [r3, #4]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e54:	3350      	adds	r3, #80	; 0x50
 8002e56:	889b      	ldrh	r3, [r3, #4]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8002e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e64:	3350      	adds	r3, #80	; 0x50
 8002e66:	889b      	ldrh	r3, [r3, #4]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e70:	335a      	adds	r3, #90	; 0x5a
 8002e72:	889b      	ldrh	r3, [r3, #4]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8002e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e80:	335a      	adds	r3, #90	; 0x5a
 8002e82:	889b      	ldrh	r3, [r3, #4]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8c:	3364      	adds	r3, #100	; 0x64
 8002e8e:	889b      	ldrh	r3, [r3, #4]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8002e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9c:	3364      	adds	r3, #100	; 0x64
 8002e9e:	889b      	ldrh	r3, [r3, #4]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea8:	336e      	adds	r3, #110	; 0x6e
 8002eaa:	889b      	ldrh	r3, [r3, #4]
 8002eac:	0a1b      	lsrs	r3, r3, #8
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8002eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb8:	336e      	adds	r3, #110	; 0x6e
 8002eba:	889b      	ldrh	r3, [r3, #4]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8002ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec4:	3378      	adds	r3, #120	; 0x78
 8002ec6:	889b      	ldrh	r3, [r3, #4]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed4:	3378      	adds	r3, #120	; 0x78
 8002ed6:	889b      	ldrh	r3, [r3, #4]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8002ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee0:	3382      	adds	r3, #130	; 0x82
 8002ee2:	889b      	ldrh	r3, [r3, #4]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8002eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef0:	3382      	adds	r3, #130	; 0x82
 8002ef2:	889b      	ldrh	r3, [r3, #4]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efc:	338c      	adds	r3, #140	; 0x8c
 8002efe:	889b      	ldrh	r3, [r3, #4]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8002f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0c:	338c      	adds	r3, #140	; 0x8c
 8002f0e:	889b      	ldrh	r3, [r3, #4]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8002f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f18:	3396      	adds	r3, #150	; 0x96
 8002f1a:	889b      	ldrh	r3, [r3, #4]
 8002f1c:	0a1b      	lsrs	r3, r3, #8
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8002f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f28:	3396      	adds	r3, #150	; 0x96
 8002f2a:	889b      	ldrh	r3, [r3, #4]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8002f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f34:	33a0      	adds	r3, #160	; 0xa0
 8002f36:	889b      	ldrh	r3, [r3, #4]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8002f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f44:	33a0      	adds	r3, #160	; 0xa0
 8002f46:	889b      	ldrh	r3, [r3, #4]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f50:	33aa      	adds	r3, #170	; 0xaa
 8002f52:	889b      	ldrh	r3, [r3, #4]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f60:	33aa      	adds	r3, #170	; 0xaa
 8002f62:	889b      	ldrh	r3, [r3, #4]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8002f6a:	7a3b      	ldrb	r3, [r7, #8]
 8002f6c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8002f70:	7a7b      	ldrb	r3, [r7, #9]
 8002f72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8002f76:	7abb      	ldrb	r3, [r7, #10]
 8002f78:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8002f82:	7b3b      	ldrb	r3, [r7, #12]
 8002f84:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8002f88:	7b7b      	ldrb	r3, [r7, #13]
 8002f8a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8002f8e:	7bbb      	ldrb	r3, [r7, #14]
 8002f90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8002f9a:	7c3b      	ldrb	r3, [r7, #16]
 8002f9c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8002fa0:	7c7b      	ldrb	r3, [r7, #17]
 8002fa2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8002fa6:	793b      	ldrb	r3, [r7, #4]
 8002fa8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8002fac:	797b      	ldrb	r3, [r7, #5]
 8002fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8002fb2:	79bb      	ldrb	r3, [r7, #6]
 8002fb4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8002fbe:	f107 0114 	add.w	r1, r7, #20
 8002fc2:	2364      	movs	r3, #100	; 0x64
 8002fc4:	2236      	movs	r2, #54	; 0x36
 8002fc6:	4807      	ldr	r0, [pc, #28]	; (8002fe4 <create_hk_packet+0x298>)
 8002fc8:	f010 f9a0 	bl	801330c <HAL_UART_Transmit>

	hk_seq++;
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <create_hk_packet+0x294>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <create_hk_packet+0x294>)
 8002fd6:	801a      	strh	r2, [r3, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	3750      	adds	r7, #80	; 0x50
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	24001af0 	.word	0x24001af0
 8002fe4:	24001e3c 	.word	0x24001e3c

08002fe8 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <reset_packet_sequence_numbers+0x20>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <reset_packet_sequence_numbers+0x24>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <reset_packet_sequence_numbers+0x28>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	801a      	strh	r2, [r3, #0]
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	24001aea 	.word	0x24001aea
 800300c:	24001aec 	.word	0x24001aec
 8003010:	24001af0 	.word	0x24001af0

08003014 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800301a:	1d3b      	adds	r3, r7, #4
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003028:	2300      	movs	r3, #0
 800302a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800302c:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <MX_RTC_Init+0xb4>)
 800302e:	4a27      	ldr	r2, [pc, #156]	; (80030cc <MX_RTC_Init+0xb8>)
 8003030:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003032:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <MX_RTC_Init+0xb4>)
 8003034:	2200      	movs	r2, #0
 8003036:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003038:	4b23      	ldr	r3, [pc, #140]	; (80030c8 <MX_RTC_Init+0xb4>)
 800303a:	2263      	movs	r2, #99	; 0x63
 800303c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <MX_RTC_Init+0xb4>)
 8003040:	f242 720f 	movw	r2, #9999	; 0x270f
 8003044:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <MX_RTC_Init+0xb4>)
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800304c:	4b1e      	ldr	r3, [pc, #120]	; (80030c8 <MX_RTC_Init+0xb4>)
 800304e:	2200      	movs	r2, #0
 8003050:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <MX_RTC_Init+0xb4>)
 8003054:	2200      	movs	r2, #0
 8003056:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <MX_RTC_Init+0xb4>)
 800305a:	2200      	movs	r2, #0
 800305c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800305e:	481a      	ldr	r0, [pc, #104]	; (80030c8 <MX_RTC_Init+0xb4>)
 8003060:	f00d fc3a 	bl	80108d8 <HAL_RTC_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800306a:	f7ff fdbd 	bl	8002be8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800306e:	2300      	movs	r3, #0
 8003070:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003072:	2300      	movs	r3, #0
 8003074:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003076:	2300      	movs	r3, #0
 8003078:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	2201      	movs	r2, #1
 8003086:	4619      	mov	r1, r3
 8003088:	480f      	ldr	r0, [pc, #60]	; (80030c8 <MX_RTC_Init+0xb4>)
 800308a:	f00d fca7 	bl	80109dc <HAL_RTC_SetTime>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003094:	f7ff fda8 	bl	8002be8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003098:	2301      	movs	r3, #1
 800309a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800309c:	2301      	movs	r3, #1
 800309e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80030a0:	2301      	movs	r3, #1
 80030a2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80030a8:	463b      	mov	r3, r7
 80030aa:	2201      	movs	r2, #1
 80030ac:	4619      	mov	r1, r3
 80030ae:	4806      	ldr	r0, [pc, #24]	; (80030c8 <MX_RTC_Init+0xb4>)
 80030b0:	f00d fd8e 	bl	8010bd0 <HAL_RTC_SetDate>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80030ba:	f7ff fd95 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	24001af4 	.word	0x24001af4
 80030cc:	58004000 	.word	0x58004000

080030d0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b0b2      	sub	sp, #200	; 0xc8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d8:	f107 0308 	add.w	r3, r7, #8
 80030dc:	22c0      	movs	r2, #192	; 0xc0
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f016 f93b 	bl	801935c <memset>
  if(rtcHandle->Instance==RTC)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a10      	ldr	r2, [pc, #64]	; (800312c <HAL_RTC_MspInit+0x5c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d118      	bne.n	8003122 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_RTC_MspInit+0x60>)
 80030fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	4618      	mov	r0, r3
 8003108:	f00a fee8 	bl	800dedc <HAL_RCCEx_PeriphCLKConfig>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003112:	f7ff fd69 	bl	8002be8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <HAL_RTC_MspInit+0x64>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a06      	ldr	r2, [pc, #24]	; (8003134 <HAL_RTC_MspInit+0x64>)
 800311c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003122:	bf00      	nop
 8003124:	37c8      	adds	r7, #200	; 0xc8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	58004000 	.word	0x58004000
 8003130:	00019300 	.word	0x00019300
 8003134:	58024400 	.word	0x58024400

08003138 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003142:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003146:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800314a:	481f      	ldr	r0, [pc, #124]	; (80031c8 <init_adc_dma+0x90>)
 800314c:	f003 f92a 	bl	80063a4 <HAL_ADCEx_Calibration_Start>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003156:	f7ff fd47 	bl	8002be8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800315a:	220b      	movs	r2, #11
 800315c:	491b      	ldr	r1, [pc, #108]	; (80031cc <init_adc_dma+0x94>)
 800315e:	481a      	ldr	r0, [pc, #104]	; (80031c8 <init_adc_dma+0x90>)
 8003160:	f002 f9fe 	bl	8005560 <HAL_ADC_Start_DMA>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800316a:	f7ff fd3d 	bl	8002be8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800316e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003172:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003176:	4816      	ldr	r0, [pc, #88]	; (80031d0 <init_adc_dma+0x98>)
 8003178:	f003 f914 	bl	80063a4 <HAL_ADCEx_Calibration_Start>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003182:	f7ff fd31 	bl	8002be8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003186:	2204      	movs	r2, #4
 8003188:	4912      	ldr	r1, [pc, #72]	; (80031d4 <init_adc_dma+0x9c>)
 800318a:	4811      	ldr	r0, [pc, #68]	; (80031d0 <init_adc_dma+0x98>)
 800318c:	f002 f9e8 	bl	8005560 <HAL_ADC_Start_DMA>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003196:	f7ff fd27 	bl	8002be8 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <init_adc_dma+0xa0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <init_adc_dma+0xa0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031a8:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 80031aa:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <init_adc_dma+0xa4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <init_adc_dma+0xa4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b8:	601a      	str	r2, [r3, #0]


	status = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	71fb      	strb	r3, [r7, #7]

	return status;
 80031be:	79fb      	ldrb	r3, [r7, #7]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	2400015c 	.word	0x2400015c
 80031cc:	24001b20 	.word	0x24001b20
 80031d0:	240001c0 	.word	0x240001c0
 80031d4:	24001b40 	.word	0x24001b40
 80031d8:	24001bdc 	.word	0x24001bdc
 80031dc:	24001b54 	.word	0x24001b54

080031e0 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 80031e8:	2201      	movs	r2, #1
 80031ea:	490b      	ldr	r1, [pc, #44]	; (8003218 <sample_pmt_spi+0x38>)
 80031ec:	480b      	ldr	r0, [pc, #44]	; (800321c <sample_pmt_spi+0x3c>)
 80031ee:	f00d ffb9 	bl	8011164 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <sample_pmt_spi+0x38>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <sample_pmt_spi+0x38>)
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3301      	adds	r3, #1
 800320c:	7bba      	ldrb	r2, [r7, #14]
 800320e:	701a      	strb	r2, [r3, #0]
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	24001b4c 	.word	0x24001b4c
 800321c:	24001b54 	.word	0x24001b54

08003220 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8003228:	2201      	movs	r2, #1
 800322a:	490b      	ldr	r1, [pc, #44]	; (8003258 <sample_erpa_spi+0x38>)
 800322c:	480b      	ldr	r0, [pc, #44]	; (800325c <sample_erpa_spi+0x3c>)
 800322e:	f00d ff99 	bl	8011164 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <sample_erpa_spi+0x38>)
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	b29b      	uxth	r3, r3
 800323a:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <sample_erpa_spi+0x38>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3301      	adds	r3, #1
 800324c:	7bba      	ldrb	r2, [r7, #14]
 800324e:	701a      	strb	r2, [r3, #0]
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	24001b48 	.word	0x24001b48
 800325c:	24001bdc 	.word	0x24001bdc

08003260 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <sample_erpa_adc+0x20>)
 800326a:	885b      	ldrh	r3, [r3, #2]
 800326c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	89fa      	ldrh	r2, [r7, #14]
 8003272:	801a      	strh	r2, [r3, #0]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	24001b20 	.word	0x24001b20

08003284 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800328c:	2390      	movs	r3, #144	; 0x90
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f8a2 	bl	80033d8 <poll_i2c_sensor>
 8003294:	4603      	mov	r3, r0
 8003296:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8003298:	2394      	movs	r3, #148	; 0x94
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f89c 	bl	80033d8 <poll_i2c_sensor>
 80032a0:	4603      	mov	r3, r0
 80032a2:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80032a4:	2392      	movs	r3, #146	; 0x92
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f896 	bl	80033d8 <poll_i2c_sensor>
 80032ac:	4603      	mov	r3, r0
 80032ae:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80032b0:	2396      	movs	r3, #150	; 0x96
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f890 	bl	80033d8 <poll_i2c_sensor>
 80032b8:	4603      	mov	r3, r0
 80032ba:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	89fa      	ldrh	r2, [r7, #14]
 80032c0:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3302      	adds	r3, #2
 80032c6:	89ba      	ldrh	r2, [r7, #12]
 80032c8:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	897a      	ldrh	r2, [r7, #10]
 80032d0:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3306      	adds	r3, #6
 80032d6:	893a      	ldrh	r2, [r7, #8]
 80032d8:	801a      	strh	r2, [r3, #0]
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	; 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <sample_hk_adc1+0xa0>)
 80032ee:	8a9b      	ldrh	r3, [r3, #20]
 80032f0:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <sample_hk_adc1+0xa0>)
 80032f4:	8a1b      	ldrh	r3, [r3, #16]
 80032f6:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <sample_hk_adc1+0xa0>)
 80032fa:	899b      	ldrh	r3, [r3, #12]
 80032fc:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80032fe:	4b21      	ldr	r3, [pc, #132]	; (8003384 <sample_hk_adc1+0xa0>)
 8003300:	8a5b      	ldrh	r3, [r3, #18]
 8003302:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8003304:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <sample_hk_adc1+0xa0>)
 8003306:	889b      	ldrh	r3, [r3, #4]
 8003308:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800330a:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <sample_hk_adc1+0xa0>)
 800330c:	88db      	ldrh	r3, [r3, #6]
 800330e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8003310:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <sample_hk_adc1+0xa0>)
 8003312:	89db      	ldrh	r3, [r3, #14]
 8003314:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <sample_hk_adc1+0xa0>)
 8003318:	891b      	ldrh	r3, [r3, #8]
 800331a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <sample_hk_adc1+0xa0>)
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8003322:	4b18      	ldr	r3, [pc, #96]	; (8003384 <sample_hk_adc1+0xa0>)
 8003324:	895b      	ldrh	r3, [r3, #10]
 8003326:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8bfa      	ldrh	r2, [r7, #30]
 800332c:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3302      	adds	r3, #2
 8003332:	8bba      	ldrh	r2, [r7, #28]
 8003334:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3304      	adds	r3, #4
 800333a:	8b7a      	ldrh	r2, [r7, #26]
 800333c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3306      	adds	r3, #6
 8003342:	8b3a      	ldrh	r2, [r7, #24]
 8003344:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3308      	adds	r3, #8
 800334a:	8afa      	ldrh	r2, [r7, #22]
 800334c:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	330a      	adds	r3, #10
 8003352:	8aba      	ldrh	r2, [r7, #20]
 8003354:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	330c      	adds	r3, #12
 800335a:	8a7a      	ldrh	r2, [r7, #18]
 800335c:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	330e      	adds	r3, #14
 8003362:	8a3a      	ldrh	r2, [r7, #16]
 8003364:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3310      	adds	r3, #16
 800336a:	89fa      	ldrh	r2, [r7, #14]
 800336c:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3312      	adds	r3, #18
 8003372:	89ba      	ldrh	r2, [r7, #12]
 8003374:	801a      	strh	r2, [r3, #0]
}
 8003376:	bf00      	nop
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	24001b20 	.word	0x24001b20

08003388 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8003390:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <sample_hk_adc3+0x4c>)
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <sample_hk_adc3+0x4c>)
 8003398:	885b      	ldrh	r3, [r3, #2]
 800339a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <sample_hk_adc3+0x4c>)
 800339e:	889b      	ldrh	r3, [r3, #4]
 80033a0:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <sample_hk_adc3+0x4c>)
 80033a4:	88db      	ldrh	r3, [r3, #6]
 80033a6:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	89fa      	ldrh	r2, [r7, #14]
 80033ac:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3302      	adds	r3, #2
 80033b2:	89ba      	ldrh	r2, [r7, #12]
 80033b4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3304      	adds	r3, #4
 80033ba:	897a      	ldrh	r2, [r7, #10]
 80033bc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3306      	adds	r3, #6
 80033c2:	893a      	ldrh	r2, [r7, #8]
 80033c4:	801a      	strh	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	24001b40 	.word	0x24001b40

080033d8 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 80033e2:	2200      	movs	r2, #0
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <poll_i2c_sensor+0x90>)
 80033e6:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	b299      	uxth	r1, r3
 80033ec:	2301      	movs	r3, #1
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <poll_i2c_sensor+0x90>)
 80033f0:	481e      	ldr	r0, [pc, #120]	; (800346c <poll_i2c_sensor+0x94>)
 80033f2:	f007 f9ad 	bl	800a750 <HAL_I2C_Master_Transmit_DMA>
 80033f6:	4603      	mov	r3, r0
 80033f8:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80033fa:	7b7b      	ldrb	r3, [r7, #13]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8003400:	481b      	ldr	r0, [pc, #108]	; (8003470 <poll_i2c_sensor+0x98>)
 8003402:	f016 f821 	bl	8019448 <puts>
 8003406:	e028      	b.n	800345a <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8003408:	bf00      	nop
 800340a:	4818      	ldr	r0, [pc, #96]	; (800346c <poll_i2c_sensor+0x94>)
 800340c:	f007 fc87 	bl	800ad1e <HAL_I2C_GetState>
 8003410:	4603      	mov	r3, r0
 8003412:	2b20      	cmp	r3, #32
 8003414:	d1f9      	bne.n	800340a <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	b299      	uxth	r1, r3
 800341a:	2302      	movs	r3, #2
 800341c:	4a12      	ldr	r2, [pc, #72]	; (8003468 <poll_i2c_sensor+0x90>)
 800341e:	4813      	ldr	r0, [pc, #76]	; (800346c <poll_i2c_sensor+0x94>)
 8003420:	f007 faaa 	bl	800a978 <HAL_I2C_Master_Receive_DMA>
 8003424:	4603      	mov	r3, r0
 8003426:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8003428:	7b7b      	ldrb	r3, [r7, #13]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 800342e:	4811      	ldr	r0, [pc, #68]	; (8003474 <poll_i2c_sensor+0x9c>)
 8003430:	f016 f80a 	bl	8019448 <puts>
 8003434:	e011      	b.n	800345a <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8003436:	bf00      	nop
 8003438:	480c      	ldr	r0, [pc, #48]	; (800346c <poll_i2c_sensor+0x94>)
 800343a:	f007 fc70 	bl	800ad1e <HAL_I2C_GetState>
 800343e:	4603      	mov	r3, r0
 8003440:	2b20      	cmp	r3, #32
 8003442:	d1f9      	bne.n	8003438 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <poll_i2c_sensor+0x90>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 800344c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003450:	4a05      	ldr	r2, [pc, #20]	; (8003468 <poll_i2c_sensor+0x90>)
 8003452:	7852      	ldrb	r2, [r2, #1]
 8003454:	4313      	orrs	r3, r2
 8003456:	10db      	asrs	r3, r3, #3
 8003458:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 800345a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	24001b50 	.word	0x24001b50
 800346c:	2400193c 	.word	0x2400193c
 8003470:	08019fb0 	.word	0x08019fb0
 8003474:	08019fc0 	.word	0x08019fc0

08003478 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <MX_SPI1_Init+0xa8>)
 800347e:	4a29      	ldr	r2, [pc, #164]	; (8003524 <MX_SPI1_Init+0xac>)
 8003480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003482:	4b27      	ldr	r3, [pc, #156]	; (8003520 <MX_SPI1_Init+0xa8>)
 8003484:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800348a:	4b25      	ldr	r3, [pc, #148]	; (8003520 <MX_SPI1_Init+0xa8>)
 800348c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003490:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003492:	4b23      	ldr	r3, [pc, #140]	; (8003520 <MX_SPI1_Init+0xa8>)
 8003494:	220f      	movs	r2, #15
 8003496:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <MX_SPI1_Init+0xa8>)
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034a4:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80034ac:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034ae:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80034b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034ba:	4b19      	ldr	r3, [pc, #100]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80034c6:	4b16      	ldr	r3, [pc, #88]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034d2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034dc:	2200      	movs	r2, #0
 80034de:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <MX_SPI1_Init+0xa8>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <MX_SPI1_Init+0xa8>)
 8003500:	2200      	movs	r2, #0
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <MX_SPI1_Init+0xa8>)
 8003506:	2200      	movs	r2, #0
 8003508:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800350a:	4805      	ldr	r0, [pc, #20]	; (8003520 <MX_SPI1_Init+0xa8>)
 800350c:	f00d fd06 	bl	8010f1c <HAL_SPI_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8003516:	f7ff fb67 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	24001b54 	.word	0x24001b54
 8003524:	40013000 	.word	0x40013000

08003528 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <MX_SPI2_Init+0xa8>)
 800352e:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <MX_SPI2_Init+0xac>)
 8003530:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003532:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <MX_SPI2_Init+0xa8>)
 8003534:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003538:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800353a:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <MX_SPI2_Init+0xa8>)
 800353c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003540:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <MX_SPI2_Init+0xa8>)
 8003544:	220f      	movs	r2, #15
 8003546:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <MX_SPI2_Init+0xa8>)
 800354a:	2200      	movs	r2, #0
 800354c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <MX_SPI2_Init+0xa8>)
 8003550:	2200      	movs	r2, #0
 8003552:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <MX_SPI2_Init+0xa8>)
 8003556:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800355a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800355c:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <MX_SPI2_Init+0xa8>)
 800355e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003562:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <MX_SPI2_Init+0xa8>)
 8003566:	2200      	movs	r2, #0
 8003568:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800356a:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <MX_SPI2_Init+0xa8>)
 800356c:	2200      	movs	r2, #0
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003570:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <MX_SPI2_Init+0xa8>)
 8003572:	2200      	movs	r2, #0
 8003574:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003576:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <MX_SPI2_Init+0xa8>)
 8003578:	2200      	movs	r2, #0
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <MX_SPI2_Init+0xa8>)
 800357e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003582:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <MX_SPI2_Init+0xa8>)
 8003586:	2200      	movs	r2, #0
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <MX_SPI2_Init+0xa8>)
 800358c:	2200      	movs	r2, #0
 800358e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <MX_SPI2_Init+0xa8>)
 8003592:	2200      	movs	r2, #0
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <MX_SPI2_Init+0xa8>)
 8003598:	2200      	movs	r2, #0
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <MX_SPI2_Init+0xa8>)
 800359e:	2200      	movs	r2, #0
 80035a0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <MX_SPI2_Init+0xa8>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <MX_SPI2_Init+0xa8>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <MX_SPI2_Init+0xa8>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <MX_SPI2_Init+0xa8>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035ba:	4805      	ldr	r0, [pc, #20]	; (80035d0 <MX_SPI2_Init+0xa8>)
 80035bc:	f00d fcae 	bl	8010f1c <HAL_SPI_Init>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80035c6:	f7ff fb0f 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	24001bdc 	.word	0x24001bdc
 80035d4:	40003800 	.word	0x40003800

080035d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b0bc      	sub	sp, #240	; 0xf0
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035f0:	f107 0318 	add.w	r3, r7, #24
 80035f4:	22c0      	movs	r2, #192	; 0xc0
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f015 feaf 	bl	801935c <memset>
  if(spiHandle->Instance==SPI1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a83      	ldr	r2, [pc, #524]	; (8003810 <HAL_SPI_MspInit+0x238>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d17c      	bne.n	8003702 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003614:	2300      	movs	r3, #0
 8003616:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003618:	f107 0318 	add.w	r3, r7, #24
 800361c:	4618      	mov	r0, r3
 800361e:	f00a fc5d 	bl	800dedc <HAL_RCCEx_PeriphCLKConfig>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003628:	f7ff fade 	bl	8002be8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800362c:	4b79      	ldr	r3, [pc, #484]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 800362e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003632:	4a78      	ldr	r2, [pc, #480]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 8003634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003638:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800363c:	4b75      	ldr	r3, [pc, #468]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 800363e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	4b72      	ldr	r3, [pc, #456]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 800364c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003650:	4a70      	ldr	r2, [pc, #448]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 8003652:	f043 0302 	orr.w	r3, r3, #2
 8003656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800365a:	4b6e      	ldr	r3, [pc, #440]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 800365c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003668:	2318      	movs	r3, #24
 800366a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003680:	2305      	movs	r3, #5
 8003682:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003686:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800368a:	4619      	mov	r1, r3
 800368c:	4862      	ldr	r0, [pc, #392]	; (8003818 <HAL_SPI_MspInit+0x240>)
 800368e:	f006 fde1 	bl	800a254 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8003692:	4b62      	ldr	r3, [pc, #392]	; (800381c <HAL_SPI_MspInit+0x244>)
 8003694:	4a62      	ldr	r2, [pc, #392]	; (8003820 <HAL_SPI_MspInit+0x248>)
 8003696:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003698:	4b60      	ldr	r3, [pc, #384]	; (800381c <HAL_SPI_MspInit+0x244>)
 800369a:	2225      	movs	r2, #37	; 0x25
 800369c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800369e:	4b5f      	ldr	r3, [pc, #380]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a4:	4b5d      	ldr	r3, [pc, #372]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036aa:	4b5c      	ldr	r3, [pc, #368]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036b2:	4b5a      	ldr	r3, [pc, #360]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036b8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036ba:	4b58      	ldr	r3, [pc, #352]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80036c2:	4b56      	ldr	r3, [pc, #344]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036c8:	4b54      	ldr	r3, [pc, #336]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ce:	4b53      	ldr	r3, [pc, #332]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80036d4:	4851      	ldr	r0, [pc, #324]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036d6:	f003 fc8d 	bl	8006ff4 <HAL_DMA_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80036e0:	f7ff fa82 	bl	8002be8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a4d      	ldr	r2, [pc, #308]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036e8:	67da      	str	r2, [r3, #124]	; 0x7c
 80036ea:	4a4c      	ldr	r2, [pc, #304]	; (800381c <HAL_SPI_MspInit+0x244>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	2105      	movs	r1, #5
 80036f4:	2023      	movs	r0, #35	; 0x23
 80036f6:	f003 f84f 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80036fa:	2023      	movs	r0, #35	; 0x23
 80036fc:	f003 f866 	bl	80067cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003700:	e081      	b.n	8003806 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a47      	ldr	r2, [pc, #284]	; (8003824 <HAL_SPI_MspInit+0x24c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d17c      	bne.n	8003806 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800370c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003718:	2300      	movs	r3, #0
 800371a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800371c:	f107 0318 	add.w	r3, r7, #24
 8003720:	4618      	mov	r0, r3
 8003722:	f00a fbdb 	bl	800dedc <HAL_RCCEx_PeriphCLKConfig>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 800372c:	f7ff fa5c 	bl	8002be8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003730:	4b38      	ldr	r3, [pc, #224]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 8003732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003736:	4a37      	ldr	r2, [pc, #220]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 8003738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003740:	4b34      	ldr	r3, [pc, #208]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 8003742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374e:	4b31      	ldr	r3, [pc, #196]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 8003750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003754:	4a2f      	ldr	r2, [pc, #188]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 8003756:	f043 0302 	orr.w	r3, r3, #2
 800375a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_SPI_MspInit+0x23c>)
 8003760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800376c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003770:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	2302      	movs	r3, #2
 8003776:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003786:	2305      	movs	r3, #5
 8003788:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003790:	4619      	mov	r1, r3
 8003792:	4821      	ldr	r0, [pc, #132]	; (8003818 <HAL_SPI_MspInit+0x240>)
 8003794:	f006 fd5e 	bl	800a254 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003798:	4b23      	ldr	r3, [pc, #140]	; (8003828 <HAL_SPI_MspInit+0x250>)
 800379a:	4a24      	ldr	r2, [pc, #144]	; (800382c <HAL_SPI_MspInit+0x254>)
 800379c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800379e:	4b22      	ldr	r3, [pc, #136]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037a0:	2227      	movs	r2, #39	; 0x27
 80037a2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037a4:	4b20      	ldr	r3, [pc, #128]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037aa:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037b6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037be:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037c6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80037c8:	4b17      	ldr	r3, [pc, #92]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037ce:	4b16      	ldr	r3, [pc, #88]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037d4:	4b14      	ldr	r3, [pc, #80]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80037da:	4813      	ldr	r0, [pc, #76]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037dc:	f003 fc0a 	bl	8006ff4 <HAL_DMA_Init>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_SPI_MspInit+0x212>
      Error_Handler();
 80037e6:	f7ff f9ff 	bl	8002be8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037ee:	67da      	str	r2, [r3, #124]	; 0x7c
 80037f0:	4a0d      	ldr	r2, [pc, #52]	; (8003828 <HAL_SPI_MspInit+0x250>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2105      	movs	r1, #5
 80037fa:	2024      	movs	r0, #36	; 0x24
 80037fc:	f002 ffcc 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003800:	2024      	movs	r0, #36	; 0x24
 8003802:	f002 ffe3 	bl	80067cc <HAL_NVIC_EnableIRQ>
}
 8003806:	bf00      	nop
 8003808:	37f0      	adds	r7, #240	; 0xf0
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40013000 	.word	0x40013000
 8003814:	58024400 	.word	0x58024400
 8003818:	58020400 	.word	0x58020400
 800381c:	24001c64 	.word	0x24001c64
 8003820:	40020070 	.word	0x40020070
 8003824:	40003800 	.word	0x40003800
 8003828:	24001cdc 	.word	0x24001cdc
 800382c:	40020058 	.word	0x40020058

08003830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <HAL_MspInit+0x38>)
 8003838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <HAL_MspInit+0x38>)
 800383e:	f043 0302 	orr.w	r3, r3, #2
 8003842:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_MspInit+0x38>)
 8003848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003854:	2200      	movs	r2, #0
 8003856:	210f      	movs	r1, #15
 8003858:	f06f 0001 	mvn.w	r0, #1
 800385c:	f002 ff9c 	bl	8006798 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	58024400 	.word	0x58024400

0800386c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b090      	sub	sp, #64	; 0x40
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b0f      	cmp	r3, #15
 8003878:	d827      	bhi.n	80038ca <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800387a:	2200      	movs	r2, #0
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	2036      	movs	r0, #54	; 0x36
 8003880:	f002 ff8a 	bl	8006798 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003884:	2036      	movs	r0, #54	; 0x36
 8003886:	f002 ffa1 	bl	80067cc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800388a:	4a29      	ldr	r2, [pc, #164]	; (8003930 <HAL_InitTick+0xc4>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003890:	4b28      	ldr	r3, [pc, #160]	; (8003934 <HAL_InitTick+0xc8>)
 8003892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003896:	4a27      	ldr	r2, [pc, #156]	; (8003934 <HAL_InitTick+0xc8>)
 8003898:	f043 0310 	orr.w	r3, r3, #16
 800389c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038a0:	4b24      	ldr	r3, [pc, #144]	; (8003934 <HAL_InitTick+0xc8>)
 80038a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038ae:	f107 0210 	add.w	r2, r7, #16
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f00a facd 	bl	800de58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <HAL_InitTick+0x6a>
 80038c8:	e001      	b.n	80038ce <HAL_InitTick+0x62>
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e02b      	b.n	8003926 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038ce:	f00a fa97 	bl	800de00 <HAL_RCC_GetPCLK1Freq>
 80038d2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80038d4:	e004      	b.n	80038e0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038d6:	f00a fa93 	bl	800de00 <HAL_RCC_GetPCLK1Freq>
 80038da:	4603      	mov	r3, r0
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e2:	4a15      	ldr	r2, [pc, #84]	; (8003938 <HAL_InitTick+0xcc>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	0c9b      	lsrs	r3, r3, #18
 80038ea:	3b01      	subs	r3, #1
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_InitTick+0xd0>)
 80038f0:	4a13      	ldr	r2, [pc, #76]	; (8003940 <HAL_InitTick+0xd4>)
 80038f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <HAL_InitTick+0xd0>)
 80038f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038fc:	4a0f      	ldr	r2, [pc, #60]	; (800393c <HAL_InitTick+0xd0>)
 80038fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003900:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003902:	4b0e      	ldr	r3, [pc, #56]	; (800393c <HAL_InitTick+0xd0>)
 8003904:	2200      	movs	r2, #0
 8003906:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_InitTick+0xd0>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800390e:	480b      	ldr	r0, [pc, #44]	; (800393c <HAL_InitTick+0xd0>)
 8003910:	f00e f8a3 	bl	8011a5a <HAL_TIM_Base_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d104      	bne.n	8003924 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800391a:	4808      	ldr	r0, [pc, #32]	; (800393c <HAL_InitTick+0xd0>)
 800391c:	f00e f8f4 	bl	8011b08 <HAL_TIM_Base_Start_IT>
 8003920:	4603      	mov	r3, r0
 8003922:	e000      	b.n	8003926 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
}
 8003926:	4618      	mov	r0, r3
 8003928:	3740      	adds	r7, #64	; 0x40
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	240000c8 	.word	0x240000c8
 8003934:	58024400 	.word	0x58024400
 8003938:	431bde83 	.word	0x431bde83
 800393c:	24001d54 	.word	0x24001d54
 8003940:	40001000 	.word	0x40001000

08003944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003948:	e7fe      	b.n	8003948 <NMI_Handler+0x4>

0800394a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800394a:	b480      	push	{r7}
 800394c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800394e:	e7fe      	b.n	800394e <HardFault_Handler+0x4>

08003950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003954:	e7fe      	b.n	8003954 <MemManage_Handler+0x4>

08003956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003956:	b480      	push	{r7}
 8003958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800395a:	e7fe      	b.n	800395a <BusFault_Handler+0x4>

0800395c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003960:	e7fe      	b.n	8003960 <UsageFault_Handler+0x4>

08003962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003962:	b480      	push	{r7}
 8003964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003974:	4802      	ldr	r0, [pc, #8]	; (8003980 <DMA1_Stream0_IRQHandler+0x10>)
 8003976:	f004 fe67 	bl	8008648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	24000224 	.word	0x24000224

08003984 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003988:	4802      	ldr	r0, [pc, #8]	; (8003994 <DMA1_Stream1_IRQHandler+0x10>)
 800398a:	f004 fe5d 	bl	8008648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	2400029c 	.word	0x2400029c

08003998 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <DMA1_Stream2_IRQHandler+0x10>)
 800399e:	f004 fe53 	bl	8008648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	24001ed0 	.word	0x24001ed0

080039ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <DMA1_Stream3_IRQHandler+0x10>)
 80039b2:	f004 fe49 	bl	8008648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	24001cdc 	.word	0x24001cdc

080039c0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <DMA1_Stream4_IRQHandler+0x10>)
 80039c6:	f004 fe3f 	bl	8008648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	24001c64 	.word	0x24001c64

080039d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80039d8:	4802      	ldr	r0, [pc, #8]	; (80039e4 <DMA1_Stream5_IRQHandler+0x10>)
 80039da:	f004 fe35 	bl	8008648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	24000328 	.word	0x24000328

080039e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80039ec:	4802      	ldr	r0, [pc, #8]	; (80039f8 <DMA1_Stream6_IRQHandler+0x10>)
 80039ee:	f004 fe2b 	bl	8008648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	24001990 	.word	0x24001990

080039fc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <TIM1_BRK_IRQHandler+0x10>)
 8003a02:	f00e fb98 	bl	8012136 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	24001da4 	.word	0x24001da4

08003a10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a14:	4802      	ldr	r0, [pc, #8]	; (8003a20 <TIM1_UP_IRQHandler+0x10>)
 8003a16:	f00e fb8e 	bl	8012136 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	24001da4 	.word	0x24001da4

08003a24 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003a2a:	f00e fb84 	bl	8012136 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	24001da4 	.word	0x24001da4

08003a38 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <TIM1_CC_IRQHandler+0x10>)
 8003a3e:	f00e fb7a 	bl	8012136 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	24001da4 	.word	0x24001da4

08003a4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <TIM2_IRQHandler+0x10>)
 8003a52:	f00e fb70 	bl	8012136 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	24001df0 	.word	0x24001df0

08003a60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <I2C1_EV_IRQHandler+0x10>)
 8003a66:	f007 f877 	bl	800ab58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	2400193c 	.word	0x2400193c

08003a74 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <I2C1_ER_IRQHandler+0x10>)
 8003a7a:	f007 f887 	bl	800ab8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	2400193c 	.word	0x2400193c

08003a88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <SPI1_IRQHandler+0x10>)
 8003a8e:	f00d fcb1 	bl	80113f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	24001b54 	.word	0x24001b54

08003a9c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <SPI2_IRQHandler+0x10>)
 8003aa2:	f00d fca7 	bl	80113f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	24001bdc 	.word	0x24001bdc

08003ab0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <USART1_IRQHandler+0x10>)
 8003ab6:	f00f fe81 	bl	80137bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	24001e3c 	.word	0x24001e3c

08003ac4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <DMA1_Stream7_IRQHandler+0x10>)
 8003aca:	f004 fdbd 	bl	8008648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	24001a08 	.word	0x24001a08

08003ad8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <TIM6_DAC_IRQHandler+0x20>)
 8003ade:	791b      	ldrb	r3, [r3, #4]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003ae6:	4804      	ldr	r0, [pc, #16]	; (8003af8 <TIM6_DAC_IRQHandler+0x20>)
 8003ae8:	f003 f805 	bl	8006af6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003aec:	4803      	ldr	r0, [pc, #12]	; (8003afc <TIM6_DAC_IRQHandler+0x24>)
 8003aee:	f00e fb22 	bl	8012136 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	24000314 	.word	0x24000314
 8003afc:	24001d54 	.word	0x24001d54

08003b00 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <ITM_SendChar+0x48>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a0e      	ldr	r2, [pc, #56]	; (8003b48 <ITM_SendChar+0x48>)
 8003b10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b14:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <ITM_SendChar+0x4c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <ITM_SendChar+0x4c>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003b22:	bf00      	nop
 8003b24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f8      	beq.n	8003b24 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003b32:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	6013      	str	r3, [r2, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000edfc 	.word	0xe000edfc
 8003b4c:	e0000e00 	.word	0xe0000e00

08003b50 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e00a      	b.n	8003b78 <_read+0x28>
		*ptr++ = __io_getchar();
 8003b62:	f3af 8000 	nop.w
 8003b66:	4601      	mov	r1, r0
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	60ba      	str	r2, [r7, #8]
 8003b6e:	b2ca      	uxtb	r2, r1
 8003b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	3301      	adds	r3, #1
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	dbf0      	blt.n	8003b62 <_read+0x12>
	}

	return len;
 8003b80:	687b      	ldr	r3, [r7, #4]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	e009      	b.n	8003bb0 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	60ba      	str	r2, [r7, #8]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ffab 	bl	8003b00 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	3301      	adds	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	dbf1      	blt.n	8003b9c <_write+0x12>
	}
	return len;
 8003bb8:	687b      	ldr	r3, [r7, #4]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <_close>:

int _close(int file) {
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <_fstat>:

int _fstat(int file, struct stat *st) {
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bea:	605a      	str	r2, [r3, #4]
	return 0;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <_isatty>:

int _isatty(int file) {
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003c02:	2301      	movs	r3, #1
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003c34:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003c40:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <_sbrk+0x64>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <_sbrk+0x64>)
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <_sbrk+0x68>)
 8003c4c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <_sbrk+0x64>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d207      	bcs.n	8003c6c <_sbrk+0x40>
		errno = ENOMEM;
 8003c5c:	f015 fb46 	bl	80192ec <__errno>
 8003c60:	4603      	mov	r3, r0
 8003c62:	220c      	movs	r2, #12
 8003c64:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c6a:	e009      	b.n	8003c80 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <_sbrk+0x64>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003c72:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <_sbrk+0x64>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <_sbrk+0x64>)
 8003c7c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	24080000 	.word	0x24080000
 8003c8c:	00000400 	.word	0x00000400
 8003c90:	24001da0 	.word	0x24001da0
 8003c94:	24006980 	.word	0x24006980

08003c98 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003c9c:	4b37      	ldr	r3, [pc, #220]	; (8003d7c <SystemInit+0xe4>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	4a36      	ldr	r2, [pc, #216]	; (8003d7c <SystemInit+0xe4>)
 8003ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003cac:	4b34      	ldr	r3, [pc, #208]	; (8003d80 <SystemInit+0xe8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	2b06      	cmp	r3, #6
 8003cb6:	d807      	bhi.n	8003cc8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003cb8:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <SystemInit+0xe8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 030f 	bic.w	r3, r3, #15
 8003cc0:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <SystemInit+0xe8>)
 8003cc2:	f043 0307 	orr.w	r3, r3, #7
 8003cc6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003cc8:	4b2e      	ldr	r3, [pc, #184]	; (8003d84 <SystemInit+0xec>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2d      	ldr	r2, [pc, #180]	; (8003d84 <SystemInit+0xec>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <SystemInit+0xec>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003cda:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <SystemInit+0xec>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4929      	ldr	r1, [pc, #164]	; (8003d84 <SystemInit+0xec>)
 8003ce0:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <SystemInit+0xf0>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003ce6:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <SystemInit+0xe8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <SystemInit+0xe8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 030f 	bic.w	r3, r3, #15
 8003cfa:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <SystemInit+0xe8>)
 8003cfc:	f043 0307 	orr.w	r3, r3, #7
 8003d00:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003d02:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <SystemInit+0xec>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003d08:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <SystemInit+0xec>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <SystemInit+0xec>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <SystemInit+0xec>)
 8003d16:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <SystemInit+0xf4>)
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <SystemInit+0xec>)
 8003d1c:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <SystemInit+0xf8>)
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003d20:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <SystemInit+0xec>)
 8003d22:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <SystemInit+0xfc>)
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003d26:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <SystemInit+0xec>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003d2c:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <SystemInit+0xec>)
 8003d2e:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <SystemInit+0xfc>)
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003d32:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <SystemInit+0xec>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003d38:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <SystemInit+0xec>)
 8003d3a:	4a16      	ldr	r2, [pc, #88]	; (8003d94 <SystemInit+0xfc>)
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <SystemInit+0xec>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003d44:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <SystemInit+0xec>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <SystemInit+0xec>)
 8003d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <SystemInit+0xec>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <SystemInit+0x100>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <SystemInit+0x104>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d62:	d202      	bcs.n	8003d6a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <SystemInit+0x108>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <SystemInit+0x10c>)
 8003d6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d70:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d72:	bf00      	nop
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	e000ed00 	.word	0xe000ed00
 8003d80:	52002000 	.word	0x52002000
 8003d84:	58024400 	.word	0x58024400
 8003d88:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d8c:	02020200 	.word	0x02020200
 8003d90:	01ff0000 	.word	0x01ff0000
 8003d94:	01010280 	.word	0x01010280
 8003d98:	5c001000 	.word	0x5c001000
 8003d9c:	ffff0000 	.word	0xffff0000
 8003da0:	51008108 	.word	0x51008108
 8003da4:	52004000 	.word	0x52004000

08003da8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b09a      	sub	sp, #104	; 0x68
 8003dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	611a      	str	r2, [r3, #16]
 8003dd8:	615a      	str	r2, [r3, #20]
 8003dda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	222c      	movs	r2, #44	; 0x2c
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f015 faba 	bl	801935c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003de8:	4b44      	ldr	r3, [pc, #272]	; (8003efc <MX_TIM1_Init+0x154>)
 8003dea:	4a45      	ldr	r2, [pc, #276]	; (8003f00 <MX_TIM1_Init+0x158>)
 8003dec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8003dee:	4b43      	ldr	r3, [pc, #268]	; (8003efc <MX_TIM1_Init+0x154>)
 8003df0:	224a      	movs	r2, #74	; 0x4a
 8003df2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df4:	4b41      	ldr	r3, [pc, #260]	; (8003efc <MX_TIM1_Init+0x154>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8003dfa:	4b40      	ldr	r3, [pc, #256]	; (8003efc <MX_TIM1_Init+0x154>)
 8003dfc:	f24f 4223 	movw	r2, #62499	; 0xf423
 8003e00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e02:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <MX_TIM1_Init+0x154>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e08:	4b3c      	ldr	r3, [pc, #240]	; (8003efc <MX_TIM1_Init+0x154>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e0e:	4b3b      	ldr	r3, [pc, #236]	; (8003efc <MX_TIM1_Init+0x154>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e14:	4839      	ldr	r0, [pc, #228]	; (8003efc <MX_TIM1_Init+0x154>)
 8003e16:	f00d fe20 	bl	8011a5a <HAL_TIM_Base_Init>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003e20:	f7fe fee2 	bl	8002be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e28:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4832      	ldr	r0, [pc, #200]	; (8003efc <MX_TIM1_Init+0x154>)
 8003e32:	f00e fb9b 	bl	801256c <HAL_TIM_ConfigClockSource>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003e3c:	f7fe fed4 	bl	8002be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e40:	482e      	ldr	r0, [pc, #184]	; (8003efc <MX_TIM1_Init+0x154>)
 8003e42:	f00e f917 	bl	8012074 <HAL_TIM_PWM_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003e4c:	f7fe fecc 	bl	8002be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e54:	2300      	movs	r3, #0
 8003e56:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e60:	4619      	mov	r1, r3
 8003e62:	4826      	ldr	r0, [pc, #152]	; (8003efc <MX_TIM1_Init+0x154>)
 8003e64:	f00f f8d8 	bl	8013018 <HAL_TIMEx_MasterConfigSynchronization>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003e6e:	f7fe febb 	bl	8002be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e72:	2360      	movs	r3, #96	; 0x60
 8003e74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8003e76:	f240 13df 	movw	r3, #479	; 0x1df
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e80:	2300      	movs	r3, #0
 8003e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e94:	2200      	movs	r2, #0
 8003e96:	4619      	mov	r1, r3
 8003e98:	4818      	ldr	r0, [pc, #96]	; (8003efc <MX_TIM1_Init+0x154>)
 8003e9a:	f00e fa53 	bl	8012344 <HAL_TIM_PWM_ConfigChannel>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003ea4:	f7fe fea0 	bl	8002be8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ec0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ed8:	1d3b      	adds	r3, r7, #4
 8003eda:	4619      	mov	r1, r3
 8003edc:	4807      	ldr	r0, [pc, #28]	; (8003efc <MX_TIM1_Init+0x154>)
 8003ede:	f00f f929 	bl	8013134 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8003ee8:	f7fe fe7e 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003eec:	4803      	ldr	r0, [pc, #12]	; (8003efc <MX_TIM1_Init+0x154>)
 8003eee:	f000 f8dd 	bl	80040ac <HAL_TIM_MspPostInit>

}
 8003ef2:	bf00      	nop
 8003ef4:	3768      	adds	r7, #104	; 0x68
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	24001da4 	.word	0x24001da4
 8003f00:	40010000 	.word	0x40010000

08003f04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08e      	sub	sp, #56	; 0x38
 8003f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	609a      	str	r2, [r3, #8]
 8003f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f18:	f107 031c 	add.w	r3, r7, #28
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f24:	463b      	mov	r3, r7
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	60da      	str	r2, [r3, #12]
 8003f30:	611a      	str	r2, [r3, #16]
 8003f32:	615a      	str	r2, [r3, #20]
 8003f34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f36:	4b2d      	ldr	r3, [pc, #180]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003f38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003f40:	224a      	movs	r2, #74	; 0x4a
 8003f42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f44:	4b29      	ldr	r3, [pc, #164]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8003f4a:	4b28      	ldr	r3, [pc, #160]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003f4c:	f640 4234 	movw	r2, #3124	; 0xc34
 8003f50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f52:	4b26      	ldr	r3, [pc, #152]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f5e:	4823      	ldr	r0, [pc, #140]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003f60:	f00d fd7b 	bl	8011a5a <HAL_TIM_Base_Init>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003f6a:	f7fe fe3d 	bl	8002be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f78:	4619      	mov	r1, r3
 8003f7a:	481c      	ldr	r0, [pc, #112]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003f7c:	f00e faf6 	bl	801256c <HAL_TIM_ConfigClockSource>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003f86:	f7fe fe2f 	bl	8002be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003f8a:	4818      	ldr	r0, [pc, #96]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003f8c:	f00e f872 	bl	8012074 <HAL_TIM_PWM_Init>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003f96:	f7fe fe27 	bl	8002be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003f9a:	2320      	movs	r3, #32
 8003f9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fa2:	f107 031c 	add.w	r3, r7, #28
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4810      	ldr	r0, [pc, #64]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003faa:	f00f f835 	bl	8013018 <HAL_TIMEx_MasterConfigSynchronization>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003fb4:	f7fe fe18 	bl	8002be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fb8:	2360      	movs	r3, #96	; 0x60
 8003fba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003fc8:	463b      	mov	r3, r7
 8003fca:	220c      	movs	r2, #12
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4807      	ldr	r0, [pc, #28]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003fd0:	f00e f9b8 	bl	8012344 <HAL_TIM_PWM_ConfigChannel>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003fda:	f7fe fe05 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003fde:	4803      	ldr	r0, [pc, #12]	; (8003fec <MX_TIM2_Init+0xe8>)
 8003fe0:	f000 f864 	bl	80040ac <HAL_TIM_MspPostInit>

}
 8003fe4:	bf00      	nop
 8003fe6:	3738      	adds	r7, #56	; 0x38
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	24001df0 	.word	0x24001df0

08003ff0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a29      	ldr	r2, [pc, #164]	; (80040a4 <HAL_TIM_Base_MspInit+0xb4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d12f      	bne.n	8004062 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004002:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <HAL_TIM_Base_MspInit+0xb8>)
 8004004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004008:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <HAL_TIM_Base_MspInit+0xb8>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004012:	4b25      	ldr	r3, [pc, #148]	; (80040a8 <HAL_TIM_Base_MspInit+0xb8>)
 8004014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	2105      	movs	r1, #5
 8004024:	2018      	movs	r0, #24
 8004026:	f002 fbb7 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800402a:	2018      	movs	r0, #24
 800402c:	f002 fbce 	bl	80067cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004030:	2200      	movs	r2, #0
 8004032:	2105      	movs	r1, #5
 8004034:	2019      	movs	r0, #25
 8004036:	f002 fbaf 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800403a:	2019      	movs	r0, #25
 800403c:	f002 fbc6 	bl	80067cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004040:	2200      	movs	r2, #0
 8004042:	2105      	movs	r1, #5
 8004044:	201a      	movs	r0, #26
 8004046:	f002 fba7 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800404a:	201a      	movs	r0, #26
 800404c:	f002 fbbe 	bl	80067cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004050:	2200      	movs	r2, #0
 8004052:	2105      	movs	r1, #5
 8004054:	201b      	movs	r0, #27
 8004056:	f002 fb9f 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800405a:	201b      	movs	r0, #27
 800405c:	f002 fbb6 	bl	80067cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004060:	e01b      	b.n	800409a <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406a:	d116      	bne.n	800409a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_TIM_Base_MspInit+0xb8>)
 800406e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004072:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <HAL_TIM_Base_MspInit+0xb8>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_TIM_Base_MspInit+0xb8>)
 800407e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800408a:	2200      	movs	r2, #0
 800408c:	2105      	movs	r1, #5
 800408e:	201c      	movs	r0, #28
 8004090:	f002 fb82 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004094:	201c      	movs	r0, #28
 8004096:	f002 fb99 	bl	80067cc <HAL_NVIC_EnableIRQ>
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40010000 	.word	0x40010000
 80040a8:	58024400 	.word	0x58024400

080040ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b4:	f107 0314 	add.w	r3, r7, #20
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a26      	ldr	r2, [pc, #152]	; (8004164 <HAL_TIM_MspPostInit+0xb8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d120      	bne.n	8004110 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ce:	4b26      	ldr	r3, [pc, #152]	; (8004168 <HAL_TIM_MspPostInit+0xbc>)
 80040d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040d4:	4a24      	ldr	r2, [pc, #144]	; (8004168 <HAL_TIM_MspPostInit+0xbc>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040de:	4b22      	ldr	r3, [pc, #136]	; (8004168 <HAL_TIM_MspPostInit+0xbc>)
 80040e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80040ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f2:	2302      	movs	r3, #2
 80040f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fa:	2300      	movs	r3, #0
 80040fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80040fe:	2301      	movs	r3, #1
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004102:	f107 0314 	add.w	r3, r7, #20
 8004106:	4619      	mov	r1, r3
 8004108:	4818      	ldr	r0, [pc, #96]	; (800416c <HAL_TIM_MspPostInit+0xc0>)
 800410a:	f006 f8a3 	bl	800a254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800410e:	e024      	b.n	800415a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d11f      	bne.n	800415a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <HAL_TIM_MspPostInit+0xbc>)
 800411c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004120:	4a11      	ldr	r2, [pc, #68]	; (8004168 <HAL_TIM_MspPostInit+0xbc>)
 8004122:	f043 0302 	orr.w	r3, r3, #2
 8004126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800412a:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <HAL_TIM_MspPostInit+0xbc>)
 800412c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004138:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800413c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413e:	2302      	movs	r3, #2
 8004140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004146:	2300      	movs	r3, #0
 8004148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800414a:	2301      	movs	r3, #1
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800414e:	f107 0314 	add.w	r3, r7, #20
 8004152:	4619      	mov	r1, r3
 8004154:	4806      	ldr	r0, [pc, #24]	; (8004170 <HAL_TIM_MspPostInit+0xc4>)
 8004156:	f006 f87d 	bl	800a254 <HAL_GPIO_Init>
}
 800415a:	bf00      	nop
 800415c:	3728      	adds	r7, #40	; 0x28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	58024400 	.word	0x58024400
 800416c:	58020000 	.word	0x58020000
 8004170:	58020400 	.word	0x58020400

08004174 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004180:	4b21      	ldr	r3, [pc, #132]	; (8004208 <get_uptime+0x94>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <get_uptime+0x98>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 800418c:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <get_uptime+0x94>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	429a      	cmp	r2, r3
 8004194:	d005      	beq.n	80041a2 <get_uptime+0x2e>
		ms = uptime_millis;
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <get_uptime+0x94>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 800419c:	4b1b      	ldr	r3, [pc, #108]	; (800420c <get_uptime+0x98>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041a8:	fb03 f202 	mul.w	r2, r3, r2
 80041ac:	4b17      	ldr	r3, [pc, #92]	; (800420c <get_uptime+0x98>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	3301      	adds	r3, #1
 80041b2:	4917      	ldr	r1, [pc, #92]	; (8004210 <get_uptime+0x9c>)
 80041b4:	fba1 1303 	umull	r1, r3, r1, r3
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <get_uptime+0x5a>
		uptime = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	0e1b      	lsrs	r3, r3, #24
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	0c1a      	lsrs	r2, r3, #16
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3301      	adds	r3, #1
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	0a1a      	lsrs	r2, r3, #8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3302      	adds	r3, #2
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3303      	adds	r3, #3
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	24001ae0 	.word	0x24001ae0
 800420c:	e000e010 	.word	0xe000e010
 8004210:	10624dd3 	.word	0x10624dd3

08004214 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b08a      	sub	sp, #40	; 0x28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800421c:	f107 0310 	add.w	r3, r7, #16
 8004220:	2200      	movs	r2, #0
 8004222:	4619      	mov	r1, r3
 8004224:	4821      	ldr	r0, [pc, #132]	; (80042ac <get_timestamp+0x98>)
 8004226:	f00c fc77 	bl	8010b18 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800422a:	f107 030c 	add.w	r3, r7, #12
 800422e:	2200      	movs	r2, #0
 8004230:	4619      	mov	r1, r3
 8004232:	481e      	ldr	r0, [pc, #120]	; (80042ac <get_timestamp+0x98>)
 8004234:	f00c fd54 	bl	8010ce0 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2264      	movs	r2, #100	; 0x64
 800423c:	fb03 f202 	mul.w	r2, r3, r2
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <get_timestamp+0x9c>)
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8004246:	7bfa      	ldrb	r2, [r7, #15]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3301      	adds	r3, #1
 8004250:	7b7a      	ldrb	r2, [r7, #13]
 8004252:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3302      	adds	r3, #2
 8004258:	7bba      	ldrb	r2, [r7, #14]
 800425a:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3303      	adds	r3, #3
 8004260:	7c3a      	ldrb	r2, [r7, #16]
 8004262:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	7c7a      	ldrb	r2, [r7, #17]
 800426a:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3305      	adds	r3, #5
 8004270:	7cba      	ldrb	r2, [r7, #18]
 8004272:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	0e1a      	lsrs	r2, r3, #24
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3306      	adds	r3, #6
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	0c1a      	lsrs	r2, r3, #16
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3307      	adds	r3, #7
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	0a1a      	lsrs	r2, r3, #8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3308      	adds	r3, #8
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3309      	adds	r3, #9
 800429c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	3728      	adds	r7, #40	; 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	24001af4 	.word	0x24001af4
 80042b0:	000f4240 	.word	0x000f4240

080042b4 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08c      	sub	sp, #48	; 0x30
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	785b      	ldrb	r3, [r3, #1]
 80042c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	789b      	ldrb	r3, [r3, #2]
 80042c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	78db      	ldrb	r3, [r3, #3]
 80042d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	791b      	ldrb	r3, [r3, #4]
 80042d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	795b      	ldrb	r3, [r3, #5]
 80042e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	799b      	ldrb	r3, [r3, #6]
 80042e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3307      	adds	r3, #7
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	b21a      	sxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3308      	adds	r3, #8
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b21b      	sxth	r3, r3
 80042fe:	4313      	orrs	r3, r2
 8004300:	b21b      	sxth	r3, r3
 8004302:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8004304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 800430c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004310:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8004314:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 800431c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004320:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8004322:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004326:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8004328:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800432c:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800432e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004330:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8004332:	f107 0320 	add.w	r3, r7, #32
 8004336:	2200      	movs	r2, #0
 8004338:	4619      	mov	r1, r3
 800433a:	480b      	ldr	r0, [pc, #44]	; (8004368 <calibrateRTC+0xb4>)
 800433c:	f00c fc48 	bl	8010bd0 <HAL_RTC_SetDate>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8004346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <calibrateRTC+0x9e>
		Error_Handler();
 800434e:	f7fe fc4b 	bl	8002be8 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	2200      	movs	r2, #0
 8004358:	4619      	mov	r1, r3
 800435a:	4803      	ldr	r0, [pc, #12]	; (8004368 <calibrateRTC+0xb4>)
 800435c:	f000 f806 	bl	800436c <RTC_SetTime>
}
 8004360:	bf00      	nop
 8004362:	3730      	adds	r7, #48	; 0x30
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	24001af4 	.word	0x24001af4

0800436c <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <RTC_SetTime+0x1a>
 8004382:	2302      	movs	r3, #2
 8004384:	e051      	b.n	800442a <RTC_SetTime+0xbe>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	22ca      	movs	r2, #202	; 0xca
 800439c:	625a      	str	r2, [r3, #36]	; 0x24
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2253      	movs	r2, #83	; 0x53
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f00c fd0c 	bl	8010dc4 <RTC_EnterInitMode>
 80043ac:	4603      	mov	r3, r0
 80043ae:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d129      	bne.n	800440a <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f00c fd71 	bl	8010ea8 <RTC_ByteToBcd2>
 80043c6:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 80043c8:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f00c fd6a 	bl	8010ea8 <RTC_ByteToBcd2>
 80043d4:	4603      	mov	r3, r0
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	789b      	ldrb	r3, [r3, #2]
 80043de:	4618      	mov	r0, r3
 80043e0:	f00c fd62 	bl	8010ea8 <RTC_ByteToBcd2>
 80043e4:	4603      	mov	r3, r0
 80043e6:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	78db      	ldrb	r3, [r3, #3]
 80043ee:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	6939      	ldr	r1, [r7, #16]
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <RTC_SetTime+0xc8>)
 80043fc:	400b      	ands	r3, r1
 80043fe:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f00c fd13 	bl	8010e2c <RTC_ExitInitMode>
 8004406:	4603      	mov	r3, r0
 8004408:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	22ff      	movs	r2, #255	; 0xff
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8004412:	7dfb      	ldrb	r3, [r7, #23]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8004428:	7dfb      	ldrb	r3, [r7, #23]

}
 800442a:	4618      	mov	r0, r3
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	bd90      	pop	{r4, r7, pc}
 8004432:	bf00      	nop
 8004434:	007f7f7f 	.word	0x007f7f7f

08004438 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800443c:	4b30      	ldr	r3, [pc, #192]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 800443e:	4a31      	ldr	r2, [pc, #196]	; (8004504 <MX_USART1_UART_Init+0xcc>)
 8004440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8004442:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 8004444:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800444a:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 800444c:	2200      	movs	r2, #0
 800444e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 8004452:	2200      	movs	r2, #0
 8004454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004456:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 8004458:	2200      	movs	r2, #0
 800445a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800445c:	4b28      	ldr	r3, [pc, #160]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 800445e:	220c      	movs	r2, #12
 8004460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004462:	4b27      	ldr	r3, [pc, #156]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004468:	4b25      	ldr	r3, [pc, #148]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 800446a:	2200      	movs	r2, #0
 800446c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 8004470:	2200      	movs	r2, #0
 8004472:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004474:	4b22      	ldr	r3, [pc, #136]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 8004476:	2200      	movs	r2, #0
 8004478:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800447a:	4b21      	ldr	r3, [pc, #132]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 800447c:	2200      	movs	r2, #0
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004480:	481f      	ldr	r0, [pc, #124]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 8004482:	f00e fef3 	bl	801326c <HAL_UART_Init>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800448c:	f7fe fbac 	bl	8002be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004490:	2100      	movs	r1, #0
 8004492:	481b      	ldr	r0, [pc, #108]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 8004494:	f011 fc39 	bl	8015d0a <HAL_UARTEx_SetTxFifoThreshold>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800449e:	f7fe fba3 	bl	8002be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044a2:	2100      	movs	r1, #0
 80044a4:	4816      	ldr	r0, [pc, #88]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 80044a6:	f011 fc6e 	bl	8015d86 <HAL_UARTEx_SetRxFifoThreshold>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80044b0:	f7fe fb9a 	bl	8002be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80044b4:	4812      	ldr	r0, [pc, #72]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 80044b6:	f011 fbef 	bl	8015c98 <HAL_UARTEx_DisableFifoMode>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80044c0:	f7fe fb92 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 80044c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044c8:	480d      	ldr	r0, [pc, #52]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 80044ca:	f011 fc5c 	bl	8015d86 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 80044ce:	480c      	ldr	r0, [pc, #48]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 80044d0:	f011 fba7 	bl	8015c22 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 80044d4:	480a      	ldr	r0, [pc, #40]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 80044d6:	f011 fb71 	bl	8015bbc <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 80044da:	4b09      	ldr	r3, [pc, #36]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	4b07      	ldr	r3, [pc, #28]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044e8:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	4b03      	ldr	r3, [pc, #12]	; (8004500 <MX_USART1_UART_Init+0xc8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80044f8:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	24001e3c 	.word	0x24001e3c
 8004504:	40011000 	.word	0x40011000

08004508 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b0ba      	sub	sp, #232	; 0xe8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004510:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004520:	f107 0310 	add.w	r3, r7, #16
 8004524:	22c0      	movs	r2, #192	; 0xc0
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f014 ff17 	bl	801935c <memset>
  if(uartHandle->Instance==USART1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a41      	ldr	r2, [pc, #260]	; (8004638 <HAL_UART_MspInit+0x130>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d17b      	bne.n	8004630 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004538:	f04f 0201 	mov.w	r2, #1
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8004544:	2318      	movs	r3, #24
 8004546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800454a:	f107 0310 	add.w	r3, r7, #16
 800454e:	4618      	mov	r0, r3
 8004550:	f009 fcc4 	bl	800dedc <HAL_RCCEx_PeriphCLKConfig>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800455a:	f7fe fb45 	bl	8002be8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800455e:	4b37      	ldr	r3, [pc, #220]	; (800463c <HAL_UART_MspInit+0x134>)
 8004560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004564:	4a35      	ldr	r2, [pc, #212]	; (800463c <HAL_UART_MspInit+0x134>)
 8004566:	f043 0310 	orr.w	r3, r3, #16
 800456a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800456e:	4b33      	ldr	r3, [pc, #204]	; (800463c <HAL_UART_MspInit+0x134>)
 8004570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457c:	4b2f      	ldr	r3, [pc, #188]	; (800463c <HAL_UART_MspInit+0x134>)
 800457e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004582:	4a2e      	ldr	r2, [pc, #184]	; (800463c <HAL_UART_MspInit+0x134>)
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800458c:	4b2b      	ldr	r3, [pc, #172]	; (800463c <HAL_UART_MspInit+0x134>)
 800458e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800459a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800459e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a2:	2302      	movs	r3, #2
 80045a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045b4:	2307      	movs	r3, #7
 80045b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045be:	4619      	mov	r1, r3
 80045c0:	481f      	ldr	r0, [pc, #124]	; (8004640 <HAL_UART_MspInit+0x138>)
 80045c2:	f005 fe47 	bl	800a254 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80045c6:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <HAL_UART_MspInit+0x13c>)
 80045c8:	4a1f      	ldr	r2, [pc, #124]	; (8004648 <HAL_UART_MspInit+0x140>)
 80045ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80045cc:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <HAL_UART_MspInit+0x13c>)
 80045ce:	222a      	movs	r2, #42	; 0x2a
 80045d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <HAL_UART_MspInit+0x13c>)
 80045d4:	2240      	movs	r2, #64	; 0x40
 80045d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045d8:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <HAL_UART_MspInit+0x13c>)
 80045da:	2200      	movs	r2, #0
 80045dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045de:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_UART_MspInit+0x13c>)
 80045e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045e6:	4b17      	ldr	r3, [pc, #92]	; (8004644 <HAL_UART_MspInit+0x13c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045ec:	4b15      	ldr	r3, [pc, #84]	; (8004644 <HAL_UART_MspInit+0x13c>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <HAL_UART_MspInit+0x13c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_UART_MspInit+0x13c>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045fe:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_UART_MspInit+0x13c>)
 8004600:	2200      	movs	r2, #0
 8004602:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004604:	480f      	ldr	r0, [pc, #60]	; (8004644 <HAL_UART_MspInit+0x13c>)
 8004606:	f002 fcf5 	bl	8006ff4 <HAL_DMA_Init>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004610:	f7fe faea 	bl	8002be8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a0b      	ldr	r2, [pc, #44]	; (8004644 <HAL_UART_MspInit+0x13c>)
 8004618:	67da      	str	r2, [r3, #124]	; 0x7c
 800461a:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <HAL_UART_MspInit+0x13c>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004620:	2200      	movs	r2, #0
 8004622:	2105      	movs	r1, #5
 8004624:	2025      	movs	r0, #37	; 0x25
 8004626:	f002 f8b7 	bl	8006798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800462a:	2025      	movs	r0, #37	; 0x25
 800462c:	f002 f8ce 	bl	80067cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004630:	bf00      	nop
 8004632:	37e8      	adds	r7, #232	; 0xe8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40011000 	.word	0x40011000
 800463c:	58024400 	.word	0x58024400
 8004640:	58020000 	.word	0x58020000
 8004644:	24001ed0 	.word	0x24001ed0
 8004648:	40020040 	.word	0x40020040

0800464c <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8004656:	4bc2      	ldr	r3, [pc, #776]	; (8004960 <voltage_monitor_init+0x314>)
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 800465c:	4bc0      	ldr	r3, [pc, #768]	; (8004960 <voltage_monitor_init+0x314>)
 800465e:	2200      	movs	r2, #0
 8004660:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8004662:	4bbf      	ldr	r3, [pc, #764]	; (8004960 <voltage_monitor_init+0x314>)
 8004664:	2201      	movs	r2, #1
 8004666:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8004668:	4bbd      	ldr	r3, [pc, #756]	; (8004960 <voltage_monitor_init+0x314>)
 800466a:	2200      	movs	r2, #0
 800466c:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 800466e:	4bbc      	ldr	r3, [pc, #752]	; (8004960 <voltage_monitor_init+0x314>)
 8004670:	f242 7210 	movw	r2, #10000	; 0x2710
 8004674:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8004676:	4bba      	ldr	r3, [pc, #744]	; (8004960 <voltage_monitor_init+0x314>)
 8004678:	2200      	movs	r2, #0
 800467a:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 800467c:	4bb8      	ldr	r3, [pc, #736]	; (8004960 <voltage_monitor_init+0x314>)
 800467e:	2201      	movs	r2, #1
 8004680:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8004682:	4bb7      	ldr	r3, [pc, #732]	; (8004960 <voltage_monitor_init+0x314>)
 8004684:	2200      	movs	r2, #0
 8004686:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8004688:	4bb5      	ldr	r3, [pc, #724]	; (8004960 <voltage_monitor_init+0x314>)
 800468a:	2201      	movs	r2, #1
 800468c:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 800468e:	4bb4      	ldr	r3, [pc, #720]	; (8004960 <voltage_monitor_init+0x314>)
 8004690:	2200      	movs	r2, #0
 8004692:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004694:	4bb2      	ldr	r3, [pc, #712]	; (8004960 <voltage_monitor_init+0x314>)
 8004696:	f242 7210 	movw	r2, #10000	; 0x2710
 800469a:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 800469c:	4bb0      	ldr	r3, [pc, #704]	; (8004960 <voltage_monitor_init+0x314>)
 800469e:	2200      	movs	r2, #0
 80046a0:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80046a2:	4baf      	ldr	r3, [pc, #700]	; (8004960 <voltage_monitor_init+0x314>)
 80046a4:	2202      	movs	r2, #2
 80046a6:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80046a8:	4bad      	ldr	r3, [pc, #692]	; (8004960 <voltage_monitor_init+0x314>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80046ae:	4bac      	ldr	r3, [pc, #688]	; (8004960 <voltage_monitor_init+0x314>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80046b4:	4baa      	ldr	r3, [pc, #680]	; (8004960 <voltage_monitor_init+0x314>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80046ba:	4ba9      	ldr	r3, [pc, #676]	; (8004960 <voltage_monitor_init+0x314>)
 80046bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80046c0:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80046c2:	4ba7      	ldr	r3, [pc, #668]	; (8004960 <voltage_monitor_init+0x314>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80046c8:	4ba5      	ldr	r3, [pc, #660]	; (8004960 <voltage_monitor_init+0x314>)
 80046ca:	2203      	movs	r2, #3
 80046cc:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80046ce:	4ba4      	ldr	r3, [pc, #656]	; (8004960 <voltage_monitor_init+0x314>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80046d4:	4ba2      	ldr	r3, [pc, #648]	; (8004960 <voltage_monitor_init+0x314>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 80046dc:	4ba0      	ldr	r3, [pc, #640]	; (8004960 <voltage_monitor_init+0x314>)
 80046de:	2200      	movs	r2, #0
 80046e0:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 80046e2:	4b9f      	ldr	r3, [pc, #636]	; (8004960 <voltage_monitor_init+0x314>)
 80046e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80046e8:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 80046ea:	4b9d      	ldr	r3, [pc, #628]	; (8004960 <voltage_monitor_init+0x314>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80046f0:	4b9b      	ldr	r3, [pc, #620]	; (8004960 <voltage_monitor_init+0x314>)
 80046f2:	2204      	movs	r2, #4
 80046f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 80046f8:	4b99      	ldr	r3, [pc, #612]	; (8004960 <voltage_monitor_init+0x314>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8004700:	4b97      	ldr	r3, [pc, #604]	; (8004960 <voltage_monitor_init+0x314>)
 8004702:	2201      	movs	r2, #1
 8004704:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8004708:	4b95      	ldr	r3, [pc, #596]	; (8004960 <voltage_monitor_init+0x314>)
 800470a:	2200      	movs	r2, #0
 800470c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800470e:	4b94      	ldr	r3, [pc, #592]	; (8004960 <voltage_monitor_init+0x314>)
 8004710:	f242 7210 	movw	r2, #10000	; 0x2710
 8004714:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8004716:	4b92      	ldr	r3, [pc, #584]	; (8004960 <voltage_monitor_init+0x314>)
 8004718:	2200      	movs	r2, #0
 800471a:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 800471c:	4b90      	ldr	r3, [pc, #576]	; (8004960 <voltage_monitor_init+0x314>)
 800471e:	2205      	movs	r2, #5
 8004720:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8004724:	4b8e      	ldr	r3, [pc, #568]	; (8004960 <voltage_monitor_init+0x314>)
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 800472c:	4b8c      	ldr	r3, [pc, #560]	; (8004960 <voltage_monitor_init+0x314>)
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8004734:	4b8a      	ldr	r3, [pc, #552]	; (8004960 <voltage_monitor_init+0x314>)
 8004736:	2200      	movs	r2, #0
 8004738:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 800473a:	4b89      	ldr	r3, [pc, #548]	; (8004960 <voltage_monitor_init+0x314>)
 800473c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004740:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8004742:	4b87      	ldr	r3, [pc, #540]	; (8004960 <voltage_monitor_init+0x314>)
 8004744:	2200      	movs	r2, #0
 8004746:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8004748:	4b85      	ldr	r3, [pc, #532]	; (8004960 <voltage_monitor_init+0x314>)
 800474a:	2206      	movs	r2, #6
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8004750:	4b83      	ldr	r3, [pc, #524]	; (8004960 <voltage_monitor_init+0x314>)
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8004758:	4b81      	ldr	r3, [pc, #516]	; (8004960 <voltage_monitor_init+0x314>)
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8004760:	4b7f      	ldr	r3, [pc, #508]	; (8004960 <voltage_monitor_init+0x314>)
 8004762:	2200      	movs	r2, #0
 8004764:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004768:	4b7d      	ldr	r3, [pc, #500]	; (8004960 <voltage_monitor_init+0x314>)
 800476a:	f242 7210 	movw	r2, #10000	; 0x2710
 800476e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8004772:	4b7b      	ldr	r3, [pc, #492]	; (8004960 <voltage_monitor_init+0x314>)
 8004774:	2200      	movs	r2, #0
 8004776:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 800477a:	4b79      	ldr	r3, [pc, #484]	; (8004960 <voltage_monitor_init+0x314>)
 800477c:	2207      	movs	r2, #7
 800477e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8004782:	4b77      	ldr	r3, [pc, #476]	; (8004960 <voltage_monitor_init+0x314>)
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 800478a:	4b75      	ldr	r3, [pc, #468]	; (8004960 <voltage_monitor_init+0x314>)
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8004792:	4b73      	ldr	r3, [pc, #460]	; (8004960 <voltage_monitor_init+0x314>)
 8004794:	2200      	movs	r2, #0
 8004796:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 800479a:	4b71      	ldr	r3, [pc, #452]	; (8004960 <voltage_monitor_init+0x314>)
 800479c:	f242 7210 	movw	r2, #10000	; 0x2710
 80047a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80047a4:	4b6e      	ldr	r3, [pc, #440]	; (8004960 <voltage_monitor_init+0x314>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80047ac:	4b6c      	ldr	r3, [pc, #432]	; (8004960 <voltage_monitor_init+0x314>)
 80047ae:	2208      	movs	r2, #8
 80047b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <voltage_monitor_init+0x314>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80047bc:	4b68      	ldr	r3, [pc, #416]	; (8004960 <voltage_monitor_init+0x314>)
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 80047c4:	4b66      	ldr	r3, [pc, #408]	; (8004960 <voltage_monitor_init+0x314>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 80047cc:	4b64      	ldr	r3, [pc, #400]	; (8004960 <voltage_monitor_init+0x314>)
 80047ce:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80047d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80047d6:	4b62      	ldr	r3, [pc, #392]	; (8004960 <voltage_monitor_init+0x314>)
 80047d8:	f640 3283 	movw	r2, #2947	; 0xb83
 80047dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80047e0:	4b5f      	ldr	r3, [pc, #380]	; (8004960 <voltage_monitor_init+0x314>)
 80047e2:	2209      	movs	r2, #9
 80047e4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 80047e8:	4b5d      	ldr	r3, [pc, #372]	; (8004960 <voltage_monitor_init+0x314>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 80047f0:	4b5b      	ldr	r3, [pc, #364]	; (8004960 <voltage_monitor_init+0x314>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 80047f8:	4b59      	ldr	r3, [pc, #356]	; (8004960 <voltage_monitor_init+0x314>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8004800:	4b57      	ldr	r3, [pc, #348]	; (8004960 <voltage_monitor_init+0x314>)
 8004802:	f640 7245 	movw	r2, #3909	; 0xf45
 8004806:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 800480a:	4b55      	ldr	r3, [pc, #340]	; (8004960 <voltage_monitor_init+0x314>)
 800480c:	2200      	movs	r2, #0
 800480e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8004812:	4b53      	ldr	r3, [pc, #332]	; (8004960 <voltage_monitor_init+0x314>)
 8004814:	220a      	movs	r2, #10
 8004816:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 800481a:	4b51      	ldr	r3, [pc, #324]	; (8004960 <voltage_monitor_init+0x314>)
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8004822:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <voltage_monitor_init+0x314>)
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 800482a:	4b4d      	ldr	r3, [pc, #308]	; (8004960 <voltage_monitor_init+0x314>)
 800482c:	2200      	movs	r2, #0
 800482e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8004832:	4b4b      	ldr	r3, [pc, #300]	; (8004960 <voltage_monitor_init+0x314>)
 8004834:	f640 7245 	movw	r2, #3909	; 0xf45
 8004838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 800483c:	4b48      	ldr	r3, [pc, #288]	; (8004960 <voltage_monitor_init+0x314>)
 800483e:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8004842:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8004846:	4b46      	ldr	r3, [pc, #280]	; (8004960 <voltage_monitor_init+0x314>)
 8004848:	220b      	movs	r2, #11
 800484a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 800484e:	4b44      	ldr	r3, [pc, #272]	; (8004960 <voltage_monitor_init+0x314>)
 8004850:	2200      	movs	r2, #0
 8004852:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8004856:	4b42      	ldr	r3, [pc, #264]	; (8004960 <voltage_monitor_init+0x314>)
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 800485e:	4b40      	ldr	r3, [pc, #256]	; (8004960 <voltage_monitor_init+0x314>)
 8004860:	2200      	movs	r2, #0
 8004862:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8004866:	4b3e      	ldr	r3, [pc, #248]	; (8004960 <voltage_monitor_init+0x314>)
 8004868:	f640 72fb 	movw	r2, #4091	; 0xffb
 800486c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8004870:	4b3b      	ldr	r3, [pc, #236]	; (8004960 <voltage_monitor_init+0x314>)
 8004872:	f640 6276 	movw	r2, #3702	; 0xe76
 8004876:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 800487a:	4b39      	ldr	r3, [pc, #228]	; (8004960 <voltage_monitor_init+0x314>)
 800487c:	220c      	movs	r2, #12
 800487e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <voltage_monitor_init+0x314>)
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 800488a:	4b35      	ldr	r3, [pc, #212]	; (8004960 <voltage_monitor_init+0x314>)
 800488c:	2200      	movs	r2, #0
 800488e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8004892:	4b33      	ldr	r3, [pc, #204]	; (8004960 <voltage_monitor_init+0x314>)
 8004894:	2200      	movs	r2, #0
 8004896:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 800489a:	4b31      	ldr	r3, [pc, #196]	; (8004960 <voltage_monitor_init+0x314>)
 800489c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80048a0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80048a4:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <voltage_monitor_init+0x314>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 80048ac:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <voltage_monitor_init+0x314>)
 80048ae:	220d      	movs	r2, #13
 80048b0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80048b4:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <voltage_monitor_init+0x314>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80048bc:	4b28      	ldr	r3, [pc, #160]	; (8004960 <voltage_monitor_init+0x314>)
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 80048c4:	4b26      	ldr	r3, [pc, #152]	; (8004960 <voltage_monitor_init+0x314>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <voltage_monitor_init+0x314>)
 80048ce:	f640 7238 	movw	r2, #3896	; 0xf38
 80048d2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80048d6:	4b22      	ldr	r3, [pc, #136]	; (8004960 <voltage_monitor_init+0x314>)
 80048d8:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80048dc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80048e0:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <voltage_monitor_init+0x314>)
 80048e2:	220e      	movs	r2, #14
 80048e4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <voltage_monitor_init+0x314>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <voltage_monitor_init+0x314>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <voltage_monitor_init+0x314>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8004900:	4b17      	ldr	r3, [pc, #92]	; (8004960 <voltage_monitor_init+0x314>)
 8004902:	f640 7245 	movw	r2, #3909	; 0xf45
 8004906:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 800490a:	4b15      	ldr	r3, [pc, #84]	; (8004960 <voltage_monitor_init+0x314>)
 800490c:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8004910:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8004914:	4b12      	ldr	r3, [pc, #72]	; (8004960 <voltage_monitor_init+0x314>)
 8004916:	220f      	movs	r2, #15
 8004918:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 800491c:	4b10      	ldr	r3, [pc, #64]	; (8004960 <voltage_monitor_init+0x314>)
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8004924:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <voltage_monitor_init+0x314>)
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <voltage_monitor_init+0x314>)
 800492e:	2200      	movs	r2, #0
 8004930:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <voltage_monitor_init+0x314>)
 8004936:	f241 0264 	movw	r2, #4196	; 0x1064
 800493a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <voltage_monitor_init+0x314>)
 8004940:	2200      	movs	r2, #0
 8004942:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8004946:	4b06      	ldr	r3, [pc, #24]	; (8004960 <voltage_monitor_init+0x314>)
 8004948:	2210      	movs	r2, #16
 800494a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <voltage_monitor_init+0x314>)
 8004950:	2200      	movs	r2, #0
 8004952:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8004956:	4b02      	ldr	r3, [pc, #8]	; (8004960 <voltage_monitor_init+0x314>)
 8004958:	2200      	movs	r2, #0
 800495a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800495e:	e001      	b.n	8004964 <voltage_monitor_init+0x318>
 8004960:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 8004964:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <voltage_monitor_init+0x378>)
 8004966:	2200      	movs	r2, #0
 8004968:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 800496c:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <voltage_monitor_init+0x378>)
 800496e:	f640 5208 	movw	r2, #3336	; 0xd08
 8004972:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8004976:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <voltage_monitor_init+0x378>)
 8004978:	f640 32ca 	movw	r2, #3018	; 0xbca
 800497c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8004980:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <voltage_monitor_init+0x378>)
 8004982:	2211      	movs	r2, #17
 8004984:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8004988:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <voltage_monitor_init+0x378>)
 800498a:	2200      	movs	r2, #0
 800498c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8004990:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <voltage_monitor_init+0x378>)
 8004992:	2201      	movs	r2, #1
 8004994:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <voltage_monitor_init+0x378>)
 800499a:	2200      	movs	r2, #0
 800499c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80049a0:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <voltage_monitor_init+0x378>)
 80049a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80049a6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <voltage_monitor_init+0x378>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	71fb      	strb	r3, [r7, #7]

	return status;
 80049b6:	79fb      	ldrb	r3, [r7, #7]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	24001f48 	.word	0x24001f48

080049c8 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	460a      	mov	r2, r1
 80049d2:	71fb      	strb	r3, [r7, #7]
 80049d4:	4613      	mov	r3, r2
 80049d6:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 80049dc:	79fa      	ldrb	r2, [r7, #7]
 80049de:	4909      	ldr	r1, [pc, #36]	; (8004a04 <set_rail_monitor_enable+0x3c>)
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	440b      	add	r3, r1
 80049ea:	3302      	adds	r3, #2
 80049ec:	79ba      	ldrb	r2, [r7, #6]
 80049ee:	701a      	strb	r2, [r3, #0]
	status = 1;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]

	return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	24001f48 	.word	0x24001f48

08004a08 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8004a14:	463b      	mov	r3, r7
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fc34 	bl	8003284 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8004a1c:	f107 0310 	add.w	r3, r7, #16
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe fc5f 	bl	80032e4 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8004a26:	f107 0308 	add.w	r3, r7, #8
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fcac 	bl	8003388 <sample_hk_adc3>
 8004a30:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8004a32:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a34:	809a      	strh	r2, [r3, #4]
 8004a36:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8004a38:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a3a:	81da      	strh	r2, [r3, #14]
 8004a3c:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8004a3e:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a40:	831a      	strh	r2, [r3, #24]
 8004a42:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8004a44:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a46:	845a      	strh	r2, [r3, #34]	; 0x22
 8004a48:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8004a4a:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a4c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004a4e:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a52:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a54:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8004a56:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8004a5c:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8004a64:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8004a66:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8004a6c:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8004a6e:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8004a74:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004a7c:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a80:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8004a84:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a88:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8004a8c:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a90:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8004a94:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004a98:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8004a9c:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004aa0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8004aa4:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004aa8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8004aac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <set_rail_monitor+0xc0>)
 8004ab0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8004aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3728      	adds	r7, #40	; 0x28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	24001f48 	.word	0x24001f48

08004acc <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
	return rail_monitor;
 8004ad0:	4b02      	ldr	r3, [pc, #8]	; (8004adc <get_rail_monitor+0x10>)
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	24001f48 	.word	0x24001f48

08004ae0 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8004aee:	89fb      	ldrh	r3, [r7, #14]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	db05      	blt.n	8004b02 <in_range+0x22>
 8004af6:	89fb      	ldrh	r3, [r7, #14]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	dc01      	bgt.n	8004b02 <in_range+0x22>
		return 1;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <in_range+0x24>
	}
	return 0;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <monitor_rails>:


void monitor_rails() {
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8004b16:	2300      	movs	r3, #0
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	e062      	b.n	8004be2 <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8004b1c:	4935      	ldr	r1, [pc, #212]	; (8004bf4 <monitor_rails+0xe4>)
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	440b      	add	r3, r1
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d054      	beq.n	8004bdc <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8004b32:	4930      	ldr	r1, [pc, #192]	; (8004bf4 <monitor_rails+0xe4>)
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	440b      	add	r3, r1
 8004b40:	3304      	adds	r3, #4
 8004b42:	8818      	ldrh	r0, [r3, #0]
 8004b44:	492b      	ldr	r1, [pc, #172]	; (8004bf4 <monitor_rails+0xe4>)
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	440b      	add	r3, r1
 8004b52:	3308      	adds	r3, #8
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	461c      	mov	r4, r3
 8004b58:	4926      	ldr	r1, [pc, #152]	; (8004bf4 <monitor_rails+0xe4>)
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	440b      	add	r3, r1
 8004b66:	3306      	adds	r3, #6
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	f7ff ffb7 	bl	8004ae0 <in_range>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d131      	bne.n	8004bdc <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8004b78:	491e      	ldr	r1, [pc, #120]	; (8004bf4 <monitor_rails+0xe4>)
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	440b      	add	r3, r1
 8004b86:	3301      	adds	r3, #1
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	b2d8      	uxtb	r0, r3
 8004b8e:	4919      	ldr	r1, [pc, #100]	; (8004bf4 <monitor_rails+0xe4>)
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8004ba2:	4914      	ldr	r1, [pc, #80]	; (8004bf4 <monitor_rails+0xe4>)
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	440b      	add	r3, r1
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d111      	bne.n	8004bdc <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8004bb8:	490e      	ldr	r1, [pc, #56]	; (8004bf4 <monitor_rails+0xe4>)
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	440b      	add	r3, r1
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f815 	bl	8004bf8 <get_rail_name_error_detail>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 8004bd6:	6838      	ldr	r0, [r7, #0]
 8004bd8:	f7fc fbde 	bl	8001398 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3301      	adds	r3, #1
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b11      	cmp	r3, #17
 8004be6:	dd99      	ble.n	8004b1c <monitor_rails+0xc>
				}
			}
		}
	}
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd90      	pop	{r4, r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	24001f48 	.word	0x24001f48

08004bf8 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	2b11      	cmp	r3, #17
 8004c06:	d84b      	bhi.n	8004ca0 <get_rail_name_error_detail+0xa8>
 8004c08:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <get_rail_name_error_detail+0x18>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c59 	.word	0x08004c59
 8004c14:	08004c5d 	.word	0x08004c5d
 8004c18:	08004c61 	.word	0x08004c61
 8004c1c:	08004c65 	.word	0x08004c65
 8004c20:	08004c69 	.word	0x08004c69
 8004c24:	08004c6d 	.word	0x08004c6d
 8004c28:	08004c71 	.word	0x08004c71
 8004c2c:	08004c75 	.word	0x08004c75
 8004c30:	08004c79 	.word	0x08004c79
 8004c34:	08004c7d 	.word	0x08004c7d
 8004c38:	08004c81 	.word	0x08004c81
 8004c3c:	08004c85 	.word	0x08004c85
 8004c40:	08004c89 	.word	0x08004c89
 8004c44:	08004c8d 	.word	0x08004c8d
 8004c48:	08004c91 	.word	0x08004c91
 8004c4c:	08004c95 	.word	0x08004c95
 8004c50:	08004c99 	.word	0x08004c99
 8004c54:	08004c9d 	.word	0x08004c9d
	case RAIL_vsense:
		return ED_vsense;
 8004c58:	2306      	movs	r3, #6
 8004c5a:	e022      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8004c5c:	2307      	movs	r3, #7
 8004c5e:	e020      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8004c60:	2308      	movs	r3, #8
 8004c62:	e01e      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8004c64:	2309      	movs	r3, #9
 8004c66:	e01c      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8004c68:	230a      	movs	r3, #10
 8004c6a:	e01a      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8004c6c:	230b      	movs	r3, #11
 8004c6e:	e018      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8004c70:	230c      	movs	r3, #12
 8004c72:	e016      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8004c74:	230d      	movs	r3, #13
 8004c76:	e014      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8004c78:	230e      	movs	r3, #14
 8004c7a:	e012      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8004c7c:	230f      	movs	r3, #15
 8004c7e:	e010      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8004c80:	2310      	movs	r3, #16
 8004c82:	e00e      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8004c84:	2311      	movs	r3, #17
 8004c86:	e00c      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8004c88:	2312      	movs	r3, #18
 8004c8a:	e00a      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8004c8c:	2313      	movs	r3, #19
 8004c8e:	e008      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8004c90:	2314      	movs	r3, #20
 8004c92:	e006      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8004c94:	2315      	movs	r3, #21
 8004c96:	e004      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8004c98:	2316      	movs	r3, #22
 8004c9a:	e002      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8004c9c:	2317      	movs	r3, #23
 8004c9e:	e000      	b.n	8004ca2 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8004ca0:	231a      	movs	r3, #26
	}
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop

08004cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ce8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004cb4:	f7fe fff0 	bl	8003c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cb8:	480c      	ldr	r0, [pc, #48]	; (8004cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cba:	490d      	ldr	r1, [pc, #52]	; (8004cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cbc:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cc0:	e002      	b.n	8004cc8 <LoopCopyDataInit>

08004cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cc6:	3304      	adds	r3, #4

08004cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ccc:	d3f9      	bcc.n	8004cc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cce:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cd0:	4c0a      	ldr	r4, [pc, #40]	; (8004cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cd4:	e001      	b.n	8004cda <LoopFillZerobss>

08004cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cd8:	3204      	adds	r2, #4

08004cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cdc:	d3fb      	bcc.n	8004cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cde:	f014 fb0b 	bl	80192f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ce2:	f7fd fda1 	bl	8002828 <main>
  bx  lr
 8004ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ce8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004cec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004cf0:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8004cf4:	0801a228 	.word	0x0801a228
  ldr r2, =_sbss
 8004cf8:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8004cfc:	2400697c 	.word	0x2400697c

08004d00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d00:	e7fe      	b.n	8004d00 <ADC3_IRQHandler>
	...

08004d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d0a:	2003      	movs	r0, #3
 8004d0c:	f001 fd39 	bl	8006782 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d10:	f008 fecc 	bl	800daac <HAL_RCC_GetSysClockFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <HAL_Init+0x68>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	4913      	ldr	r1, [pc, #76]	; (8004d70 <HAL_Init+0x6c>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_Init+0x68>)
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <HAL_Init+0x6c>)
 8004d38:	5cd3      	ldrb	r3, [r2, r3]
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	4a0b      	ldr	r2, [pc, #44]	; (8004d74 <HAL_Init+0x70>)
 8004d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d48:	4a0b      	ldr	r2, [pc, #44]	; (8004d78 <HAL_Init+0x74>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d4e:	2005      	movs	r0, #5
 8004d50:	f7fe fd8c 	bl	800386c <HAL_InitTick>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e002      	b.n	8004d64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d5e:	f7fe fd67 	bl	8003830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	0801a174 	.word	0x0801a174
 8004d74:	240000c4 	.word	0x240000c4
 8004d78:	240000c0 	.word	0x240000c0

08004d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_IncTick+0x20>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <HAL_IncTick+0x24>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <HAL_IncTick+0x24>)
 8004d8e:	6013      	str	r3, [r2, #0]
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	240000cc 	.word	0x240000cc
 8004da0:	24001ffc 	.word	0x24001ffc

08004da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return uwTick;
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_GetTick+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	24001ffc 	.word	0x24001ffc

08004dbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004dc0:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <HAL_GetREVID+0x14>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	0c1b      	lsrs	r3, r3, #16
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	5c001000 	.word	0x5c001000

08004dd4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004dde:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	43db      	mvns	r3, r3
 8004de6:	401a      	ands	r2, r3
 8004de8:	4904      	ldr	r1, [pc, #16]	; (8004dfc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	58000400 	.word	0x58000400

08004e00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	609a      	str	r2, [r3, #8]
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3360      	adds	r3, #96	; 0x60
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	430b      	orrs	r3, r1
 8004e96:	431a      	orrs	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	611a      	str	r2, [r3, #16]
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b087      	sub	sp, #28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3360      	adds	r3, #96	; 0x60
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	601a      	str	r2, [r3, #0]
  }
}
 8004f04:	bf00      	nop
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b087      	sub	sp, #28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3330      	adds	r3, #48	; 0x30
 8004f46:	461a      	mov	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	4413      	add	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	211f      	movs	r1, #31
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	401a      	ands	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0e9b      	lsrs	r3, r3, #26
 8004f6e:	f003 011f 	and.w	r1, r3, #31
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f023 0203 	bic.w	r2, r3, #3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3314      	adds	r3, #20
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	0e5b      	lsrs	r3, r3, #25
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	4413      	add	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	0d1b      	lsrs	r3, r3, #20
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2107      	movs	r1, #7
 8004fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	401a      	ands	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	0d1b      	lsrs	r3, r3, #20
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005024:	43db      	mvns	r3, r3
 8005026:	401a      	ands	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f003 0318 	and.w	r3, r3, #24
 800502e:	4908      	ldr	r1, [pc, #32]	; (8005050 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005030:	40d9      	lsrs	r1, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	400b      	ands	r3, r1
 8005036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800503a:	431a      	orrs	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	000fffff 	.word	0x000fffff

08005054 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 031f 	and.w	r3, r3, #31
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <LL_ADC_DisableDeepPowerDown+0x20>)
 800507e:	4013      	ands	r3, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6093      	str	r3, [r2, #8]
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	5fffffc0 	.word	0x5fffffc0

08005094 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a8:	d101      	bne.n	80050ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	6fffffc0 	.word	0x6fffffc0

080050e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f8:	d101      	bne.n	80050fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <LL_ADC_Enable+0x24>)
 800511a:	4013      	ands	r3, r2
 800511c:	f043 0201 	orr.w	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	7fffffc0 	.word	0x7fffffc0

08005134 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <LL_ADC_Disable+0x24>)
 8005142:	4013      	ands	r3, r2
 8005144:	f043 0202 	orr.w	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	7fffffc0 	.word	0x7fffffc0

0800515c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <LL_ADC_IsEnabled+0x18>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <LL_ADC_IsEnabled+0x1a>
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d101      	bne.n	800519a <LL_ADC_IsDisableOngoing+0x18>
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <LL_ADC_IsDisableOngoing+0x1a>
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <LL_ADC_REG_StartConversion+0x24>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	f043 0204 	orr.w	r2, r3, #4
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	7fffffc0 	.word	0x7fffffc0

080051d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d101      	bne.n	80051e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b08      	cmp	r3, #8
 8005208:	d101      	bne.n	800520e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005228:	2300      	movs	r3, #0
 800522a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e18f      	b.n	8005556 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005240:	2b00      	cmp	r3, #0
 8005242:	d109      	bne.n	8005258 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fb fb81 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ff19 	bl	8005094 <LL_ADC_IsDeepPowerDownEnabled>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff feff 	bl	8005070 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ff34 	bl	80050e4 <LL_ADC_IsInternalRegulatorEnabled>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d114      	bne.n	80052ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff ff18 	bl	80050bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800528c:	4b87      	ldr	r3, [pc, #540]	; (80054ac <HAL_ADC_Init+0x290>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	099b      	lsrs	r3, r3, #6
 8005292:	4a87      	ldr	r2, [pc, #540]	; (80054b0 <HAL_ADC_Init+0x294>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	099b      	lsrs	r3, r3, #6
 800529a:	3301      	adds	r3, #1
 800529c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800529e:	e002      	b.n	80052a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f9      	bne.n	80052a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff ff17 	bl	80050e4 <LL_ADC_IsInternalRegulatorEnabled>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10d      	bne.n	80052d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c0:	f043 0210 	orr.w	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052cc:	f043 0201 	orr.w	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff ff77 	bl	80051d0 <LL_ADC_REG_IsConversionOngoing>
 80052e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 8129 	bne.w	8005544 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 8125 	bne.w	8005544 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005302:	f043 0202 	orr.w	r2, r3, #2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff ff24 	bl	800515c <LL_ADC_IsEnabled>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d136      	bne.n	8005388 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a65      	ldr	r2, [pc, #404]	; (80054b4 <HAL_ADC_Init+0x298>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_ADC_Init+0x112>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a63      	ldr	r2, [pc, #396]	; (80054b8 <HAL_ADC_Init+0x29c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d10e      	bne.n	800534c <HAL_ADC_Init+0x130>
 800532e:	4861      	ldr	r0, [pc, #388]	; (80054b4 <HAL_ADC_Init+0x298>)
 8005330:	f7ff ff14 	bl	800515c <LL_ADC_IsEnabled>
 8005334:	4604      	mov	r4, r0
 8005336:	4860      	ldr	r0, [pc, #384]	; (80054b8 <HAL_ADC_Init+0x29c>)
 8005338:	f7ff ff10 	bl	800515c <LL_ADC_IsEnabled>
 800533c:	4603      	mov	r3, r0
 800533e:	4323      	orrs	r3, r4
 8005340:	2b00      	cmp	r3, #0
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	e008      	b.n	800535e <HAL_ADC_Init+0x142>
 800534c:	485b      	ldr	r0, [pc, #364]	; (80054bc <HAL_ADC_Init+0x2a0>)
 800534e:	f7ff ff05 	bl	800515c <LL_ADC_IsEnabled>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d012      	beq.n	8005388 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a53      	ldr	r2, [pc, #332]	; (80054b4 <HAL_ADC_Init+0x298>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <HAL_ADC_Init+0x15a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a51      	ldr	r2, [pc, #324]	; (80054b8 <HAL_ADC_Init+0x29c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d101      	bne.n	800537a <HAL_ADC_Init+0x15e>
 8005376:	4a52      	ldr	r2, [pc, #328]	; (80054c0 <HAL_ADC_Init+0x2a4>)
 8005378:	e000      	b.n	800537c <HAL_ADC_Init+0x160>
 800537a:	4a52      	ldr	r2, [pc, #328]	; (80054c4 <HAL_ADC_Init+0x2a8>)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f7ff fd3c 	bl	8004e00 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005388:	f7ff fd18 	bl	8004dbc <HAL_GetREVID>
 800538c:	4603      	mov	r3, r0
 800538e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005392:	4293      	cmp	r3, r2
 8005394:	d914      	bls.n	80053c0 <HAL_ADC_Init+0x1a4>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2b10      	cmp	r3, #16
 800539c:	d110      	bne.n	80053c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	7d5b      	ldrb	r3, [r3, #21]
 80053a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80053ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7f1b      	ldrb	r3, [r3, #28]
 80053b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80053b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053b8:	f043 030c 	orr.w	r3, r3, #12
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	e00d      	b.n	80053dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7d5b      	ldrb	r3, [r3, #21]
 80053c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80053d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	7f1b      	ldrb	r3, [r3, #28]
 80053d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053d8:	4313      	orrs	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7f1b      	ldrb	r3, [r3, #28]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d106      	bne.n	80053f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	045b      	lsls	r3, r3, #17
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <HAL_ADC_Init+0x2ac>)
 8005416:	4013      	ands	r3, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	69b9      	ldr	r1, [r7, #24]
 800541e:	430b      	orrs	r3, r1
 8005420:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff fed2 	bl	80051d0 <LL_ADC_REG_IsConversionOngoing>
 800542c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fedf 	bl	80051f6 <LL_ADC_INJ_IsConversionOngoing>
 8005438:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d15f      	bne.n	8005500 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d15c      	bne.n	8005500 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	7d1b      	ldrb	r3, [r3, #20]
 800544a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	4b1c      	ldr	r3, [pc, #112]	; (80054cc <HAL_ADC_Init+0x2b0>)
 800545c:	4013      	ands	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	69b9      	ldr	r1, [r7, #24]
 8005464:	430b      	orrs	r3, r1
 8005466:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800546e:	2b01      	cmp	r3, #1
 8005470:	d130      	bne.n	80054d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <HAL_ADC_Init+0x2b4>)
 8005480:	4013      	ands	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005486:	3a01      	subs	r2, #1
 8005488:	0411      	lsls	r1, r2, #16
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800548e:	4311      	orrs	r1, r2
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005494:	4311      	orrs	r1, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800549a:	430a      	orrs	r2, r1
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	611a      	str	r2, [r3, #16]
 80054a8:	e01c      	b.n	80054e4 <HAL_ADC_Init+0x2c8>
 80054aa:	bf00      	nop
 80054ac:	240000c0 	.word	0x240000c0
 80054b0:	053e2d63 	.word	0x053e2d63
 80054b4:	40022000 	.word	0x40022000
 80054b8:	40022100 	.word	0x40022100
 80054bc:	58026000 	.word	0x58026000
 80054c0:	40022300 	.word	0x40022300
 80054c4:	58026300 	.word	0x58026300
 80054c8:	fff0c003 	.word	0xfff0c003
 80054cc:	ffffbffc 	.word	0xffffbffc
 80054d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0201 	bic.w	r2, r2, #1
 80054e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fdec 	bl	80060d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d10c      	bne.n	8005522 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	f023 010f 	bic.w	r1, r3, #15
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	1e5a      	subs	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
 8005520:	e007      	b.n	8005532 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 020f 	bic.w	r2, r2, #15
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	f043 0201 	orr.w	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	655a      	str	r2, [r3, #84]	; 0x54
 8005542:	e007      	b.n	8005554 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005548:	f043 0210 	orr.w	r2, r3, #16
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005554:	7ffb      	ldrb	r3, [r7, #31]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3724      	adds	r7, #36	; 0x24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd90      	pop	{r4, r7, pc}
 800555e:	bf00      	nop

08005560 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a55      	ldr	r2, [pc, #340]	; (80056c8 <HAL_ADC_Start_DMA+0x168>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_ADC_Start_DMA+0x20>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a54      	ldr	r2, [pc, #336]	; (80056cc <HAL_ADC_Start_DMA+0x16c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d101      	bne.n	8005584 <HAL_ADC_Start_DMA+0x24>
 8005580:	4b53      	ldr	r3, [pc, #332]	; (80056d0 <HAL_ADC_Start_DMA+0x170>)
 8005582:	e000      	b.n	8005586 <HAL_ADC_Start_DMA+0x26>
 8005584:	4b53      	ldr	r3, [pc, #332]	; (80056d4 <HAL_ADC_Start_DMA+0x174>)
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fd64 	bl	8005054 <LL_ADC_GetMultimode>
 800558c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fe1c 	bl	80051d0 <LL_ADC_REG_IsConversionOngoing>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	f040 808c 	bne.w	80056b8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_ADC_Start_DMA+0x4e>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e087      	b.n	80056be <HAL_ADC_Start_DMA+0x15e>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d002      	beq.n	80055c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b09      	cmp	r3, #9
 80055c6:	d170      	bne.n	80056aa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fc07 	bl	8005ddc <ADC_Enable>
 80055ce:	4603      	mov	r3, r0
 80055d0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d163      	bne.n	80056a0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055dc:	4b3e      	ldr	r3, [pc, #248]	; (80056d8 <HAL_ADC_Start_DMA+0x178>)
 80055de:	4013      	ands	r3, r2
 80055e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a37      	ldr	r2, [pc, #220]	; (80056cc <HAL_ADC_Start_DMA+0x16c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d002      	beq.n	80055f8 <HAL_ADC_Start_DMA+0x98>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	e000      	b.n	80055fa <HAL_ADC_Start_DMA+0x9a>
 80055f8:	4b33      	ldr	r3, [pc, #204]	; (80056c8 <HAL_ADC_Start_DMA+0x168>)
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	4293      	cmp	r3, r2
 8005600:	d002      	beq.n	8005608 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d006      	beq.n	800562e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005624:	f023 0206 	bic.w	r2, r3, #6
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	659a      	str	r2, [r3, #88]	; 0x58
 800562c:	e002      	b.n	8005634 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005638:	4a28      	ldr	r2, [pc, #160]	; (80056dc <HAL_ADC_Start_DMA+0x17c>)
 800563a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005640:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <HAL_ADC_Start_DMA+0x180>)
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005648:	4a26      	ldr	r2, [pc, #152]	; (80056e4 <HAL_ADC_Start_DMA+0x184>)
 800564a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	221c      	movs	r2, #28
 8005652:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0210 	orr.w	r2, r2, #16
 800566a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f7ff fc89 	bl	8004f8e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3340      	adds	r3, #64	; 0x40
 8005686:	4619      	mov	r1, r3
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f002 f80e 	bl	80076ac <HAL_DMA_Start_IT>
 8005690:	4603      	mov	r3, r0
 8005692:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fd85 	bl	80051a8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800569e:	e00d      	b.n	80056bc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80056a8:	e008      	b.n	80056bc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80056b6:	e001      	b.n	80056bc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
 80056ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40022000 	.word	0x40022000
 80056cc:	40022100 	.word	0x40022100
 80056d0:	40022300 	.word	0x40022300
 80056d4:	58026300 	.word	0x58026300
 80056d8:	fffff0fe 	.word	0xfffff0fe
 80056dc:	08005faf 	.word	0x08005faf
 80056e0:	08006087 	.word	0x08006087
 80056e4:	080060a3 	.word	0x080060a3

080056e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b0a1      	sub	sp, #132	; 0x84
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4a65      	ldr	r2, [pc, #404]	; (80058d4 <HAL_ADC_ConfigChannel+0x1b0>)
 800573e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_ADC_ConfigChannel+0x2a>
 800574a:	2302      	movs	r3, #2
 800574c:	e32e      	b.n	8005dac <HAL_ADC_ConfigChannel+0x688>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff fd38 	bl	80051d0 <LL_ADC_REG_IsConversionOngoing>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 8313 	bne.w	8005d8e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	db2c      	blt.n	80057ca <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	2b00      	cmp	r3, #0
 800577a:	d108      	bne.n	800578e <HAL_ADC_ConfigChannel+0x6a>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	0e9b      	lsrs	r3, r3, #26
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2201      	movs	r2, #1
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	e016      	b.n	80057bc <HAL_ADC_ConfigChannel+0x98>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005796:	fa93 f3a3 	rbit	r3, r3
 800579a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800579c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800579e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80057a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80057a6:	2320      	movs	r3, #32
 80057a8:	e003      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80057aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057ac:	fab3 f383 	clz	r3, r3
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2201      	movs	r2, #1
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	69d1      	ldr	r1, [r2, #28]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	430b      	orrs	r3, r1
 80057c8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f7ff fbad 	bl	8004f36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fcf5 	bl	80051d0 <LL_ADC_REG_IsConversionOngoing>
 80057e6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fd02 	bl	80051f6 <LL_ADC_INJ_IsConversionOngoing>
 80057f2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f040 80b8 	bne.w	800596c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f040 80b4 	bne.w	800596c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	461a      	mov	r2, r3
 8005812:	f7ff fbcf 	bl	8004fb4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005816:	4b30      	ldr	r3, [pc, #192]	; (80058d8 <HAL_ADC_ConfigChannel+0x1b4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800581e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005822:	d10b      	bne.n	800583c <HAL_ADC_ConfigChannel+0x118>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	089b      	lsrs	r3, r3, #2
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	e01d      	b.n	8005878 <HAL_ADC_ConfigChannel+0x154>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x13e>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695a      	ldr	r2, [r3, #20]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	089b      	lsrs	r3, r3, #2
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	e00a      	b.n	8005878 <HAL_ADC_ConfigChannel+0x154>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b04      	cmp	r3, #4
 8005880:	d02c      	beq.n	80058dc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6919      	ldr	r1, [r3, #16]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005890:	f7ff faea 	bl	8004e68 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	6919      	ldr	r1, [r3, #16]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	7e5b      	ldrb	r3, [r3, #25]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d102      	bne.n	80058aa <HAL_ADC_ConfigChannel+0x186>
 80058a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058a8:	e000      	b.n	80058ac <HAL_ADC_ConfigChannel+0x188>
 80058aa:	2300      	movs	r3, #0
 80058ac:	461a      	mov	r2, r3
 80058ae:	f7ff fb14 	bl	8004eda <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6919      	ldr	r1, [r3, #16]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	7e1b      	ldrb	r3, [r3, #24]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d102      	bne.n	80058c8 <HAL_ADC_ConfigChannel+0x1a4>
 80058c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058c6:	e000      	b.n	80058ca <HAL_ADC_ConfigChannel+0x1a6>
 80058c8:	2300      	movs	r3, #0
 80058ca:	461a      	mov	r2, r3
 80058cc:	f7ff faec 	bl	8004ea8 <LL_ADC_SetDataRightShift>
 80058d0:	e04c      	b.n	800596c <HAL_ADC_ConfigChannel+0x248>
 80058d2:	bf00      	nop
 80058d4:	47ff0000 	.word	0x47ff0000
 80058d8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	069b      	lsls	r3, r3, #26
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d107      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	069b      	lsls	r3, r3, #26
 8005910:	429a      	cmp	r2, r3
 8005912:	d107      	bne.n	8005924 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005922:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800592a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	069b      	lsls	r3, r3, #26
 8005934:	429a      	cmp	r2, r3
 8005936:	d107      	bne.n	8005948 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005946:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800594e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	069b      	lsls	r3, r3, #26
 8005958:	429a      	cmp	r2, r3
 800595a:	d107      	bne.n	800596c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800596a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff fbf3 	bl	800515c <LL_ADC_IsEnabled>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	f040 8211 	bne.w	8005da0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	461a      	mov	r2, r3
 800598c:	f7ff fb3e 	bl	800500c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4aa1      	ldr	r2, [pc, #644]	; (8005c1c <HAL_ADC_ConfigChannel+0x4f8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	f040 812e 	bne.w	8005bf8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10b      	bne.n	80059c4 <HAL_ADC_ConfigChannel+0x2a0>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	0e9b      	lsrs	r3, r3, #26
 80059b2:	3301      	adds	r3, #1
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2b09      	cmp	r3, #9
 80059ba:	bf94      	ite	ls
 80059bc:	2301      	movls	r3, #1
 80059be:	2300      	movhi	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	e019      	b.n	80059f8 <HAL_ADC_ConfigChannel+0x2d4>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059cc:	fa93 f3a3 	rbit	r3, r3
 80059d0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80059d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80059d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80059dc:	2320      	movs	r3, #32
 80059de:	e003      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80059e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e2:	fab3 f383 	clz	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	3301      	adds	r3, #1
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	2b09      	cmp	r3, #9
 80059f0:	bf94      	ite	ls
 80059f2:	2301      	movls	r3, #1
 80059f4:	2300      	movhi	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d079      	beq.n	8005af0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d107      	bne.n	8005a18 <HAL_ADC_ConfigChannel+0x2f4>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	0e9b      	lsrs	r3, r3, #26
 8005a0e:	3301      	adds	r3, #1
 8005a10:	069b      	lsls	r3, r3, #26
 8005a12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a16:	e015      	b.n	8005a44 <HAL_ADC_ConfigChannel+0x320>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a20:	fa93 f3a3 	rbit	r3, r3
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a28:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8005a30:	2320      	movs	r3, #32
 8005a32:	e003      	b.n	8005a3c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8005a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a36:	fab3 f383 	clz	r3, r3
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	069b      	lsls	r3, r3, #26
 8005a40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d109      	bne.n	8005a64 <HAL_ADC_ConfigChannel+0x340>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	0e9b      	lsrs	r3, r3, #26
 8005a56:	3301      	adds	r3, #1
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a62:	e017      	b.n	8005a94 <HAL_ADC_ConfigChannel+0x370>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6c:	fa93 f3a3 	rbit	r3, r3
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a74:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	e003      	b.n	8005a88 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8005a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a82:	fab3 f383 	clz	r3, r3
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	3301      	adds	r3, #1
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2101      	movs	r1, #1
 8005a90:	fa01 f303 	lsl.w	r3, r1, r3
 8005a94:	ea42 0103 	orr.w	r1, r2, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <HAL_ADC_ConfigChannel+0x396>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	0e9b      	lsrs	r3, r3, #26
 8005aaa:	3301      	adds	r3, #1
 8005aac:	f003 021f 	and.w	r2, r3, #31
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	051b      	lsls	r3, r3, #20
 8005ab8:	e018      	b.n	8005aec <HAL_ADC_ConfigChannel+0x3c8>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	fa93 f3a3 	rbit	r3, r3
 8005ac6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8005ad2:	2320      	movs	r3, #32
 8005ad4:	e003      	b.n	8005ade <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	fab3 f383 	clz	r3, r3
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	3301      	adds	r3, #1
 8005ae0:	f003 021f 	and.w	r2, r3, #31
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	4413      	add	r3, r2
 8005aea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aec:	430b      	orrs	r3, r1
 8005aee:	e07e      	b.n	8005bee <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d107      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0x3e8>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	0e9b      	lsrs	r3, r3, #26
 8005b02:	3301      	adds	r3, #1
 8005b04:	069b      	lsls	r3, r3, #26
 8005b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b0a:	e015      	b.n	8005b38 <HAL_ADC_ConfigChannel+0x414>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	fa93 f3a3 	rbit	r3, r3
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8005b24:	2320      	movs	r3, #32
 8005b26:	e003      	b.n	8005b30 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	fab3 f383 	clz	r3, r3
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	3301      	adds	r3, #1
 8005b32:	069b      	lsls	r3, r3, #26
 8005b34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <HAL_ADC_ConfigChannel+0x434>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	0e9b      	lsrs	r3, r3, #26
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	2101      	movs	r1, #1
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	e017      	b.n	8005b88 <HAL_ADC_ConfigChannel+0x464>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	fa93 f3a3 	rbit	r3, r3
 8005b64:	61bb      	str	r3, [r7, #24]
  return result;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8005b70:	2320      	movs	r3, #32
 8005b72:	e003      	b.n	8005b7c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	fab3 f383 	clz	r3, r3
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	2101      	movs	r1, #1
 8005b84:	fa01 f303 	lsl.w	r3, r1, r3
 8005b88:	ea42 0103 	orr.w	r1, r2, r3
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10d      	bne.n	8005bb4 <HAL_ADC_ConfigChannel+0x490>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	0e9b      	lsrs	r3, r3, #26
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	f003 021f 	and.w	r2, r3, #31
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4413      	add	r3, r2
 8005baa:	3b1e      	subs	r3, #30
 8005bac:	051b      	lsls	r3, r3, #20
 8005bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bb2:	e01b      	b.n	8005bec <HAL_ADC_ConfigChannel+0x4c8>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	fa93 f3a3 	rbit	r3, r3
 8005bc0:	60fb      	str	r3, [r7, #12]
  return result;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8005bcc:	2320      	movs	r3, #32
 8005bce:	e003      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	fab3 f383 	clz	r3, r3
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	3301      	adds	r3, #1
 8005bda:	f003 021f 	and.w	r2, r3, #31
 8005bde:	4613      	mov	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	4413      	add	r3, r2
 8005be4:	3b1e      	subs	r3, #30
 8005be6:	051b      	lsls	r3, r3, #20
 8005be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bec:	430b      	orrs	r3, r1
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	6892      	ldr	r2, [r2, #8]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	f7ff f9de 	bl	8004fb4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f280 80cf 	bge.w	8005da0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a06      	ldr	r2, [pc, #24]	; (8005c20 <HAL_ADC_ConfigChannel+0x4fc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d004      	beq.n	8005c16 <HAL_ADC_ConfigChannel+0x4f2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <HAL_ADC_ConfigChannel+0x500>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d10a      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x508>
 8005c16:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <HAL_ADC_ConfigChannel+0x504>)
 8005c18:	e009      	b.n	8005c2e <HAL_ADC_ConfigChannel+0x50a>
 8005c1a:	bf00      	nop
 8005c1c:	47ff0000 	.word	0x47ff0000
 8005c20:	40022000 	.word	0x40022000
 8005c24:	40022100 	.word	0x40022100
 8005c28:	40022300 	.word	0x40022300
 8005c2c:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <HAL_ADC_ConfigChannel+0x690>)
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff f90c 	bl	8004e4c <LL_ADC_GetCommonPathInternalCh>
 8005c34:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a5f      	ldr	r2, [pc, #380]	; (8005db8 <HAL_ADC_ConfigChannel+0x694>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d004      	beq.n	8005c4a <HAL_ADC_ConfigChannel+0x526>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a5d      	ldr	r2, [pc, #372]	; (8005dbc <HAL_ADC_ConfigChannel+0x698>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10e      	bne.n	8005c68 <HAL_ADC_ConfigChannel+0x544>
 8005c4a:	485b      	ldr	r0, [pc, #364]	; (8005db8 <HAL_ADC_ConfigChannel+0x694>)
 8005c4c:	f7ff fa86 	bl	800515c <LL_ADC_IsEnabled>
 8005c50:	4604      	mov	r4, r0
 8005c52:	485a      	ldr	r0, [pc, #360]	; (8005dbc <HAL_ADC_ConfigChannel+0x698>)
 8005c54:	f7ff fa82 	bl	800515c <LL_ADC_IsEnabled>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	4323      	orrs	r3, r4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	e008      	b.n	8005c7a <HAL_ADC_ConfigChannel+0x556>
 8005c68:	4855      	ldr	r0, [pc, #340]	; (8005dc0 <HAL_ADC_ConfigChannel+0x69c>)
 8005c6a:	f7ff fa77 	bl	800515c <LL_ADC_IsEnabled>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf0c      	ite	eq
 8005c74:	2301      	moveq	r3, #1
 8005c76:	2300      	movne	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d07d      	beq.n	8005d7a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a50      	ldr	r2, [pc, #320]	; (8005dc4 <HAL_ADC_ConfigChannel+0x6a0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d130      	bne.n	8005cea <HAL_ADC_ConfigChannel+0x5c6>
 8005c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d12b      	bne.n	8005cea <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a4a      	ldr	r2, [pc, #296]	; (8005dc0 <HAL_ADC_ConfigChannel+0x69c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	f040 8081 	bne.w	8005da0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a45      	ldr	r2, [pc, #276]	; (8005db8 <HAL_ADC_ConfigChannel+0x694>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_ADC_ConfigChannel+0x58e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a43      	ldr	r2, [pc, #268]	; (8005dbc <HAL_ADC_ConfigChannel+0x698>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d101      	bne.n	8005cb6 <HAL_ADC_ConfigChannel+0x592>
 8005cb2:	4a45      	ldr	r2, [pc, #276]	; (8005dc8 <HAL_ADC_ConfigChannel+0x6a4>)
 8005cb4:	e000      	b.n	8005cb8 <HAL_ADC_ConfigChannel+0x594>
 8005cb6:	4a3f      	ldr	r2, [pc, #252]	; (8005db4 <HAL_ADC_ConfigChannel+0x690>)
 8005cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f7ff f8b0 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cc6:	4b41      	ldr	r3, [pc, #260]	; (8005dcc <HAL_ADC_ConfigChannel+0x6a8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	4a40      	ldr	r2, [pc, #256]	; (8005dd0 <HAL_ADC_ConfigChannel+0x6ac>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	099b      	lsrs	r3, r3, #6
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005cda:	e002      	b.n	8005ce2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1f9      	bne.n	8005cdc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ce8:	e05a      	b.n	8005da0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a39      	ldr	r2, [pc, #228]	; (8005dd4 <HAL_ADC_ConfigChannel+0x6b0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d11e      	bne.n	8005d32 <HAL_ADC_ConfigChannel+0x60e>
 8005cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d119      	bne.n	8005d32 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2f      	ldr	r2, [pc, #188]	; (8005dc0 <HAL_ADC_ConfigChannel+0x69c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d14b      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a2a      	ldr	r2, [pc, #168]	; (8005db8 <HAL_ADC_ConfigChannel+0x694>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_ADC_ConfigChannel+0x5f8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a29      	ldr	r2, [pc, #164]	; (8005dbc <HAL_ADC_ConfigChannel+0x698>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <HAL_ADC_ConfigChannel+0x5fc>
 8005d1c:	4a2a      	ldr	r2, [pc, #168]	; (8005dc8 <HAL_ADC_ConfigChannel+0x6a4>)
 8005d1e:	e000      	b.n	8005d22 <HAL_ADC_ConfigChannel+0x5fe>
 8005d20:	4a24      	ldr	r2, [pc, #144]	; (8005db4 <HAL_ADC_ConfigChannel+0x690>)
 8005d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f7ff f87b 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d30:	e036      	b.n	8005da0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <HAL_ADC_ConfigChannel+0x6b4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d131      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x67c>
 8005d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d12c      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1d      	ldr	r2, [pc, #116]	; (8005dc0 <HAL_ADC_ConfigChannel+0x69c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d127      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <HAL_ADC_ConfigChannel+0x694>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <HAL_ADC_ConfigChannel+0x640>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a17      	ldr	r2, [pc, #92]	; (8005dbc <HAL_ADC_ConfigChannel+0x698>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d101      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x644>
 8005d64:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <HAL_ADC_ConfigChannel+0x6a4>)
 8005d66:	e000      	b.n	8005d6a <HAL_ADC_ConfigChannel+0x646>
 8005d68:	4a12      	ldr	r2, [pc, #72]	; (8005db4 <HAL_ADC_ConfigChannel+0x690>)
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7ff f857 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
 8005d78:	e012      	b.n	8005da0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	f043 0220 	orr.w	r2, r3, #32
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005d8c:	e008      	b.n	8005da0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005da8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3784      	adds	r7, #132	; 0x84
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd90      	pop	{r4, r7, pc}
 8005db4:	58026300 	.word	0x58026300
 8005db8:	40022000 	.word	0x40022000
 8005dbc:	40022100 	.word	0x40022100
 8005dc0:	58026000 	.word	0x58026000
 8005dc4:	cb840000 	.word	0xcb840000
 8005dc8:	40022300 	.word	0x40022300
 8005dcc:	240000c0 	.word	0x240000c0
 8005dd0:	053e2d63 	.word	0x053e2d63
 8005dd4:	c7520000 	.word	0xc7520000
 8005dd8:	cfb80000 	.word	0xcfb80000

08005ddc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff f9b7 	bl	800515c <LL_ADC_IsEnabled>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d16e      	bne.n	8005ed2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	4b38      	ldr	r3, [pc, #224]	; (8005edc <ADC_Enable+0x100>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00d      	beq.n	8005e1e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	f043 0210 	orr.w	r2, r3, #16
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	f043 0201 	orr.w	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e05a      	b.n	8005ed4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff f972 	bl	800510c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e28:	f7fe ffbc 	bl	8004da4 <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2b      	ldr	r2, [pc, #172]	; (8005ee0 <ADC_Enable+0x104>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <ADC_Enable+0x66>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <ADC_Enable+0x108>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <ADC_Enable+0x6a>
 8005e42:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <ADC_Enable+0x10c>)
 8005e44:	e000      	b.n	8005e48 <ADC_Enable+0x6c>
 8005e46:	4b29      	ldr	r3, [pc, #164]	; (8005eec <ADC_Enable+0x110>)
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff f903 	bl	8005054 <LL_ADC_GetMultimode>
 8005e4e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a23      	ldr	r2, [pc, #140]	; (8005ee4 <ADC_Enable+0x108>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d002      	beq.n	8005e60 <ADC_Enable+0x84>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	e000      	b.n	8005e62 <ADC_Enable+0x86>
 8005e60:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <ADC_Enable+0x104>)
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d02c      	beq.n	8005ec4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d130      	bne.n	8005ed2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e70:	e028      	b.n	8005ec4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff f970 	bl	800515c <LL_ADC_IsEnabled>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff f940 	bl	800510c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e8c:	f7fe ff8a 	bl	8004da4 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d914      	bls.n	8005ec4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d00d      	beq.n	8005ec4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eac:	f043 0210 	orr.w	r2, r3, #16
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	f043 0201 	orr.w	r2, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e007      	b.n	8005ed4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d1cf      	bne.n	8005e72 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	8000003f 	.word	0x8000003f
 8005ee0:	40022000 	.word	0x40022000
 8005ee4:	40022100 	.word	0x40022100
 8005ee8:	40022300 	.word	0x40022300
 8005eec:	58026300 	.word	0x58026300

08005ef0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff f940 	bl	8005182 <LL_ADC_IsDisableOngoing>
 8005f02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff f927 	bl	800515c <LL_ADC_IsEnabled>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d047      	beq.n	8005fa4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d144      	bne.n	8005fa4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 030d 	and.w	r3, r3, #13
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d10c      	bne.n	8005f42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff f901 	bl	8005134 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2203      	movs	r2, #3
 8005f38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f3a:	f7fe ff33 	bl	8004da4 <HAL_GetTick>
 8005f3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f40:	e029      	b.n	8005f96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f46:	f043 0210 	orr.w	r2, r3, #16
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f52:	f043 0201 	orr.w	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e023      	b.n	8005fa6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f5e:	f7fe ff21 	bl	8004da4 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d914      	bls.n	8005f96 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	f043 0210 	orr.w	r2, r3, #16
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8a:	f043 0201 	orr.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e007      	b.n	8005fa6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1dc      	bne.n	8005f5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d14b      	bne.n	8006060 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d021      	beq.n	8006026 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe ff92 	bl	8004f10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d032      	beq.n	8006058 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d12b      	bne.n	8006058 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d11f      	bne.n	8006058 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601c:	f043 0201 	orr.w	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	655a      	str	r2, [r3, #84]	; 0x54
 8006024:	e018      	b.n	8006058 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0303 	and.w	r3, r3, #3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d111      	bne.n	8006058 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006038:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006050:	f043 0201 	orr.w	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fb45 	bl	80056e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800605e:	e00e      	b.n	800607e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff fb4f 	bl	8005710 <HAL_ADC_ErrorCallback>
}
 8006072:	e004      	b.n	800607e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
}
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f7ff fb31 	bl	80056fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b084      	sub	sp, #16
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c0:	f043 0204 	orr.w	r2, r3, #4
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff fb21 	bl	8005710 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a7a      	ldr	r2, [pc, #488]	; (80062d0 <ADC_ConfigureBoostMode+0x1f8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <ADC_ConfigureBoostMode+0x1c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a79      	ldr	r2, [pc, #484]	; (80062d4 <ADC_ConfigureBoostMode+0x1fc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d109      	bne.n	8006108 <ADC_ConfigureBoostMode+0x30>
 80060f4:	4b78      	ldr	r3, [pc, #480]	; (80062d8 <ADC_ConfigureBoostMode+0x200>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bf14      	ite	ne
 8006100:	2301      	movne	r3, #1
 8006102:	2300      	moveq	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	e008      	b.n	800611a <ADC_ConfigureBoostMode+0x42>
 8006108:	4b74      	ldr	r3, [pc, #464]	; (80062dc <ADC_ConfigureBoostMode+0x204>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf14      	ite	ne
 8006114:	2301      	movne	r3, #1
 8006116:	2300      	moveq	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01c      	beq.n	8006158 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800611e:	f007 fe3f 	bl	800dda0 <HAL_RCC_GetHCLKFreq>
 8006122:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800612c:	d010      	beq.n	8006150 <ADC_ConfigureBoostMode+0x78>
 800612e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006132:	d873      	bhi.n	800621c <ADC_ConfigureBoostMode+0x144>
 8006134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006138:	d002      	beq.n	8006140 <ADC_ConfigureBoostMode+0x68>
 800613a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800613e:	d16d      	bne.n	800621c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	0c1b      	lsrs	r3, r3, #16
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	fbb2 f3f3 	udiv	r3, r2, r3
 800614c:	60fb      	str	r3, [r7, #12]
        break;
 800614e:	e068      	b.n	8006222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	089b      	lsrs	r3, r3, #2
 8006154:	60fb      	str	r3, [r7, #12]
        break;
 8006156:	e064      	b.n	8006222 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006158:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800615c:	f04f 0100 	mov.w	r1, #0
 8006160:	f009 f8c6 	bl	800f2f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006164:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800616e:	d051      	beq.n	8006214 <ADC_ConfigureBoostMode+0x13c>
 8006170:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006174:	d854      	bhi.n	8006220 <ADC_ConfigureBoostMode+0x148>
 8006176:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800617a:	d047      	beq.n	800620c <ADC_ConfigureBoostMode+0x134>
 800617c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006180:	d84e      	bhi.n	8006220 <ADC_ConfigureBoostMode+0x148>
 8006182:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006186:	d03d      	beq.n	8006204 <ADC_ConfigureBoostMode+0x12c>
 8006188:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800618c:	d848      	bhi.n	8006220 <ADC_ConfigureBoostMode+0x148>
 800618e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006192:	d033      	beq.n	80061fc <ADC_ConfigureBoostMode+0x124>
 8006194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006198:	d842      	bhi.n	8006220 <ADC_ConfigureBoostMode+0x148>
 800619a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800619e:	d029      	beq.n	80061f4 <ADC_ConfigureBoostMode+0x11c>
 80061a0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80061a4:	d83c      	bhi.n	8006220 <ADC_ConfigureBoostMode+0x148>
 80061a6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80061aa:	d01a      	beq.n	80061e2 <ADC_ConfigureBoostMode+0x10a>
 80061ac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80061b0:	d836      	bhi.n	8006220 <ADC_ConfigureBoostMode+0x148>
 80061b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80061b6:	d014      	beq.n	80061e2 <ADC_ConfigureBoostMode+0x10a>
 80061b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80061bc:	d830      	bhi.n	8006220 <ADC_ConfigureBoostMode+0x148>
 80061be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c2:	d00e      	beq.n	80061e2 <ADC_ConfigureBoostMode+0x10a>
 80061c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c8:	d82a      	bhi.n	8006220 <ADC_ConfigureBoostMode+0x148>
 80061ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061ce:	d008      	beq.n	80061e2 <ADC_ConfigureBoostMode+0x10a>
 80061d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061d4:	d824      	bhi.n	8006220 <ADC_ConfigureBoostMode+0x148>
 80061d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061da:	d002      	beq.n	80061e2 <ADC_ConfigureBoostMode+0x10a>
 80061dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061e0:	d11e      	bne.n	8006220 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	0c9b      	lsrs	r3, r3, #18
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f0:	60fb      	str	r3, [r7, #12]
        break;
 80061f2:	e016      	b.n	8006222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	091b      	lsrs	r3, r3, #4
 80061f8:	60fb      	str	r3, [r7, #12]
        break;
 80061fa:	e012      	b.n	8006222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	60fb      	str	r3, [r7, #12]
        break;
 8006202:	e00e      	b.n	8006222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	60fb      	str	r3, [r7, #12]
        break;
 800620a:	e00a      	b.n	8006222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	09db      	lsrs	r3, r3, #7
 8006210:	60fb      	str	r3, [r7, #12]
        break;
 8006212:	e006      	b.n	8006222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	0a1b      	lsrs	r3, r3, #8
 8006218:	60fb      	str	r3, [r7, #12]
        break;
 800621a:	e002      	b.n	8006222 <ADC_ConfigureBoostMode+0x14a>
        break;
 800621c:	bf00      	nop
 800621e:	e000      	b.n	8006222 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006220:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006222:	f7fe fdcb 	bl	8004dbc <HAL_GetREVID>
 8006226:	4603      	mov	r3, r0
 8006228:	f241 0203 	movw	r2, #4099	; 0x1003
 800622c:	4293      	cmp	r3, r2
 800622e:	d815      	bhi.n	800625c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a2b      	ldr	r2, [pc, #172]	; (80062e0 <ADC_ConfigureBoostMode+0x208>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d908      	bls.n	800624a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006246:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006248:	e03e      	b.n	80062c8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006258:	609a      	str	r2, [r3, #8]
}
 800625a:	e035      	b.n	80062c8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <ADC_ConfigureBoostMode+0x20c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d808      	bhi.n	800627c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006278:	609a      	str	r2, [r3, #8]
}
 800627a:	e025      	b.n	80062c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4a1a      	ldr	r2, [pc, #104]	; (80062e8 <ADC_ConfigureBoostMode+0x210>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d80a      	bhi.n	800629a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006296:	609a      	str	r2, [r3, #8]
}
 8006298:	e016      	b.n	80062c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a13      	ldr	r2, [pc, #76]	; (80062ec <ADC_ConfigureBoostMode+0x214>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d80a      	bhi.n	80062b8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b4:	609a      	str	r2, [r3, #8]
}
 80062b6:	e007      	b.n	80062c8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80062c6:	609a      	str	r2, [r3, #8]
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40022000 	.word	0x40022000
 80062d4:	40022100 	.word	0x40022100
 80062d8:	40022300 	.word	0x40022300
 80062dc:	58026300 	.word	0x58026300
 80062e0:	01312d00 	.word	0x01312d00
 80062e4:	005f5e10 	.word	0x005f5e10
 80062e8:	00bebc20 	.word	0x00bebc20
 80062ec:	017d7840 	.word	0x017d7840

080062f0 <LL_ADC_IsEnabled>:
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <LL_ADC_IsEnabled+0x18>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <LL_ADC_IsEnabled+0x1a>
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <LL_ADC_StartCalibration>:
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <LL_ADC_StartCalibration+0x38>)
 800632a:	4013      	ands	r3, r2
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006338:	430a      	orrs	r2, r1
 800633a:	4313      	orrs	r3, r2
 800633c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	609a      	str	r2, [r3, #8]
}
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	3ffeffc0 	.word	0x3ffeffc0

08006354 <LL_ADC_IsCalibrationOnGoing>:
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006368:	d101      	bne.n	800636e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <LL_ADC_REG_IsConversionOngoing>:
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b04      	cmp	r3, #4
 800638e:	d101      	bne.n	8006394 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
	...

080063a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_ADCEx_Calibration_Start+0x1e>
 80063be:	2302      	movs	r3, #2
 80063c0:	e04c      	b.n	800645c <HAL_ADCEx_Calibration_Start+0xb8>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff fd90 	bl	8005ef0 <ADC_Disable>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d135      	bne.n	8006446 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063de:	4b21      	ldr	r3, [pc, #132]	; (8006464 <HAL_ADCEx_Calibration_Start+0xc0>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	f043 0202 	orr.w	r2, r3, #2
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff ff90 	bl	8006318 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80063f8:	e014      	b.n	8006424 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	3301      	adds	r3, #1
 80063fe:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	4a19      	ldr	r2, [pc, #100]	; (8006468 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d30d      	bcc.n	8006424 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640c:	f023 0312 	bic.w	r3, r3, #18
 8006410:	f043 0210 	orr.w	r2, r3, #16
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e01b      	b.n	800645c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff ff93 	bl	8006354 <LL_ADC_IsCalibrationOnGoing>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e2      	bne.n	80063fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	f023 0303 	bic.w	r3, r3, #3
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	655a      	str	r2, [r3, #84]	; 0x54
 8006444:	e005      	b.n	8006452 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	f043 0210 	orr.w	r2, r3, #16
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800645a:	7dfb      	ldrb	r3, [r7, #23]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	ffffeefd 	.word	0xffffeefd
 8006468:	25c3f800 	.word	0x25c3f800

0800646c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b09f      	sub	sp, #124	; 0x7c
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006486:	2302      	movs	r3, #2
 8006488:	e0be      	b.n	8006608 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006492:	2300      	movs	r3, #0
 8006494:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006496:	2300      	movs	r3, #0
 8006498:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a5c      	ldr	r2, [pc, #368]	; (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d102      	bne.n	80064aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80064a4:	4b5b      	ldr	r3, [pc, #364]	; (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	e001      	b.n	80064ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80064aa:	2300      	movs	r3, #0
 80064ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	f043 0220 	orr.w	r2, r3, #32
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e09d      	b.n	8006608 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff ff54 	bl	800637c <LL_ADC_REG_IsConversionOngoing>
 80064d4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff ff4e 	bl	800637c <LL_ADC_REG_IsConversionOngoing>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d17f      	bne.n	80065e6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80064e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d17c      	bne.n	80065e6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a47      	ldr	r2, [pc, #284]	; (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a46      	ldr	r2, [pc, #280]	; (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d101      	bne.n	8006504 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006500:	4b45      	ldr	r3, [pc, #276]	; (8006618 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006502:	e000      	b.n	8006506 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006504:	4b45      	ldr	r3, [pc, #276]	; (800661c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006506:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d039      	beq.n	8006584 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	431a      	orrs	r2, r3
 800651e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006520:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a3a      	ldr	r2, [pc, #232]	; (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a38      	ldr	r2, [pc, #224]	; (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d10e      	bne.n	8006554 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006536:	4836      	ldr	r0, [pc, #216]	; (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006538:	f7ff feda 	bl	80062f0 <LL_ADC_IsEnabled>
 800653c:	4604      	mov	r4, r0
 800653e:	4835      	ldr	r0, [pc, #212]	; (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006540:	f7ff fed6 	bl	80062f0 <LL_ADC_IsEnabled>
 8006544:	4603      	mov	r3, r0
 8006546:	4323      	orrs	r3, r4
 8006548:	2b00      	cmp	r3, #0
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	e008      	b.n	8006566 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006554:	4832      	ldr	r0, [pc, #200]	; (8006620 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006556:	f7ff fecb 	bl	80062f0 <LL_ADC_IsEnabled>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d047      	beq.n	80065fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800656a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	4b2d      	ldr	r3, [pc, #180]	; (8006624 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006570:	4013      	ands	r3, r2
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	6811      	ldr	r1, [r2, #0]
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	6892      	ldr	r2, [r2, #8]
 800657a:	430a      	orrs	r2, r1
 800657c:	431a      	orrs	r2, r3
 800657e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006580:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006582:	e03a      	b.n	80065fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800658c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d004      	beq.n	80065a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1d      	ldr	r2, [pc, #116]	; (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d10e      	bne.n	80065c2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80065a4:	481a      	ldr	r0, [pc, #104]	; (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80065a6:	f7ff fea3 	bl	80062f0 <LL_ADC_IsEnabled>
 80065aa:	4604      	mov	r4, r0
 80065ac:	4819      	ldr	r0, [pc, #100]	; (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80065ae:	f7ff fe9f 	bl	80062f0 <LL_ADC_IsEnabled>
 80065b2:	4603      	mov	r3, r0
 80065b4:	4323      	orrs	r3, r4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bf0c      	ite	eq
 80065ba:	2301      	moveq	r3, #1
 80065bc:	2300      	movne	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e008      	b.n	80065d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80065c2:	4817      	ldr	r0, [pc, #92]	; (8006620 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80065c4:	f7ff fe94 	bl	80062f0 <LL_ADC_IsEnabled>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d010      	beq.n	80065fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	4b11      	ldr	r3, [pc, #68]	; (8006624 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80065de:	4013      	ands	r3, r2
 80065e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065e2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80065e4:	e009      	b.n	80065fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80065f8:	e000      	b.n	80065fc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80065fa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006604:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006608:	4618      	mov	r0, r3
 800660a:	377c      	adds	r7, #124	; 0x7c
 800660c:	46bd      	mov	sp, r7
 800660e:	bd90      	pop	{r4, r7, pc}
 8006610:	40022000 	.word	0x40022000
 8006614:	40022100 	.word	0x40022100
 8006618:	40022300 	.word	0x40022300
 800661c:	58026300 	.word	0x58026300
 8006620:	58026000 	.word	0x58026000
 8006624:	fffff0e0 	.word	0xfffff0e0

08006628 <__NVIC_SetPriorityGrouping>:
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006638:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <__NVIC_SetPriorityGrouping+0x40>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006644:	4013      	ands	r3, r2
 8006646:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006650:	4b06      	ldr	r3, [pc, #24]	; (800666c <__NVIC_SetPriorityGrouping+0x44>)
 8006652:	4313      	orrs	r3, r2
 8006654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006656:	4a04      	ldr	r2, [pc, #16]	; (8006668 <__NVIC_SetPriorityGrouping+0x40>)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	60d3      	str	r3, [r2, #12]
}
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	e000ed00 	.word	0xe000ed00
 800666c:	05fa0000 	.word	0x05fa0000

08006670 <__NVIC_GetPriorityGrouping>:
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006674:	4b04      	ldr	r3, [pc, #16]	; (8006688 <__NVIC_GetPriorityGrouping+0x18>)
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	0a1b      	lsrs	r3, r3, #8
 800667a:	f003 0307 	and.w	r3, r3, #7
}
 800667e:	4618      	mov	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	e000ed00 	.word	0xe000ed00

0800668c <__NVIC_EnableIRQ>:
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800669a:	2b00      	cmp	r3, #0
 800669c:	db0b      	blt.n	80066b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800669e:	88fb      	ldrh	r3, [r7, #6]
 80066a0:	f003 021f 	and.w	r2, r3, #31
 80066a4:	4907      	ldr	r1, [pc, #28]	; (80066c4 <__NVIC_EnableIRQ+0x38>)
 80066a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	2001      	movs	r0, #1
 80066ae:	fa00 f202 	lsl.w	r2, r0, r2
 80066b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	e000e100 	.word	0xe000e100

080066c8 <__NVIC_SetPriority>:
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	6039      	str	r1, [r7, #0]
 80066d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80066d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	db0a      	blt.n	80066f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	490c      	ldr	r1, [pc, #48]	; (8006714 <__NVIC_SetPriority+0x4c>)
 80066e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066e6:	0112      	lsls	r2, r2, #4
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	440b      	add	r3, r1
 80066ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80066f0:	e00a      	b.n	8006708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	4908      	ldr	r1, [pc, #32]	; (8006718 <__NVIC_SetPriority+0x50>)
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	3b04      	subs	r3, #4
 8006700:	0112      	lsls	r2, r2, #4
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	440b      	add	r3, r1
 8006706:	761a      	strb	r2, [r3, #24]
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	e000e100 	.word	0xe000e100
 8006718:	e000ed00 	.word	0xe000ed00

0800671c <NVIC_EncodePriority>:
{
 800671c:	b480      	push	{r7}
 800671e:	b089      	sub	sp, #36	; 0x24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f1c3 0307 	rsb	r3, r3, #7
 8006736:	2b04      	cmp	r3, #4
 8006738:	bf28      	it	cs
 800673a:	2304      	movcs	r3, #4
 800673c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3304      	adds	r3, #4
 8006742:	2b06      	cmp	r3, #6
 8006744:	d902      	bls.n	800674c <NVIC_EncodePriority+0x30>
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	3b03      	subs	r3, #3
 800674a:	e000      	b.n	800674e <NVIC_EncodePriority+0x32>
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	43da      	mvns	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	401a      	ands	r2, r3
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	fa01 f303 	lsl.w	r3, r1, r3
 800676e:	43d9      	mvns	r1, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006774:	4313      	orrs	r3, r2
}
 8006776:	4618      	mov	r0, r3
 8006778:	3724      	adds	r7, #36	; 0x24
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff ff4c 	bl	8006628 <__NVIC_SetPriorityGrouping>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067a6:	f7ff ff63 	bl	8006670 <__NVIC_GetPriorityGrouping>
 80067aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	6978      	ldr	r0, [r7, #20]
 80067b2:	f7ff ffb3 	bl	800671c <NVIC_EncodePriority>
 80067b6:	4602      	mov	r2, r0
 80067b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067bc:	4611      	mov	r1, r2
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff ff82 	bl	80066c8 <__NVIC_SetPriority>
}
 80067c4:	bf00      	nop
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff ff56 	bl	800668c <__NVIC_EnableIRQ>
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e014      	b.n	8006824 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	791b      	ldrb	r3, [r3, #4]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d105      	bne.n	8006810 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fa f9ea 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e046      	b.n	80068ce <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	795b      	ldrb	r3, [r3, #5]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_DAC_Start+0x20>
 8006848:	2302      	movs	r3, #2
 800684a:	e040      	b.n	80068ce <HAL_DAC_Start+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6819      	ldr	r1, [r3, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2201      	movs	r2, #1
 8006866:	409a      	lsls	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10f      	bne.n	8006896 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006880:	2b02      	cmp	r3, #2
 8006882:	d11d      	bne.n	80068c0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	605a      	str	r2, [r3, #4]
 8006894:	e014      	b.n	80068c0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2102      	movs	r1, #2
 80068a8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d107      	bne.n	80068c0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0202 	orr.w	r2, r2, #2
 80068be:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0a2      	b.n	8006a3a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	795b      	ldrb	r3, [r3, #5]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_DAC_Start_DMA+0x24>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e09c      	b.n	8006a3a <HAL_DAC_Start_DMA+0x15e>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2201      	movs	r2, #1
 8006904:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2202      	movs	r2, #2
 800690a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d129      	bne.n	8006966 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	4a4b      	ldr	r2, [pc, #300]	; (8006a44 <HAL_DAC_Start_DMA+0x168>)
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	4a4a      	ldr	r2, [pc, #296]	; (8006a48 <HAL_DAC_Start_DMA+0x16c>)
 8006920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	4a49      	ldr	r2, [pc, #292]	; (8006a4c <HAL_DAC_Start_DMA+0x170>)
 8006928:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006938:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_DAC_Start_DMA+0x6c>
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	2b04      	cmp	r3, #4
 8006944:	d005      	beq.n	8006952 <HAL_DAC_Start_DMA+0x76>
 8006946:	e009      	b.n	800695c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3308      	adds	r3, #8
 800694e:	613b      	str	r3, [r7, #16]
        break;
 8006950:	e033      	b.n	80069ba <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	613b      	str	r3, [r7, #16]
        break;
 800695a:	e02e      	b.n	80069ba <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3310      	adds	r3, #16
 8006962:	613b      	str	r3, [r7, #16]
        break;
 8006964:	e029      	b.n	80069ba <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	4a39      	ldr	r2, [pc, #228]	; (8006a50 <HAL_DAC_Start_DMA+0x174>)
 800696c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4a38      	ldr	r2, [pc, #224]	; (8006a54 <HAL_DAC_Start_DMA+0x178>)
 8006974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	4a37      	ldr	r2, [pc, #220]	; (8006a58 <HAL_DAC_Start_DMA+0x17c>)
 800697c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800698c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_DAC_Start_DMA+0xc0>
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	2b04      	cmp	r3, #4
 8006998:	d005      	beq.n	80069a6 <HAL_DAC_Start_DMA+0xca>
 800699a:	e009      	b.n	80069b0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3314      	adds	r3, #20
 80069a2:	613b      	str	r3, [r7, #16]
        break;
 80069a4:	e009      	b.n	80069ba <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3318      	adds	r3, #24
 80069ac:	613b      	str	r3, [r7, #16]
        break;
 80069ae:	e004      	b.n	80069ba <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	331c      	adds	r3, #28
 80069b6:	613b      	str	r3, [r7, #16]
        break;
 80069b8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d111      	bne.n	80069e4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6898      	ldr	r0, [r3, #8]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	f000 fe67 	bl	80076ac <HAL_DMA_Start_IT>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]
 80069e2:	e010      	b.n	8006a06 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80069f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68d8      	ldr	r0, [r3, #12]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	f000 fe55 	bl	80076ac <HAL_DMA_Start_IT>
 8006a02:	4603      	mov	r3, r0
 8006a04:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10c      	bne.n	8006a2c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6819      	ldr	r1, [r3, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f003 0310 	and.w	r3, r3, #16
 8006a1e:	2201      	movs	r2, #1
 8006a20:	409a      	lsls	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e005      	b.n	8006a38 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f043 0204 	orr.w	r2, r3, #4
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	08006ecd 	.word	0x08006ecd
 8006a48:	08006eef 	.word	0x08006eef
 8006a4c:	08006f0b 	.word	0x08006f0b
 8006a50:	08006f89 	.word	0x08006f89
 8006a54:	08006fab 	.word	0x08006fab
 8006a58:	08006fc7 	.word	0x08006fc7

08006a5c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e03e      	b.n	8006aee <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6819      	ldr	r1, [r3, #0]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	f003 0310 	and.w	r3, r3, #16
 8006a7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	43da      	mvns	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	400a      	ands	r2, r1
 8006a8c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6819      	ldr	r1, [r3, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	43da      	mvns	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	400a      	ands	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10d      	bne.n	8006acc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 f863 	bl	8007b80 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e00c      	b.n	8006ae6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 f855 	bl	8007b80 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006ae4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01d      	beq.n	8006b54 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d018      	beq.n	8006b54 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2204      	movs	r2, #4
 8006b26:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f043 0201 	orr.w	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b4c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f86f 	bl	8006c32 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d01d      	beq.n	8006b9a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d018      	beq.n	8006b9a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2204      	movs	r2, #4
 8006b6c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f043 0202 	orr.w	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006b82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b92:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f9ed 	bl	8006f74 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b087      	sub	sp, #28
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
 8006bae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e015      	b.n	8006bea <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d105      	bne.n	8006bd6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4413      	add	r3, r2
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	e004      	b.n	8006be0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4413      	add	r3, r2
 8006bdc:	3314      	adds	r3, #20
 8006bde:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	461a      	mov	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	; 0x28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_DAC_ConfigChannel+0x1e>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e12a      	b.n	8006ec0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	795b      	ldrb	r3, [r3, #5]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_DAC_ConfigChannel+0x2e>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e124      	b.n	8006ec0 <HAL_DAC_ConfigChannel+0x278>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d17a      	bne.n	8006d80 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006c8a:	f7fe f88b 	bl	8004da4 <HAL_GetTick>
 8006c8e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d13d      	bne.n	8006d12 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006c96:	e018      	b.n	8006cca <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006c98:	f7fe f884 	bl	8004da4 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d911      	bls.n	8006cca <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cac:	4b86      	ldr	r3, [pc, #536]	; (8006ec8 <HAL_DAC_ConfigChannel+0x280>)
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f043 0208 	orr.w	r2, r3, #8
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2203      	movs	r2, #3
 8006cc4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e0fa      	b.n	8006ec0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cd0:	4b7d      	ldr	r3, [pc, #500]	; (8006ec8 <HAL_DAC_ConfigChannel+0x280>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1df      	bne.n	8006c98 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	6992      	ldr	r2, [r2, #24]
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8006ce2:	e020      	b.n	8006d26 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006ce4:	f7fe f85e 	bl	8004da4 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d90f      	bls.n	8006d12 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	da0a      	bge.n	8006d12 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f043 0208 	orr.w	r2, r3, #8
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2203      	movs	r2, #3
 8006d0c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e0d6      	b.n	8006ec0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dbe3      	blt.n	8006ce4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	6992      	ldr	r2, [r2, #24]
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f003 0310 	and.w	r3, r3, #16
 8006d32:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006d36:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3a:	43db      	mvns	r3, r3
 8006d3c:	ea02 0103 	and.w	r1, r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f003 0310 	and.w	r3, r3, #16
 8006d4a:	409a      	lsls	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	21ff      	movs	r1, #255	; 0xff
 8006d62:	fa01 f303 	lsl.w	r3, r1, r3
 8006d66:	43db      	mvns	r3, r3
 8006d68:	ea02 0103 	and.w	r1, r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	6a1a      	ldr	r2, [r3, #32]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f003 0310 	and.w	r3, r3, #16
 8006d76:	409a      	lsls	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d11d      	bne.n	8006dc4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	221f      	movs	r2, #31
 8006d98:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	4013      	ands	r3, r2
 8006da2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2207      	movs	r2, #7
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	43db      	mvns	r3, r3
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d102      	bne.n	8006dee <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
 8006dec:	e00f      	b.n	8006e0e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d102      	bne.n	8006dfc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006df6:	2301      	movs	r3, #1
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfa:	e008      	b.n	8006e0e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d102      	bne.n	8006e0a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006e04:	2301      	movs	r3, #1
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
 8006e08:	e001      	b.n	8006e0e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6819      	ldr	r1, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	43da      	mvns	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	400a      	ands	r2, r1
 8006e54:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	4013      	ands	r3, r2
 8006e72:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6819      	ldr	r1, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	22c0      	movs	r2, #192	; 0xc0
 8006ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea6:	43da      	mvns	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	400a      	ands	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3728      	adds	r7, #40	; 0x28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20008000 	.word	0x20008000

08006ecc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff fe8b 	bl	8006bf6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	711a      	strb	r2, [r3, #4]
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff fe84 	bl	8006c0a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006f02:	bf00      	nop
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	f043 0204 	orr.w	r2, r3, #4
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff fe7a 	bl	8006c1e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	711a      	strb	r2, [r3, #4]
}
 8006f30:	bf00      	nop
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff ffce 	bl	8006f38 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	711a      	strb	r2, [r3, #4]
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff ffc7 	bl	8006f4c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f043 0204 	orr.w	r2, r3, #4
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7ff ffbd 	bl	8006f60 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	711a      	strb	r2, [r3, #4]
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006ffc:	f7fd fed2 	bl	8004da4 <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e316      	b.n	800763a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a66      	ldr	r2, [pc, #408]	; (80071ac <HAL_DMA_Init+0x1b8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d04a      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a65      	ldr	r2, [pc, #404]	; (80071b0 <HAL_DMA_Init+0x1bc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d045      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a63      	ldr	r2, [pc, #396]	; (80071b4 <HAL_DMA_Init+0x1c0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d040      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a62      	ldr	r2, [pc, #392]	; (80071b8 <HAL_DMA_Init+0x1c4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d03b      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a60      	ldr	r2, [pc, #384]	; (80071bc <HAL_DMA_Init+0x1c8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d036      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a5f      	ldr	r2, [pc, #380]	; (80071c0 <HAL_DMA_Init+0x1cc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d031      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a5d      	ldr	r2, [pc, #372]	; (80071c4 <HAL_DMA_Init+0x1d0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d02c      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a5c      	ldr	r2, [pc, #368]	; (80071c8 <HAL_DMA_Init+0x1d4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d027      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a5a      	ldr	r2, [pc, #360]	; (80071cc <HAL_DMA_Init+0x1d8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d022      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a59      	ldr	r2, [pc, #356]	; (80071d0 <HAL_DMA_Init+0x1dc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d01d      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a57      	ldr	r2, [pc, #348]	; (80071d4 <HAL_DMA_Init+0x1e0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d018      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a56      	ldr	r2, [pc, #344]	; (80071d8 <HAL_DMA_Init+0x1e4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a54      	ldr	r2, [pc, #336]	; (80071dc <HAL_DMA_Init+0x1e8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00e      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a53      	ldr	r2, [pc, #332]	; (80071e0 <HAL_DMA_Init+0x1ec>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d009      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a51      	ldr	r2, [pc, #324]	; (80071e4 <HAL_DMA_Init+0x1f0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d004      	beq.n	80070ac <HAL_DMA_Init+0xb8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a50      	ldr	r2, [pc, #320]	; (80071e8 <HAL_DMA_Init+0x1f4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d101      	bne.n	80070b0 <HAL_DMA_Init+0xbc>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <HAL_DMA_Init+0xbe>
 80070b0:	2300      	movs	r3, #0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 813b 	beq.w	800732e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a37      	ldr	r2, [pc, #220]	; (80071ac <HAL_DMA_Init+0x1b8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d04a      	beq.n	8007168 <HAL_DMA_Init+0x174>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a36      	ldr	r2, [pc, #216]	; (80071b0 <HAL_DMA_Init+0x1bc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d045      	beq.n	8007168 <HAL_DMA_Init+0x174>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a34      	ldr	r2, [pc, #208]	; (80071b4 <HAL_DMA_Init+0x1c0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d040      	beq.n	8007168 <HAL_DMA_Init+0x174>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a33      	ldr	r2, [pc, #204]	; (80071b8 <HAL_DMA_Init+0x1c4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d03b      	beq.n	8007168 <HAL_DMA_Init+0x174>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a31      	ldr	r2, [pc, #196]	; (80071bc <HAL_DMA_Init+0x1c8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d036      	beq.n	8007168 <HAL_DMA_Init+0x174>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a30      	ldr	r2, [pc, #192]	; (80071c0 <HAL_DMA_Init+0x1cc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d031      	beq.n	8007168 <HAL_DMA_Init+0x174>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a2e      	ldr	r2, [pc, #184]	; (80071c4 <HAL_DMA_Init+0x1d0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d02c      	beq.n	8007168 <HAL_DMA_Init+0x174>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a2d      	ldr	r2, [pc, #180]	; (80071c8 <HAL_DMA_Init+0x1d4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d027      	beq.n	8007168 <HAL_DMA_Init+0x174>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2b      	ldr	r2, [pc, #172]	; (80071cc <HAL_DMA_Init+0x1d8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d022      	beq.n	8007168 <HAL_DMA_Init+0x174>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2a      	ldr	r2, [pc, #168]	; (80071d0 <HAL_DMA_Init+0x1dc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d01d      	beq.n	8007168 <HAL_DMA_Init+0x174>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a28      	ldr	r2, [pc, #160]	; (80071d4 <HAL_DMA_Init+0x1e0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d018      	beq.n	8007168 <HAL_DMA_Init+0x174>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a27      	ldr	r2, [pc, #156]	; (80071d8 <HAL_DMA_Init+0x1e4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d013      	beq.n	8007168 <HAL_DMA_Init+0x174>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a25      	ldr	r2, [pc, #148]	; (80071dc <HAL_DMA_Init+0x1e8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00e      	beq.n	8007168 <HAL_DMA_Init+0x174>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a24      	ldr	r2, [pc, #144]	; (80071e0 <HAL_DMA_Init+0x1ec>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d009      	beq.n	8007168 <HAL_DMA_Init+0x174>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <HAL_DMA_Init+0x1f0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <HAL_DMA_Init+0x174>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a21      	ldr	r2, [pc, #132]	; (80071e8 <HAL_DMA_Init+0x1f4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d108      	bne.n	800717a <HAL_DMA_Init+0x186>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0201 	bic.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	e007      	b.n	800718a <HAL_DMA_Init+0x196>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0201 	bic.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800718a:	e02f      	b.n	80071ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800718c:	f7fd fe0a 	bl	8004da4 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b05      	cmp	r3, #5
 8007198:	d928      	bls.n	80071ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2203      	movs	r2, #3
 80071a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e246      	b.n	800763a <HAL_DMA_Init+0x646>
 80071ac:	40020010 	.word	0x40020010
 80071b0:	40020028 	.word	0x40020028
 80071b4:	40020040 	.word	0x40020040
 80071b8:	40020058 	.word	0x40020058
 80071bc:	40020070 	.word	0x40020070
 80071c0:	40020088 	.word	0x40020088
 80071c4:	400200a0 	.word	0x400200a0
 80071c8:	400200b8 	.word	0x400200b8
 80071cc:	40020410 	.word	0x40020410
 80071d0:	40020428 	.word	0x40020428
 80071d4:	40020440 	.word	0x40020440
 80071d8:	40020458 	.word	0x40020458
 80071dc:	40020470 	.word	0x40020470
 80071e0:	40020488 	.word	0x40020488
 80071e4:	400204a0 	.word	0x400204a0
 80071e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1c8      	bne.n	800718c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	4b83      	ldr	r3, [pc, #524]	; (8007414 <HAL_DMA_Init+0x420>)
 8007206:	4013      	ands	r3, r2
 8007208:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007212:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800721e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800722a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	2b04      	cmp	r3, #4
 800723e:	d107      	bne.n	8007250 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	4313      	orrs	r3, r2
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007250:	4b71      	ldr	r3, [pc, #452]	; (8007418 <HAL_DMA_Init+0x424>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	4b71      	ldr	r3, [pc, #452]	; (800741c <HAL_DMA_Init+0x428>)
 8007256:	4013      	ands	r3, r2
 8007258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725c:	d328      	bcc.n	80072b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b28      	cmp	r3, #40	; 0x28
 8007264:	d903      	bls.n	800726e <HAL_DMA_Init+0x27a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b2e      	cmp	r3, #46	; 0x2e
 800726c:	d917      	bls.n	800729e <HAL_DMA_Init+0x2aa>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b3e      	cmp	r3, #62	; 0x3e
 8007274:	d903      	bls.n	800727e <HAL_DMA_Init+0x28a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2b42      	cmp	r3, #66	; 0x42
 800727c:	d90f      	bls.n	800729e <HAL_DMA_Init+0x2aa>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b46      	cmp	r3, #70	; 0x46
 8007284:	d903      	bls.n	800728e <HAL_DMA_Init+0x29a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b48      	cmp	r3, #72	; 0x48
 800728c:	d907      	bls.n	800729e <HAL_DMA_Init+0x2aa>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b4e      	cmp	r3, #78	; 0x4e
 8007294:	d905      	bls.n	80072a2 <HAL_DMA_Init+0x2ae>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b52      	cmp	r3, #82	; 0x52
 800729c:	d801      	bhi.n	80072a2 <HAL_DMA_Init+0x2ae>
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <HAL_DMA_Init+0x2b0>
 80072a2:	2300      	movs	r3, #0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f023 0307 	bic.w	r3, r3, #7
 80072c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d117      	bne.n	800730a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00e      	beq.n	800730a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f002 fb4d 	bl	800998c <DMA_CheckFifoParam>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2240      	movs	r2, #64	; 0x40
 80072fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e197      	b.n	800763a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f002 fa88 	bl	8009828 <DMA_CalcBaseAndBitshift>
 8007318:	4603      	mov	r3, r0
 800731a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	223f      	movs	r2, #63	; 0x3f
 8007326:	409a      	lsls	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	609a      	str	r2, [r3, #8]
 800732c:	e0cd      	b.n	80074ca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a3b      	ldr	r2, [pc, #236]	; (8007420 <HAL_DMA_Init+0x42c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d022      	beq.n	800737e <HAL_DMA_Init+0x38a>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a39      	ldr	r2, [pc, #228]	; (8007424 <HAL_DMA_Init+0x430>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01d      	beq.n	800737e <HAL_DMA_Init+0x38a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a38      	ldr	r2, [pc, #224]	; (8007428 <HAL_DMA_Init+0x434>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d018      	beq.n	800737e <HAL_DMA_Init+0x38a>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a36      	ldr	r2, [pc, #216]	; (800742c <HAL_DMA_Init+0x438>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <HAL_DMA_Init+0x38a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a35      	ldr	r2, [pc, #212]	; (8007430 <HAL_DMA_Init+0x43c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00e      	beq.n	800737e <HAL_DMA_Init+0x38a>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a33      	ldr	r2, [pc, #204]	; (8007434 <HAL_DMA_Init+0x440>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d009      	beq.n	800737e <HAL_DMA_Init+0x38a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a32      	ldr	r2, [pc, #200]	; (8007438 <HAL_DMA_Init+0x444>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <HAL_DMA_Init+0x38a>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a30      	ldr	r2, [pc, #192]	; (800743c <HAL_DMA_Init+0x448>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d101      	bne.n	8007382 <HAL_DMA_Init+0x38e>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <HAL_DMA_Init+0x390>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8097 	beq.w	80074b8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a24      	ldr	r2, [pc, #144]	; (8007420 <HAL_DMA_Init+0x42c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d021      	beq.n	80073d8 <HAL_DMA_Init+0x3e4>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a22      	ldr	r2, [pc, #136]	; (8007424 <HAL_DMA_Init+0x430>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d01c      	beq.n	80073d8 <HAL_DMA_Init+0x3e4>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a21      	ldr	r2, [pc, #132]	; (8007428 <HAL_DMA_Init+0x434>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d017      	beq.n	80073d8 <HAL_DMA_Init+0x3e4>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1f      	ldr	r2, [pc, #124]	; (800742c <HAL_DMA_Init+0x438>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d012      	beq.n	80073d8 <HAL_DMA_Init+0x3e4>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1e      	ldr	r2, [pc, #120]	; (8007430 <HAL_DMA_Init+0x43c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00d      	beq.n	80073d8 <HAL_DMA_Init+0x3e4>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1c      	ldr	r2, [pc, #112]	; (8007434 <HAL_DMA_Init+0x440>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d008      	beq.n	80073d8 <HAL_DMA_Init+0x3e4>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1b      	ldr	r2, [pc, #108]	; (8007438 <HAL_DMA_Init+0x444>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d003      	beq.n	80073d8 <HAL_DMA_Init+0x3e4>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a19      	ldr	r2, [pc, #100]	; (800743c <HAL_DMA_Init+0x448>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2202      	movs	r2, #2
 80073de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4b12      	ldr	r3, [pc, #72]	; (8007440 <HAL_DMA_Init+0x44c>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b40      	cmp	r3, #64	; 0x40
 8007400:	d020      	beq.n	8007444 <HAL_DMA_Init+0x450>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	2b80      	cmp	r3, #128	; 0x80
 8007408:	d102      	bne.n	8007410 <HAL_DMA_Init+0x41c>
 800740a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800740e:	e01a      	b.n	8007446 <HAL_DMA_Init+0x452>
 8007410:	2300      	movs	r3, #0
 8007412:	e018      	b.n	8007446 <HAL_DMA_Init+0x452>
 8007414:	fe10803f 	.word	0xfe10803f
 8007418:	5c001000 	.word	0x5c001000
 800741c:	ffff0000 	.word	0xffff0000
 8007420:	58025408 	.word	0x58025408
 8007424:	5802541c 	.word	0x5802541c
 8007428:	58025430 	.word	0x58025430
 800742c:	58025444 	.word	0x58025444
 8007430:	58025458 	.word	0x58025458
 8007434:	5802546c 	.word	0x5802546c
 8007438:	58025480 	.word	0x58025480
 800743c:	58025494 	.word	0x58025494
 8007440:	fffe000f 	.word	0xfffe000f
 8007444:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	68d2      	ldr	r2, [r2, #12]
 800744a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800744c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800745c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800746c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007474:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	4b6e      	ldr	r3, [pc, #440]	; (8007644 <HAL_DMA_Init+0x650>)
 800748c:	4413      	add	r3, r2
 800748e:	4a6e      	ldr	r2, [pc, #440]	; (8007648 <HAL_DMA_Init+0x654>)
 8007490:	fba2 2303 	umull	r2, r3, r2, r3
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	009a      	lsls	r2, r3, #2
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f002 f9c3 	bl	8009828 <DMA_CalcBaseAndBitshift>
 80074a2:	4603      	mov	r3, r0
 80074a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	2201      	movs	r2, #1
 80074b0:	409a      	lsls	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	605a      	str	r2, [r3, #4]
 80074b6:	e008      	b.n	80074ca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2240      	movs	r2, #64	; 0x40
 80074bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2203      	movs	r2, #3
 80074c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e0b7      	b.n	800763a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a5f      	ldr	r2, [pc, #380]	; (800764c <HAL_DMA_Init+0x658>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d072      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a5d      	ldr	r2, [pc, #372]	; (8007650 <HAL_DMA_Init+0x65c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d06d      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a5c      	ldr	r2, [pc, #368]	; (8007654 <HAL_DMA_Init+0x660>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d068      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a5a      	ldr	r2, [pc, #360]	; (8007658 <HAL_DMA_Init+0x664>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d063      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a59      	ldr	r2, [pc, #356]	; (800765c <HAL_DMA_Init+0x668>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d05e      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a57      	ldr	r2, [pc, #348]	; (8007660 <HAL_DMA_Init+0x66c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d059      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a56      	ldr	r2, [pc, #344]	; (8007664 <HAL_DMA_Init+0x670>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d054      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a54      	ldr	r2, [pc, #336]	; (8007668 <HAL_DMA_Init+0x674>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d04f      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a53      	ldr	r2, [pc, #332]	; (800766c <HAL_DMA_Init+0x678>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d04a      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a51      	ldr	r2, [pc, #324]	; (8007670 <HAL_DMA_Init+0x67c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d045      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a50      	ldr	r2, [pc, #320]	; (8007674 <HAL_DMA_Init+0x680>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d040      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a4e      	ldr	r2, [pc, #312]	; (8007678 <HAL_DMA_Init+0x684>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d03b      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a4d      	ldr	r2, [pc, #308]	; (800767c <HAL_DMA_Init+0x688>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d036      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a4b      	ldr	r2, [pc, #300]	; (8007680 <HAL_DMA_Init+0x68c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d031      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a4a      	ldr	r2, [pc, #296]	; (8007684 <HAL_DMA_Init+0x690>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d02c      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a48      	ldr	r2, [pc, #288]	; (8007688 <HAL_DMA_Init+0x694>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d027      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a47      	ldr	r2, [pc, #284]	; (800768c <HAL_DMA_Init+0x698>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d022      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a45      	ldr	r2, [pc, #276]	; (8007690 <HAL_DMA_Init+0x69c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d01d      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a44      	ldr	r2, [pc, #272]	; (8007694 <HAL_DMA_Init+0x6a0>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d018      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a42      	ldr	r2, [pc, #264]	; (8007698 <HAL_DMA_Init+0x6a4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a41      	ldr	r2, [pc, #260]	; (800769c <HAL_DMA_Init+0x6a8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00e      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a3f      	ldr	r2, [pc, #252]	; (80076a0 <HAL_DMA_Init+0x6ac>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d009      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a3e      	ldr	r2, [pc, #248]	; (80076a4 <HAL_DMA_Init+0x6b0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d004      	beq.n	80075ba <HAL_DMA_Init+0x5c6>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a3c      	ldr	r2, [pc, #240]	; (80076a8 <HAL_DMA_Init+0x6b4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d101      	bne.n	80075be <HAL_DMA_Init+0x5ca>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <HAL_DMA_Init+0x5cc>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d032      	beq.n	800762a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f002 fa5d 	bl	8009a84 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b80      	cmp	r3, #128	; 0x80
 80075d0:	d102      	bne.n	80075d8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d010      	beq.n	8007618 <HAL_DMA_Init+0x624>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d80c      	bhi.n	8007618 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f002 fada 	bl	8009bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	e008      	b.n	800762a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	a7fdabf8 	.word	0xa7fdabf8
 8007648:	cccccccd 	.word	0xcccccccd
 800764c:	40020010 	.word	0x40020010
 8007650:	40020028 	.word	0x40020028
 8007654:	40020040 	.word	0x40020040
 8007658:	40020058 	.word	0x40020058
 800765c:	40020070 	.word	0x40020070
 8007660:	40020088 	.word	0x40020088
 8007664:	400200a0 	.word	0x400200a0
 8007668:	400200b8 	.word	0x400200b8
 800766c:	40020410 	.word	0x40020410
 8007670:	40020428 	.word	0x40020428
 8007674:	40020440 	.word	0x40020440
 8007678:	40020458 	.word	0x40020458
 800767c:	40020470 	.word	0x40020470
 8007680:	40020488 	.word	0x40020488
 8007684:	400204a0 	.word	0x400204a0
 8007688:	400204b8 	.word	0x400204b8
 800768c:	58025408 	.word	0x58025408
 8007690:	5802541c 	.word	0x5802541c
 8007694:	58025430 	.word	0x58025430
 8007698:	58025444 	.word	0x58025444
 800769c:	58025458 	.word	0x58025458
 80076a0:	5802546c 	.word	0x5802546c
 80076a4:	58025480 	.word	0x58025480
 80076a8:	58025494 	.word	0x58025494

080076ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e226      	b.n	8007b16 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_DMA_Start_IT+0x2a>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e21f      	b.n	8007b16 <HAL_DMA_Start_IT+0x46a>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	f040 820a 	bne.w	8007b00 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a68      	ldr	r2, [pc, #416]	; (80078a0 <HAL_DMA_Start_IT+0x1f4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d04a      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a66      	ldr	r2, [pc, #408]	; (80078a4 <HAL_DMA_Start_IT+0x1f8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d045      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a65      	ldr	r2, [pc, #404]	; (80078a8 <HAL_DMA_Start_IT+0x1fc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d040      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a63      	ldr	r2, [pc, #396]	; (80078ac <HAL_DMA_Start_IT+0x200>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d03b      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a62      	ldr	r2, [pc, #392]	; (80078b0 <HAL_DMA_Start_IT+0x204>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d036      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a60      	ldr	r2, [pc, #384]	; (80078b4 <HAL_DMA_Start_IT+0x208>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d031      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a5f      	ldr	r2, [pc, #380]	; (80078b8 <HAL_DMA_Start_IT+0x20c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d02c      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a5d      	ldr	r2, [pc, #372]	; (80078bc <HAL_DMA_Start_IT+0x210>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d027      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a5c      	ldr	r2, [pc, #368]	; (80078c0 <HAL_DMA_Start_IT+0x214>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d022      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a5a      	ldr	r2, [pc, #360]	; (80078c4 <HAL_DMA_Start_IT+0x218>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d01d      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a59      	ldr	r2, [pc, #356]	; (80078c8 <HAL_DMA_Start_IT+0x21c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d018      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a57      	ldr	r2, [pc, #348]	; (80078cc <HAL_DMA_Start_IT+0x220>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a56      	ldr	r2, [pc, #344]	; (80078d0 <HAL_DMA_Start_IT+0x224>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00e      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a54      	ldr	r2, [pc, #336]	; (80078d4 <HAL_DMA_Start_IT+0x228>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d009      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a53      	ldr	r2, [pc, #332]	; (80078d8 <HAL_DMA_Start_IT+0x22c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d004      	beq.n	800779a <HAL_DMA_Start_IT+0xee>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a51      	ldr	r2, [pc, #324]	; (80078dc <HAL_DMA_Start_IT+0x230>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d108      	bne.n	80077ac <HAL_DMA_Start_IT+0x100>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0201 	bic.w	r2, r2, #1
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	e007      	b.n	80077bc <HAL_DMA_Start_IT+0x110>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0201 	bic.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f001 fe84 	bl	80094d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a34      	ldr	r2, [pc, #208]	; (80078a0 <HAL_DMA_Start_IT+0x1f4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d04a      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a33      	ldr	r2, [pc, #204]	; (80078a4 <HAL_DMA_Start_IT+0x1f8>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d045      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a31      	ldr	r2, [pc, #196]	; (80078a8 <HAL_DMA_Start_IT+0x1fc>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d040      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a30      	ldr	r2, [pc, #192]	; (80078ac <HAL_DMA_Start_IT+0x200>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d03b      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a2e      	ldr	r2, [pc, #184]	; (80078b0 <HAL_DMA_Start_IT+0x204>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d036      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a2d      	ldr	r2, [pc, #180]	; (80078b4 <HAL_DMA_Start_IT+0x208>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d031      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a2b      	ldr	r2, [pc, #172]	; (80078b8 <HAL_DMA_Start_IT+0x20c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d02c      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a2a      	ldr	r2, [pc, #168]	; (80078bc <HAL_DMA_Start_IT+0x210>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d027      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a28      	ldr	r2, [pc, #160]	; (80078c0 <HAL_DMA_Start_IT+0x214>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d022      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a27      	ldr	r2, [pc, #156]	; (80078c4 <HAL_DMA_Start_IT+0x218>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d01d      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a25      	ldr	r2, [pc, #148]	; (80078c8 <HAL_DMA_Start_IT+0x21c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d018      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a24      	ldr	r2, [pc, #144]	; (80078cc <HAL_DMA_Start_IT+0x220>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d013      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a22      	ldr	r2, [pc, #136]	; (80078d0 <HAL_DMA_Start_IT+0x224>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00e      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a21      	ldr	r2, [pc, #132]	; (80078d4 <HAL_DMA_Start_IT+0x228>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d009      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a1f      	ldr	r2, [pc, #124]	; (80078d8 <HAL_DMA_Start_IT+0x22c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d004      	beq.n	8007868 <HAL_DMA_Start_IT+0x1bc>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a1e      	ldr	r2, [pc, #120]	; (80078dc <HAL_DMA_Start_IT+0x230>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d101      	bne.n	800786c <HAL_DMA_Start_IT+0x1c0>
 8007868:	2301      	movs	r3, #1
 800786a:	e000      	b.n	800786e <HAL_DMA_Start_IT+0x1c2>
 800786c:	2300      	movs	r3, #0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d036      	beq.n	80078e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f023 021e 	bic.w	r2, r3, #30
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f042 0216 	orr.w	r2, r2, #22
 8007884:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d03e      	beq.n	800790c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0208 	orr.w	r2, r2, #8
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e035      	b.n	800790c <HAL_DMA_Start_IT+0x260>
 80078a0:	40020010 	.word	0x40020010
 80078a4:	40020028 	.word	0x40020028
 80078a8:	40020040 	.word	0x40020040
 80078ac:	40020058 	.word	0x40020058
 80078b0:	40020070 	.word	0x40020070
 80078b4:	40020088 	.word	0x40020088
 80078b8:	400200a0 	.word	0x400200a0
 80078bc:	400200b8 	.word	0x400200b8
 80078c0:	40020410 	.word	0x40020410
 80078c4:	40020428 	.word	0x40020428
 80078c8:	40020440 	.word	0x40020440
 80078cc:	40020458 	.word	0x40020458
 80078d0:	40020470 	.word	0x40020470
 80078d4:	40020488 	.word	0x40020488
 80078d8:	400204a0 	.word	0x400204a0
 80078dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f023 020e 	bic.w	r2, r3, #14
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 020a 	orr.w	r2, r2, #10
 80078f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0204 	orr.w	r2, r2, #4
 800790a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a83      	ldr	r2, [pc, #524]	; (8007b20 <HAL_DMA_Start_IT+0x474>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d072      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a82      	ldr	r2, [pc, #520]	; (8007b24 <HAL_DMA_Start_IT+0x478>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d06d      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a80      	ldr	r2, [pc, #512]	; (8007b28 <HAL_DMA_Start_IT+0x47c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d068      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a7f      	ldr	r2, [pc, #508]	; (8007b2c <HAL_DMA_Start_IT+0x480>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d063      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a7d      	ldr	r2, [pc, #500]	; (8007b30 <HAL_DMA_Start_IT+0x484>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d05e      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a7c      	ldr	r2, [pc, #496]	; (8007b34 <HAL_DMA_Start_IT+0x488>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d059      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a7a      	ldr	r2, [pc, #488]	; (8007b38 <HAL_DMA_Start_IT+0x48c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d054      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a79      	ldr	r2, [pc, #484]	; (8007b3c <HAL_DMA_Start_IT+0x490>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d04f      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a77      	ldr	r2, [pc, #476]	; (8007b40 <HAL_DMA_Start_IT+0x494>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d04a      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a76      	ldr	r2, [pc, #472]	; (8007b44 <HAL_DMA_Start_IT+0x498>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d045      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a74      	ldr	r2, [pc, #464]	; (8007b48 <HAL_DMA_Start_IT+0x49c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d040      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a73      	ldr	r2, [pc, #460]	; (8007b4c <HAL_DMA_Start_IT+0x4a0>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d03b      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a71      	ldr	r2, [pc, #452]	; (8007b50 <HAL_DMA_Start_IT+0x4a4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d036      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a70      	ldr	r2, [pc, #448]	; (8007b54 <HAL_DMA_Start_IT+0x4a8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d031      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a6e      	ldr	r2, [pc, #440]	; (8007b58 <HAL_DMA_Start_IT+0x4ac>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d02c      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a6d      	ldr	r2, [pc, #436]	; (8007b5c <HAL_DMA_Start_IT+0x4b0>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d027      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a6b      	ldr	r2, [pc, #428]	; (8007b60 <HAL_DMA_Start_IT+0x4b4>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d022      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a6a      	ldr	r2, [pc, #424]	; (8007b64 <HAL_DMA_Start_IT+0x4b8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d01d      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a68      	ldr	r2, [pc, #416]	; (8007b68 <HAL_DMA_Start_IT+0x4bc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d018      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a67      	ldr	r2, [pc, #412]	; (8007b6c <HAL_DMA_Start_IT+0x4c0>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d013      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a65      	ldr	r2, [pc, #404]	; (8007b70 <HAL_DMA_Start_IT+0x4c4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d00e      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a64      	ldr	r2, [pc, #400]	; (8007b74 <HAL_DMA_Start_IT+0x4c8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d009      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a62      	ldr	r2, [pc, #392]	; (8007b78 <HAL_DMA_Start_IT+0x4cc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d004      	beq.n	80079fc <HAL_DMA_Start_IT+0x350>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a61      	ldr	r2, [pc, #388]	; (8007b7c <HAL_DMA_Start_IT+0x4d0>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d101      	bne.n	8007a00 <HAL_DMA_Start_IT+0x354>
 80079fc:	2301      	movs	r3, #1
 80079fe:	e000      	b.n	8007a02 <HAL_DMA_Start_IT+0x356>
 8007a00:	2300      	movs	r3, #0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01a      	beq.n	8007a3c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d007      	beq.n	8007a24 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a22:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d007      	beq.n	8007a3c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a3a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a37      	ldr	r2, [pc, #220]	; (8007b20 <HAL_DMA_Start_IT+0x474>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d04a      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a36      	ldr	r2, [pc, #216]	; (8007b24 <HAL_DMA_Start_IT+0x478>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d045      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a34      	ldr	r2, [pc, #208]	; (8007b28 <HAL_DMA_Start_IT+0x47c>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d040      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a33      	ldr	r2, [pc, #204]	; (8007b2c <HAL_DMA_Start_IT+0x480>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d03b      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a31      	ldr	r2, [pc, #196]	; (8007b30 <HAL_DMA_Start_IT+0x484>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d036      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a30      	ldr	r2, [pc, #192]	; (8007b34 <HAL_DMA_Start_IT+0x488>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d031      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a2e      	ldr	r2, [pc, #184]	; (8007b38 <HAL_DMA_Start_IT+0x48c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d02c      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a2d      	ldr	r2, [pc, #180]	; (8007b3c <HAL_DMA_Start_IT+0x490>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d027      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a2b      	ldr	r2, [pc, #172]	; (8007b40 <HAL_DMA_Start_IT+0x494>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d022      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a2a      	ldr	r2, [pc, #168]	; (8007b44 <HAL_DMA_Start_IT+0x498>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d01d      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a28      	ldr	r2, [pc, #160]	; (8007b48 <HAL_DMA_Start_IT+0x49c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d018      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a27      	ldr	r2, [pc, #156]	; (8007b4c <HAL_DMA_Start_IT+0x4a0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d013      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a25      	ldr	r2, [pc, #148]	; (8007b50 <HAL_DMA_Start_IT+0x4a4>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00e      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a24      	ldr	r2, [pc, #144]	; (8007b54 <HAL_DMA_Start_IT+0x4a8>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d009      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a22      	ldr	r2, [pc, #136]	; (8007b58 <HAL_DMA_Start_IT+0x4ac>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d004      	beq.n	8007adc <HAL_DMA_Start_IT+0x430>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a21      	ldr	r2, [pc, #132]	; (8007b5c <HAL_DMA_Start_IT+0x4b0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d108      	bne.n	8007aee <HAL_DMA_Start_IT+0x442>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	e012      	b.n	8007b14 <HAL_DMA_Start_IT+0x468>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0201 	orr.w	r2, r2, #1
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	e009      	b.n	8007b14 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	40020010 	.word	0x40020010
 8007b24:	40020028 	.word	0x40020028
 8007b28:	40020040 	.word	0x40020040
 8007b2c:	40020058 	.word	0x40020058
 8007b30:	40020070 	.word	0x40020070
 8007b34:	40020088 	.word	0x40020088
 8007b38:	400200a0 	.word	0x400200a0
 8007b3c:	400200b8 	.word	0x400200b8
 8007b40:	40020410 	.word	0x40020410
 8007b44:	40020428 	.word	0x40020428
 8007b48:	40020440 	.word	0x40020440
 8007b4c:	40020458 	.word	0x40020458
 8007b50:	40020470 	.word	0x40020470
 8007b54:	40020488 	.word	0x40020488
 8007b58:	400204a0 	.word	0x400204a0
 8007b5c:	400204b8 	.word	0x400204b8
 8007b60:	58025408 	.word	0x58025408
 8007b64:	5802541c 	.word	0x5802541c
 8007b68:	58025430 	.word	0x58025430
 8007b6c:	58025444 	.word	0x58025444
 8007b70:	58025458 	.word	0x58025458
 8007b74:	5802546c 	.word	0x5802546c
 8007b78:	58025480 	.word	0x58025480
 8007b7c:	58025494 	.word	0x58025494

08007b80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007b88:	f7fd f90c 	bl	8004da4 <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e2dc      	b.n	8008152 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d008      	beq.n	8007bb6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2280      	movs	r2, #128	; 0x80
 8007ba8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e2cd      	b.n	8008152 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a76      	ldr	r2, [pc, #472]	; (8007d94 <HAL_DMA_Abort+0x214>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d04a      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a74      	ldr	r2, [pc, #464]	; (8007d98 <HAL_DMA_Abort+0x218>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d045      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a73      	ldr	r2, [pc, #460]	; (8007d9c <HAL_DMA_Abort+0x21c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d040      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a71      	ldr	r2, [pc, #452]	; (8007da0 <HAL_DMA_Abort+0x220>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d03b      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a70      	ldr	r2, [pc, #448]	; (8007da4 <HAL_DMA_Abort+0x224>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d036      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a6e      	ldr	r2, [pc, #440]	; (8007da8 <HAL_DMA_Abort+0x228>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d031      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a6d      	ldr	r2, [pc, #436]	; (8007dac <HAL_DMA_Abort+0x22c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d02c      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a6b      	ldr	r2, [pc, #428]	; (8007db0 <HAL_DMA_Abort+0x230>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d027      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a6a      	ldr	r2, [pc, #424]	; (8007db4 <HAL_DMA_Abort+0x234>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d022      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a68      	ldr	r2, [pc, #416]	; (8007db8 <HAL_DMA_Abort+0x238>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01d      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a67      	ldr	r2, [pc, #412]	; (8007dbc <HAL_DMA_Abort+0x23c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d018      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a65      	ldr	r2, [pc, #404]	; (8007dc0 <HAL_DMA_Abort+0x240>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d013      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a64      	ldr	r2, [pc, #400]	; (8007dc4 <HAL_DMA_Abort+0x244>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00e      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a62      	ldr	r2, [pc, #392]	; (8007dc8 <HAL_DMA_Abort+0x248>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d009      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a61      	ldr	r2, [pc, #388]	; (8007dcc <HAL_DMA_Abort+0x24c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d004      	beq.n	8007c56 <HAL_DMA_Abort+0xd6>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a5f      	ldr	r2, [pc, #380]	; (8007dd0 <HAL_DMA_Abort+0x250>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d101      	bne.n	8007c5a <HAL_DMA_Abort+0xda>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <HAL_DMA_Abort+0xdc>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d013      	beq.n	8007c88 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 021e 	bic.w	r2, r2, #30
 8007c6e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	695a      	ldr	r2, [r3, #20]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c7e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	e00a      	b.n	8007c9e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 020e 	bic.w	r2, r2, #14
 8007c96:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a3c      	ldr	r2, [pc, #240]	; (8007d94 <HAL_DMA_Abort+0x214>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d072      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a3a      	ldr	r2, [pc, #232]	; (8007d98 <HAL_DMA_Abort+0x218>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d06d      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a39      	ldr	r2, [pc, #228]	; (8007d9c <HAL_DMA_Abort+0x21c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d068      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a37      	ldr	r2, [pc, #220]	; (8007da0 <HAL_DMA_Abort+0x220>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d063      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a36      	ldr	r2, [pc, #216]	; (8007da4 <HAL_DMA_Abort+0x224>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d05e      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a34      	ldr	r2, [pc, #208]	; (8007da8 <HAL_DMA_Abort+0x228>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d059      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a33      	ldr	r2, [pc, #204]	; (8007dac <HAL_DMA_Abort+0x22c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d054      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a31      	ldr	r2, [pc, #196]	; (8007db0 <HAL_DMA_Abort+0x230>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d04f      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a30      	ldr	r2, [pc, #192]	; (8007db4 <HAL_DMA_Abort+0x234>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d04a      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a2e      	ldr	r2, [pc, #184]	; (8007db8 <HAL_DMA_Abort+0x238>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d045      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a2d      	ldr	r2, [pc, #180]	; (8007dbc <HAL_DMA_Abort+0x23c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d040      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a2b      	ldr	r2, [pc, #172]	; (8007dc0 <HAL_DMA_Abort+0x240>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d03b      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a2a      	ldr	r2, [pc, #168]	; (8007dc4 <HAL_DMA_Abort+0x244>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d036      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a28      	ldr	r2, [pc, #160]	; (8007dc8 <HAL_DMA_Abort+0x248>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d031      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a27      	ldr	r2, [pc, #156]	; (8007dcc <HAL_DMA_Abort+0x24c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d02c      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a25      	ldr	r2, [pc, #148]	; (8007dd0 <HAL_DMA_Abort+0x250>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d027      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a24      	ldr	r2, [pc, #144]	; (8007dd4 <HAL_DMA_Abort+0x254>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d022      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a22      	ldr	r2, [pc, #136]	; (8007dd8 <HAL_DMA_Abort+0x258>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d01d      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a21      	ldr	r2, [pc, #132]	; (8007ddc <HAL_DMA_Abort+0x25c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d018      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a1f      	ldr	r2, [pc, #124]	; (8007de0 <HAL_DMA_Abort+0x260>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d013      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1e      	ldr	r2, [pc, #120]	; (8007de4 <HAL_DMA_Abort+0x264>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00e      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a1c      	ldr	r2, [pc, #112]	; (8007de8 <HAL_DMA_Abort+0x268>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d009      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a1b      	ldr	r2, [pc, #108]	; (8007dec <HAL_DMA_Abort+0x26c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d004      	beq.n	8007d8e <HAL_DMA_Abort+0x20e>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a19      	ldr	r2, [pc, #100]	; (8007df0 <HAL_DMA_Abort+0x270>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d132      	bne.n	8007df4 <HAL_DMA_Abort+0x274>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e031      	b.n	8007df6 <HAL_DMA_Abort+0x276>
 8007d92:	bf00      	nop
 8007d94:	40020010 	.word	0x40020010
 8007d98:	40020028 	.word	0x40020028
 8007d9c:	40020040 	.word	0x40020040
 8007da0:	40020058 	.word	0x40020058
 8007da4:	40020070 	.word	0x40020070
 8007da8:	40020088 	.word	0x40020088
 8007dac:	400200a0 	.word	0x400200a0
 8007db0:	400200b8 	.word	0x400200b8
 8007db4:	40020410 	.word	0x40020410
 8007db8:	40020428 	.word	0x40020428
 8007dbc:	40020440 	.word	0x40020440
 8007dc0:	40020458 	.word	0x40020458
 8007dc4:	40020470 	.word	0x40020470
 8007dc8:	40020488 	.word	0x40020488
 8007dcc:	400204a0 	.word	0x400204a0
 8007dd0:	400204b8 	.word	0x400204b8
 8007dd4:	58025408 	.word	0x58025408
 8007dd8:	5802541c 	.word	0x5802541c
 8007ddc:	58025430 	.word	0x58025430
 8007de0:	58025444 	.word	0x58025444
 8007de4:	58025458 	.word	0x58025458
 8007de8:	5802546c 	.word	0x5802546c
 8007dec:	58025480 	.word	0x58025480
 8007df0:	58025494 	.word	0x58025494
 8007df4:	2300      	movs	r3, #0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a6d      	ldr	r2, [pc, #436]	; (8007fc4 <HAL_DMA_Abort+0x444>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d04a      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a6b      	ldr	r2, [pc, #428]	; (8007fc8 <HAL_DMA_Abort+0x448>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d045      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a6a      	ldr	r2, [pc, #424]	; (8007fcc <HAL_DMA_Abort+0x44c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d040      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a68      	ldr	r2, [pc, #416]	; (8007fd0 <HAL_DMA_Abort+0x450>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d03b      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a67      	ldr	r2, [pc, #412]	; (8007fd4 <HAL_DMA_Abort+0x454>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d036      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a65      	ldr	r2, [pc, #404]	; (8007fd8 <HAL_DMA_Abort+0x458>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d031      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a64      	ldr	r2, [pc, #400]	; (8007fdc <HAL_DMA_Abort+0x45c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d02c      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a62      	ldr	r2, [pc, #392]	; (8007fe0 <HAL_DMA_Abort+0x460>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d027      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a61      	ldr	r2, [pc, #388]	; (8007fe4 <HAL_DMA_Abort+0x464>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d022      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a5f      	ldr	r2, [pc, #380]	; (8007fe8 <HAL_DMA_Abort+0x468>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d01d      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a5e      	ldr	r2, [pc, #376]	; (8007fec <HAL_DMA_Abort+0x46c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d018      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a5c      	ldr	r2, [pc, #368]	; (8007ff0 <HAL_DMA_Abort+0x470>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a5b      	ldr	r2, [pc, #364]	; (8007ff4 <HAL_DMA_Abort+0x474>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00e      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a59      	ldr	r2, [pc, #356]	; (8007ff8 <HAL_DMA_Abort+0x478>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d009      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a58      	ldr	r2, [pc, #352]	; (8007ffc <HAL_DMA_Abort+0x47c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <HAL_DMA_Abort+0x32a>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a56      	ldr	r2, [pc, #344]	; (8008000 <HAL_DMA_Abort+0x480>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d108      	bne.n	8007ebc <HAL_DMA_Abort+0x33c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0201 	bic.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	e007      	b.n	8007ecc <HAL_DMA_Abort+0x34c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0201 	bic.w	r2, r2, #1
 8007eca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007ecc:	e013      	b.n	8007ef6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ece:	f7fc ff69 	bl	8004da4 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b05      	cmp	r3, #5
 8007eda:	d90c      	bls.n	8007ef6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e12d      	b.n	8008152 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e5      	bne.n	8007ece <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a2f      	ldr	r2, [pc, #188]	; (8007fc4 <HAL_DMA_Abort+0x444>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d04a      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a2d      	ldr	r2, [pc, #180]	; (8007fc8 <HAL_DMA_Abort+0x448>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d045      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a2c      	ldr	r2, [pc, #176]	; (8007fcc <HAL_DMA_Abort+0x44c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d040      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a2a      	ldr	r2, [pc, #168]	; (8007fd0 <HAL_DMA_Abort+0x450>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d03b      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a29      	ldr	r2, [pc, #164]	; (8007fd4 <HAL_DMA_Abort+0x454>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d036      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a27      	ldr	r2, [pc, #156]	; (8007fd8 <HAL_DMA_Abort+0x458>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d031      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a26      	ldr	r2, [pc, #152]	; (8007fdc <HAL_DMA_Abort+0x45c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d02c      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a24      	ldr	r2, [pc, #144]	; (8007fe0 <HAL_DMA_Abort+0x460>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d027      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a23      	ldr	r2, [pc, #140]	; (8007fe4 <HAL_DMA_Abort+0x464>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d022      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a21      	ldr	r2, [pc, #132]	; (8007fe8 <HAL_DMA_Abort+0x468>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01d      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a20      	ldr	r2, [pc, #128]	; (8007fec <HAL_DMA_Abort+0x46c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d018      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a1e      	ldr	r2, [pc, #120]	; (8007ff0 <HAL_DMA_Abort+0x470>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <HAL_DMA_Abort+0x474>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00e      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a1b      	ldr	r2, [pc, #108]	; (8007ff8 <HAL_DMA_Abort+0x478>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d009      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a1a      	ldr	r2, [pc, #104]	; (8007ffc <HAL_DMA_Abort+0x47c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d004      	beq.n	8007fa2 <HAL_DMA_Abort+0x422>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a18      	ldr	r2, [pc, #96]	; (8008000 <HAL_DMA_Abort+0x480>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d101      	bne.n	8007fa6 <HAL_DMA_Abort+0x426>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <HAL_DMA_Abort+0x428>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d02b      	beq.n	8008004 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb6:	f003 031f 	and.w	r3, r3, #31
 8007fba:	223f      	movs	r2, #63	; 0x3f
 8007fbc:	409a      	lsls	r2, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	609a      	str	r2, [r3, #8]
 8007fc2:	e02a      	b.n	800801a <HAL_DMA_Abort+0x49a>
 8007fc4:	40020010 	.word	0x40020010
 8007fc8:	40020028 	.word	0x40020028
 8007fcc:	40020040 	.word	0x40020040
 8007fd0:	40020058 	.word	0x40020058
 8007fd4:	40020070 	.word	0x40020070
 8007fd8:	40020088 	.word	0x40020088
 8007fdc:	400200a0 	.word	0x400200a0
 8007fe0:	400200b8 	.word	0x400200b8
 8007fe4:	40020410 	.word	0x40020410
 8007fe8:	40020428 	.word	0x40020428
 8007fec:	40020440 	.word	0x40020440
 8007ff0:	40020458 	.word	0x40020458
 8007ff4:	40020470 	.word	0x40020470
 8007ff8:	40020488 	.word	0x40020488
 8007ffc:	400204a0 	.word	0x400204a0
 8008000:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008008:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800e:	f003 031f 	and.w	r3, r3, #31
 8008012:	2201      	movs	r2, #1
 8008014:	409a      	lsls	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a4f      	ldr	r2, [pc, #316]	; (800815c <HAL_DMA_Abort+0x5dc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d072      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a4d      	ldr	r2, [pc, #308]	; (8008160 <HAL_DMA_Abort+0x5e0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d06d      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a4c      	ldr	r2, [pc, #304]	; (8008164 <HAL_DMA_Abort+0x5e4>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d068      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a4a      	ldr	r2, [pc, #296]	; (8008168 <HAL_DMA_Abort+0x5e8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d063      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a49      	ldr	r2, [pc, #292]	; (800816c <HAL_DMA_Abort+0x5ec>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d05e      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a47      	ldr	r2, [pc, #284]	; (8008170 <HAL_DMA_Abort+0x5f0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d059      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a46      	ldr	r2, [pc, #280]	; (8008174 <HAL_DMA_Abort+0x5f4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d054      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a44      	ldr	r2, [pc, #272]	; (8008178 <HAL_DMA_Abort+0x5f8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d04f      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a43      	ldr	r2, [pc, #268]	; (800817c <HAL_DMA_Abort+0x5fc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d04a      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a41      	ldr	r2, [pc, #260]	; (8008180 <HAL_DMA_Abort+0x600>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d045      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a40      	ldr	r2, [pc, #256]	; (8008184 <HAL_DMA_Abort+0x604>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d040      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a3e      	ldr	r2, [pc, #248]	; (8008188 <HAL_DMA_Abort+0x608>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d03b      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a3d      	ldr	r2, [pc, #244]	; (800818c <HAL_DMA_Abort+0x60c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d036      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a3b      	ldr	r2, [pc, #236]	; (8008190 <HAL_DMA_Abort+0x610>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d031      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a3a      	ldr	r2, [pc, #232]	; (8008194 <HAL_DMA_Abort+0x614>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d02c      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a38      	ldr	r2, [pc, #224]	; (8008198 <HAL_DMA_Abort+0x618>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d027      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a37      	ldr	r2, [pc, #220]	; (800819c <HAL_DMA_Abort+0x61c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d022      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a35      	ldr	r2, [pc, #212]	; (80081a0 <HAL_DMA_Abort+0x620>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d01d      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a34      	ldr	r2, [pc, #208]	; (80081a4 <HAL_DMA_Abort+0x624>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d018      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a32      	ldr	r2, [pc, #200]	; (80081a8 <HAL_DMA_Abort+0x628>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d013      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a31      	ldr	r2, [pc, #196]	; (80081ac <HAL_DMA_Abort+0x62c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00e      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a2f      	ldr	r2, [pc, #188]	; (80081b0 <HAL_DMA_Abort+0x630>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d009      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a2e      	ldr	r2, [pc, #184]	; (80081b4 <HAL_DMA_Abort+0x634>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d004      	beq.n	800810a <HAL_DMA_Abort+0x58a>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a2c      	ldr	r2, [pc, #176]	; (80081b8 <HAL_DMA_Abort+0x638>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d101      	bne.n	800810e <HAL_DMA_Abort+0x58e>
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <HAL_DMA_Abort+0x590>
 800810e:	2300      	movs	r3, #0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d015      	beq.n	8008140 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800811c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00c      	beq.n	8008140 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008134:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800813e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	40020010 	.word	0x40020010
 8008160:	40020028 	.word	0x40020028
 8008164:	40020040 	.word	0x40020040
 8008168:	40020058 	.word	0x40020058
 800816c:	40020070 	.word	0x40020070
 8008170:	40020088 	.word	0x40020088
 8008174:	400200a0 	.word	0x400200a0
 8008178:	400200b8 	.word	0x400200b8
 800817c:	40020410 	.word	0x40020410
 8008180:	40020428 	.word	0x40020428
 8008184:	40020440 	.word	0x40020440
 8008188:	40020458 	.word	0x40020458
 800818c:	40020470 	.word	0x40020470
 8008190:	40020488 	.word	0x40020488
 8008194:	400204a0 	.word	0x400204a0
 8008198:	400204b8 	.word	0x400204b8
 800819c:	58025408 	.word	0x58025408
 80081a0:	5802541c 	.word	0x5802541c
 80081a4:	58025430 	.word	0x58025430
 80081a8:	58025444 	.word	0x58025444
 80081ac:	58025458 	.word	0x58025458
 80081b0:	5802546c 	.word	0x5802546c
 80081b4:	58025480 	.word	0x58025480
 80081b8:	58025494 	.word	0x58025494

080081bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e237      	b.n	800863e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d004      	beq.n	80081e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2280      	movs	r2, #128	; 0x80
 80081de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e22c      	b.n	800863e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a5c      	ldr	r2, [pc, #368]	; (800835c <HAL_DMA_Abort_IT+0x1a0>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d04a      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a5b      	ldr	r2, [pc, #364]	; (8008360 <HAL_DMA_Abort_IT+0x1a4>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d045      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a59      	ldr	r2, [pc, #356]	; (8008364 <HAL_DMA_Abort_IT+0x1a8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d040      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a58      	ldr	r2, [pc, #352]	; (8008368 <HAL_DMA_Abort_IT+0x1ac>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d03b      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a56      	ldr	r2, [pc, #344]	; (800836c <HAL_DMA_Abort_IT+0x1b0>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d036      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a55      	ldr	r2, [pc, #340]	; (8008370 <HAL_DMA_Abort_IT+0x1b4>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d031      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a53      	ldr	r2, [pc, #332]	; (8008374 <HAL_DMA_Abort_IT+0x1b8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d02c      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a52      	ldr	r2, [pc, #328]	; (8008378 <HAL_DMA_Abort_IT+0x1bc>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d027      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a50      	ldr	r2, [pc, #320]	; (800837c <HAL_DMA_Abort_IT+0x1c0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d022      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a4f      	ldr	r2, [pc, #316]	; (8008380 <HAL_DMA_Abort_IT+0x1c4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d01d      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a4d      	ldr	r2, [pc, #308]	; (8008384 <HAL_DMA_Abort_IT+0x1c8>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d018      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a4c      	ldr	r2, [pc, #304]	; (8008388 <HAL_DMA_Abort_IT+0x1cc>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d013      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a4a      	ldr	r2, [pc, #296]	; (800838c <HAL_DMA_Abort_IT+0x1d0>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d00e      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a49      	ldr	r2, [pc, #292]	; (8008390 <HAL_DMA_Abort_IT+0x1d4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d009      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a47      	ldr	r2, [pc, #284]	; (8008394 <HAL_DMA_Abort_IT+0x1d8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d004      	beq.n	8008284 <HAL_DMA_Abort_IT+0xc8>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a46      	ldr	r2, [pc, #280]	; (8008398 <HAL_DMA_Abort_IT+0x1dc>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d101      	bne.n	8008288 <HAL_DMA_Abort_IT+0xcc>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <HAL_DMA_Abort_IT+0xce>
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 8086 	beq.w	800839c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2204      	movs	r2, #4
 8008294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a2f      	ldr	r2, [pc, #188]	; (800835c <HAL_DMA_Abort_IT+0x1a0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d04a      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a2e      	ldr	r2, [pc, #184]	; (8008360 <HAL_DMA_Abort_IT+0x1a4>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d045      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <HAL_DMA_Abort_IT+0x1a8>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d040      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a2b      	ldr	r2, [pc, #172]	; (8008368 <HAL_DMA_Abort_IT+0x1ac>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d03b      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a29      	ldr	r2, [pc, #164]	; (800836c <HAL_DMA_Abort_IT+0x1b0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d036      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a28      	ldr	r2, [pc, #160]	; (8008370 <HAL_DMA_Abort_IT+0x1b4>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d031      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a26      	ldr	r2, [pc, #152]	; (8008374 <HAL_DMA_Abort_IT+0x1b8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d02c      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a25      	ldr	r2, [pc, #148]	; (8008378 <HAL_DMA_Abort_IT+0x1bc>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d027      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a23      	ldr	r2, [pc, #140]	; (800837c <HAL_DMA_Abort_IT+0x1c0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d022      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a22      	ldr	r2, [pc, #136]	; (8008380 <HAL_DMA_Abort_IT+0x1c4>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d01d      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a20      	ldr	r2, [pc, #128]	; (8008384 <HAL_DMA_Abort_IT+0x1c8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d018      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a1f      	ldr	r2, [pc, #124]	; (8008388 <HAL_DMA_Abort_IT+0x1cc>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d013      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a1d      	ldr	r2, [pc, #116]	; (800838c <HAL_DMA_Abort_IT+0x1d0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00e      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a1c      	ldr	r2, [pc, #112]	; (8008390 <HAL_DMA_Abort_IT+0x1d4>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d009      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a1a      	ldr	r2, [pc, #104]	; (8008394 <HAL_DMA_Abort_IT+0x1d8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d004      	beq.n	8008338 <HAL_DMA_Abort_IT+0x17c>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a19      	ldr	r2, [pc, #100]	; (8008398 <HAL_DMA_Abort_IT+0x1dc>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d108      	bne.n	800834a <HAL_DMA_Abort_IT+0x18e>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 0201 	bic.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	e178      	b.n	800863c <HAL_DMA_Abort_IT+0x480>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0201 	bic.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e16f      	b.n	800863c <HAL_DMA_Abort_IT+0x480>
 800835c:	40020010 	.word	0x40020010
 8008360:	40020028 	.word	0x40020028
 8008364:	40020040 	.word	0x40020040
 8008368:	40020058 	.word	0x40020058
 800836c:	40020070 	.word	0x40020070
 8008370:	40020088 	.word	0x40020088
 8008374:	400200a0 	.word	0x400200a0
 8008378:	400200b8 	.word	0x400200b8
 800837c:	40020410 	.word	0x40020410
 8008380:	40020428 	.word	0x40020428
 8008384:	40020440 	.word	0x40020440
 8008388:	40020458 	.word	0x40020458
 800838c:	40020470 	.word	0x40020470
 8008390:	40020488 	.word	0x40020488
 8008394:	400204a0 	.word	0x400204a0
 8008398:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 020e 	bic.w	r2, r2, #14
 80083aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a6c      	ldr	r2, [pc, #432]	; (8008564 <HAL_DMA_Abort_IT+0x3a8>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d04a      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a6b      	ldr	r2, [pc, #428]	; (8008568 <HAL_DMA_Abort_IT+0x3ac>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d045      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a69      	ldr	r2, [pc, #420]	; (800856c <HAL_DMA_Abort_IT+0x3b0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d040      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a68      	ldr	r2, [pc, #416]	; (8008570 <HAL_DMA_Abort_IT+0x3b4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d03b      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a66      	ldr	r2, [pc, #408]	; (8008574 <HAL_DMA_Abort_IT+0x3b8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d036      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a65      	ldr	r2, [pc, #404]	; (8008578 <HAL_DMA_Abort_IT+0x3bc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d031      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a63      	ldr	r2, [pc, #396]	; (800857c <HAL_DMA_Abort_IT+0x3c0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d02c      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a62      	ldr	r2, [pc, #392]	; (8008580 <HAL_DMA_Abort_IT+0x3c4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d027      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a60      	ldr	r2, [pc, #384]	; (8008584 <HAL_DMA_Abort_IT+0x3c8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d022      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a5f      	ldr	r2, [pc, #380]	; (8008588 <HAL_DMA_Abort_IT+0x3cc>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d01d      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a5d      	ldr	r2, [pc, #372]	; (800858c <HAL_DMA_Abort_IT+0x3d0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d018      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a5c      	ldr	r2, [pc, #368]	; (8008590 <HAL_DMA_Abort_IT+0x3d4>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d013      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a5a      	ldr	r2, [pc, #360]	; (8008594 <HAL_DMA_Abort_IT+0x3d8>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00e      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a59      	ldr	r2, [pc, #356]	; (8008598 <HAL_DMA_Abort_IT+0x3dc>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d009      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a57      	ldr	r2, [pc, #348]	; (800859c <HAL_DMA_Abort_IT+0x3e0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d004      	beq.n	800844c <HAL_DMA_Abort_IT+0x290>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a56      	ldr	r2, [pc, #344]	; (80085a0 <HAL_DMA_Abort_IT+0x3e4>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d108      	bne.n	800845e <HAL_DMA_Abort_IT+0x2a2>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0201 	bic.w	r2, r2, #1
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	e007      	b.n	800846e <HAL_DMA_Abort_IT+0x2b2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0201 	bic.w	r2, r2, #1
 800846c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a3c      	ldr	r2, [pc, #240]	; (8008564 <HAL_DMA_Abort_IT+0x3a8>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d072      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a3a      	ldr	r2, [pc, #232]	; (8008568 <HAL_DMA_Abort_IT+0x3ac>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d06d      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a39      	ldr	r2, [pc, #228]	; (800856c <HAL_DMA_Abort_IT+0x3b0>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d068      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a37      	ldr	r2, [pc, #220]	; (8008570 <HAL_DMA_Abort_IT+0x3b4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d063      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a36      	ldr	r2, [pc, #216]	; (8008574 <HAL_DMA_Abort_IT+0x3b8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d05e      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a34      	ldr	r2, [pc, #208]	; (8008578 <HAL_DMA_Abort_IT+0x3bc>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d059      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a33      	ldr	r2, [pc, #204]	; (800857c <HAL_DMA_Abort_IT+0x3c0>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d054      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a31      	ldr	r2, [pc, #196]	; (8008580 <HAL_DMA_Abort_IT+0x3c4>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d04f      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a30      	ldr	r2, [pc, #192]	; (8008584 <HAL_DMA_Abort_IT+0x3c8>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d04a      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a2e      	ldr	r2, [pc, #184]	; (8008588 <HAL_DMA_Abort_IT+0x3cc>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d045      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a2d      	ldr	r2, [pc, #180]	; (800858c <HAL_DMA_Abort_IT+0x3d0>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d040      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a2b      	ldr	r2, [pc, #172]	; (8008590 <HAL_DMA_Abort_IT+0x3d4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d03b      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a2a      	ldr	r2, [pc, #168]	; (8008594 <HAL_DMA_Abort_IT+0x3d8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d036      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a28      	ldr	r2, [pc, #160]	; (8008598 <HAL_DMA_Abort_IT+0x3dc>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d031      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a27      	ldr	r2, [pc, #156]	; (800859c <HAL_DMA_Abort_IT+0x3e0>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d02c      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a25      	ldr	r2, [pc, #148]	; (80085a0 <HAL_DMA_Abort_IT+0x3e4>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d027      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a24      	ldr	r2, [pc, #144]	; (80085a4 <HAL_DMA_Abort_IT+0x3e8>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d022      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a22      	ldr	r2, [pc, #136]	; (80085a8 <HAL_DMA_Abort_IT+0x3ec>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d01d      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a21      	ldr	r2, [pc, #132]	; (80085ac <HAL_DMA_Abort_IT+0x3f0>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d018      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a1f      	ldr	r2, [pc, #124]	; (80085b0 <HAL_DMA_Abort_IT+0x3f4>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d013      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a1e      	ldr	r2, [pc, #120]	; (80085b4 <HAL_DMA_Abort_IT+0x3f8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00e      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a1c      	ldr	r2, [pc, #112]	; (80085b8 <HAL_DMA_Abort_IT+0x3fc>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d009      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a1b      	ldr	r2, [pc, #108]	; (80085bc <HAL_DMA_Abort_IT+0x400>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d004      	beq.n	800855e <HAL_DMA_Abort_IT+0x3a2>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a19      	ldr	r2, [pc, #100]	; (80085c0 <HAL_DMA_Abort_IT+0x404>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d132      	bne.n	80085c4 <HAL_DMA_Abort_IT+0x408>
 800855e:	2301      	movs	r3, #1
 8008560:	e031      	b.n	80085c6 <HAL_DMA_Abort_IT+0x40a>
 8008562:	bf00      	nop
 8008564:	40020010 	.word	0x40020010
 8008568:	40020028 	.word	0x40020028
 800856c:	40020040 	.word	0x40020040
 8008570:	40020058 	.word	0x40020058
 8008574:	40020070 	.word	0x40020070
 8008578:	40020088 	.word	0x40020088
 800857c:	400200a0 	.word	0x400200a0
 8008580:	400200b8 	.word	0x400200b8
 8008584:	40020410 	.word	0x40020410
 8008588:	40020428 	.word	0x40020428
 800858c:	40020440 	.word	0x40020440
 8008590:	40020458 	.word	0x40020458
 8008594:	40020470 	.word	0x40020470
 8008598:	40020488 	.word	0x40020488
 800859c:	400204a0 	.word	0x400204a0
 80085a0:	400204b8 	.word	0x400204b8
 80085a4:	58025408 	.word	0x58025408
 80085a8:	5802541c 	.word	0x5802541c
 80085ac:	58025430 	.word	0x58025430
 80085b0:	58025444 	.word	0x58025444
 80085b4:	58025458 	.word	0x58025458
 80085b8:	5802546c 	.word	0x5802546c
 80085bc:	58025480 	.word	0x58025480
 80085c0:	58025494 	.word	0x58025494
 80085c4:	2300      	movs	r3, #0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d028      	beq.n	800861c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e4:	f003 031f 	and.w	r3, r3, #31
 80085e8:	2201      	movs	r2, #1
 80085ea:	409a      	lsls	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80085f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00c      	beq.n	800861c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800860c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008610:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800861a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop

08008648 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08a      	sub	sp, #40	; 0x28
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008654:	4b67      	ldr	r3, [pc, #412]	; (80087f4 <HAL_DMA_IRQHandler+0x1ac>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a67      	ldr	r2, [pc, #412]	; (80087f8 <HAL_DMA_IRQHandler+0x1b0>)
 800865a:	fba2 2303 	umull	r2, r3, r2, r3
 800865e:	0a9b      	lsrs	r3, r3, #10
 8008660:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008666:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a5f      	ldr	r2, [pc, #380]	; (80087fc <HAL_DMA_IRQHandler+0x1b4>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d04a      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a5d      	ldr	r2, [pc, #372]	; (8008800 <HAL_DMA_IRQHandler+0x1b8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d045      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a5c      	ldr	r2, [pc, #368]	; (8008804 <HAL_DMA_IRQHandler+0x1bc>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d040      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a5a      	ldr	r2, [pc, #360]	; (8008808 <HAL_DMA_IRQHandler+0x1c0>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d03b      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a59      	ldr	r2, [pc, #356]	; (800880c <HAL_DMA_IRQHandler+0x1c4>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d036      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a57      	ldr	r2, [pc, #348]	; (8008810 <HAL_DMA_IRQHandler+0x1c8>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d031      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a56      	ldr	r2, [pc, #344]	; (8008814 <HAL_DMA_IRQHandler+0x1cc>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d02c      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a54      	ldr	r2, [pc, #336]	; (8008818 <HAL_DMA_IRQHandler+0x1d0>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d027      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a53      	ldr	r2, [pc, #332]	; (800881c <HAL_DMA_IRQHandler+0x1d4>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d022      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a51      	ldr	r2, [pc, #324]	; (8008820 <HAL_DMA_IRQHandler+0x1d8>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d01d      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a50      	ldr	r2, [pc, #320]	; (8008824 <HAL_DMA_IRQHandler+0x1dc>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d018      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a4e      	ldr	r2, [pc, #312]	; (8008828 <HAL_DMA_IRQHandler+0x1e0>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d013      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a4d      	ldr	r2, [pc, #308]	; (800882c <HAL_DMA_IRQHandler+0x1e4>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00e      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a4b      	ldr	r2, [pc, #300]	; (8008830 <HAL_DMA_IRQHandler+0x1e8>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d009      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a4a      	ldr	r2, [pc, #296]	; (8008834 <HAL_DMA_IRQHandler+0x1ec>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d004      	beq.n	800871a <HAL_DMA_IRQHandler+0xd2>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a48      	ldr	r2, [pc, #288]	; (8008838 <HAL_DMA_IRQHandler+0x1f0>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d101      	bne.n	800871e <HAL_DMA_IRQHandler+0xd6>
 800871a:	2301      	movs	r3, #1
 800871c:	e000      	b.n	8008720 <HAL_DMA_IRQHandler+0xd8>
 800871e:	2300      	movs	r3, #0
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 842b 	beq.w	8008f7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872a:	f003 031f 	and.w	r3, r3, #31
 800872e:	2208      	movs	r2, #8
 8008730:	409a      	lsls	r2, r3
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	4013      	ands	r3, r2
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 80a2 	beq.w	8008880 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a2e      	ldr	r2, [pc, #184]	; (80087fc <HAL_DMA_IRQHandler+0x1b4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d04a      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a2d      	ldr	r2, [pc, #180]	; (8008800 <HAL_DMA_IRQHandler+0x1b8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d045      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a2b      	ldr	r2, [pc, #172]	; (8008804 <HAL_DMA_IRQHandler+0x1bc>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d040      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a2a      	ldr	r2, [pc, #168]	; (8008808 <HAL_DMA_IRQHandler+0x1c0>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d03b      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a28      	ldr	r2, [pc, #160]	; (800880c <HAL_DMA_IRQHandler+0x1c4>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d036      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a27      	ldr	r2, [pc, #156]	; (8008810 <HAL_DMA_IRQHandler+0x1c8>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d031      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a25      	ldr	r2, [pc, #148]	; (8008814 <HAL_DMA_IRQHandler+0x1cc>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d02c      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a24      	ldr	r2, [pc, #144]	; (8008818 <HAL_DMA_IRQHandler+0x1d0>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d027      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a22      	ldr	r2, [pc, #136]	; (800881c <HAL_DMA_IRQHandler+0x1d4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d022      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a21      	ldr	r2, [pc, #132]	; (8008820 <HAL_DMA_IRQHandler+0x1d8>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d01d      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a1f      	ldr	r2, [pc, #124]	; (8008824 <HAL_DMA_IRQHandler+0x1dc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d018      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a1e      	ldr	r2, [pc, #120]	; (8008828 <HAL_DMA_IRQHandler+0x1e0>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d013      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1c      	ldr	r2, [pc, #112]	; (800882c <HAL_DMA_IRQHandler+0x1e4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00e      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1b      	ldr	r2, [pc, #108]	; (8008830 <HAL_DMA_IRQHandler+0x1e8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d009      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a19      	ldr	r2, [pc, #100]	; (8008834 <HAL_DMA_IRQHandler+0x1ec>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <HAL_DMA_IRQHandler+0x194>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <HAL_DMA_IRQHandler+0x1f0>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d12f      	bne.n	800883c <HAL_DMA_IRQHandler+0x1f4>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bf14      	ite	ne
 80087ea:	2301      	movne	r3, #1
 80087ec:	2300      	moveq	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	e02e      	b.n	8008850 <HAL_DMA_IRQHandler+0x208>
 80087f2:	bf00      	nop
 80087f4:	240000c0 	.word	0x240000c0
 80087f8:	1b4e81b5 	.word	0x1b4e81b5
 80087fc:	40020010 	.word	0x40020010
 8008800:	40020028 	.word	0x40020028
 8008804:	40020040 	.word	0x40020040
 8008808:	40020058 	.word	0x40020058
 800880c:	40020070 	.word	0x40020070
 8008810:	40020088 	.word	0x40020088
 8008814:	400200a0 	.word	0x400200a0
 8008818:	400200b8 	.word	0x400200b8
 800881c:	40020410 	.word	0x40020410
 8008820:	40020428 	.word	0x40020428
 8008824:	40020440 	.word	0x40020440
 8008828:	40020458 	.word	0x40020458
 800882c:	40020470 	.word	0x40020470
 8008830:	40020488 	.word	0x40020488
 8008834:	400204a0 	.word	0x400204a0
 8008838:	400204b8 	.word	0x400204b8
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0308 	and.w	r3, r3, #8
 8008846:	2b00      	cmp	r3, #0
 8008848:	bf14      	ite	ne
 800884a:	2301      	movne	r3, #1
 800884c:	2300      	moveq	r3, #0
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b00      	cmp	r3, #0
 8008852:	d015      	beq.n	8008880 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0204 	bic.w	r2, r2, #4
 8008862:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008868:	f003 031f 	and.w	r3, r3, #31
 800886c:	2208      	movs	r2, #8
 800886e:	409a      	lsls	r2, r3
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008878:	f043 0201 	orr.w	r2, r3, #1
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008884:	f003 031f 	and.w	r3, r3, #31
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	fa22 f303 	lsr.w	r3, r2, r3
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d06e      	beq.n	8008974 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a69      	ldr	r2, [pc, #420]	; (8008a40 <HAL_DMA_IRQHandler+0x3f8>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d04a      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a67      	ldr	r2, [pc, #412]	; (8008a44 <HAL_DMA_IRQHandler+0x3fc>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d045      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a66      	ldr	r2, [pc, #408]	; (8008a48 <HAL_DMA_IRQHandler+0x400>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d040      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a64      	ldr	r2, [pc, #400]	; (8008a4c <HAL_DMA_IRQHandler+0x404>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d03b      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a63      	ldr	r2, [pc, #396]	; (8008a50 <HAL_DMA_IRQHandler+0x408>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d036      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a61      	ldr	r2, [pc, #388]	; (8008a54 <HAL_DMA_IRQHandler+0x40c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d031      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a60      	ldr	r2, [pc, #384]	; (8008a58 <HAL_DMA_IRQHandler+0x410>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d02c      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a5e      	ldr	r2, [pc, #376]	; (8008a5c <HAL_DMA_IRQHandler+0x414>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d027      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a5d      	ldr	r2, [pc, #372]	; (8008a60 <HAL_DMA_IRQHandler+0x418>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d022      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a5b      	ldr	r2, [pc, #364]	; (8008a64 <HAL_DMA_IRQHandler+0x41c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d01d      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a5a      	ldr	r2, [pc, #360]	; (8008a68 <HAL_DMA_IRQHandler+0x420>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d018      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a58      	ldr	r2, [pc, #352]	; (8008a6c <HAL_DMA_IRQHandler+0x424>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d013      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a57      	ldr	r2, [pc, #348]	; (8008a70 <HAL_DMA_IRQHandler+0x428>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d00e      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a55      	ldr	r2, [pc, #340]	; (8008a74 <HAL_DMA_IRQHandler+0x42c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d009      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a54      	ldr	r2, [pc, #336]	; (8008a78 <HAL_DMA_IRQHandler+0x430>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d004      	beq.n	8008936 <HAL_DMA_IRQHandler+0x2ee>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a52      	ldr	r2, [pc, #328]	; (8008a7c <HAL_DMA_IRQHandler+0x434>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d10a      	bne.n	800894c <HAL_DMA_IRQHandler+0x304>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008940:	2b00      	cmp	r3, #0
 8008942:	bf14      	ite	ne
 8008944:	2301      	movne	r3, #1
 8008946:	2300      	moveq	r3, #0
 8008948:	b2db      	uxtb	r3, r3
 800894a:	e003      	b.n	8008954 <HAL_DMA_IRQHandler+0x30c>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2300      	movs	r3, #0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00d      	beq.n	8008974 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895c:	f003 031f 	and.w	r3, r3, #31
 8008960:	2201      	movs	r2, #1
 8008962:	409a      	lsls	r2, r3
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896c:	f043 0202 	orr.w	r2, r3, #2
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008978:	f003 031f 	and.w	r3, r3, #31
 800897c:	2204      	movs	r2, #4
 800897e:	409a      	lsls	r2, r3
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	4013      	ands	r3, r2
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 808f 	beq.w	8008aa8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a2c      	ldr	r2, [pc, #176]	; (8008a40 <HAL_DMA_IRQHandler+0x3f8>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d04a      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a2a      	ldr	r2, [pc, #168]	; (8008a44 <HAL_DMA_IRQHandler+0x3fc>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d045      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a29      	ldr	r2, [pc, #164]	; (8008a48 <HAL_DMA_IRQHandler+0x400>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d040      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a27      	ldr	r2, [pc, #156]	; (8008a4c <HAL_DMA_IRQHandler+0x404>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d03b      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a26      	ldr	r2, [pc, #152]	; (8008a50 <HAL_DMA_IRQHandler+0x408>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d036      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a24      	ldr	r2, [pc, #144]	; (8008a54 <HAL_DMA_IRQHandler+0x40c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d031      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a23      	ldr	r2, [pc, #140]	; (8008a58 <HAL_DMA_IRQHandler+0x410>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d02c      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a21      	ldr	r2, [pc, #132]	; (8008a5c <HAL_DMA_IRQHandler+0x414>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d027      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a20      	ldr	r2, [pc, #128]	; (8008a60 <HAL_DMA_IRQHandler+0x418>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d022      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a1e      	ldr	r2, [pc, #120]	; (8008a64 <HAL_DMA_IRQHandler+0x41c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d01d      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a1d      	ldr	r2, [pc, #116]	; (8008a68 <HAL_DMA_IRQHandler+0x420>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d018      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a1b      	ldr	r2, [pc, #108]	; (8008a6c <HAL_DMA_IRQHandler+0x424>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d013      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a1a      	ldr	r2, [pc, #104]	; (8008a70 <HAL_DMA_IRQHandler+0x428>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d00e      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a18      	ldr	r2, [pc, #96]	; (8008a74 <HAL_DMA_IRQHandler+0x42c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d009      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a17      	ldr	r2, [pc, #92]	; (8008a78 <HAL_DMA_IRQHandler+0x430>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d004      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x3e2>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a15      	ldr	r2, [pc, #84]	; (8008a7c <HAL_DMA_IRQHandler+0x434>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d12a      	bne.n	8008a80 <HAL_DMA_IRQHandler+0x438>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bf14      	ite	ne
 8008a38:	2301      	movne	r3, #1
 8008a3a:	2300      	moveq	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	e023      	b.n	8008a88 <HAL_DMA_IRQHandler+0x440>
 8008a40:	40020010 	.word	0x40020010
 8008a44:	40020028 	.word	0x40020028
 8008a48:	40020040 	.word	0x40020040
 8008a4c:	40020058 	.word	0x40020058
 8008a50:	40020070 	.word	0x40020070
 8008a54:	40020088 	.word	0x40020088
 8008a58:	400200a0 	.word	0x400200a0
 8008a5c:	400200b8 	.word	0x400200b8
 8008a60:	40020410 	.word	0x40020410
 8008a64:	40020428 	.word	0x40020428
 8008a68:	40020440 	.word	0x40020440
 8008a6c:	40020458 	.word	0x40020458
 8008a70:	40020470 	.word	0x40020470
 8008a74:	40020488 	.word	0x40020488
 8008a78:	400204a0 	.word	0x400204a0
 8008a7c:	400204b8 	.word	0x400204b8
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2300      	movs	r3, #0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00d      	beq.n	8008aa8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a90:	f003 031f 	and.w	r3, r3, #31
 8008a94:	2204      	movs	r2, #4
 8008a96:	409a      	lsls	r2, r3
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa0:	f043 0204 	orr.w	r2, r3, #4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	2210      	movs	r2, #16
 8008ab2:	409a      	lsls	r2, r3
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 80a6 	beq.w	8008c0a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a85      	ldr	r2, [pc, #532]	; (8008cd8 <HAL_DMA_IRQHandler+0x690>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d04a      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a83      	ldr	r2, [pc, #524]	; (8008cdc <HAL_DMA_IRQHandler+0x694>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d045      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a82      	ldr	r2, [pc, #520]	; (8008ce0 <HAL_DMA_IRQHandler+0x698>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d040      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a80      	ldr	r2, [pc, #512]	; (8008ce4 <HAL_DMA_IRQHandler+0x69c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d03b      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a7f      	ldr	r2, [pc, #508]	; (8008ce8 <HAL_DMA_IRQHandler+0x6a0>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d036      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a7d      	ldr	r2, [pc, #500]	; (8008cec <HAL_DMA_IRQHandler+0x6a4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d031      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a7c      	ldr	r2, [pc, #496]	; (8008cf0 <HAL_DMA_IRQHandler+0x6a8>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d02c      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a7a      	ldr	r2, [pc, #488]	; (8008cf4 <HAL_DMA_IRQHandler+0x6ac>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d027      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a79      	ldr	r2, [pc, #484]	; (8008cf8 <HAL_DMA_IRQHandler+0x6b0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d022      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a77      	ldr	r2, [pc, #476]	; (8008cfc <HAL_DMA_IRQHandler+0x6b4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d01d      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a76      	ldr	r2, [pc, #472]	; (8008d00 <HAL_DMA_IRQHandler+0x6b8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d018      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a74      	ldr	r2, [pc, #464]	; (8008d04 <HAL_DMA_IRQHandler+0x6bc>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d013      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a73      	ldr	r2, [pc, #460]	; (8008d08 <HAL_DMA_IRQHandler+0x6c0>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00e      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a71      	ldr	r2, [pc, #452]	; (8008d0c <HAL_DMA_IRQHandler+0x6c4>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d009      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a70      	ldr	r2, [pc, #448]	; (8008d10 <HAL_DMA_IRQHandler+0x6c8>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d004      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x516>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a6e      	ldr	r2, [pc, #440]	; (8008d14 <HAL_DMA_IRQHandler+0x6cc>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d10a      	bne.n	8008b74 <HAL_DMA_IRQHandler+0x52c>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0308 	and.w	r3, r3, #8
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	bf14      	ite	ne
 8008b6c:	2301      	movne	r3, #1
 8008b6e:	2300      	moveq	r3, #0
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	e009      	b.n	8008b88 <HAL_DMA_IRQHandler+0x540>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	bf14      	ite	ne
 8008b82:	2301      	movne	r3, #1
 8008b84:	2300      	moveq	r3, #0
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d03e      	beq.n	8008c0a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b90:	f003 031f 	and.w	r3, r3, #31
 8008b94:	2210      	movs	r2, #16
 8008b96:	409a      	lsls	r2, r3
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d018      	beq.n	8008bdc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d108      	bne.n	8008bca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d024      	beq.n	8008c0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	4798      	blx	r3
 8008bc8:	e01f      	b.n	8008c0a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d01b      	beq.n	8008c0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
 8008bda:	e016      	b.n	8008c0a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d107      	bne.n	8008bfa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0208 	bic.w	r2, r2, #8
 8008bf8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c0e:	f003 031f 	and.w	r3, r3, #31
 8008c12:	2220      	movs	r2, #32
 8008c14:	409a      	lsls	r2, r3
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 8110 	beq.w	8008e40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a2c      	ldr	r2, [pc, #176]	; (8008cd8 <HAL_DMA_IRQHandler+0x690>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d04a      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a2b      	ldr	r2, [pc, #172]	; (8008cdc <HAL_DMA_IRQHandler+0x694>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d045      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a29      	ldr	r2, [pc, #164]	; (8008ce0 <HAL_DMA_IRQHandler+0x698>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d040      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a28      	ldr	r2, [pc, #160]	; (8008ce4 <HAL_DMA_IRQHandler+0x69c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d03b      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a26      	ldr	r2, [pc, #152]	; (8008ce8 <HAL_DMA_IRQHandler+0x6a0>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d036      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a25      	ldr	r2, [pc, #148]	; (8008cec <HAL_DMA_IRQHandler+0x6a4>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d031      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a23      	ldr	r2, [pc, #140]	; (8008cf0 <HAL_DMA_IRQHandler+0x6a8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d02c      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a22      	ldr	r2, [pc, #136]	; (8008cf4 <HAL_DMA_IRQHandler+0x6ac>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d027      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a20      	ldr	r2, [pc, #128]	; (8008cf8 <HAL_DMA_IRQHandler+0x6b0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d022      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a1f      	ldr	r2, [pc, #124]	; (8008cfc <HAL_DMA_IRQHandler+0x6b4>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d01d      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a1d      	ldr	r2, [pc, #116]	; (8008d00 <HAL_DMA_IRQHandler+0x6b8>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d018      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a1c      	ldr	r2, [pc, #112]	; (8008d04 <HAL_DMA_IRQHandler+0x6bc>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d013      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a1a      	ldr	r2, [pc, #104]	; (8008d08 <HAL_DMA_IRQHandler+0x6c0>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00e      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a19      	ldr	r2, [pc, #100]	; (8008d0c <HAL_DMA_IRQHandler+0x6c4>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d009      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a17      	ldr	r2, [pc, #92]	; (8008d10 <HAL_DMA_IRQHandler+0x6c8>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d004      	beq.n	8008cc0 <HAL_DMA_IRQHandler+0x678>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a16      	ldr	r2, [pc, #88]	; (8008d14 <HAL_DMA_IRQHandler+0x6cc>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d12b      	bne.n	8008d18 <HAL_DMA_IRQHandler+0x6d0>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0310 	and.w	r3, r3, #16
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	bf14      	ite	ne
 8008cce:	2301      	movne	r3, #1
 8008cd0:	2300      	moveq	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	e02a      	b.n	8008d2c <HAL_DMA_IRQHandler+0x6e4>
 8008cd6:	bf00      	nop
 8008cd8:	40020010 	.word	0x40020010
 8008cdc:	40020028 	.word	0x40020028
 8008ce0:	40020040 	.word	0x40020040
 8008ce4:	40020058 	.word	0x40020058
 8008ce8:	40020070 	.word	0x40020070
 8008cec:	40020088 	.word	0x40020088
 8008cf0:	400200a0 	.word	0x400200a0
 8008cf4:	400200b8 	.word	0x400200b8
 8008cf8:	40020410 	.word	0x40020410
 8008cfc:	40020428 	.word	0x40020428
 8008d00:	40020440 	.word	0x40020440
 8008d04:	40020458 	.word	0x40020458
 8008d08:	40020470 	.word	0x40020470
 8008d0c:	40020488 	.word	0x40020488
 8008d10:	400204a0 	.word	0x400204a0
 8008d14:	400204b8 	.word	0x400204b8
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	bf14      	ite	ne
 8008d26:	2301      	movne	r3, #1
 8008d28:	2300      	moveq	r3, #0
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8087 	beq.w	8008e40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d36:	f003 031f 	and.w	r3, r3, #31
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	409a      	lsls	r2, r3
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b04      	cmp	r3, #4
 8008d4c:	d139      	bne.n	8008dc2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0216 	bic.w	r2, r2, #22
 8008d5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	695a      	ldr	r2, [r3, #20]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d103      	bne.n	8008d7e <HAL_DMA_IRQHandler+0x736>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f022 0208 	bic.w	r2, r2, #8
 8008d8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d92:	f003 031f 	and.w	r3, r3, #31
 8008d96:	223f      	movs	r2, #63	; 0x3f
 8008d98:	409a      	lsls	r2, r3
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 834a 	beq.w	800944c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4798      	blx	r3
          }
          return;
 8008dc0:	e344      	b.n	800944c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d018      	beq.n	8008e02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d108      	bne.n	8008df0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d02c      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	4798      	blx	r3
 8008dee:	e027      	b.n	8008e40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d023      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	4798      	blx	r3
 8008e00:	e01e      	b.n	8008e40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10f      	bne.n	8008e30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0210 	bic.w	r2, r2, #16
 8008e1e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8306 	beq.w	8009456 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 8088 	beq.w	8008f68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2204      	movs	r2, #4
 8008e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a7a      	ldr	r2, [pc, #488]	; (8009050 <HAL_DMA_IRQHandler+0xa08>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d04a      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a79      	ldr	r2, [pc, #484]	; (8009054 <HAL_DMA_IRQHandler+0xa0c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d045      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a77      	ldr	r2, [pc, #476]	; (8009058 <HAL_DMA_IRQHandler+0xa10>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d040      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a76      	ldr	r2, [pc, #472]	; (800905c <HAL_DMA_IRQHandler+0xa14>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d03b      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a74      	ldr	r2, [pc, #464]	; (8009060 <HAL_DMA_IRQHandler+0xa18>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d036      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a73      	ldr	r2, [pc, #460]	; (8009064 <HAL_DMA_IRQHandler+0xa1c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d031      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a71      	ldr	r2, [pc, #452]	; (8009068 <HAL_DMA_IRQHandler+0xa20>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d02c      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a70      	ldr	r2, [pc, #448]	; (800906c <HAL_DMA_IRQHandler+0xa24>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d027      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a6e      	ldr	r2, [pc, #440]	; (8009070 <HAL_DMA_IRQHandler+0xa28>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d022      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a6d      	ldr	r2, [pc, #436]	; (8009074 <HAL_DMA_IRQHandler+0xa2c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d01d      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a6b      	ldr	r2, [pc, #428]	; (8009078 <HAL_DMA_IRQHandler+0xa30>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d018      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a6a      	ldr	r2, [pc, #424]	; (800907c <HAL_DMA_IRQHandler+0xa34>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d013      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a68      	ldr	r2, [pc, #416]	; (8009080 <HAL_DMA_IRQHandler+0xa38>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d00e      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a67      	ldr	r2, [pc, #412]	; (8009084 <HAL_DMA_IRQHandler+0xa3c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d009      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a65      	ldr	r2, [pc, #404]	; (8009088 <HAL_DMA_IRQHandler+0xa40>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d004      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x8b8>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a64      	ldr	r2, [pc, #400]	; (800908c <HAL_DMA_IRQHandler+0xa44>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d108      	bne.n	8008f12 <HAL_DMA_IRQHandler+0x8ca>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0201 	bic.w	r2, r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	e007      	b.n	8008f22 <HAL_DMA_IRQHandler+0x8da>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f022 0201 	bic.w	r2, r2, #1
 8008f20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3301      	adds	r3, #1
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d307      	bcc.n	8008f3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1f2      	bne.n	8008f22 <HAL_DMA_IRQHandler+0x8da>
 8008f3c:	e000      	b.n	8008f40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008f3e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d004      	beq.n	8008f58 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2203      	movs	r2, #3
 8008f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008f56:	e003      	b.n	8008f60 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 8272 	beq.w	8009456 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	4798      	blx	r3
 8008f7a:	e26c      	b.n	8009456 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a43      	ldr	r2, [pc, #268]	; (8009090 <HAL_DMA_IRQHandler+0xa48>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d022      	beq.n	8008fcc <HAL_DMA_IRQHandler+0x984>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a42      	ldr	r2, [pc, #264]	; (8009094 <HAL_DMA_IRQHandler+0xa4c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d01d      	beq.n	8008fcc <HAL_DMA_IRQHandler+0x984>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a40      	ldr	r2, [pc, #256]	; (8009098 <HAL_DMA_IRQHandler+0xa50>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d018      	beq.n	8008fcc <HAL_DMA_IRQHandler+0x984>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a3f      	ldr	r2, [pc, #252]	; (800909c <HAL_DMA_IRQHandler+0xa54>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d013      	beq.n	8008fcc <HAL_DMA_IRQHandler+0x984>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a3d      	ldr	r2, [pc, #244]	; (80090a0 <HAL_DMA_IRQHandler+0xa58>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00e      	beq.n	8008fcc <HAL_DMA_IRQHandler+0x984>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a3c      	ldr	r2, [pc, #240]	; (80090a4 <HAL_DMA_IRQHandler+0xa5c>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d009      	beq.n	8008fcc <HAL_DMA_IRQHandler+0x984>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a3a      	ldr	r2, [pc, #232]	; (80090a8 <HAL_DMA_IRQHandler+0xa60>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d004      	beq.n	8008fcc <HAL_DMA_IRQHandler+0x984>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a39      	ldr	r2, [pc, #228]	; (80090ac <HAL_DMA_IRQHandler+0xa64>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d101      	bne.n	8008fd0 <HAL_DMA_IRQHandler+0x988>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <HAL_DMA_IRQHandler+0x98a>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 823f 	beq.w	8009456 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe4:	f003 031f 	and.w	r3, r3, #31
 8008fe8:	2204      	movs	r2, #4
 8008fea:	409a      	lsls	r2, r3
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 80cd 	beq.w	8009190 <HAL_DMA_IRQHandler+0xb48>
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 80c7 	beq.w	8009190 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009006:	f003 031f 	and.w	r3, r3, #31
 800900a:	2204      	movs	r2, #4
 800900c:	409a      	lsls	r2, r3
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d049      	beq.n	80090b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 8210 	beq.w	8009450 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009038:	e20a      	b.n	8009450 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 8206 	beq.w	8009450 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800904c:	e200      	b.n	8009450 <HAL_DMA_IRQHandler+0xe08>
 800904e:	bf00      	nop
 8009050:	40020010 	.word	0x40020010
 8009054:	40020028 	.word	0x40020028
 8009058:	40020040 	.word	0x40020040
 800905c:	40020058 	.word	0x40020058
 8009060:	40020070 	.word	0x40020070
 8009064:	40020088 	.word	0x40020088
 8009068:	400200a0 	.word	0x400200a0
 800906c:	400200b8 	.word	0x400200b8
 8009070:	40020410 	.word	0x40020410
 8009074:	40020428 	.word	0x40020428
 8009078:	40020440 	.word	0x40020440
 800907c:	40020458 	.word	0x40020458
 8009080:	40020470 	.word	0x40020470
 8009084:	40020488 	.word	0x40020488
 8009088:	400204a0 	.word	0x400204a0
 800908c:	400204b8 	.word	0x400204b8
 8009090:	58025408 	.word	0x58025408
 8009094:	5802541c 	.word	0x5802541c
 8009098:	58025430 	.word	0x58025430
 800909c:	58025444 	.word	0x58025444
 80090a0:	58025458 	.word	0x58025458
 80090a4:	5802546c 	.word	0x5802546c
 80090a8:	58025480 	.word	0x58025480
 80090ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d160      	bne.n	800917c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a7f      	ldr	r2, [pc, #508]	; (80092bc <HAL_DMA_IRQHandler+0xc74>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d04a      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a7d      	ldr	r2, [pc, #500]	; (80092c0 <HAL_DMA_IRQHandler+0xc78>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d045      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a7c      	ldr	r2, [pc, #496]	; (80092c4 <HAL_DMA_IRQHandler+0xc7c>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d040      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a7a      	ldr	r2, [pc, #488]	; (80092c8 <HAL_DMA_IRQHandler+0xc80>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d03b      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a79      	ldr	r2, [pc, #484]	; (80092cc <HAL_DMA_IRQHandler+0xc84>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d036      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a77      	ldr	r2, [pc, #476]	; (80092d0 <HAL_DMA_IRQHandler+0xc88>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d031      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a76      	ldr	r2, [pc, #472]	; (80092d4 <HAL_DMA_IRQHandler+0xc8c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d02c      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a74      	ldr	r2, [pc, #464]	; (80092d8 <HAL_DMA_IRQHandler+0xc90>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d027      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a73      	ldr	r2, [pc, #460]	; (80092dc <HAL_DMA_IRQHandler+0xc94>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d022      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a71      	ldr	r2, [pc, #452]	; (80092e0 <HAL_DMA_IRQHandler+0xc98>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d01d      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a70      	ldr	r2, [pc, #448]	; (80092e4 <HAL_DMA_IRQHandler+0xc9c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d018      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a6e      	ldr	r2, [pc, #440]	; (80092e8 <HAL_DMA_IRQHandler+0xca0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d013      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a6d      	ldr	r2, [pc, #436]	; (80092ec <HAL_DMA_IRQHandler+0xca4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00e      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a6b      	ldr	r2, [pc, #428]	; (80092f0 <HAL_DMA_IRQHandler+0xca8>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d009      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a6a      	ldr	r2, [pc, #424]	; (80092f4 <HAL_DMA_IRQHandler+0xcac>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d004      	beq.n	800915a <HAL_DMA_IRQHandler+0xb12>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a68      	ldr	r2, [pc, #416]	; (80092f8 <HAL_DMA_IRQHandler+0xcb0>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d108      	bne.n	800916c <HAL_DMA_IRQHandler+0xb24>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f022 0208 	bic.w	r2, r2, #8
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	e007      	b.n	800917c <HAL_DMA_IRQHandler+0xb34>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0204 	bic.w	r2, r2, #4
 800917a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 8165 	beq.w	8009450 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800918e:	e15f      	b.n	8009450 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009194:	f003 031f 	and.w	r3, r3, #31
 8009198:	2202      	movs	r2, #2
 800919a:	409a      	lsls	r2, r3
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	4013      	ands	r3, r2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 80c5 	beq.w	8009330 <HAL_DMA_IRQHandler+0xce8>
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 80bf 	beq.w	8009330 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b6:	f003 031f 	and.w	r3, r3, #31
 80091ba:	2202      	movs	r2, #2
 80091bc:	409a      	lsls	r2, r3
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d018      	beq.n	80091fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d109      	bne.n	80091ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 813a 	beq.w	8009454 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091e8:	e134      	b.n	8009454 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8130 	beq.w	8009454 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091fc:	e12a      	b.n	8009454 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	2b00      	cmp	r3, #0
 8009206:	f040 8089 	bne.w	800931c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a2b      	ldr	r2, [pc, #172]	; (80092bc <HAL_DMA_IRQHandler+0xc74>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d04a      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a29      	ldr	r2, [pc, #164]	; (80092c0 <HAL_DMA_IRQHandler+0xc78>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d045      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a28      	ldr	r2, [pc, #160]	; (80092c4 <HAL_DMA_IRQHandler+0xc7c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d040      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a26      	ldr	r2, [pc, #152]	; (80092c8 <HAL_DMA_IRQHandler+0xc80>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d03b      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a25      	ldr	r2, [pc, #148]	; (80092cc <HAL_DMA_IRQHandler+0xc84>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d036      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a23      	ldr	r2, [pc, #140]	; (80092d0 <HAL_DMA_IRQHandler+0xc88>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d031      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a22      	ldr	r2, [pc, #136]	; (80092d4 <HAL_DMA_IRQHandler+0xc8c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d02c      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a20      	ldr	r2, [pc, #128]	; (80092d8 <HAL_DMA_IRQHandler+0xc90>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d027      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1f      	ldr	r2, [pc, #124]	; (80092dc <HAL_DMA_IRQHandler+0xc94>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d022      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a1d      	ldr	r2, [pc, #116]	; (80092e0 <HAL_DMA_IRQHandler+0xc98>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d01d      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a1c      	ldr	r2, [pc, #112]	; (80092e4 <HAL_DMA_IRQHandler+0xc9c>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d018      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a1a      	ldr	r2, [pc, #104]	; (80092e8 <HAL_DMA_IRQHandler+0xca0>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d013      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a19      	ldr	r2, [pc, #100]	; (80092ec <HAL_DMA_IRQHandler+0xca4>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d00e      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a17      	ldr	r2, [pc, #92]	; (80092f0 <HAL_DMA_IRQHandler+0xca8>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d009      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a16      	ldr	r2, [pc, #88]	; (80092f4 <HAL_DMA_IRQHandler+0xcac>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d004      	beq.n	80092aa <HAL_DMA_IRQHandler+0xc62>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a14      	ldr	r2, [pc, #80]	; (80092f8 <HAL_DMA_IRQHandler+0xcb0>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d128      	bne.n	80092fc <HAL_DMA_IRQHandler+0xcb4>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 0214 	bic.w	r2, r2, #20
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	e027      	b.n	800930c <HAL_DMA_IRQHandler+0xcc4>
 80092bc:	40020010 	.word	0x40020010
 80092c0:	40020028 	.word	0x40020028
 80092c4:	40020040 	.word	0x40020040
 80092c8:	40020058 	.word	0x40020058
 80092cc:	40020070 	.word	0x40020070
 80092d0:	40020088 	.word	0x40020088
 80092d4:	400200a0 	.word	0x400200a0
 80092d8:	400200b8 	.word	0x400200b8
 80092dc:	40020410 	.word	0x40020410
 80092e0:	40020428 	.word	0x40020428
 80092e4:	40020440 	.word	0x40020440
 80092e8:	40020458 	.word	0x40020458
 80092ec:	40020470 	.word	0x40020470
 80092f0:	40020488 	.word	0x40020488
 80092f4:	400204a0 	.word	0x400204a0
 80092f8:	400204b8 	.word	0x400204b8
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 020a 	bic.w	r2, r2, #10
 800930a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 8097 	beq.w	8009454 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800932e:	e091      	b.n	8009454 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009334:	f003 031f 	and.w	r3, r3, #31
 8009338:	2208      	movs	r2, #8
 800933a:	409a      	lsls	r2, r3
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	4013      	ands	r3, r2
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 8088 	beq.w	8009456 <HAL_DMA_IRQHandler+0xe0e>
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f003 0308 	and.w	r3, r3, #8
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 8082 	beq.w	8009456 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a41      	ldr	r2, [pc, #260]	; (800945c <HAL_DMA_IRQHandler+0xe14>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d04a      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a3f      	ldr	r2, [pc, #252]	; (8009460 <HAL_DMA_IRQHandler+0xe18>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d045      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a3e      	ldr	r2, [pc, #248]	; (8009464 <HAL_DMA_IRQHandler+0xe1c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d040      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a3c      	ldr	r2, [pc, #240]	; (8009468 <HAL_DMA_IRQHandler+0xe20>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d03b      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a3b      	ldr	r2, [pc, #236]	; (800946c <HAL_DMA_IRQHandler+0xe24>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d036      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a39      	ldr	r2, [pc, #228]	; (8009470 <HAL_DMA_IRQHandler+0xe28>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d031      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a38      	ldr	r2, [pc, #224]	; (8009474 <HAL_DMA_IRQHandler+0xe2c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d02c      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a36      	ldr	r2, [pc, #216]	; (8009478 <HAL_DMA_IRQHandler+0xe30>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d027      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a35      	ldr	r2, [pc, #212]	; (800947c <HAL_DMA_IRQHandler+0xe34>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d022      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a33      	ldr	r2, [pc, #204]	; (8009480 <HAL_DMA_IRQHandler+0xe38>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d01d      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a32      	ldr	r2, [pc, #200]	; (8009484 <HAL_DMA_IRQHandler+0xe3c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d018      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a30      	ldr	r2, [pc, #192]	; (8009488 <HAL_DMA_IRQHandler+0xe40>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d013      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a2f      	ldr	r2, [pc, #188]	; (800948c <HAL_DMA_IRQHandler+0xe44>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d00e      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a2d      	ldr	r2, [pc, #180]	; (8009490 <HAL_DMA_IRQHandler+0xe48>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d009      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a2c      	ldr	r2, [pc, #176]	; (8009494 <HAL_DMA_IRQHandler+0xe4c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d004      	beq.n	80093f2 <HAL_DMA_IRQHandler+0xdaa>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a2a      	ldr	r2, [pc, #168]	; (8009498 <HAL_DMA_IRQHandler+0xe50>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d108      	bne.n	8009404 <HAL_DMA_IRQHandler+0xdbc>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 021c 	bic.w	r2, r2, #28
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	e007      	b.n	8009414 <HAL_DMA_IRQHandler+0xdcc>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f022 020e 	bic.w	r2, r2, #14
 8009412:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009418:	f003 031f 	and.w	r3, r3, #31
 800941c:	2201      	movs	r2, #1
 800941e:	409a      	lsls	r2, r3
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943e:	2b00      	cmp	r3, #0
 8009440:	d009      	beq.n	8009456 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	4798      	blx	r3
 800944a:	e004      	b.n	8009456 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800944c:	bf00      	nop
 800944e:	e002      	b.n	8009456 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009450:	bf00      	nop
 8009452:	e000      	b.n	8009456 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009454:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009456:	3728      	adds	r7, #40	; 0x28
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40020010 	.word	0x40020010
 8009460:	40020028 	.word	0x40020028
 8009464:	40020040 	.word	0x40020040
 8009468:	40020058 	.word	0x40020058
 800946c:	40020070 	.word	0x40020070
 8009470:	40020088 	.word	0x40020088
 8009474:	400200a0 	.word	0x400200a0
 8009478:	400200b8 	.word	0x400200b8
 800947c:	40020410 	.word	0x40020410
 8009480:	40020428 	.word	0x40020428
 8009484:	40020440 	.word	0x40020440
 8009488:	40020458 	.word	0x40020458
 800948c:	40020470 	.word	0x40020470
 8009490:	40020488 	.word	0x40020488
 8009494:	400204a0 	.word	0x400204a0
 8009498:	400204b8 	.word	0x400204b8

0800949c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80094aa:	b2db      	uxtb	r3, r3
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a7f      	ldr	r2, [pc, #508]	; (80096ec <DMA_SetConfig+0x21c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d072      	beq.n	80095da <DMA_SetConfig+0x10a>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a7d      	ldr	r2, [pc, #500]	; (80096f0 <DMA_SetConfig+0x220>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d06d      	beq.n	80095da <DMA_SetConfig+0x10a>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a7c      	ldr	r2, [pc, #496]	; (80096f4 <DMA_SetConfig+0x224>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d068      	beq.n	80095da <DMA_SetConfig+0x10a>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a7a      	ldr	r2, [pc, #488]	; (80096f8 <DMA_SetConfig+0x228>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d063      	beq.n	80095da <DMA_SetConfig+0x10a>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a79      	ldr	r2, [pc, #484]	; (80096fc <DMA_SetConfig+0x22c>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d05e      	beq.n	80095da <DMA_SetConfig+0x10a>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a77      	ldr	r2, [pc, #476]	; (8009700 <DMA_SetConfig+0x230>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d059      	beq.n	80095da <DMA_SetConfig+0x10a>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a76      	ldr	r2, [pc, #472]	; (8009704 <DMA_SetConfig+0x234>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d054      	beq.n	80095da <DMA_SetConfig+0x10a>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a74      	ldr	r2, [pc, #464]	; (8009708 <DMA_SetConfig+0x238>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d04f      	beq.n	80095da <DMA_SetConfig+0x10a>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a73      	ldr	r2, [pc, #460]	; (800970c <DMA_SetConfig+0x23c>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d04a      	beq.n	80095da <DMA_SetConfig+0x10a>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a71      	ldr	r2, [pc, #452]	; (8009710 <DMA_SetConfig+0x240>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d045      	beq.n	80095da <DMA_SetConfig+0x10a>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a70      	ldr	r2, [pc, #448]	; (8009714 <DMA_SetConfig+0x244>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d040      	beq.n	80095da <DMA_SetConfig+0x10a>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a6e      	ldr	r2, [pc, #440]	; (8009718 <DMA_SetConfig+0x248>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d03b      	beq.n	80095da <DMA_SetConfig+0x10a>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a6d      	ldr	r2, [pc, #436]	; (800971c <DMA_SetConfig+0x24c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d036      	beq.n	80095da <DMA_SetConfig+0x10a>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a6b      	ldr	r2, [pc, #428]	; (8009720 <DMA_SetConfig+0x250>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d031      	beq.n	80095da <DMA_SetConfig+0x10a>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a6a      	ldr	r2, [pc, #424]	; (8009724 <DMA_SetConfig+0x254>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d02c      	beq.n	80095da <DMA_SetConfig+0x10a>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a68      	ldr	r2, [pc, #416]	; (8009728 <DMA_SetConfig+0x258>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d027      	beq.n	80095da <DMA_SetConfig+0x10a>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a67      	ldr	r2, [pc, #412]	; (800972c <DMA_SetConfig+0x25c>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d022      	beq.n	80095da <DMA_SetConfig+0x10a>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a65      	ldr	r2, [pc, #404]	; (8009730 <DMA_SetConfig+0x260>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d01d      	beq.n	80095da <DMA_SetConfig+0x10a>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a64      	ldr	r2, [pc, #400]	; (8009734 <DMA_SetConfig+0x264>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d018      	beq.n	80095da <DMA_SetConfig+0x10a>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a62      	ldr	r2, [pc, #392]	; (8009738 <DMA_SetConfig+0x268>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d013      	beq.n	80095da <DMA_SetConfig+0x10a>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a61      	ldr	r2, [pc, #388]	; (800973c <DMA_SetConfig+0x26c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d00e      	beq.n	80095da <DMA_SetConfig+0x10a>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a5f      	ldr	r2, [pc, #380]	; (8009740 <DMA_SetConfig+0x270>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d009      	beq.n	80095da <DMA_SetConfig+0x10a>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a5e      	ldr	r2, [pc, #376]	; (8009744 <DMA_SetConfig+0x274>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d004      	beq.n	80095da <DMA_SetConfig+0x10a>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a5c      	ldr	r2, [pc, #368]	; (8009748 <DMA_SetConfig+0x278>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d101      	bne.n	80095de <DMA_SetConfig+0x10e>
 80095da:	2301      	movs	r3, #1
 80095dc:	e000      	b.n	80095e0 <DMA_SetConfig+0x110>
 80095de:	2300      	movs	r3, #0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00d      	beq.n	8009600 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80095ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d004      	beq.n	8009600 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80095fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a39      	ldr	r2, [pc, #228]	; (80096ec <DMA_SetConfig+0x21c>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d04a      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a38      	ldr	r2, [pc, #224]	; (80096f0 <DMA_SetConfig+0x220>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d045      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a36      	ldr	r2, [pc, #216]	; (80096f4 <DMA_SetConfig+0x224>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d040      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a35      	ldr	r2, [pc, #212]	; (80096f8 <DMA_SetConfig+0x228>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d03b      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a33      	ldr	r2, [pc, #204]	; (80096fc <DMA_SetConfig+0x22c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d036      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a32      	ldr	r2, [pc, #200]	; (8009700 <DMA_SetConfig+0x230>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d031      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a30      	ldr	r2, [pc, #192]	; (8009704 <DMA_SetConfig+0x234>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d02c      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a2f      	ldr	r2, [pc, #188]	; (8009708 <DMA_SetConfig+0x238>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d027      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a2d      	ldr	r2, [pc, #180]	; (800970c <DMA_SetConfig+0x23c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d022      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a2c      	ldr	r2, [pc, #176]	; (8009710 <DMA_SetConfig+0x240>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d01d      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a2a      	ldr	r2, [pc, #168]	; (8009714 <DMA_SetConfig+0x244>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d018      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a29      	ldr	r2, [pc, #164]	; (8009718 <DMA_SetConfig+0x248>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d013      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a27      	ldr	r2, [pc, #156]	; (800971c <DMA_SetConfig+0x24c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d00e      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a26      	ldr	r2, [pc, #152]	; (8009720 <DMA_SetConfig+0x250>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d009      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a24      	ldr	r2, [pc, #144]	; (8009724 <DMA_SetConfig+0x254>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d004      	beq.n	80096a0 <DMA_SetConfig+0x1d0>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a23      	ldr	r2, [pc, #140]	; (8009728 <DMA_SetConfig+0x258>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d101      	bne.n	80096a4 <DMA_SetConfig+0x1d4>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e000      	b.n	80096a6 <DMA_SetConfig+0x1d6>
 80096a4:	2300      	movs	r3, #0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d059      	beq.n	800975e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096ae:	f003 031f 	and.w	r3, r3, #31
 80096b2:	223f      	movs	r2, #63	; 0x3f
 80096b4:	409a      	lsls	r2, r3
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80096c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	2b40      	cmp	r3, #64	; 0x40
 80096d8:	d138      	bne.n	800974c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80096ea:	e086      	b.n	80097fa <DMA_SetConfig+0x32a>
 80096ec:	40020010 	.word	0x40020010
 80096f0:	40020028 	.word	0x40020028
 80096f4:	40020040 	.word	0x40020040
 80096f8:	40020058 	.word	0x40020058
 80096fc:	40020070 	.word	0x40020070
 8009700:	40020088 	.word	0x40020088
 8009704:	400200a0 	.word	0x400200a0
 8009708:	400200b8 	.word	0x400200b8
 800970c:	40020410 	.word	0x40020410
 8009710:	40020428 	.word	0x40020428
 8009714:	40020440 	.word	0x40020440
 8009718:	40020458 	.word	0x40020458
 800971c:	40020470 	.word	0x40020470
 8009720:	40020488 	.word	0x40020488
 8009724:	400204a0 	.word	0x400204a0
 8009728:	400204b8 	.word	0x400204b8
 800972c:	58025408 	.word	0x58025408
 8009730:	5802541c 	.word	0x5802541c
 8009734:	58025430 	.word	0x58025430
 8009738:	58025444 	.word	0x58025444
 800973c:	58025458 	.word	0x58025458
 8009740:	5802546c 	.word	0x5802546c
 8009744:	58025480 	.word	0x58025480
 8009748:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	60da      	str	r2, [r3, #12]
}
 800975c:	e04d      	b.n	80097fa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a29      	ldr	r2, [pc, #164]	; (8009808 <DMA_SetConfig+0x338>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d022      	beq.n	80097ae <DMA_SetConfig+0x2de>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a27      	ldr	r2, [pc, #156]	; (800980c <DMA_SetConfig+0x33c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d01d      	beq.n	80097ae <DMA_SetConfig+0x2de>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a26      	ldr	r2, [pc, #152]	; (8009810 <DMA_SetConfig+0x340>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d018      	beq.n	80097ae <DMA_SetConfig+0x2de>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a24      	ldr	r2, [pc, #144]	; (8009814 <DMA_SetConfig+0x344>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d013      	beq.n	80097ae <DMA_SetConfig+0x2de>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a23      	ldr	r2, [pc, #140]	; (8009818 <DMA_SetConfig+0x348>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d00e      	beq.n	80097ae <DMA_SetConfig+0x2de>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a21      	ldr	r2, [pc, #132]	; (800981c <DMA_SetConfig+0x34c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d009      	beq.n	80097ae <DMA_SetConfig+0x2de>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a20      	ldr	r2, [pc, #128]	; (8009820 <DMA_SetConfig+0x350>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d004      	beq.n	80097ae <DMA_SetConfig+0x2de>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a1e      	ldr	r2, [pc, #120]	; (8009824 <DMA_SetConfig+0x354>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d101      	bne.n	80097b2 <DMA_SetConfig+0x2e2>
 80097ae:	2301      	movs	r3, #1
 80097b0:	e000      	b.n	80097b4 <DMA_SetConfig+0x2e4>
 80097b2:	2300      	movs	r3, #0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d020      	beq.n	80097fa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097bc:	f003 031f 	and.w	r3, r3, #31
 80097c0:	2201      	movs	r2, #1
 80097c2:	409a      	lsls	r2, r3
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	2b40      	cmp	r3, #64	; 0x40
 80097d6:	d108      	bne.n	80097ea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	60da      	str	r2, [r3, #12]
}
 80097e8:	e007      	b.n	80097fa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	60da      	str	r2, [r3, #12]
}
 80097fa:	bf00      	nop
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	58025408 	.word	0x58025408
 800980c:	5802541c 	.word	0x5802541c
 8009810:	58025430 	.word	0x58025430
 8009814:	58025444 	.word	0x58025444
 8009818:	58025458 	.word	0x58025458
 800981c:	5802546c 	.word	0x5802546c
 8009820:	58025480 	.word	0x58025480
 8009824:	58025494 	.word	0x58025494

08009828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a42      	ldr	r2, [pc, #264]	; (8009940 <DMA_CalcBaseAndBitshift+0x118>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d04a      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a41      	ldr	r2, [pc, #260]	; (8009944 <DMA_CalcBaseAndBitshift+0x11c>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d045      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a3f      	ldr	r2, [pc, #252]	; (8009948 <DMA_CalcBaseAndBitshift+0x120>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d040      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a3e      	ldr	r2, [pc, #248]	; (800994c <DMA_CalcBaseAndBitshift+0x124>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d03b      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a3c      	ldr	r2, [pc, #240]	; (8009950 <DMA_CalcBaseAndBitshift+0x128>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d036      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a3b      	ldr	r2, [pc, #236]	; (8009954 <DMA_CalcBaseAndBitshift+0x12c>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d031      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a39      	ldr	r2, [pc, #228]	; (8009958 <DMA_CalcBaseAndBitshift+0x130>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d02c      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a38      	ldr	r2, [pc, #224]	; (800995c <DMA_CalcBaseAndBitshift+0x134>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d027      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a36      	ldr	r2, [pc, #216]	; (8009960 <DMA_CalcBaseAndBitshift+0x138>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d022      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a35      	ldr	r2, [pc, #212]	; (8009964 <DMA_CalcBaseAndBitshift+0x13c>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d01d      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a33      	ldr	r2, [pc, #204]	; (8009968 <DMA_CalcBaseAndBitshift+0x140>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d018      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a32      	ldr	r2, [pc, #200]	; (800996c <DMA_CalcBaseAndBitshift+0x144>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d013      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a30      	ldr	r2, [pc, #192]	; (8009970 <DMA_CalcBaseAndBitshift+0x148>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00e      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a2f      	ldr	r2, [pc, #188]	; (8009974 <DMA_CalcBaseAndBitshift+0x14c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d009      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a2d      	ldr	r2, [pc, #180]	; (8009978 <DMA_CalcBaseAndBitshift+0x150>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d004      	beq.n	80098d0 <DMA_CalcBaseAndBitshift+0xa8>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a2c      	ldr	r2, [pc, #176]	; (800997c <DMA_CalcBaseAndBitshift+0x154>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d101      	bne.n	80098d4 <DMA_CalcBaseAndBitshift+0xac>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e000      	b.n	80098d6 <DMA_CalcBaseAndBitshift+0xae>
 80098d4:	2300      	movs	r3, #0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d024      	beq.n	8009924 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	3b10      	subs	r3, #16
 80098e2:	4a27      	ldr	r2, [pc, #156]	; (8009980 <DMA_CalcBaseAndBitshift+0x158>)
 80098e4:	fba2 2303 	umull	r2, r3, r2, r3
 80098e8:	091b      	lsrs	r3, r3, #4
 80098ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	4a24      	ldr	r2, [pc, #144]	; (8009984 <DMA_CalcBaseAndBitshift+0x15c>)
 80098f4:	5cd3      	ldrb	r3, [r2, r3]
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d908      	bls.n	8009914 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	4b1f      	ldr	r3, [pc, #124]	; (8009988 <DMA_CalcBaseAndBitshift+0x160>)
 800990a:	4013      	ands	r3, r2
 800990c:	1d1a      	adds	r2, r3, #4
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	659a      	str	r2, [r3, #88]	; 0x58
 8009912:	e00d      	b.n	8009930 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
 800991a:	4b1b      	ldr	r3, [pc, #108]	; (8009988 <DMA_CalcBaseAndBitshift+0x160>)
 800991c:	4013      	ands	r3, r2
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	6593      	str	r3, [r2, #88]	; 0x58
 8009922:	e005      	b.n	8009930 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	40020010 	.word	0x40020010
 8009944:	40020028 	.word	0x40020028
 8009948:	40020040 	.word	0x40020040
 800994c:	40020058 	.word	0x40020058
 8009950:	40020070 	.word	0x40020070
 8009954:	40020088 	.word	0x40020088
 8009958:	400200a0 	.word	0x400200a0
 800995c:	400200b8 	.word	0x400200b8
 8009960:	40020410 	.word	0x40020410
 8009964:	40020428 	.word	0x40020428
 8009968:	40020440 	.word	0x40020440
 800996c:	40020458 	.word	0x40020458
 8009970:	40020470 	.word	0x40020470
 8009974:	40020488 	.word	0x40020488
 8009978:	400204a0 	.word	0x400204a0
 800997c:	400204b8 	.word	0x400204b8
 8009980:	aaaaaaab 	.word	0xaaaaaaab
 8009984:	0801a184 	.word	0x0801a184
 8009988:	fffffc00 	.word	0xfffffc00

0800998c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d120      	bne.n	80099e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d858      	bhi.n	8009a5a <DMA_CheckFifoParam+0xce>
 80099a8:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <DMA_CheckFifoParam+0x24>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099c1 	.word	0x080099c1
 80099b4:	080099d3 	.word	0x080099d3
 80099b8:	080099c1 	.word	0x080099c1
 80099bc:	08009a5b 	.word	0x08009a5b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d048      	beq.n	8009a5e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80099d0:	e045      	b.n	8009a5e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80099da:	d142      	bne.n	8009a62 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80099e0:	e03f      	b.n	8009a62 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099ea:	d123      	bne.n	8009a34 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d838      	bhi.n	8009a66 <DMA_CheckFifoParam+0xda>
 80099f4:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <DMA_CheckFifoParam+0x70>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009a13 	.word	0x08009a13
 8009a04:	08009a0d 	.word	0x08009a0d
 8009a08:	08009a25 	.word	0x08009a25
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	73fb      	strb	r3, [r7, #15]
        break;
 8009a10:	e030      	b.n	8009a74 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d025      	beq.n	8009a6a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a22:	e022      	b.n	8009a6a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009a2c:	d11f      	bne.n	8009a6e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a32:	e01c      	b.n	8009a6e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d902      	bls.n	8009a42 <DMA_CheckFifoParam+0xb6>
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d003      	beq.n	8009a48 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009a40:	e018      	b.n	8009a74 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	73fb      	strb	r3, [r7, #15]
        break;
 8009a46:	e015      	b.n	8009a74 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00e      	beq.n	8009a72 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	73fb      	strb	r3, [r7, #15]
    break;
 8009a58:	e00b      	b.n	8009a72 <DMA_CheckFifoParam+0xe6>
        break;
 8009a5a:	bf00      	nop
 8009a5c:	e00a      	b.n	8009a74 <DMA_CheckFifoParam+0xe8>
        break;
 8009a5e:	bf00      	nop
 8009a60:	e008      	b.n	8009a74 <DMA_CheckFifoParam+0xe8>
        break;
 8009a62:	bf00      	nop
 8009a64:	e006      	b.n	8009a74 <DMA_CheckFifoParam+0xe8>
        break;
 8009a66:	bf00      	nop
 8009a68:	e004      	b.n	8009a74 <DMA_CheckFifoParam+0xe8>
        break;
 8009a6a:	bf00      	nop
 8009a6c:	e002      	b.n	8009a74 <DMA_CheckFifoParam+0xe8>
        break;
 8009a6e:	bf00      	nop
 8009a70:	e000      	b.n	8009a74 <DMA_CheckFifoParam+0xe8>
    break;
 8009a72:	bf00      	nop
    }
  }

  return status;
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop

08009a84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a38      	ldr	r2, [pc, #224]	; (8009b78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d022      	beq.n	8009ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a36      	ldr	r2, [pc, #216]	; (8009b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d01d      	beq.n	8009ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a35      	ldr	r2, [pc, #212]	; (8009b80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d018      	beq.n	8009ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a33      	ldr	r2, [pc, #204]	; (8009b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d013      	beq.n	8009ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a32      	ldr	r2, [pc, #200]	; (8009b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d00e      	beq.n	8009ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a30      	ldr	r2, [pc, #192]	; (8009b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d009      	beq.n	8009ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a2f      	ldr	r2, [pc, #188]	; (8009b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d004      	beq.n	8009ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a2d      	ldr	r2, [pc, #180]	; (8009b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d101      	bne.n	8009ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e000      	b.n	8009ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01a      	beq.n	8009b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	3b08      	subs	r3, #8
 8009af4:	4a28      	ldr	r2, [pc, #160]	; (8009b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009af6:	fba2 2303 	umull	r2, r3, r2, r3
 8009afa:	091b      	lsrs	r3, r3, #4
 8009afc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4b26      	ldr	r3, [pc, #152]	; (8009b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	461a      	mov	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a24      	ldr	r2, [pc, #144]	; (8009ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009b10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f003 031f 	and.w	r3, r3, #31
 8009b18:	2201      	movs	r2, #1
 8009b1a:	409a      	lsls	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009b20:	e024      	b.n	8009b6c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	3b10      	subs	r3, #16
 8009b2a:	4a1e      	ldr	r2, [pc, #120]	; (8009ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b30:	091b      	lsrs	r3, r3, #4
 8009b32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	4a1c      	ldr	r2, [pc, #112]	; (8009ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d806      	bhi.n	8009b4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	4a1b      	ldr	r2, [pc, #108]	; (8009bac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d902      	bls.n	8009b4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3308      	adds	r3, #8
 8009b48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4b18      	ldr	r3, [pc, #96]	; (8009bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009b4e:	4413      	add	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	461a      	mov	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a16      	ldr	r2, [pc, #88]	; (8009bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009b5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f003 031f 	and.w	r3, r3, #31
 8009b64:	2201      	movs	r2, #1
 8009b66:	409a      	lsls	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009b6c:	bf00      	nop
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	58025408 	.word	0x58025408
 8009b7c:	5802541c 	.word	0x5802541c
 8009b80:	58025430 	.word	0x58025430
 8009b84:	58025444 	.word	0x58025444
 8009b88:	58025458 	.word	0x58025458
 8009b8c:	5802546c 	.word	0x5802546c
 8009b90:	58025480 	.word	0x58025480
 8009b94:	58025494 	.word	0x58025494
 8009b98:	cccccccd 	.word	0xcccccccd
 8009b9c:	16009600 	.word	0x16009600
 8009ba0:	58025880 	.word	0x58025880
 8009ba4:	aaaaaaab 	.word	0xaaaaaaab
 8009ba8:	400204b8 	.word	0x400204b8
 8009bac:	4002040f 	.word	0x4002040f
 8009bb0:	10008200 	.word	0x10008200
 8009bb4:	40020880 	.word	0x40020880

08009bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d04a      	beq.n	8009c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d847      	bhi.n	8009c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a25      	ldr	r2, [pc, #148]	; (8009c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d022      	beq.n	8009c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a24      	ldr	r2, [pc, #144]	; (8009c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d01d      	beq.n	8009c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a22      	ldr	r2, [pc, #136]	; (8009c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d018      	beq.n	8009c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a21      	ldr	r2, [pc, #132]	; (8009c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d013      	beq.n	8009c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a1f      	ldr	r2, [pc, #124]	; (8009c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00e      	beq.n	8009c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a1e      	ldr	r2, [pc, #120]	; (8009c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d009      	beq.n	8009c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a1c      	ldr	r2, [pc, #112]	; (8009c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d004      	beq.n	8009c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a1b      	ldr	r2, [pc, #108]	; (8009c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d101      	bne.n	8009c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009c24:	2301      	movs	r3, #1
 8009c26:	e000      	b.n	8009c2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00a      	beq.n	8009c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	4b17      	ldr	r3, [pc, #92]	; (8009c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	461a      	mov	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a15      	ldr	r2, [pc, #84]	; (8009c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009c40:	671a      	str	r2, [r3, #112]	; 0x70
 8009c42:	e009      	b.n	8009c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	4b14      	ldr	r3, [pc, #80]	; (8009c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a11      	ldr	r2, [pc, #68]	; (8009c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009c56:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	409a      	lsls	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009c64:	bf00      	nop
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	58025408 	.word	0x58025408
 8009c74:	5802541c 	.word	0x5802541c
 8009c78:	58025430 	.word	0x58025430
 8009c7c:	58025444 	.word	0x58025444
 8009c80:	58025458 	.word	0x58025458
 8009c84:	5802546c 	.word	0x5802546c
 8009c88:	58025480 	.word	0x58025480
 8009c8c:	58025494 	.word	0x58025494
 8009c90:	1600963f 	.word	0x1600963f
 8009c94:	58025940 	.word	0x58025940
 8009c98:	1000823f 	.word	0x1000823f
 8009c9c:	40020940 	.word	0x40020940

08009ca0 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08a      	sub	sp, #40	; 0x28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8009cb4:	2308      	movs	r3, #8
 8009cb6:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009cb8:	4b40      	ldr	r3, [pc, #256]	; (8009dbc <HAL_FLASH_Program+0x11c>)
 8009cba:	7d1b      	ldrb	r3, [r3, #20]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d101      	bne.n	8009cc4 <HAL_FLASH_Program+0x24>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	e076      	b.n	8009db2 <HAL_FLASH_Program+0x112>
 8009cc4:	4b3d      	ldr	r3, [pc, #244]	; (8009dbc <HAL_FLASH_Program+0x11c>)
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cd0:	d306      	bcc.n	8009ce0 <HAL_FLASH_Program+0x40>
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8009cd8:	d202      	bcs.n	8009ce0 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8009cde:	e00c      	b.n	8009cfa <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8009ce6:	d306      	bcc.n	8009cf6 <HAL_FLASH_Program+0x56>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8009cee:	d202      	bcs.n	8009cf6 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	61bb      	str	r3, [r7, #24]
 8009cf4:	e001      	b.n	8009cfa <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e05b      	b.n	8009db2 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009cfa:	4b30      	ldr	r3, [pc, #192]	; (8009dbc <HAL_FLASH_Program+0x11c>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009d00:	69b9      	ldr	r1, [r7, #24]
 8009d02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009d06:	f000 f897 	bl	8009e38 <FLASH_WaitForLastOperation>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8009d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d147      	bne.n	8009da8 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d106      	bne.n	8009d2c <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8009d1e:	4b28      	ldr	r3, [pc, #160]	; (8009dc0 <HAL_FLASH_Program+0x120>)
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	4a27      	ldr	r2, [pc, #156]	; (8009dc0 <HAL_FLASH_Program+0x120>)
 8009d24:	f043 0302 	orr.w	r3, r3, #2
 8009d28:	60d3      	str	r3, [r2, #12]
 8009d2a:	e007      	b.n	8009d3c <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8009d2c:	4b24      	ldr	r3, [pc, #144]	; (8009dc0 <HAL_FLASH_Program+0x120>)
 8009d2e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009d32:	4a23      	ldr	r2, [pc, #140]	; (8009dc0 <HAL_FLASH_Program+0x120>)
 8009d34:	f043 0302 	orr.w	r3, r3, #2
 8009d38:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8009d3c:	f3bf 8f6f 	isb	sy
}
 8009d40:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009d42:	f3bf 8f4f 	dsb	sy
}
 8009d46:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	3304      	adds	r3, #4
 8009d54:	623b      	str	r3, [r7, #32]
        src_addr++;
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	3304      	adds	r3, #4
 8009d5a:	61fb      	str	r3, [r7, #28]
        row_index--;
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1ef      	bne.n	8009d48 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8009d68:	f3bf 8f6f 	isb	sy
}
 8009d6c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009d6e:	f3bf 8f4f 	dsb	sy
}
 8009d72:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009d74:	69b9      	ldr	r1, [r7, #24]
 8009d76:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009d7a:	f000 f85d 	bl	8009e38 <FLASH_WaitForLastOperation>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d106      	bne.n	8009d98 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8009d8a:	4b0d      	ldr	r3, [pc, #52]	; (8009dc0 <HAL_FLASH_Program+0x120>)
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	4a0c      	ldr	r2, [pc, #48]	; (8009dc0 <HAL_FLASH_Program+0x120>)
 8009d90:	f023 0302 	bic.w	r3, r3, #2
 8009d94:	60d3      	str	r3, [r2, #12]
 8009d96:	e007      	b.n	8009da8 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8009d98:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <HAL_FLASH_Program+0x120>)
 8009d9a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009d9e:	4a08      	ldr	r2, [pc, #32]	; (8009dc0 <HAL_FLASH_Program+0x120>)
 8009da0:	f023 0302 	bic.w	r3, r3, #2
 8009da4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009da8:	4b04      	ldr	r3, [pc, #16]	; (8009dbc <HAL_FLASH_Program+0x11c>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	751a      	strb	r2, [r3, #20]

  return status;
 8009dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3728      	adds	r7, #40	; 0x28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	24002000 	.word	0x24002000
 8009dc0:	52002000 	.word	0x52002000

08009dc4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009dc8:	4b18      	ldr	r3, [pc, #96]	; (8009e2c <HAL_FLASH_Unlock+0x68>)
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00d      	beq.n	8009df0 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8009dd4:	4b15      	ldr	r3, [pc, #84]	; (8009e2c <HAL_FLASH_Unlock+0x68>)
 8009dd6:	4a16      	ldr	r2, [pc, #88]	; (8009e30 <HAL_FLASH_Unlock+0x6c>)
 8009dd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8009dda:	4b14      	ldr	r3, [pc, #80]	; (8009e2c <HAL_FLASH_Unlock+0x68>)
 8009ddc:	4a15      	ldr	r2, [pc, #84]	; (8009e34 <HAL_FLASH_Unlock+0x70>)
 8009dde:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009de0:	4b12      	ldr	r3, [pc, #72]	; (8009e2c <HAL_FLASH_Unlock+0x68>)
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e018      	b.n	8009e22 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8009df0:	4b0e      	ldr	r3, [pc, #56]	; (8009e2c <HAL_FLASH_Unlock+0x68>)
 8009df2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d010      	beq.n	8009e20 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8009dfe:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <HAL_FLASH_Unlock+0x68>)
 8009e00:	4a0b      	ldr	r2, [pc, #44]	; (8009e30 <HAL_FLASH_Unlock+0x6c>)
 8009e02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8009e06:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <HAL_FLASH_Unlock+0x68>)
 8009e08:	4a0a      	ldr	r2, [pc, #40]	; (8009e34 <HAL_FLASH_Unlock+0x70>)
 8009e0a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8009e0e:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <HAL_FLASH_Unlock+0x68>)
 8009e10:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009e14:	f003 0301 	and.w	r3, r3, #1
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e000      	b.n	8009e22 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	52002000 	.word	0x52002000
 8009e30:	45670123 	.word	0x45670123
 8009e34:	cdef89ab 	.word	0xcdef89ab

08009e38 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8009e42:	2304      	movs	r3, #4
 8009e44:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8009e4a:	f7fa ffab 	bl	8004da4 <HAL_GetTick>
 8009e4e:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d113      	bne.n	8009e7e <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8009e56:	4b41      	ldr	r3, [pc, #260]	; (8009f5c <FLASH_WaitForLastOperation+0x124>)
 8009e58:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009e5a:	e010      	b.n	8009e7e <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e62:	d00c      	beq.n	8009e7e <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009e64:	f7fa ff9e 	bl	8004da4 <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d302      	bcc.n	8009e7a <FLASH_WaitForLastOperation+0x42>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e06a      	b.n	8009f54 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	4b37      	ldr	r3, [pc, #220]	; (8009f60 <FLASH_WaitForLastOperation+0x128>)
 8009e82:	4013      	ands	r3, r2
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d10a      	bne.n	8009ea0 <FLASH_WaitForLastOperation+0x68>
 8009e8a:	4b36      	ldr	r3, [pc, #216]	; (8009f64 <FLASH_WaitForLastOperation+0x12c>)
 8009e8c:	691a      	ldr	r2, [r3, #16]
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	4013      	ands	r3, r2
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	bf0c      	ite	eq
 8009e98:	2301      	moveq	r3, #1
 8009e9a:	2300      	movne	r3, #0
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	e00c      	b.n	8009eba <FLASH_WaitForLastOperation+0x82>
 8009ea0:	4b30      	ldr	r3, [pc, #192]	; (8009f64 <FLASH_WaitForLastOperation+0x12c>)
 8009ea2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009ea6:	43da      	mvns	r2, r3
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	bf0c      	ite	eq
 8009eb4:	2301      	moveq	r3, #1
 8009eb6:	2300      	movne	r3, #0
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1ce      	bne.n	8009e5c <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d105      	bne.n	8009ed0 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8009ec4:	4b27      	ldr	r3, [pc, #156]	; (8009f64 <FLASH_WaitForLastOperation+0x12c>)
 8009ec6:	691a      	ldr	r2, [r3, #16]
 8009ec8:	4b27      	ldr	r3, [pc, #156]	; (8009f68 <FLASH_WaitForLastOperation+0x130>)
 8009eca:	4013      	ands	r3, r2
 8009ecc:	613b      	str	r3, [r7, #16]
 8009ece:	e007      	b.n	8009ee0 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8009ed0:	4b24      	ldr	r3, [pc, #144]	; (8009f64 <FLASH_WaitForLastOperation+0x12c>)
 8009ed2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8009ed6:	4b24      	ldr	r3, [pc, #144]	; (8009f68 <FLASH_WaitForLastOperation+0x130>)
 8009ed8:	4013      	ands	r3, r2
 8009eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ede:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d017      	beq.n	8009f1a <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8009eea:	4b20      	ldr	r3, [pc, #128]	; (8009f6c <FLASH_WaitForLastOperation+0x134>)
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	4a1e      	ldr	r2, [pc, #120]	; (8009f6c <FLASH_WaitForLastOperation+0x134>)
 8009ef4:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	4b19      	ldr	r3, [pc, #100]	; (8009f60 <FLASH_WaitForLastOperation+0x128>)
 8009efa:	4013      	ands	r3, r2
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d103      	bne.n	8009f0a <FLASH_WaitForLastOperation+0xd2>
 8009f02:	4a18      	ldr	r2, [pc, #96]	; (8009f64 <FLASH_WaitForLastOperation+0x12c>)
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	6153      	str	r3, [r2, #20]
 8009f08:	e005      	b.n	8009f16 <FLASH_WaitForLastOperation+0xde>
 8009f0a:	4a16      	ldr	r2, [pc, #88]	; (8009f64 <FLASH_WaitForLastOperation+0x12c>)
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f12:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e01c      	b.n	8009f54 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d10b      	bne.n	8009f38 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8009f20:	4b10      	ldr	r3, [pc, #64]	; (8009f64 <FLASH_WaitForLastOperation+0x12c>)
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f2c:	d111      	bne.n	8009f52 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8009f2e:	4b0d      	ldr	r3, [pc, #52]	; (8009f64 <FLASH_WaitForLastOperation+0x12c>)
 8009f30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009f34:	615a      	str	r2, [r3, #20]
 8009f36:	e00c      	b.n	8009f52 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8009f38:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <FLASH_WaitForLastOperation+0x12c>)
 8009f3a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f46:	d104      	bne.n	8009f52 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8009f48:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <FLASH_WaitForLastOperation+0x12c>)
 8009f4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009f4e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	80000004 	.word	0x80000004
 8009f60:	1fef000f 	.word	0x1fef000f
 8009f64:	52002000 	.word	0x52002000
 8009f68:	17ee0000 	.word	0x17ee0000
 8009f6c:	24002000 	.word	0x24002000

08009f70 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f7e:	4b5e      	ldr	r3, [pc, #376]	; (800a0f8 <HAL_FLASHEx_Erase+0x188>)
 8009f80:	7d1b      	ldrb	r3, [r3, #20]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d101      	bne.n	8009f8a <HAL_FLASHEx_Erase+0x1a>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e0b2      	b.n	800a0f0 <HAL_FLASHEx_Erase+0x180>
 8009f8a:	4b5b      	ldr	r3, [pc, #364]	; (800a0f8 <HAL_FLASHEx_Erase+0x188>)
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009f90:	4b59      	ldr	r3, [pc, #356]	; (800a0f8 <HAL_FLASHEx_Erase+0x188>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d009      	beq.n	8009fb6 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009fa8:	f7ff ff46 	bl	8009e38 <FLASH_WaitForLastOperation>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d009      	beq.n	8009fd6 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8009fc2:	2102      	movs	r1, #2
 8009fc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009fc8:	f7ff ff36 	bl	8009e38 <FLASH_WaitForLastOperation>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f040 8085 	bne.w	800a0e8 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d136      	bne.n	800a054 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	691a      	ldr	r2, [r3, #16]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	f000 f887 	bl	800a104 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00f      	beq.n	800a022 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a002:	2101      	movs	r1, #1
 800a004:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a008:	f7ff ff16 	bl	8009e38 <FLASH_WaitForLastOperation>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a016:	4b39      	ldr	r3, [pc, #228]	; (800a0fc <HAL_FLASHEx_Erase+0x18c>)
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	4a38      	ldr	r2, [pc, #224]	; (800a0fc <HAL_FLASHEx_Erase+0x18c>)
 800a01c:	f023 0308 	bic.w	r3, r3, #8
 800a020:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f003 0302 	and.w	r3, r3, #2
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d05c      	beq.n	800a0e8 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800a02e:	2102      	movs	r1, #2
 800a030:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a034:	f7ff ff00 	bl	8009e38 <FLASH_WaitForLastOperation>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800a042:	4b2e      	ldr	r3, [pc, #184]	; (800a0fc <HAL_FLASHEx_Erase+0x18c>)
 800a044:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a048:	4a2c      	ldr	r2, [pc, #176]	; (800a0fc <HAL_FLASHEx_Erase+0x18c>)
 800a04a:	f023 0308 	bic.w	r3, r3, #8
 800a04e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800a052:	e049      	b.n	800a0e8 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a05a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	60bb      	str	r3, [r7, #8]
 800a062:	e039      	b.n	800a0d8 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6859      	ldr	r1, [r3, #4]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	461a      	mov	r2, r3
 800a06e:	68b8      	ldr	r0, [r7, #8]
 800a070:	f000 f8b2 	bl	800a1d8 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00c      	beq.n	800a09a <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a080:	2101      	movs	r1, #1
 800a082:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a086:	f7ff fed7 	bl	8009e38 <FLASH_WaitForLastOperation>
 800a08a:	4603      	mov	r3, r0
 800a08c:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a08e:	4b1b      	ldr	r3, [pc, #108]	; (800a0fc <HAL_FLASHEx_Erase+0x18c>)
 800a090:	68da      	ldr	r2, [r3, #12]
 800a092:	491a      	ldr	r1, [pc, #104]	; (800a0fc <HAL_FLASHEx_Erase+0x18c>)
 800a094:	4b1a      	ldr	r3, [pc, #104]	; (800a100 <HAL_FLASHEx_Erase+0x190>)
 800a096:	4013      	ands	r3, r2
 800a098:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f003 0302 	and.w	r3, r3, #2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00e      	beq.n	800a0c4 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800a0a6:	2102      	movs	r1, #2
 800a0a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a0ac:	f7ff fec4 	bl	8009e38 <FLASH_WaitForLastOperation>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a0b4:	4b11      	ldr	r3, [pc, #68]	; (800a0fc <HAL_FLASHEx_Erase+0x18c>)
 800a0b6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a0ba:	4910      	ldr	r1, [pc, #64]	; (800a0fc <HAL_FLASHEx_Erase+0x18c>)
 800a0bc:	4b10      	ldr	r3, [pc, #64]	; (800a100 <HAL_FLASHEx_Erase+0x190>)
 800a0be:	4013      	ands	r3, r2
 800a0c0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	601a      	str	r2, [r3, #0]
          break;
 800a0d0:	e00a      	b.n	800a0e8 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	60bb      	str	r3, [r7, #8]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d3bd      	bcc.n	800a064 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a0e8:	4b03      	ldr	r3, [pc, #12]	; (800a0f8 <HAL_FLASHEx_Erase+0x188>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	751a      	strb	r2, [r3, #20]

  return status;
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	24002000 	.word	0x24002000
 800a0fc:	52002000 	.word	0x52002000
 800a100:	fffff8fb 	.word	0xfffff8fb

0800a104 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	f003 0303 	and.w	r3, r3, #3
 800a114:	2b03      	cmp	r3, #3
 800a116:	d122      	bne.n	800a15e <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a118:	4b2e      	ldr	r3, [pc, #184]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	4a2d      	ldr	r2, [pc, #180]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a11e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a122:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800a124:	4b2b      	ldr	r3, [pc, #172]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a126:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a12a:	4a2a      	ldr	r2, [pc, #168]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a12c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a130:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800a134:	4b27      	ldr	r3, [pc, #156]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	4926      	ldr	r1, [pc, #152]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800a140:	4b24      	ldr	r3, [pc, #144]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a142:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a146:	4923      	ldr	r1, [pc, #140]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800a150:	4b20      	ldr	r3, [pc, #128]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	4a1f      	ldr	r2, [pc, #124]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a156:	f043 0310 	orr.w	r3, r3, #16
 800a15a:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a15c:	e033      	b.n	800a1c6 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	f003 0301 	and.w	r3, r3, #1
 800a164:	2b00      	cmp	r3, #0
 800a166:	d011      	beq.n	800a18c <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a168:	4b1a      	ldr	r3, [pc, #104]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	4a19      	ldr	r2, [pc, #100]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a16e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a172:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a174:	4b17      	ldr	r3, [pc, #92]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a176:	68da      	ldr	r2, [r3, #12]
 800a178:	4916      	ldr	r1, [pc, #88]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a180:	4b14      	ldr	r3, [pc, #80]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	4a13      	ldr	r2, [pc, #76]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a186:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a18a:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	f003 0302 	and.w	r3, r3, #2
 800a192:	2b00      	cmp	r3, #0
 800a194:	d017      	beq.n	800a1c6 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800a196:	4b0f      	ldr	r3, [pc, #60]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a198:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a19c:	4a0d      	ldr	r2, [pc, #52]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a19e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a1a2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800a1a6:	4b0b      	ldr	r3, [pc, #44]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a1a8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a1ac:	4909      	ldr	r1, [pc, #36]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800a1b6:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a1b8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a1bc:	4a05      	ldr	r2, [pc, #20]	; (800a1d4 <FLASH_MassErase+0xd0>)
 800a1be:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a1c2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	52002000 	.word	0x52002000

0800a1d8 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f003 0301 	and.w	r3, r3, #1
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d010      	beq.n	800a210 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a1ee:	4b18      	ldr	r3, [pc, #96]	; (800a250 <FLASH_Erase_Sector+0x78>)
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	4a17      	ldr	r2, [pc, #92]	; (800a250 <FLASH_Erase_Sector+0x78>)
 800a1f4:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a1f8:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a1fa:	4b15      	ldr	r3, [pc, #84]	; (800a250 <FLASH_Erase_Sector+0x78>)
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	0219      	lsls	r1, r3, #8
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	430b      	orrs	r3, r1
 800a206:	4313      	orrs	r3, r2
 800a208:	4a11      	ldr	r2, [pc, #68]	; (800a250 <FLASH_Erase_Sector+0x78>)
 800a20a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a20e:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	f003 0302 	and.w	r3, r3, #2
 800a216:	2b00      	cmp	r3, #0
 800a218:	d014      	beq.n	800a244 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a21a:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <FLASH_Erase_Sector+0x78>)
 800a21c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a220:	4a0b      	ldr	r2, [pc, #44]	; (800a250 <FLASH_Erase_Sector+0x78>)
 800a222:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a226:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a22a:	4b09      	ldr	r3, [pc, #36]	; (800a250 <FLASH_Erase_Sector+0x78>)
 800a22c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	0219      	lsls	r1, r3, #8
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	430b      	orrs	r3, r1
 800a238:	4313      	orrs	r3, r2
 800a23a:	4a05      	ldr	r2, [pc, #20]	; (800a250 <FLASH_Erase_Sector+0x78>)
 800a23c:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a240:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a244:	bf00      	nop
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	52002000 	.word	0x52002000

0800a254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a254:	b480      	push	{r7}
 800a256:	b089      	sub	sp, #36	; 0x24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a25e:	2300      	movs	r3, #0
 800a260:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a262:	4b89      	ldr	r3, [pc, #548]	; (800a488 <HAL_GPIO_Init+0x234>)
 800a264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a266:	e194      	b.n	800a592 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	2101      	movs	r1, #1
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	fa01 f303 	lsl.w	r3, r1, r3
 800a274:	4013      	ands	r3, r2
 800a276:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 8186 	beq.w	800a58c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f003 0303 	and.w	r3, r3, #3
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d005      	beq.n	800a298 <HAL_GPIO_Init+0x44>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f003 0303 	and.w	r3, r3, #3
 800a294:	2b02      	cmp	r3, #2
 800a296:	d130      	bne.n	800a2fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	005b      	lsls	r3, r3, #1
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a8:	43db      	mvns	r3, r3
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	68da      	ldr	r2, [r3, #12]
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2bc:	69ba      	ldr	r2, [r7, #24]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d6:	43db      	mvns	r3, r3
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	091b      	lsrs	r3, r3, #4
 800a2e4:	f003 0201 	and.w	r2, r3, #1
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ee:	69ba      	ldr	r2, [r7, #24]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	f003 0303 	and.w	r3, r3, #3
 800a302:	2b03      	cmp	r3, #3
 800a304:	d017      	beq.n	800a336 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	2203      	movs	r2, #3
 800a312:	fa02 f303 	lsl.w	r3, r2, r3
 800a316:	43db      	mvns	r3, r3
 800a318:	69ba      	ldr	r2, [r7, #24]
 800a31a:	4013      	ands	r3, r2
 800a31c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	fa02 f303 	lsl.w	r3, r2, r3
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	69ba      	ldr	r2, [r7, #24]
 800a334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f003 0303 	and.w	r3, r3, #3
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d123      	bne.n	800a38a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	08da      	lsrs	r2, r3, #3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	3208      	adds	r2, #8
 800a34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a34e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	220f      	movs	r2, #15
 800a35a:	fa02 f303 	lsl.w	r3, r2, r3
 800a35e:	43db      	mvns	r3, r3
 800a360:	69ba      	ldr	r2, [r7, #24]
 800a362:	4013      	ands	r3, r2
 800a364:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	691a      	ldr	r2, [r3, #16]
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	fa02 f303 	lsl.w	r3, r2, r3
 800a376:	69ba      	ldr	r2, [r7, #24]
 800a378:	4313      	orrs	r3, r2
 800a37a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	08da      	lsrs	r2, r3, #3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3208      	adds	r2, #8
 800a384:	69b9      	ldr	r1, [r7, #24]
 800a386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	2203      	movs	r2, #3
 800a396:	fa02 f303 	lsl.w	r3, r2, r3
 800a39a:	43db      	mvns	r3, r3
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	f003 0203 	and.w	r2, r3, #3
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	005b      	lsls	r3, r3, #1
 800a3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	69ba      	ldr	r2, [r7, #24]
 800a3bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 80e0 	beq.w	800a58c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3cc:	4b2f      	ldr	r3, [pc, #188]	; (800a48c <HAL_GPIO_Init+0x238>)
 800a3ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3d2:	4a2e      	ldr	r2, [pc, #184]	; (800a48c <HAL_GPIO_Init+0x238>)
 800a3d4:	f043 0302 	orr.w	r3, r3, #2
 800a3d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a3dc:	4b2b      	ldr	r3, [pc, #172]	; (800a48c <HAL_GPIO_Init+0x238>)
 800a3de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3e2:	f003 0302 	and.w	r3, r3, #2
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a3ea:	4a29      	ldr	r2, [pc, #164]	; (800a490 <HAL_GPIO_Init+0x23c>)
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	089b      	lsrs	r3, r3, #2
 800a3f0:	3302      	adds	r3, #2
 800a3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	f003 0303 	and.w	r3, r3, #3
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	220f      	movs	r2, #15
 800a402:	fa02 f303 	lsl.w	r3, r2, r3
 800a406:	43db      	mvns	r3, r3
 800a408:	69ba      	ldr	r2, [r7, #24]
 800a40a:	4013      	ands	r3, r2
 800a40c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a20      	ldr	r2, [pc, #128]	; (800a494 <HAL_GPIO_Init+0x240>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d052      	beq.n	800a4bc <HAL_GPIO_Init+0x268>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a1f      	ldr	r2, [pc, #124]	; (800a498 <HAL_GPIO_Init+0x244>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d031      	beq.n	800a482 <HAL_GPIO_Init+0x22e>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a1e      	ldr	r2, [pc, #120]	; (800a49c <HAL_GPIO_Init+0x248>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d02b      	beq.n	800a47e <HAL_GPIO_Init+0x22a>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a1d      	ldr	r2, [pc, #116]	; (800a4a0 <HAL_GPIO_Init+0x24c>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d025      	beq.n	800a47a <HAL_GPIO_Init+0x226>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a1c      	ldr	r2, [pc, #112]	; (800a4a4 <HAL_GPIO_Init+0x250>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d01f      	beq.n	800a476 <HAL_GPIO_Init+0x222>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a1b      	ldr	r2, [pc, #108]	; (800a4a8 <HAL_GPIO_Init+0x254>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d019      	beq.n	800a472 <HAL_GPIO_Init+0x21e>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a1a      	ldr	r2, [pc, #104]	; (800a4ac <HAL_GPIO_Init+0x258>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d013      	beq.n	800a46e <HAL_GPIO_Init+0x21a>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a19      	ldr	r2, [pc, #100]	; (800a4b0 <HAL_GPIO_Init+0x25c>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d00d      	beq.n	800a46a <HAL_GPIO_Init+0x216>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a18      	ldr	r2, [pc, #96]	; (800a4b4 <HAL_GPIO_Init+0x260>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d007      	beq.n	800a466 <HAL_GPIO_Init+0x212>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a17      	ldr	r2, [pc, #92]	; (800a4b8 <HAL_GPIO_Init+0x264>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d101      	bne.n	800a462 <HAL_GPIO_Init+0x20e>
 800a45e:	2309      	movs	r3, #9
 800a460:	e02d      	b.n	800a4be <HAL_GPIO_Init+0x26a>
 800a462:	230a      	movs	r3, #10
 800a464:	e02b      	b.n	800a4be <HAL_GPIO_Init+0x26a>
 800a466:	2308      	movs	r3, #8
 800a468:	e029      	b.n	800a4be <HAL_GPIO_Init+0x26a>
 800a46a:	2307      	movs	r3, #7
 800a46c:	e027      	b.n	800a4be <HAL_GPIO_Init+0x26a>
 800a46e:	2306      	movs	r3, #6
 800a470:	e025      	b.n	800a4be <HAL_GPIO_Init+0x26a>
 800a472:	2305      	movs	r3, #5
 800a474:	e023      	b.n	800a4be <HAL_GPIO_Init+0x26a>
 800a476:	2304      	movs	r3, #4
 800a478:	e021      	b.n	800a4be <HAL_GPIO_Init+0x26a>
 800a47a:	2303      	movs	r3, #3
 800a47c:	e01f      	b.n	800a4be <HAL_GPIO_Init+0x26a>
 800a47e:	2302      	movs	r3, #2
 800a480:	e01d      	b.n	800a4be <HAL_GPIO_Init+0x26a>
 800a482:	2301      	movs	r3, #1
 800a484:	e01b      	b.n	800a4be <HAL_GPIO_Init+0x26a>
 800a486:	bf00      	nop
 800a488:	58000080 	.word	0x58000080
 800a48c:	58024400 	.word	0x58024400
 800a490:	58000400 	.word	0x58000400
 800a494:	58020000 	.word	0x58020000
 800a498:	58020400 	.word	0x58020400
 800a49c:	58020800 	.word	0x58020800
 800a4a0:	58020c00 	.word	0x58020c00
 800a4a4:	58021000 	.word	0x58021000
 800a4a8:	58021400 	.word	0x58021400
 800a4ac:	58021800 	.word	0x58021800
 800a4b0:	58021c00 	.word	0x58021c00
 800a4b4:	58022000 	.word	0x58022000
 800a4b8:	58022400 	.word	0x58022400
 800a4bc:	2300      	movs	r3, #0
 800a4be:	69fa      	ldr	r2, [r7, #28]
 800a4c0:	f002 0203 	and.w	r2, r2, #3
 800a4c4:	0092      	lsls	r2, r2, #2
 800a4c6:	4093      	lsls	r3, r2
 800a4c8:	69ba      	ldr	r2, [r7, #24]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a4ce:	4938      	ldr	r1, [pc, #224]	; (800a5b0 <HAL_GPIO_Init+0x35c>)
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	089b      	lsrs	r3, r3, #2
 800a4d4:	3302      	adds	r3, #2
 800a4d6:	69ba      	ldr	r2, [r7, #24]
 800a4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a4dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	43db      	mvns	r3, r3
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a50a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	43db      	mvns	r3, r3
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	4013      	ands	r3, r2
 800a51a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a528:	69ba      	ldr	r2, [r7, #24]
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	43db      	mvns	r3, r3
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	4013      	ands	r3, r2
 800a546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d003      	beq.n	800a55c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a554:	69ba      	ldr	r2, [r7, #24]
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	4313      	orrs	r3, r2
 800a55a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	69ba      	ldr	r2, [r7, #24]
 800a560:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	43db      	mvns	r3, r3
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	4013      	ands	r3, r2
 800a570:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a57e:	69ba      	ldr	r2, [r7, #24]
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	4313      	orrs	r3, r2
 800a584:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	69ba      	ldr	r2, [r7, #24]
 800a58a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	3301      	adds	r3, #1
 800a590:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	fa22 f303 	lsr.w	r3, r2, r3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f47f ae63 	bne.w	800a268 <HAL_GPIO_Init+0x14>
  }
}
 800a5a2:	bf00      	nop
 800a5a4:	bf00      	nop
 800a5a6:	3724      	adds	r7, #36	; 0x24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	58000400 	.word	0x58000400

0800a5b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	691a      	ldr	r2, [r3, #16]
 800a5c4:	887b      	ldrh	r3, [r7, #2]
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	73fb      	strb	r3, [r7, #15]
 800a5d0:	e001      	b.n	800a5d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	807b      	strh	r3, [r7, #2]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a5f4:	787b      	ldrb	r3, [r7, #1]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a5fa:	887a      	ldrh	r2, [r7, #2]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a600:	e003      	b.n	800a60a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a602:	887b      	ldrh	r3, [r7, #2]
 800a604:	041a      	lsls	r2, r3, #16
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	619a      	str	r2, [r3, #24]
}
 800a60a:	bf00      	nop
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
	...

0800a618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e08b      	b.n	800a742 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d106      	bne.n	800a644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7f7 fb12 	bl	8001c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2224      	movs	r2, #36	; 0x24
 800a648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f022 0201 	bic.w	r2, r2, #1
 800a65a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a668:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689a      	ldr	r2, [r3, #8]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a678:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d107      	bne.n	800a692 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689a      	ldr	r2, [r3, #8]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a68e:	609a      	str	r2, [r3, #8]
 800a690:	e006      	b.n	800a6a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	689a      	ldr	r2, [r3, #8]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a69e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d108      	bne.n	800a6ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6b6:	605a      	str	r2, [r3, #4]
 800a6b8:	e007      	b.n	800a6ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	6859      	ldr	r1, [r3, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	4b1d      	ldr	r3, [pc, #116]	; (800a74c <HAL_I2C_Init+0x134>)
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68da      	ldr	r2, [r3, #12]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691a      	ldr	r2, [r3, #16]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	430a      	orrs	r2, r1
 800a702:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	69d9      	ldr	r1, [r3, #28]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a1a      	ldr	r2, [r3, #32]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0201 	orr.w	r2, r2, #1
 800a722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2220      	movs	r2, #32
 800a72e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	02008000 	.word	0x02008000

0800a750 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b08a      	sub	sp, #40	; 0x28
 800a754:	af02      	add	r7, sp, #8
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	607a      	str	r2, [r7, #4]
 800a75a:	461a      	mov	r2, r3
 800a75c:	460b      	mov	r3, r1
 800a75e:	817b      	strh	r3, [r7, #10]
 800a760:	4613      	mov	r3, r2
 800a762:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	2b20      	cmp	r3, #32
 800a772:	f040 80ef 	bne.w	800a954 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a784:	d101      	bne.n	800a78a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800a786:	2302      	movs	r3, #2
 800a788:	e0e5      	b.n	800a956 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a790:	2b01      	cmp	r3, #1
 800a792:	d101      	bne.n	800a798 <HAL_I2C_Master_Transmit_DMA+0x48>
 800a794:	2302      	movs	r3, #2
 800a796:	e0de      	b.n	800a956 <HAL_I2C_Master_Transmit_DMA+0x206>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2221      	movs	r2, #33	; 0x21
 800a7a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2210      	movs	r2, #16
 800a7ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	893a      	ldrh	r2, [r7, #8]
 800a7c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	4a66      	ldr	r2, [pc, #408]	; (800a960 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800a7c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4a66      	ldr	r2, [pc, #408]	; (800a964 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800a7cc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	2bff      	cmp	r3, #255	; 0xff
 800a7d6:	d906      	bls.n	800a7e6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	22ff      	movs	r2, #255	; 0xff
 800a7dc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a7de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7e2:	61fb      	str	r3, [r7, #28]
 800a7e4:	e007      	b.n	800a7f6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a7f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7f4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d01a      	beq.n	800a834 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a802:	781a      	ldrb	r2, [r3, #0]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	1c5a      	adds	r2, r3, #1
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a818:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a81e:	b29b      	uxth	r3, r3
 800a820:	3b01      	subs	r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a82c:	3b01      	subs	r3, #1
 800a82e:	b29a      	uxth	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d074      	beq.n	800a926 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a840:	2b00      	cmp	r3, #0
 800a842:	d022      	beq.n	800a88a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a848:	4a47      	ldr	r2, [pc, #284]	; (800a968 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800a84a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a850:	4a46      	ldr	r2, [pc, #280]	; (800a96c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800a852:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a858:	2200      	movs	r2, #0
 800a85a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a860:	2200      	movs	r2, #0
 800a862:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800a874:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800a87a:	f7fc ff17 	bl	80076ac <HAL_DMA_Start_IT>
 800a87e:	4603      	mov	r3, r0
 800a880:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a882:	7dfb      	ldrb	r3, [r7, #23]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d13a      	bne.n	800a8fe <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800a888:	e013      	b.n	800a8b2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2220      	movs	r2, #32
 800a88e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a89e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e051      	b.n	800a956 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	8979      	ldrh	r1, [r7, #10]
 800a8be:	4b2c      	ldr	r3, [pc, #176]	; (800a970 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f002 f83b 	bl	800c940 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a8e4:	2110      	movs	r1, #16
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f002 f85c 	bl	800c9a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	e028      	b.n	800a950 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2220      	movs	r2, #32
 800a902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a912:	f043 0210 	orr.w	r2, r3, #16
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e017      	b.n	800a956 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4a12      	ldr	r2, [pc, #72]	; (800a974 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800a92a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	8979      	ldrh	r1, [r7, #10]
 800a932:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f002 f800 	bl	800c940 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a948:	2101      	movs	r1, #1
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f002 f82a 	bl	800c9a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	e000      	b.n	800a956 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800a954:	2302      	movs	r3, #2
  }
}
 800a956:	4618      	mov	r0, r3
 800a958:	3720      	adds	r7, #32
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	ffff0000 	.word	0xffff0000
 800a964:	0800b1ab 	.word	0x0800b1ab
 800a968:	0800c563 	.word	0x0800c563
 800a96c:	0800c691 	.word	0x0800c691
 800a970:	80002000 	.word	0x80002000
 800a974:	0800ad3b 	.word	0x0800ad3b

0800a978 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af02      	add	r7, sp, #8
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	607a      	str	r2, [r7, #4]
 800a982:	461a      	mov	r2, r3
 800a984:	460b      	mov	r3, r1
 800a986:	817b      	strh	r3, [r7, #10]
 800a988:	4613      	mov	r3, r2
 800a98a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b20      	cmp	r3, #32
 800a996:	f040 80cd 	bne.w	800ab34 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9a8:	d101      	bne.n	800a9ae <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	e0c3      	b.n	800ab36 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d101      	bne.n	800a9bc <HAL_I2C_Master_Receive_DMA+0x44>
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	e0bc      	b.n	800ab36 <HAL_I2C_Master_Receive_DMA+0x1be>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2222      	movs	r2, #34	; 0x22
 800a9c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2210      	movs	r2, #16
 800a9d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	893a      	ldrh	r2, [r7, #8]
 800a9e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4a55      	ldr	r2, [pc, #340]	; (800ab40 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800a9ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4a55      	ldr	r2, [pc, #340]	; (800ab44 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800a9f0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	2bff      	cmp	r3, #255	; 0xff
 800a9fa:	d906      	bls.n	800aa0a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	22ff      	movs	r2, #255	; 0xff
 800aa00:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800aa02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa06:	617b      	str	r3, [r7, #20]
 800aa08:	e007      	b.n	800aa1a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800aa14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa18:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d070      	beq.n	800ab04 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d020      	beq.n	800aa6c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2e:	4a46      	ldr	r2, [pc, #280]	; (800ab48 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800aa30:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa36:	4a45      	ldr	r2, [pc, #276]	; (800ab4c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800aa38:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3e:	2200      	movs	r2, #0
 800aa40:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa46:	2200      	movs	r2, #0
 800aa48:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3324      	adds	r3, #36	; 0x24
 800aa54:	4619      	mov	r1, r3
 800aa56:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800aa5c:	f7fc fe26 	bl	80076ac <HAL_DMA_Start_IT>
 800aa60:	4603      	mov	r3, r0
 800aa62:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800aa64:	7cfb      	ldrb	r3, [r7, #19]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d138      	bne.n	800aadc <HAL_I2C_Master_Receive_DMA+0x164>
 800aa6a:	e013      	b.n	800aa94 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2220      	movs	r2, #32
 800aa70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e050      	b.n	800ab36 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	8979      	ldrh	r1, [r7, #10]
 800aa9c:	4b2c      	ldr	r3, [pc, #176]	; (800ab50 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f001 ff4c 	bl	800c940 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800aac2:	2110      	movs	r1, #16
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f001 ff6d 	bl	800c9a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	e029      	b.n	800ab30 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2220      	movs	r2, #32
 800aae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf0:	f043 0210 	orr.w	r2, r3, #16
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e018      	b.n	800ab36 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4a13      	ldr	r2, [pc, #76]	; (800ab54 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800ab08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	8979      	ldrh	r1, [r7, #10]
 800ab12:	4b0f      	ldr	r3, [pc, #60]	; (800ab50 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f001 ff10 	bl	800c940 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ab28:	2102      	movs	r1, #2
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f001 ff3a 	bl	800c9a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	e000      	b.n	800ab36 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800ab34:	2302      	movs	r3, #2
  }
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	ffff0000 	.word	0xffff0000
 800ab44:	0800b1ab 	.word	0x0800b1ab
 800ab48:	0800c5f9 	.word	0x0800c5f9
 800ab4c:	0800c691 	.word	0x0800c691
 800ab50:	80002400 	.word	0x80002400
 800ab54:	0800ad3b 	.word	0x0800ad3b

0800ab58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d005      	beq.n	800ab84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	68f9      	ldr	r1, [r7, #12]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	4798      	blx	r3
  }
}
 800ab84:	bf00      	nop
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	0a1b      	lsrs	r3, r3, #8
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b00      	cmp	r3, #0
 800abae:	d010      	beq.n	800abd2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	09db      	lsrs	r3, r3, #7
 800abb4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00a      	beq.n	800abd2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc0:	f043 0201 	orr.w	r2, r3, #1
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abd0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	0a9b      	lsrs	r3, r3, #10
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d010      	beq.n	800ac00 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	09db      	lsrs	r3, r3, #7
 800abe2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abee:	f043 0208 	orr.w	r2, r3, #8
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800abfe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	0a5b      	lsrs	r3, r3, #9
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d010      	beq.n	800ac2e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	09db      	lsrs	r3, r3, #7
 800ac10:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00a      	beq.n	800ac2e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac1c:	f043 0202 	orr.w	r2, r3, #2
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac2c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac32:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f003 030b 	and.w	r3, r3, #11
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f001 fb53 	bl	800c2ec <I2C_ITError>
  }
}
 800ac46:	bf00      	nop
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b083      	sub	sp, #12
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ac56:	bf00      	nop
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b083      	sub	sp, #12
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ac6a:	bf00      	nop
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ac7e:	bf00      	nop
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b083      	sub	sp, #12
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ac92:	bf00      	nop
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	460b      	mov	r3, r1
 800aca8:	70fb      	strb	r3, [r7, #3]
 800acaa:	4613      	mov	r3, r2
 800acac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800acae:	bf00      	nop
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800acd6:	bf00      	nop
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800acea:	bf00      	nop
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b083      	sub	sp, #12
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800acfe:	bf00      	nop
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad2c:	b2db      	uxtb	r3, r3
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b088      	sub	sp, #32
 800ad3e:	af02      	add	r7, sp, #8
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d101      	bne.n	800ad58 <I2C_Master_ISR_IT+0x1e>
 800ad54:	2302      	movs	r3, #2
 800ad56:	e120      	b.n	800af9a <I2C_Master_ISR_IT+0x260>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	091b      	lsrs	r3, r3, #4
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d013      	beq.n	800ad94 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	091b      	lsrs	r3, r3, #4
 800ad70:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00d      	beq.n	800ad94 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2210      	movs	r2, #16
 800ad7e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad84:	f043 0204 	orr.w	r2, r3, #4
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f001 fbc4 	bl	800c51a <I2C_Flush_TXDR>
 800ad92:	e0ed      	b.n	800af70 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	089b      	lsrs	r3, r3, #2
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d023      	beq.n	800ade8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	089b      	lsrs	r3, r3, #2
 800ada4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d01d      	beq.n	800ade8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f023 0304 	bic.w	r3, r3, #4
 800adb2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	b2d2      	uxtb	r2, r2
 800adc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	1c5a      	adds	r2, r3, #1
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800add0:	3b01      	subs	r3, #1
 800add2:	b29a      	uxth	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800addc:	b29b      	uxth	r3, r3
 800adde:	3b01      	subs	r3, #1
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ade6:	e0c3      	b.n	800af70 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	099b      	lsrs	r3, r3, #6
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d12a      	bne.n	800ae4a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	085b      	lsrs	r3, r3, #1
 800adf8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d024      	beq.n	800ae4a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	085b      	lsrs	r3, r3, #1
 800ae04:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d01e      	beq.n	800ae4a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 80ac 	beq.w	800af70 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	781a      	ldrb	r2, [r3, #0]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae32:	3b01      	subs	r3, #1
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	3b01      	subs	r3, #1
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800ae48:	e092      	b.n	800af70 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	09db      	lsrs	r3, r3, #7
 800ae4e:	f003 0301 	and.w	r3, r3, #1
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d05d      	beq.n	800af12 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	099b      	lsrs	r3, r3, #6
 800ae5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d057      	beq.n	800af12 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d040      	beq.n	800aeee <I2C_Master_ISR_IT+0x1b4>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d13c      	bne.n	800aeee <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae80:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	2bff      	cmp	r3, #255	; 0xff
 800ae8a:	d90e      	bls.n	800aeaa <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	22ff      	movs	r2, #255	; 0xff
 800ae90:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	8a79      	ldrh	r1, [r7, #18]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f001 fd4c 	bl	800c940 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aea8:	e032      	b.n	800af10 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aebc:	d00b      	beq.n	800aed6 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec8:	8a79      	ldrh	r1, [r7, #18]
 800aeca:	2000      	movs	r0, #0
 800aecc:	9000      	str	r0, [sp, #0]
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f001 fd36 	bl	800c940 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aed4:	e01c      	b.n	800af10 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	8a79      	ldrh	r1, [r7, #18]
 800aede:	2300      	movs	r3, #0
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f001 fd2a 	bl	800c940 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aeec:	e010      	b.n	800af10 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aefc:	d003      	beq.n	800af06 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 fdde 	bl	800bac0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af04:	e034      	b.n	800af70 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800af06:	2140      	movs	r1, #64	; 0x40
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f001 f9ef 	bl	800c2ec <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af0e:	e02f      	b.n	800af70 <I2C_Master_ISR_IT+0x236>
 800af10:	e02e      	b.n	800af70 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	099b      	lsrs	r3, r3, #6
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d028      	beq.n	800af70 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	099b      	lsrs	r3, r3, #6
 800af22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800af26:	2b00      	cmp	r3, #0
 800af28:	d022      	beq.n	800af70 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af2e:	b29b      	uxth	r3, r3
 800af30:	2b00      	cmp	r3, #0
 800af32:	d119      	bne.n	800af68 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af42:	d015      	beq.n	800af70 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af4c:	d108      	bne.n	800af60 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af5c:	605a      	str	r2, [r3, #4]
 800af5e:	e007      	b.n	800af70 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f000 fdad 	bl	800bac0 <I2C_ITMasterSeqCplt>
 800af66:	e003      	b.n	800af70 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800af68:	2140      	movs	r1, #64	; 0x40
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f001 f9be 	bl	800c2ec <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	095b      	lsrs	r3, r3, #5
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d009      	beq.n	800af90 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	095b      	lsrs	r3, r3, #5
 800af80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800af84:	2b00      	cmp	r3, #0
 800af86:	d003      	beq.n	800af90 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800af88:	6979      	ldr	r1, [r7, #20]
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f000 fe34 	bl	800bbf8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3718      	adds	r7, #24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b086      	sub	sp, #24
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d101      	bne.n	800afc6 <I2C_Slave_ISR_IT+0x24>
 800afc2:	2302      	movs	r3, #2
 800afc4:	e0ed      	b.n	800b1a2 <I2C_Slave_ISR_IT+0x200>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	095b      	lsrs	r3, r3, #5
 800afd2:	f003 0301 	and.w	r3, r3, #1
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	095b      	lsrs	r3, r3, #5
 800afde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d004      	beq.n	800aff0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800afe6:	6939      	ldr	r1, [r7, #16]
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 fecf 	bl	800bd8c <I2C_ITSlaveCplt>
 800afee:	e0d3      	b.n	800b198 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	091b      	lsrs	r3, r3, #4
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d04d      	beq.n	800b098 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	091b      	lsrs	r3, r3, #4
 800b000:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b004:	2b00      	cmp	r3, #0
 800b006:	d047      	beq.n	800b098 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d128      	bne.n	800b064 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b28      	cmp	r3, #40	; 0x28
 800b01c:	d108      	bne.n	800b030 <I2C_Slave_ISR_IT+0x8e>
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b024:	d104      	bne.n	800b030 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b026:	6939      	ldr	r1, [r7, #16]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f001 f909 	bl	800c240 <I2C_ITListenCplt>
 800b02e:	e032      	b.n	800b096 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b29      	cmp	r3, #41	; 0x29
 800b03a:	d10e      	bne.n	800b05a <I2C_Slave_ISR_IT+0xb8>
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b042:	d00a      	beq.n	800b05a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2210      	movs	r2, #16
 800b04a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f001 fa64 	bl	800c51a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f000 fd71 	bl	800bb3a <I2C_ITSlaveSeqCplt>
 800b058:	e01d      	b.n	800b096 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2210      	movs	r2, #16
 800b060:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b062:	e096      	b.n	800b192 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2210      	movs	r2, #16
 800b06a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b070:	f043 0204 	orr.w	r2, r3, #4
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d004      	beq.n	800b088 <I2C_Slave_ISR_IT+0xe6>
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b084:	f040 8085 	bne.w	800b192 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b08c:	4619      	mov	r1, r3
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f001 f92c 	bl	800c2ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b094:	e07d      	b.n	800b192 <I2C_Slave_ISR_IT+0x1f0>
 800b096:	e07c      	b.n	800b192 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	089b      	lsrs	r3, r3, #2
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d030      	beq.n	800b106 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	089b      	lsrs	r3, r3, #2
 800b0a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d02a      	beq.n	800b106 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d018      	beq.n	800b0ec <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c4:	b2d2      	uxtb	r2, r2
 800b0c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d14f      	bne.n	800b196 <I2C_Slave_ISR_IT+0x1f4>
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b0fc:	d04b      	beq.n	800b196 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f000 fd1b 	bl	800bb3a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b104:	e047      	b.n	800b196 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	08db      	lsrs	r3, r3, #3
 800b10a:	f003 0301 	and.w	r3, r3, #1
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00a      	beq.n	800b128 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	08db      	lsrs	r3, r3, #3
 800b116:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d004      	beq.n	800b128 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b11e:	6939      	ldr	r1, [r7, #16]
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 fc49 	bl	800b9b8 <I2C_ITAddrCplt>
 800b126:	e037      	b.n	800b198 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	085b      	lsrs	r3, r3, #1
 800b12c:	f003 0301 	and.w	r3, r3, #1
 800b130:	2b00      	cmp	r3, #0
 800b132:	d031      	beq.n	800b198 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d02b      	beq.n	800b198 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b144:	b29b      	uxth	r3, r3
 800b146:	2b00      	cmp	r3, #0
 800b148:	d018      	beq.n	800b17c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	781a      	ldrb	r2, [r3, #0]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	1c5a      	adds	r2, r3, #1
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b164:	b29b      	uxth	r3, r3
 800b166:	3b01      	subs	r3, #1
 800b168:	b29a      	uxth	r2, r3
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b172:	3b01      	subs	r3, #1
 800b174:	b29a      	uxth	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	851a      	strh	r2, [r3, #40]	; 0x28
 800b17a:	e00d      	b.n	800b198 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b182:	d002      	beq.n	800b18a <I2C_Slave_ISR_IT+0x1e8>
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d106      	bne.n	800b198 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f000 fcd5 	bl	800bb3a <I2C_ITSlaveSeqCplt>
 800b190:	e002      	b.n	800b198 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800b192:	bf00      	nop
 800b194:	e000      	b.n	800b198 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800b196:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b088      	sub	sp, #32
 800b1ae:	af02      	add	r7, sp, #8
 800b1b0:	60f8      	str	r0, [r7, #12]
 800b1b2:	60b9      	str	r1, [r7, #8]
 800b1b4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d101      	bne.n	800b1c4 <I2C_Master_ISR_DMA+0x1a>
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	e0e1      	b.n	800b388 <I2C_Master_ISR_DMA+0x1de>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	091b      	lsrs	r3, r3, #4
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d017      	beq.n	800b208 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	091b      	lsrs	r3, r3, #4
 800b1dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d011      	beq.n	800b208 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2210      	movs	r2, #16
 800b1ea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1f0:	f043 0204 	orr.w	r2, r3, #4
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b1f8:	2120      	movs	r1, #32
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f001 fbd2 	bl	800c9a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f001 f98a 	bl	800c51a <I2C_Flush_TXDR>
 800b206:	e0ba      	b.n	800b37e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	09db      	lsrs	r3, r3, #7
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	2b00      	cmp	r3, #0
 800b212:	d072      	beq.n	800b2fa <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	099b      	lsrs	r3, r3, #6
 800b218:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d06c      	beq.n	800b2fa <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b22e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b234:	b29b      	uxth	r3, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	d04e      	beq.n	800b2d8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	b29b      	uxth	r3, r3
 800b242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b246:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	2bff      	cmp	r3, #255	; 0xff
 800b250:	d906      	bls.n	800b260 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	22ff      	movs	r2, #255	; 0xff
 800b256:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800b258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b25c:	617b      	str	r3, [r7, #20]
 800b25e:	e010      	b.n	800b282 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b264:	b29a      	uxth	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b272:	d003      	beq.n	800b27c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	617b      	str	r3, [r7, #20]
 800b27a:	e002      	b.n	800b282 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800b27c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b280:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b286:	b2da      	uxtb	r2, r3
 800b288:	8a79      	ldrh	r1, [r7, #18]
 800b28a:	2300      	movs	r3, #0
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f001 fb55 	bl	800c940 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b22      	cmp	r3, #34	; 0x22
 800b2b2:	d108      	bne.n	800b2c6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2c2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b2c4:	e05b      	b.n	800b37e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b2d6:	e052      	b.n	800b37e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2e6:	d003      	beq.n	800b2f0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 fbe9 	bl	800bac0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b2ee:	e046      	b.n	800b37e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b2f0:	2140      	movs	r1, #64	; 0x40
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f000 fffa 	bl	800c2ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b2f8:	e041      	b.n	800b37e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	099b      	lsrs	r3, r3, #6
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	2b00      	cmp	r3, #0
 800b304:	d029      	beq.n	800b35a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	099b      	lsrs	r3, r3, #6
 800b30a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d023      	beq.n	800b35a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b316:	b29b      	uxth	r3, r3
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d119      	bne.n	800b350 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b32a:	d027      	beq.n	800b37c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b334:	d108      	bne.n	800b348 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b344:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b346:	e019      	b.n	800b37c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 fbb9 	bl	800bac0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b34e:	e015      	b.n	800b37c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b350:	2140      	movs	r1, #64	; 0x40
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 ffca 	bl	800c2ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b358:	e010      	b.n	800b37c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	095b      	lsrs	r3, r3, #5
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00b      	beq.n	800b37e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	095b      	lsrs	r3, r3, #5
 800b36a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d005      	beq.n	800b37e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b372:	68b9      	ldr	r1, [r7, #8]
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 fc3f 	bl	800bbf8 <I2C_ITMasterCplt>
 800b37a:	e000      	b.n	800b37e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800b37c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b088      	sub	sp, #32
 800b394:	af02      	add	r7, sp, #8
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b39c:	4b92      	ldr	r3, [pc, #584]	; (800b5e8 <I2C_Mem_ISR_DMA+0x258>)
 800b39e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d101      	bne.n	800b3ae <I2C_Mem_ISR_DMA+0x1e>
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	e118      	b.n	800b5e0 <I2C_Mem_ISR_DMA+0x250>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	091b      	lsrs	r3, r3, #4
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d017      	beq.n	800b3f2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	091b      	lsrs	r3, r3, #4
 800b3c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d011      	beq.n	800b3f2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2210      	movs	r2, #16
 800b3d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3da:	f043 0204 	orr.w	r2, r3, #4
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b3e2:	2120      	movs	r1, #32
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f001 fadd 	bl	800c9a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f001 f895 	bl	800c51a <I2C_Flush_TXDR>
 800b3f0:	e0f1      	b.n	800b5d6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	085b      	lsrs	r3, r3, #1
 800b3f6:	f003 0301 	and.w	r3, r3, #1
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00f      	beq.n	800b41e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	085b      	lsrs	r3, r3, #1
 800b402:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b406:	2b00      	cmp	r3, #0
 800b408:	d009      	beq.n	800b41e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b412:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b41a:	651a      	str	r2, [r3, #80]	; 0x50
 800b41c:	e0db      	b.n	800b5d6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	09db      	lsrs	r3, r3, #7
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	d060      	beq.n	800b4ec <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	099b      	lsrs	r3, r3, #6
 800b42e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b432:	2b00      	cmp	r3, #0
 800b434:	d05a      	beq.n	800b4ec <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b436:	2101      	movs	r1, #1
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f001 fb37 	bl	800caac <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b43e:	2110      	movs	r1, #16
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f001 faaf 	bl	800c9a4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d048      	beq.n	800b4e2 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b454:	b29b      	uxth	r3, r3
 800b456:	2bff      	cmp	r3, #255	; 0xff
 800b458:	d910      	bls.n	800b47c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	22ff      	movs	r2, #255	; 0xff
 800b45e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b464:	b299      	uxth	r1, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	2300      	movs	r3, #0
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f001 fa63 	bl	800c940 <I2C_TransferConfig>
 800b47a:	e011      	b.n	800b4a0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b480:	b29a      	uxth	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b48a:	b299      	uxth	r1, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b490:	b2da      	uxtb	r2, r3
 800b492:	2300      	movs	r3, #0
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f001 fa50 	bl	800c940 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b22      	cmp	r3, #34	; 0x22
 800b4bc:	d108      	bne.n	800b4d0 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b4ce:	e082      	b.n	800b5d6 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4de:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b4e0:	e079      	b.n	800b5d6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b4e2:	2140      	movs	r1, #64	; 0x40
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 ff01 	bl	800c2ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b4ea:	e074      	b.n	800b5d6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	099b      	lsrs	r3, r3, #6
 800b4f0:	f003 0301 	and.w	r3, r3, #1
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d05e      	beq.n	800b5b6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	099b      	lsrs	r3, r3, #6
 800b4fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b500:	2b00      	cmp	r3, #0
 800b502:	d058      	beq.n	800b5b6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b504:	2101      	movs	r1, #1
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f001 fad0 	bl	800caac <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b50c:	2110      	movs	r1, #16
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f001 fa48 	bl	800c9a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	2b22      	cmp	r3, #34	; 0x22
 800b51e:	d101      	bne.n	800b524 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800b520:	4b32      	ldr	r3, [pc, #200]	; (800b5ec <I2C_Mem_ISR_DMA+0x25c>)
 800b522:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b528:	b29b      	uxth	r3, r3
 800b52a:	2bff      	cmp	r3, #255	; 0xff
 800b52c:	d910      	bls.n	800b550 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	22ff      	movs	r2, #255	; 0xff
 800b532:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b538:	b299      	uxth	r1, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f001 f9f9 	bl	800c940 <I2C_TransferConfig>
 800b54e:	e011      	b.n	800b574 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b554:	b29a      	uxth	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b55e:	b299      	uxth	r1, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b564:	b2da      	uxtb	r2, r3
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f001 f9e6 	bl	800c940 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b578:	b29a      	uxth	r2, r3
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	b29a      	uxth	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b22      	cmp	r3, #34	; 0x22
 800b590:	d108      	bne.n	800b5a4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5a0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b5a2:	e018      	b.n	800b5d6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5b2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b5b4:	e00f      	b.n	800b5d6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	095b      	lsrs	r3, r3, #5
 800b5ba:	f003 0301 	and.w	r3, r3, #1
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d009      	beq.n	800b5d6 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	095b      	lsrs	r3, r3, #5
 800b5c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b5ce:	68b9      	ldr	r1, [r7, #8]
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 fb11 	bl	800bbf8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	80002000 	.word	0x80002000
 800b5ec:	80002400 	.word	0x80002400

0800b5f0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b088      	sub	sp, #32
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b602:	2300      	movs	r3, #0
 800b604:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d101      	bne.n	800b614 <I2C_Slave_ISR_DMA+0x24>
 800b610:	2302      	movs	r3, #2
 800b612:	e1cc      	b.n	800b9ae <I2C_Slave_ISR_DMA+0x3be>
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	095b      	lsrs	r3, r3, #5
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00a      	beq.n	800b63e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	095b      	lsrs	r3, r3, #5
 800b62c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b630:	2b00      	cmp	r3, #0
 800b632:	d004      	beq.n	800b63e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b634:	68b9      	ldr	r1, [r7, #8]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 fba8 	bl	800bd8c <I2C_ITSlaveCplt>
 800b63c:	e1b2      	b.n	800b9a4 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	091b      	lsrs	r3, r3, #4
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	f000 819c 	beq.w	800b984 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	091b      	lsrs	r3, r3, #4
 800b650:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 8195 	beq.w	800b984 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	0b9b      	lsrs	r3, r3, #14
 800b65e:	f003 0301 	and.w	r3, r3, #1
 800b662:	2b00      	cmp	r3, #0
 800b664:	d106      	bne.n	800b674 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	0bdb      	lsrs	r3, r3, #15
 800b66a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 8181 	beq.w	800b976 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d07c      	beq.n	800b776 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	0bdb      	lsrs	r3, r3, #15
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	2b00      	cmp	r3, #0
 800b686:	d076      	beq.n	800b776 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a75      	ldr	r2, [pc, #468]	; (800b864 <I2C_Slave_ISR_DMA+0x274>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d059      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a73      	ldr	r2, [pc, #460]	; (800b868 <I2C_Slave_ISR_DMA+0x278>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d053      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a71      	ldr	r2, [pc, #452]	; (800b86c <I2C_Slave_ISR_DMA+0x27c>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d04d      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a6f      	ldr	r2, [pc, #444]	; (800b870 <I2C_Slave_ISR_DMA+0x280>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d047      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a6d      	ldr	r2, [pc, #436]	; (800b874 <I2C_Slave_ISR_DMA+0x284>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d041      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a6b      	ldr	r2, [pc, #428]	; (800b878 <I2C_Slave_ISR_DMA+0x288>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d03b      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a69      	ldr	r2, [pc, #420]	; (800b87c <I2C_Slave_ISR_DMA+0x28c>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d035      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a67      	ldr	r2, [pc, #412]	; (800b880 <I2C_Slave_ISR_DMA+0x290>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d02f      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a65      	ldr	r2, [pc, #404]	; (800b884 <I2C_Slave_ISR_DMA+0x294>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d029      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a63      	ldr	r2, [pc, #396]	; (800b888 <I2C_Slave_ISR_DMA+0x298>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d023      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a61      	ldr	r2, [pc, #388]	; (800b88c <I2C_Slave_ISR_DMA+0x29c>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d01d      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a5f      	ldr	r2, [pc, #380]	; (800b890 <I2C_Slave_ISR_DMA+0x2a0>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d017      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a5d      	ldr	r2, [pc, #372]	; (800b894 <I2C_Slave_ISR_DMA+0x2a4>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d011      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a5b      	ldr	r2, [pc, #364]	; (800b898 <I2C_Slave_ISR_DMA+0x2a8>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d00b      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a59      	ldr	r2, [pc, #356]	; (800b89c <I2C_Slave_ISR_DMA+0x2ac>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d005      	beq.n	800b748 <I2C_Slave_ISR_DMA+0x158>
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a57      	ldr	r2, [pc, #348]	; (800b8a0 <I2C_Slave_ISR_DMA+0x2b0>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d109      	bne.n	800b75c <I2C_Slave_ISR_DMA+0x16c>
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	bf0c      	ite	eq
 800b754:	2301      	moveq	r3, #1
 800b756:	2300      	movne	r3, #0
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	e008      	b.n	800b76e <I2C_Slave_ISR_DMA+0x17e>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	bf0c      	ite	eq
 800b768:	2301      	moveq	r3, #1
 800b76a:	2300      	movne	r3, #0
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800b772:	2301      	movs	r3, #1
 800b774:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 809f 	beq.w	800b8be <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	0b9b      	lsrs	r3, r3, #14
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 8098 	beq.w	800b8be <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a33      	ldr	r2, [pc, #204]	; (800b864 <I2C_Slave_ISR_DMA+0x274>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d059      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a31      	ldr	r2, [pc, #196]	; (800b868 <I2C_Slave_ISR_DMA+0x278>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d053      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a2f      	ldr	r2, [pc, #188]	; (800b86c <I2C_Slave_ISR_DMA+0x27c>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d04d      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a2d      	ldr	r2, [pc, #180]	; (800b870 <I2C_Slave_ISR_DMA+0x280>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d047      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a2b      	ldr	r2, [pc, #172]	; (800b874 <I2C_Slave_ISR_DMA+0x284>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d041      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a29      	ldr	r2, [pc, #164]	; (800b878 <I2C_Slave_ISR_DMA+0x288>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d03b      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a27      	ldr	r2, [pc, #156]	; (800b87c <I2C_Slave_ISR_DMA+0x28c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d035      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a25      	ldr	r2, [pc, #148]	; (800b880 <I2C_Slave_ISR_DMA+0x290>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d02f      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a23      	ldr	r2, [pc, #140]	; (800b884 <I2C_Slave_ISR_DMA+0x294>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d029      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a21      	ldr	r2, [pc, #132]	; (800b888 <I2C_Slave_ISR_DMA+0x298>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d023      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a1f      	ldr	r2, [pc, #124]	; (800b88c <I2C_Slave_ISR_DMA+0x29c>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d01d      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a1d      	ldr	r2, [pc, #116]	; (800b890 <I2C_Slave_ISR_DMA+0x2a0>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d017      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a1b      	ldr	r2, [pc, #108]	; (800b894 <I2C_Slave_ISR_DMA+0x2a4>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d011      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a19      	ldr	r2, [pc, #100]	; (800b898 <I2C_Slave_ISR_DMA+0x2a8>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d00b      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a17      	ldr	r2, [pc, #92]	; (800b89c <I2C_Slave_ISR_DMA+0x2ac>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d005      	beq.n	800b84e <I2C_Slave_ISR_DMA+0x25e>
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a15      	ldr	r2, [pc, #84]	; (800b8a0 <I2C_Slave_ISR_DMA+0x2b0>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d12a      	bne.n	800b8a4 <I2C_Slave_ISR_DMA+0x2b4>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	bf0c      	ite	eq
 800b85a:	2301      	moveq	r3, #1
 800b85c:	2300      	movne	r3, #0
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	e029      	b.n	800b8b6 <I2C_Slave_ISR_DMA+0x2c6>
 800b862:	bf00      	nop
 800b864:	40020010 	.word	0x40020010
 800b868:	40020028 	.word	0x40020028
 800b86c:	40020040 	.word	0x40020040
 800b870:	40020058 	.word	0x40020058
 800b874:	40020070 	.word	0x40020070
 800b878:	40020088 	.word	0x40020088
 800b87c:	400200a0 	.word	0x400200a0
 800b880:	400200b8 	.word	0x400200b8
 800b884:	40020410 	.word	0x40020410
 800b888:	40020428 	.word	0x40020428
 800b88c:	40020440 	.word	0x40020440
 800b890:	40020458 	.word	0x40020458
 800b894:	40020470 	.word	0x40020470
 800b898:	40020488 	.word	0x40020488
 800b89c:	400204a0 	.word	0x400204a0
 800b8a0:	400204b8 	.word	0x400204b8
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	bf0c      	ite	eq
 800b8b0:	2301      	moveq	r3, #1
 800b8b2:	2300      	movne	r3, #0
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d128      	bne.n	800b916 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b28      	cmp	r3, #40	; 0x28
 800b8ce:	d108      	bne.n	800b8e2 <I2C_Slave_ISR_DMA+0x2f2>
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8d6:	d104      	bne.n	800b8e2 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b8d8:	68b9      	ldr	r1, [r7, #8]
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f000 fcb0 	bl	800c240 <I2C_ITListenCplt>
 800b8e0:	e048      	b.n	800b974 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b29      	cmp	r3, #41	; 0x29
 800b8ec:	d10e      	bne.n	800b90c <I2C_Slave_ISR_DMA+0x31c>
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b8f4:	d00a      	beq.n	800b90c <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2210      	movs	r2, #16
 800b8fc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 fe0b 	bl	800c51a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f000 f918 	bl	800bb3a <I2C_ITSlaveSeqCplt>
 800b90a:	e033      	b.n	800b974 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2210      	movs	r2, #16
 800b912:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b914:	e034      	b.n	800b980 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2210      	movs	r2, #16
 800b91c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b922:	f043 0204 	orr.w	r2, r3, #4
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b930:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <I2C_Slave_ISR_DMA+0x350>
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b93e:	d11f      	bne.n	800b980 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b940:	7dfb      	ldrb	r3, [r7, #23]
 800b942:	2b21      	cmp	r3, #33	; 0x21
 800b944:	d002      	beq.n	800b94c <I2C_Slave_ISR_DMA+0x35c>
 800b946:	7dfb      	ldrb	r3, [r7, #23]
 800b948:	2b29      	cmp	r3, #41	; 0x29
 800b94a:	d103      	bne.n	800b954 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2221      	movs	r2, #33	; 0x21
 800b950:	631a      	str	r2, [r3, #48]	; 0x30
 800b952:	e008      	b.n	800b966 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b954:	7dfb      	ldrb	r3, [r7, #23]
 800b956:	2b22      	cmp	r3, #34	; 0x22
 800b958:	d002      	beq.n	800b960 <I2C_Slave_ISR_DMA+0x370>
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	2b2a      	cmp	r3, #42	; 0x2a
 800b95e:	d102      	bne.n	800b966 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2222      	movs	r2, #34	; 0x22
 800b964:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b96a:	4619      	mov	r1, r3
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f000 fcbd 	bl	800c2ec <I2C_ITError>
      if (treatdmanack == 1U)
 800b972:	e005      	b.n	800b980 <I2C_Slave_ISR_DMA+0x390>
 800b974:	e004      	b.n	800b980 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2210      	movs	r2, #16
 800b97c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b97e:	e011      	b.n	800b9a4 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800b980:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b982:	e00f      	b.n	800b9a4 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	08db      	lsrs	r3, r3, #3
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d009      	beq.n	800b9a4 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	08db      	lsrs	r3, r3, #3
 800b994:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b99c:	68b9      	ldr	r1, [r7, #8]
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f000 f80a 	bl	800b9b8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3720      	adds	r7, #32
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop

0800b9b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b9ce:	2b28      	cmp	r3, #40	; 0x28
 800b9d0:	d16a      	bne.n	800baa8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	0c1b      	lsrs	r3, r3, #16
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	0c1b      	lsrs	r3, r3, #16
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b9f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ba0c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	d138      	bne.n	800ba88 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800ba16:	897b      	ldrh	r3, [r7, #10]
 800ba18:	09db      	lsrs	r3, r3, #7
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	89bb      	ldrh	r3, [r7, #12]
 800ba1e:	4053      	eors	r3, r2
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	f003 0306 	and.w	r3, r3, #6
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d11c      	bne.n	800ba64 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800ba2a:	897b      	ldrh	r3, [r7, #10]
 800ba2c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba32:	1c5a      	adds	r2, r3, #1
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d13b      	bne.n	800bab8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2208      	movs	r2, #8
 800ba4c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ba56:	89ba      	ldrh	r2, [r7, #12]
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f7ff f91e 	bl	800ac9e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ba62:	e029      	b.n	800bab8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ba64:	893b      	ldrh	r3, [r7, #8]
 800ba66:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ba68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f001 f81d 	bl	800caac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ba7a:	89ba      	ldrh	r2, [r7, #12]
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7ff f90c 	bl	800ac9e <HAL_I2C_AddrCallback>
}
 800ba86:	e017      	b.n	800bab8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ba88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f001 f80d 	bl	800caac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ba9a:	89ba      	ldrh	r2, [r7, #12]
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff f8fc 	bl	800ac9e <HAL_I2C_AddrCallback>
}
 800baa6:	e007      	b.n	800bab8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2208      	movs	r2, #8
 800baae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800bab8:	bf00      	nop
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b21      	cmp	r3, #33	; 0x21
 800bada:	d115      	bne.n	800bb08 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2220      	movs	r2, #32
 800bae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2211      	movs	r2, #17
 800bae8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800baf0:	2101      	movs	r1, #1
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 ffda 	bl	800caac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7ff f8a4 	bl	800ac4e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bb06:	e014      	b.n	800bb32 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2220      	movs	r2, #32
 800bb0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2212      	movs	r2, #18
 800bb14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bb1c:	2102      	movs	r1, #2
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 ffc4 	bl	800caac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff f898 	bl	800ac62 <HAL_I2C_MasterRxCpltCallback>
}
 800bb32:	bf00      	nop
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	0b9b      	lsrs	r3, r3, #14
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d008      	beq.n	800bb70 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	e00d      	b.n	800bb8c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	0bdb      	lsrs	r3, r3, #15
 800bb74:	f003 0301 	and.w	r3, r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d007      	beq.n	800bb8c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb8a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	2b29      	cmp	r3, #41	; 0x29
 800bb96:	d112      	bne.n	800bbbe <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2228      	movs	r2, #40	; 0x28
 800bb9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2221      	movs	r2, #33	; 0x21
 800bba4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bba6:	2101      	movs	r1, #1
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 ff7f 	bl	800caac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff f85d 	bl	800ac76 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bbbc:	e017      	b.n	800bbee <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc8:	d111      	bne.n	800bbee <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2228      	movs	r2, #40	; 0x28
 800bbce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2222      	movs	r2, #34	; 0x22
 800bbd6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bbd8:	2102      	movs	r1, #2
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 ff66 	bl	800caac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7ff f84e 	bl	800ac8a <HAL_I2C_SlaveRxCpltCallback>
}
 800bbee:	bf00      	nop
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2220      	movs	r2, #32
 800bc0c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b21      	cmp	r3, #33	; 0x21
 800bc18:	d107      	bne.n	800bc2a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 ff45 	bl	800caac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2211      	movs	r2, #17
 800bc26:	631a      	str	r2, [r3, #48]	; 0x30
 800bc28:	e00c      	b.n	800bc44 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b22      	cmp	r3, #34	; 0x22
 800bc34:	d106      	bne.n	800bc44 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bc36:	2102      	movs	r1, #2
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 ff37 	bl	800caac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2212      	movs	r2, #18
 800bc42:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6859      	ldr	r1, [r3, #4]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	4b4d      	ldr	r3, [pc, #308]	; (800bd84 <I2C_ITMasterCplt+0x18c>)
 800bc50:	400b      	ands	r3, r1
 800bc52:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a4a      	ldr	r2, [pc, #296]	; (800bd88 <I2C_ITMasterCplt+0x190>)
 800bc5e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	091b      	lsrs	r3, r3, #4
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d009      	beq.n	800bc80 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2210      	movs	r2, #16
 800bc72:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc78:	f043 0204 	orr.w	r2, r3, #4
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b60      	cmp	r3, #96	; 0x60
 800bc8a:	d10b      	bne.n	800bca4 <I2C_ITMasterCplt+0xac>
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	089b      	lsrs	r3, r3, #2
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d005      	beq.n	800bca4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800bca2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fc38 	bl	800c51a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcae:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b60      	cmp	r3, #96	; 0x60
 800bcba:	d002      	beq.n	800bcc2 <I2C_ITMasterCplt+0xca>
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d006      	beq.n	800bcd0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fb0f 	bl	800c2ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bcce:	e054      	b.n	800bd7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b21      	cmp	r3, #33	; 0x21
 800bcda:	d124      	bne.n	800bd26 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2220      	movs	r2, #32
 800bce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b40      	cmp	r3, #64	; 0x40
 800bcf4:	d10b      	bne.n	800bd0e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7fe ffe1 	bl	800acce <HAL_I2C_MemTxCpltCallback>
}
 800bd0c:	e035      	b.n	800bd7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7fe ff95 	bl	800ac4e <HAL_I2C_MasterTxCpltCallback>
}
 800bd24:	e029      	b.n	800bd7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	2b22      	cmp	r3, #34	; 0x22
 800bd30:	d123      	bne.n	800bd7a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2220      	movs	r2, #32
 800bd36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b40      	cmp	r3, #64	; 0x40
 800bd4a:	d10b      	bne.n	800bd64 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f7fe ffc0 	bl	800ace2 <HAL_I2C_MemRxCpltCallback>
}
 800bd62:	e00a      	b.n	800bd7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7fe ff74 	bl	800ac62 <HAL_I2C_MasterRxCpltCallback>
}
 800bd7a:	bf00      	nop
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	fe00e800 	.word	0xfe00e800
 800bd88:	ffff0000 	.word	0xffff0000

0800bd8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b086      	sub	sp, #24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdae:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2220      	movs	r2, #32
 800bdb6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bdb8:	7afb      	ldrb	r3, [r7, #11]
 800bdba:	2b21      	cmp	r3, #33	; 0x21
 800bdbc:	d002      	beq.n	800bdc4 <I2C_ITSlaveCplt+0x38>
 800bdbe:	7afb      	ldrb	r3, [r7, #11]
 800bdc0:	2b29      	cmp	r3, #41	; 0x29
 800bdc2:	d108      	bne.n	800bdd6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bdc4:	f248 0101 	movw	r1, #32769	; 0x8001
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 fe6f 	bl	800caac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2221      	movs	r2, #33	; 0x21
 800bdd2:	631a      	str	r2, [r3, #48]	; 0x30
 800bdd4:	e019      	b.n	800be0a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bdd6:	7afb      	ldrb	r3, [r7, #11]
 800bdd8:	2b22      	cmp	r3, #34	; 0x22
 800bdda:	d002      	beq.n	800bde2 <I2C_ITSlaveCplt+0x56>
 800bddc:	7afb      	ldrb	r3, [r7, #11]
 800bdde:	2b2a      	cmp	r3, #42	; 0x2a
 800bde0:	d108      	bne.n	800bdf4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bde2:	f248 0102 	movw	r1, #32770	; 0x8002
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fe60 	bl	800caac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2222      	movs	r2, #34	; 0x22
 800bdf0:	631a      	str	r2, [r3, #48]	; 0x30
 800bdf2:	e00a      	b.n	800be0a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800bdf4:	7afb      	ldrb	r3, [r7, #11]
 800bdf6:	2b28      	cmp	r3, #40	; 0x28
 800bdf8:	d107      	bne.n	800be0a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800bdfa:	f248 0103 	movw	r1, #32771	; 0x8003
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fe54 	bl	800caac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be18:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	6859      	ldr	r1, [r3, #4]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	4b80      	ldr	r3, [pc, #512]	; (800c028 <I2C_ITSlaveCplt+0x29c>)
 800be26:	400b      	ands	r3, r1
 800be28:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fb75 	bl	800c51a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	0b9b      	lsrs	r3, r3, #14
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d07a      	beq.n	800bf32 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800be4a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 8112 	beq.w	800c07a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a73      	ldr	r2, [pc, #460]	; (800c02c <I2C_ITSlaveCplt+0x2a0>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d059      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a71      	ldr	r2, [pc, #452]	; (800c030 <I2C_ITSlaveCplt+0x2a4>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d053      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a6f      	ldr	r2, [pc, #444]	; (800c034 <I2C_ITSlaveCplt+0x2a8>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d04d      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a6d      	ldr	r2, [pc, #436]	; (800c038 <I2C_ITSlaveCplt+0x2ac>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d047      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a6b      	ldr	r2, [pc, #428]	; (800c03c <I2C_ITSlaveCplt+0x2b0>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d041      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a69      	ldr	r2, [pc, #420]	; (800c040 <I2C_ITSlaveCplt+0x2b4>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d03b      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a67      	ldr	r2, [pc, #412]	; (800c044 <I2C_ITSlaveCplt+0x2b8>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d035      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a65      	ldr	r2, [pc, #404]	; (800c048 <I2C_ITSlaveCplt+0x2bc>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d02f      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a63      	ldr	r2, [pc, #396]	; (800c04c <I2C_ITSlaveCplt+0x2c0>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d029      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a61      	ldr	r2, [pc, #388]	; (800c050 <I2C_ITSlaveCplt+0x2c4>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d023      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a5f      	ldr	r2, [pc, #380]	; (800c054 <I2C_ITSlaveCplt+0x2c8>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d01d      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a5d      	ldr	r2, [pc, #372]	; (800c058 <I2C_ITSlaveCplt+0x2cc>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d017      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a5b      	ldr	r2, [pc, #364]	; (800c05c <I2C_ITSlaveCplt+0x2d0>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d011      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a59      	ldr	r2, [pc, #356]	; (800c060 <I2C_ITSlaveCplt+0x2d4>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d00b      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a57      	ldr	r2, [pc, #348]	; (800c064 <I2C_ITSlaveCplt+0x2d8>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d005      	beq.n	800bf16 <I2C_ITSlaveCplt+0x18a>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a55      	ldr	r2, [pc, #340]	; (800c068 <I2C_ITSlaveCplt+0x2dc>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d105      	bne.n	800bf22 <I2C_ITSlaveCplt+0x196>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	e004      	b.n	800bf2c <I2C_ITSlaveCplt+0x1a0>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	8553      	strh	r3, [r2, #42]	; 0x2a
 800bf30:	e0a3      	b.n	800c07a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	0bdb      	lsrs	r3, r3, #15
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f000 809d 	beq.w	800c07a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf4e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 8090 	beq.w	800c07a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a32      	ldr	r2, [pc, #200]	; (800c02c <I2C_ITSlaveCplt+0x2a0>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d059      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a30      	ldr	r2, [pc, #192]	; (800c030 <I2C_ITSlaveCplt+0x2a4>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d053      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a2e      	ldr	r2, [pc, #184]	; (800c034 <I2C_ITSlaveCplt+0x2a8>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d04d      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a2c      	ldr	r2, [pc, #176]	; (800c038 <I2C_ITSlaveCplt+0x2ac>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d047      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a2a      	ldr	r2, [pc, #168]	; (800c03c <I2C_ITSlaveCplt+0x2b0>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d041      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a28      	ldr	r2, [pc, #160]	; (800c040 <I2C_ITSlaveCplt+0x2b4>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d03b      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a26      	ldr	r2, [pc, #152]	; (800c044 <I2C_ITSlaveCplt+0x2b8>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d035      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a24      	ldr	r2, [pc, #144]	; (800c048 <I2C_ITSlaveCplt+0x2bc>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d02f      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a22      	ldr	r2, [pc, #136]	; (800c04c <I2C_ITSlaveCplt+0x2c0>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d029      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a20      	ldr	r2, [pc, #128]	; (800c050 <I2C_ITSlaveCplt+0x2c4>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d023      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a1e      	ldr	r2, [pc, #120]	; (800c054 <I2C_ITSlaveCplt+0x2c8>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d01d      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a1c      	ldr	r2, [pc, #112]	; (800c058 <I2C_ITSlaveCplt+0x2cc>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d017      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a1a      	ldr	r2, [pc, #104]	; (800c05c <I2C_ITSlaveCplt+0x2d0>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d011      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a18      	ldr	r2, [pc, #96]	; (800c060 <I2C_ITSlaveCplt+0x2d4>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d00b      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a16      	ldr	r2, [pc, #88]	; (800c064 <I2C_ITSlaveCplt+0x2d8>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d005      	beq.n	800c01a <I2C_ITSlaveCplt+0x28e>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a14      	ldr	r2, [pc, #80]	; (800c068 <I2C_ITSlaveCplt+0x2dc>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d128      	bne.n	800c06c <I2C_ITSlaveCplt+0x2e0>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	b29b      	uxth	r3, r3
 800c024:	e027      	b.n	800c076 <I2C_ITSlaveCplt+0x2ea>
 800c026:	bf00      	nop
 800c028:	fe00e800 	.word	0xfe00e800
 800c02c:	40020010 	.word	0x40020010
 800c030:	40020028 	.word	0x40020028
 800c034:	40020040 	.word	0x40020040
 800c038:	40020058 	.word	0x40020058
 800c03c:	40020070 	.word	0x40020070
 800c040:	40020088 	.word	0x40020088
 800c044:	400200a0 	.word	0x400200a0
 800c048:	400200b8 	.word	0x400200b8
 800c04c:	40020410 	.word	0x40020410
 800c050:	40020428 	.word	0x40020428
 800c054:	40020440 	.word	0x40020440
 800c058:	40020458 	.word	0x40020458
 800c05c:	40020470 	.word	0x40020470
 800c060:	40020488 	.word	0x40020488
 800c064:	400204a0 	.word	0x400204a0
 800c068:	400204b8 	.word	0x400204b8
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	b29b      	uxth	r3, r3
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	089b      	lsrs	r3, r3, #2
 800c07e:	f003 0301 	and.w	r3, r3, #1
 800c082:	2b00      	cmp	r3, #0
 800c084:	d020      	beq.n	800c0c8 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	f023 0304 	bic.w	r3, r3, #4
 800c08c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c098:	b2d2      	uxtb	r2, r2
 800c09a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a0:	1c5a      	adds	r2, r3, #1
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00c      	beq.n	800c0c8 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d005      	beq.n	800c0de <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d6:	f043 0204 	orr.w	r2, r3, #4
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	091b      	lsrs	r3, r3, #4
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d04a      	beq.n	800c180 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	091b      	lsrs	r3, r3, #4
 800c0ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d044      	beq.n	800c180 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d128      	bne.n	800c152 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c106:	b2db      	uxtb	r3, r3
 800c108:	2b28      	cmp	r3, #40	; 0x28
 800c10a:	d108      	bne.n	800c11e <I2C_ITSlaveCplt+0x392>
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c112:	d104      	bne.n	800c11e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c114:	6979      	ldr	r1, [r7, #20]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 f892 	bl	800c240 <I2C_ITListenCplt>
 800c11c:	e030      	b.n	800c180 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c124:	b2db      	uxtb	r3, r3
 800c126:	2b29      	cmp	r3, #41	; 0x29
 800c128:	d10e      	bne.n	800c148 <I2C_ITSlaveCplt+0x3bc>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c130:	d00a      	beq.n	800c148 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2210      	movs	r2, #16
 800c138:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 f9ed 	bl	800c51a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff fcfa 	bl	800bb3a <I2C_ITSlaveSeqCplt>
 800c146:	e01b      	b.n	800c180 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2210      	movs	r2, #16
 800c14e:	61da      	str	r2, [r3, #28]
 800c150:	e016      	b.n	800c180 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2210      	movs	r2, #16
 800c158:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c15e:	f043 0204 	orr.w	r2, r3, #4
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <I2C_ITSlaveCplt+0x3e8>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c172:	d105      	bne.n	800c180 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f8b6 	bl	800c2ec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c192:	2b00      	cmp	r3, #0
 800c194:	d010      	beq.n	800c1b8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 f8a5 	bl	800c2ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b28      	cmp	r3, #40	; 0x28
 800c1ac:	d141      	bne.n	800c232 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c1ae:	6979      	ldr	r1, [r7, #20]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f845 	bl	800c240 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c1b6:	e03c      	b.n	800c232 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c1c0:	d014      	beq.n	800c1ec <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7ff fcb9 	bl	800bb3a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a1c      	ldr	r2, [pc, #112]	; (800c23c <I2C_ITSlaveCplt+0x4b0>)
 800c1cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2220      	movs	r2, #32
 800c1d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7fe fd68 	bl	800acba <HAL_I2C_ListenCpltCallback>
}
 800c1ea:	e022      	b.n	800c232 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b22      	cmp	r3, #34	; 0x22
 800c1f6:	d10e      	bne.n	800c216 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2220      	movs	r2, #32
 800c1fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7fe fd3b 	bl	800ac8a <HAL_I2C_SlaveRxCpltCallback>
}
 800c214:	e00d      	b.n	800c232 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2220      	movs	r2, #32
 800c21a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7fe fd22 	bl	800ac76 <HAL_I2C_SlaveTxCpltCallback>
}
 800c232:	bf00      	nop
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	ffff0000 	.word	0xffff0000

0800c240 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a26      	ldr	r2, [pc, #152]	; (800c2e8 <I2C_ITListenCplt+0xa8>)
 800c24e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2220      	movs	r2, #32
 800c25a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	089b      	lsrs	r3, r3, #2
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	d022      	beq.n	800c2be <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c282:	b2d2      	uxtb	r2, r2
 800c284:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c294:	2b00      	cmp	r3, #0
 800c296:	d012      	beq.n	800c2be <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c29c:	3b01      	subs	r3, #1
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2b6:	f043 0204 	orr.w	r2, r3, #4
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c2be:	f248 0103 	movw	r1, #32771	; 0x8003
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fbf2 	bl	800caac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2210      	movs	r2, #16
 800c2ce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7fe fcee 	bl	800acba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c2de:	bf00      	nop
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	ffff0000 	.word	0xffff0000

0800c2ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2fc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a6d      	ldr	r2, [pc, #436]	; (800c4c0 <I2C_ITError+0x1d4>)
 800c30a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	431a      	orrs	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
 800c320:	2b28      	cmp	r3, #40	; 0x28
 800c322:	d005      	beq.n	800c330 <I2C_ITError+0x44>
 800c324:	7bfb      	ldrb	r3, [r7, #15]
 800c326:	2b29      	cmp	r3, #41	; 0x29
 800c328:	d002      	beq.n	800c330 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c32a:	7bfb      	ldrb	r3, [r7, #15]
 800c32c:	2b2a      	cmp	r3, #42	; 0x2a
 800c32e:	d10b      	bne.n	800c348 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c330:	2103      	movs	r1, #3
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fbba 	bl	800caac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2228      	movs	r2, #40	; 0x28
 800c33c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4a60      	ldr	r2, [pc, #384]	; (800c4c4 <I2C_ITError+0x1d8>)
 800c344:	635a      	str	r2, [r3, #52]	; 0x34
 800c346:	e030      	b.n	800c3aa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c348:	f248 0103 	movw	r1, #32771	; 0x8003
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fbad 	bl	800caac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f8e1 	bl	800c51a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	2b60      	cmp	r3, #96	; 0x60
 800c362:	d01f      	beq.n	800c3a4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2220      	movs	r2, #32
 800c368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	699b      	ldr	r3, [r3, #24]
 800c372:	f003 0320 	and.w	r3, r3, #32
 800c376:	2b20      	cmp	r3, #32
 800c378:	d114      	bne.n	800c3a4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	f003 0310 	and.w	r3, r3, #16
 800c384:	2b10      	cmp	r3, #16
 800c386:	d109      	bne.n	800c39c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2210      	movs	r2, #16
 800c38e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c394:	f043 0204 	orr.w	r2, r3, #4
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2220      	movs	r2, #32
 800c3a2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d039      	beq.n	800c42c <I2C_ITError+0x140>
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	2b11      	cmp	r3, #17
 800c3bc:	d002      	beq.n	800c3c4 <I2C_ITError+0xd8>
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2b21      	cmp	r3, #33	; 0x21
 800c3c2:	d133      	bne.n	800c42c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3d2:	d107      	bne.n	800c3e4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c3e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fd f857 	bl	800949c <HAL_DMA_GetState>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d017      	beq.n	800c424 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f8:	4a33      	ldr	r2, [pc, #204]	; (800c4c8 <I2C_ITError+0x1dc>)
 800c3fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fb fed7 	bl	80081bc <HAL_DMA_Abort_IT>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d04d      	beq.n	800c4b0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c41e:	4610      	mov	r0, r2
 800c420:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c422:	e045      	b.n	800c4b0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f851 	bl	800c4cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c42a:	e041      	b.n	800c4b0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c430:	2b00      	cmp	r3, #0
 800c432:	d039      	beq.n	800c4a8 <I2C_ITError+0x1bc>
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b12      	cmp	r3, #18
 800c438:	d002      	beq.n	800c440 <I2C_ITError+0x154>
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	2b22      	cmp	r3, #34	; 0x22
 800c43e:	d133      	bne.n	800c4a8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c44a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c44e:	d107      	bne.n	800c460 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c45e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c464:	4618      	mov	r0, r3
 800c466:	f7fd f819 	bl	800949c <HAL_DMA_GetState>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d017      	beq.n	800c4a0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c474:	4a14      	ldr	r2, [pc, #80]	; (800c4c8 <I2C_ITError+0x1dc>)
 800c476:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c484:	4618      	mov	r0, r3
 800c486:	f7fb fe99 	bl	80081bc <HAL_DMA_Abort_IT>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d011      	beq.n	800c4b4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c49a:	4610      	mov	r0, r2
 800c49c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c49e:	e009      	b.n	800c4b4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 f813 	bl	800c4cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c4a6:	e005      	b.n	800c4b4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 f80f 	bl	800c4cc <I2C_TreatErrorCallback>
  }
}
 800c4ae:	e002      	b.n	800c4b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c4b0:	bf00      	nop
 800c4b2:	e000      	b.n	800c4b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c4b4:	bf00      	nop
}
 800c4b6:	bf00      	nop
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	ffff0000 	.word	0xffff0000
 800c4c4:	0800afa3 	.word	0x0800afa3
 800c4c8:	0800c905 	.word	0x0800c905

0800c4cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b60      	cmp	r3, #96	; 0x60
 800c4de:	d10e      	bne.n	800c4fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2220      	movs	r2, #32
 800c4e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7fe fc07 	bl	800ad0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c4fc:	e009      	b.n	800c512 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7fe fbf2 	bl	800acf6 <HAL_I2C_ErrorCallback>
}
 800c512:	bf00      	nop
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	f003 0302 	and.w	r3, r3, #2
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d103      	bne.n	800c538 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2200      	movs	r2, #0
 800c536:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	f003 0301 	and.w	r3, r3, #1
 800c542:	2b01      	cmp	r3, #1
 800c544:	d007      	beq.n	800c556 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	699a      	ldr	r2, [r3, #24]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f042 0201 	orr.w	r2, r2, #1
 800c554:	619a      	str	r2, [r3, #24]
  }
}
 800c556:	bf00      	nop
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr

0800c562 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b084      	sub	sp, #16
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c57e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c584:	b29b      	uxth	r3, r3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d104      	bne.n	800c594 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c58a:	2120      	movs	r1, #32
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 fa09 	bl	800c9a4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c592:	e02d      	b.n	800c5f0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c59c:	441a      	add	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	2bff      	cmp	r3, #255	; 0xff
 800c5aa:	d903      	bls.n	800c5b4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	22ff      	movs	r2, #255	; 0xff
 800c5b0:	851a      	strh	r2, [r3, #40]	; 0x28
 800c5b2:	e004      	b.n	800c5be <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3328      	adds	r3, #40	; 0x28
 800c5ce:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c5d4:	f7fb f86a 	bl	80076ac <HAL_DMA_Start_IT>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d004      	beq.n	800c5e8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c5de:	2110      	movs	r1, #16
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f7ff fe83 	bl	800c2ec <I2C_ITError>
}
 800c5e6:	e003      	b.n	800c5f0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c5e8:	2140      	movs	r1, #64	; 0x40
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f000 f9da 	bl	800c9a4 <I2C_Enable_IRQ>
}
 800c5f0:	bf00      	nop
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c604:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c614:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d104      	bne.n	800c62a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c620:	2120      	movs	r1, #32
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f000 f9be 	bl	800c9a4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c628:	e02d      	b.n	800c686 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c632:	441a      	add	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	2bff      	cmp	r3, #255	; 0xff
 800c640:	d903      	bls.n	800c64a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	22ff      	movs	r2, #255	; 0xff
 800c646:	851a      	strh	r2, [r3, #40]	; 0x28
 800c648:	e004      	b.n	800c654 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c64e:	b29a      	uxth	r2, r3
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3324      	adds	r3, #36	; 0x24
 800c65e:	4619      	mov	r1, r3
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c664:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c66a:	f7fb f81f 	bl	80076ac <HAL_DMA_Start_IT>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d004      	beq.n	800c67e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c674:	2110      	movs	r1, #16
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f7ff fe38 	bl	800c2ec <I2C_ITError>
}
 800c67c:	e003      	b.n	800c686 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c67e:	2140      	movs	r1, #64	; 0x40
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 f98f 	bl	800c9a4 <I2C_Enable_IRQ>
}
 800c686:	bf00      	nop
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
	...

0800c690 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800c698:	2300      	movs	r3, #0
 800c69a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d076      	beq.n	800c798 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a71      	ldr	r2, [pc, #452]	; (800c878 <I2C_DMAError+0x1e8>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d059      	beq.n	800c76a <I2C_DMAError+0xda>
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a6f      	ldr	r2, [pc, #444]	; (800c87c <I2C_DMAError+0x1ec>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d053      	beq.n	800c76a <I2C_DMAError+0xda>
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a6d      	ldr	r2, [pc, #436]	; (800c880 <I2C_DMAError+0x1f0>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d04d      	beq.n	800c76a <I2C_DMAError+0xda>
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a6b      	ldr	r2, [pc, #428]	; (800c884 <I2C_DMAError+0x1f4>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d047      	beq.n	800c76a <I2C_DMAError+0xda>
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a69      	ldr	r2, [pc, #420]	; (800c888 <I2C_DMAError+0x1f8>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d041      	beq.n	800c76a <I2C_DMAError+0xda>
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a67      	ldr	r2, [pc, #412]	; (800c88c <I2C_DMAError+0x1fc>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d03b      	beq.n	800c76a <I2C_DMAError+0xda>
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a65      	ldr	r2, [pc, #404]	; (800c890 <I2C_DMAError+0x200>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d035      	beq.n	800c76a <I2C_DMAError+0xda>
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a63      	ldr	r2, [pc, #396]	; (800c894 <I2C_DMAError+0x204>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d02f      	beq.n	800c76a <I2C_DMAError+0xda>
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a61      	ldr	r2, [pc, #388]	; (800c898 <I2C_DMAError+0x208>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d029      	beq.n	800c76a <I2C_DMAError+0xda>
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a5f      	ldr	r2, [pc, #380]	; (800c89c <I2C_DMAError+0x20c>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d023      	beq.n	800c76a <I2C_DMAError+0xda>
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a5d      	ldr	r2, [pc, #372]	; (800c8a0 <I2C_DMAError+0x210>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d01d      	beq.n	800c76a <I2C_DMAError+0xda>
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a5b      	ldr	r2, [pc, #364]	; (800c8a4 <I2C_DMAError+0x214>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d017      	beq.n	800c76a <I2C_DMAError+0xda>
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a59      	ldr	r2, [pc, #356]	; (800c8a8 <I2C_DMAError+0x218>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d011      	beq.n	800c76a <I2C_DMAError+0xda>
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a57      	ldr	r2, [pc, #348]	; (800c8ac <I2C_DMAError+0x21c>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d00b      	beq.n	800c76a <I2C_DMAError+0xda>
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a55      	ldr	r2, [pc, #340]	; (800c8b0 <I2C_DMAError+0x220>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d005      	beq.n	800c76a <I2C_DMAError+0xda>
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a53      	ldr	r2, [pc, #332]	; (800c8b4 <I2C_DMAError+0x224>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d109      	bne.n	800c77e <I2C_DMAError+0xee>
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	bf0c      	ite	eq
 800c776:	2301      	moveq	r3, #1
 800c778:	2300      	movne	r3, #0
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	e008      	b.n	800c790 <I2C_DMAError+0x100>
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	bf0c      	ite	eq
 800c78a:	2301      	moveq	r3, #1
 800c78c:	2300      	movne	r3, #0
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800c794:	2301      	movs	r3, #1
 800c796:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 8098 	beq.w	800c8d2 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a33      	ldr	r2, [pc, #204]	; (800c878 <I2C_DMAError+0x1e8>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d059      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a31      	ldr	r2, [pc, #196]	; (800c87c <I2C_DMAError+0x1ec>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d053      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a2f      	ldr	r2, [pc, #188]	; (800c880 <I2C_DMAError+0x1f0>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d04d      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a2d      	ldr	r2, [pc, #180]	; (800c884 <I2C_DMAError+0x1f4>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d047      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a2b      	ldr	r2, [pc, #172]	; (800c888 <I2C_DMAError+0x1f8>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d041      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a29      	ldr	r2, [pc, #164]	; (800c88c <I2C_DMAError+0x1fc>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d03b      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a27      	ldr	r2, [pc, #156]	; (800c890 <I2C_DMAError+0x200>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d035      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a25      	ldr	r2, [pc, #148]	; (800c894 <I2C_DMAError+0x204>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d02f      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a23      	ldr	r2, [pc, #140]	; (800c898 <I2C_DMAError+0x208>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d029      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a21      	ldr	r2, [pc, #132]	; (800c89c <I2C_DMAError+0x20c>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d023      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a1f      	ldr	r2, [pc, #124]	; (800c8a0 <I2C_DMAError+0x210>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d01d      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a1d      	ldr	r2, [pc, #116]	; (800c8a4 <I2C_DMAError+0x214>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d017      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a1b      	ldr	r2, [pc, #108]	; (800c8a8 <I2C_DMAError+0x218>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d011      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a19      	ldr	r2, [pc, #100]	; (800c8ac <I2C_DMAError+0x21c>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d00b      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a17      	ldr	r2, [pc, #92]	; (800c8b0 <I2C_DMAError+0x220>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d005      	beq.n	800c862 <I2C_DMAError+0x1d2>
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a15      	ldr	r2, [pc, #84]	; (800c8b4 <I2C_DMAError+0x224>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d12a      	bne.n	800c8b8 <I2C_DMAError+0x228>
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	bf0c      	ite	eq
 800c86e:	2301      	moveq	r3, #1
 800c870:	2300      	movne	r3, #0
 800c872:	b2db      	uxtb	r3, r3
 800c874:	e029      	b.n	800c8ca <I2C_DMAError+0x23a>
 800c876:	bf00      	nop
 800c878:	40020010 	.word	0x40020010
 800c87c:	40020028 	.word	0x40020028
 800c880:	40020040 	.word	0x40020040
 800c884:	40020058 	.word	0x40020058
 800c888:	40020070 	.word	0x40020070
 800c88c:	40020088 	.word	0x40020088
 800c890:	400200a0 	.word	0x400200a0
 800c894:	400200b8 	.word	0x400200b8
 800c898:	40020410 	.word	0x40020410
 800c89c:	40020428 	.word	0x40020428
 800c8a0:	40020440 	.word	0x40020440
 800c8a4:	40020458 	.word	0x40020458
 800c8a8:	40020470 	.word	0x40020470
 800c8ac:	40020488 	.word	0x40020488
 800c8b0:	400204a0 	.word	0x400204a0
 800c8b4:	400204b8 	.word	0x400204b8
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	bf0c      	ite	eq
 800c8c4:	2301      	moveq	r3, #1
 800c8c6:	2300      	movne	r3, #0
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7fc fdf0 	bl	80094b8 <HAL_DMA_GetError>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d00e      	beq.n	800c8fc <I2C_DMAError+0x26c>
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d00b      	beq.n	800c8fc <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	685a      	ldr	r2, [r3, #4]
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c8f2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c8f4:	2110      	movs	r1, #16
 800c8f6:	68b8      	ldr	r0, [r7, #8]
 800c8f8:	f7ff fcf8 	bl	800c2ec <I2C_ITError>
  }
}
 800c8fc:	bf00      	nop
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c910:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91e:	2200      	movs	r2, #0
 800c920:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c926:	2b00      	cmp	r3, #0
 800c928:	d003      	beq.n	800c932 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c92e:	2200      	movs	r2, #0
 800c930:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f7ff fdca 	bl	800c4cc <I2C_TreatErrorCallback>
}
 800c938:	bf00      	nop
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c940:	b480      	push	{r7}
 800c942:	b087      	sub	sp, #28
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	607b      	str	r3, [r7, #4]
 800c94a:	460b      	mov	r3, r1
 800c94c:	817b      	strh	r3, [r7, #10]
 800c94e:	4613      	mov	r3, r2
 800c950:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c952:	897b      	ldrh	r3, [r7, #10]
 800c954:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c958:	7a7b      	ldrb	r3, [r7, #9]
 800c95a:	041b      	lsls	r3, r3, #16
 800c95c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c960:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	4313      	orrs	r3, r2
 800c96a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c96e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	0d5b      	lsrs	r3, r3, #21
 800c97a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c97e:	4b08      	ldr	r3, [pc, #32]	; (800c9a0 <I2C_TransferConfig+0x60>)
 800c980:	430b      	orrs	r3, r1
 800c982:	43db      	mvns	r3, r3
 800c984:	ea02 0103 	and.w	r1, r2, r3
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	697a      	ldr	r2, [r7, #20]
 800c98e:	430a      	orrs	r2, r1
 800c990:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c992:	bf00      	nop
 800c994:	371c      	adds	r7, #28
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	03ff63ff 	.word	0x03ff63ff

0800c9a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9b8:	4a39      	ldr	r2, [pc, #228]	; (800caa0 <I2C_Enable_IRQ+0xfc>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d032      	beq.n	800ca24 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c9c2:	4a38      	ldr	r2, [pc, #224]	; (800caa4 <I2C_Enable_IRQ+0x100>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d02d      	beq.n	800ca24 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c9cc:	4a36      	ldr	r2, [pc, #216]	; (800caa8 <I2C_Enable_IRQ+0x104>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d028      	beq.n	800ca24 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c9d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	da03      	bge.n	800c9e2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c9e0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c9e2:	887b      	ldrh	r3, [r7, #2]
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d003      	beq.n	800c9f4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800c9f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c9f4:	887b      	ldrh	r3, [r7, #2]
 800c9f6:	f003 0302 	and.w	r3, r3, #2
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d003      	beq.n	800ca06 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ca04:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ca06:	887b      	ldrh	r3, [r7, #2]
 800ca08:	2b10      	cmp	r3, #16
 800ca0a:	d103      	bne.n	800ca14 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ca12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ca14:	887b      	ldrh	r3, [r7, #2]
 800ca16:	2b20      	cmp	r3, #32
 800ca18:	d133      	bne.n	800ca82 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f043 0320 	orr.w	r3, r3, #32
 800ca20:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ca22:	e02e      	b.n	800ca82 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ca24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	da03      	bge.n	800ca34 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ca32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ca34:	887b      	ldrh	r3, [r7, #2]
 800ca36:	f003 0301 	and.w	r3, r3, #1
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ca44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ca46:	887b      	ldrh	r3, [r7, #2]
 800ca48:	f003 0302 	and.w	r3, r3, #2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ca56:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ca58:	887b      	ldrh	r3, [r7, #2]
 800ca5a:	2b10      	cmp	r3, #16
 800ca5c:	d103      	bne.n	800ca66 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ca64:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ca66:	887b      	ldrh	r3, [r7, #2]
 800ca68:	2b20      	cmp	r3, #32
 800ca6a:	d103      	bne.n	800ca74 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ca72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ca74:	887b      	ldrh	r3, [r7, #2]
 800ca76:	2b40      	cmp	r3, #64	; 0x40
 800ca78:	d103      	bne.n	800ca82 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca80:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	6819      	ldr	r1, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	430a      	orrs	r2, r1
 800ca90:	601a      	str	r2, [r3, #0]
}
 800ca92:	bf00      	nop
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	0800b1ab 	.word	0x0800b1ab
 800caa4:	0800b5f1 	.word	0x0800b5f1
 800caa8:	0800b391 	.word	0x0800b391

0800caac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	460b      	mov	r3, r1
 800cab6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800cab8:	2300      	movs	r3, #0
 800caba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cabc:	887b      	ldrh	r3, [r7, #2]
 800cabe:	f003 0301 	and.w	r3, r3, #1
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00f      	beq.n	800cae6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800cacc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cada:	2b28      	cmp	r3, #40	; 0x28
 800cadc:	d003      	beq.n	800cae6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cae4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cae6:	887b      	ldrh	r3, [r7, #2]
 800cae8:	f003 0302 	and.w	r3, r3, #2
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00f      	beq.n	800cb10 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800caf6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cb04:	2b28      	cmp	r3, #40	; 0x28
 800cb06:	d003      	beq.n	800cb10 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cb0e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cb10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	da03      	bge.n	800cb20 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cb1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cb20:	887b      	ldrh	r3, [r7, #2]
 800cb22:	2b10      	cmp	r3, #16
 800cb24:	d103      	bne.n	800cb2e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cb2c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cb2e:	887b      	ldrh	r3, [r7, #2]
 800cb30:	2b20      	cmp	r3, #32
 800cb32:	d103      	bne.n	800cb3c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f043 0320 	orr.w	r3, r3, #32
 800cb3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800cb3c:	887b      	ldrh	r3, [r7, #2]
 800cb3e:	2b40      	cmp	r3, #64	; 0x40
 800cb40:	d103      	bne.n	800cb4a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb48:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6819      	ldr	r1, [r3, #0]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	43da      	mvns	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	400a      	ands	r2, r1
 800cb5a:	601a      	str	r2, [r3, #0]
}
 800cb5c:	bf00      	nop
 800cb5e:	3714      	adds	r7, #20
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b20      	cmp	r3, #32
 800cb7c:	d138      	bne.n	800cbf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d101      	bne.n	800cb8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cb88:	2302      	movs	r3, #2
 800cb8a:	e032      	b.n	800cbf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2224      	movs	r2, #36	; 0x24
 800cb98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f022 0201 	bic.w	r2, r2, #1
 800cbaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cbba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	6819      	ldr	r1, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	430a      	orrs	r2, r1
 800cbca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f042 0201 	orr.w	r2, r2, #1
 800cbda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2220      	movs	r2, #32
 800cbe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	e000      	b.n	800cbf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cbf0:	2302      	movs	r3, #2
  }
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	370c      	adds	r7, #12
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr

0800cbfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cbfe:	b480      	push	{r7}
 800cc00:	b085      	sub	sp, #20
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b20      	cmp	r3, #32
 800cc12:	d139      	bne.n	800cc88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d101      	bne.n	800cc22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cc1e:	2302      	movs	r3, #2
 800cc20:	e033      	b.n	800cc8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2201      	movs	r2, #1
 800cc26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2224      	movs	r2, #36	; 0x24
 800cc2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f022 0201 	bic.w	r2, r2, #1
 800cc40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cc50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	021b      	lsls	r3, r3, #8
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f042 0201 	orr.w	r2, r2, #1
 800cc72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2220      	movs	r2, #32
 800cc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	e000      	b.n	800cc8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cc88:	2302      	movs	r3, #2
  }
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
	...

0800cc98 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cca0:	4b0d      	ldr	r3, [pc, #52]	; (800ccd8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800cca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cca6:	4a0c      	ldr	r2, [pc, #48]	; (800ccd8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800cca8:	f043 0302 	orr.w	r3, r3, #2
 800ccac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ccb0:	4b09      	ldr	r3, [pc, #36]	; (800ccd8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800ccb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ccb6:	f003 0302 	and.w	r3, r3, #2
 800ccba:	60fb      	str	r3, [r7, #12]
 800ccbc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800ccbe:	4b07      	ldr	r3, [pc, #28]	; (800ccdc <HAL_I2CEx_EnableFastModePlus+0x44>)
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	4906      	ldr	r1, [pc, #24]	; (800ccdc <HAL_I2CEx_EnableFastModePlus+0x44>)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	604b      	str	r3, [r1, #4]
}
 800ccca:	bf00      	nop
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
 800ccd6:	bf00      	nop
 800ccd8:	58024400 	.word	0x58024400
 800ccdc:	58000400 	.word	0x58000400

0800cce0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	e041      	b.n	800cd76 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ccfa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f245 5255 	movw	r2, #21845	; 0x5555
 800cd04:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	6852      	ldr	r2, [r2, #4]
 800cd0e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	6892      	ldr	r2, [r2, #8]
 800cd18:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800cd1a:	f7f8 f843 	bl	8004da4 <HAL_GetTick>
 800cd1e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800cd20:	e00f      	b.n	800cd42 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800cd22:	f7f8 f83f 	bl	8004da4 <HAL_GetTick>
 800cd26:	4602      	mov	r2, r0
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	1ad3      	subs	r3, r2, r3
 800cd2c:	2b31      	cmp	r3, #49	; 0x31
 800cd2e:	d908      	bls.n	800cd42 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	f003 0307 	and.w	r3, r3, #7
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d001      	beq.n	800cd42 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800cd3e:	2303      	movs	r3, #3
 800cd40:	e019      	b.n	800cd76 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	f003 0307 	and.w	r3, r3, #7
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1e8      	bne.n	800cd22 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	691a      	ldr	r2, [r3, #16]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d005      	beq.n	800cd6a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	68d2      	ldr	r2, [r2, #12]
 800cd66:	611a      	str	r2, [r3, #16]
 800cd68:	e004      	b.n	800cd74 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800cd72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800cd7e:	b480      	push	{r7}
 800cd80:	b083      	sub	sp, #12
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800cd8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
	...

0800cda0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800cdac:	4b18      	ldr	r3, [pc, #96]	; (800ce10 <HAL_PWR_EnterSTOPMode+0x70>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f023 0201 	bic.w	r2, r3, #1
 800cdb4:	4916      	ldr	r1, [pc, #88]	; (800ce10 <HAL_PWR_EnterSTOPMode+0x70>)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800cdbc:	4b14      	ldr	r3, [pc, #80]	; (800ce10 <HAL_PWR_EnterSTOPMode+0x70>)
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	4a13      	ldr	r2, [pc, #76]	; (800ce10 <HAL_PWR_EnterSTOPMode+0x70>)
 800cdc2:	f023 0305 	bic.w	r3, r3, #5
 800cdc6:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800cdc8:	4b11      	ldr	r3, [pc, #68]	; (800ce10 <HAL_PWR_EnterSTOPMode+0x70>)
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	4a10      	ldr	r2, [pc, #64]	; (800ce10 <HAL_PWR_EnterSTOPMode+0x70>)
 800cdce:	f023 0302 	bic.w	r3, r3, #2
 800cdd2:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800cdd4:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <HAL_PWR_EnterSTOPMode+0x74>)
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	4a0e      	ldr	r2, [pc, #56]	; (800ce14 <HAL_PWR_EnterSTOPMode+0x74>)
 800cdda:	f043 0304 	orr.w	r3, r3, #4
 800cdde:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800cde0:	f3bf 8f4f 	dsb	sy
}
 800cde4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cde6:	f3bf 8f6f 	isb	sy
}
 800cdea:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800cdec:	78fb      	ldrb	r3, [r7, #3]
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d101      	bne.n	800cdf6 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800cdf2:	bf30      	wfi
 800cdf4:	e000      	b.n	800cdf8 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800cdf6:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800cdf8:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <HAL_PWR_EnterSTOPMode+0x74>)
 800cdfa:	691b      	ldr	r3, [r3, #16]
 800cdfc:	4a05      	ldr	r2, [pc, #20]	; (800ce14 <HAL_PWR_EnterSTOPMode+0x74>)
 800cdfe:	f023 0304 	bic.w	r3, r3, #4
 800ce02:	6113      	str	r3, [r2, #16]
}
 800ce04:	bf00      	nop
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr
 800ce10:	58024800 	.word	0x58024800
 800ce14:	e000ed00 	.word	0xe000ed00

0800ce18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ce20:	4b19      	ldr	r3, [pc, #100]	; (800ce88 <HAL_PWREx_ConfigSupply+0x70>)
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	f003 0304 	and.w	r3, r3, #4
 800ce28:	2b04      	cmp	r3, #4
 800ce2a:	d00a      	beq.n	800ce42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ce2c:	4b16      	ldr	r3, [pc, #88]	; (800ce88 <HAL_PWREx_ConfigSupply+0x70>)
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	f003 0307 	and.w	r3, r3, #7
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d001      	beq.n	800ce3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e01f      	b.n	800ce7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	e01d      	b.n	800ce7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ce42:	4b11      	ldr	r3, [pc, #68]	; (800ce88 <HAL_PWREx_ConfigSupply+0x70>)
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	f023 0207 	bic.w	r2, r3, #7
 800ce4a:	490f      	ldr	r1, [pc, #60]	; (800ce88 <HAL_PWREx_ConfigSupply+0x70>)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ce52:	f7f7 ffa7 	bl	8004da4 <HAL_GetTick>
 800ce56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ce58:	e009      	b.n	800ce6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ce5a:	f7f7 ffa3 	bl	8004da4 <HAL_GetTick>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce68:	d901      	bls.n	800ce6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e007      	b.n	800ce7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ce6e:	4b06      	ldr	r3, [pc, #24]	; (800ce88 <HAL_PWREx_ConfigSupply+0x70>)
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce7a:	d1ee      	bne.n	800ce5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	58024800 	.word	0x58024800

0800ce8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08c      	sub	sp, #48	; 0x30
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d102      	bne.n	800cea0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	f000 bc48 	b.w	800d730 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 8088 	beq.w	800cfbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ceae:	4b99      	ldr	r3, [pc, #612]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ceb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ceb8:	4b96      	ldr	r3, [pc, #600]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800ceba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cebc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	2b10      	cmp	r3, #16
 800cec2:	d007      	beq.n	800ced4 <HAL_RCC_OscConfig+0x48>
 800cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec6:	2b18      	cmp	r3, #24
 800cec8:	d111      	bne.n	800ceee <HAL_RCC_OscConfig+0x62>
 800ceca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cecc:	f003 0303 	and.w	r3, r3, #3
 800ced0:	2b02      	cmp	r3, #2
 800ced2:	d10c      	bne.n	800ceee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ced4:	4b8f      	ldr	r3, [pc, #572]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d06d      	beq.n	800cfbc <HAL_RCC_OscConfig+0x130>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d169      	bne.n	800cfbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	f000 bc21 	b.w	800d730 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cef6:	d106      	bne.n	800cf06 <HAL_RCC_OscConfig+0x7a>
 800cef8:	4b86      	ldr	r3, [pc, #536]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a85      	ldr	r2, [pc, #532]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cefe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf02:	6013      	str	r3, [r2, #0]
 800cf04:	e02e      	b.n	800cf64 <HAL_RCC_OscConfig+0xd8>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10c      	bne.n	800cf28 <HAL_RCC_OscConfig+0x9c>
 800cf0e:	4b81      	ldr	r3, [pc, #516]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a80      	ldr	r2, [pc, #512]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf18:	6013      	str	r3, [r2, #0]
 800cf1a:	4b7e      	ldr	r3, [pc, #504]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a7d      	ldr	r2, [pc, #500]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf24:	6013      	str	r3, [r2, #0]
 800cf26:	e01d      	b.n	800cf64 <HAL_RCC_OscConfig+0xd8>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf30:	d10c      	bne.n	800cf4c <HAL_RCC_OscConfig+0xc0>
 800cf32:	4b78      	ldr	r3, [pc, #480]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a77      	ldr	r2, [pc, #476]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	4b75      	ldr	r3, [pc, #468]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a74      	ldr	r2, [pc, #464]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf48:	6013      	str	r3, [r2, #0]
 800cf4a:	e00b      	b.n	800cf64 <HAL_RCC_OscConfig+0xd8>
 800cf4c:	4b71      	ldr	r3, [pc, #452]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a70      	ldr	r2, [pc, #448]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf56:	6013      	str	r3, [r2, #0]
 800cf58:	4b6e      	ldr	r3, [pc, #440]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a6d      	ldr	r2, [pc, #436]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d013      	beq.n	800cf94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf6c:	f7f7 ff1a 	bl	8004da4 <HAL_GetTick>
 800cf70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cf72:	e008      	b.n	800cf86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf74:	f7f7 ff16 	bl	8004da4 <HAL_GetTick>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	2b64      	cmp	r3, #100	; 0x64
 800cf80:	d901      	bls.n	800cf86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cf82:	2303      	movs	r3, #3
 800cf84:	e3d4      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cf86:	4b63      	ldr	r3, [pc, #396]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d0f0      	beq.n	800cf74 <HAL_RCC_OscConfig+0xe8>
 800cf92:	e014      	b.n	800cfbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf94:	f7f7 ff06 	bl	8004da4 <HAL_GetTick>
 800cf98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cf9a:	e008      	b.n	800cfae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf9c:	f7f7 ff02 	bl	8004da4 <HAL_GetTick>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	2b64      	cmp	r3, #100	; 0x64
 800cfa8:	d901      	bls.n	800cfae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	e3c0      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cfae:	4b59      	ldr	r3, [pc, #356]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1f0      	bne.n	800cf9c <HAL_RCC_OscConfig+0x110>
 800cfba:	e000      	b.n	800cfbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cfbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f003 0302 	and.w	r3, r3, #2
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f000 80ca 	beq.w	800d160 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cfcc:	4b51      	ldr	r3, [pc, #324]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cfd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cfd6:	4b4f      	ldr	r3, [pc, #316]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cfd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfda:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d007      	beq.n	800cff2 <HAL_RCC_OscConfig+0x166>
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	2b18      	cmp	r3, #24
 800cfe6:	d156      	bne.n	800d096 <HAL_RCC_OscConfig+0x20a>
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	f003 0303 	and.w	r3, r3, #3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d151      	bne.n	800d096 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cff2:	4b48      	ldr	r3, [pc, #288]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f003 0304 	and.w	r3, r3, #4
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d005      	beq.n	800d00a <HAL_RCC_OscConfig+0x17e>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d101      	bne.n	800d00a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e392      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d00a:	4b42      	ldr	r3, [pc, #264]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f023 0219 	bic.w	r2, r3, #25
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	493f      	ldr	r1, [pc, #252]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d018:	4313      	orrs	r3, r2
 800d01a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d01c:	f7f7 fec2 	bl	8004da4 <HAL_GetTick>
 800d020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d022:	e008      	b.n	800d036 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d024:	f7f7 febe 	bl	8004da4 <HAL_GetTick>
 800d028:	4602      	mov	r2, r0
 800d02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d901      	bls.n	800d036 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d032:	2303      	movs	r3, #3
 800d034:	e37c      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d036:	4b37      	ldr	r3, [pc, #220]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f003 0304 	and.w	r3, r3, #4
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0f0      	beq.n	800d024 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d042:	f7f7 febb 	bl	8004dbc <HAL_GetREVID>
 800d046:	4603      	mov	r3, r0
 800d048:	f241 0203 	movw	r2, #4099	; 0x1003
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d817      	bhi.n	800d080 <HAL_RCC_OscConfig+0x1f4>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	691b      	ldr	r3, [r3, #16]
 800d054:	2b40      	cmp	r3, #64	; 0x40
 800d056:	d108      	bne.n	800d06a <HAL_RCC_OscConfig+0x1de>
 800d058:	4b2e      	ldr	r3, [pc, #184]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d060:	4a2c      	ldr	r2, [pc, #176]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d066:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d068:	e07a      	b.n	800d160 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d06a:	4b2a      	ldr	r3, [pc, #168]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	031b      	lsls	r3, r3, #12
 800d078:	4926      	ldr	r1, [pc, #152]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d07a:	4313      	orrs	r3, r2
 800d07c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d07e:	e06f      	b.n	800d160 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d080:	4b24      	ldr	r3, [pc, #144]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	061b      	lsls	r3, r3, #24
 800d08e:	4921      	ldr	r1, [pc, #132]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d090:	4313      	orrs	r3, r2
 800d092:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d094:	e064      	b.n	800d160 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d047      	beq.n	800d12e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d09e:	4b1d      	ldr	r3, [pc, #116]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f023 0219 	bic.w	r2, r3, #25
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	491a      	ldr	r1, [pc, #104]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0b0:	f7f7 fe78 	bl	8004da4 <HAL_GetTick>
 800d0b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d0b6:	e008      	b.n	800d0ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d0b8:	f7f7 fe74 	bl	8004da4 <HAL_GetTick>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	2b02      	cmp	r3, #2
 800d0c4:	d901      	bls.n	800d0ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	e332      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d0ca:	4b12      	ldr	r3, [pc, #72]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 0304 	and.w	r3, r3, #4
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0f0      	beq.n	800d0b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0d6:	f7f7 fe71 	bl	8004dbc <HAL_GetREVID>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	f241 0203 	movw	r2, #4099	; 0x1003
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d819      	bhi.n	800d118 <HAL_RCC_OscConfig+0x28c>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	2b40      	cmp	r3, #64	; 0x40
 800d0ea:	d108      	bne.n	800d0fe <HAL_RCC_OscConfig+0x272>
 800d0ec:	4b09      	ldr	r3, [pc, #36]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d0f4:	4a07      	ldr	r2, [pc, #28]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d0f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0fa:	6053      	str	r3, [r2, #4]
 800d0fc:	e030      	b.n	800d160 <HAL_RCC_OscConfig+0x2d4>
 800d0fe:	4b05      	ldr	r3, [pc, #20]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	031b      	lsls	r3, r3, #12
 800d10c:	4901      	ldr	r1, [pc, #4]	; (800d114 <HAL_RCC_OscConfig+0x288>)
 800d10e:	4313      	orrs	r3, r2
 800d110:	604b      	str	r3, [r1, #4]
 800d112:	e025      	b.n	800d160 <HAL_RCC_OscConfig+0x2d4>
 800d114:	58024400 	.word	0x58024400
 800d118:	4b9a      	ldr	r3, [pc, #616]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	061b      	lsls	r3, r3, #24
 800d126:	4997      	ldr	r1, [pc, #604]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d128:	4313      	orrs	r3, r2
 800d12a:	604b      	str	r3, [r1, #4]
 800d12c:	e018      	b.n	800d160 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d12e:	4b95      	ldr	r3, [pc, #596]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a94      	ldr	r2, [pc, #592]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d134:	f023 0301 	bic.w	r3, r3, #1
 800d138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d13a:	f7f7 fe33 	bl	8004da4 <HAL_GetTick>
 800d13e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d140:	e008      	b.n	800d154 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d142:	f7f7 fe2f 	bl	8004da4 <HAL_GetTick>
 800d146:	4602      	mov	r2, r0
 800d148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d901      	bls.n	800d154 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d150:	2303      	movs	r3, #3
 800d152:	e2ed      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d154:	4b8b      	ldr	r3, [pc, #556]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f003 0304 	and.w	r3, r3, #4
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1f0      	bne.n	800d142 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f003 0310 	and.w	r3, r3, #16
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f000 80a9 	beq.w	800d2c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d16e:	4b85      	ldr	r3, [pc, #532]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d176:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d178:	4b82      	ldr	r3, [pc, #520]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	2b08      	cmp	r3, #8
 800d182:	d007      	beq.n	800d194 <HAL_RCC_OscConfig+0x308>
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	2b18      	cmp	r3, #24
 800d188:	d13a      	bne.n	800d200 <HAL_RCC_OscConfig+0x374>
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	f003 0303 	and.w	r3, r3, #3
 800d190:	2b01      	cmp	r3, #1
 800d192:	d135      	bne.n	800d200 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d194:	4b7b      	ldr	r3, [pc, #492]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d005      	beq.n	800d1ac <HAL_RCC_OscConfig+0x320>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	69db      	ldr	r3, [r3, #28]
 800d1a4:	2b80      	cmp	r3, #128	; 0x80
 800d1a6:	d001      	beq.n	800d1ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e2c1      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d1ac:	f7f7 fe06 	bl	8004dbc <HAL_GetREVID>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	f241 0203 	movw	r2, #4099	; 0x1003
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d817      	bhi.n	800d1ea <HAL_RCC_OscConfig+0x35e>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	2b20      	cmp	r3, #32
 800d1c0:	d108      	bne.n	800d1d4 <HAL_RCC_OscConfig+0x348>
 800d1c2:	4b70      	ldr	r3, [pc, #448]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d1ca:	4a6e      	ldr	r2, [pc, #440]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d1cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d1d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d1d2:	e075      	b.n	800d2c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d1d4:	4b6b      	ldr	r3, [pc, #428]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6a1b      	ldr	r3, [r3, #32]
 800d1e0:	069b      	lsls	r3, r3, #26
 800d1e2:	4968      	ldr	r1, [pc, #416]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d1e8:	e06a      	b.n	800d2c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d1ea:	4b66      	ldr	r3, [pc, #408]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	061b      	lsls	r3, r3, #24
 800d1f8:	4962      	ldr	r1, [pc, #392]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d1fe:	e05f      	b.n	800d2c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	69db      	ldr	r3, [r3, #28]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d042      	beq.n	800d28e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d208:	4b5e      	ldr	r3, [pc, #376]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a5d      	ldr	r2, [pc, #372]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d214:	f7f7 fdc6 	bl	8004da4 <HAL_GetTick>
 800d218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d21a:	e008      	b.n	800d22e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d21c:	f7f7 fdc2 	bl	8004da4 <HAL_GetTick>
 800d220:	4602      	mov	r2, r0
 800d222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d224:	1ad3      	subs	r3, r2, r3
 800d226:	2b02      	cmp	r3, #2
 800d228:	d901      	bls.n	800d22e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800d22a:	2303      	movs	r3, #3
 800d22c:	e280      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d22e:	4b55      	ldr	r3, [pc, #340]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d236:	2b00      	cmp	r3, #0
 800d238:	d0f0      	beq.n	800d21c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d23a:	f7f7 fdbf 	bl	8004dbc <HAL_GetREVID>
 800d23e:	4603      	mov	r3, r0
 800d240:	f241 0203 	movw	r2, #4099	; 0x1003
 800d244:	4293      	cmp	r3, r2
 800d246:	d817      	bhi.n	800d278 <HAL_RCC_OscConfig+0x3ec>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6a1b      	ldr	r3, [r3, #32]
 800d24c:	2b20      	cmp	r3, #32
 800d24e:	d108      	bne.n	800d262 <HAL_RCC_OscConfig+0x3d6>
 800d250:	4b4c      	ldr	r3, [pc, #304]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d258:	4a4a      	ldr	r2, [pc, #296]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d25a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d25e:	6053      	str	r3, [r2, #4]
 800d260:	e02e      	b.n	800d2c0 <HAL_RCC_OscConfig+0x434>
 800d262:	4b48      	ldr	r3, [pc, #288]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6a1b      	ldr	r3, [r3, #32]
 800d26e:	069b      	lsls	r3, r3, #26
 800d270:	4944      	ldr	r1, [pc, #272]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d272:	4313      	orrs	r3, r2
 800d274:	604b      	str	r3, [r1, #4]
 800d276:	e023      	b.n	800d2c0 <HAL_RCC_OscConfig+0x434>
 800d278:	4b42      	ldr	r3, [pc, #264]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a1b      	ldr	r3, [r3, #32]
 800d284:	061b      	lsls	r3, r3, #24
 800d286:	493f      	ldr	r1, [pc, #252]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d288:	4313      	orrs	r3, r2
 800d28a:	60cb      	str	r3, [r1, #12]
 800d28c:	e018      	b.n	800d2c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d28e:	4b3d      	ldr	r3, [pc, #244]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a3c      	ldr	r2, [pc, #240]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d29a:	f7f7 fd83 	bl	8004da4 <HAL_GetTick>
 800d29e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d2a0:	e008      	b.n	800d2b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d2a2:	f7f7 fd7f 	bl	8004da4 <HAL_GetTick>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d901      	bls.n	800d2b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	e23d      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d2b4:	4b33      	ldr	r3, [pc, #204]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1f0      	bne.n	800d2a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f003 0308 	and.w	r3, r3, #8
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d036      	beq.n	800d33a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	695b      	ldr	r3, [r3, #20]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d019      	beq.n	800d308 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d2d4:	4b2b      	ldr	r3, [pc, #172]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d2d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2d8:	4a2a      	ldr	r2, [pc, #168]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d2da:	f043 0301 	orr.w	r3, r3, #1
 800d2de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2e0:	f7f7 fd60 	bl	8004da4 <HAL_GetTick>
 800d2e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d2e6:	e008      	b.n	800d2fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d2e8:	f7f7 fd5c 	bl	8004da4 <HAL_GetTick>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d901      	bls.n	800d2fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d2f6:	2303      	movs	r3, #3
 800d2f8:	e21a      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d2fa:	4b22      	ldr	r3, [pc, #136]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2fe:	f003 0302 	and.w	r3, r3, #2
 800d302:	2b00      	cmp	r3, #0
 800d304:	d0f0      	beq.n	800d2e8 <HAL_RCC_OscConfig+0x45c>
 800d306:	e018      	b.n	800d33a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d308:	4b1e      	ldr	r3, [pc, #120]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d30c:	4a1d      	ldr	r2, [pc, #116]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d30e:	f023 0301 	bic.w	r3, r3, #1
 800d312:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d314:	f7f7 fd46 	bl	8004da4 <HAL_GetTick>
 800d318:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d31a:	e008      	b.n	800d32e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d31c:	f7f7 fd42 	bl	8004da4 <HAL_GetTick>
 800d320:	4602      	mov	r2, r0
 800d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	2b02      	cmp	r3, #2
 800d328:	d901      	bls.n	800d32e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d32a:	2303      	movs	r3, #3
 800d32c:	e200      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d32e:	4b15      	ldr	r3, [pc, #84]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d332:	f003 0302 	and.w	r3, r3, #2
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1f0      	bne.n	800d31c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f003 0320 	and.w	r3, r3, #32
 800d342:	2b00      	cmp	r3, #0
 800d344:	d039      	beq.n	800d3ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	699b      	ldr	r3, [r3, #24]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d01c      	beq.n	800d388 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d34e:	4b0d      	ldr	r3, [pc, #52]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4a0c      	ldr	r2, [pc, #48]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d358:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d35a:	f7f7 fd23 	bl	8004da4 <HAL_GetTick>
 800d35e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d360:	e008      	b.n	800d374 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d362:	f7f7 fd1f 	bl	8004da4 <HAL_GetTick>
 800d366:	4602      	mov	r2, r0
 800d368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d901      	bls.n	800d374 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d370:	2303      	movs	r3, #3
 800d372:	e1dd      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d374:	4b03      	ldr	r3, [pc, #12]	; (800d384 <HAL_RCC_OscConfig+0x4f8>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d0f0      	beq.n	800d362 <HAL_RCC_OscConfig+0x4d6>
 800d380:	e01b      	b.n	800d3ba <HAL_RCC_OscConfig+0x52e>
 800d382:	bf00      	nop
 800d384:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d388:	4b9b      	ldr	r3, [pc, #620]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a9a      	ldr	r2, [pc, #616]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d38e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d392:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d394:	f7f7 fd06 	bl	8004da4 <HAL_GetTick>
 800d398:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d39a:	e008      	b.n	800d3ae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d39c:	f7f7 fd02 	bl	8004da4 <HAL_GetTick>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d901      	bls.n	800d3ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	e1c0      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d3ae:	4b92      	ldr	r3, [pc, #584]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1f0      	bne.n	800d39c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f003 0304 	and.w	r3, r3, #4
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 8081 	beq.w	800d4ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d3c8:	4b8c      	ldr	r3, [pc, #560]	; (800d5fc <HAL_RCC_OscConfig+0x770>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a8b      	ldr	r2, [pc, #556]	; (800d5fc <HAL_RCC_OscConfig+0x770>)
 800d3ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d3d4:	f7f7 fce6 	bl	8004da4 <HAL_GetTick>
 800d3d8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3da:	e008      	b.n	800d3ee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d3dc:	f7f7 fce2 	bl	8004da4 <HAL_GetTick>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	2b64      	cmp	r3, #100	; 0x64
 800d3e8:	d901      	bls.n	800d3ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	e1a0      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3ee:	4b83      	ldr	r3, [pc, #524]	; (800d5fc <HAL_RCC_OscConfig+0x770>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d0f0      	beq.n	800d3dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d106      	bne.n	800d410 <HAL_RCC_OscConfig+0x584>
 800d402:	4b7d      	ldr	r3, [pc, #500]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d406:	4a7c      	ldr	r2, [pc, #496]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d408:	f043 0301 	orr.w	r3, r3, #1
 800d40c:	6713      	str	r3, [r2, #112]	; 0x70
 800d40e:	e02d      	b.n	800d46c <HAL_RCC_OscConfig+0x5e0>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d10c      	bne.n	800d432 <HAL_RCC_OscConfig+0x5a6>
 800d418:	4b77      	ldr	r3, [pc, #476]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d41c:	4a76      	ldr	r2, [pc, #472]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d41e:	f023 0301 	bic.w	r3, r3, #1
 800d422:	6713      	str	r3, [r2, #112]	; 0x70
 800d424:	4b74      	ldr	r3, [pc, #464]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d428:	4a73      	ldr	r2, [pc, #460]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d42a:	f023 0304 	bic.w	r3, r3, #4
 800d42e:	6713      	str	r3, [r2, #112]	; 0x70
 800d430:	e01c      	b.n	800d46c <HAL_RCC_OscConfig+0x5e0>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	2b05      	cmp	r3, #5
 800d438:	d10c      	bne.n	800d454 <HAL_RCC_OscConfig+0x5c8>
 800d43a:	4b6f      	ldr	r3, [pc, #444]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43e:	4a6e      	ldr	r2, [pc, #440]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d440:	f043 0304 	orr.w	r3, r3, #4
 800d444:	6713      	str	r3, [r2, #112]	; 0x70
 800d446:	4b6c      	ldr	r3, [pc, #432]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d44a:	4a6b      	ldr	r2, [pc, #428]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d44c:	f043 0301 	orr.w	r3, r3, #1
 800d450:	6713      	str	r3, [r2, #112]	; 0x70
 800d452:	e00b      	b.n	800d46c <HAL_RCC_OscConfig+0x5e0>
 800d454:	4b68      	ldr	r3, [pc, #416]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d458:	4a67      	ldr	r2, [pc, #412]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d45a:	f023 0301 	bic.w	r3, r3, #1
 800d45e:	6713      	str	r3, [r2, #112]	; 0x70
 800d460:	4b65      	ldr	r3, [pc, #404]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d464:	4a64      	ldr	r2, [pc, #400]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d466:	f023 0304 	bic.w	r3, r3, #4
 800d46a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d015      	beq.n	800d4a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d474:	f7f7 fc96 	bl	8004da4 <HAL_GetTick>
 800d478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d47a:	e00a      	b.n	800d492 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d47c:	f7f7 fc92 	bl	8004da4 <HAL_GetTick>
 800d480:	4602      	mov	r2, r0
 800d482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d484:	1ad3      	subs	r3, r2, r3
 800d486:	f241 3288 	movw	r2, #5000	; 0x1388
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d901      	bls.n	800d492 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d48e:	2303      	movs	r3, #3
 800d490:	e14e      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d492:	4b59      	ldr	r3, [pc, #356]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d496:	f003 0302 	and.w	r3, r3, #2
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d0ee      	beq.n	800d47c <HAL_RCC_OscConfig+0x5f0>
 800d49e:	e014      	b.n	800d4ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4a0:	f7f7 fc80 	bl	8004da4 <HAL_GetTick>
 800d4a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d4a6:	e00a      	b.n	800d4be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4a8:	f7f7 fc7c 	bl	8004da4 <HAL_GetTick>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	1ad3      	subs	r3, r2, r3
 800d4b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d901      	bls.n	800d4be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	e138      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d4be:	4b4e      	ldr	r3, [pc, #312]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4c2:	f003 0302 	and.w	r3, r3, #2
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1ee      	bne.n	800d4a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 812d 	beq.w	800d72e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d4d4:	4b48      	ldr	r3, [pc, #288]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d4d6:	691b      	ldr	r3, [r3, #16]
 800d4d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d4dc:	2b18      	cmp	r3, #24
 800d4de:	f000 80bd 	beq.w	800d65c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	f040 809e 	bne.w	800d628 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d4ec:	4b42      	ldr	r3, [pc, #264]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a41      	ldr	r2, [pc, #260]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d4f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d4f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4f8:	f7f7 fc54 	bl	8004da4 <HAL_GetTick>
 800d4fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d4fe:	e008      	b.n	800d512 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d500:	f7f7 fc50 	bl	8004da4 <HAL_GetTick>
 800d504:	4602      	mov	r2, r0
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	1ad3      	subs	r3, r2, r3
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d901      	bls.n	800d512 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d50e:	2303      	movs	r3, #3
 800d510:	e10e      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d512:	4b39      	ldr	r3, [pc, #228]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d1f0      	bne.n	800d500 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d51e:	4b36      	ldr	r3, [pc, #216]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d522:	4b37      	ldr	r3, [pc, #220]	; (800d600 <HAL_RCC_OscConfig+0x774>)
 800d524:	4013      	ands	r3, r2
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d52e:	0112      	lsls	r2, r2, #4
 800d530:	430a      	orrs	r2, r1
 800d532:	4931      	ldr	r1, [pc, #196]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d534:	4313      	orrs	r3, r2
 800d536:	628b      	str	r3, [r1, #40]	; 0x28
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53c:	3b01      	subs	r3, #1
 800d53e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d546:	3b01      	subs	r3, #1
 800d548:	025b      	lsls	r3, r3, #9
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	431a      	orrs	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d552:	3b01      	subs	r3, #1
 800d554:	041b      	lsls	r3, r3, #16
 800d556:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d55a:	431a      	orrs	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d560:	3b01      	subs	r3, #1
 800d562:	061b      	lsls	r3, r3, #24
 800d564:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d568:	4923      	ldr	r1, [pc, #140]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d56a:	4313      	orrs	r3, r2
 800d56c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d56e:	4b22      	ldr	r3, [pc, #136]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d572:	4a21      	ldr	r2, [pc, #132]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d574:	f023 0301 	bic.w	r3, r3, #1
 800d578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d57a:	4b1f      	ldr	r3, [pc, #124]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d57c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d57e:	4b21      	ldr	r3, [pc, #132]	; (800d604 <HAL_RCC_OscConfig+0x778>)
 800d580:	4013      	ands	r3, r2
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d586:	00d2      	lsls	r2, r2, #3
 800d588:	491b      	ldr	r1, [pc, #108]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d58a:	4313      	orrs	r3, r2
 800d58c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d58e:	4b1a      	ldr	r3, [pc, #104]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d592:	f023 020c 	bic.w	r2, r3, #12
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d59a:	4917      	ldr	r1, [pc, #92]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d59c:	4313      	orrs	r3, r2
 800d59e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d5a0:	4b15      	ldr	r3, [pc, #84]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a4:	f023 0202 	bic.w	r2, r3, #2
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ac:	4912      	ldr	r1, [pc, #72]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d5b2:	4b11      	ldr	r3, [pc, #68]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b6:	4a10      	ldr	r2, [pc, #64]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5be:	4b0e      	ldr	r3, [pc, #56]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c2:	4a0d      	ldr	r2, [pc, #52]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d5ca:	4b0b      	ldr	r3, [pc, #44]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ce:	4a0a      	ldr	r2, [pc, #40]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d5d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d5d6:	4b08      	ldr	r3, [pc, #32]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5da:	4a07      	ldr	r2, [pc, #28]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5dc:	f043 0301 	orr.w	r3, r3, #1
 800d5e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d5e2:	4b05      	ldr	r3, [pc, #20]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a04      	ldr	r2, [pc, #16]	; (800d5f8 <HAL_RCC_OscConfig+0x76c>)
 800d5e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d5ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5ee:	f7f7 fbd9 	bl	8004da4 <HAL_GetTick>
 800d5f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d5f4:	e011      	b.n	800d61a <HAL_RCC_OscConfig+0x78e>
 800d5f6:	bf00      	nop
 800d5f8:	58024400 	.word	0x58024400
 800d5fc:	58024800 	.word	0x58024800
 800d600:	fffffc0c 	.word	0xfffffc0c
 800d604:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d608:	f7f7 fbcc 	bl	8004da4 <HAL_GetTick>
 800d60c:	4602      	mov	r2, r0
 800d60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	2b02      	cmp	r3, #2
 800d614:	d901      	bls.n	800d61a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d616:	2303      	movs	r3, #3
 800d618:	e08a      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d61a:	4b47      	ldr	r3, [pc, #284]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0f0      	beq.n	800d608 <HAL_RCC_OscConfig+0x77c>
 800d626:	e082      	b.n	800d72e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d628:	4b43      	ldr	r3, [pc, #268]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a42      	ldr	r2, [pc, #264]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d62e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d634:	f7f7 fbb6 	bl	8004da4 <HAL_GetTick>
 800d638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d63a:	e008      	b.n	800d64e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d63c:	f7f7 fbb2 	bl	8004da4 <HAL_GetTick>
 800d640:	4602      	mov	r2, r0
 800d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	2b02      	cmp	r3, #2
 800d648:	d901      	bls.n	800d64e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d64a:	2303      	movs	r3, #3
 800d64c:	e070      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d64e:	4b3a      	ldr	r3, [pc, #232]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1f0      	bne.n	800d63c <HAL_RCC_OscConfig+0x7b0>
 800d65a:	e068      	b.n	800d72e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d65c:	4b36      	ldr	r3, [pc, #216]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d660:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d662:	4b35      	ldr	r3, [pc, #212]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d666:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d031      	beq.n	800d6d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	f003 0203 	and.w	r2, r3, #3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d12a      	bne.n	800d6d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	091b      	lsrs	r3, r3, #4
 800d682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d122      	bne.n	800d6d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d698:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d11a      	bne.n	800d6d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	0a5b      	lsrs	r3, r3, #9
 800d6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d111      	bne.n	800d6d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	0c1b      	lsrs	r3, r3, #16
 800d6b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d108      	bne.n	800d6d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	0e1b      	lsrs	r3, r3, #24
 800d6c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d001      	beq.n	800d6d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e02b      	b.n	800d730 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d6d8:	4b17      	ldr	r3, [pc, #92]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	08db      	lsrs	r3, r3, #3
 800d6de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d01f      	beq.n	800d72e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d6ee:	4b12      	ldr	r3, [pc, #72]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f2:	4a11      	ldr	r2, [pc, #68]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d6f4:	f023 0301 	bic.w	r3, r3, #1
 800d6f8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d6fa:	f7f7 fb53 	bl	8004da4 <HAL_GetTick>
 800d6fe:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d700:	bf00      	nop
 800d702:	f7f7 fb4f 	bl	8004da4 <HAL_GetTick>
 800d706:	4602      	mov	r2, r0
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d0f9      	beq.n	800d702 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d70e:	4b0a      	ldr	r3, [pc, #40]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d712:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <HAL_RCC_OscConfig+0x8b0>)
 800d714:	4013      	ands	r3, r2
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d71a:	00d2      	lsls	r2, r2, #3
 800d71c:	4906      	ldr	r1, [pc, #24]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d71e:	4313      	orrs	r3, r2
 800d720:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d722:	4b05      	ldr	r3, [pc, #20]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d726:	4a04      	ldr	r2, [pc, #16]	; (800d738 <HAL_RCC_OscConfig+0x8ac>)
 800d728:	f043 0301 	orr.w	r3, r3, #1
 800d72c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3730      	adds	r7, #48	; 0x30
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	58024400 	.word	0x58024400
 800d73c:	ffff0007 	.word	0xffff0007

0800d740 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d101      	bne.n	800d754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d750:	2301      	movs	r3, #1
 800d752:	e19c      	b.n	800da8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d754:	4b8a      	ldr	r3, [pc, #552]	; (800d980 <HAL_RCC_ClockConfig+0x240>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f003 030f 	and.w	r3, r3, #15
 800d75c:	683a      	ldr	r2, [r7, #0]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d910      	bls.n	800d784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d762:	4b87      	ldr	r3, [pc, #540]	; (800d980 <HAL_RCC_ClockConfig+0x240>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f023 020f 	bic.w	r2, r3, #15
 800d76a:	4985      	ldr	r1, [pc, #532]	; (800d980 <HAL_RCC_ClockConfig+0x240>)
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	4313      	orrs	r3, r2
 800d770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d772:	4b83      	ldr	r3, [pc, #524]	; (800d980 <HAL_RCC_ClockConfig+0x240>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f003 030f 	and.w	r3, r3, #15
 800d77a:	683a      	ldr	r2, [r7, #0]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d001      	beq.n	800d784 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	e184      	b.n	800da8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f003 0304 	and.w	r3, r3, #4
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d010      	beq.n	800d7b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	691a      	ldr	r2, [r3, #16]
 800d794:	4b7b      	ldr	r3, [pc, #492]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d908      	bls.n	800d7b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d7a0:	4b78      	ldr	r3, [pc, #480]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d7a2:	699b      	ldr	r3, [r3, #24]
 800d7a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	4975      	ldr	r1, [pc, #468]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f003 0308 	and.w	r3, r3, #8
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d010      	beq.n	800d7e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	695a      	ldr	r2, [r3, #20]
 800d7c2:	4b70      	ldr	r3, [pc, #448]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d7c4:	69db      	ldr	r3, [r3, #28]
 800d7c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d908      	bls.n	800d7e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d7ce:	4b6d      	ldr	r3, [pc, #436]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d7d0:	69db      	ldr	r3, [r3, #28]
 800d7d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	695b      	ldr	r3, [r3, #20]
 800d7da:	496a      	ldr	r1, [pc, #424]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f003 0310 	and.w	r3, r3, #16
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d010      	beq.n	800d80e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	699a      	ldr	r2, [r3, #24]
 800d7f0:	4b64      	ldr	r3, [pc, #400]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d7f2:	69db      	ldr	r3, [r3, #28]
 800d7f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d908      	bls.n	800d80e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d7fc:	4b61      	ldr	r3, [pc, #388]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d7fe:	69db      	ldr	r3, [r3, #28]
 800d800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	495e      	ldr	r1, [pc, #376]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d80a:	4313      	orrs	r3, r2
 800d80c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f003 0320 	and.w	r3, r3, #32
 800d816:	2b00      	cmp	r3, #0
 800d818:	d010      	beq.n	800d83c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	69da      	ldr	r2, [r3, #28]
 800d81e:	4b59      	ldr	r3, [pc, #356]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d826:	429a      	cmp	r2, r3
 800d828:	d908      	bls.n	800d83c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d82a:	4b56      	ldr	r3, [pc, #344]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	69db      	ldr	r3, [r3, #28]
 800d836:	4953      	ldr	r1, [pc, #332]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d838:	4313      	orrs	r3, r2
 800d83a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f003 0302 	and.w	r3, r3, #2
 800d844:	2b00      	cmp	r3, #0
 800d846:	d010      	beq.n	800d86a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68da      	ldr	r2, [r3, #12]
 800d84c:	4b4d      	ldr	r3, [pc, #308]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d84e:	699b      	ldr	r3, [r3, #24]
 800d850:	f003 030f 	and.w	r3, r3, #15
 800d854:	429a      	cmp	r2, r3
 800d856:	d908      	bls.n	800d86a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d858:	4b4a      	ldr	r3, [pc, #296]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d85a:	699b      	ldr	r3, [r3, #24]
 800d85c:	f023 020f 	bic.w	r2, r3, #15
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	4947      	ldr	r1, [pc, #284]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d866:	4313      	orrs	r3, r2
 800d868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	2b00      	cmp	r3, #0
 800d874:	d055      	beq.n	800d922 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d876:	4b43      	ldr	r3, [pc, #268]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	4940      	ldr	r1, [pc, #256]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d884:	4313      	orrs	r3, r2
 800d886:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	d107      	bne.n	800d8a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d890:	4b3c      	ldr	r3, [pc, #240]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d121      	bne.n	800d8e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e0f6      	b.n	800da8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	2b03      	cmp	r3, #3
 800d8a6:	d107      	bne.n	800d8b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d8a8:	4b36      	ldr	r3, [pc, #216]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d115      	bne.n	800d8e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e0ea      	b.n	800da8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d107      	bne.n	800d8d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d8c0:	4b30      	ldr	r3, [pc, #192]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d109      	bne.n	800d8e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	e0de      	b.n	800da8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d8d0:	4b2c      	ldr	r3, [pc, #176]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f003 0304 	and.w	r3, r3, #4
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d101      	bne.n	800d8e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e0d6      	b.n	800da8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d8e0:	4b28      	ldr	r3, [pc, #160]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d8e2:	691b      	ldr	r3, [r3, #16]
 800d8e4:	f023 0207 	bic.w	r2, r3, #7
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	4925      	ldr	r1, [pc, #148]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8f2:	f7f7 fa57 	bl	8004da4 <HAL_GetTick>
 800d8f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d8f8:	e00a      	b.n	800d910 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d8fa:	f7f7 fa53 	bl	8004da4 <HAL_GetTick>
 800d8fe:	4602      	mov	r2, r0
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	f241 3288 	movw	r2, #5000	; 0x1388
 800d908:	4293      	cmp	r3, r2
 800d90a:	d901      	bls.n	800d910 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d90c:	2303      	movs	r3, #3
 800d90e:	e0be      	b.n	800da8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d910:	4b1c      	ldr	r3, [pc, #112]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	00db      	lsls	r3, r3, #3
 800d91e:	429a      	cmp	r2, r3
 800d920:	d1eb      	bne.n	800d8fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f003 0302 	and.w	r3, r3, #2
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d010      	beq.n	800d950 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	68da      	ldr	r2, [r3, #12]
 800d932:	4b14      	ldr	r3, [pc, #80]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d934:	699b      	ldr	r3, [r3, #24]
 800d936:	f003 030f 	and.w	r3, r3, #15
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d208      	bcs.n	800d950 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d93e:	4b11      	ldr	r3, [pc, #68]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d940:	699b      	ldr	r3, [r3, #24]
 800d942:	f023 020f 	bic.w	r2, r3, #15
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	490e      	ldr	r1, [pc, #56]	; (800d984 <HAL_RCC_ClockConfig+0x244>)
 800d94c:	4313      	orrs	r3, r2
 800d94e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d950:	4b0b      	ldr	r3, [pc, #44]	; (800d980 <HAL_RCC_ClockConfig+0x240>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f003 030f 	and.w	r3, r3, #15
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d214      	bcs.n	800d988 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d95e:	4b08      	ldr	r3, [pc, #32]	; (800d980 <HAL_RCC_ClockConfig+0x240>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f023 020f 	bic.w	r2, r3, #15
 800d966:	4906      	ldr	r1, [pc, #24]	; (800d980 <HAL_RCC_ClockConfig+0x240>)
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d96e:	4b04      	ldr	r3, [pc, #16]	; (800d980 <HAL_RCC_ClockConfig+0x240>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 030f 	and.w	r3, r3, #15
 800d976:	683a      	ldr	r2, [r7, #0]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d005      	beq.n	800d988 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d97c:	2301      	movs	r3, #1
 800d97e:	e086      	b.n	800da8e <HAL_RCC_ClockConfig+0x34e>
 800d980:	52002000 	.word	0x52002000
 800d984:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f003 0304 	and.w	r3, r3, #4
 800d990:	2b00      	cmp	r3, #0
 800d992:	d010      	beq.n	800d9b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	691a      	ldr	r2, [r3, #16]
 800d998:	4b3f      	ldr	r3, [pc, #252]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d208      	bcs.n	800d9b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d9a4:	4b3c      	ldr	r3, [pc, #240]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800d9a6:	699b      	ldr	r3, [r3, #24]
 800d9a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	4939      	ldr	r1, [pc, #228]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f003 0308 	and.w	r3, r3, #8
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d010      	beq.n	800d9e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	695a      	ldr	r2, [r3, #20]
 800d9c6:	4b34      	ldr	r3, [pc, #208]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800d9c8:	69db      	ldr	r3, [r3, #28]
 800d9ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d208      	bcs.n	800d9e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d9d2:	4b31      	ldr	r3, [pc, #196]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800d9d4:	69db      	ldr	r3, [r3, #28]
 800d9d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	695b      	ldr	r3, [r3, #20]
 800d9de:	492e      	ldr	r1, [pc, #184]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f003 0310 	and.w	r3, r3, #16
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d010      	beq.n	800da12 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	699a      	ldr	r2, [r3, #24]
 800d9f4:	4b28      	ldr	r3, [pc, #160]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800d9f6:	69db      	ldr	r3, [r3, #28]
 800d9f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d208      	bcs.n	800da12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800da00:	4b25      	ldr	r3, [pc, #148]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800da02:	69db      	ldr	r3, [r3, #28]
 800da04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	4922      	ldr	r1, [pc, #136]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800da0e:	4313      	orrs	r3, r2
 800da10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f003 0320 	and.w	r3, r3, #32
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d010      	beq.n	800da40 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	69da      	ldr	r2, [r3, #28]
 800da22:	4b1d      	ldr	r3, [pc, #116]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800da24:	6a1b      	ldr	r3, [r3, #32]
 800da26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d208      	bcs.n	800da40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800da2e:	4b1a      	ldr	r3, [pc, #104]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800da30:	6a1b      	ldr	r3, [r3, #32]
 800da32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	69db      	ldr	r3, [r3, #28]
 800da3a:	4917      	ldr	r1, [pc, #92]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800da3c:	4313      	orrs	r3, r2
 800da3e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800da40:	f000 f834 	bl	800daac <HAL_RCC_GetSysClockFreq>
 800da44:	4602      	mov	r2, r0
 800da46:	4b14      	ldr	r3, [pc, #80]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	0a1b      	lsrs	r3, r3, #8
 800da4c:	f003 030f 	and.w	r3, r3, #15
 800da50:	4912      	ldr	r1, [pc, #72]	; (800da9c <HAL_RCC_ClockConfig+0x35c>)
 800da52:	5ccb      	ldrb	r3, [r1, r3]
 800da54:	f003 031f 	and.w	r3, r3, #31
 800da58:	fa22 f303 	lsr.w	r3, r2, r3
 800da5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da5e:	4b0e      	ldr	r3, [pc, #56]	; (800da98 <HAL_RCC_ClockConfig+0x358>)
 800da60:	699b      	ldr	r3, [r3, #24]
 800da62:	f003 030f 	and.w	r3, r3, #15
 800da66:	4a0d      	ldr	r2, [pc, #52]	; (800da9c <HAL_RCC_ClockConfig+0x35c>)
 800da68:	5cd3      	ldrb	r3, [r2, r3]
 800da6a:	f003 031f 	and.w	r3, r3, #31
 800da6e:	693a      	ldr	r2, [r7, #16]
 800da70:	fa22 f303 	lsr.w	r3, r2, r3
 800da74:	4a0a      	ldr	r2, [pc, #40]	; (800daa0 <HAL_RCC_ClockConfig+0x360>)
 800da76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800da78:	4a0a      	ldr	r2, [pc, #40]	; (800daa4 <HAL_RCC_ClockConfig+0x364>)
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800da7e:	4b0a      	ldr	r3, [pc, #40]	; (800daa8 <HAL_RCC_ClockConfig+0x368>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4618      	mov	r0, r3
 800da84:	f7f5 fef2 	bl	800386c <HAL_InitTick>
 800da88:	4603      	mov	r3, r0
 800da8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3718      	adds	r7, #24
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	58024400 	.word	0x58024400
 800da9c:	0801a174 	.word	0x0801a174
 800daa0:	240000c4 	.word	0x240000c4
 800daa4:	240000c0 	.word	0x240000c0
 800daa8:	240000c8 	.word	0x240000c8

0800daac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800daac:	b480      	push	{r7}
 800daae:	b089      	sub	sp, #36	; 0x24
 800dab0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dab2:	4bb3      	ldr	r3, [pc, #716]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800daba:	2b18      	cmp	r3, #24
 800dabc:	f200 8155 	bhi.w	800dd6a <HAL_RCC_GetSysClockFreq+0x2be>
 800dac0:	a201      	add	r2, pc, #4	; (adr r2, 800dac8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800dac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac6:	bf00      	nop
 800dac8:	0800db2d 	.word	0x0800db2d
 800dacc:	0800dd6b 	.word	0x0800dd6b
 800dad0:	0800dd6b 	.word	0x0800dd6b
 800dad4:	0800dd6b 	.word	0x0800dd6b
 800dad8:	0800dd6b 	.word	0x0800dd6b
 800dadc:	0800dd6b 	.word	0x0800dd6b
 800dae0:	0800dd6b 	.word	0x0800dd6b
 800dae4:	0800dd6b 	.word	0x0800dd6b
 800dae8:	0800db53 	.word	0x0800db53
 800daec:	0800dd6b 	.word	0x0800dd6b
 800daf0:	0800dd6b 	.word	0x0800dd6b
 800daf4:	0800dd6b 	.word	0x0800dd6b
 800daf8:	0800dd6b 	.word	0x0800dd6b
 800dafc:	0800dd6b 	.word	0x0800dd6b
 800db00:	0800dd6b 	.word	0x0800dd6b
 800db04:	0800dd6b 	.word	0x0800dd6b
 800db08:	0800db59 	.word	0x0800db59
 800db0c:	0800dd6b 	.word	0x0800dd6b
 800db10:	0800dd6b 	.word	0x0800dd6b
 800db14:	0800dd6b 	.word	0x0800dd6b
 800db18:	0800dd6b 	.word	0x0800dd6b
 800db1c:	0800dd6b 	.word	0x0800dd6b
 800db20:	0800dd6b 	.word	0x0800dd6b
 800db24:	0800dd6b 	.word	0x0800dd6b
 800db28:	0800db5f 	.word	0x0800db5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db2c:	4b94      	ldr	r3, [pc, #592]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f003 0320 	and.w	r3, r3, #32
 800db34:	2b00      	cmp	r3, #0
 800db36:	d009      	beq.n	800db4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db38:	4b91      	ldr	r3, [pc, #580]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	08db      	lsrs	r3, r3, #3
 800db3e:	f003 0303 	and.w	r3, r3, #3
 800db42:	4a90      	ldr	r2, [pc, #576]	; (800dd84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800db44:	fa22 f303 	lsr.w	r3, r2, r3
 800db48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800db4a:	e111      	b.n	800dd70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800db4c:	4b8d      	ldr	r3, [pc, #564]	; (800dd84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800db4e:	61bb      	str	r3, [r7, #24]
      break;
 800db50:	e10e      	b.n	800dd70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800db52:	4b8d      	ldr	r3, [pc, #564]	; (800dd88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800db54:	61bb      	str	r3, [r7, #24]
      break;
 800db56:	e10b      	b.n	800dd70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800db58:	4b8c      	ldr	r3, [pc, #560]	; (800dd8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800db5a:	61bb      	str	r3, [r7, #24]
      break;
 800db5c:	e108      	b.n	800dd70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db5e:	4b88      	ldr	r3, [pc, #544]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db62:	f003 0303 	and.w	r3, r3, #3
 800db66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800db68:	4b85      	ldr	r3, [pc, #532]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db6c:	091b      	lsrs	r3, r3, #4
 800db6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800db74:	4b82      	ldr	r3, [pc, #520]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800db7e:	4b80      	ldr	r3, [pc, #512]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db82:	08db      	lsrs	r3, r3, #3
 800db84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db88:	68fa      	ldr	r2, [r7, #12]
 800db8a:	fb02 f303 	mul.w	r3, r2, r3
 800db8e:	ee07 3a90 	vmov	s15, r3
 800db92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f000 80e1 	beq.w	800dd64 <HAL_RCC_GetSysClockFreq+0x2b8>
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	f000 8083 	beq.w	800dcb0 <HAL_RCC_GetSysClockFreq+0x204>
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	f200 80a1 	bhi.w	800dcf4 <HAL_RCC_GetSysClockFreq+0x248>
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <HAL_RCC_GetSysClockFreq+0x114>
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d056      	beq.n	800dc6c <HAL_RCC_GetSysClockFreq+0x1c0>
 800dbbe:	e099      	b.n	800dcf4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbc0:	4b6f      	ldr	r3, [pc, #444]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f003 0320 	and.w	r3, r3, #32
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d02d      	beq.n	800dc28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dbcc:	4b6c      	ldr	r3, [pc, #432]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	08db      	lsrs	r3, r3, #3
 800dbd2:	f003 0303 	and.w	r3, r3, #3
 800dbd6:	4a6b      	ldr	r2, [pc, #428]	; (800dd84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dbd8:	fa22 f303 	lsr.w	r3, r2, r3
 800dbdc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	ee07 3a90 	vmov	s15, r3
 800dbe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	ee07 3a90 	vmov	s15, r3
 800dbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbf6:	4b62      	ldr	r3, [pc, #392]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbfe:	ee07 3a90 	vmov	s15, r3
 800dc02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc06:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800dd90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800dc26:	e087      	b.n	800dd38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	ee07 3a90 	vmov	s15, r3
 800dc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc32:	eddf 6a58 	vldr	s13, [pc, #352]	; 800dd94 <HAL_RCC_GetSysClockFreq+0x2e8>
 800dc36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc3a:	4b51      	ldr	r3, [pc, #324]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc42:	ee07 3a90 	vmov	s15, r3
 800dc46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800dd90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dc6a:	e065      	b.n	800dd38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	ee07 3a90 	vmov	s15, r3
 800dc72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc76:	eddf 6a48 	vldr	s13, [pc, #288]	; 800dd98 <HAL_RCC_GetSysClockFreq+0x2ec>
 800dc7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc7e:	4b40      	ldr	r3, [pc, #256]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc86:	ee07 3a90 	vmov	s15, r3
 800dc8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800dd90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dcae:	e043      	b.n	800dd38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	ee07 3a90 	vmov	s15, r3
 800dcb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800dd9c <HAL_RCC_GetSysClockFreq+0x2f0>
 800dcbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcc2:	4b2f      	ldr	r3, [pc, #188]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcca:	ee07 3a90 	vmov	s15, r3
 800dcce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcd2:	ed97 6a02 	vldr	s12, [r7, #8]
 800dcd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800dd90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dcda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dcf2:	e021      	b.n	800dd38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	ee07 3a90 	vmov	s15, r3
 800dcfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcfe:	eddf 6a26 	vldr	s13, [pc, #152]	; 800dd98 <HAL_RCC_GetSysClockFreq+0x2ec>
 800dd02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd06:	4b1e      	ldr	r3, [pc, #120]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd0e:	ee07 3a90 	vmov	s15, r3
 800dd12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd16:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800dd90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dd1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dd36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800dd38:	4b11      	ldr	r3, [pc, #68]	; (800dd80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd3c:	0a5b      	lsrs	r3, r3, #9
 800dd3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd42:	3301      	adds	r3, #1
 800dd44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	ee07 3a90 	vmov	s15, r3
 800dd4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dd50:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd5c:	ee17 3a90 	vmov	r3, s15
 800dd60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800dd62:	e005      	b.n	800dd70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800dd64:	2300      	movs	r3, #0
 800dd66:	61bb      	str	r3, [r7, #24]
      break;
 800dd68:	e002      	b.n	800dd70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800dd6a:	4b07      	ldr	r3, [pc, #28]	; (800dd88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dd6c:	61bb      	str	r3, [r7, #24]
      break;
 800dd6e:	bf00      	nop
  }

  return sysclockfreq;
 800dd70:	69bb      	ldr	r3, [r7, #24]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3724      	adds	r7, #36	; 0x24
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	58024400 	.word	0x58024400
 800dd84:	03d09000 	.word	0x03d09000
 800dd88:	003d0900 	.word	0x003d0900
 800dd8c:	017d7840 	.word	0x017d7840
 800dd90:	46000000 	.word	0x46000000
 800dd94:	4c742400 	.word	0x4c742400
 800dd98:	4a742400 	.word	0x4a742400
 800dd9c:	4bbebc20 	.word	0x4bbebc20

0800dda0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800dda6:	f7ff fe81 	bl	800daac <HAL_RCC_GetSysClockFreq>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	4b10      	ldr	r3, [pc, #64]	; (800ddf0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ddae:	699b      	ldr	r3, [r3, #24]
 800ddb0:	0a1b      	lsrs	r3, r3, #8
 800ddb2:	f003 030f 	and.w	r3, r3, #15
 800ddb6:	490f      	ldr	r1, [pc, #60]	; (800ddf4 <HAL_RCC_GetHCLKFreq+0x54>)
 800ddb8:	5ccb      	ldrb	r3, [r1, r3]
 800ddba:	f003 031f 	and.w	r3, r3, #31
 800ddbe:	fa22 f303 	lsr.w	r3, r2, r3
 800ddc2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ddc4:	4b0a      	ldr	r3, [pc, #40]	; (800ddf0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ddc6:	699b      	ldr	r3, [r3, #24]
 800ddc8:	f003 030f 	and.w	r3, r3, #15
 800ddcc:	4a09      	ldr	r2, [pc, #36]	; (800ddf4 <HAL_RCC_GetHCLKFreq+0x54>)
 800ddce:	5cd3      	ldrb	r3, [r2, r3]
 800ddd0:	f003 031f 	and.w	r3, r3, #31
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	fa22 f303 	lsr.w	r3, r2, r3
 800ddda:	4a07      	ldr	r2, [pc, #28]	; (800ddf8 <HAL_RCC_GetHCLKFreq+0x58>)
 800dddc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ddde:	4a07      	ldr	r2, [pc, #28]	; (800ddfc <HAL_RCC_GetHCLKFreq+0x5c>)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800dde4:	4b04      	ldr	r3, [pc, #16]	; (800ddf8 <HAL_RCC_GetHCLKFreq+0x58>)
 800dde6:	681b      	ldr	r3, [r3, #0]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	58024400 	.word	0x58024400
 800ddf4:	0801a174 	.word	0x0801a174
 800ddf8:	240000c4 	.word	0x240000c4
 800ddfc:	240000c0 	.word	0x240000c0

0800de00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800de04:	f7ff ffcc 	bl	800dda0 <HAL_RCC_GetHCLKFreq>
 800de08:	4602      	mov	r2, r0
 800de0a:	4b06      	ldr	r3, [pc, #24]	; (800de24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800de0c:	69db      	ldr	r3, [r3, #28]
 800de0e:	091b      	lsrs	r3, r3, #4
 800de10:	f003 0307 	and.w	r3, r3, #7
 800de14:	4904      	ldr	r1, [pc, #16]	; (800de28 <HAL_RCC_GetPCLK1Freq+0x28>)
 800de16:	5ccb      	ldrb	r3, [r1, r3]
 800de18:	f003 031f 	and.w	r3, r3, #31
 800de1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800de20:	4618      	mov	r0, r3
 800de22:	bd80      	pop	{r7, pc}
 800de24:	58024400 	.word	0x58024400
 800de28:	0801a174 	.word	0x0801a174

0800de2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800de30:	f7ff ffb6 	bl	800dda0 <HAL_RCC_GetHCLKFreq>
 800de34:	4602      	mov	r2, r0
 800de36:	4b06      	ldr	r3, [pc, #24]	; (800de50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800de38:	69db      	ldr	r3, [r3, #28]
 800de3a:	0a1b      	lsrs	r3, r3, #8
 800de3c:	f003 0307 	and.w	r3, r3, #7
 800de40:	4904      	ldr	r1, [pc, #16]	; (800de54 <HAL_RCC_GetPCLK2Freq+0x28>)
 800de42:	5ccb      	ldrb	r3, [r1, r3]
 800de44:	f003 031f 	and.w	r3, r3, #31
 800de48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	58024400 	.word	0x58024400
 800de54:	0801a174 	.word	0x0801a174

0800de58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	223f      	movs	r2, #63	; 0x3f
 800de66:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800de68:	4b1a      	ldr	r3, [pc, #104]	; (800ded4 <HAL_RCC_GetClockConfig+0x7c>)
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	f003 0207 	and.w	r2, r3, #7
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800de74:	4b17      	ldr	r3, [pc, #92]	; (800ded4 <HAL_RCC_GetClockConfig+0x7c>)
 800de76:	699b      	ldr	r3, [r3, #24]
 800de78:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800de80:	4b14      	ldr	r3, [pc, #80]	; (800ded4 <HAL_RCC_GetClockConfig+0x7c>)
 800de82:	699b      	ldr	r3, [r3, #24]
 800de84:	f003 020f 	and.w	r2, r3, #15
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800de8c:	4b11      	ldr	r3, [pc, #68]	; (800ded4 <HAL_RCC_GetClockConfig+0x7c>)
 800de8e:	699b      	ldr	r3, [r3, #24]
 800de90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800de98:	4b0e      	ldr	r3, [pc, #56]	; (800ded4 <HAL_RCC_GetClockConfig+0x7c>)
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800dea4:	4b0b      	ldr	r3, [pc, #44]	; (800ded4 <HAL_RCC_GetClockConfig+0x7c>)
 800dea6:	69db      	ldr	r3, [r3, #28]
 800dea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800deb0:	4b08      	ldr	r3, [pc, #32]	; (800ded4 <HAL_RCC_GetClockConfig+0x7c>)
 800deb2:	6a1b      	ldr	r3, [r3, #32]
 800deb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800debc:	4b06      	ldr	r3, [pc, #24]	; (800ded8 <HAL_RCC_GetClockConfig+0x80>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f003 020f 	and.w	r2, r3, #15
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	601a      	str	r2, [r3, #0]
}
 800dec8:	bf00      	nop
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr
 800ded4:	58024400 	.word	0x58024400
 800ded8:	52002000 	.word	0x52002000

0800dedc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dedc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dee0:	b0ca      	sub	sp, #296	; 0x128
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dee8:	2300      	movs	r3, #0
 800deea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800deee:	2300      	movs	r3, #0
 800def0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800def4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800df00:	2500      	movs	r5, #0
 800df02:	ea54 0305 	orrs.w	r3, r4, r5
 800df06:	d049      	beq.n	800df9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800df08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800df12:	d02f      	beq.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800df14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800df18:	d828      	bhi.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800df1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df1e:	d01a      	beq.n	800df56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800df20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df24:	d822      	bhi.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800df26:	2b00      	cmp	r3, #0
 800df28:	d003      	beq.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800df2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df2e:	d007      	beq.n	800df40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800df30:	e01c      	b.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df32:	4bb8      	ldr	r3, [pc, #736]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800df34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df36:	4ab7      	ldr	r2, [pc, #732]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800df38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800df3e:	e01a      	b.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800df40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df44:	3308      	adds	r3, #8
 800df46:	2102      	movs	r1, #2
 800df48:	4618      	mov	r0, r3
 800df4a:	f002 fb61 	bl	8010610 <RCCEx_PLL2_Config>
 800df4e:	4603      	mov	r3, r0
 800df50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800df54:	e00f      	b.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800df56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df5a:	3328      	adds	r3, #40	; 0x28
 800df5c:	2102      	movs	r1, #2
 800df5e:	4618      	mov	r0, r3
 800df60:	f002 fc08 	bl	8010774 <RCCEx_PLL3_Config>
 800df64:	4603      	mov	r3, r0
 800df66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800df6a:	e004      	b.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df6c:	2301      	movs	r3, #1
 800df6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800df72:	e000      	b.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800df74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10a      	bne.n	800df94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800df7e:	4ba5      	ldr	r3, [pc, #660]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800df80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df82:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800df86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df8c:	4aa1      	ldr	r2, [pc, #644]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800df8e:	430b      	orrs	r3, r1
 800df90:	6513      	str	r3, [r2, #80]	; 0x50
 800df92:	e003      	b.n	800df9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800df9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800dfa8:	f04f 0900 	mov.w	r9, #0
 800dfac:	ea58 0309 	orrs.w	r3, r8, r9
 800dfb0:	d047      	beq.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800dfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfb8:	2b04      	cmp	r3, #4
 800dfba:	d82a      	bhi.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dfbc:	a201      	add	r2, pc, #4	; (adr r2, 800dfc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc2:	bf00      	nop
 800dfc4:	0800dfd9 	.word	0x0800dfd9
 800dfc8:	0800dfe7 	.word	0x0800dfe7
 800dfcc:	0800dffd 	.word	0x0800dffd
 800dfd0:	0800e01b 	.word	0x0800e01b
 800dfd4:	0800e01b 	.word	0x0800e01b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfd8:	4b8e      	ldr	r3, [pc, #568]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfdc:	4a8d      	ldr	r2, [pc, #564]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dfde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dfe4:	e01a      	b.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dfe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfea:	3308      	adds	r3, #8
 800dfec:	2100      	movs	r1, #0
 800dfee:	4618      	mov	r0, r3
 800dff0:	f002 fb0e 	bl	8010610 <RCCEx_PLL2_Config>
 800dff4:	4603      	mov	r3, r0
 800dff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dffa:	e00f      	b.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e000:	3328      	adds	r3, #40	; 0x28
 800e002:	2100      	movs	r1, #0
 800e004:	4618      	mov	r0, r3
 800e006:	f002 fbb5 	bl	8010774 <RCCEx_PLL3_Config>
 800e00a:	4603      	mov	r3, r0
 800e00c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e010:	e004      	b.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e018:	e000      	b.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e01a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e01c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10a      	bne.n	800e03a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e024:	4b7b      	ldr	r3, [pc, #492]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e028:	f023 0107 	bic.w	r1, r3, #7
 800e02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e032:	4a78      	ldr	r2, [pc, #480]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e034:	430b      	orrs	r3, r1
 800e036:	6513      	str	r3, [r2, #80]	; 0x50
 800e038:	e003      	b.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e03a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e03e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800e04e:	f04f 0b00 	mov.w	fp, #0
 800e052:	ea5a 030b 	orrs.w	r3, sl, fp
 800e056:	d04c      	beq.n	800e0f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e05c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e05e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e062:	d030      	beq.n	800e0c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e068:	d829      	bhi.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e06a:	2bc0      	cmp	r3, #192	; 0xc0
 800e06c:	d02d      	beq.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e06e:	2bc0      	cmp	r3, #192	; 0xc0
 800e070:	d825      	bhi.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e072:	2b80      	cmp	r3, #128	; 0x80
 800e074:	d018      	beq.n	800e0a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e076:	2b80      	cmp	r3, #128	; 0x80
 800e078:	d821      	bhi.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d002      	beq.n	800e084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e07e:	2b40      	cmp	r3, #64	; 0x40
 800e080:	d007      	beq.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e082:	e01c      	b.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e084:	4b63      	ldr	r3, [pc, #396]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e088:	4a62      	ldr	r2, [pc, #392]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e08a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e08e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e090:	e01c      	b.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e096:	3308      	adds	r3, #8
 800e098:	2100      	movs	r1, #0
 800e09a:	4618      	mov	r0, r3
 800e09c:	f002 fab8 	bl	8010610 <RCCEx_PLL2_Config>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e0a6:	e011      	b.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0ac:	3328      	adds	r3, #40	; 0x28
 800e0ae:	2100      	movs	r1, #0
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f002 fb5f 	bl	8010774 <RCCEx_PLL3_Config>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e0bc:	e006      	b.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e0c4:	e002      	b.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e0c6:	bf00      	nop
 800e0c8:	e000      	b.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e0ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d10a      	bne.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e0d4:	4b4f      	ldr	r3, [pc, #316]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800e0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0e2:	4a4c      	ldr	r2, [pc, #304]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e0e4:	430b      	orrs	r3, r1
 800e0e6:	6513      	str	r3, [r2, #80]	; 0x50
 800e0e8:	e003      	b.n	800e0f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e0ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800e0fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e102:	2300      	movs	r3, #0
 800e104:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e108:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800e10c:	460b      	mov	r3, r1
 800e10e:	4313      	orrs	r3, r2
 800e110:	d053      	beq.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e116:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e11a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e11e:	d035      	beq.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e120:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e124:	d82e      	bhi.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e126:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e12a:	d031      	beq.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e12c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e130:	d828      	bhi.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e136:	d01a      	beq.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e13c:	d822      	bhi.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d003      	beq.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e146:	d007      	beq.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e148:	e01c      	b.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e14a:	4b32      	ldr	r3, [pc, #200]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14e:	4a31      	ldr	r2, [pc, #196]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e156:	e01c      	b.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e15c:	3308      	adds	r3, #8
 800e15e:	2100      	movs	r1, #0
 800e160:	4618      	mov	r0, r3
 800e162:	f002 fa55 	bl	8010610 <RCCEx_PLL2_Config>
 800e166:	4603      	mov	r3, r0
 800e168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e16c:	e011      	b.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e172:	3328      	adds	r3, #40	; 0x28
 800e174:	2100      	movs	r1, #0
 800e176:	4618      	mov	r0, r3
 800e178:	f002 fafc 	bl	8010774 <RCCEx_PLL3_Config>
 800e17c:	4603      	mov	r3, r0
 800e17e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e182:	e006      	b.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e184:	2301      	movs	r3, #1
 800e186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e18a:	e002      	b.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e18c:	bf00      	nop
 800e18e:	e000      	b.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e190:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e196:	2b00      	cmp	r3, #0
 800e198:	d10b      	bne.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e19a:	4b1e      	ldr	r3, [pc, #120]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e19e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800e1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e1aa:	4a1a      	ldr	r2, [pc, #104]	; (800e214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1ac:	430b      	orrs	r3, r1
 800e1ae:	6593      	str	r3, [r2, #88]	; 0x58
 800e1b0:	e003      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800e1c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e1d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	d056      	beq.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e1e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1e6:	d038      	beq.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e1e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1ec:	d831      	bhi.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e1ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e1f2:	d034      	beq.n	800e25e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e1f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e1f8:	d82b      	bhi.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e1fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1fe:	d01d      	beq.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e200:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e204:	d825      	bhi.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e206:	2b00      	cmp	r3, #0
 800e208:	d006      	beq.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e20a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e20e:	d00a      	beq.n	800e226 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e210:	e01f      	b.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e212:	bf00      	nop
 800e214:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e218:	4ba2      	ldr	r3, [pc, #648]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21c:	4aa1      	ldr	r2, [pc, #644]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e21e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e224:	e01c      	b.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e22a:	3308      	adds	r3, #8
 800e22c:	2100      	movs	r1, #0
 800e22e:	4618      	mov	r0, r3
 800e230:	f002 f9ee 	bl	8010610 <RCCEx_PLL2_Config>
 800e234:	4603      	mov	r3, r0
 800e236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e23a:	e011      	b.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e240:	3328      	adds	r3, #40	; 0x28
 800e242:	2100      	movs	r1, #0
 800e244:	4618      	mov	r0, r3
 800e246:	f002 fa95 	bl	8010774 <RCCEx_PLL3_Config>
 800e24a:	4603      	mov	r3, r0
 800e24c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e250:	e006      	b.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e258:	e002      	b.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e25a:	bf00      	nop
 800e25c:	e000      	b.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e25e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e264:	2b00      	cmp	r3, #0
 800e266:	d10b      	bne.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e268:	4b8e      	ldr	r3, [pc, #568]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e26c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800e270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e274:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e278:	4a8a      	ldr	r2, [pc, #552]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e27a:	430b      	orrs	r3, r1
 800e27c:	6593      	str	r3, [r2, #88]	; 0x58
 800e27e:	e003      	b.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e284:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e290:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800e294:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e298:	2300      	movs	r3, #0
 800e29a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e29e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	d03a      	beq.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800e2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2ae:	2b30      	cmp	r3, #48	; 0x30
 800e2b0:	d01f      	beq.n	800e2f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e2b2:	2b30      	cmp	r3, #48	; 0x30
 800e2b4:	d819      	bhi.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e2b6:	2b20      	cmp	r3, #32
 800e2b8:	d00c      	beq.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e2ba:	2b20      	cmp	r3, #32
 800e2bc:	d815      	bhi.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d019      	beq.n	800e2f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e2c2:	2b10      	cmp	r3, #16
 800e2c4:	d111      	bne.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2c6:	4b77      	ldr	r3, [pc, #476]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ca:	4a76      	ldr	r2, [pc, #472]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e2cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e2d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e2d2:	e011      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2d8:	3308      	adds	r3, #8
 800e2da:	2102      	movs	r1, #2
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f002 f997 	bl	8010610 <RCCEx_PLL2_Config>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e2e8:	e006      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e2f0:	e002      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e2f2:	bf00      	nop
 800e2f4:	e000      	b.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e2f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10a      	bne.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e300:	4b68      	ldr	r3, [pc, #416]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e304:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800e308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e30e:	4a65      	ldr	r2, [pc, #404]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e310:	430b      	orrs	r3, r1
 800e312:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e314:	e003      	b.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e31a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e326:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e32a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e32e:	2300      	movs	r3, #0
 800e330:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e334:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800e338:	460b      	mov	r3, r1
 800e33a:	4313      	orrs	r3, r2
 800e33c:	d051      	beq.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e348:	d035      	beq.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800e34a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e34e:	d82e      	bhi.n	800e3ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e354:	d031      	beq.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e356:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e35a:	d828      	bhi.n	800e3ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e35c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e360:	d01a      	beq.n	800e398 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e366:	d822      	bhi.n	800e3ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d003      	beq.n	800e374 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e36c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e370:	d007      	beq.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800e372:	e01c      	b.n	800e3ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e374:	4b4b      	ldr	r3, [pc, #300]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e378:	4a4a      	ldr	r2, [pc, #296]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e37a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e37e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e380:	e01c      	b.n	800e3bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e386:	3308      	adds	r3, #8
 800e388:	2100      	movs	r1, #0
 800e38a:	4618      	mov	r0, r3
 800e38c:	f002 f940 	bl	8010610 <RCCEx_PLL2_Config>
 800e390:	4603      	mov	r3, r0
 800e392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e396:	e011      	b.n	800e3bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e39c:	3328      	adds	r3, #40	; 0x28
 800e39e:	2100      	movs	r1, #0
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f002 f9e7 	bl	8010774 <RCCEx_PLL3_Config>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e3ac:	e006      	b.n	800e3bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e3b4:	e002      	b.n	800e3bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e3b6:	bf00      	nop
 800e3b8:	e000      	b.n	800e3bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e3ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10a      	bne.n	800e3da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e3c4:	4b37      	ldr	r3, [pc, #220]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3d2:	4a34      	ldr	r2, [pc, #208]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e3d4:	430b      	orrs	r3, r1
 800e3d6:	6513      	str	r3, [r2, #80]	; 0x50
 800e3d8:	e003      	b.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e3de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800e3ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e3f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	4313      	orrs	r3, r2
 800e400:	d056      	beq.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e40c:	d033      	beq.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e40e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e412:	d82c      	bhi.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e414:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e418:	d02f      	beq.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e41a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e41e:	d826      	bhi.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e420:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e424:	d02b      	beq.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e426:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e42a:	d820      	bhi.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e42c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e430:	d012      	beq.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e436:	d81a      	bhi.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d022      	beq.n	800e482 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e440:	d115      	bne.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e446:	3308      	adds	r3, #8
 800e448:	2101      	movs	r1, #1
 800e44a:	4618      	mov	r0, r3
 800e44c:	f002 f8e0 	bl	8010610 <RCCEx_PLL2_Config>
 800e450:	4603      	mov	r3, r0
 800e452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e456:	e015      	b.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e45c:	3328      	adds	r3, #40	; 0x28
 800e45e:	2101      	movs	r1, #1
 800e460:	4618      	mov	r0, r3
 800e462:	f002 f987 	bl	8010774 <RCCEx_PLL3_Config>
 800e466:	4603      	mov	r3, r0
 800e468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e46c:	e00a      	b.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e46e:	2301      	movs	r3, #1
 800e470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e474:	e006      	b.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e476:	bf00      	nop
 800e478:	e004      	b.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e47a:	bf00      	nop
 800e47c:	e002      	b.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e47e:	bf00      	nop
 800e480:	e000      	b.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e482:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d10d      	bne.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e48c:	4b05      	ldr	r3, [pc, #20]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e490:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e49a:	4a02      	ldr	r2, [pc, #8]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e49c:	430b      	orrs	r3, r1
 800e49e:	6513      	str	r3, [r2, #80]	; 0x50
 800e4a0:	e006      	b.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e4a2:	bf00      	nop
 800e4a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800e4bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e4c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	d055      	beq.n	800e57c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e4d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e4dc:	d033      	beq.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e4de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e4e2:	d82c      	bhi.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4e8:	d02f      	beq.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4ee:	d826      	bhi.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e4f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e4f4:	d02b      	beq.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e4f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e4fa:	d820      	bhi.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e4fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e500:	d012      	beq.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e506:	d81a      	bhi.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d022      	beq.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e50c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e510:	d115      	bne.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e516:	3308      	adds	r3, #8
 800e518:	2101      	movs	r1, #1
 800e51a:	4618      	mov	r0, r3
 800e51c:	f002 f878 	bl	8010610 <RCCEx_PLL2_Config>
 800e520:	4603      	mov	r3, r0
 800e522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e526:	e015      	b.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e52c:	3328      	adds	r3, #40	; 0x28
 800e52e:	2101      	movs	r1, #1
 800e530:	4618      	mov	r0, r3
 800e532:	f002 f91f 	bl	8010774 <RCCEx_PLL3_Config>
 800e536:	4603      	mov	r3, r0
 800e538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e53c:	e00a      	b.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e53e:	2301      	movs	r3, #1
 800e540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e544:	e006      	b.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e546:	bf00      	nop
 800e548:	e004      	b.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e54a:	bf00      	nop
 800e54c:	e002      	b.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e54e:	bf00      	nop
 800e550:	e000      	b.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e552:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e554:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10b      	bne.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e55c:	4ba3      	ldr	r3, [pc, #652]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e560:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e568:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e56c:	4a9f      	ldr	r2, [pc, #636]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e56e:	430b      	orrs	r3, r1
 800e570:	6593      	str	r3, [r2, #88]	; 0x58
 800e572:	e003      	b.n	800e57c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e578:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e584:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e58c:	2300      	movs	r3, #0
 800e58e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e596:	460b      	mov	r3, r1
 800e598:	4313      	orrs	r3, r2
 800e59a:	d037      	beq.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5a6:	d00e      	beq.n	800e5c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e5a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5ac:	d816      	bhi.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d018      	beq.n	800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e5b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e5b6:	d111      	bne.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5b8:	4b8c      	ldr	r3, [pc, #560]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5bc:	4a8b      	ldr	r2, [pc, #556]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e5be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e5c4:	e00f      	b.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5ca:	3308      	adds	r3, #8
 800e5cc:	2101      	movs	r1, #1
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f002 f81e 	bl	8010610 <RCCEx_PLL2_Config>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e5da:	e004      	b.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e5e2:	e000      	b.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e5e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d10a      	bne.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e5ee:	4b7f      	ldr	r3, [pc, #508]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e5f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5fc:	4a7b      	ldr	r2, [pc, #492]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e5fe:	430b      	orrs	r3, r1
 800e600:	6513      	str	r3, [r2, #80]	; 0x50
 800e602:	e003      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e604:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e608:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e614:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e61c:	2300      	movs	r3, #0
 800e61e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e622:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800e626:	460b      	mov	r3, r1
 800e628:	4313      	orrs	r3, r2
 800e62a:	d039      	beq.n	800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e632:	2b03      	cmp	r3, #3
 800e634:	d81c      	bhi.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e636:	a201      	add	r2, pc, #4	; (adr r2, 800e63c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63c:	0800e679 	.word	0x0800e679
 800e640:	0800e64d 	.word	0x0800e64d
 800e644:	0800e65b 	.word	0x0800e65b
 800e648:	0800e679 	.word	0x0800e679
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e64c:	4b67      	ldr	r3, [pc, #412]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e650:	4a66      	ldr	r2, [pc, #408]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e658:	e00f      	b.n	800e67a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e65e:	3308      	adds	r3, #8
 800e660:	2102      	movs	r1, #2
 800e662:	4618      	mov	r0, r3
 800e664:	f001 ffd4 	bl	8010610 <RCCEx_PLL2_Config>
 800e668:	4603      	mov	r3, r0
 800e66a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e66e:	e004      	b.n	800e67a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e670:	2301      	movs	r3, #1
 800e672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e676:	e000      	b.n	800e67a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e67a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d10a      	bne.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e682:	4b5a      	ldr	r3, [pc, #360]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e686:	f023 0103 	bic.w	r1, r3, #3
 800e68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e68e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e690:	4a56      	ldr	r2, [pc, #344]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e692:	430b      	orrs	r3, r1
 800e694:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e696:	e003      	b.n	800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e698:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e69c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e6ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e6b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	f000 809f 	beq.w	800e800 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e6c2:	4b4b      	ldr	r3, [pc, #300]	; (800e7f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a4a      	ldr	r2, [pc, #296]	; (800e7f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e6c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e6ce:	f7f6 fb69 	bl	8004da4 <HAL_GetTick>
 800e6d2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e6d6:	e00b      	b.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e6d8:	f7f6 fb64 	bl	8004da4 <HAL_GetTick>
 800e6dc:	4602      	mov	r2, r0
 800e6de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	2b64      	cmp	r3, #100	; 0x64
 800e6e6:	d903      	bls.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e6e8:	2303      	movs	r3, #3
 800e6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e6ee:	e005      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e6f0:	4b3f      	ldr	r3, [pc, #252]	; (800e7f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d0ed      	beq.n	800e6d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e6fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e700:	2b00      	cmp	r3, #0
 800e702:	d179      	bne.n	800e7f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e704:	4b39      	ldr	r3, [pc, #228]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e706:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e70c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e710:	4053      	eors	r3, r2
 800e712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e716:	2b00      	cmp	r3, #0
 800e718:	d015      	beq.n	800e746 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e71a:	4b34      	ldr	r3, [pc, #208]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e71e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e722:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e726:	4b31      	ldr	r3, [pc, #196]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e72a:	4a30      	ldr	r2, [pc, #192]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e72c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e730:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e732:	4b2e      	ldr	r3, [pc, #184]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e736:	4a2d      	ldr	r2, [pc, #180]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e73c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e73e:	4a2b      	ldr	r2, [pc, #172]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e740:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e744:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e74a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e752:	d118      	bne.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e754:	f7f6 fb26 	bl	8004da4 <HAL_GetTick>
 800e758:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e75c:	e00d      	b.n	800e77a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e75e:	f7f6 fb21 	bl	8004da4 <HAL_GetTick>
 800e762:	4602      	mov	r2, r0
 800e764:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e768:	1ad2      	subs	r2, r2, r3
 800e76a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e76e:	429a      	cmp	r2, r3
 800e770:	d903      	bls.n	800e77a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e772:	2303      	movs	r3, #3
 800e774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800e778:	e005      	b.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e77a:	4b1c      	ldr	r3, [pc, #112]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e77e:	f003 0302 	and.w	r3, r3, #2
 800e782:	2b00      	cmp	r3, #0
 800e784:	d0eb      	beq.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d129      	bne.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e792:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e79a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e79e:	d10e      	bne.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e7a0:	4b12      	ldr	r3, [pc, #72]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7a2:	691b      	ldr	r3, [r3, #16]
 800e7a4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800e7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e7b0:	091a      	lsrs	r2, r3, #4
 800e7b2:	4b10      	ldr	r3, [pc, #64]	; (800e7f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e7b4:	4013      	ands	r3, r2
 800e7b6:	4a0d      	ldr	r2, [pc, #52]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7b8:	430b      	orrs	r3, r1
 800e7ba:	6113      	str	r3, [r2, #16]
 800e7bc:	e005      	b.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e7be:	4b0b      	ldr	r3, [pc, #44]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	4a0a      	ldr	r2, [pc, #40]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e7c8:	6113      	str	r3, [r2, #16]
 800e7ca:	4b08      	ldr	r3, [pc, #32]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e7d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7da:	4a04      	ldr	r2, [pc, #16]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7dc:	430b      	orrs	r3, r1
 800e7de:	6713      	str	r3, [r2, #112]	; 0x70
 800e7e0:	e00e      	b.n	800e800 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e7e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800e7ea:	e009      	b.n	800e800 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e7ec:	58024400 	.word	0x58024400
 800e7f0:	58024800 	.word	0x58024800
 800e7f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e808:	f002 0301 	and.w	r3, r2, #1
 800e80c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e810:	2300      	movs	r3, #0
 800e812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e816:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e81a:	460b      	mov	r3, r1
 800e81c:	4313      	orrs	r3, r2
 800e81e:	f000 8089 	beq.w	800e934 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e828:	2b28      	cmp	r3, #40	; 0x28
 800e82a:	d86b      	bhi.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e82c:	a201      	add	r2, pc, #4	; (adr r2, 800e834 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e832:	bf00      	nop
 800e834:	0800e90d 	.word	0x0800e90d
 800e838:	0800e905 	.word	0x0800e905
 800e83c:	0800e905 	.word	0x0800e905
 800e840:	0800e905 	.word	0x0800e905
 800e844:	0800e905 	.word	0x0800e905
 800e848:	0800e905 	.word	0x0800e905
 800e84c:	0800e905 	.word	0x0800e905
 800e850:	0800e905 	.word	0x0800e905
 800e854:	0800e8d9 	.word	0x0800e8d9
 800e858:	0800e905 	.word	0x0800e905
 800e85c:	0800e905 	.word	0x0800e905
 800e860:	0800e905 	.word	0x0800e905
 800e864:	0800e905 	.word	0x0800e905
 800e868:	0800e905 	.word	0x0800e905
 800e86c:	0800e905 	.word	0x0800e905
 800e870:	0800e905 	.word	0x0800e905
 800e874:	0800e8ef 	.word	0x0800e8ef
 800e878:	0800e905 	.word	0x0800e905
 800e87c:	0800e905 	.word	0x0800e905
 800e880:	0800e905 	.word	0x0800e905
 800e884:	0800e905 	.word	0x0800e905
 800e888:	0800e905 	.word	0x0800e905
 800e88c:	0800e905 	.word	0x0800e905
 800e890:	0800e905 	.word	0x0800e905
 800e894:	0800e90d 	.word	0x0800e90d
 800e898:	0800e905 	.word	0x0800e905
 800e89c:	0800e905 	.word	0x0800e905
 800e8a0:	0800e905 	.word	0x0800e905
 800e8a4:	0800e905 	.word	0x0800e905
 800e8a8:	0800e905 	.word	0x0800e905
 800e8ac:	0800e905 	.word	0x0800e905
 800e8b0:	0800e905 	.word	0x0800e905
 800e8b4:	0800e90d 	.word	0x0800e90d
 800e8b8:	0800e905 	.word	0x0800e905
 800e8bc:	0800e905 	.word	0x0800e905
 800e8c0:	0800e905 	.word	0x0800e905
 800e8c4:	0800e905 	.word	0x0800e905
 800e8c8:	0800e905 	.word	0x0800e905
 800e8cc:	0800e905 	.word	0x0800e905
 800e8d0:	0800e905 	.word	0x0800e905
 800e8d4:	0800e90d 	.word	0x0800e90d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8dc:	3308      	adds	r3, #8
 800e8de:	2101      	movs	r1, #1
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f001 fe95 	bl	8010610 <RCCEx_PLL2_Config>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e8ec:	e00f      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8f2:	3328      	adds	r3, #40	; 0x28
 800e8f4:	2101      	movs	r1, #1
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f001 ff3c 	bl	8010774 <RCCEx_PLL3_Config>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e902:	e004      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e904:	2301      	movs	r3, #1
 800e906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e90a:	e000      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e90c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e90e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e912:	2b00      	cmp	r3, #0
 800e914:	d10a      	bne.n	800e92c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e916:	4bbf      	ldr	r3, [pc, #764]	; (800ec14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e91a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e924:	4abb      	ldr	r2, [pc, #748]	; (800ec14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e926:	430b      	orrs	r3, r1
 800e928:	6553      	str	r3, [r2, #84]	; 0x54
 800e92a:	e003      	b.n	800e934 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e92c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e930:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93c:	f002 0302 	and.w	r3, r2, #2
 800e940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e944:	2300      	movs	r3, #0
 800e946:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e94a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e94e:	460b      	mov	r3, r1
 800e950:	4313      	orrs	r3, r2
 800e952:	d041      	beq.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e95a:	2b05      	cmp	r3, #5
 800e95c:	d824      	bhi.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e95e:	a201      	add	r2, pc, #4	; (adr r2, 800e964 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e964:	0800e9b1 	.word	0x0800e9b1
 800e968:	0800e97d 	.word	0x0800e97d
 800e96c:	0800e993 	.word	0x0800e993
 800e970:	0800e9b1 	.word	0x0800e9b1
 800e974:	0800e9b1 	.word	0x0800e9b1
 800e978:	0800e9b1 	.word	0x0800e9b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e980:	3308      	adds	r3, #8
 800e982:	2101      	movs	r1, #1
 800e984:	4618      	mov	r0, r3
 800e986:	f001 fe43 	bl	8010610 <RCCEx_PLL2_Config>
 800e98a:	4603      	mov	r3, r0
 800e98c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e990:	e00f      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e996:	3328      	adds	r3, #40	; 0x28
 800e998:	2101      	movs	r1, #1
 800e99a:	4618      	mov	r0, r3
 800e99c:	f001 feea 	bl	8010774 <RCCEx_PLL3_Config>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e9a6:	e004      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e9ae:	e000      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e9b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d10a      	bne.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e9ba:	4b96      	ldr	r3, [pc, #600]	; (800ec14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9be:	f023 0107 	bic.w	r1, r3, #7
 800e9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9c8:	4a92      	ldr	r2, [pc, #584]	; (800ec14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e9ca:	430b      	orrs	r3, r1
 800e9cc:	6553      	str	r3, [r2, #84]	; 0x54
 800e9ce:	e003      	b.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f002 0304 	and.w	r3, r2, #4
 800e9e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e9ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	d044      	beq.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea00:	2b05      	cmp	r3, #5
 800ea02:	d825      	bhi.n	800ea50 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ea04:	a201      	add	r2, pc, #4	; (adr r2, 800ea0c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ea06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea0a:	bf00      	nop
 800ea0c:	0800ea59 	.word	0x0800ea59
 800ea10:	0800ea25 	.word	0x0800ea25
 800ea14:	0800ea3b 	.word	0x0800ea3b
 800ea18:	0800ea59 	.word	0x0800ea59
 800ea1c:	0800ea59 	.word	0x0800ea59
 800ea20:	0800ea59 	.word	0x0800ea59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea28:	3308      	adds	r3, #8
 800ea2a:	2101      	movs	r1, #1
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f001 fdef 	bl	8010610 <RCCEx_PLL2_Config>
 800ea32:	4603      	mov	r3, r0
 800ea34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ea38:	e00f      	b.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea3e:	3328      	adds	r3, #40	; 0x28
 800ea40:	2101      	movs	r1, #1
 800ea42:	4618      	mov	r0, r3
 800ea44:	f001 fe96 	bl	8010774 <RCCEx_PLL3_Config>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ea4e:	e004      	b.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea50:	2301      	movs	r3, #1
 800ea52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea56:	e000      	b.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ea58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d10b      	bne.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ea62:	4b6c      	ldr	r3, [pc, #432]	; (800ec14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ea64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea66:	f023 0107 	bic.w	r1, r3, #7
 800ea6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea72:	4a68      	ldr	r2, [pc, #416]	; (800ec14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ea74:	430b      	orrs	r3, r1
 800ea76:	6593      	str	r3, [r2, #88]	; 0x58
 800ea78:	e003      	b.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ea82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	f002 0320 	and.w	r3, r2, #32
 800ea8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ea92:	2300      	movs	r3, #0
 800ea94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ea98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	d055      	beq.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800eaa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eaaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eaae:	d033      	beq.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800eab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eab4:	d82c      	bhi.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaba:	d02f      	beq.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800eabc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eac0:	d826      	bhi.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800eac6:	d02b      	beq.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800eac8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800eacc:	d820      	bhi.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ead2:	d012      	beq.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ead4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ead8:	d81a      	bhi.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d022      	beq.n	800eb24 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800eade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eae2:	d115      	bne.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eae8:	3308      	adds	r3, #8
 800eaea:	2100      	movs	r1, #0
 800eaec:	4618      	mov	r0, r3
 800eaee:	f001 fd8f 	bl	8010610 <RCCEx_PLL2_Config>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800eaf8:	e015      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eafe:	3328      	adds	r3, #40	; 0x28
 800eb00:	2102      	movs	r1, #2
 800eb02:	4618      	mov	r0, r3
 800eb04:	f001 fe36 	bl	8010774 <RCCEx_PLL3_Config>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800eb0e:	e00a      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb16:	e006      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb18:	bf00      	nop
 800eb1a:	e004      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb1c:	bf00      	nop
 800eb1e:	e002      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb20:	bf00      	nop
 800eb22:	e000      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eb24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d10b      	bne.n	800eb46 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800eb2e:	4b39      	ldr	r3, [pc, #228]	; (800ec14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eb30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb32:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800eb36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb3e:	4a35      	ldr	r2, [pc, #212]	; (800ec14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eb40:	430b      	orrs	r3, r1
 800eb42:	6553      	str	r3, [r2, #84]	; 0x54
 800eb44:	e003      	b.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800eb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800eb5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800eb5e:	2300      	movs	r3, #0
 800eb60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800eb64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800eb68:	460b      	mov	r3, r1
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	d058      	beq.n	800ec20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800eb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800eb76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800eb7a:	d033      	beq.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800eb7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800eb80:	d82c      	bhi.n	800ebdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800eb82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb86:	d02f      	beq.n	800ebe8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800eb88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb8c:	d826      	bhi.n	800ebdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800eb8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eb92:	d02b      	beq.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800eb94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eb98:	d820      	bhi.n	800ebdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800eb9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb9e:	d012      	beq.n	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800eba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eba4:	d81a      	bhi.n	800ebdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d022      	beq.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ebaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebae:	d115      	bne.n	800ebdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ebb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebb4:	3308      	adds	r3, #8
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f001 fd29 	bl	8010610 <RCCEx_PLL2_Config>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ebc4:	e015      	b.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ebc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebca:	3328      	adds	r3, #40	; 0x28
 800ebcc:	2102      	movs	r1, #2
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f001 fdd0 	bl	8010774 <RCCEx_PLL3_Config>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ebda:	e00a      	b.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ebe2:	e006      	b.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ebe4:	bf00      	nop
 800ebe6:	e004      	b.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ebe8:	bf00      	nop
 800ebea:	e002      	b.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ebec:	bf00      	nop
 800ebee:	e000      	b.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ebf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d10e      	bne.n	800ec18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ebfa:	4b06      	ldr	r3, [pc, #24]	; (800ec14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ebfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebfe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ec02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ec0a:	4a02      	ldr	r2, [pc, #8]	; (800ec14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec0c:	430b      	orrs	r3, r1
 800ec0e:	6593      	str	r3, [r2, #88]	; 0x58
 800ec10:	e006      	b.n	800ec20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ec12:	bf00      	nop
 800ec14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ec20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec28:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ec2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ec30:	2300      	movs	r3, #0
 800ec32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ec36:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	d055      	beq.n	800ecec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ec40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ec48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ec4c:	d033      	beq.n	800ecb6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ec4e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ec52:	d82c      	bhi.n	800ecae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ec54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec58:	d02f      	beq.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ec5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec5e:	d826      	bhi.n	800ecae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ec60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ec64:	d02b      	beq.n	800ecbe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ec66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ec6a:	d820      	bhi.n	800ecae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ec6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec70:	d012      	beq.n	800ec98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ec72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec76:	d81a      	bhi.n	800ecae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d022      	beq.n	800ecc2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ec7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec80:	d115      	bne.n	800ecae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec86:	3308      	adds	r3, #8
 800ec88:	2100      	movs	r1, #0
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f001 fcc0 	bl	8010610 <RCCEx_PLL2_Config>
 800ec90:	4603      	mov	r3, r0
 800ec92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ec96:	e015      	b.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec9c:	3328      	adds	r3, #40	; 0x28
 800ec9e:	2102      	movs	r1, #2
 800eca0:	4618      	mov	r0, r3
 800eca2:	f001 fd67 	bl	8010774 <RCCEx_PLL3_Config>
 800eca6:	4603      	mov	r3, r0
 800eca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ecac:	e00a      	b.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ecb4:	e006      	b.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ecb6:	bf00      	nop
 800ecb8:	e004      	b.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ecba:	bf00      	nop
 800ecbc:	e002      	b.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ecbe:	bf00      	nop
 800ecc0:	e000      	b.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ecc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10b      	bne.n	800ece4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800eccc:	4ba1      	ldr	r3, [pc, #644]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ecce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecd0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ecd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ecdc:	4a9d      	ldr	r2, [pc, #628]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ecde:	430b      	orrs	r3, r1
 800ece0:	6593      	str	r3, [r2, #88]	; 0x58
 800ece2:	e003      	b.n	800ecec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ece4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ece8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ecec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf4:	f002 0308 	and.w	r3, r2, #8
 800ecf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ed02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ed06:	460b      	mov	r3, r1
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	d01e      	beq.n	800ed4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ed0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed18:	d10c      	bne.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ed1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed1e:	3328      	adds	r3, #40	; 0x28
 800ed20:	2102      	movs	r1, #2
 800ed22:	4618      	mov	r0, r3
 800ed24:	f001 fd26 	bl	8010774 <RCCEx_PLL3_Config>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ed34:	4b87      	ldr	r3, [pc, #540]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ed36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed44:	4a83      	ldr	r2, [pc, #524]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ed46:	430b      	orrs	r3, r1
 800ed48:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ed4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed52:	f002 0310 	and.w	r3, r2, #16
 800ed56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ed60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ed64:	460b      	mov	r3, r1
 800ed66:	4313      	orrs	r3, r2
 800ed68:	d01e      	beq.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ed6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ed72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed76:	d10c      	bne.n	800ed92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ed78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed7c:	3328      	adds	r3, #40	; 0x28
 800ed7e:	2102      	movs	r1, #2
 800ed80:	4618      	mov	r0, r3
 800ed82:	f001 fcf7 	bl	8010774 <RCCEx_PLL3_Config>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ed92:	4b70      	ldr	r3, [pc, #448]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ed94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ed9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eda2:	4a6c      	ldr	r2, [pc, #432]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eda4:	430b      	orrs	r3, r1
 800eda6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800eda8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800edb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800edb8:	2300      	movs	r3, #0
 800edba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800edbe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800edc2:	460b      	mov	r3, r1
 800edc4:	4313      	orrs	r3, r2
 800edc6:	d03e      	beq.n	800ee46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800edc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800edd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edd4:	d022      	beq.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800edd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edda:	d81b      	bhi.n	800ee14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d003      	beq.n	800ede8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ede0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ede4:	d00b      	beq.n	800edfe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ede6:	e015      	b.n	800ee14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ede8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edec:	3308      	adds	r3, #8
 800edee:	2100      	movs	r1, #0
 800edf0:	4618      	mov	r0, r3
 800edf2:	f001 fc0d 	bl	8010610 <RCCEx_PLL2_Config>
 800edf6:	4603      	mov	r3, r0
 800edf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800edfc:	e00f      	b.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800edfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee02:	3328      	adds	r3, #40	; 0x28
 800ee04:	2102      	movs	r1, #2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f001 fcb4 	bl	8010774 <RCCEx_PLL3_Config>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ee12:	e004      	b.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee1a:	e000      	b.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ee1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10b      	bne.n	800ee3e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ee26:	4b4b      	ldr	r3, [pc, #300]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ee28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee2a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ee2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ee36:	4a47      	ldr	r2, [pc, #284]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ee38:	430b      	orrs	r3, r1
 800ee3a:	6593      	str	r3, [r2, #88]	; 0x58
 800ee3c:	e003      	b.n	800ee46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ee46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee4e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ee52:	67bb      	str	r3, [r7, #120]	; 0x78
 800ee54:	2300      	movs	r3, #0
 800ee56:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	d03b      	beq.n	800eeda <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ee62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ee6e:	d01f      	beq.n	800eeb0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ee70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ee74:	d818      	bhi.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ee76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee7a:	d003      	beq.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ee7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee80:	d007      	beq.n	800ee92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ee82:	e011      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee84:	4b33      	ldr	r3, [pc, #204]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ee86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee88:	4a32      	ldr	r2, [pc, #200]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ee8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ee90:	e00f      	b.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee96:	3328      	adds	r3, #40	; 0x28
 800ee98:	2101      	movs	r1, #1
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f001 fc6a 	bl	8010774 <RCCEx_PLL3_Config>
 800eea0:	4603      	mov	r3, r0
 800eea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800eea6:	e004      	b.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eeae:	e000      	b.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800eeb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eeb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d10b      	bne.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eeba:	4b26      	ldr	r3, [pc, #152]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eebe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800eec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeca:	4a22      	ldr	r2, [pc, #136]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eecc:	430b      	orrs	r3, r1
 800eece:	6553      	str	r3, [r2, #84]	; 0x54
 800eed0:	e003      	b.n	800eeda <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eed6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800eeda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800eee6:	673b      	str	r3, [r7, #112]	; 0x70
 800eee8:	2300      	movs	r3, #0
 800eeea:	677b      	str	r3, [r7, #116]	; 0x74
 800eeec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800eef0:	460b      	mov	r3, r1
 800eef2:	4313      	orrs	r3, r2
 800eef4:	d034      	beq.n	800ef60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800eef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eefa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d003      	beq.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ef00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef04:	d007      	beq.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ef06:	e011      	b.n	800ef2c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef08:	4b12      	ldr	r3, [pc, #72]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0c:	4a11      	ldr	r2, [pc, #68]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ef14:	e00e      	b.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ef16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	2102      	movs	r1, #2
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f001 fb76 	bl	8010610 <RCCEx_PLL2_Config>
 800ef24:	4603      	mov	r3, r0
 800ef26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ef2a:	e003      	b.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d10d      	bne.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ef3c:	4b05      	ldr	r3, [pc, #20]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ef44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef4a:	4a02      	ldr	r2, [pc, #8]	; (800ef54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef4c:	430b      	orrs	r3, r1
 800ef4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ef50:	e006      	b.n	800ef60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ef52:	bf00      	nop
 800ef54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ef60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef68:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ef6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef6e:	2300      	movs	r3, #0
 800ef70:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ef72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ef76:	460b      	mov	r3, r1
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	d00c      	beq.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ef7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef80:	3328      	adds	r3, #40	; 0x28
 800ef82:	2102      	movs	r1, #2
 800ef84:	4618      	mov	r0, r3
 800ef86:	f001 fbf5 	bl	8010774 <RCCEx_PLL3_Config>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d002      	beq.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ef96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800efa2:	663b      	str	r3, [r7, #96]	; 0x60
 800efa4:	2300      	movs	r3, #0
 800efa6:	667b      	str	r3, [r7, #100]	; 0x64
 800efa8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800efac:	460b      	mov	r3, r1
 800efae:	4313      	orrs	r3, r2
 800efb0:	d038      	beq.n	800f024 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800efb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800efbe:	d018      	beq.n	800eff2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800efc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800efc4:	d811      	bhi.n	800efea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800efc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800efca:	d014      	beq.n	800eff6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800efcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800efd0:	d80b      	bhi.n	800efea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d011      	beq.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800efd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efda:	d106      	bne.n	800efea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efdc:	4bc3      	ldr	r3, [pc, #780]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800efde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efe0:	4ac2      	ldr	r2, [pc, #776]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800efe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800efe8:	e008      	b.n	800effc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800efea:	2301      	movs	r3, #1
 800efec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eff0:	e004      	b.n	800effc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800eff2:	bf00      	nop
 800eff4:	e002      	b.n	800effc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800eff6:	bf00      	nop
 800eff8:	e000      	b.n	800effc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800effa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800effc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f000:	2b00      	cmp	r3, #0
 800f002:	d10b      	bne.n	800f01c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f004:	4bb9      	ldr	r3, [pc, #740]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f008:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f014:	4ab5      	ldr	r2, [pc, #724]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f016:	430b      	orrs	r3, r1
 800f018:	6553      	str	r3, [r2, #84]	; 0x54
 800f01a:	e003      	b.n	800f024 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f01c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800f030:	65bb      	str	r3, [r7, #88]	; 0x58
 800f032:	2300      	movs	r3, #0
 800f034:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f036:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800f03a:	460b      	mov	r3, r1
 800f03c:	4313      	orrs	r3, r2
 800f03e:	d009      	beq.n	800f054 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f040:	4baa      	ldr	r3, [pc, #680]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f044:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f04c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f04e:	4aa7      	ldr	r2, [pc, #668]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f050:	430b      	orrs	r3, r1
 800f052:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800f060:	653b      	str	r3, [r7, #80]	; 0x50
 800f062:	2300      	movs	r3, #0
 800f064:	657b      	str	r3, [r7, #84]	; 0x54
 800f066:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800f06a:	460b      	mov	r3, r1
 800f06c:	4313      	orrs	r3, r2
 800f06e:	d00a      	beq.n	800f086 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f070:	4b9e      	ldr	r3, [pc, #632]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800f078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f07c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f080:	4a9a      	ldr	r2, [pc, #616]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f082:	430b      	orrs	r3, r1
 800f084:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800f092:	64bb      	str	r3, [r7, #72]	; 0x48
 800f094:	2300      	movs	r3, #0
 800f096:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f098:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800f09c:	460b      	mov	r3, r1
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	d009      	beq.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f0a2:	4b92      	ldr	r3, [pc, #584]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800f0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0b0:	4a8e      	ldr	r2, [pc, #568]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0b2:	430b      	orrs	r3, r1
 800f0b4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0be:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800f0c2:	643b      	str	r3, [r7, #64]	; 0x40
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	647b      	str	r3, [r7, #68]	; 0x44
 800f0c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	d00e      	beq.n	800f0f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f0d2:	4b86      	ldr	r3, [pc, #536]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0d4:	691b      	ldr	r3, [r3, #16]
 800f0d6:	4a85      	ldr	r2, [pc, #532]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f0dc:	6113      	str	r3, [r2, #16]
 800f0de:	4b83      	ldr	r3, [pc, #524]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0e0:	6919      	ldr	r1, [r3, #16]
 800f0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f0ea:	4a80      	ldr	r2, [pc, #512]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f0ec:	430b      	orrs	r3, r1
 800f0ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800f0fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0fe:	2300      	movs	r3, #0
 800f100:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f102:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800f106:	460b      	mov	r3, r1
 800f108:	4313      	orrs	r3, r2
 800f10a:	d009      	beq.n	800f120 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f10c:	4b77      	ldr	r3, [pc, #476]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f110:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f11a:	4a74      	ldr	r2, [pc, #464]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f11c:	430b      	orrs	r3, r1
 800f11e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f128:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800f12c:	633b      	str	r3, [r7, #48]	; 0x30
 800f12e:	2300      	movs	r3, #0
 800f130:	637b      	str	r3, [r7, #52]	; 0x34
 800f132:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800f136:	460b      	mov	r3, r1
 800f138:	4313      	orrs	r3, r2
 800f13a:	d00a      	beq.n	800f152 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f13c:	4b6b      	ldr	r3, [pc, #428]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f140:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800f144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f14c:	4a67      	ldr	r2, [pc, #412]	; (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f14e:	430b      	orrs	r3, r1
 800f150:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15a:	2100      	movs	r1, #0
 800f15c:	62b9      	str	r1, [r7, #40]	; 0x28
 800f15e:	f003 0301 	and.w	r3, r3, #1
 800f162:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f164:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800f168:	460b      	mov	r3, r1
 800f16a:	4313      	orrs	r3, r2
 800f16c:	d011      	beq.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f172:	3308      	adds	r3, #8
 800f174:	2100      	movs	r1, #0
 800f176:	4618      	mov	r0, r3
 800f178:	f001 fa4a 	bl	8010610 <RCCEx_PLL2_Config>
 800f17c:	4603      	mov	r3, r0
 800f17e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f186:	2b00      	cmp	r3, #0
 800f188:	d003      	beq.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f18a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f18e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19a:	2100      	movs	r1, #0
 800f19c:	6239      	str	r1, [r7, #32]
 800f19e:	f003 0302 	and.w	r3, r3, #2
 800f1a2:	627b      	str	r3, [r7, #36]	; 0x24
 800f1a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	d011      	beq.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1b2:	3308      	adds	r3, #8
 800f1b4:	2101      	movs	r1, #1
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f001 fa2a 	bl	8010610 <RCCEx_PLL2_Config>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f1c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d003      	beq.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1da:	2100      	movs	r1, #0
 800f1dc:	61b9      	str	r1, [r7, #24]
 800f1de:	f003 0304 	and.w	r3, r3, #4
 800f1e2:	61fb      	str	r3, [r7, #28]
 800f1e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	d011      	beq.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1f2:	3308      	adds	r3, #8
 800f1f4:	2102      	movs	r1, #2
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f001 fa0a 	bl	8010610 <RCCEx_PLL2_Config>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f206:	2b00      	cmp	r3, #0
 800f208:	d003      	beq.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f20a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f20e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21a:	2100      	movs	r1, #0
 800f21c:	6139      	str	r1, [r7, #16]
 800f21e:	f003 0308 	and.w	r3, r3, #8
 800f222:	617b      	str	r3, [r7, #20]
 800f224:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f228:	460b      	mov	r3, r1
 800f22a:	4313      	orrs	r3, r2
 800f22c:	d011      	beq.n	800f252 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f232:	3328      	adds	r3, #40	; 0x28
 800f234:	2100      	movs	r1, #0
 800f236:	4618      	mov	r0, r3
 800f238:	f001 fa9c 	bl	8010774 <RCCEx_PLL3_Config>
 800f23c:	4603      	mov	r3, r0
 800f23e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800f242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f246:	2b00      	cmp	r3, #0
 800f248:	d003      	beq.n	800f252 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f24e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25a:	2100      	movs	r1, #0
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	f003 0310 	and.w	r3, r3, #16
 800f262:	60fb      	str	r3, [r7, #12]
 800f264:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f268:	460b      	mov	r3, r1
 800f26a:	4313      	orrs	r3, r2
 800f26c:	d011      	beq.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f272:	3328      	adds	r3, #40	; 0x28
 800f274:	2101      	movs	r1, #1
 800f276:	4618      	mov	r0, r3
 800f278:	f001 fa7c 	bl	8010774 <RCCEx_PLL3_Config>
 800f27c:	4603      	mov	r3, r0
 800f27e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f286:	2b00      	cmp	r3, #0
 800f288:	d003      	beq.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f28a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f28e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29a:	2100      	movs	r1, #0
 800f29c:	6039      	str	r1, [r7, #0]
 800f29e:	f003 0320 	and.w	r3, r3, #32
 800f2a2:	607b      	str	r3, [r7, #4]
 800f2a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	d011      	beq.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2b2:	3328      	adds	r3, #40	; 0x28
 800f2b4:	2102      	movs	r1, #2
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f001 fa5c 	bl	8010774 <RCCEx_PLL3_Config>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f2c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d003      	beq.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800f2d2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d101      	bne.n	800f2de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	e000      	b.n	800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800f2de:	2301      	movs	r3, #1
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f2ec:	58024400 	.word	0x58024400

0800f2f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b090      	sub	sp, #64	; 0x40
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f2fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2fe:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f302:	430b      	orrs	r3, r1
 800f304:	f040 8094 	bne.w	800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f308:	4b9e      	ldr	r3, [pc, #632]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f30c:	f003 0307 	and.w	r3, r3, #7
 800f310:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f314:	2b04      	cmp	r3, #4
 800f316:	f200 8087 	bhi.w	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f31a:	a201      	add	r2, pc, #4	; (adr r2, 800f320 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f320:	0800f335 	.word	0x0800f335
 800f324:	0800f35d 	.word	0x0800f35d
 800f328:	0800f385 	.word	0x0800f385
 800f32c:	0800f421 	.word	0x0800f421
 800f330:	0800f3ad 	.word	0x0800f3ad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f334:	4b93      	ldr	r3, [pc, #588]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f33c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f340:	d108      	bne.n	800f354 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f346:	4618      	mov	r0, r3
 800f348:	f001 f810 	bl	801036c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f350:	f000 bd45 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f354:	2300      	movs	r3, #0
 800f356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f358:	f000 bd41 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f35c:	4b89      	ldr	r3, [pc, #548]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f368:	d108      	bne.n	800f37c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f36a:	f107 0318 	add.w	r3, r7, #24
 800f36e:	4618      	mov	r0, r3
 800f370:	f000 fd54 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f378:	f000 bd31 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f37c:	2300      	movs	r3, #0
 800f37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f380:	f000 bd2d 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f384:	4b7f      	ldr	r3, [pc, #508]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f38c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f390:	d108      	bne.n	800f3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f392:	f107 030c 	add.w	r3, r7, #12
 800f396:	4618      	mov	r0, r3
 800f398:	f000 fe94 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3a0:	f000 bd1d 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3a8:	f000 bd19 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f3ac:	4b75      	ldr	r3, [pc, #468]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f3b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f3b6:	4b73      	ldr	r3, [pc, #460]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f003 0304 	and.w	r3, r3, #4
 800f3be:	2b04      	cmp	r3, #4
 800f3c0:	d10c      	bne.n	800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d109      	bne.n	800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f3c8:	4b6e      	ldr	r3, [pc, #440]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	08db      	lsrs	r3, r3, #3
 800f3ce:	f003 0303 	and.w	r3, r3, #3
 800f3d2:	4a6d      	ldr	r2, [pc, #436]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f3d4:	fa22 f303 	lsr.w	r3, r2, r3
 800f3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3da:	e01f      	b.n	800f41c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f3dc:	4b69      	ldr	r3, [pc, #420]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3e8:	d106      	bne.n	800f3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3f0:	d102      	bne.n	800f3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f3f2:	4b66      	ldr	r3, [pc, #408]	; (800f58c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3f6:	e011      	b.n	800f41c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f3f8:	4b62      	ldr	r3, [pc, #392]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f404:	d106      	bne.n	800f414 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f40c:	d102      	bne.n	800f414 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f40e:	4b60      	ldr	r3, [pc, #384]	; (800f590 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f410:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f412:	e003      	b.n	800f41c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f414:	2300      	movs	r3, #0
 800f416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f418:	f000 bce1 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f41c:	f000 bcdf 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f420:	4b5c      	ldr	r3, [pc, #368]	; (800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f424:	f000 bcdb 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f428:	2300      	movs	r3, #0
 800f42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f42c:	f000 bcd7 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f430:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f434:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f438:	430b      	orrs	r3, r1
 800f43a:	f040 80ad 	bne.w	800f598 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f43e:	4b51      	ldr	r3, [pc, #324]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f442:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800f446:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f44e:	d056      	beq.n	800f4fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f456:	f200 8090 	bhi.w	800f57a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45c:	2bc0      	cmp	r3, #192	; 0xc0
 800f45e:	f000 8088 	beq.w	800f572 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f464:	2bc0      	cmp	r3, #192	; 0xc0
 800f466:	f200 8088 	bhi.w	800f57a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46c:	2b80      	cmp	r3, #128	; 0x80
 800f46e:	d032      	beq.n	800f4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f472:	2b80      	cmp	r3, #128	; 0x80
 800f474:	f200 8081 	bhi.w	800f57a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d003      	beq.n	800f486 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f480:	2b40      	cmp	r3, #64	; 0x40
 800f482:	d014      	beq.n	800f4ae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f484:	e079      	b.n	800f57a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f486:	4b3f      	ldr	r3, [pc, #252]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f48e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f492:	d108      	bne.n	800f4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f498:	4618      	mov	r0, r3
 800f49a:	f000 ff67 	bl	801036c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4a2:	f000 bc9c 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4aa:	f000 bc98 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4ae:	4b35      	ldr	r3, [pc, #212]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f4b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f4ba:	d108      	bne.n	800f4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4bc:	f107 0318 	add.w	r3, r7, #24
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 fcab 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4ca:	f000 bc88 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4d2:	f000 bc84 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4d6:	4b2b      	ldr	r3, [pc, #172]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f4de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4e2:	d108      	bne.n	800f4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4e4:	f107 030c 	add.w	r3, r7, #12
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f000 fdeb 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4f2:	f000 bc74 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4fa:	f000 bc70 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f4fe:	4b21      	ldr	r3, [pc, #132]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f502:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f506:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f508:	4b1e      	ldr	r3, [pc, #120]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f003 0304 	and.w	r3, r3, #4
 800f510:	2b04      	cmp	r3, #4
 800f512:	d10c      	bne.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800f514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f516:	2b00      	cmp	r3, #0
 800f518:	d109      	bne.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f51a:	4b1a      	ldr	r3, [pc, #104]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	08db      	lsrs	r3, r3, #3
 800f520:	f003 0303 	and.w	r3, r3, #3
 800f524:	4a18      	ldr	r2, [pc, #96]	; (800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f526:	fa22 f303 	lsr.w	r3, r2, r3
 800f52a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f52c:	e01f      	b.n	800f56e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f52e:	4b15      	ldr	r3, [pc, #84]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f53a:	d106      	bne.n	800f54a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f53e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f542:	d102      	bne.n	800f54a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f544:	4b11      	ldr	r3, [pc, #68]	; (800f58c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f546:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f548:	e011      	b.n	800f56e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f54a:	4b0e      	ldr	r3, [pc, #56]	; (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f556:	d106      	bne.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800f558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f55a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f55e:	d102      	bne.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f560:	4b0b      	ldr	r3, [pc, #44]	; (800f590 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f562:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f564:	e003      	b.n	800f56e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f56a:	f000 bc38 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f56e:	f000 bc36 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f572:	4b08      	ldr	r3, [pc, #32]	; (800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f576:	f000 bc32 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f57a:	2300      	movs	r3, #0
 800f57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f57e:	f000 bc2e 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f582:	bf00      	nop
 800f584:	58024400 	.word	0x58024400
 800f588:	03d09000 	.word	0x03d09000
 800f58c:	003d0900 	.word	0x003d0900
 800f590:	017d7840 	.word	0x017d7840
 800f594:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f59c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f5a0:	430b      	orrs	r3, r1
 800f5a2:	f040 809c 	bne.w	800f6de <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f5a6:	4b9e      	ldr	r3, [pc, #632]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5aa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f5ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f5b6:	d054      	beq.n	800f662 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f5be:	f200 808b 	bhi.w	800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f5c8:	f000 8083 	beq.w	800f6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f5d2:	f200 8081 	bhi.w	800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f5dc:	d02f      	beq.n	800f63e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800f5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f5e4:	d878      	bhi.n	800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d004      	beq.n	800f5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f5f2:	d012      	beq.n	800f61a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f5f4:	e070      	b.n	800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f5f6:	4b8a      	ldr	r3, [pc, #552]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f5fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f602:	d107      	bne.n	800f614 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f608:	4618      	mov	r0, r3
 800f60a:	f000 feaf 	bl	801036c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f610:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f612:	e3e4      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f614:	2300      	movs	r3, #0
 800f616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f618:	e3e1      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f61a:	4b81      	ldr	r3, [pc, #516]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f626:	d107      	bne.n	800f638 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f628:	f107 0318 	add.w	r3, r7, #24
 800f62c:	4618      	mov	r0, r3
 800f62e:	f000 fbf5 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f636:	e3d2      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f638:	2300      	movs	r3, #0
 800f63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f63c:	e3cf      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f63e:	4b78      	ldr	r3, [pc, #480]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f64a:	d107      	bne.n	800f65c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f64c:	f107 030c 	add.w	r3, r7, #12
 800f650:	4618      	mov	r0, r3
 800f652:	f000 fd37 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f65a:	e3c0      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f65c:	2300      	movs	r3, #0
 800f65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f660:	e3bd      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f662:	4b6f      	ldr	r3, [pc, #444]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f666:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f66a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f66c:	4b6c      	ldr	r3, [pc, #432]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f003 0304 	and.w	r3, r3, #4
 800f674:	2b04      	cmp	r3, #4
 800f676:	d10c      	bne.n	800f692 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d109      	bne.n	800f692 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f67e:	4b68      	ldr	r3, [pc, #416]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	08db      	lsrs	r3, r3, #3
 800f684:	f003 0303 	and.w	r3, r3, #3
 800f688:	4a66      	ldr	r2, [pc, #408]	; (800f824 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f68a:	fa22 f303 	lsr.w	r3, r2, r3
 800f68e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f690:	e01e      	b.n	800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f692:	4b63      	ldr	r3, [pc, #396]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f69a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f69e:	d106      	bne.n	800f6ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6a6:	d102      	bne.n	800f6ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f6a8:	4b5f      	ldr	r3, [pc, #380]	; (800f828 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6ac:	e010      	b.n	800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f6ae:	4b5c      	ldr	r3, [pc, #368]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f6ba:	d106      	bne.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6c2:	d102      	bne.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f6c4:	4b59      	ldr	r3, [pc, #356]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6c8:	e002      	b.n	800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f6ce:	e386      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f6d0:	e385      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f6d2:	4b57      	ldr	r3, [pc, #348]	; (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6d6:	e382      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6dc:	e37f      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f6de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6e2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f6e6:	430b      	orrs	r3, r1
 800f6e8:	f040 80a7 	bne.w	800f83a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f6ec:	4b4c      	ldr	r3, [pc, #304]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f6f4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f6fc:	d055      	beq.n	800f7aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f704:	f200 8096 	bhi.w	800f834 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f70e:	f000 8084 	beq.w	800f81a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f714:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f718:	f200 808c 	bhi.w	800f834 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f722:	d030      	beq.n	800f786 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f72a:	f200 8083 	bhi.w	800f834 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f730:	2b00      	cmp	r3, #0
 800f732:	d004      	beq.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f73a:	d012      	beq.n	800f762 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f73c:	e07a      	b.n	800f834 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f73e:	4b38      	ldr	r3, [pc, #224]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f74a:	d107      	bne.n	800f75c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f74c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f750:	4618      	mov	r0, r3
 800f752:	f000 fe0b 	bl	801036c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f75a:	e340      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f75c:	2300      	movs	r3, #0
 800f75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f760:	e33d      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f762:	4b2f      	ldr	r3, [pc, #188]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f76a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f76e:	d107      	bne.n	800f780 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f770:	f107 0318 	add.w	r3, r7, #24
 800f774:	4618      	mov	r0, r3
 800f776:	f000 fb51 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f77e:	e32e      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f780:	2300      	movs	r3, #0
 800f782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f784:	e32b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f786:	4b26      	ldr	r3, [pc, #152]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f78e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f792:	d107      	bne.n	800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f794:	f107 030c 	add.w	r3, r7, #12
 800f798:	4618      	mov	r0, r3
 800f79a:	f000 fc93 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7a2:	e31c      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7a8:	e319      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f7aa:	4b1d      	ldr	r3, [pc, #116]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f7b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f7b4:	4b1a      	ldr	r3, [pc, #104]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f003 0304 	and.w	r3, r3, #4
 800f7bc:	2b04      	cmp	r3, #4
 800f7be:	d10c      	bne.n	800f7da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d109      	bne.n	800f7da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f7c6:	4b16      	ldr	r3, [pc, #88]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	08db      	lsrs	r3, r3, #3
 800f7cc:	f003 0303 	and.w	r3, r3, #3
 800f7d0:	4a14      	ldr	r2, [pc, #80]	; (800f824 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f7d2:	fa22 f303 	lsr.w	r3, r2, r3
 800f7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7d8:	e01e      	b.n	800f818 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f7da:	4b11      	ldr	r3, [pc, #68]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7e6:	d106      	bne.n	800f7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7ee:	d102      	bne.n	800f7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f7f0:	4b0d      	ldr	r3, [pc, #52]	; (800f828 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7f4:	e010      	b.n	800f818 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f7f6:	4b0a      	ldr	r3, [pc, #40]	; (800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f802:	d106      	bne.n	800f812 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f80a:	d102      	bne.n	800f812 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f80c:	4b07      	ldr	r3, [pc, #28]	; (800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f80e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f810:	e002      	b.n	800f818 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f816:	e2e2      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f818:	e2e1      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f81a:	4b05      	ldr	r3, [pc, #20]	; (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f81e:	e2de      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f820:	58024400 	.word	0x58024400
 800f824:	03d09000 	.word	0x03d09000
 800f828:	003d0900 	.word	0x003d0900
 800f82c:	017d7840 	.word	0x017d7840
 800f830:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f834:	2300      	movs	r3, #0
 800f836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f838:	e2d1      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f83a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f83e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f842:	430b      	orrs	r3, r1
 800f844:	f040 809c 	bne.w	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f848:	4b93      	ldr	r3, [pc, #588]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f84c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f850:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f858:	d054      	beq.n	800f904 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f860:	f200 808b 	bhi.w	800f97a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f86a:	f000 8083 	beq.w	800f974 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f870:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f874:	f200 8081 	bhi.w	800f97a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f87e:	d02f      	beq.n	800f8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f886:	d878      	bhi.n	800f97a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d004      	beq.n	800f898 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f894:	d012      	beq.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f896:	e070      	b.n	800f97a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f898:	4b7f      	ldr	r3, [pc, #508]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f8a4:	d107      	bne.n	800f8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f8a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f000 fd5e 	bl	801036c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8b4:	e293      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8ba:	e290      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f8bc:	4b76      	ldr	r3, [pc, #472]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f8c8:	d107      	bne.n	800f8da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8ca:	f107 0318 	add.w	r3, r7, #24
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f000 faa4 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8d8:	e281      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8de:	e27e      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f8e0:	4b6d      	ldr	r3, [pc, #436]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f8e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8ec:	d107      	bne.n	800f8fe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8ee:	f107 030c 	add.w	r3, r7, #12
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f000 fbe6 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8fc:	e26f      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8fe:	2300      	movs	r3, #0
 800f900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f902:	e26c      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f904:	4b64      	ldr	r3, [pc, #400]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f90c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f90e:	4b62      	ldr	r3, [pc, #392]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f003 0304 	and.w	r3, r3, #4
 800f916:	2b04      	cmp	r3, #4
 800f918:	d10c      	bne.n	800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d109      	bne.n	800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f920:	4b5d      	ldr	r3, [pc, #372]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	08db      	lsrs	r3, r3, #3
 800f926:	f003 0303 	and.w	r3, r3, #3
 800f92a:	4a5c      	ldr	r2, [pc, #368]	; (800fa9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f92c:	fa22 f303 	lsr.w	r3, r2, r3
 800f930:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f932:	e01e      	b.n	800f972 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f934:	4b58      	ldr	r3, [pc, #352]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f93c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f940:	d106      	bne.n	800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f948:	d102      	bne.n	800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f94a:	4b55      	ldr	r3, [pc, #340]	; (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f94c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f94e:	e010      	b.n	800f972 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f950:	4b51      	ldr	r3, [pc, #324]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f95c:	d106      	bne.n	800f96c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f964:	d102      	bne.n	800f96c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f966:	4b4f      	ldr	r3, [pc, #316]	; (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f96a:	e002      	b.n	800f972 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f96c:	2300      	movs	r3, #0
 800f96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f970:	e235      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f972:	e234      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f974:	4b4c      	ldr	r3, [pc, #304]	; (800faa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f978:	e231      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f97a:	2300      	movs	r3, #0
 800f97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f97e:	e22e      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f980:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f984:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f988:	430b      	orrs	r3, r1
 800f98a:	f040 808f 	bne.w	800faac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f98e:	4b42      	ldr	r3, [pc, #264]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f992:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f996:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800f998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f99e:	d06b      	beq.n	800fa78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f9a6:	d874      	bhi.n	800fa92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f9ae:	d056      	beq.n	800fa5e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f9b6:	d86c      	bhi.n	800fa92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f9be:	d03b      	beq.n	800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f9c6:	d864      	bhi.n	800fa92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9ce:	d021      	beq.n	800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9d6:	d85c      	bhi.n	800fa92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d004      	beq.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9e4:	d004      	beq.n	800f9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f9e6:	e054      	b.n	800fa92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f9e8:	f7fe fa0a 	bl	800de00 <HAL_RCC_GetPCLK1Freq>
 800f9ec:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9ee:	e1f6      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f9f0:	4b29      	ldr	r3, [pc, #164]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f9f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f9fc:	d107      	bne.n	800fa0e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9fe:	f107 0318 	add.w	r3, r7, #24
 800fa02:	4618      	mov	r0, r3
 800fa04:	f000 fa0a 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa0c:	e1e7      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa12:	e1e4      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fa14:	4b20      	ldr	r3, [pc, #128]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa20:	d107      	bne.n	800fa32 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa22:	f107 030c 	add.w	r3, r7, #12
 800fa26:	4618      	mov	r0, r3
 800fa28:	f000 fb4c 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa30:	e1d5      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa32:	2300      	movs	r3, #0
 800fa34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa36:	e1d2      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fa38:	4b17      	ldr	r3, [pc, #92]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f003 0304 	and.w	r3, r3, #4
 800fa40:	2b04      	cmp	r3, #4
 800fa42:	d109      	bne.n	800fa58 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fa44:	4b14      	ldr	r3, [pc, #80]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	08db      	lsrs	r3, r3, #3
 800fa4a:	f003 0303 	and.w	r3, r3, #3
 800fa4e:	4a13      	ldr	r2, [pc, #76]	; (800fa9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800fa50:	fa22 f303 	lsr.w	r3, r2, r3
 800fa54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa56:	e1c2      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa5c:	e1bf      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fa5e:	4b0e      	ldr	r3, [pc, #56]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa6a:	d102      	bne.n	800fa72 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800fa6c:	4b0c      	ldr	r3, [pc, #48]	; (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800fa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa70:	e1b5      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa72:	2300      	movs	r3, #0
 800fa74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa76:	e1b2      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fa78:	4b07      	ldr	r3, [pc, #28]	; (800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa84:	d102      	bne.n	800fa8c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800fa86:	4b07      	ldr	r3, [pc, #28]	; (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800fa88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa8a:	e1a8      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa90:	e1a5      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fa92:	2300      	movs	r3, #0
 800fa94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa96:	e1a2      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fa98:	58024400 	.word	0x58024400
 800fa9c:	03d09000 	.word	0x03d09000
 800faa0:	003d0900 	.word	0x003d0900
 800faa4:	017d7840 	.word	0x017d7840
 800faa8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800faac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fab0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800fab4:	430b      	orrs	r3, r1
 800fab6:	d173      	bne.n	800fba0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800fab8:	4b9c      	ldr	r3, [pc, #624]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800faba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fabc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fac0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fac8:	d02f      	beq.n	800fb2a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800faca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800facc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fad0:	d863      	bhi.n	800fb9a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800fad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d004      	beq.n	800fae2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800fad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fade:	d012      	beq.n	800fb06 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800fae0:	e05b      	b.n	800fb9a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fae2:	4b92      	ldr	r3, [pc, #584]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800faea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800faee:	d107      	bne.n	800fb00 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800faf0:	f107 0318 	add.w	r3, r7, #24
 800faf4:	4618      	mov	r0, r3
 800faf6:	f000 f991 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fafe:	e16e      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb00:	2300      	movs	r3, #0
 800fb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb04:	e16b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fb06:	4b89      	ldr	r3, [pc, #548]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fb0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb12:	d107      	bne.n	800fb24 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb14:	f107 030c 	add.w	r3, r7, #12
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f000 fad3 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb22:	e15c      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb24:	2300      	movs	r3, #0
 800fb26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb28:	e159      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fb2a:	4b80      	ldr	r3, [pc, #512]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fb32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fb34:	4b7d      	ldr	r3, [pc, #500]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f003 0304 	and.w	r3, r3, #4
 800fb3c:	2b04      	cmp	r3, #4
 800fb3e:	d10c      	bne.n	800fb5a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800fb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d109      	bne.n	800fb5a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb46:	4b79      	ldr	r3, [pc, #484]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	08db      	lsrs	r3, r3, #3
 800fb4c:	f003 0303 	and.w	r3, r3, #3
 800fb50:	4a77      	ldr	r2, [pc, #476]	; (800fd30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800fb52:	fa22 f303 	lsr.w	r3, r2, r3
 800fb56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb58:	e01e      	b.n	800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fb5a:	4b74      	ldr	r3, [pc, #464]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb66:	d106      	bne.n	800fb76 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800fb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fb6e:	d102      	bne.n	800fb76 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fb70:	4b70      	ldr	r3, [pc, #448]	; (800fd34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800fb72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb74:	e010      	b.n	800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fb76:	4b6d      	ldr	r3, [pc, #436]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb82:	d106      	bne.n	800fb92 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800fb84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb8a:	d102      	bne.n	800fb92 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fb8c:	4b6a      	ldr	r3, [pc, #424]	; (800fd38 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800fb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb90:	e002      	b.n	800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fb96:	e122      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fb98:	e121      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb9e:	e11e      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800fba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fba4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800fba8:	430b      	orrs	r3, r1
 800fbaa:	d133      	bne.n	800fc14 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800fbac:	4b5f      	ldr	r3, [pc, #380]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fbae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fbb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d004      	beq.n	800fbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbc2:	d012      	beq.n	800fbea <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800fbc4:	e023      	b.n	800fc0e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fbc6:	4b59      	ldr	r3, [pc, #356]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fbd2:	d107      	bne.n	800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fbd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f000 fbc7 	bl	801036c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbe2:	e0fc      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbe8:	e0f9      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fbea:	4b50      	ldr	r3, [pc, #320]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fbf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fbf6:	d107      	bne.n	800fc08 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbf8:	f107 0318 	add.w	r3, r7, #24
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f000 f90d 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800fc02:	6a3b      	ldr	r3, [r7, #32]
 800fc04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc06:	e0ea      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc0c:	e0e7      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc12:	e0e4      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800fc14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc18:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800fc1c:	430b      	orrs	r3, r1
 800fc1e:	f040 808d 	bne.w	800fd3c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800fc22:	4b42      	ldr	r3, [pc, #264]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc26:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800fc2a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc32:	d06b      	beq.n	800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800fc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc3a:	d874      	bhi.n	800fd26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc42:	d056      	beq.n	800fcf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800fc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc4a:	d86c      	bhi.n	800fd26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fc52:	d03b      	beq.n	800fccc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800fc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fc5a:	d864      	bhi.n	800fd26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc62:	d021      	beq.n	800fca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800fc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc6a:	d85c      	bhi.n	800fd26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d004      	beq.n	800fc7c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800fc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc78:	d004      	beq.n	800fc84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800fc7a:	e054      	b.n	800fd26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800fc7c:	f000 f8b8 	bl	800fdf0 <HAL_RCCEx_GetD3PCLK1Freq>
 800fc80:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc82:	e0ac      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc84:	4b29      	ldr	r3, [pc, #164]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc90:	d107      	bne.n	800fca2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc92:	f107 0318 	add.w	r3, r7, #24
 800fc96:	4618      	mov	r0, r3
 800fc98:	f000 f8c0 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fca0:	e09d      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fca2:	2300      	movs	r3, #0
 800fca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fca6:	e09a      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fca8:	4b20      	ldr	r3, [pc, #128]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fcb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fcb4:	d107      	bne.n	800fcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcb6:	f107 030c 	add.w	r3, r7, #12
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f000 fa02 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcc4:	e08b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcca:	e088      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fccc:	4b17      	ldr	r3, [pc, #92]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f003 0304 	and.w	r3, r3, #4
 800fcd4:	2b04      	cmp	r3, #4
 800fcd6:	d109      	bne.n	800fcec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fcd8:	4b14      	ldr	r3, [pc, #80]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	08db      	lsrs	r3, r3, #3
 800fcde:	f003 0303 	and.w	r3, r3, #3
 800fce2:	4a13      	ldr	r2, [pc, #76]	; (800fd30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800fce4:	fa22 f303 	lsr.w	r3, r2, r3
 800fce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcea:	e078      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fcec:	2300      	movs	r3, #0
 800fcee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcf0:	e075      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fcf2:	4b0e      	ldr	r3, [pc, #56]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcfe:	d102      	bne.n	800fd06 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800fd00:	4b0c      	ldr	r3, [pc, #48]	; (800fd34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800fd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd04:	e06b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd0a:	e068      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fd0c:	4b07      	ldr	r3, [pc, #28]	; (800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd18:	d102      	bne.n	800fd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800fd1a:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800fd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd1e:	e05e      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd20:	2300      	movs	r3, #0
 800fd22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd24:	e05b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800fd26:	2300      	movs	r3, #0
 800fd28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd2a:	e058      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fd2c:	58024400 	.word	0x58024400
 800fd30:	03d09000 	.word	0x03d09000
 800fd34:	003d0900 	.word	0x003d0900
 800fd38:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fd3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd40:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800fd44:	430b      	orrs	r3, r1
 800fd46:	d148      	bne.n	800fdda <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800fd48:	4b27      	ldr	r3, [pc, #156]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fd4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fd50:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd58:	d02a      	beq.n	800fdb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800fd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd60:	d838      	bhi.n	800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800fd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d004      	beq.n	800fd72 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800fd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd6e:	d00d      	beq.n	800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800fd70:	e030      	b.n	800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fd72:	4b1d      	ldr	r3, [pc, #116]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd7e:	d102      	bne.n	800fd86 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800fd80:	4b1a      	ldr	r3, [pc, #104]	; (800fdec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800fd82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd84:	e02b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd86:	2300      	movs	r3, #0
 800fd88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd8a:	e028      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd8c:	4b16      	ldr	r3, [pc, #88]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fd98:	d107      	bne.n	800fdaa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f000 fae4 	bl	801036c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fda8:	e019      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdae:	e016      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fdb0:	4b0d      	ldr	r3, [pc, #52]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fdb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fdbc:	d107      	bne.n	800fdce <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdbe:	f107 0318 	add.w	r3, r7, #24
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f000 f82a 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fdc8:	69fb      	ldr	r3, [r7, #28]
 800fdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdcc:	e007      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdd2:	e004      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdd8:	e001      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800fdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3740      	adds	r7, #64	; 0x40
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	58024400 	.word	0x58024400
 800fdec:	017d7840 	.word	0x017d7840

0800fdf0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fdf4:	f7fd ffd4 	bl	800dda0 <HAL_RCC_GetHCLKFreq>
 800fdf8:	4602      	mov	r2, r0
 800fdfa:	4b06      	ldr	r3, [pc, #24]	; (800fe14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fdfc:	6a1b      	ldr	r3, [r3, #32]
 800fdfe:	091b      	lsrs	r3, r3, #4
 800fe00:	f003 0307 	and.w	r3, r3, #7
 800fe04:	4904      	ldr	r1, [pc, #16]	; (800fe18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fe06:	5ccb      	ldrb	r3, [r1, r3]
 800fe08:	f003 031f 	and.w	r3, r3, #31
 800fe0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	58024400 	.word	0x58024400
 800fe18:	0801a174 	.word	0x0801a174

0800fe1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b089      	sub	sp, #36	; 0x24
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fe24:	4ba1      	ldr	r3, [pc, #644]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe28:	f003 0303 	and.w	r3, r3, #3
 800fe2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fe2e:	4b9f      	ldr	r3, [pc, #636]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe32:	0b1b      	lsrs	r3, r3, #12
 800fe34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fe3a:	4b9c      	ldr	r3, [pc, #624]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3e:	091b      	lsrs	r3, r3, #4
 800fe40:	f003 0301 	and.w	r3, r3, #1
 800fe44:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fe46:	4b99      	ldr	r3, [pc, #612]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe4a:	08db      	lsrs	r3, r3, #3
 800fe4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe50:	693a      	ldr	r2, [r7, #16]
 800fe52:	fb02 f303 	mul.w	r3, r2, r3
 800fe56:	ee07 3a90 	vmov	s15, r3
 800fe5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f000 8111 	beq.w	801008c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fe6a:	69bb      	ldr	r3, [r7, #24]
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	f000 8083 	beq.w	800ff78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fe72:	69bb      	ldr	r3, [r7, #24]
 800fe74:	2b02      	cmp	r3, #2
 800fe76:	f200 80a1 	bhi.w	800ffbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d003      	beq.n	800fe88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d056      	beq.n	800ff34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fe86:	e099      	b.n	800ffbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe88:	4b88      	ldr	r3, [pc, #544]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f003 0320 	and.w	r3, r3, #32
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d02d      	beq.n	800fef0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe94:	4b85      	ldr	r3, [pc, #532]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	08db      	lsrs	r3, r3, #3
 800fe9a:	f003 0303 	and.w	r3, r3, #3
 800fe9e:	4a84      	ldr	r2, [pc, #528]	; (80100b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fea0:	fa22 f303 	lsr.w	r3, r2, r3
 800fea4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	ee07 3a90 	vmov	s15, r3
 800feac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	ee07 3a90 	vmov	s15, r3
 800feb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800febe:	4b7b      	ldr	r3, [pc, #492]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fec6:	ee07 3a90 	vmov	s15, r3
 800feca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fece:	ed97 6a03 	vldr	s12, [r7, #12]
 800fed2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80100b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800feee:	e087      	b.n	8010000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	ee07 3a90 	vmov	s15, r3
 800fef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fefa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80100b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fefe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff02:	4b6a      	ldr	r3, [pc, #424]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff0a:	ee07 3a90 	vmov	s15, r3
 800ff0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff16:	eddf 5a67 	vldr	s11, [pc, #412]	; 80100b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff32:	e065      	b.n	8010000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	ee07 3a90 	vmov	s15, r3
 800ff3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ff42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff46:	4b59      	ldr	r3, [pc, #356]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff4e:	ee07 3a90 	vmov	s15, r3
 800ff52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80100b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff76:	e043      	b.n	8010000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	ee07 3a90 	vmov	s15, r3
 800ff7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80100c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ff86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff8a:	4b48      	ldr	r3, [pc, #288]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff92:	ee07 3a90 	vmov	s15, r3
 800ff96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80100b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ffa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ffba:	e021      	b.n	8010000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	ee07 3a90 	vmov	s15, r3
 800ffc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ffca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffce:	4b37      	ldr	r3, [pc, #220]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffd6:	ee07 3a90 	vmov	s15, r3
 800ffda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffde:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffe2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80100b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ffe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fffe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010000:	4b2a      	ldr	r3, [pc, #168]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010004:	0a5b      	lsrs	r3, r3, #9
 8010006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801000a:	ee07 3a90 	vmov	s15, r3
 801000e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010016:	ee37 7a87 	vadd.f32	s14, s15, s14
 801001a:	edd7 6a07 	vldr	s13, [r7, #28]
 801001e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010026:	ee17 2a90 	vmov	r2, s15
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801002e:	4b1f      	ldr	r3, [pc, #124]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010032:	0c1b      	lsrs	r3, r3, #16
 8010034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010038:	ee07 3a90 	vmov	s15, r3
 801003c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010044:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010048:	edd7 6a07 	vldr	s13, [r7, #28]
 801004c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010054:	ee17 2a90 	vmov	r2, s15
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801005c:	4b13      	ldr	r3, [pc, #76]	; (80100ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801005e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010060:	0e1b      	lsrs	r3, r3, #24
 8010062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010066:	ee07 3a90 	vmov	s15, r3
 801006a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801006e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010072:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010076:	edd7 6a07 	vldr	s13, [r7, #28]
 801007a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801007e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010082:	ee17 2a90 	vmov	r2, s15
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801008a:	e008      	b.n	801009e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2200      	movs	r2, #0
 8010090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2200      	movs	r2, #0
 8010096:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	609a      	str	r2, [r3, #8]
}
 801009e:	bf00      	nop
 80100a0:	3724      	adds	r7, #36	; 0x24
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr
 80100aa:	bf00      	nop
 80100ac:	58024400 	.word	0x58024400
 80100b0:	03d09000 	.word	0x03d09000
 80100b4:	46000000 	.word	0x46000000
 80100b8:	4c742400 	.word	0x4c742400
 80100bc:	4a742400 	.word	0x4a742400
 80100c0:	4bbebc20 	.word	0x4bbebc20

080100c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b089      	sub	sp, #36	; 0x24
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80100cc:	4ba1      	ldr	r3, [pc, #644]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100d0:	f003 0303 	and.w	r3, r3, #3
 80100d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80100d6:	4b9f      	ldr	r3, [pc, #636]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100da:	0d1b      	lsrs	r3, r3, #20
 80100dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80100e2:	4b9c      	ldr	r3, [pc, #624]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e6:	0a1b      	lsrs	r3, r3, #8
 80100e8:	f003 0301 	and.w	r3, r3, #1
 80100ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80100ee:	4b99      	ldr	r3, [pc, #612]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100f2:	08db      	lsrs	r3, r3, #3
 80100f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80100f8:	693a      	ldr	r2, [r7, #16]
 80100fa:	fb02 f303 	mul.w	r3, r2, r3
 80100fe:	ee07 3a90 	vmov	s15, r3
 8010102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010106:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	2b00      	cmp	r3, #0
 801010e:	f000 8111 	beq.w	8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	2b02      	cmp	r3, #2
 8010116:	f000 8083 	beq.w	8010220 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	2b02      	cmp	r3, #2
 801011e:	f200 80a1 	bhi.w	8010264 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010122:	69bb      	ldr	r3, [r7, #24]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d003      	beq.n	8010130 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	2b01      	cmp	r3, #1
 801012c:	d056      	beq.n	80101dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801012e:	e099      	b.n	8010264 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010130:	4b88      	ldr	r3, [pc, #544]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	f003 0320 	and.w	r3, r3, #32
 8010138:	2b00      	cmp	r3, #0
 801013a:	d02d      	beq.n	8010198 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801013c:	4b85      	ldr	r3, [pc, #532]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	08db      	lsrs	r3, r3, #3
 8010142:	f003 0303 	and.w	r3, r3, #3
 8010146:	4a84      	ldr	r2, [pc, #528]	; (8010358 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010148:	fa22 f303 	lsr.w	r3, r2, r3
 801014c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	ee07 3a90 	vmov	s15, r3
 8010154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	ee07 3a90 	vmov	s15, r3
 801015e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010166:	4b7b      	ldr	r3, [pc, #492]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801016a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801016e:	ee07 3a90 	vmov	s15, r3
 8010172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010176:	ed97 6a03 	vldr	s12, [r7, #12]
 801017a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801035c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801017e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801018a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801018e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010192:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010196:	e087      	b.n	80102a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	ee07 3a90 	vmov	s15, r3
 801019e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010360 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80101a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101aa:	4b6a      	ldr	r3, [pc, #424]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101b2:	ee07 3a90 	vmov	s15, r3
 80101b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80101be:	eddf 5a67 	vldr	s11, [pc, #412]	; 801035c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80101c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80101da:	e065      	b.n	80102a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	ee07 3a90 	vmov	s15, r3
 80101e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80101ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101ee:	4b59      	ldr	r3, [pc, #356]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101f6:	ee07 3a90 	vmov	s15, r3
 80101fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8010202:	eddf 5a56 	vldr	s11, [pc, #344]	; 801035c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801020a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801020e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010216:	ee67 7a27 	vmul.f32	s15, s14, s15
 801021a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801021e:	e043      	b.n	80102a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	ee07 3a90 	vmov	s15, r3
 8010226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801022a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801022e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010232:	4b48      	ldr	r3, [pc, #288]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801023a:	ee07 3a90 	vmov	s15, r3
 801023e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010242:	ed97 6a03 	vldr	s12, [r7, #12]
 8010246:	eddf 5a45 	vldr	s11, [pc, #276]	; 801035c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801024a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801024e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801025a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801025e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010262:	e021      	b.n	80102a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	ee07 3a90 	vmov	s15, r3
 801026a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801026e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010276:	4b37      	ldr	r3, [pc, #220]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801027a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801027e:	ee07 3a90 	vmov	s15, r3
 8010282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010286:	ed97 6a03 	vldr	s12, [r7, #12]
 801028a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801035c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801028e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801029a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801029e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80102a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80102a8:	4b2a      	ldr	r3, [pc, #168]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ac:	0a5b      	lsrs	r3, r3, #9
 80102ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102b2:	ee07 3a90 	vmov	s15, r3
 80102b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80102c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102ce:	ee17 2a90 	vmov	r2, s15
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80102d6:	4b1f      	ldr	r3, [pc, #124]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102da:	0c1b      	lsrs	r3, r3, #16
 80102dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102e0:	ee07 3a90 	vmov	s15, r3
 80102e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80102f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102fc:	ee17 2a90 	vmov	r2, s15
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010304:	4b13      	ldr	r3, [pc, #76]	; (8010354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010308:	0e1b      	lsrs	r3, r3, #24
 801030a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801030e:	ee07 3a90 	vmov	s15, r3
 8010312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801031a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801031e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801032a:	ee17 2a90 	vmov	r2, s15
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010332:	e008      	b.n	8010346 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	609a      	str	r2, [r3, #8]
}
 8010346:	bf00      	nop
 8010348:	3724      	adds	r7, #36	; 0x24
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop
 8010354:	58024400 	.word	0x58024400
 8010358:	03d09000 	.word	0x03d09000
 801035c:	46000000 	.word	0x46000000
 8010360:	4c742400 	.word	0x4c742400
 8010364:	4a742400 	.word	0x4a742400
 8010368:	4bbebc20 	.word	0x4bbebc20

0801036c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801036c:	b480      	push	{r7}
 801036e:	b089      	sub	sp, #36	; 0x24
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010374:	4ba0      	ldr	r3, [pc, #640]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010378:	f003 0303 	and.w	r3, r3, #3
 801037c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801037e:	4b9e      	ldr	r3, [pc, #632]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010382:	091b      	lsrs	r3, r3, #4
 8010384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010388:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801038a:	4b9b      	ldr	r3, [pc, #620]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801038c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801038e:	f003 0301 	and.w	r3, r3, #1
 8010392:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010394:	4b98      	ldr	r3, [pc, #608]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010398:	08db      	lsrs	r3, r3, #3
 801039a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801039e:	693a      	ldr	r2, [r7, #16]
 80103a0:	fb02 f303 	mul.w	r3, r2, r3
 80103a4:	ee07 3a90 	vmov	s15, r3
 80103a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f000 8111 	beq.w	80105da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	2b02      	cmp	r3, #2
 80103bc:	f000 8083 	beq.w	80104c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	2b02      	cmp	r3, #2
 80103c4:	f200 80a1 	bhi.w	801050a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d003      	beq.n	80103d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	d056      	beq.n	8010482 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80103d4:	e099      	b.n	801050a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103d6:	4b88      	ldr	r3, [pc, #544]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f003 0320 	and.w	r3, r3, #32
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d02d      	beq.n	801043e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103e2:	4b85      	ldr	r3, [pc, #532]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	08db      	lsrs	r3, r3, #3
 80103e8:	f003 0303 	and.w	r3, r3, #3
 80103ec:	4a83      	ldr	r2, [pc, #524]	; (80105fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80103ee:	fa22 f303 	lsr.w	r3, r2, r3
 80103f2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	ee07 3a90 	vmov	s15, r3
 80103fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	ee07 3a90 	vmov	s15, r3
 8010404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801040c:	4b7a      	ldr	r3, [pc, #488]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010414:	ee07 3a90 	vmov	s15, r3
 8010418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801041c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010420:	eddf 5a77 	vldr	s11, [pc, #476]	; 8010600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801042c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010438:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801043c:	e087      	b.n	801054e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	ee07 3a90 	vmov	s15, r3
 8010444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010448:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8010604 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801044c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010450:	4b69      	ldr	r3, [pc, #420]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010458:	ee07 3a90 	vmov	s15, r3
 801045c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010460:	ed97 6a03 	vldr	s12, [r7, #12]
 8010464:	eddf 5a66 	vldr	s11, [pc, #408]	; 8010600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801046c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010478:	ee67 7a27 	vmul.f32	s15, s14, s15
 801047c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010480:	e065      	b.n	801054e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	ee07 3a90 	vmov	s15, r3
 8010488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801048c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010494:	4b58      	ldr	r3, [pc, #352]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801049c:	ee07 3a90 	vmov	s15, r3
 80104a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80104a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80104ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104c4:	e043      	b.n	801054e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	ee07 3a90 	vmov	s15, r3
 80104cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801060c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80104d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104d8:	4b47      	ldr	r3, [pc, #284]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104e0:	ee07 3a90 	vmov	s15, r3
 80104e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80104ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80104f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010504:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010508:	e021      	b.n	801054e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	ee07 3a90 	vmov	s15, r3
 8010510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010514:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010604 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801051c:	4b36      	ldr	r3, [pc, #216]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010524:	ee07 3a90 	vmov	s15, r3
 8010528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801052c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010530:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801053c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010548:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801054c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801054e:	4b2a      	ldr	r3, [pc, #168]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010552:	0a5b      	lsrs	r3, r3, #9
 8010554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010558:	ee07 3a90 	vmov	s15, r3
 801055c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010568:	edd7 6a07 	vldr	s13, [r7, #28]
 801056c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010574:	ee17 2a90 	vmov	r2, s15
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801057c:	4b1e      	ldr	r3, [pc, #120]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010580:	0c1b      	lsrs	r3, r3, #16
 8010582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010586:	ee07 3a90 	vmov	s15, r3
 801058a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801058e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010596:	edd7 6a07 	vldr	s13, [r7, #28]
 801059a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801059e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105a2:	ee17 2a90 	vmov	r2, s15
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80105aa:	4b13      	ldr	r3, [pc, #76]	; (80105f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80105ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ae:	0e1b      	lsrs	r3, r3, #24
 80105b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105b4:	ee07 3a90 	vmov	s15, r3
 80105b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80105c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105d0:	ee17 2a90 	vmov	r2, s15
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80105d8:	e008      	b.n	80105ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2200      	movs	r2, #0
 80105de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2200      	movs	r2, #0
 80105e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2200      	movs	r2, #0
 80105ea:	609a      	str	r2, [r3, #8]
}
 80105ec:	bf00      	nop
 80105ee:	3724      	adds	r7, #36	; 0x24
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr
 80105f8:	58024400 	.word	0x58024400
 80105fc:	03d09000 	.word	0x03d09000
 8010600:	46000000 	.word	0x46000000
 8010604:	4c742400 	.word	0x4c742400
 8010608:	4a742400 	.word	0x4a742400
 801060c:	4bbebc20 	.word	0x4bbebc20

08010610 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b084      	sub	sp, #16
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801061a:	2300      	movs	r3, #0
 801061c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801061e:	4b53      	ldr	r3, [pc, #332]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010622:	f003 0303 	and.w	r3, r3, #3
 8010626:	2b03      	cmp	r3, #3
 8010628:	d101      	bne.n	801062e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801062a:	2301      	movs	r3, #1
 801062c:	e099      	b.n	8010762 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801062e:	4b4f      	ldr	r3, [pc, #316]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	4a4e      	ldr	r2, [pc, #312]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010634:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801063a:	f7f4 fbb3 	bl	8004da4 <HAL_GetTick>
 801063e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010640:	e008      	b.n	8010654 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010642:	f7f4 fbaf 	bl	8004da4 <HAL_GetTick>
 8010646:	4602      	mov	r2, r0
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	2b02      	cmp	r3, #2
 801064e:	d901      	bls.n	8010654 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010650:	2303      	movs	r3, #3
 8010652:	e086      	b.n	8010762 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010654:	4b45      	ldr	r3, [pc, #276]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1f0      	bne.n	8010642 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010660:	4b42      	ldr	r3, [pc, #264]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010664:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	031b      	lsls	r3, r3, #12
 801066e:	493f      	ldr	r1, [pc, #252]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010670:	4313      	orrs	r3, r2
 8010672:	628b      	str	r3, [r1, #40]	; 0x28
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	3b01      	subs	r3, #1
 801067a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	689b      	ldr	r3, [r3, #8]
 8010682:	3b01      	subs	r3, #1
 8010684:	025b      	lsls	r3, r3, #9
 8010686:	b29b      	uxth	r3, r3
 8010688:	431a      	orrs	r2, r3
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	68db      	ldr	r3, [r3, #12]
 801068e:	3b01      	subs	r3, #1
 8010690:	041b      	lsls	r3, r3, #16
 8010692:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010696:	431a      	orrs	r2, r3
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	3b01      	subs	r3, #1
 801069e:	061b      	lsls	r3, r3, #24
 80106a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80106a4:	4931      	ldr	r1, [pc, #196]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106a6:	4313      	orrs	r3, r2
 80106a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80106aa:	4b30      	ldr	r3, [pc, #192]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	695b      	ldr	r3, [r3, #20]
 80106b6:	492d      	ldr	r1, [pc, #180]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106b8:	4313      	orrs	r3, r2
 80106ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80106bc:	4b2b      	ldr	r3, [pc, #172]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106c0:	f023 0220 	bic.w	r2, r3, #32
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	699b      	ldr	r3, [r3, #24]
 80106c8:	4928      	ldr	r1, [pc, #160]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106ca:	4313      	orrs	r3, r2
 80106cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80106ce:	4b27      	ldr	r3, [pc, #156]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106d2:	4a26      	ldr	r2, [pc, #152]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106d4:	f023 0310 	bic.w	r3, r3, #16
 80106d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80106da:	4b24      	ldr	r3, [pc, #144]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80106de:	4b24      	ldr	r3, [pc, #144]	; (8010770 <RCCEx_PLL2_Config+0x160>)
 80106e0:	4013      	ands	r3, r2
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	69d2      	ldr	r2, [r2, #28]
 80106e6:	00d2      	lsls	r2, r2, #3
 80106e8:	4920      	ldr	r1, [pc, #128]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106ea:	4313      	orrs	r3, r2
 80106ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80106ee:	4b1f      	ldr	r3, [pc, #124]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106f2:	4a1e      	ldr	r2, [pc, #120]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 80106f4:	f043 0310 	orr.w	r3, r3, #16
 80106f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d106      	bne.n	801070e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010700:	4b1a      	ldr	r3, [pc, #104]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010704:	4a19      	ldr	r2, [pc, #100]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801070a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801070c:	e00f      	b.n	801072e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	2b01      	cmp	r3, #1
 8010712:	d106      	bne.n	8010722 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010714:	4b15      	ldr	r3, [pc, #84]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010718:	4a14      	ldr	r2, [pc, #80]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 801071a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801071e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010720:	e005      	b.n	801072e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010722:	4b12      	ldr	r3, [pc, #72]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010726:	4a11      	ldr	r2, [pc, #68]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801072c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801072e:	4b0f      	ldr	r3, [pc, #60]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	4a0e      	ldr	r2, [pc, #56]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801073a:	f7f4 fb33 	bl	8004da4 <HAL_GetTick>
 801073e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010740:	e008      	b.n	8010754 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010742:	f7f4 fb2f 	bl	8004da4 <HAL_GetTick>
 8010746:	4602      	mov	r2, r0
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	2b02      	cmp	r3, #2
 801074e:	d901      	bls.n	8010754 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010750:	2303      	movs	r3, #3
 8010752:	e006      	b.n	8010762 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010754:	4b05      	ldr	r3, [pc, #20]	; (801076c <RCCEx_PLL2_Config+0x15c>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801075c:	2b00      	cmp	r3, #0
 801075e:	d0f0      	beq.n	8010742 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010760:	7bfb      	ldrb	r3, [r7, #15]
}
 8010762:	4618      	mov	r0, r3
 8010764:	3710      	adds	r7, #16
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	58024400 	.word	0x58024400
 8010770:	ffff0007 	.word	0xffff0007

08010774 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801077e:	2300      	movs	r3, #0
 8010780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010782:	4b53      	ldr	r3, [pc, #332]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010786:	f003 0303 	and.w	r3, r3, #3
 801078a:	2b03      	cmp	r3, #3
 801078c:	d101      	bne.n	8010792 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801078e:	2301      	movs	r3, #1
 8010790:	e099      	b.n	80108c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010792:	4b4f      	ldr	r3, [pc, #316]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	4a4e      	ldr	r2, [pc, #312]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801079c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801079e:	f7f4 fb01 	bl	8004da4 <HAL_GetTick>
 80107a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80107a4:	e008      	b.n	80107b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80107a6:	f7f4 fafd 	bl	8004da4 <HAL_GetTick>
 80107aa:	4602      	mov	r2, r0
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	1ad3      	subs	r3, r2, r3
 80107b0:	2b02      	cmp	r3, #2
 80107b2:	d901      	bls.n	80107b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80107b4:	2303      	movs	r3, #3
 80107b6:	e086      	b.n	80108c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80107b8:	4b45      	ldr	r3, [pc, #276]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d1f0      	bne.n	80107a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80107c4:	4b42      	ldr	r3, [pc, #264]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 80107c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	051b      	lsls	r3, r3, #20
 80107d2:	493f      	ldr	r1, [pc, #252]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 80107d4:	4313      	orrs	r3, r2
 80107d6:	628b      	str	r3, [r1, #40]	; 0x28
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	3b01      	subs	r3, #1
 80107de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	689b      	ldr	r3, [r3, #8]
 80107e6:	3b01      	subs	r3, #1
 80107e8:	025b      	lsls	r3, r3, #9
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	431a      	orrs	r2, r3
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	3b01      	subs	r3, #1
 80107f4:	041b      	lsls	r3, r3, #16
 80107f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80107fa:	431a      	orrs	r2, r3
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	691b      	ldr	r3, [r3, #16]
 8010800:	3b01      	subs	r3, #1
 8010802:	061b      	lsls	r3, r3, #24
 8010804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010808:	4931      	ldr	r1, [pc, #196]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 801080a:	4313      	orrs	r3, r2
 801080c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801080e:	4b30      	ldr	r3, [pc, #192]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	695b      	ldr	r3, [r3, #20]
 801081a:	492d      	ldr	r1, [pc, #180]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 801081c:	4313      	orrs	r3, r2
 801081e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010820:	4b2b      	ldr	r3, [pc, #172]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	699b      	ldr	r3, [r3, #24]
 801082c:	4928      	ldr	r1, [pc, #160]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 801082e:	4313      	orrs	r3, r2
 8010830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010832:	4b27      	ldr	r3, [pc, #156]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010836:	4a26      	ldr	r2, [pc, #152]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801083c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801083e:	4b24      	ldr	r3, [pc, #144]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010842:	4b24      	ldr	r3, [pc, #144]	; (80108d4 <RCCEx_PLL3_Config+0x160>)
 8010844:	4013      	ands	r3, r2
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	69d2      	ldr	r2, [r2, #28]
 801084a:	00d2      	lsls	r2, r2, #3
 801084c:	4920      	ldr	r1, [pc, #128]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 801084e:	4313      	orrs	r3, r2
 8010850:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010852:	4b1f      	ldr	r3, [pc, #124]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010856:	4a1e      	ldr	r2, [pc, #120]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801085c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d106      	bne.n	8010872 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010864:	4b1a      	ldr	r3, [pc, #104]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010868:	4a19      	ldr	r2, [pc, #100]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 801086a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801086e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010870:	e00f      	b.n	8010892 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	2b01      	cmp	r3, #1
 8010876:	d106      	bne.n	8010886 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010878:	4b15      	ldr	r3, [pc, #84]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 801087a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801087c:	4a14      	ldr	r2, [pc, #80]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 801087e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010884:	e005      	b.n	8010892 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010886:	4b12      	ldr	r3, [pc, #72]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801088a:	4a11      	ldr	r2, [pc, #68]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 801088c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010892:	4b0f      	ldr	r3, [pc, #60]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4a0e      	ldr	r2, [pc, #56]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 8010898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801089c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801089e:	f7f4 fa81 	bl	8004da4 <HAL_GetTick>
 80108a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80108a4:	e008      	b.n	80108b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80108a6:	f7f4 fa7d 	bl	8004da4 <HAL_GetTick>
 80108aa:	4602      	mov	r2, r0
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	2b02      	cmp	r3, #2
 80108b2:	d901      	bls.n	80108b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80108b4:	2303      	movs	r3, #3
 80108b6:	e006      	b.n	80108c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80108b8:	4b05      	ldr	r3, [pc, #20]	; (80108d0 <RCCEx_PLL3_Config+0x15c>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d0f0      	beq.n	80108a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80108c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	58024400 	.word	0x58024400
 80108d4:	ffff0007 	.word	0xffff0007

080108d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80108e0:	2301      	movs	r3, #1
 80108e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d071      	beq.n	80109ce <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d106      	bne.n	8010904 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f7f2 fbe6 	bl	80030d0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2202      	movs	r2, #2
 8010908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	68db      	ldr	r3, [r3, #12]
 8010912:	f003 0310 	and.w	r3, r3, #16
 8010916:	2b10      	cmp	r3, #16
 8010918:	d050      	beq.n	80109bc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	22ca      	movs	r2, #202	; 0xca
 8010920:	625a      	str	r2, [r3, #36]	; 0x24
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	2253      	movs	r2, #83	; 0x53
 8010928:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f000 fa4a 	bl	8010dc4 <RTC_EnterInitMode>
 8010930:	4603      	mov	r3, r0
 8010932:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8010934:	7bfb      	ldrb	r3, [r7, #15]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d124      	bne.n	8010984 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	6899      	ldr	r1, [r3, #8]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	4b24      	ldr	r3, [pc, #144]	; (80109d8 <HAL_RTC_Init+0x100>)
 8010946:	400b      	ands	r3, r1
 8010948:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	6899      	ldr	r1, [r3, #8]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	685a      	ldr	r2, [r3, #4]
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	691b      	ldr	r3, [r3, #16]
 8010958:	431a      	orrs	r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	699b      	ldr	r3, [r3, #24]
 801095e:	431a      	orrs	r2, r3
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	430a      	orrs	r2, r1
 8010966:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	0419      	lsls	r1, r3, #16
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	68da      	ldr	r2, [r3, #12]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	430a      	orrs	r2, r1
 8010978:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f000 fa56 	bl	8010e2c <RTC_ExitInitMode>
 8010980:	4603      	mov	r3, r0
 8010982:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8010984:	7bfb      	ldrb	r3, [r7, #15]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d113      	bne.n	80109b2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f022 0203 	bic.w	r2, r2, #3
 8010998:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	69da      	ldr	r2, [r3, #28]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	431a      	orrs	r2, r3
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	430a      	orrs	r2, r1
 80109b0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	22ff      	movs	r2, #255	; 0xff
 80109b8:	625a      	str	r2, [r3, #36]	; 0x24
 80109ba:	e001      	b.n	80109c0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80109bc:	2300      	movs	r3, #0
 80109be:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80109c0:	7bfb      	ldrb	r3, [r7, #15]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d103      	bne.n	80109ce <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2201      	movs	r2, #1
 80109ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80109ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	ff8fffbf 	.word	0xff8fffbf

080109dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80109dc:	b590      	push	{r4, r7, lr}
 80109de:	b087      	sub	sp, #28
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	60b9      	str	r1, [r7, #8]
 80109e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d101      	bne.n	80109f6 <HAL_RTC_SetTime+0x1a>
 80109f2:	2302      	movs	r3, #2
 80109f4:	e089      	b.n	8010b0a <HAL_RTC_SetTime+0x12e>
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2201      	movs	r2, #1
 80109fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2202      	movs	r2, #2
 8010a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	22ca      	movs	r2, #202	; 0xca
 8010a0c:	625a      	str	r2, [r3, #36]	; 0x24
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2253      	movs	r2, #83	; 0x53
 8010a14:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010a16:	68f8      	ldr	r0, [r7, #12]
 8010a18:	f000 f9d4 	bl	8010dc4 <RTC_EnterInitMode>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010a20:	7cfb      	ldrb	r3, [r7, #19]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d161      	bne.n	8010aea <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d126      	bne.n	8010a7a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	689b      	ldr	r3, [r3, #8]
 8010a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d102      	bne.n	8010a40 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f000 fa2f 	bl	8010ea8 <RTC_ByteToBcd2>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	785b      	ldrb	r3, [r3, #1]
 8010a52:	4618      	mov	r0, r3
 8010a54:	f000 fa28 	bl	8010ea8 <RTC_ByteToBcd2>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010a5c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	789b      	ldrb	r3, [r3, #2]
 8010a62:	4618      	mov	r0, r3
 8010a64:	f000 fa20 	bl	8010ea8 <RTC_ByteToBcd2>
 8010a68:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010a6a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	78db      	ldrb	r3, [r3, #3]
 8010a72:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010a74:	4313      	orrs	r3, r2
 8010a76:	617b      	str	r3, [r7, #20]
 8010a78:	e018      	b.n	8010aac <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d102      	bne.n	8010a8e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	785b      	ldrb	r3, [r3, #1]
 8010a98:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010a9a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8010a9c:	68ba      	ldr	r2, [r7, #8]
 8010a9e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010aa0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	78db      	ldrb	r3, [r3, #3]
 8010aa6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010aa8:	4313      	orrs	r3, r2
 8010aaa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	6979      	ldr	r1, [r7, #20]
 8010ab2:	4b18      	ldr	r3, [pc, #96]	; (8010b14 <HAL_RTC_SetTime+0x138>)
 8010ab4:	400b      	ands	r3, r1
 8010ab6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	689a      	ldr	r2, [r3, #8]
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010ac6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	6899      	ldr	r1, [r3, #8]
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	68da      	ldr	r2, [r3, #12]
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	691b      	ldr	r3, [r3, #16]
 8010ad6:	431a      	orrs	r2, r3
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	430a      	orrs	r2, r1
 8010ade:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010ae0:	68f8      	ldr	r0, [r7, #12]
 8010ae2:	f000 f9a3 	bl	8010e2c <RTC_ExitInitMode>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	22ff      	movs	r2, #255	; 0xff
 8010af0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010af2:	7cfb      	ldrb	r3, [r7, #19]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d103      	bne.n	8010b00 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2201      	movs	r2, #1
 8010afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2200      	movs	r2, #0
 8010b04:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010b08:	7cfb      	ldrb	r3, [r7, #19]
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	371c      	adds	r7, #28
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd90      	pop	{r4, r7, pc}
 8010b12:	bf00      	nop
 8010b14:	007f7f7f 	.word	0x007f7f7f

08010b18 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b086      	sub	sp, #24
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	691b      	ldr	r3, [r3, #16]
 8010b34:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	681a      	ldr	r2, [r3, #0]
 8010b42:	4b22      	ldr	r3, [pc, #136]	; (8010bcc <HAL_RTC_GetTime+0xb4>)
 8010b44:	4013      	ands	r3, r2
 8010b46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	0c1b      	lsrs	r3, r3, #16
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b52:	b2da      	uxtb	r2, r3
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	0a1b      	lsrs	r3, r3, #8
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b62:	b2da      	uxtb	r2, r3
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b70:	b2da      	uxtb	r2, r3
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	0d9b      	lsrs	r3, r3, #22
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	f003 0301 	and.w	r3, r3, #1
 8010b80:	b2da      	uxtb	r2, r3
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d11a      	bne.n	8010bc2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	4618      	mov	r0, r3
 8010b92:	f000 f9a9 	bl	8010ee8 <RTC_Bcd2ToByte>
 8010b96:	4603      	mov	r3, r0
 8010b98:	461a      	mov	r2, r3
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	785b      	ldrb	r3, [r3, #1]
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f000 f9a0 	bl	8010ee8 <RTC_Bcd2ToByte>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	461a      	mov	r2, r3
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	789b      	ldrb	r3, [r3, #2]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f000 f997 	bl	8010ee8 <RTC_Bcd2ToByte>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010bc2:	2300      	movs	r3, #0
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3718      	adds	r7, #24
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	007f7f7f 	.word	0x007f7f7f

08010bd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010bd0:	b590      	push	{r4, r7, lr}
 8010bd2:	b087      	sub	sp, #28
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	60b9      	str	r1, [r7, #8]
 8010bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d101      	bne.n	8010bea <HAL_RTC_SetDate+0x1a>
 8010be6:	2302      	movs	r3, #2
 8010be8:	e073      	b.n	8010cd2 <HAL_RTC_SetDate+0x102>
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2201      	movs	r2, #1
 8010bee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2202      	movs	r2, #2
 8010bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d10e      	bne.n	8010c1e <HAL_RTC_SetDate+0x4e>
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	785b      	ldrb	r3, [r3, #1]
 8010c04:	f003 0310 	and.w	r3, r3, #16
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d008      	beq.n	8010c1e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	785b      	ldrb	r3, [r3, #1]
 8010c10:	f023 0310 	bic.w	r3, r3, #16
 8010c14:	b2db      	uxtb	r3, r3
 8010c16:	330a      	adds	r3, #10
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d11c      	bne.n	8010c5e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	78db      	ldrb	r3, [r3, #3]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f000 f93d 	bl	8010ea8 <RTC_ByteToBcd2>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	785b      	ldrb	r3, [r3, #1]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f000 f936 	bl	8010ea8 <RTC_ByteToBcd2>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010c40:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	789b      	ldrb	r3, [r3, #2]
 8010c46:	4618      	mov	r0, r3
 8010c48:	f000 f92e 	bl	8010ea8 <RTC_ByteToBcd2>
 8010c4c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010c4e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010c58:	4313      	orrs	r3, r2
 8010c5a:	617b      	str	r3, [r7, #20]
 8010c5c:	e00e      	b.n	8010c7c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	78db      	ldrb	r3, [r3, #3]
 8010c62:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	785b      	ldrb	r3, [r3, #1]
 8010c68:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010c6a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8010c6c:	68ba      	ldr	r2, [r7, #8]
 8010c6e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8010c70:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	22ca      	movs	r2, #202	; 0xca
 8010c82:	625a      	str	r2, [r3, #36]	; 0x24
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2253      	movs	r2, #83	; 0x53
 8010c8a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f000 f899 	bl	8010dc4 <RTC_EnterInitMode>
 8010c92:	4603      	mov	r3, r0
 8010c94:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010c96:	7cfb      	ldrb	r3, [r7, #19]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d10a      	bne.n	8010cb2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	6979      	ldr	r1, [r7, #20]
 8010ca2:	4b0e      	ldr	r3, [pc, #56]	; (8010cdc <HAL_RTC_SetDate+0x10c>)
 8010ca4:	400b      	ands	r3, r1
 8010ca6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010ca8:	68f8      	ldr	r0, [r7, #12]
 8010caa:	f000 f8bf 	bl	8010e2c <RTC_ExitInitMode>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	22ff      	movs	r2, #255	; 0xff
 8010cb8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010cba:	7cfb      	ldrb	r3, [r7, #19]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d103      	bne.n	8010cc8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010cd0:	7cfb      	ldrb	r3, [r7, #19]


}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	371c      	adds	r7, #28
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd90      	pop	{r4, r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	00ffff3f 	.word	0x00ffff3f

08010ce0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b086      	sub	sp, #24
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	60b9      	str	r1, [r7, #8]
 8010cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	685a      	ldr	r2, [r3, #4]
 8010cf2:	4b21      	ldr	r3, [pc, #132]	; (8010d78 <HAL_RTC_GetDate+0x98>)
 8010cf4:	4013      	ands	r3, r2
 8010cf6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	0c1b      	lsrs	r3, r3, #16
 8010cfc:	b2da      	uxtb	r2, r3
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	0a1b      	lsrs	r3, r3, #8
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	f003 031f 	and.w	r3, r3, #31
 8010d0c:	b2da      	uxtb	r2, r3
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d1a:	b2da      	uxtb	r2, r3
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	0b5b      	lsrs	r3, r3, #13
 8010d24:	b2db      	uxtb	r3, r3
 8010d26:	f003 0307 	and.w	r3, r3, #7
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d11a      	bne.n	8010d6c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	78db      	ldrb	r3, [r3, #3]
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f000 f8d4 	bl	8010ee8 <RTC_Bcd2ToByte>
 8010d40:	4603      	mov	r3, r0
 8010d42:	461a      	mov	r2, r3
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	785b      	ldrb	r3, [r3, #1]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f000 f8cb 	bl	8010ee8 <RTC_Bcd2ToByte>
 8010d52:	4603      	mov	r3, r0
 8010d54:	461a      	mov	r2, r3
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	789b      	ldrb	r3, [r3, #2]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f000 f8c2 	bl	8010ee8 <RTC_Bcd2ToByte>
 8010d64:	4603      	mov	r3, r0
 8010d66:	461a      	mov	r2, r3
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8010d6c:	2300      	movs	r3, #0
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3718      	adds	r7, #24
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	00ffff3f 	.word	0x00ffff3f

08010d7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b084      	sub	sp, #16
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	4a0d      	ldr	r2, [pc, #52]	; (8010dc0 <HAL_RTC_WaitForSynchro+0x44>)
 8010d8a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8010d8c:	f7f4 f80a 	bl	8004da4 <HAL_GetTick>
 8010d90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010d92:	e009      	b.n	8010da8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010d94:	f7f4 f806 	bl	8004da4 <HAL_GetTick>
 8010d98:	4602      	mov	r2, r0
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010da2:	d901      	bls.n	8010da8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8010da4:	2303      	movs	r3, #3
 8010da6:	e007      	b.n	8010db8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	f003 0320 	and.w	r3, r3, #32
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d0ee      	beq.n	8010d94 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3710      	adds	r7, #16
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	0003ff5f 	.word	0x0003ff5f

08010dc4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d120      	bne.n	8010e20 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010de6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8010de8:	f7f3 ffdc 	bl	8004da4 <HAL_GetTick>
 8010dec:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010dee:	e00d      	b.n	8010e0c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010df0:	f7f3 ffd8 	bl	8004da4 <HAL_GetTick>
 8010df4:	4602      	mov	r2, r0
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	1ad3      	subs	r3, r2, r3
 8010dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010dfe:	d905      	bls.n	8010e0c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8010e00:	2303      	movs	r3, #3
 8010e02:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2203      	movs	r2, #3
 8010e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d102      	bne.n	8010e20 <RTC_EnterInitMode+0x5c>
 8010e1a:	7bfb      	ldrb	r3, [r7, #15]
 8010e1c:	2b03      	cmp	r3, #3
 8010e1e:	d1e7      	bne.n	8010df0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8010e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
	...

08010e2c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b084      	sub	sp, #16
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010e34:	2300      	movs	r3, #0
 8010e36:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8010e38:	4b1a      	ldr	r3, [pc, #104]	; (8010ea4 <RTC_ExitInitMode+0x78>)
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	4a19      	ldr	r2, [pc, #100]	; (8010ea4 <RTC_ExitInitMode+0x78>)
 8010e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e42:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010e44:	4b17      	ldr	r3, [pc, #92]	; (8010ea4 <RTC_ExitInitMode+0x78>)
 8010e46:	689b      	ldr	r3, [r3, #8]
 8010e48:	f003 0320 	and.w	r3, r3, #32
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d10c      	bne.n	8010e6a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f7ff ff93 	bl	8010d7c <HAL_RTC_WaitForSynchro>
 8010e56:	4603      	mov	r3, r0
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d01e      	beq.n	8010e9a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2203      	movs	r2, #3
 8010e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8010e64:	2303      	movs	r3, #3
 8010e66:	73fb      	strb	r3, [r7, #15]
 8010e68:	e017      	b.n	8010e9a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010e6a:	4b0e      	ldr	r3, [pc, #56]	; (8010ea4 <RTC_ExitInitMode+0x78>)
 8010e6c:	689b      	ldr	r3, [r3, #8]
 8010e6e:	4a0d      	ldr	r2, [pc, #52]	; (8010ea4 <RTC_ExitInitMode+0x78>)
 8010e70:	f023 0320 	bic.w	r3, r3, #32
 8010e74:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f7ff ff80 	bl	8010d7c <HAL_RTC_WaitForSynchro>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d005      	beq.n	8010e8e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2203      	movs	r2, #3
 8010e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8010e8a:	2303      	movs	r3, #3
 8010e8c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010e8e:	4b05      	ldr	r3, [pc, #20]	; (8010ea4 <RTC_ExitInitMode+0x78>)
 8010e90:	689b      	ldr	r3, [r3, #8]
 8010e92:	4a04      	ldr	r2, [pc, #16]	; (8010ea4 <RTC_ExitInitMode+0x78>)
 8010e94:	f043 0320 	orr.w	r3, r3, #32
 8010e98:	6093      	str	r3, [r2, #8]
  }

  return status;
 8010e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3710      	adds	r7, #16
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}
 8010ea4:	58004000 	.word	0x58004000

08010ea8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b085      	sub	sp, #20
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	4603      	mov	r3, r0
 8010eb0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8010eb6:	79fb      	ldrb	r3, [r7, #7]
 8010eb8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8010eba:	e005      	b.n	8010ec8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8010ec2:	7afb      	ldrb	r3, [r7, #11]
 8010ec4:	3b0a      	subs	r3, #10
 8010ec6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8010ec8:	7afb      	ldrb	r3, [r7, #11]
 8010eca:	2b09      	cmp	r3, #9
 8010ecc:	d8f6      	bhi.n	8010ebc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	b2db      	uxtb	r3, r3
 8010ed2:	011b      	lsls	r3, r3, #4
 8010ed4:	b2da      	uxtb	r2, r3
 8010ed6:	7afb      	ldrb	r3, [r7, #11]
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	b2db      	uxtb	r3, r3
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3714      	adds	r7, #20
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr

08010ee8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8010ef2:	79fb      	ldrb	r3, [r7, #7]
 8010ef4:	091b      	lsrs	r3, r3, #4
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	461a      	mov	r2, r3
 8010efa:	0092      	lsls	r2, r2, #2
 8010efc:	4413      	add	r3, r2
 8010efe:	005b      	lsls	r3, r3, #1
 8010f00:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8010f02:	79fb      	ldrb	r3, [r7, #7]
 8010f04:	f003 030f 	and.w	r3, r3, #15
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	7bfb      	ldrb	r3, [r7, #15]
 8010f0c:	4413      	add	r3, r2
 8010f0e:	b2db      	uxtb	r3, r3
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3714      	adds	r7, #20
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr

08010f1c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d101      	bne.n	8010f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	e10f      	b.n	801114e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2200      	movs	r2, #0
 8010f32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4a87      	ldr	r2, [pc, #540]	; (8011158 <HAL_SPI_Init+0x23c>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d00f      	beq.n	8010f5e <HAL_SPI_Init+0x42>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	4a86      	ldr	r2, [pc, #536]	; (801115c <HAL_SPI_Init+0x240>)
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d00a      	beq.n	8010f5e <HAL_SPI_Init+0x42>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	4a84      	ldr	r2, [pc, #528]	; (8011160 <HAL_SPI_Init+0x244>)
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d005      	beq.n	8010f5e <HAL_SPI_Init+0x42>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	68db      	ldr	r3, [r3, #12]
 8010f56:	2b0f      	cmp	r3, #15
 8010f58:	d901      	bls.n	8010f5e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	e0f7      	b.n	801114e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 fd60 	bl	8011a24 <SPI_GetPacketSize>
 8010f64:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4a7b      	ldr	r2, [pc, #492]	; (8011158 <HAL_SPI_Init+0x23c>)
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	d00c      	beq.n	8010f8a <HAL_SPI_Init+0x6e>
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4a79      	ldr	r2, [pc, #484]	; (801115c <HAL_SPI_Init+0x240>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d007      	beq.n	8010f8a <HAL_SPI_Init+0x6e>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	4a78      	ldr	r2, [pc, #480]	; (8011160 <HAL_SPI_Init+0x244>)
 8010f80:	4293      	cmp	r3, r2
 8010f82:	d002      	beq.n	8010f8a <HAL_SPI_Init+0x6e>
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2b08      	cmp	r3, #8
 8010f88:	d811      	bhi.n	8010fae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010f8e:	4a72      	ldr	r2, [pc, #456]	; (8011158 <HAL_SPI_Init+0x23c>)
 8010f90:	4293      	cmp	r3, r2
 8010f92:	d009      	beq.n	8010fa8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4a70      	ldr	r2, [pc, #448]	; (801115c <HAL_SPI_Init+0x240>)
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	d004      	beq.n	8010fa8 <HAL_SPI_Init+0x8c>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	4a6f      	ldr	r2, [pc, #444]	; (8011160 <HAL_SPI_Init+0x244>)
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	d104      	bne.n	8010fb2 <HAL_SPI_Init+0x96>
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2b10      	cmp	r3, #16
 8010fac:	d901      	bls.n	8010fb2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e0cd      	b.n	801114e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010fb8:	b2db      	uxtb	r3, r3
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d106      	bne.n	8010fcc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7f2 fb06 	bl	80035d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2202      	movs	r2, #2
 8010fd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f022 0201 	bic.w	r2, r2, #1
 8010fe2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	689b      	ldr	r3, [r3, #8]
 8010fea:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8010fee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	699b      	ldr	r3, [r3, #24]
 8010ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010ff8:	d119      	bne.n	801102e <HAL_SPI_Init+0x112>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011002:	d103      	bne.n	801100c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011008:	2b00      	cmp	r3, #0
 801100a:	d008      	beq.n	801101e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011010:	2b00      	cmp	r3, #0
 8011012:	d10c      	bne.n	801102e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011018:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801101c:	d107      	bne.n	801102e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801102c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011036:	2b00      	cmp	r3, #0
 8011038:	d00f      	beq.n	801105a <HAL_SPI_Init+0x13e>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	2b06      	cmp	r3, #6
 8011040:	d90b      	bls.n	801105a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	430a      	orrs	r2, r1
 8011056:	601a      	str	r2, [r3, #0]
 8011058:	e007      	b.n	801106a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011068:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	69da      	ldr	r2, [r3, #28]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011072:	431a      	orrs	r2, r3
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	431a      	orrs	r2, r3
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801107c:	ea42 0103 	orr.w	r1, r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	68da      	ldr	r2, [r3, #12]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	430a      	orrs	r2, r1
 801108a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011094:	431a      	orrs	r2, r3
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801109a:	431a      	orrs	r2, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	699b      	ldr	r3, [r3, #24]
 80110a0:	431a      	orrs	r2, r3
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	691b      	ldr	r3, [r3, #16]
 80110a6:	431a      	orrs	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	695b      	ldr	r3, [r3, #20]
 80110ac:	431a      	orrs	r2, r3
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6a1b      	ldr	r3, [r3, #32]
 80110b2:	431a      	orrs	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	431a      	orrs	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110be:	431a      	orrs	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	689b      	ldr	r3, [r3, #8]
 80110c4:	431a      	orrs	r2, r3
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80110ca:	ea42 0103 	orr.w	r1, r2, r3
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	430a      	orrs	r2, r1
 80110d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d113      	bne.n	801110a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	689b      	ldr	r3, [r3, #8]
 80110e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80110f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	689b      	ldr	r3, [r3, #8]
 80110fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011108:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	f022 0201 	bic.w	r2, r2, #1
 8011118:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011122:	2b00      	cmp	r3, #0
 8011124:	d00a      	beq.n	801113c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	68db      	ldr	r3, [r3, #12]
 801112c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	430a      	orrs	r2, r1
 801113a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2200      	movs	r2, #0
 8011140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2201      	movs	r2, #1
 8011148:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801114c:	2300      	movs	r3, #0
}
 801114e:	4618      	mov	r0, r3
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}
 8011156:	bf00      	nop
 8011158:	40013000 	.word	0x40013000
 801115c:	40003800 	.word	0x40003800
 8011160:	40003c00 	.word	0x40003c00

08011164 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b084      	sub	sp, #16
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	4613      	mov	r3, r2
 8011170:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011178:	b2db      	uxtb	r3, r3
 801117a:	2b01      	cmp	r3, #1
 801117c:	d005      	beq.n	801118a <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2200      	movs	r2, #0
 8011182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011186:	2302      	movs	r3, #2
 8011188:	e127      	b.n	80113da <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d002      	beq.n	8011196 <HAL_SPI_Receive_DMA+0x32>
 8011190:	88fb      	ldrh	r3, [r7, #6]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d105      	bne.n	80111a2 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2200      	movs	r2, #0
 801119a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 801119e:	2301      	movs	r3, #1
 80111a0:	e11b      	b.n	80113da <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d101      	bne.n	80111b0 <HAL_SPI_Receive_DMA+0x4c>
 80111ac:	2302      	movs	r3, #2
 80111ae:	e114      	b.n	80113da <HAL_SPI_Receive_DMA+0x276>
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2201      	movs	r2, #1
 80111b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2204      	movs	r2, #4
 80111bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	2200      	movs	r2, #0
 80111c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	68ba      	ldr	r2, [r7, #8]
 80111cc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	88fa      	ldrh	r2, [r7, #6]
 80111d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	88fa      	ldrh	r2, [r7, #6]
 80111da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2200      	movs	r2, #0
 80111e2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2200      	movs	r2, #0
 80111e8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2200      	movs	r2, #0
 80111ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	2200      	movs	r2, #0
 80111f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	689b      	ldr	r3, [r3, #8]
 80111fe:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011202:	d108      	bne.n	8011216 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	681a      	ldr	r2, [r3, #0]
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011212:	601a      	str	r2, [r3, #0]
 8011214:	e009      	b.n	801122a <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011228:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	2b0f      	cmp	r3, #15
 8011230:	d905      	bls.n	801123e <HAL_SPI_Receive_DMA+0xda>
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011236:	699b      	ldr	r3, [r3, #24]
 8011238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801123c:	d10f      	bne.n	801125e <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011242:	2b07      	cmp	r3, #7
 8011244:	d911      	bls.n	801126a <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801124a:	699b      	ldr	r3, [r3, #24]
 801124c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011250:	d00b      	beq.n	801126a <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011256:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801125c:	d005      	beq.n	801126a <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2200      	movs	r2, #0
 8011262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011266:	2301      	movs	r3, #1
 8011268:	e0b7      	b.n	80113da <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	689a      	ldr	r2, [r3, #8]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011278:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	68db      	ldr	r3, [r3, #12]
 801127e:	2b07      	cmp	r3, #7
 8011280:	d820      	bhi.n	80112c4 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011286:	699b      	ldr	r3, [r3, #24]
 8011288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801128c:	d109      	bne.n	80112a2 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011294:	b29b      	uxth	r3, r3
 8011296:	3301      	adds	r3, #1
 8011298:	105b      	asrs	r3, r3, #1
 801129a:	b29a      	uxth	r2, r3
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112a6:	699b      	ldr	r3, [r3, #24]
 80112a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80112ac:	d11e      	bne.n	80112ec <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112b4:	b29b      	uxth	r3, r3
 80112b6:	3303      	adds	r3, #3
 80112b8:	109b      	asrs	r3, r3, #2
 80112ba:	b29a      	uxth	r2, r3
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80112c2:	e013      	b.n	80112ec <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	2b0f      	cmp	r3, #15
 80112ca:	d80f      	bhi.n	80112ec <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112d0:	699b      	ldr	r3, [r3, #24]
 80112d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80112d6:	d109      	bne.n	80112ec <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112de:	b29b      	uxth	r3, r3
 80112e0:	3301      	adds	r3, #1
 80112e2:	105b      	asrs	r3, r3, #1
 80112e4:	b29a      	uxth	r2, r3
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112f0:	4a3c      	ldr	r2, [pc, #240]	; (80113e4 <HAL_SPI_Receive_DMA+0x280>)
 80112f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112f8:	4a3b      	ldr	r2, [pc, #236]	; (80113e8 <HAL_SPI_Receive_DMA+0x284>)
 80112fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011300:	4a3a      	ldr	r2, [pc, #232]	; (80113ec <HAL_SPI_Receive_DMA+0x288>)
 8011302:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011308:	2200      	movs	r2, #0
 801130a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	3330      	adds	r3, #48	; 0x30
 8011316:	4619      	mov	r1, r3
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801131c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011324:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011326:	f7f6 f9c1 	bl	80076ac <HAL_DMA_Start_IT>
 801132a:	4603      	mov	r3, r0
 801132c:	2b00      	cmp	r3, #0
 801132e:	d011      	beq.n	8011354 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011336:	f043 0210 	orr.w	r2, r3, #16
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2201      	movs	r2, #1
 8011344:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2200      	movs	r2, #0
 801134c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8011350:	2301      	movs	r3, #1
 8011352:	e042      	b.n	80113da <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011358:	69db      	ldr	r3, [r3, #28]
 801135a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801135e:	d108      	bne.n	8011372 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	6859      	ldr	r1, [r3, #4]
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	4b21      	ldr	r3, [pc, #132]	; (80113f0 <HAL_SPI_Receive_DMA+0x28c>)
 801136c:	400b      	ands	r3, r1
 801136e:	6053      	str	r3, [r2, #4]
 8011370:	e009      	b.n	8011386 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	4b1d      	ldr	r3, [pc, #116]	; (80113f0 <HAL_SPI_Receive_DMA+0x28c>)
 801137a:	4013      	ands	r3, r2
 801137c:	88f9      	ldrh	r1, [r7, #6]
 801137e:	68fa      	ldr	r2, [r7, #12]
 8011380:	6812      	ldr	r2, [r2, #0]
 8011382:	430b      	orrs	r3, r1
 8011384:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	689a      	ldr	r2, [r3, #8]
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011394:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	691a      	ldr	r2, [r3, #16]
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80113a4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f042 0201 	orr.w	r2, r2, #1
 80113b4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80113be:	d107      	bne.n	80113d0 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80113ce:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	2200      	movs	r2, #0
 80113d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80113d8:	2300      	movs	r3, #0
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3710      	adds	r7, #16
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop
 80113e4:	0801184f 	.word	0x0801184f
 80113e8:	08011809 	.word	0x08011809
 80113ec:	0801186b 	.word	0x0801186b
 80113f0:	ffff0000 	.word	0xffff0000

080113f4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b08a      	sub	sp, #40	; 0x28
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	691b      	ldr	r3, [r3, #16]
 8011402:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	695b      	ldr	r3, [r3, #20]
 801140a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801140c:	6a3a      	ldr	r2, [r7, #32]
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	4013      	ands	r3, r2
 8011412:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801141c:	2300      	movs	r3, #0
 801141e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011426:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	3330      	adds	r3, #48	; 0x30
 801142e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011430:	69fb      	ldr	r3, [r7, #28]
 8011432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011436:	2b00      	cmp	r3, #0
 8011438:	d010      	beq.n	801145c <HAL_SPI_IRQHandler+0x68>
 801143a:	6a3b      	ldr	r3, [r7, #32]
 801143c:	f003 0308 	and.w	r3, r3, #8
 8011440:	2b00      	cmp	r3, #0
 8011442:	d00b      	beq.n	801145c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	699a      	ldr	r2, [r3, #24]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011452:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 f9cd 	bl	80117f4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801145a:	e192      	b.n	8011782 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801145c:	69bb      	ldr	r3, [r7, #24]
 801145e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011462:	2b00      	cmp	r3, #0
 8011464:	d113      	bne.n	801148e <HAL_SPI_IRQHandler+0x9a>
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	f003 0320 	and.w	r3, r3, #32
 801146c:	2b00      	cmp	r3, #0
 801146e:	d10e      	bne.n	801148e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011476:	2b00      	cmp	r3, #0
 8011478:	d009      	beq.n	801148e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	4798      	blx	r3
    handled = 1UL;
 801148a:	2301      	movs	r3, #1
 801148c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801148e:	69bb      	ldr	r3, [r7, #24]
 8011490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011494:	2b00      	cmp	r3, #0
 8011496:	d10f      	bne.n	80114b8 <HAL_SPI_IRQHandler+0xc4>
 8011498:	69bb      	ldr	r3, [r7, #24]
 801149a:	f003 0301 	and.w	r3, r3, #1
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00a      	beq.n	80114b8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d105      	bne.n	80114b8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	4798      	blx	r3
    handled = 1UL;
 80114b4:	2301      	movs	r3, #1
 80114b6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80114b8:	69bb      	ldr	r3, [r7, #24]
 80114ba:	f003 0320 	and.w	r3, r3, #32
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d10f      	bne.n	80114e2 <HAL_SPI_IRQHandler+0xee>
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	f003 0302 	and.w	r3, r3, #2
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d00a      	beq.n	80114e2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d105      	bne.n	80114e2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	4798      	blx	r3
    handled = 1UL;
 80114de:	2301      	movs	r3, #1
 80114e0:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80114e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	f040 8147 	bne.w	8011778 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	f003 0308 	and.w	r3, r3, #8
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	f000 808b 	beq.w	801160c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	699a      	ldr	r2, [r3, #24]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f042 0208 	orr.w	r2, r2, #8
 8011504:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	699a      	ldr	r2, [r3, #24]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	f042 0210 	orr.w	r2, r2, #16
 8011514:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	699a      	ldr	r2, [r3, #24]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011524:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	691a      	ldr	r2, [r3, #16]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f022 0208 	bic.w	r2, r2, #8
 8011534:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011540:	2b00      	cmp	r3, #0
 8011542:	d13d      	bne.n	80115c0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011544:	e036      	b.n	80115b4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	68db      	ldr	r3, [r3, #12]
 801154a:	2b0f      	cmp	r3, #15
 801154c:	d90b      	bls.n	8011566 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011556:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011558:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801155e:	1d1a      	adds	r2, r3, #4
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	665a      	str	r2, [r3, #100]	; 0x64
 8011564:	e01d      	b.n	80115a2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	68db      	ldr	r3, [r3, #12]
 801156a:	2b07      	cmp	r3, #7
 801156c:	d90b      	bls.n	8011586 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011572:	68fa      	ldr	r2, [r7, #12]
 8011574:	8812      	ldrh	r2, [r2, #0]
 8011576:	b292      	uxth	r2, r2
 8011578:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801157e:	1c9a      	adds	r2, r3, #2
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	665a      	str	r2, [r3, #100]	; 0x64
 8011584:	e00d      	b.n	80115a2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011592:	7812      	ldrb	r2, [r2, #0]
 8011594:	b2d2      	uxtb	r2, r2
 8011596:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801159c:	1c5a      	adds	r2, r3, #1
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	3b01      	subs	r3, #1
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d1c2      	bne.n	8011546 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f000 f98f 	bl	80118e4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2201      	movs	r2, #1
 80115ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d003      	beq.n	80115e0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f000 f901 	bl	80117e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80115de:	e0d0      	b.n	8011782 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80115e0:	7cfb      	ldrb	r3, [r7, #19]
 80115e2:	2b05      	cmp	r3, #5
 80115e4:	d103      	bne.n	80115ee <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f000 f8e6 	bl	80117b8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80115ec:	e0c6      	b.n	801177c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80115ee:	7cfb      	ldrb	r3, [r7, #19]
 80115f0:	2b04      	cmp	r3, #4
 80115f2:	d103      	bne.n	80115fc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f000 f8d5 	bl	80117a4 <HAL_SPI_RxCpltCallback>
    return;
 80115fa:	e0bf      	b.n	801177c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80115fc:	7cfb      	ldrb	r3, [r7, #19]
 80115fe:	2b03      	cmp	r3, #3
 8011600:	f040 80bc 	bne.w	801177c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f000 f8c3 	bl	8011790 <HAL_SPI_TxCpltCallback>
    return;
 801160a:	e0b7      	b.n	801177c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801160c:	69bb      	ldr	r3, [r7, #24]
 801160e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8011612:	2b00      	cmp	r3, #0
 8011614:	f000 80b5 	beq.w	8011782 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011618:	69bb      	ldr	r3, [r7, #24]
 801161a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801161e:	2b00      	cmp	r3, #0
 8011620:	d00f      	beq.n	8011642 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011628:	f043 0204 	orr.w	r2, r3, #4
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	699a      	ldr	r2, [r3, #24]
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011640:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011648:	2b00      	cmp	r3, #0
 801164a:	d00f      	beq.n	801166c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011652:	f043 0201 	orr.w	r2, r3, #1
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	699a      	ldr	r2, [r3, #24]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801166a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801166c:	69bb      	ldr	r3, [r7, #24]
 801166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00f      	beq.n	8011696 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801167c:	f043 0208 	orr.w	r2, r3, #8
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	699a      	ldr	r2, [r3, #24]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011694:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	f003 0320 	and.w	r3, r3, #32
 801169c:	2b00      	cmp	r3, #0
 801169e:	d00f      	beq.n	80116c0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	699a      	ldr	r2, [r3, #24]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f042 0220 	orr.w	r2, r2, #32
 80116be:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d05a      	beq.n	8011780 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	f022 0201 	bic.w	r2, r2, #1
 80116d8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	6919      	ldr	r1, [r3, #16]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	4b28      	ldr	r3, [pc, #160]	; (8011788 <HAL_SPI_IRQHandler+0x394>)
 80116e6:	400b      	ands	r3, r1
 80116e8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80116f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80116f4:	d138      	bne.n	8011768 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	689a      	ldr	r2, [r3, #8]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011704:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801170a:	2b00      	cmp	r3, #0
 801170c:	d013      	beq.n	8011736 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011712:	4a1e      	ldr	r2, [pc, #120]	; (801178c <HAL_SPI_IRQHandler+0x398>)
 8011714:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801171a:	4618      	mov	r0, r3
 801171c:	f7f6 fd4e 	bl	80081bc <HAL_DMA_Abort_IT>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d007      	beq.n	8011736 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801172c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801173a:	2b00      	cmp	r3, #0
 801173c:	d020      	beq.n	8011780 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011742:	4a12      	ldr	r2, [pc, #72]	; (801178c <HAL_SPI_IRQHandler+0x398>)
 8011744:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801174a:	4618      	mov	r0, r3
 801174c:	f7f6 fd36 	bl	80081bc <HAL_DMA_Abort_IT>
 8011750:	4603      	mov	r3, r0
 8011752:	2b00      	cmp	r3, #0
 8011754:	d014      	beq.n	8011780 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801175c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011766:	e00b      	b.n	8011780 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2201      	movs	r2, #1
 801176c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f000 f835 	bl	80117e0 <HAL_SPI_ErrorCallback>
    return;
 8011776:	e003      	b.n	8011780 <HAL_SPI_IRQHandler+0x38c>
    return;
 8011778:	bf00      	nop
 801177a:	e002      	b.n	8011782 <HAL_SPI_IRQHandler+0x38e>
    return;
 801177c:	bf00      	nop
 801177e:	e000      	b.n	8011782 <HAL_SPI_IRQHandler+0x38e>
    return;
 8011780:	bf00      	nop
  }
}
 8011782:	3728      	adds	r7, #40	; 0x28
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}
 8011788:	fffffc94 	.word	0xfffffc94
 801178c:	080118b1 	.word	0x080118b1

08011790 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011790:	b480      	push	{r7}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8011798:	bf00      	nop
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr

080117a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80117a4:	b480      	push	{r7}
 80117a6:	b083      	sub	sp, #12
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80117ac:	bf00      	nop
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80117c0:	bf00      	nop
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr

080117cc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80117cc:	b480      	push	{r7}
 80117ce:	b083      	sub	sp, #12
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80117d4:	bf00      	nop
 80117d6:	370c      	adds	r7, #12
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80117e8:	bf00      	nop
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr

080117f4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80117fc:	bf00      	nop
 80117fe:	370c      	adds	r7, #12
 8011800:	46bd      	mov	sp, r7
 8011802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011806:	4770      	bx	lr

08011808 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b084      	sub	sp, #16
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011814:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801181c:	b2db      	uxtb	r3, r3
 801181e:	2b07      	cmp	r3, #7
 8011820:	d011      	beq.n	8011846 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011826:	69db      	ldr	r3, [r3, #28]
 8011828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801182c:	d103      	bne.n	8011836 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 801182e:	68f8      	ldr	r0, [r7, #12]
 8011830:	f7ff ffb8 	bl	80117a4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8011834:	e007      	b.n	8011846 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	691a      	ldr	r2, [r3, #16]
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	f042 0208 	orr.w	r2, r2, #8
 8011844:	611a      	str	r2, [r3, #16]
}
 8011846:	bf00      	nop
 8011848:	3710      	adds	r7, #16
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}

0801184e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801184e:	b580      	push	{r7, lr}
 8011850:	b084      	sub	sp, #16
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801185a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 801185c:	68f8      	ldr	r0, [r7, #12]
 801185e:	f7ff ffb5 	bl	80117cc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011862:	bf00      	nop
 8011864:	3710      	adds	r7, #16
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801186a:	b580      	push	{r7, lr}
 801186c:	b084      	sub	sp, #16
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011876:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f7f7 fe1d 	bl	80094b8 <HAL_DMA_GetError>
 801187e:	4603      	mov	r3, r0
 8011880:	2b02      	cmp	r3, #2
 8011882:	d011      	beq.n	80118a8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8011884:	68f8      	ldr	r0, [r7, #12]
 8011886:	f000 f82d 	bl	80118e4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011890:	f043 0210 	orr.w	r2, r3, #16
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2201      	movs	r2, #1
 801189e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80118a2:	68f8      	ldr	r0, [r7, #12]
 80118a4:	f7ff ff9c 	bl	80117e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80118a8:	bf00      	nop
 80118aa:	3710      	adds	r7, #16
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	2200      	movs	r2, #0
 80118c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	2200      	movs	r2, #0
 80118ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	2201      	movs	r2, #1
 80118d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80118d6:	68f8      	ldr	r0, [r7, #12]
 80118d8:	f7ff ff82 	bl	80117e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80118dc:	bf00      	nop
 80118de:	3710      	adds	r7, #16
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}

080118e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b085      	sub	sp, #20
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	699a      	ldr	r2, [r3, #24]
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f042 0208 	orr.w	r2, r2, #8
 8011902:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	699a      	ldr	r2, [r3, #24]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	f042 0210 	orr.w	r2, r2, #16
 8011912:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	f022 0201 	bic.w	r2, r2, #1
 8011922:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	6919      	ldr	r1, [r3, #16]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	4b3c      	ldr	r3, [pc, #240]	; (8011a20 <SPI_CloseTransfer+0x13c>)
 8011930:	400b      	ands	r3, r1
 8011932:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	689a      	ldr	r2, [r3, #8]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011942:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801194a:	b2db      	uxtb	r3, r3
 801194c:	2b04      	cmp	r3, #4
 801194e:	d014      	beq.n	801197a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f003 0320 	and.w	r3, r3, #32
 8011956:	2b00      	cmp	r3, #0
 8011958:	d00f      	beq.n	801197a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011960:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	699a      	ldr	r2, [r3, #24]
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f042 0220 	orr.w	r2, r2, #32
 8011978:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011980:	b2db      	uxtb	r3, r3
 8011982:	2b03      	cmp	r3, #3
 8011984:	d014      	beq.n	80119b0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801198c:	2b00      	cmp	r3, #0
 801198e:	d00f      	beq.n	80119b0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011996:	f043 0204 	orr.w	r2, r3, #4
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	699a      	ldr	r2, [r3, #24]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80119ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d00f      	beq.n	80119da <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119c0:	f043 0201 	orr.w	r2, r3, #1
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	699a      	ldr	r2, [r3, #24]
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80119d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d00f      	beq.n	8011a04 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119ea:	f043 0208 	orr.w	r2, r3, #8
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	699a      	ldr	r2, [r3, #24]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011a02:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2200      	movs	r2, #0
 8011a08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8011a14:	bf00      	nop
 8011a16:	3714      	adds	r7, #20
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr
 8011a20:	fffffc90 	.word	0xfffffc90

08011a24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b085      	sub	sp, #20
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a30:	095b      	lsrs	r3, r3, #5
 8011a32:	3301      	adds	r3, #1
 8011a34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	3307      	adds	r3, #7
 8011a42:	08db      	lsrs	r3, r3, #3
 8011a44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3714      	adds	r7, #20
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr

08011a5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011a5a:	b580      	push	{r7, lr}
 8011a5c:	b082      	sub	sp, #8
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d101      	bne.n	8011a6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e049      	b.n	8011b00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d106      	bne.n	8011a86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f7f2 fab5 	bl	8003ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2202      	movs	r2, #2
 8011a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	3304      	adds	r3, #4
 8011a96:	4619      	mov	r1, r3
 8011a98:	4610      	mov	r0, r2
 8011a9a:	f000 fe7d 	bl	8012798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2201      	movs	r2, #1
 8011aa2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2201      	movs	r2, #1
 8011ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2201      	movs	r2, #1
 8011aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2201      	movs	r2, #1
 8011ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2201      	movs	r2, #1
 8011aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2201      	movs	r2, #1
 8011ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2201      	movs	r2, #1
 8011aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2201      	movs	r2, #1
 8011af2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2201      	movs	r2, #1
 8011afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011afe:	2300      	movs	r3, #0
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3708      	adds	r7, #8
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011b08:	b480      	push	{r7}
 8011b0a:	b085      	sub	sp, #20
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	d001      	beq.n	8011b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e054      	b.n	8011bca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2202      	movs	r2, #2
 8011b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	68da      	ldr	r2, [r3, #12]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	f042 0201 	orr.w	r2, r2, #1
 8011b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	4a26      	ldr	r2, [pc, #152]	; (8011bd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d022      	beq.n	8011b88 <HAL_TIM_Base_Start_IT+0x80>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b4a:	d01d      	beq.n	8011b88 <HAL_TIM_Base_Start_IT+0x80>
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4a22      	ldr	r2, [pc, #136]	; (8011bdc <HAL_TIM_Base_Start_IT+0xd4>)
 8011b52:	4293      	cmp	r3, r2
 8011b54:	d018      	beq.n	8011b88 <HAL_TIM_Base_Start_IT+0x80>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	4a21      	ldr	r2, [pc, #132]	; (8011be0 <HAL_TIM_Base_Start_IT+0xd8>)
 8011b5c:	4293      	cmp	r3, r2
 8011b5e:	d013      	beq.n	8011b88 <HAL_TIM_Base_Start_IT+0x80>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4a1f      	ldr	r2, [pc, #124]	; (8011be4 <HAL_TIM_Base_Start_IT+0xdc>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d00e      	beq.n	8011b88 <HAL_TIM_Base_Start_IT+0x80>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	4a1e      	ldr	r2, [pc, #120]	; (8011be8 <HAL_TIM_Base_Start_IT+0xe0>)
 8011b70:	4293      	cmp	r3, r2
 8011b72:	d009      	beq.n	8011b88 <HAL_TIM_Base_Start_IT+0x80>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4a1c      	ldr	r2, [pc, #112]	; (8011bec <HAL_TIM_Base_Start_IT+0xe4>)
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d004      	beq.n	8011b88 <HAL_TIM_Base_Start_IT+0x80>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	4a1b      	ldr	r2, [pc, #108]	; (8011bf0 <HAL_TIM_Base_Start_IT+0xe8>)
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d115      	bne.n	8011bb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	689a      	ldr	r2, [r3, #8]
 8011b8e:	4b19      	ldr	r3, [pc, #100]	; (8011bf4 <HAL_TIM_Base_Start_IT+0xec>)
 8011b90:	4013      	ands	r3, r2
 8011b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	2b06      	cmp	r3, #6
 8011b98:	d015      	beq.n	8011bc6 <HAL_TIM_Base_Start_IT+0xbe>
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ba0:	d011      	beq.n	8011bc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	681a      	ldr	r2, [r3, #0]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f042 0201 	orr.w	r2, r2, #1
 8011bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bb2:	e008      	b.n	8011bc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	681a      	ldr	r2, [r3, #0]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f042 0201 	orr.w	r2, r2, #1
 8011bc2:	601a      	str	r2, [r3, #0]
 8011bc4:	e000      	b.n	8011bc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011bc8:	2300      	movs	r3, #0
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3714      	adds	r7, #20
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd4:	4770      	bx	lr
 8011bd6:	bf00      	nop
 8011bd8:	40010000 	.word	0x40010000
 8011bdc:	40000400 	.word	0x40000400
 8011be0:	40000800 	.word	0x40000800
 8011be4:	40000c00 	.word	0x40000c00
 8011be8:	40010400 	.word	0x40010400
 8011bec:	40001800 	.word	0x40001800
 8011bf0:	40014000 	.word	0x40014000
 8011bf4:	00010007 	.word	0x00010007

08011bf8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c02:	2300      	movs	r3, #0
 8011c04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d109      	bne.n	8011c20 <HAL_TIM_OC_Start_IT+0x28>
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	bf14      	ite	ne
 8011c18:	2301      	movne	r3, #1
 8011c1a:	2300      	moveq	r3, #0
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	e03c      	b.n	8011c9a <HAL_TIM_OC_Start_IT+0xa2>
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	2b04      	cmp	r3, #4
 8011c24:	d109      	bne.n	8011c3a <HAL_TIM_OC_Start_IT+0x42>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	bf14      	ite	ne
 8011c32:	2301      	movne	r3, #1
 8011c34:	2300      	moveq	r3, #0
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	e02f      	b.n	8011c9a <HAL_TIM_OC_Start_IT+0xa2>
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	2b08      	cmp	r3, #8
 8011c3e:	d109      	bne.n	8011c54 <HAL_TIM_OC_Start_IT+0x5c>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c46:	b2db      	uxtb	r3, r3
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	bf14      	ite	ne
 8011c4c:	2301      	movne	r3, #1
 8011c4e:	2300      	moveq	r3, #0
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	e022      	b.n	8011c9a <HAL_TIM_OC_Start_IT+0xa2>
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	2b0c      	cmp	r3, #12
 8011c58:	d109      	bne.n	8011c6e <HAL_TIM_OC_Start_IT+0x76>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	bf14      	ite	ne
 8011c66:	2301      	movne	r3, #1
 8011c68:	2300      	moveq	r3, #0
 8011c6a:	b2db      	uxtb	r3, r3
 8011c6c:	e015      	b.n	8011c9a <HAL_TIM_OC_Start_IT+0xa2>
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	2b10      	cmp	r3, #16
 8011c72:	d109      	bne.n	8011c88 <HAL_TIM_OC_Start_IT+0x90>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c7a:	b2db      	uxtb	r3, r3
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	bf14      	ite	ne
 8011c80:	2301      	movne	r3, #1
 8011c82:	2300      	moveq	r3, #0
 8011c84:	b2db      	uxtb	r3, r3
 8011c86:	e008      	b.n	8011c9a <HAL_TIM_OC_Start_IT+0xa2>
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011c8e:	b2db      	uxtb	r3, r3
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	bf14      	ite	ne
 8011c94:	2301      	movne	r3, #1
 8011c96:	2300      	moveq	r3, #0
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d001      	beq.n	8011ca2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	e0ec      	b.n	8011e7c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d104      	bne.n	8011cb2 <HAL_TIM_OC_Start_IT+0xba>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2202      	movs	r2, #2
 8011cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011cb0:	e023      	b.n	8011cfa <HAL_TIM_OC_Start_IT+0x102>
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	2b04      	cmp	r3, #4
 8011cb6:	d104      	bne.n	8011cc2 <HAL_TIM_OC_Start_IT+0xca>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2202      	movs	r2, #2
 8011cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011cc0:	e01b      	b.n	8011cfa <HAL_TIM_OC_Start_IT+0x102>
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	2b08      	cmp	r3, #8
 8011cc6:	d104      	bne.n	8011cd2 <HAL_TIM_OC_Start_IT+0xda>
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2202      	movs	r2, #2
 8011ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011cd0:	e013      	b.n	8011cfa <HAL_TIM_OC_Start_IT+0x102>
 8011cd2:	683b      	ldr	r3, [r7, #0]
 8011cd4:	2b0c      	cmp	r3, #12
 8011cd6:	d104      	bne.n	8011ce2 <HAL_TIM_OC_Start_IT+0xea>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2202      	movs	r2, #2
 8011cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011ce0:	e00b      	b.n	8011cfa <HAL_TIM_OC_Start_IT+0x102>
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	2b10      	cmp	r3, #16
 8011ce6:	d104      	bne.n	8011cf2 <HAL_TIM_OC_Start_IT+0xfa>
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2202      	movs	r2, #2
 8011cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011cf0:	e003      	b.n	8011cfa <HAL_TIM_OC_Start_IT+0x102>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2202      	movs	r2, #2
 8011cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	2b0c      	cmp	r3, #12
 8011cfe:	d841      	bhi.n	8011d84 <HAL_TIM_OC_Start_IT+0x18c>
 8011d00:	a201      	add	r2, pc, #4	; (adr r2, 8011d08 <HAL_TIM_OC_Start_IT+0x110>)
 8011d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d06:	bf00      	nop
 8011d08:	08011d3d 	.word	0x08011d3d
 8011d0c:	08011d85 	.word	0x08011d85
 8011d10:	08011d85 	.word	0x08011d85
 8011d14:	08011d85 	.word	0x08011d85
 8011d18:	08011d4f 	.word	0x08011d4f
 8011d1c:	08011d85 	.word	0x08011d85
 8011d20:	08011d85 	.word	0x08011d85
 8011d24:	08011d85 	.word	0x08011d85
 8011d28:	08011d61 	.word	0x08011d61
 8011d2c:	08011d85 	.word	0x08011d85
 8011d30:	08011d85 	.word	0x08011d85
 8011d34:	08011d85 	.word	0x08011d85
 8011d38:	08011d73 	.word	0x08011d73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	68da      	ldr	r2, [r3, #12]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f042 0202 	orr.w	r2, r2, #2
 8011d4a:	60da      	str	r2, [r3, #12]
      break;
 8011d4c:	e01d      	b.n	8011d8a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	68da      	ldr	r2, [r3, #12]
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f042 0204 	orr.w	r2, r2, #4
 8011d5c:	60da      	str	r2, [r3, #12]
      break;
 8011d5e:	e014      	b.n	8011d8a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	68da      	ldr	r2, [r3, #12]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	f042 0208 	orr.w	r2, r2, #8
 8011d6e:	60da      	str	r2, [r3, #12]
      break;
 8011d70:	e00b      	b.n	8011d8a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	68da      	ldr	r2, [r3, #12]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f042 0210 	orr.w	r2, r2, #16
 8011d80:	60da      	str	r2, [r3, #12]
      break;
 8011d82:	e002      	b.n	8011d8a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8011d84:	2301      	movs	r3, #1
 8011d86:	73fb      	strb	r3, [r7, #15]
      break;
 8011d88:	bf00      	nop
  }

  if (status == HAL_OK)
 8011d8a:	7bfb      	ldrb	r3, [r7, #15]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d174      	bne.n	8011e7a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2201      	movs	r2, #1
 8011d96:	6839      	ldr	r1, [r7, #0]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f001 f917 	bl	8012fcc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	4a38      	ldr	r2, [pc, #224]	; (8011e84 <HAL_TIM_OC_Start_IT+0x28c>)
 8011da4:	4293      	cmp	r3, r2
 8011da6:	d013      	beq.n	8011dd0 <HAL_TIM_OC_Start_IT+0x1d8>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	4a36      	ldr	r2, [pc, #216]	; (8011e88 <HAL_TIM_OC_Start_IT+0x290>)
 8011dae:	4293      	cmp	r3, r2
 8011db0:	d00e      	beq.n	8011dd0 <HAL_TIM_OC_Start_IT+0x1d8>
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	4a35      	ldr	r2, [pc, #212]	; (8011e8c <HAL_TIM_OC_Start_IT+0x294>)
 8011db8:	4293      	cmp	r3, r2
 8011dba:	d009      	beq.n	8011dd0 <HAL_TIM_OC_Start_IT+0x1d8>
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	4a33      	ldr	r2, [pc, #204]	; (8011e90 <HAL_TIM_OC_Start_IT+0x298>)
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	d004      	beq.n	8011dd0 <HAL_TIM_OC_Start_IT+0x1d8>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	4a32      	ldr	r2, [pc, #200]	; (8011e94 <HAL_TIM_OC_Start_IT+0x29c>)
 8011dcc:	4293      	cmp	r3, r2
 8011dce:	d101      	bne.n	8011dd4 <HAL_TIM_OC_Start_IT+0x1dc>
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	e000      	b.n	8011dd6 <HAL_TIM_OC_Start_IT+0x1de>
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d007      	beq.n	8011dea <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011de8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	4a25      	ldr	r2, [pc, #148]	; (8011e84 <HAL_TIM_OC_Start_IT+0x28c>)
 8011df0:	4293      	cmp	r3, r2
 8011df2:	d022      	beq.n	8011e3a <HAL_TIM_OC_Start_IT+0x242>
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011dfc:	d01d      	beq.n	8011e3a <HAL_TIM_OC_Start_IT+0x242>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	4a25      	ldr	r2, [pc, #148]	; (8011e98 <HAL_TIM_OC_Start_IT+0x2a0>)
 8011e04:	4293      	cmp	r3, r2
 8011e06:	d018      	beq.n	8011e3a <HAL_TIM_OC_Start_IT+0x242>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4a23      	ldr	r2, [pc, #140]	; (8011e9c <HAL_TIM_OC_Start_IT+0x2a4>)
 8011e0e:	4293      	cmp	r3, r2
 8011e10:	d013      	beq.n	8011e3a <HAL_TIM_OC_Start_IT+0x242>
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	4a22      	ldr	r2, [pc, #136]	; (8011ea0 <HAL_TIM_OC_Start_IT+0x2a8>)
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d00e      	beq.n	8011e3a <HAL_TIM_OC_Start_IT+0x242>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	4a19      	ldr	r2, [pc, #100]	; (8011e88 <HAL_TIM_OC_Start_IT+0x290>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d009      	beq.n	8011e3a <HAL_TIM_OC_Start_IT+0x242>
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	4a1e      	ldr	r2, [pc, #120]	; (8011ea4 <HAL_TIM_OC_Start_IT+0x2ac>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d004      	beq.n	8011e3a <HAL_TIM_OC_Start_IT+0x242>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a15      	ldr	r2, [pc, #84]	; (8011e8c <HAL_TIM_OC_Start_IT+0x294>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d115      	bne.n	8011e66 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	689a      	ldr	r2, [r3, #8]
 8011e40:	4b19      	ldr	r3, [pc, #100]	; (8011ea8 <HAL_TIM_OC_Start_IT+0x2b0>)
 8011e42:	4013      	ands	r3, r2
 8011e44:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	2b06      	cmp	r3, #6
 8011e4a:	d015      	beq.n	8011e78 <HAL_TIM_OC_Start_IT+0x280>
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e52:	d011      	beq.n	8011e78 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f042 0201 	orr.w	r2, r2, #1
 8011e62:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e64:	e008      	b.n	8011e78 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	681a      	ldr	r2, [r3, #0]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	f042 0201 	orr.w	r2, r2, #1
 8011e74:	601a      	str	r2, [r3, #0]
 8011e76:	e000      	b.n	8011e7a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e78:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8011e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	40010000 	.word	0x40010000
 8011e88:	40010400 	.word	0x40010400
 8011e8c:	40014000 	.word	0x40014000
 8011e90:	40014400 	.word	0x40014400
 8011e94:	40014800 	.word	0x40014800
 8011e98:	40000400 	.word	0x40000400
 8011e9c:	40000800 	.word	0x40000800
 8011ea0:	40000c00 	.word	0x40000c00
 8011ea4:	40001800 	.word	0x40001800
 8011ea8:	00010007 	.word	0x00010007

08011eac <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b084      	sub	sp, #16
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
 8011eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	2b0c      	cmp	r3, #12
 8011ebe:	d841      	bhi.n	8011f44 <HAL_TIM_OC_Stop_IT+0x98>
 8011ec0:	a201      	add	r2, pc, #4	; (adr r2, 8011ec8 <HAL_TIM_OC_Stop_IT+0x1c>)
 8011ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec6:	bf00      	nop
 8011ec8:	08011efd 	.word	0x08011efd
 8011ecc:	08011f45 	.word	0x08011f45
 8011ed0:	08011f45 	.word	0x08011f45
 8011ed4:	08011f45 	.word	0x08011f45
 8011ed8:	08011f0f 	.word	0x08011f0f
 8011edc:	08011f45 	.word	0x08011f45
 8011ee0:	08011f45 	.word	0x08011f45
 8011ee4:	08011f45 	.word	0x08011f45
 8011ee8:	08011f21 	.word	0x08011f21
 8011eec:	08011f45 	.word	0x08011f45
 8011ef0:	08011f45 	.word	0x08011f45
 8011ef4:	08011f45 	.word	0x08011f45
 8011ef8:	08011f33 	.word	0x08011f33
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	68da      	ldr	r2, [r3, #12]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f022 0202 	bic.w	r2, r2, #2
 8011f0a:	60da      	str	r2, [r3, #12]
      break;
 8011f0c:	e01d      	b.n	8011f4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	68da      	ldr	r2, [r3, #12]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f022 0204 	bic.w	r2, r2, #4
 8011f1c:	60da      	str	r2, [r3, #12]
      break;
 8011f1e:	e014      	b.n	8011f4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	68da      	ldr	r2, [r3, #12]
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	f022 0208 	bic.w	r2, r2, #8
 8011f2e:	60da      	str	r2, [r3, #12]
      break;
 8011f30:	e00b      	b.n	8011f4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	68da      	ldr	r2, [r3, #12]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f022 0210 	bic.w	r2, r2, #16
 8011f40:	60da      	str	r2, [r3, #12]
      break;
 8011f42:	e002      	b.n	8011f4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8011f44:	2301      	movs	r3, #1
 8011f46:	73fb      	strb	r3, [r7, #15]
      break;
 8011f48:	bf00      	nop
  }

  if (status == HAL_OK)
 8011f4a:	7bfb      	ldrb	r3, [r7, #15]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	f040 8081 	bne.w	8012054 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	2200      	movs	r2, #0
 8011f58:	6839      	ldr	r1, [r7, #0]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f001 f836 	bl	8012fcc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	4a3e      	ldr	r2, [pc, #248]	; (8012060 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8011f66:	4293      	cmp	r3, r2
 8011f68:	d013      	beq.n	8011f92 <HAL_TIM_OC_Stop_IT+0xe6>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	4a3d      	ldr	r2, [pc, #244]	; (8012064 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8011f70:	4293      	cmp	r3, r2
 8011f72:	d00e      	beq.n	8011f92 <HAL_TIM_OC_Stop_IT+0xe6>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4a3b      	ldr	r2, [pc, #236]	; (8012068 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8011f7a:	4293      	cmp	r3, r2
 8011f7c:	d009      	beq.n	8011f92 <HAL_TIM_OC_Stop_IT+0xe6>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	4a3a      	ldr	r2, [pc, #232]	; (801206c <HAL_TIM_OC_Stop_IT+0x1c0>)
 8011f84:	4293      	cmp	r3, r2
 8011f86:	d004      	beq.n	8011f92 <HAL_TIM_OC_Stop_IT+0xe6>
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	4a38      	ldr	r2, [pc, #224]	; (8012070 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8011f8e:	4293      	cmp	r3, r2
 8011f90:	d101      	bne.n	8011f96 <HAL_TIM_OC_Stop_IT+0xea>
 8011f92:	2301      	movs	r3, #1
 8011f94:	e000      	b.n	8011f98 <HAL_TIM_OC_Stop_IT+0xec>
 8011f96:	2300      	movs	r3, #0
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d017      	beq.n	8011fcc <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	6a1a      	ldr	r2, [r3, #32]
 8011fa2:	f241 1311 	movw	r3, #4369	; 0x1111
 8011fa6:	4013      	ands	r3, r2
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d10f      	bne.n	8011fcc <HAL_TIM_OC_Stop_IT+0x120>
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	6a1a      	ldr	r2, [r3, #32]
 8011fb2:	f240 4344 	movw	r3, #1092	; 0x444
 8011fb6:	4013      	ands	r3, r2
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d107      	bne.n	8011fcc <HAL_TIM_OC_Stop_IT+0x120>
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011fca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	6a1a      	ldr	r2, [r3, #32]
 8011fd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8011fd6:	4013      	ands	r3, r2
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d10f      	bne.n	8011ffc <HAL_TIM_OC_Stop_IT+0x150>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	6a1a      	ldr	r2, [r3, #32]
 8011fe2:	f240 4344 	movw	r3, #1092	; 0x444
 8011fe6:	4013      	ands	r3, r2
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d107      	bne.n	8011ffc <HAL_TIM_OC_Stop_IT+0x150>
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f022 0201 	bic.w	r2, r2, #1
 8011ffa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d104      	bne.n	801200c <HAL_TIM_OC_Stop_IT+0x160>
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2201      	movs	r2, #1
 8012006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801200a:	e023      	b.n	8012054 <HAL_TIM_OC_Stop_IT+0x1a8>
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	2b04      	cmp	r3, #4
 8012010:	d104      	bne.n	801201c <HAL_TIM_OC_Stop_IT+0x170>
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2201      	movs	r2, #1
 8012016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801201a:	e01b      	b.n	8012054 <HAL_TIM_OC_Stop_IT+0x1a8>
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	2b08      	cmp	r3, #8
 8012020:	d104      	bne.n	801202c <HAL_TIM_OC_Stop_IT+0x180>
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2201      	movs	r2, #1
 8012026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801202a:	e013      	b.n	8012054 <HAL_TIM_OC_Stop_IT+0x1a8>
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	2b0c      	cmp	r3, #12
 8012030:	d104      	bne.n	801203c <HAL_TIM_OC_Stop_IT+0x190>
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2201      	movs	r2, #1
 8012036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801203a:	e00b      	b.n	8012054 <HAL_TIM_OC_Stop_IT+0x1a8>
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	2b10      	cmp	r3, #16
 8012040:	d104      	bne.n	801204c <HAL_TIM_OC_Stop_IT+0x1a0>
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2201      	movs	r2, #1
 8012046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801204a:	e003      	b.n	8012054 <HAL_TIM_OC_Stop_IT+0x1a8>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2201      	movs	r2, #1
 8012050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012054:	7bfb      	ldrb	r3, [r7, #15]
}
 8012056:	4618      	mov	r0, r3
 8012058:	3710      	adds	r7, #16
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	40010000 	.word	0x40010000
 8012064:	40010400 	.word	0x40010400
 8012068:	40014000 	.word	0x40014000
 801206c:	40014400 	.word	0x40014400
 8012070:	40014800 	.word	0x40014800

08012074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d101      	bne.n	8012086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012082:	2301      	movs	r3, #1
 8012084:	e049      	b.n	801211a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801208c:	b2db      	uxtb	r3, r3
 801208e:	2b00      	cmp	r3, #0
 8012090:	d106      	bne.n	80120a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2200      	movs	r2, #0
 8012096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 f841 	bl	8012122 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2202      	movs	r2, #2
 80120a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	3304      	adds	r3, #4
 80120b0:	4619      	mov	r1, r3
 80120b2:	4610      	mov	r0, r2
 80120b4:	f000 fb70 	bl	8012798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2201      	movs	r2, #1
 80120bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2201      	movs	r2, #1
 80120c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2201      	movs	r2, #1
 80120cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2201      	movs	r2, #1
 80120d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2201      	movs	r2, #1
 80120dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2201      	movs	r2, #1
 80120e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2201      	movs	r2, #1
 80120ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2201      	movs	r2, #1
 80120f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2201      	movs	r2, #1
 80120fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2201      	movs	r2, #1
 8012104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2201      	movs	r2, #1
 801210c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2201      	movs	r2, #1
 8012114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012118:	2300      	movs	r3, #0
}
 801211a:	4618      	mov	r0, r3
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012122:	b480      	push	{r7}
 8012124:	b083      	sub	sp, #12
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801212a:	bf00      	nop
 801212c:	370c      	adds	r7, #12
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr

08012136 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012136:	b580      	push	{r7, lr}
 8012138:	b084      	sub	sp, #16
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	691b      	ldr	r3, [r3, #16]
 801214c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	f003 0302 	and.w	r3, r3, #2
 8012154:	2b00      	cmp	r3, #0
 8012156:	d020      	beq.n	801219a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	f003 0302 	and.w	r3, r3, #2
 801215e:	2b00      	cmp	r3, #0
 8012160:	d01b      	beq.n	801219a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f06f 0202 	mvn.w	r2, #2
 801216a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2201      	movs	r2, #1
 8012170:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	699b      	ldr	r3, [r3, #24]
 8012178:	f003 0303 	and.w	r3, r3, #3
 801217c:	2b00      	cmp	r3, #0
 801217e:	d003      	beq.n	8012188 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f000 faeb 	bl	801275c <HAL_TIM_IC_CaptureCallback>
 8012186:	e005      	b.n	8012194 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f7ef fe7f 	bl	8001e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f000 faee 	bl	8012770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2200      	movs	r2, #0
 8012198:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	f003 0304 	and.w	r3, r3, #4
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d020      	beq.n	80121e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f003 0304 	and.w	r3, r3, #4
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d01b      	beq.n	80121e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f06f 0204 	mvn.w	r2, #4
 80121b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2202      	movs	r2, #2
 80121bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	699b      	ldr	r3, [r3, #24]
 80121c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d003      	beq.n	80121d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 fac5 	bl	801275c <HAL_TIM_IC_CaptureCallback>
 80121d2:	e005      	b.n	80121e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f7ef fe59 	bl	8001e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f000 fac8 	bl	8012770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2200      	movs	r2, #0
 80121e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	f003 0308 	and.w	r3, r3, #8
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d020      	beq.n	8012232 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f003 0308 	and.w	r3, r3, #8
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d01b      	beq.n	8012232 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	f06f 0208 	mvn.w	r2, #8
 8012202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2204      	movs	r2, #4
 8012208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	69db      	ldr	r3, [r3, #28]
 8012210:	f003 0303 	and.w	r3, r3, #3
 8012214:	2b00      	cmp	r3, #0
 8012216:	d003      	beq.n	8012220 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 fa9f 	bl	801275c <HAL_TIM_IC_CaptureCallback>
 801221e:	e005      	b.n	801222c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7ef fe33 	bl	8001e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f000 faa2 	bl	8012770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2200      	movs	r2, #0
 8012230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	f003 0310 	and.w	r3, r3, #16
 8012238:	2b00      	cmp	r3, #0
 801223a:	d020      	beq.n	801227e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	f003 0310 	and.w	r3, r3, #16
 8012242:	2b00      	cmp	r3, #0
 8012244:	d01b      	beq.n	801227e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f06f 0210 	mvn.w	r2, #16
 801224e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2208      	movs	r2, #8
 8012254:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	69db      	ldr	r3, [r3, #28]
 801225c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012260:	2b00      	cmp	r3, #0
 8012262:	d003      	beq.n	801226c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 fa79 	bl	801275c <HAL_TIM_IC_CaptureCallback>
 801226a:	e005      	b.n	8012278 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f7ef fe0d 	bl	8001e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f000 fa7c 	bl	8012770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2200      	movs	r2, #0
 801227c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	f003 0301 	and.w	r3, r3, #1
 8012284:	2b00      	cmp	r3, #0
 8012286:	d00c      	beq.n	80122a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	f003 0301 	and.w	r3, r3, #1
 801228e:	2b00      	cmp	r3, #0
 8012290:	d007      	beq.n	80122a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f06f 0201 	mvn.w	r2, #1
 801229a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7f0 fc91 	bl	8002bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d104      	bne.n	80122b6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d00c      	beq.n	80122d0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d007      	beq.n	80122d0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80122c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 ffba 	bl	8013244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d00c      	beq.n	80122f4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d007      	beq.n	80122f4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80122ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f000 ffb2 	bl	8013258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d00c      	beq.n	8012318 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012304:	2b00      	cmp	r3, #0
 8012306:	d007      	beq.n	8012318 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 fa36 	bl	8012784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	f003 0320 	and.w	r3, r3, #32
 801231e:	2b00      	cmp	r3, #0
 8012320:	d00c      	beq.n	801233c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	f003 0320 	and.w	r3, r3, #32
 8012328:	2b00      	cmp	r3, #0
 801232a:	d007      	beq.n	801233c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	f06f 0220 	mvn.w	r2, #32
 8012334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f000 ff7a 	bl	8013230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801233c:	bf00      	nop
 801233e:	3710      	adds	r7, #16
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b086      	sub	sp, #24
 8012348:	af00      	add	r7, sp, #0
 801234a:	60f8      	str	r0, [r7, #12]
 801234c:	60b9      	str	r1, [r7, #8]
 801234e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012350:	2300      	movs	r3, #0
 8012352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801235a:	2b01      	cmp	r3, #1
 801235c:	d101      	bne.n	8012362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801235e:	2302      	movs	r3, #2
 8012360:	e0ff      	b.n	8012562 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2201      	movs	r2, #1
 8012366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b14      	cmp	r3, #20
 801236e:	f200 80f0 	bhi.w	8012552 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012372:	a201      	add	r2, pc, #4	; (adr r2, 8012378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012378:	080123cd 	.word	0x080123cd
 801237c:	08012553 	.word	0x08012553
 8012380:	08012553 	.word	0x08012553
 8012384:	08012553 	.word	0x08012553
 8012388:	0801240d 	.word	0x0801240d
 801238c:	08012553 	.word	0x08012553
 8012390:	08012553 	.word	0x08012553
 8012394:	08012553 	.word	0x08012553
 8012398:	0801244f 	.word	0x0801244f
 801239c:	08012553 	.word	0x08012553
 80123a0:	08012553 	.word	0x08012553
 80123a4:	08012553 	.word	0x08012553
 80123a8:	0801248f 	.word	0x0801248f
 80123ac:	08012553 	.word	0x08012553
 80123b0:	08012553 	.word	0x08012553
 80123b4:	08012553 	.word	0x08012553
 80123b8:	080124d1 	.word	0x080124d1
 80123bc:	08012553 	.word	0x08012553
 80123c0:	08012553 	.word	0x08012553
 80123c4:	08012553 	.word	0x08012553
 80123c8:	08012511 	.word	0x08012511
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	68b9      	ldr	r1, [r7, #8]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f000 fa86 	bl	80128e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	699a      	ldr	r2, [r3, #24]
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	f042 0208 	orr.w	r2, r2, #8
 80123e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	699a      	ldr	r2, [r3, #24]
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f022 0204 	bic.w	r2, r2, #4
 80123f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	6999      	ldr	r1, [r3, #24]
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	691a      	ldr	r2, [r3, #16]
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	430a      	orrs	r2, r1
 8012408:	619a      	str	r2, [r3, #24]
      break;
 801240a:	e0a5      	b.n	8012558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	68b9      	ldr	r1, [r7, #8]
 8012412:	4618      	mov	r0, r3
 8012414:	f000 faf6 	bl	8012a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	699a      	ldr	r2, [r3, #24]
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	699a      	ldr	r2, [r3, #24]
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	6999      	ldr	r1, [r3, #24]
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	691b      	ldr	r3, [r3, #16]
 8012442:	021a      	lsls	r2, r3, #8
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	430a      	orrs	r2, r1
 801244a:	619a      	str	r2, [r3, #24]
      break;
 801244c:	e084      	b.n	8012558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	68b9      	ldr	r1, [r7, #8]
 8012454:	4618      	mov	r0, r3
 8012456:	f000 fb5f 	bl	8012b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	69da      	ldr	r2, [r3, #28]
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	f042 0208 	orr.w	r2, r2, #8
 8012468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	69da      	ldr	r2, [r3, #28]
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	f022 0204 	bic.w	r2, r2, #4
 8012478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	69d9      	ldr	r1, [r3, #28]
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	691a      	ldr	r2, [r3, #16]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	430a      	orrs	r2, r1
 801248a:	61da      	str	r2, [r3, #28]
      break;
 801248c:	e064      	b.n	8012558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	68b9      	ldr	r1, [r7, #8]
 8012494:	4618      	mov	r0, r3
 8012496:	f000 fbc7 	bl	8012c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	69da      	ldr	r2, [r3, #28]
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80124a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	69da      	ldr	r2, [r3, #28]
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80124b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	69d9      	ldr	r1, [r3, #28]
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	691b      	ldr	r3, [r3, #16]
 80124c4:	021a      	lsls	r2, r3, #8
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	430a      	orrs	r2, r1
 80124cc:	61da      	str	r2, [r3, #28]
      break;
 80124ce:	e043      	b.n	8012558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	68b9      	ldr	r1, [r7, #8]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f000 fc10 	bl	8012cfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f042 0208 	orr.w	r2, r2, #8
 80124ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	f022 0204 	bic.w	r2, r2, #4
 80124fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	691a      	ldr	r2, [r3, #16]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	430a      	orrs	r2, r1
 801250c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801250e:	e023      	b.n	8012558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	68b9      	ldr	r1, [r7, #8]
 8012516:	4618      	mov	r0, r3
 8012518:	f000 fc54 	bl	8012dc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801252a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801253a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	691b      	ldr	r3, [r3, #16]
 8012546:	021a      	lsls	r2, r3, #8
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	430a      	orrs	r2, r1
 801254e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012550:	e002      	b.n	8012558 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012552:	2301      	movs	r3, #1
 8012554:	75fb      	strb	r3, [r7, #23]
      break;
 8012556:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	2200      	movs	r2, #0
 801255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012560:	7dfb      	ldrb	r3, [r7, #23]
}
 8012562:	4618      	mov	r0, r3
 8012564:	3718      	adds	r7, #24
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop

0801256c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b084      	sub	sp, #16
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012576:	2300      	movs	r3, #0
 8012578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012580:	2b01      	cmp	r3, #1
 8012582:	d101      	bne.n	8012588 <HAL_TIM_ConfigClockSource+0x1c>
 8012584:	2302      	movs	r3, #2
 8012586:	e0dc      	b.n	8012742 <HAL_TIM_ConfigClockSource+0x1d6>
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2201      	movs	r2, #1
 801258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2202      	movs	r2, #2
 8012594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	689b      	ldr	r3, [r3, #8]
 801259e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80125a0:	68ba      	ldr	r2, [r7, #8]
 80125a2:	4b6a      	ldr	r3, [pc, #424]	; (801274c <HAL_TIM_ConfigClockSource+0x1e0>)
 80125a4:	4013      	ands	r3, r2
 80125a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80125ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	68ba      	ldr	r2, [r7, #8]
 80125b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	4a64      	ldr	r2, [pc, #400]	; (8012750 <HAL_TIM_ConfigClockSource+0x1e4>)
 80125be:	4293      	cmp	r3, r2
 80125c0:	f000 80a9 	beq.w	8012716 <HAL_TIM_ConfigClockSource+0x1aa>
 80125c4:	4a62      	ldr	r2, [pc, #392]	; (8012750 <HAL_TIM_ConfigClockSource+0x1e4>)
 80125c6:	4293      	cmp	r3, r2
 80125c8:	f200 80ae 	bhi.w	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 80125cc:	4a61      	ldr	r2, [pc, #388]	; (8012754 <HAL_TIM_ConfigClockSource+0x1e8>)
 80125ce:	4293      	cmp	r3, r2
 80125d0:	f000 80a1 	beq.w	8012716 <HAL_TIM_ConfigClockSource+0x1aa>
 80125d4:	4a5f      	ldr	r2, [pc, #380]	; (8012754 <HAL_TIM_ConfigClockSource+0x1e8>)
 80125d6:	4293      	cmp	r3, r2
 80125d8:	f200 80a6 	bhi.w	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 80125dc:	4a5e      	ldr	r2, [pc, #376]	; (8012758 <HAL_TIM_ConfigClockSource+0x1ec>)
 80125de:	4293      	cmp	r3, r2
 80125e0:	f000 8099 	beq.w	8012716 <HAL_TIM_ConfigClockSource+0x1aa>
 80125e4:	4a5c      	ldr	r2, [pc, #368]	; (8012758 <HAL_TIM_ConfigClockSource+0x1ec>)
 80125e6:	4293      	cmp	r3, r2
 80125e8:	f200 809e 	bhi.w	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 80125ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80125f0:	f000 8091 	beq.w	8012716 <HAL_TIM_ConfigClockSource+0x1aa>
 80125f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80125f8:	f200 8096 	bhi.w	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 80125fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012600:	f000 8089 	beq.w	8012716 <HAL_TIM_ConfigClockSource+0x1aa>
 8012604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012608:	f200 808e 	bhi.w	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 801260c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012610:	d03e      	beq.n	8012690 <HAL_TIM_ConfigClockSource+0x124>
 8012612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012616:	f200 8087 	bhi.w	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 801261a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801261e:	f000 8086 	beq.w	801272e <HAL_TIM_ConfigClockSource+0x1c2>
 8012622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012626:	d87f      	bhi.n	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 8012628:	2b70      	cmp	r3, #112	; 0x70
 801262a:	d01a      	beq.n	8012662 <HAL_TIM_ConfigClockSource+0xf6>
 801262c:	2b70      	cmp	r3, #112	; 0x70
 801262e:	d87b      	bhi.n	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 8012630:	2b60      	cmp	r3, #96	; 0x60
 8012632:	d050      	beq.n	80126d6 <HAL_TIM_ConfigClockSource+0x16a>
 8012634:	2b60      	cmp	r3, #96	; 0x60
 8012636:	d877      	bhi.n	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 8012638:	2b50      	cmp	r3, #80	; 0x50
 801263a:	d03c      	beq.n	80126b6 <HAL_TIM_ConfigClockSource+0x14a>
 801263c:	2b50      	cmp	r3, #80	; 0x50
 801263e:	d873      	bhi.n	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 8012640:	2b40      	cmp	r3, #64	; 0x40
 8012642:	d058      	beq.n	80126f6 <HAL_TIM_ConfigClockSource+0x18a>
 8012644:	2b40      	cmp	r3, #64	; 0x40
 8012646:	d86f      	bhi.n	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 8012648:	2b30      	cmp	r3, #48	; 0x30
 801264a:	d064      	beq.n	8012716 <HAL_TIM_ConfigClockSource+0x1aa>
 801264c:	2b30      	cmp	r3, #48	; 0x30
 801264e:	d86b      	bhi.n	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 8012650:	2b20      	cmp	r3, #32
 8012652:	d060      	beq.n	8012716 <HAL_TIM_ConfigClockSource+0x1aa>
 8012654:	2b20      	cmp	r3, #32
 8012656:	d867      	bhi.n	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
 8012658:	2b00      	cmp	r3, #0
 801265a:	d05c      	beq.n	8012716 <HAL_TIM_ConfigClockSource+0x1aa>
 801265c:	2b10      	cmp	r3, #16
 801265e:	d05a      	beq.n	8012716 <HAL_TIM_ConfigClockSource+0x1aa>
 8012660:	e062      	b.n	8012728 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6818      	ldr	r0, [r3, #0]
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	6899      	ldr	r1, [r3, #8]
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	685a      	ldr	r2, [r3, #4]
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	f000 fc8b 	bl	8012f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	689b      	ldr	r3, [r3, #8]
 801267c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	68ba      	ldr	r2, [r7, #8]
 801268c:	609a      	str	r2, [r3, #8]
      break;
 801268e:	e04f      	b.n	8012730 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6818      	ldr	r0, [r3, #0]
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	6899      	ldr	r1, [r3, #8]
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	685a      	ldr	r2, [r3, #4]
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	f000 fc74 	bl	8012f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	689a      	ldr	r2, [r3, #8]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80126b2:	609a      	str	r2, [r3, #8]
      break;
 80126b4:	e03c      	b.n	8012730 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6818      	ldr	r0, [r3, #0]
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	6859      	ldr	r1, [r3, #4]
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	461a      	mov	r2, r3
 80126c4:	f000 fbe4 	bl	8012e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2150      	movs	r1, #80	; 0x50
 80126ce:	4618      	mov	r0, r3
 80126d0:	f000 fc3e 	bl	8012f50 <TIM_ITRx_SetConfig>
      break;
 80126d4:	e02c      	b.n	8012730 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6818      	ldr	r0, [r3, #0]
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	6859      	ldr	r1, [r3, #4]
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	461a      	mov	r2, r3
 80126e4:	f000 fc03 	bl	8012eee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2160      	movs	r1, #96	; 0x60
 80126ee:	4618      	mov	r0, r3
 80126f0:	f000 fc2e 	bl	8012f50 <TIM_ITRx_SetConfig>
      break;
 80126f4:	e01c      	b.n	8012730 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6818      	ldr	r0, [r3, #0]
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	6859      	ldr	r1, [r3, #4]
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	461a      	mov	r2, r3
 8012704:	f000 fbc4 	bl	8012e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	2140      	movs	r1, #64	; 0x40
 801270e:	4618      	mov	r0, r3
 8012710:	f000 fc1e 	bl	8012f50 <TIM_ITRx_SetConfig>
      break;
 8012714:	e00c      	b.n	8012730 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4619      	mov	r1, r3
 8012720:	4610      	mov	r0, r2
 8012722:	f000 fc15 	bl	8012f50 <TIM_ITRx_SetConfig>
      break;
 8012726:	e003      	b.n	8012730 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8012728:	2301      	movs	r3, #1
 801272a:	73fb      	strb	r3, [r7, #15]
      break;
 801272c:	e000      	b.n	8012730 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801272e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2201      	movs	r2, #1
 8012734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012740:	7bfb      	ldrb	r3, [r7, #15]
}
 8012742:	4618      	mov	r0, r3
 8012744:	3710      	adds	r7, #16
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	ffceff88 	.word	0xffceff88
 8012750:	00100040 	.word	0x00100040
 8012754:	00100030 	.word	0x00100030
 8012758:	00100020 	.word	0x00100020

0801275c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801275c:	b480      	push	{r7}
 801275e:	b083      	sub	sp, #12
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012764:	bf00      	nop
 8012766:	370c      	adds	r7, #12
 8012768:	46bd      	mov	sp, r7
 801276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276e:	4770      	bx	lr

08012770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012770:	b480      	push	{r7}
 8012772:	b083      	sub	sp, #12
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012778:	bf00      	nop
 801277a:	370c      	adds	r7, #12
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr

08012784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012784:	b480      	push	{r7}
 8012786:	b083      	sub	sp, #12
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801278c:	bf00      	nop
 801278e:	370c      	adds	r7, #12
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr

08012798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012798:	b480      	push	{r7}
 801279a:	b085      	sub	sp, #20
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
 80127a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	4a46      	ldr	r2, [pc, #280]	; (80128c4 <TIM_Base_SetConfig+0x12c>)
 80127ac:	4293      	cmp	r3, r2
 80127ae:	d013      	beq.n	80127d8 <TIM_Base_SetConfig+0x40>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80127b6:	d00f      	beq.n	80127d8 <TIM_Base_SetConfig+0x40>
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	4a43      	ldr	r2, [pc, #268]	; (80128c8 <TIM_Base_SetConfig+0x130>)
 80127bc:	4293      	cmp	r3, r2
 80127be:	d00b      	beq.n	80127d8 <TIM_Base_SetConfig+0x40>
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	4a42      	ldr	r2, [pc, #264]	; (80128cc <TIM_Base_SetConfig+0x134>)
 80127c4:	4293      	cmp	r3, r2
 80127c6:	d007      	beq.n	80127d8 <TIM_Base_SetConfig+0x40>
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	4a41      	ldr	r2, [pc, #260]	; (80128d0 <TIM_Base_SetConfig+0x138>)
 80127cc:	4293      	cmp	r3, r2
 80127ce:	d003      	beq.n	80127d8 <TIM_Base_SetConfig+0x40>
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	4a40      	ldr	r2, [pc, #256]	; (80128d4 <TIM_Base_SetConfig+0x13c>)
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d108      	bne.n	80127ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80127de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	68fa      	ldr	r2, [r7, #12]
 80127e6:	4313      	orrs	r3, r2
 80127e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	4a35      	ldr	r2, [pc, #212]	; (80128c4 <TIM_Base_SetConfig+0x12c>)
 80127ee:	4293      	cmp	r3, r2
 80127f0:	d01f      	beq.n	8012832 <TIM_Base_SetConfig+0x9a>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80127f8:	d01b      	beq.n	8012832 <TIM_Base_SetConfig+0x9a>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	4a32      	ldr	r2, [pc, #200]	; (80128c8 <TIM_Base_SetConfig+0x130>)
 80127fe:	4293      	cmp	r3, r2
 8012800:	d017      	beq.n	8012832 <TIM_Base_SetConfig+0x9a>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	4a31      	ldr	r2, [pc, #196]	; (80128cc <TIM_Base_SetConfig+0x134>)
 8012806:	4293      	cmp	r3, r2
 8012808:	d013      	beq.n	8012832 <TIM_Base_SetConfig+0x9a>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4a30      	ldr	r2, [pc, #192]	; (80128d0 <TIM_Base_SetConfig+0x138>)
 801280e:	4293      	cmp	r3, r2
 8012810:	d00f      	beq.n	8012832 <TIM_Base_SetConfig+0x9a>
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	4a2f      	ldr	r2, [pc, #188]	; (80128d4 <TIM_Base_SetConfig+0x13c>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d00b      	beq.n	8012832 <TIM_Base_SetConfig+0x9a>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	4a2e      	ldr	r2, [pc, #184]	; (80128d8 <TIM_Base_SetConfig+0x140>)
 801281e:	4293      	cmp	r3, r2
 8012820:	d007      	beq.n	8012832 <TIM_Base_SetConfig+0x9a>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	4a2d      	ldr	r2, [pc, #180]	; (80128dc <TIM_Base_SetConfig+0x144>)
 8012826:	4293      	cmp	r3, r2
 8012828:	d003      	beq.n	8012832 <TIM_Base_SetConfig+0x9a>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	4a2c      	ldr	r2, [pc, #176]	; (80128e0 <TIM_Base_SetConfig+0x148>)
 801282e:	4293      	cmp	r3, r2
 8012830:	d108      	bne.n	8012844 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	68fa      	ldr	r2, [r7, #12]
 8012840:	4313      	orrs	r3, r2
 8012842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	695b      	ldr	r3, [r3, #20]
 801284e:	4313      	orrs	r3, r2
 8012850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	68fa      	ldr	r2, [r7, #12]
 8012856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	689a      	ldr	r2, [r3, #8]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	4a16      	ldr	r2, [pc, #88]	; (80128c4 <TIM_Base_SetConfig+0x12c>)
 801286c:	4293      	cmp	r3, r2
 801286e:	d00f      	beq.n	8012890 <TIM_Base_SetConfig+0xf8>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	4a18      	ldr	r2, [pc, #96]	; (80128d4 <TIM_Base_SetConfig+0x13c>)
 8012874:	4293      	cmp	r3, r2
 8012876:	d00b      	beq.n	8012890 <TIM_Base_SetConfig+0xf8>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	4a17      	ldr	r2, [pc, #92]	; (80128d8 <TIM_Base_SetConfig+0x140>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d007      	beq.n	8012890 <TIM_Base_SetConfig+0xf8>
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	4a16      	ldr	r2, [pc, #88]	; (80128dc <TIM_Base_SetConfig+0x144>)
 8012884:	4293      	cmp	r3, r2
 8012886:	d003      	beq.n	8012890 <TIM_Base_SetConfig+0xf8>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	4a15      	ldr	r2, [pc, #84]	; (80128e0 <TIM_Base_SetConfig+0x148>)
 801288c:	4293      	cmp	r3, r2
 801288e:	d103      	bne.n	8012898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	691a      	ldr	r2, [r3, #16]
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2201      	movs	r2, #1
 801289c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	691b      	ldr	r3, [r3, #16]
 80128a2:	f003 0301 	and.w	r3, r3, #1
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d105      	bne.n	80128b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	691b      	ldr	r3, [r3, #16]
 80128ae:	f023 0201 	bic.w	r2, r3, #1
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	611a      	str	r2, [r3, #16]
  }
}
 80128b6:	bf00      	nop
 80128b8:	3714      	adds	r7, #20
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	40010000 	.word	0x40010000
 80128c8:	40000400 	.word	0x40000400
 80128cc:	40000800 	.word	0x40000800
 80128d0:	40000c00 	.word	0x40000c00
 80128d4:	40010400 	.word	0x40010400
 80128d8:	40014000 	.word	0x40014000
 80128dc:	40014400 	.word	0x40014400
 80128e0:	40014800 	.word	0x40014800

080128e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80128e4:	b480      	push	{r7}
 80128e6:	b087      	sub	sp, #28
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6a1b      	ldr	r3, [r3, #32]
 80128f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6a1b      	ldr	r3, [r3, #32]
 80128f8:	f023 0201 	bic.w	r2, r3, #1
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	699b      	ldr	r3, [r3, #24]
 801290a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	4b37      	ldr	r3, [pc, #220]	; (80129ec <TIM_OC1_SetConfig+0x108>)
 8012910:	4013      	ands	r3, r2
 8012912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	f023 0303 	bic.w	r3, r3, #3
 801291a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	68fa      	ldr	r2, [r7, #12]
 8012922:	4313      	orrs	r3, r2
 8012924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	f023 0302 	bic.w	r3, r3, #2
 801292c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	689b      	ldr	r3, [r3, #8]
 8012932:	697a      	ldr	r2, [r7, #20]
 8012934:	4313      	orrs	r3, r2
 8012936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4a2d      	ldr	r2, [pc, #180]	; (80129f0 <TIM_OC1_SetConfig+0x10c>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d00f      	beq.n	8012960 <TIM_OC1_SetConfig+0x7c>
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	4a2c      	ldr	r2, [pc, #176]	; (80129f4 <TIM_OC1_SetConfig+0x110>)
 8012944:	4293      	cmp	r3, r2
 8012946:	d00b      	beq.n	8012960 <TIM_OC1_SetConfig+0x7c>
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	4a2b      	ldr	r2, [pc, #172]	; (80129f8 <TIM_OC1_SetConfig+0x114>)
 801294c:	4293      	cmp	r3, r2
 801294e:	d007      	beq.n	8012960 <TIM_OC1_SetConfig+0x7c>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	4a2a      	ldr	r2, [pc, #168]	; (80129fc <TIM_OC1_SetConfig+0x118>)
 8012954:	4293      	cmp	r3, r2
 8012956:	d003      	beq.n	8012960 <TIM_OC1_SetConfig+0x7c>
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	4a29      	ldr	r2, [pc, #164]	; (8012a00 <TIM_OC1_SetConfig+0x11c>)
 801295c:	4293      	cmp	r3, r2
 801295e:	d10c      	bne.n	801297a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	f023 0308 	bic.w	r3, r3, #8
 8012966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	68db      	ldr	r3, [r3, #12]
 801296c:	697a      	ldr	r2, [r7, #20]
 801296e:	4313      	orrs	r3, r2
 8012970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	f023 0304 	bic.w	r3, r3, #4
 8012978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	4a1c      	ldr	r2, [pc, #112]	; (80129f0 <TIM_OC1_SetConfig+0x10c>)
 801297e:	4293      	cmp	r3, r2
 8012980:	d00f      	beq.n	80129a2 <TIM_OC1_SetConfig+0xbe>
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	4a1b      	ldr	r2, [pc, #108]	; (80129f4 <TIM_OC1_SetConfig+0x110>)
 8012986:	4293      	cmp	r3, r2
 8012988:	d00b      	beq.n	80129a2 <TIM_OC1_SetConfig+0xbe>
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	4a1a      	ldr	r2, [pc, #104]	; (80129f8 <TIM_OC1_SetConfig+0x114>)
 801298e:	4293      	cmp	r3, r2
 8012990:	d007      	beq.n	80129a2 <TIM_OC1_SetConfig+0xbe>
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	4a19      	ldr	r2, [pc, #100]	; (80129fc <TIM_OC1_SetConfig+0x118>)
 8012996:	4293      	cmp	r3, r2
 8012998:	d003      	beq.n	80129a2 <TIM_OC1_SetConfig+0xbe>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	4a18      	ldr	r2, [pc, #96]	; (8012a00 <TIM_OC1_SetConfig+0x11c>)
 801299e:	4293      	cmp	r3, r2
 80129a0:	d111      	bne.n	80129c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80129a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80129b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	695b      	ldr	r3, [r3, #20]
 80129b6:	693a      	ldr	r2, [r7, #16]
 80129b8:	4313      	orrs	r3, r2
 80129ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	699b      	ldr	r3, [r3, #24]
 80129c0:	693a      	ldr	r2, [r7, #16]
 80129c2:	4313      	orrs	r3, r2
 80129c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	693a      	ldr	r2, [r7, #16]
 80129ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	68fa      	ldr	r2, [r7, #12]
 80129d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	685a      	ldr	r2, [r3, #4]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	697a      	ldr	r2, [r7, #20]
 80129de:	621a      	str	r2, [r3, #32]
}
 80129e0:	bf00      	nop
 80129e2:	371c      	adds	r7, #28
 80129e4:	46bd      	mov	sp, r7
 80129e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ea:	4770      	bx	lr
 80129ec:	fffeff8f 	.word	0xfffeff8f
 80129f0:	40010000 	.word	0x40010000
 80129f4:	40010400 	.word	0x40010400
 80129f8:	40014000 	.word	0x40014000
 80129fc:	40014400 	.word	0x40014400
 8012a00:	40014800 	.word	0x40014800

08012a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012a04:	b480      	push	{r7}
 8012a06:	b087      	sub	sp, #28
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6a1b      	ldr	r3, [r3, #32]
 8012a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6a1b      	ldr	r3, [r3, #32]
 8012a18:	f023 0210 	bic.w	r2, r3, #16
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	685b      	ldr	r3, [r3, #4]
 8012a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	699b      	ldr	r3, [r3, #24]
 8012a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012a2c:	68fa      	ldr	r2, [r7, #12]
 8012a2e:	4b34      	ldr	r3, [pc, #208]	; (8012b00 <TIM_OC2_SetConfig+0xfc>)
 8012a30:	4013      	ands	r3, r2
 8012a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	021b      	lsls	r3, r3, #8
 8012a42:	68fa      	ldr	r2, [r7, #12]
 8012a44:	4313      	orrs	r3, r2
 8012a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	f023 0320 	bic.w	r3, r3, #32
 8012a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	689b      	ldr	r3, [r3, #8]
 8012a54:	011b      	lsls	r3, r3, #4
 8012a56:	697a      	ldr	r2, [r7, #20]
 8012a58:	4313      	orrs	r3, r2
 8012a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	4a29      	ldr	r2, [pc, #164]	; (8012b04 <TIM_OC2_SetConfig+0x100>)
 8012a60:	4293      	cmp	r3, r2
 8012a62:	d003      	beq.n	8012a6c <TIM_OC2_SetConfig+0x68>
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	4a28      	ldr	r2, [pc, #160]	; (8012b08 <TIM_OC2_SetConfig+0x104>)
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d10d      	bne.n	8012a88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	68db      	ldr	r3, [r3, #12]
 8012a78:	011b      	lsls	r3, r3, #4
 8012a7a:	697a      	ldr	r2, [r7, #20]
 8012a7c:	4313      	orrs	r3, r2
 8012a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	4a1e      	ldr	r2, [pc, #120]	; (8012b04 <TIM_OC2_SetConfig+0x100>)
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d00f      	beq.n	8012ab0 <TIM_OC2_SetConfig+0xac>
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	4a1d      	ldr	r2, [pc, #116]	; (8012b08 <TIM_OC2_SetConfig+0x104>)
 8012a94:	4293      	cmp	r3, r2
 8012a96:	d00b      	beq.n	8012ab0 <TIM_OC2_SetConfig+0xac>
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	4a1c      	ldr	r2, [pc, #112]	; (8012b0c <TIM_OC2_SetConfig+0x108>)
 8012a9c:	4293      	cmp	r3, r2
 8012a9e:	d007      	beq.n	8012ab0 <TIM_OC2_SetConfig+0xac>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	4a1b      	ldr	r2, [pc, #108]	; (8012b10 <TIM_OC2_SetConfig+0x10c>)
 8012aa4:	4293      	cmp	r3, r2
 8012aa6:	d003      	beq.n	8012ab0 <TIM_OC2_SetConfig+0xac>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	4a1a      	ldr	r2, [pc, #104]	; (8012b14 <TIM_OC2_SetConfig+0x110>)
 8012aac:	4293      	cmp	r3, r2
 8012aae:	d113      	bne.n	8012ad8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	695b      	ldr	r3, [r3, #20]
 8012ac4:	009b      	lsls	r3, r3, #2
 8012ac6:	693a      	ldr	r2, [r7, #16]
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	699b      	ldr	r3, [r3, #24]
 8012ad0:	009b      	lsls	r3, r3, #2
 8012ad2:	693a      	ldr	r2, [r7, #16]
 8012ad4:	4313      	orrs	r3, r2
 8012ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	693a      	ldr	r2, [r7, #16]
 8012adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	68fa      	ldr	r2, [r7, #12]
 8012ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	685a      	ldr	r2, [r3, #4]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	697a      	ldr	r2, [r7, #20]
 8012af0:	621a      	str	r2, [r3, #32]
}
 8012af2:	bf00      	nop
 8012af4:	371c      	adds	r7, #28
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr
 8012afe:	bf00      	nop
 8012b00:	feff8fff 	.word	0xfeff8fff
 8012b04:	40010000 	.word	0x40010000
 8012b08:	40010400 	.word	0x40010400
 8012b0c:	40014000 	.word	0x40014000
 8012b10:	40014400 	.word	0x40014400
 8012b14:	40014800 	.word	0x40014800

08012b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b087      	sub	sp, #28
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	6a1b      	ldr	r3, [r3, #32]
 8012b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6a1b      	ldr	r3, [r3, #32]
 8012b2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	69db      	ldr	r3, [r3, #28]
 8012b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012b40:	68fa      	ldr	r2, [r7, #12]
 8012b42:	4b33      	ldr	r3, [pc, #204]	; (8012c10 <TIM_OC3_SetConfig+0xf8>)
 8012b44:	4013      	ands	r3, r2
 8012b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	f023 0303 	bic.w	r3, r3, #3
 8012b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	68fa      	ldr	r2, [r7, #12]
 8012b56:	4313      	orrs	r3, r2
 8012b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	689b      	ldr	r3, [r3, #8]
 8012b66:	021b      	lsls	r3, r3, #8
 8012b68:	697a      	ldr	r2, [r7, #20]
 8012b6a:	4313      	orrs	r3, r2
 8012b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	4a28      	ldr	r2, [pc, #160]	; (8012c14 <TIM_OC3_SetConfig+0xfc>)
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d003      	beq.n	8012b7e <TIM_OC3_SetConfig+0x66>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	4a27      	ldr	r2, [pc, #156]	; (8012c18 <TIM_OC3_SetConfig+0x100>)
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	d10d      	bne.n	8012b9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012b7e:	697b      	ldr	r3, [r7, #20]
 8012b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	68db      	ldr	r3, [r3, #12]
 8012b8a:	021b      	lsls	r3, r3, #8
 8012b8c:	697a      	ldr	r2, [r7, #20]
 8012b8e:	4313      	orrs	r3, r2
 8012b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4a1d      	ldr	r2, [pc, #116]	; (8012c14 <TIM_OC3_SetConfig+0xfc>)
 8012b9e:	4293      	cmp	r3, r2
 8012ba0:	d00f      	beq.n	8012bc2 <TIM_OC3_SetConfig+0xaa>
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	4a1c      	ldr	r2, [pc, #112]	; (8012c18 <TIM_OC3_SetConfig+0x100>)
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	d00b      	beq.n	8012bc2 <TIM_OC3_SetConfig+0xaa>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4a1b      	ldr	r2, [pc, #108]	; (8012c1c <TIM_OC3_SetConfig+0x104>)
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	d007      	beq.n	8012bc2 <TIM_OC3_SetConfig+0xaa>
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	4a1a      	ldr	r2, [pc, #104]	; (8012c20 <TIM_OC3_SetConfig+0x108>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d003      	beq.n	8012bc2 <TIM_OC3_SetConfig+0xaa>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	4a19      	ldr	r2, [pc, #100]	; (8012c24 <TIM_OC3_SetConfig+0x10c>)
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d113      	bne.n	8012bea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	695b      	ldr	r3, [r3, #20]
 8012bd6:	011b      	lsls	r3, r3, #4
 8012bd8:	693a      	ldr	r2, [r7, #16]
 8012bda:	4313      	orrs	r3, r2
 8012bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	699b      	ldr	r3, [r3, #24]
 8012be2:	011b      	lsls	r3, r3, #4
 8012be4:	693a      	ldr	r2, [r7, #16]
 8012be6:	4313      	orrs	r3, r2
 8012be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	693a      	ldr	r2, [r7, #16]
 8012bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	68fa      	ldr	r2, [r7, #12]
 8012bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	685a      	ldr	r2, [r3, #4]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	697a      	ldr	r2, [r7, #20]
 8012c02:	621a      	str	r2, [r3, #32]
}
 8012c04:	bf00      	nop
 8012c06:	371c      	adds	r7, #28
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr
 8012c10:	fffeff8f 	.word	0xfffeff8f
 8012c14:	40010000 	.word	0x40010000
 8012c18:	40010400 	.word	0x40010400
 8012c1c:	40014000 	.word	0x40014000
 8012c20:	40014400 	.word	0x40014400
 8012c24:	40014800 	.word	0x40014800

08012c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012c28:	b480      	push	{r7}
 8012c2a:	b087      	sub	sp, #28
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6a1b      	ldr	r3, [r3, #32]
 8012c36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6a1b      	ldr	r3, [r3, #32]
 8012c3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	685b      	ldr	r3, [r3, #4]
 8012c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	69db      	ldr	r3, [r3, #28]
 8012c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012c50:	68fa      	ldr	r2, [r7, #12]
 8012c52:	4b24      	ldr	r3, [pc, #144]	; (8012ce4 <TIM_OC4_SetConfig+0xbc>)
 8012c54:	4013      	ands	r3, r2
 8012c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	021b      	lsls	r3, r3, #8
 8012c66:	68fa      	ldr	r2, [r7, #12]
 8012c68:	4313      	orrs	r3, r2
 8012c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012c6c:	693b      	ldr	r3, [r7, #16]
 8012c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	689b      	ldr	r3, [r3, #8]
 8012c78:	031b      	lsls	r3, r3, #12
 8012c7a:	693a      	ldr	r2, [r7, #16]
 8012c7c:	4313      	orrs	r3, r2
 8012c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	4a19      	ldr	r2, [pc, #100]	; (8012ce8 <TIM_OC4_SetConfig+0xc0>)
 8012c84:	4293      	cmp	r3, r2
 8012c86:	d00f      	beq.n	8012ca8 <TIM_OC4_SetConfig+0x80>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	4a18      	ldr	r2, [pc, #96]	; (8012cec <TIM_OC4_SetConfig+0xc4>)
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	d00b      	beq.n	8012ca8 <TIM_OC4_SetConfig+0x80>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	4a17      	ldr	r2, [pc, #92]	; (8012cf0 <TIM_OC4_SetConfig+0xc8>)
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d007      	beq.n	8012ca8 <TIM_OC4_SetConfig+0x80>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	4a16      	ldr	r2, [pc, #88]	; (8012cf4 <TIM_OC4_SetConfig+0xcc>)
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	d003      	beq.n	8012ca8 <TIM_OC4_SetConfig+0x80>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	4a15      	ldr	r2, [pc, #84]	; (8012cf8 <TIM_OC4_SetConfig+0xd0>)
 8012ca4:	4293      	cmp	r3, r2
 8012ca6:	d109      	bne.n	8012cbc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	695b      	ldr	r3, [r3, #20]
 8012cb4:	019b      	lsls	r3, r3, #6
 8012cb6:	697a      	ldr	r2, [r7, #20]
 8012cb8:	4313      	orrs	r3, r2
 8012cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	697a      	ldr	r2, [r7, #20]
 8012cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	685a      	ldr	r2, [r3, #4]
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	693a      	ldr	r2, [r7, #16]
 8012cd4:	621a      	str	r2, [r3, #32]
}
 8012cd6:	bf00      	nop
 8012cd8:	371c      	adds	r7, #28
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce0:	4770      	bx	lr
 8012ce2:	bf00      	nop
 8012ce4:	feff8fff 	.word	0xfeff8fff
 8012ce8:	40010000 	.word	0x40010000
 8012cec:	40010400 	.word	0x40010400
 8012cf0:	40014000 	.word	0x40014000
 8012cf4:	40014400 	.word	0x40014400
 8012cf8:	40014800 	.word	0x40014800

08012cfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b087      	sub	sp, #28
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6a1b      	ldr	r3, [r3, #32]
 8012d0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6a1b      	ldr	r3, [r3, #32]
 8012d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	685b      	ldr	r3, [r3, #4]
 8012d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012d24:	68fa      	ldr	r2, [r7, #12]
 8012d26:	4b21      	ldr	r3, [pc, #132]	; (8012dac <TIM_OC5_SetConfig+0xb0>)
 8012d28:	4013      	ands	r3, r2
 8012d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	68fa      	ldr	r2, [r7, #12]
 8012d32:	4313      	orrs	r3, r2
 8012d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	689b      	ldr	r3, [r3, #8]
 8012d42:	041b      	lsls	r3, r3, #16
 8012d44:	693a      	ldr	r2, [r7, #16]
 8012d46:	4313      	orrs	r3, r2
 8012d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4a18      	ldr	r2, [pc, #96]	; (8012db0 <TIM_OC5_SetConfig+0xb4>)
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d00f      	beq.n	8012d72 <TIM_OC5_SetConfig+0x76>
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	4a17      	ldr	r2, [pc, #92]	; (8012db4 <TIM_OC5_SetConfig+0xb8>)
 8012d56:	4293      	cmp	r3, r2
 8012d58:	d00b      	beq.n	8012d72 <TIM_OC5_SetConfig+0x76>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	4a16      	ldr	r2, [pc, #88]	; (8012db8 <TIM_OC5_SetConfig+0xbc>)
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	d007      	beq.n	8012d72 <TIM_OC5_SetConfig+0x76>
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	4a15      	ldr	r2, [pc, #84]	; (8012dbc <TIM_OC5_SetConfig+0xc0>)
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d003      	beq.n	8012d72 <TIM_OC5_SetConfig+0x76>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	4a14      	ldr	r2, [pc, #80]	; (8012dc0 <TIM_OC5_SetConfig+0xc4>)
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	d109      	bne.n	8012d86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012d78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	695b      	ldr	r3, [r3, #20]
 8012d7e:	021b      	lsls	r3, r3, #8
 8012d80:	697a      	ldr	r2, [r7, #20]
 8012d82:	4313      	orrs	r3, r2
 8012d84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	697a      	ldr	r2, [r7, #20]
 8012d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	68fa      	ldr	r2, [r7, #12]
 8012d90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	685a      	ldr	r2, [r3, #4]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	693a      	ldr	r2, [r7, #16]
 8012d9e:	621a      	str	r2, [r3, #32]
}
 8012da0:	bf00      	nop
 8012da2:	371c      	adds	r7, #28
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr
 8012dac:	fffeff8f 	.word	0xfffeff8f
 8012db0:	40010000 	.word	0x40010000
 8012db4:	40010400 	.word	0x40010400
 8012db8:	40014000 	.word	0x40014000
 8012dbc:	40014400 	.word	0x40014400
 8012dc0:	40014800 	.word	0x40014800

08012dc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b087      	sub	sp, #28
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
 8012dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6a1b      	ldr	r3, [r3, #32]
 8012dd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6a1b      	ldr	r3, [r3, #32]
 8012dd8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012dec:	68fa      	ldr	r2, [r7, #12]
 8012dee:	4b22      	ldr	r3, [pc, #136]	; (8012e78 <TIM_OC6_SetConfig+0xb4>)
 8012df0:	4013      	ands	r3, r2
 8012df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	021b      	lsls	r3, r3, #8
 8012dfa:	68fa      	ldr	r2, [r7, #12]
 8012dfc:	4313      	orrs	r3, r2
 8012dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	689b      	ldr	r3, [r3, #8]
 8012e0c:	051b      	lsls	r3, r3, #20
 8012e0e:	693a      	ldr	r2, [r7, #16]
 8012e10:	4313      	orrs	r3, r2
 8012e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	4a19      	ldr	r2, [pc, #100]	; (8012e7c <TIM_OC6_SetConfig+0xb8>)
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	d00f      	beq.n	8012e3c <TIM_OC6_SetConfig+0x78>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	4a18      	ldr	r2, [pc, #96]	; (8012e80 <TIM_OC6_SetConfig+0xbc>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d00b      	beq.n	8012e3c <TIM_OC6_SetConfig+0x78>
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	4a17      	ldr	r2, [pc, #92]	; (8012e84 <TIM_OC6_SetConfig+0xc0>)
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	d007      	beq.n	8012e3c <TIM_OC6_SetConfig+0x78>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	4a16      	ldr	r2, [pc, #88]	; (8012e88 <TIM_OC6_SetConfig+0xc4>)
 8012e30:	4293      	cmp	r3, r2
 8012e32:	d003      	beq.n	8012e3c <TIM_OC6_SetConfig+0x78>
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	4a15      	ldr	r2, [pc, #84]	; (8012e8c <TIM_OC6_SetConfig+0xc8>)
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d109      	bne.n	8012e50 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012e42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	695b      	ldr	r3, [r3, #20]
 8012e48:	029b      	lsls	r3, r3, #10
 8012e4a:	697a      	ldr	r2, [r7, #20]
 8012e4c:	4313      	orrs	r3, r2
 8012e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	697a      	ldr	r2, [r7, #20]
 8012e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	68fa      	ldr	r2, [r7, #12]
 8012e5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	685a      	ldr	r2, [r3, #4]
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	693a      	ldr	r2, [r7, #16]
 8012e68:	621a      	str	r2, [r3, #32]
}
 8012e6a:	bf00      	nop
 8012e6c:	371c      	adds	r7, #28
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr
 8012e76:	bf00      	nop
 8012e78:	feff8fff 	.word	0xfeff8fff
 8012e7c:	40010000 	.word	0x40010000
 8012e80:	40010400 	.word	0x40010400
 8012e84:	40014000 	.word	0x40014000
 8012e88:	40014400 	.word	0x40014400
 8012e8c:	40014800 	.word	0x40014800

08012e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012e90:	b480      	push	{r7}
 8012e92:	b087      	sub	sp, #28
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	6a1b      	ldr	r3, [r3, #32]
 8012ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	6a1b      	ldr	r3, [r3, #32]
 8012ea6:	f023 0201 	bic.w	r2, r3, #1
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	699b      	ldr	r3, [r3, #24]
 8012eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	011b      	lsls	r3, r3, #4
 8012ec0:	693a      	ldr	r2, [r7, #16]
 8012ec2:	4313      	orrs	r3, r2
 8012ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	f023 030a 	bic.w	r3, r3, #10
 8012ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012ece:	697a      	ldr	r2, [r7, #20]
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	4313      	orrs	r3, r2
 8012ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	693a      	ldr	r2, [r7, #16]
 8012eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	697a      	ldr	r2, [r7, #20]
 8012ee0:	621a      	str	r2, [r3, #32]
}
 8012ee2:	bf00      	nop
 8012ee4:	371c      	adds	r7, #28
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eec:	4770      	bx	lr

08012eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012eee:	b480      	push	{r7}
 8012ef0:	b087      	sub	sp, #28
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	60f8      	str	r0, [r7, #12]
 8012ef6:	60b9      	str	r1, [r7, #8]
 8012ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	6a1b      	ldr	r3, [r3, #32]
 8012efe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	6a1b      	ldr	r3, [r3, #32]
 8012f04:	f023 0210 	bic.w	r2, r3, #16
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	699b      	ldr	r3, [r3, #24]
 8012f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	031b      	lsls	r3, r3, #12
 8012f1e:	693a      	ldr	r2, [r7, #16]
 8012f20:	4313      	orrs	r3, r2
 8012f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	011b      	lsls	r3, r3, #4
 8012f30:	697a      	ldr	r2, [r7, #20]
 8012f32:	4313      	orrs	r3, r2
 8012f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	693a      	ldr	r2, [r7, #16]
 8012f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	697a      	ldr	r2, [r7, #20]
 8012f40:	621a      	str	r2, [r3, #32]
}
 8012f42:	bf00      	nop
 8012f44:	371c      	adds	r7, #28
 8012f46:	46bd      	mov	sp, r7
 8012f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4c:	4770      	bx	lr
	...

08012f50 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012f50:	b480      	push	{r7}
 8012f52:	b085      	sub	sp, #20
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	689b      	ldr	r3, [r3, #8]
 8012f5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012f60:	68fa      	ldr	r2, [r7, #12]
 8012f62:	4b09      	ldr	r3, [pc, #36]	; (8012f88 <TIM_ITRx_SetConfig+0x38>)
 8012f64:	4013      	ands	r3, r2
 8012f66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012f68:	683a      	ldr	r2, [r7, #0]
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	f043 0307 	orr.w	r3, r3, #7
 8012f72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	68fa      	ldr	r2, [r7, #12]
 8012f78:	609a      	str	r2, [r3, #8]
}
 8012f7a:	bf00      	nop
 8012f7c:	3714      	adds	r7, #20
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f84:	4770      	bx	lr
 8012f86:	bf00      	nop
 8012f88:	ffcfff8f 	.word	0xffcfff8f

08012f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b087      	sub	sp, #28
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
 8012f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	689b      	ldr	r3, [r3, #8]
 8012f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	021a      	lsls	r2, r3, #8
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	431a      	orrs	r2, r3
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	4313      	orrs	r3, r2
 8012fb4:	697a      	ldr	r2, [r7, #20]
 8012fb6:	4313      	orrs	r3, r2
 8012fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	697a      	ldr	r2, [r7, #20]
 8012fbe:	609a      	str	r2, [r3, #8]
}
 8012fc0:	bf00      	nop
 8012fc2:	371c      	adds	r7, #28
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr

08012fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b087      	sub	sp, #28
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	60b9      	str	r1, [r7, #8]
 8012fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	f003 031f 	and.w	r3, r3, #31
 8012fde:	2201      	movs	r2, #1
 8012fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8012fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	6a1a      	ldr	r2, [r3, #32]
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	43db      	mvns	r3, r3
 8012fee:	401a      	ands	r2, r3
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	6a1a      	ldr	r2, [r3, #32]
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	f003 031f 	and.w	r3, r3, #31
 8012ffe:	6879      	ldr	r1, [r7, #4]
 8013000:	fa01 f303 	lsl.w	r3, r1, r3
 8013004:	431a      	orrs	r2, r3
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	621a      	str	r2, [r3, #32]
}
 801300a:	bf00      	nop
 801300c:	371c      	adds	r7, #28
 801300e:	46bd      	mov	sp, r7
 8013010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013014:	4770      	bx	lr
	...

08013018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013018:	b480      	push	{r7}
 801301a:	b085      	sub	sp, #20
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013028:	2b01      	cmp	r3, #1
 801302a:	d101      	bne.n	8013030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801302c:	2302      	movs	r3, #2
 801302e:	e06d      	b.n	801310c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2201      	movs	r2, #1
 8013034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2202      	movs	r2, #2
 801303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	689b      	ldr	r3, [r3, #8]
 801304e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	4a30      	ldr	r2, [pc, #192]	; (8013118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013056:	4293      	cmp	r3, r2
 8013058:	d004      	beq.n	8013064 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	4a2f      	ldr	r2, [pc, #188]	; (801311c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013060:	4293      	cmp	r3, r2
 8013062:	d108      	bne.n	8013076 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801306a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	68fa      	ldr	r2, [r7, #12]
 8013072:	4313      	orrs	r3, r2
 8013074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801307c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	68fa      	ldr	r2, [r7, #12]
 8013084:	4313      	orrs	r3, r2
 8013086:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	68fa      	ldr	r2, [r7, #12]
 801308e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4a20      	ldr	r2, [pc, #128]	; (8013118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013096:	4293      	cmp	r3, r2
 8013098:	d022      	beq.n	80130e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130a2:	d01d      	beq.n	80130e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	4a1d      	ldr	r2, [pc, #116]	; (8013120 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80130aa:	4293      	cmp	r3, r2
 80130ac:	d018      	beq.n	80130e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	4a1c      	ldr	r2, [pc, #112]	; (8013124 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80130b4:	4293      	cmp	r3, r2
 80130b6:	d013      	beq.n	80130e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	4a1a      	ldr	r2, [pc, #104]	; (8013128 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80130be:	4293      	cmp	r3, r2
 80130c0:	d00e      	beq.n	80130e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	4a15      	ldr	r2, [pc, #84]	; (801311c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80130c8:	4293      	cmp	r3, r2
 80130ca:	d009      	beq.n	80130e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4a16      	ldr	r2, [pc, #88]	; (801312c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d004      	beq.n	80130e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	4a15      	ldr	r2, [pc, #84]	; (8013130 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80130dc:	4293      	cmp	r3, r2
 80130de:	d10c      	bne.n	80130fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80130e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	689b      	ldr	r3, [r3, #8]
 80130ec:	68ba      	ldr	r2, [r7, #8]
 80130ee:	4313      	orrs	r3, r2
 80130f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	68ba      	ldr	r2, [r7, #8]
 80130f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2201      	movs	r2, #1
 80130fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2200      	movs	r2, #0
 8013106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801310a:	2300      	movs	r3, #0
}
 801310c:	4618      	mov	r0, r3
 801310e:	3714      	adds	r7, #20
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr
 8013118:	40010000 	.word	0x40010000
 801311c:	40010400 	.word	0x40010400
 8013120:	40000400 	.word	0x40000400
 8013124:	40000800 	.word	0x40000800
 8013128:	40000c00 	.word	0x40000c00
 801312c:	40001800 	.word	0x40001800
 8013130:	40014000 	.word	0x40014000

08013134 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013134:	b480      	push	{r7}
 8013136:	b085      	sub	sp, #20
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801313e:	2300      	movs	r3, #0
 8013140:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013148:	2b01      	cmp	r3, #1
 801314a:	d101      	bne.n	8013150 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801314c:	2302      	movs	r3, #2
 801314e:	e065      	b.n	801321c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2201      	movs	r2, #1
 8013154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	4313      	orrs	r3, r2
 8013164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	689b      	ldr	r3, [r3, #8]
 8013170:	4313      	orrs	r3, r2
 8013172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	4313      	orrs	r3, r2
 8013180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4313      	orrs	r3, r2
 801318e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	691b      	ldr	r3, [r3, #16]
 801319a:	4313      	orrs	r3, r2
 801319c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	695b      	ldr	r3, [r3, #20]
 80131a8:	4313      	orrs	r3, r2
 80131aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131b6:	4313      	orrs	r3, r2
 80131b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	699b      	ldr	r3, [r3, #24]
 80131c4:	041b      	lsls	r3, r3, #16
 80131c6:	4313      	orrs	r3, r2
 80131c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4a16      	ldr	r2, [pc, #88]	; (8013228 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d004      	beq.n	80131de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	4a14      	ldr	r2, [pc, #80]	; (801322c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80131da:	4293      	cmp	r3, r2
 80131dc:	d115      	bne.n	801320a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131e8:	051b      	lsls	r3, r3, #20
 80131ea:	4313      	orrs	r3, r2
 80131ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	69db      	ldr	r3, [r3, #28]
 80131f8:	4313      	orrs	r3, r2
 80131fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	6a1b      	ldr	r3, [r3, #32]
 8013206:	4313      	orrs	r3, r2
 8013208:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	68fa      	ldr	r2, [r7, #12]
 8013210:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2200      	movs	r2, #0
 8013216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801321a:	2300      	movs	r3, #0
}
 801321c:	4618      	mov	r0, r3
 801321e:	3714      	adds	r7, #20
 8013220:	46bd      	mov	sp, r7
 8013222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013226:	4770      	bx	lr
 8013228:	40010000 	.word	0x40010000
 801322c:	40010400 	.word	0x40010400

08013230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013230:	b480      	push	{r7}
 8013232:	b083      	sub	sp, #12
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013238:	bf00      	nop
 801323a:	370c      	adds	r7, #12
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr

08013244 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013244:	b480      	push	{r7}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801324c:	bf00      	nop
 801324e:	370c      	adds	r7, #12
 8013250:	46bd      	mov	sp, r7
 8013252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013256:	4770      	bx	lr

08013258 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013258:	b480      	push	{r7}
 801325a:	b083      	sub	sp, #12
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013260:	bf00      	nop
 8013262:	370c      	adds	r7, #12
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr

0801326c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b082      	sub	sp, #8
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d101      	bne.n	801327e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801327a:	2301      	movs	r3, #1
 801327c:	e042      	b.n	8013304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013284:	2b00      	cmp	r3, #0
 8013286:	d106      	bne.n	8013296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2200      	movs	r2, #0
 801328c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f7f1 f939 	bl	8004508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2224      	movs	r2, #36	; 0x24
 801329a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	681a      	ldr	r2, [r3, #0]
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	f022 0201 	bic.w	r2, r2, #1
 80132ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d002      	beq.n	80132bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f001 fbc2 	bl	8014a40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f000 fe57 	bl	8013f70 <UART_SetConfig>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b01      	cmp	r3, #1
 80132c6:	d101      	bne.n	80132cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80132c8:	2301      	movs	r3, #1
 80132ca:	e01b      	b.n	8013304 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	685a      	ldr	r2, [r3, #4]
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80132da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	689a      	ldr	r2, [r3, #8]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80132ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f042 0201 	orr.w	r2, r2, #1
 80132fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f001 fc41 	bl	8014b84 <UART_CheckIdleState>
 8013302:	4603      	mov	r3, r0
}
 8013304:	4618      	mov	r0, r3
 8013306:	3708      	adds	r7, #8
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b08a      	sub	sp, #40	; 0x28
 8013310:	af02      	add	r7, sp, #8
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	603b      	str	r3, [r7, #0]
 8013318:	4613      	mov	r3, r2
 801331a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013322:	2b20      	cmp	r3, #32
 8013324:	d17b      	bne.n	801341e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d002      	beq.n	8013332 <HAL_UART_Transmit+0x26>
 801332c:	88fb      	ldrh	r3, [r7, #6]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d101      	bne.n	8013336 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013332:	2301      	movs	r3, #1
 8013334:	e074      	b.n	8013420 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	2200      	movs	r2, #0
 801333a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2221      	movs	r2, #33	; 0x21
 8013342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013346:	f7f1 fd2d 	bl	8004da4 <HAL_GetTick>
 801334a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	88fa      	ldrh	r2, [r7, #6]
 8013350:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	88fa      	ldrh	r2, [r7, #6]
 8013358:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	689b      	ldr	r3, [r3, #8]
 8013360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013364:	d108      	bne.n	8013378 <HAL_UART_Transmit+0x6c>
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	691b      	ldr	r3, [r3, #16]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d104      	bne.n	8013378 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801336e:	2300      	movs	r3, #0
 8013370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	61bb      	str	r3, [r7, #24]
 8013376:	e003      	b.n	8013380 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801337c:	2300      	movs	r3, #0
 801337e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013380:	e030      	b.n	80133e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013382:	683b      	ldr	r3, [r7, #0]
 8013384:	9300      	str	r3, [sp, #0]
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	2200      	movs	r2, #0
 801338a:	2180      	movs	r1, #128	; 0x80
 801338c:	68f8      	ldr	r0, [r7, #12]
 801338e:	f001 fca3 	bl	8014cd8 <UART_WaitOnFlagUntilTimeout>
 8013392:	4603      	mov	r3, r0
 8013394:	2b00      	cmp	r3, #0
 8013396:	d005      	beq.n	80133a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2220      	movs	r2, #32
 801339c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80133a0:	2303      	movs	r3, #3
 80133a2:	e03d      	b.n	8013420 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80133a4:	69fb      	ldr	r3, [r7, #28]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d10b      	bne.n	80133c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80133aa:	69bb      	ldr	r3, [r7, #24]
 80133ac:	881b      	ldrh	r3, [r3, #0]
 80133ae:	461a      	mov	r2, r3
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80133b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	3302      	adds	r3, #2
 80133be:	61bb      	str	r3, [r7, #24]
 80133c0:	e007      	b.n	80133d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	781a      	ldrb	r2, [r3, #0]
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80133cc:	69fb      	ldr	r3, [r7, #28]
 80133ce:	3301      	adds	r3, #1
 80133d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80133d8:	b29b      	uxth	r3, r3
 80133da:	3b01      	subs	r3, #1
 80133dc:	b29a      	uxth	r2, r3
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d1c8      	bne.n	8013382 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	9300      	str	r3, [sp, #0]
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	2200      	movs	r2, #0
 80133f8:	2140      	movs	r1, #64	; 0x40
 80133fa:	68f8      	ldr	r0, [r7, #12]
 80133fc:	f001 fc6c 	bl	8014cd8 <UART_WaitOnFlagUntilTimeout>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d005      	beq.n	8013412 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2220      	movs	r2, #32
 801340a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801340e:	2303      	movs	r3, #3
 8013410:	e006      	b.n	8013420 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	2220      	movs	r2, #32
 8013416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801341a:	2300      	movs	r3, #0
 801341c:	e000      	b.n	8013420 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801341e:	2302      	movs	r3, #2
  }
}
 8013420:	4618      	mov	r0, r3
 8013422:	3720      	adds	r7, #32
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}

08013428 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b08a      	sub	sp, #40	; 0x28
 801342c:	af02      	add	r7, sp, #8
 801342e:	60f8      	str	r0, [r7, #12]
 8013430:	60b9      	str	r1, [r7, #8]
 8013432:	603b      	str	r3, [r7, #0]
 8013434:	4613      	mov	r3, r2
 8013436:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801343e:	2b20      	cmp	r3, #32
 8013440:	f040 80b5 	bne.w	80135ae <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d002      	beq.n	8013450 <HAL_UART_Receive+0x28>
 801344a:	88fb      	ldrh	r3, [r7, #6]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d101      	bne.n	8013454 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8013450:	2301      	movs	r3, #1
 8013452:	e0ad      	b.n	80135b0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2200      	movs	r2, #0
 8013458:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2222      	movs	r2, #34	; 0x22
 8013460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	2200      	movs	r2, #0
 8013468:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801346a:	f7f1 fc9b 	bl	8004da4 <HAL_GetTick>
 801346e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	88fa      	ldrh	r2, [r7, #6]
 8013474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	88fa      	ldrh	r2, [r7, #6]
 801347c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	689b      	ldr	r3, [r3, #8]
 8013484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013488:	d10e      	bne.n	80134a8 <HAL_UART_Receive+0x80>
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	691b      	ldr	r3, [r3, #16]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d105      	bne.n	801349e <HAL_UART_Receive+0x76>
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801349c:	e02d      	b.n	80134fa <HAL_UART_Receive+0xd2>
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	22ff      	movs	r2, #255	; 0xff
 80134a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80134a6:	e028      	b.n	80134fa <HAL_UART_Receive+0xd2>
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	689b      	ldr	r3, [r3, #8]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d10d      	bne.n	80134cc <HAL_UART_Receive+0xa4>
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	691b      	ldr	r3, [r3, #16]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d104      	bne.n	80134c2 <HAL_UART_Receive+0x9a>
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	22ff      	movs	r2, #255	; 0xff
 80134bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80134c0:	e01b      	b.n	80134fa <HAL_UART_Receive+0xd2>
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	227f      	movs	r2, #127	; 0x7f
 80134c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80134ca:	e016      	b.n	80134fa <HAL_UART_Receive+0xd2>
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	689b      	ldr	r3, [r3, #8]
 80134d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80134d4:	d10d      	bne.n	80134f2 <HAL_UART_Receive+0xca>
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	691b      	ldr	r3, [r3, #16]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d104      	bne.n	80134e8 <HAL_UART_Receive+0xc0>
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	227f      	movs	r2, #127	; 0x7f
 80134e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80134e6:	e008      	b.n	80134fa <HAL_UART_Receive+0xd2>
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	223f      	movs	r2, #63	; 0x3f
 80134ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80134f0:	e003      	b.n	80134fa <HAL_UART_Receive+0xd2>
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2200      	movs	r2, #0
 80134f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013500:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	689b      	ldr	r3, [r3, #8]
 8013506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801350a:	d108      	bne.n	801351e <HAL_UART_Receive+0xf6>
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	691b      	ldr	r3, [r3, #16]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d104      	bne.n	801351e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8013514:	2300      	movs	r3, #0
 8013516:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	61bb      	str	r3, [r7, #24]
 801351c:	e003      	b.n	8013526 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801351e:	68bb      	ldr	r3, [r7, #8]
 8013520:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013522:	2300      	movs	r3, #0
 8013524:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8013526:	e036      	b.n	8013596 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	9300      	str	r3, [sp, #0]
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	2200      	movs	r2, #0
 8013530:	2120      	movs	r1, #32
 8013532:	68f8      	ldr	r0, [r7, #12]
 8013534:	f001 fbd0 	bl	8014cd8 <UART_WaitOnFlagUntilTimeout>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d005      	beq.n	801354a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	2220      	movs	r2, #32
 8013542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8013546:	2303      	movs	r3, #3
 8013548:	e032      	b.n	80135b0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d10c      	bne.n	801356a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013556:	b29a      	uxth	r2, r3
 8013558:	8a7b      	ldrh	r3, [r7, #18]
 801355a:	4013      	ands	r3, r2
 801355c:	b29a      	uxth	r2, r3
 801355e:	69bb      	ldr	r3, [r7, #24]
 8013560:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8013562:	69bb      	ldr	r3, [r7, #24]
 8013564:	3302      	adds	r3, #2
 8013566:	61bb      	str	r3, [r7, #24]
 8013568:	e00c      	b.n	8013584 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013570:	b2da      	uxtb	r2, r3
 8013572:	8a7b      	ldrh	r3, [r7, #18]
 8013574:	b2db      	uxtb	r3, r3
 8013576:	4013      	ands	r3, r2
 8013578:	b2da      	uxtb	r2, r3
 801357a:	69fb      	ldr	r3, [r7, #28]
 801357c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801357e:	69fb      	ldr	r3, [r7, #28]
 8013580:	3301      	adds	r3, #1
 8013582:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801358a:	b29b      	uxth	r3, r3
 801358c:	3b01      	subs	r3, #1
 801358e:	b29a      	uxth	r2, r3
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801359c:	b29b      	uxth	r3, r3
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d1c2      	bne.n	8013528 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2220      	movs	r2, #32
 80135a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80135aa:	2300      	movs	r3, #0
 80135ac:	e000      	b.n	80135b0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80135ae:	2302      	movs	r3, #2
  }
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	3720      	adds	r7, #32
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}

080135b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b08a      	sub	sp, #40	; 0x28
 80135bc:	af00      	add	r7, sp, #0
 80135be:	60f8      	str	r0, [r7, #12]
 80135c0:	60b9      	str	r1, [r7, #8]
 80135c2:	4613      	mov	r3, r2
 80135c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80135cc:	2b20      	cmp	r3, #32
 80135ce:	d137      	bne.n	8013640 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d002      	beq.n	80135dc <HAL_UART_Receive_IT+0x24>
 80135d6:	88fb      	ldrh	r3, [r7, #6]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d101      	bne.n	80135e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80135dc:	2301      	movs	r3, #1
 80135de:	e030      	b.n	8013642 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	2200      	movs	r2, #0
 80135e4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	4a18      	ldr	r2, [pc, #96]	; (801364c <HAL_UART_Receive_IT+0x94>)
 80135ec:	4293      	cmp	r3, r2
 80135ee:	d01f      	beq.n	8013630 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	685b      	ldr	r3, [r3, #4]
 80135f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d018      	beq.n	8013630 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	e853 3f00 	ldrex	r3, [r3]
 801360a:	613b      	str	r3, [r7, #16]
   return(result);
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013612:	627b      	str	r3, [r7, #36]	; 0x24
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	461a      	mov	r2, r3
 801361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361c:	623b      	str	r3, [r7, #32]
 801361e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013620:	69f9      	ldr	r1, [r7, #28]
 8013622:	6a3a      	ldr	r2, [r7, #32]
 8013624:	e841 2300 	strex	r3, r2, [r1]
 8013628:	61bb      	str	r3, [r7, #24]
   return(result);
 801362a:	69bb      	ldr	r3, [r7, #24]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d1e6      	bne.n	80135fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013630:	88fb      	ldrh	r3, [r7, #6]
 8013632:	461a      	mov	r2, r3
 8013634:	68b9      	ldr	r1, [r7, #8]
 8013636:	68f8      	ldr	r0, [r7, #12]
 8013638:	f001 fbbc 	bl	8014db4 <UART_Start_Receive_IT>
 801363c:	4603      	mov	r3, r0
 801363e:	e000      	b.n	8013642 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013640:	2302      	movs	r3, #2
  }
}
 8013642:	4618      	mov	r0, r3
 8013644:	3728      	adds	r7, #40	; 0x28
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
 801364a:	bf00      	nop
 801364c:	58000c00 	.word	0x58000c00

08013650 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b09a      	sub	sp, #104	; 0x68
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801365e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013660:	e853 3f00 	ldrex	r3, [r3]
 8013664:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801366c:	667b      	str	r3, [r7, #100]	; 0x64
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	461a      	mov	r2, r3
 8013674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013676:	657b      	str	r3, [r7, #84]	; 0x54
 8013678:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801367a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801367c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801367e:	e841 2300 	strex	r3, r2, [r1]
 8013682:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013686:	2b00      	cmp	r3, #0
 8013688:	d1e6      	bne.n	8013658 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	3308      	adds	r3, #8
 8013690:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013694:	e853 3f00 	ldrex	r3, [r3]
 8013698:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801369a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801369c:	4b46      	ldr	r3, [pc, #280]	; (80137b8 <HAL_UART_AbortReceive+0x168>)
 801369e:	4013      	ands	r3, r2
 80136a0:	663b      	str	r3, [r7, #96]	; 0x60
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	3308      	adds	r3, #8
 80136a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80136aa:	643a      	str	r2, [r7, #64]	; 0x40
 80136ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80136b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80136b2:	e841 2300 	strex	r3, r2, [r1]
 80136b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80136b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d1e5      	bne.n	801368a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136c2:	2b01      	cmp	r3, #1
 80136c4:	d118      	bne.n	80136f8 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136cc:	6a3b      	ldr	r3, [r7, #32]
 80136ce:	e853 3f00 	ldrex	r3, [r3]
 80136d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	f023 0310 	bic.w	r3, r3, #16
 80136da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	461a      	mov	r2, r3
 80136e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80136e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80136ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ec:	e841 2300 	strex	r3, r2, [r1]
 80136f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80136f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d1e6      	bne.n	80136c6 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	689b      	ldr	r3, [r3, #8]
 80136fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013702:	2b40      	cmp	r3, #64	; 0x40
 8013704:	d13b      	bne.n	801377e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	3308      	adds	r3, #8
 801370c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	e853 3f00 	ldrex	r3, [r3]
 8013714:	60bb      	str	r3, [r7, #8]
   return(result);
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801371c:	65bb      	str	r3, [r7, #88]	; 0x58
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	3308      	adds	r3, #8
 8013724:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013726:	61ba      	str	r2, [r7, #24]
 8013728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801372a:	6979      	ldr	r1, [r7, #20]
 801372c:	69ba      	ldr	r2, [r7, #24]
 801372e:	e841 2300 	strex	r3, r2, [r1]
 8013732:	613b      	str	r3, [r7, #16]
   return(result);
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d1e5      	bne.n	8013706 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013740:	2b00      	cmp	r3, #0
 8013742:	d01c      	beq.n	801377e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801374a:	2200      	movs	r2, #0
 801374c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013754:	4618      	mov	r0, r3
 8013756:	f7f4 fa13 	bl	8007b80 <HAL_DMA_Abort>
 801375a:	4603      	mov	r3, r0
 801375c:	2b00      	cmp	r3, #0
 801375e:	d00e      	beq.n	801377e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013766:	4618      	mov	r0, r3
 8013768:	f7f5 fea6 	bl	80094b8 <HAL_DMA_GetError>
 801376c:	4603      	mov	r3, r0
 801376e:	2b20      	cmp	r3, #32
 8013770:	d105      	bne.n	801377e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2210      	movs	r2, #16
 8013776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801377a:	2303      	movs	r3, #3
 801377c:	e017      	b.n	80137ae <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2200      	movs	r2, #0
 8013782:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	220f      	movs	r2, #15
 801378c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	699a      	ldr	r2, [r3, #24]
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f042 0208 	orr.w	r2, r2, #8
 801379c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2220      	movs	r2, #32
 80137a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2200      	movs	r2, #0
 80137aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3768      	adds	r7, #104	; 0x68
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	effffffe 	.word	0xeffffffe

080137bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b0ba      	sub	sp, #232	; 0xe8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	69db      	ldr	r3, [r3, #28]
 80137ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	689b      	ldr	r3, [r3, #8]
 80137de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80137e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80137e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80137ea:	4013      	ands	r3, r2
 80137ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80137f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d11b      	bne.n	8013830 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80137f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137fc:	f003 0320 	and.w	r3, r3, #32
 8013800:	2b00      	cmp	r3, #0
 8013802:	d015      	beq.n	8013830 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013808:	f003 0320 	and.w	r3, r3, #32
 801380c:	2b00      	cmp	r3, #0
 801380e:	d105      	bne.n	801381c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013818:	2b00      	cmp	r3, #0
 801381a:	d009      	beq.n	8013830 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013820:	2b00      	cmp	r3, #0
 8013822:	f000 8377 	beq.w	8013f14 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	4798      	blx	r3
      }
      return;
 801382e:	e371      	b.n	8013f14 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013834:	2b00      	cmp	r3, #0
 8013836:	f000 8123 	beq.w	8013a80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801383a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801383e:	4b8d      	ldr	r3, [pc, #564]	; (8013a74 <HAL_UART_IRQHandler+0x2b8>)
 8013840:	4013      	ands	r3, r2
 8013842:	2b00      	cmp	r3, #0
 8013844:	d106      	bne.n	8013854 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013846:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801384a:	4b8b      	ldr	r3, [pc, #556]	; (8013a78 <HAL_UART_IRQHandler+0x2bc>)
 801384c:	4013      	ands	r3, r2
 801384e:	2b00      	cmp	r3, #0
 8013850:	f000 8116 	beq.w	8013a80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013858:	f003 0301 	and.w	r3, r3, #1
 801385c:	2b00      	cmp	r3, #0
 801385e:	d011      	beq.n	8013884 <HAL_UART_IRQHandler+0xc8>
 8013860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013868:	2b00      	cmp	r3, #0
 801386a:	d00b      	beq.n	8013884 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	2201      	movs	r2, #1
 8013872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801387a:	f043 0201 	orr.w	r2, r3, #1
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013888:	f003 0302 	and.w	r3, r3, #2
 801388c:	2b00      	cmp	r3, #0
 801388e:	d011      	beq.n	80138b4 <HAL_UART_IRQHandler+0xf8>
 8013890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013894:	f003 0301 	and.w	r3, r3, #1
 8013898:	2b00      	cmp	r3, #0
 801389a:	d00b      	beq.n	80138b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2202      	movs	r2, #2
 80138a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138aa:	f043 0204 	orr.w	r2, r3, #4
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80138b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80138b8:	f003 0304 	and.w	r3, r3, #4
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d011      	beq.n	80138e4 <HAL_UART_IRQHandler+0x128>
 80138c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80138c4:	f003 0301 	and.w	r3, r3, #1
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d00b      	beq.n	80138e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	2204      	movs	r2, #4
 80138d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138da:	f043 0202 	orr.w	r2, r3, #2
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80138e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80138e8:	f003 0308 	and.w	r3, r3, #8
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d017      	beq.n	8013920 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80138f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80138f4:	f003 0320 	and.w	r3, r3, #32
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d105      	bne.n	8013908 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80138fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013900:	4b5c      	ldr	r3, [pc, #368]	; (8013a74 <HAL_UART_IRQHandler+0x2b8>)
 8013902:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013904:	2b00      	cmp	r3, #0
 8013906:	d00b      	beq.n	8013920 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	2208      	movs	r2, #8
 801390e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013916:	f043 0208 	orr.w	r2, r3, #8
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013928:	2b00      	cmp	r3, #0
 801392a:	d012      	beq.n	8013952 <HAL_UART_IRQHandler+0x196>
 801392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013934:	2b00      	cmp	r3, #0
 8013936:	d00c      	beq.n	8013952 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013948:	f043 0220 	orr.w	r2, r3, #32
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013958:	2b00      	cmp	r3, #0
 801395a:	f000 82dd 	beq.w	8013f18 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013962:	f003 0320 	and.w	r3, r3, #32
 8013966:	2b00      	cmp	r3, #0
 8013968:	d013      	beq.n	8013992 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801396a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801396e:	f003 0320 	and.w	r3, r3, #32
 8013972:	2b00      	cmp	r3, #0
 8013974:	d105      	bne.n	8013982 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801397e:	2b00      	cmp	r3, #0
 8013980:	d007      	beq.n	8013992 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013986:	2b00      	cmp	r3, #0
 8013988:	d003      	beq.n	8013992 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801398e:	6878      	ldr	r0, [r7, #4]
 8013990:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	689b      	ldr	r3, [r3, #8]
 80139a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139a6:	2b40      	cmp	r3, #64	; 0x40
 80139a8:	d005      	beq.n	80139b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80139aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80139ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d054      	beq.n	8013a60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f001 fb1e 	bl	8014ff8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	689b      	ldr	r3, [r3, #8]
 80139c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139c6:	2b40      	cmp	r3, #64	; 0x40
 80139c8:	d146      	bne.n	8013a58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	3308      	adds	r3, #8
 80139d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80139d8:	e853 3f00 	ldrex	r3, [r3]
 80139dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80139e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80139e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80139e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	3308      	adds	r3, #8
 80139f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80139f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80139fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8013a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013a06:	e841 2300 	strex	r3, r2, [r1]
 8013a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8013a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d1d9      	bne.n	80139ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d017      	beq.n	8013a50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a26:	4a15      	ldr	r2, [pc, #84]	; (8013a7c <HAL_UART_IRQHandler+0x2c0>)
 8013a28:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7f4 fbc3 	bl	80081bc <HAL_DMA_Abort_IT>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d019      	beq.n	8013a70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a44:	687a      	ldr	r2, [r7, #4]
 8013a46:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8013a4a:	4610      	mov	r0, r2
 8013a4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a4e:	e00f      	b.n	8013a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f000 fa77 	bl	8013f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a56:	e00b      	b.n	8013a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f000 fa73 	bl	8013f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a5e:	e007      	b.n	8013a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f000 fa6f 	bl	8013f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2200      	movs	r2, #0
 8013a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8013a6e:	e253      	b.n	8013f18 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013a70:	bf00      	nop
    return;
 8013a72:	e251      	b.n	8013f18 <HAL_UART_IRQHandler+0x75c>
 8013a74:	10000001 	.word	0x10000001
 8013a78:	04000120 	.word	0x04000120
 8013a7c:	080150c5 	.word	0x080150c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	f040 81e7 	bne.w	8013e58 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013a8e:	f003 0310 	and.w	r3, r3, #16
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	f000 81e0 	beq.w	8013e58 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013a9c:	f003 0310 	and.w	r3, r3, #16
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	f000 81d9 	beq.w	8013e58 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	2210      	movs	r2, #16
 8013aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	689b      	ldr	r3, [r3, #8]
 8013ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ab8:	2b40      	cmp	r3, #64	; 0x40
 8013aba:	f040 8151 	bne.w	8013d60 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	4a96      	ldr	r2, [pc, #600]	; (8013d20 <HAL_UART_IRQHandler+0x564>)
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	d068      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	4a93      	ldr	r2, [pc, #588]	; (8013d24 <HAL_UART_IRQHandler+0x568>)
 8013ad6:	4293      	cmp	r3, r2
 8013ad8:	d061      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	4a91      	ldr	r2, [pc, #580]	; (8013d28 <HAL_UART_IRQHandler+0x56c>)
 8013ae4:	4293      	cmp	r3, r2
 8013ae6:	d05a      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4a8e      	ldr	r2, [pc, #568]	; (8013d2c <HAL_UART_IRQHandler+0x570>)
 8013af2:	4293      	cmp	r3, r2
 8013af4:	d053      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	4a8c      	ldr	r2, [pc, #560]	; (8013d30 <HAL_UART_IRQHandler+0x574>)
 8013b00:	4293      	cmp	r3, r2
 8013b02:	d04c      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	4a89      	ldr	r2, [pc, #548]	; (8013d34 <HAL_UART_IRQHandler+0x578>)
 8013b0e:	4293      	cmp	r3, r2
 8013b10:	d045      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	4a87      	ldr	r2, [pc, #540]	; (8013d38 <HAL_UART_IRQHandler+0x57c>)
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	d03e      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	4a84      	ldr	r2, [pc, #528]	; (8013d3c <HAL_UART_IRQHandler+0x580>)
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d037      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	4a82      	ldr	r2, [pc, #520]	; (8013d40 <HAL_UART_IRQHandler+0x584>)
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d030      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	4a7f      	ldr	r2, [pc, #508]	; (8013d44 <HAL_UART_IRQHandler+0x588>)
 8013b46:	4293      	cmp	r3, r2
 8013b48:	d029      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	4a7d      	ldr	r2, [pc, #500]	; (8013d48 <HAL_UART_IRQHandler+0x58c>)
 8013b54:	4293      	cmp	r3, r2
 8013b56:	d022      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	4a7a      	ldr	r2, [pc, #488]	; (8013d4c <HAL_UART_IRQHandler+0x590>)
 8013b62:	4293      	cmp	r3, r2
 8013b64:	d01b      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	4a78      	ldr	r2, [pc, #480]	; (8013d50 <HAL_UART_IRQHandler+0x594>)
 8013b70:	4293      	cmp	r3, r2
 8013b72:	d014      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	4a75      	ldr	r2, [pc, #468]	; (8013d54 <HAL_UART_IRQHandler+0x598>)
 8013b7e:	4293      	cmp	r3, r2
 8013b80:	d00d      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	4a73      	ldr	r2, [pc, #460]	; (8013d58 <HAL_UART_IRQHandler+0x59c>)
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d006      	beq.n	8013b9e <HAL_UART_IRQHandler+0x3e2>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4a70      	ldr	r2, [pc, #448]	; (8013d5c <HAL_UART_IRQHandler+0x5a0>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d106      	bne.n	8013bac <HAL_UART_IRQHandler+0x3f0>
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	b29b      	uxth	r3, r3
 8013baa:	e005      	b.n	8013bb8 <HAL_UART_IRQHandler+0x3fc>
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	685b      	ldr	r3, [r3, #4]
 8013bb6:	b29b      	uxth	r3, r3
 8013bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	f000 81ab 	beq.w	8013f1c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013bcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	f080 81a3 	bcs.w	8013f1c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013be6:	69db      	ldr	r3, [r3, #28]
 8013be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013bec:	f000 8087 	beq.w	8013cfe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013bfc:	e853 3f00 	ldrex	r3, [r3]
 8013c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8013c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	461a      	mov	r2, r3
 8013c16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013c1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013c2a:	e841 2300 	strex	r3, r2, [r1]
 8013c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8013c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d1da      	bne.n	8013bf0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	3308      	adds	r3, #8
 8013c40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013c44:	e853 3f00 	ldrex	r3, [r3]
 8013c48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8013c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c4c:	f023 0301 	bic.w	r3, r3, #1
 8013c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	3308      	adds	r3, #8
 8013c5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013c5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8013c62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013c66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013c6a:	e841 2300 	strex	r3, r2, [r1]
 8013c6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8013c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d1e1      	bne.n	8013c3a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	3308      	adds	r3, #8
 8013c7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c80:	e853 3f00 	ldrex	r3, [r3]
 8013c84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	3308      	adds	r3, #8
 8013c96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013c9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8013c9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013ca0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013ca2:	e841 2300 	strex	r3, r2, [r1]
 8013ca6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8013ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d1e3      	bne.n	8013c76 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2220      	movs	r2, #32
 8013cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2200      	movs	r2, #0
 8013cba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cc4:	e853 3f00 	ldrex	r3, [r3]
 8013cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ccc:	f023 0310 	bic.w	r3, r3, #16
 8013cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	461a      	mov	r2, r3
 8013cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013cde:	65bb      	str	r3, [r7, #88]	; 0x58
 8013ce0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ce2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013ce6:	e841 2300 	strex	r3, r2, [r1]
 8013cea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d1e4      	bne.n	8013cbc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7f3 ff41 	bl	8007b80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2202      	movs	r2, #2
 8013d02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	b29b      	uxth	r3, r3
 8013d16:	4619      	mov	r1, r3
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f000 f91d 	bl	8013f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013d1e:	e0fd      	b.n	8013f1c <HAL_UART_IRQHandler+0x760>
 8013d20:	40020010 	.word	0x40020010
 8013d24:	40020028 	.word	0x40020028
 8013d28:	40020040 	.word	0x40020040
 8013d2c:	40020058 	.word	0x40020058
 8013d30:	40020070 	.word	0x40020070
 8013d34:	40020088 	.word	0x40020088
 8013d38:	400200a0 	.word	0x400200a0
 8013d3c:	400200b8 	.word	0x400200b8
 8013d40:	40020410 	.word	0x40020410
 8013d44:	40020428 	.word	0x40020428
 8013d48:	40020440 	.word	0x40020440
 8013d4c:	40020458 	.word	0x40020458
 8013d50:	40020470 	.word	0x40020470
 8013d54:	40020488 	.word	0x40020488
 8013d58:	400204a0 	.word	0x400204a0
 8013d5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013d6c:	b29b      	uxth	r3, r3
 8013d6e:	1ad3      	subs	r3, r2, r3
 8013d70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f000 80cf 	beq.w	8013f20 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8013d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	f000 80ca 	beq.w	8013f20 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d94:	e853 3f00 	ldrex	r3, [r3]
 8013d98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	461a      	mov	r2, r3
 8013daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013dae:	647b      	str	r3, [r7, #68]	; 0x44
 8013db0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013db6:	e841 2300 	strex	r3, r2, [r1]
 8013dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d1e4      	bne.n	8013d8c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	3308      	adds	r3, #8
 8013dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dcc:	e853 3f00 	ldrex	r3, [r3]
 8013dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8013dd2:	6a3a      	ldr	r2, [r7, #32]
 8013dd4:	4b55      	ldr	r3, [pc, #340]	; (8013f2c <HAL_UART_IRQHandler+0x770>)
 8013dd6:	4013      	ands	r3, r2
 8013dd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	3308      	adds	r3, #8
 8013de2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013de6:	633a      	str	r2, [r7, #48]	; 0x30
 8013de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013dee:	e841 2300 	strex	r3, r2, [r1]
 8013df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d1e3      	bne.n	8013dc2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2220      	movs	r2, #32
 8013dfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2200      	movs	r2, #0
 8013e06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	e853 3f00 	ldrex	r3, [r3]
 8013e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	f023 0310 	bic.w	r3, r3, #16
 8013e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	461a      	mov	r2, r3
 8013e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e30:	61fb      	str	r3, [r7, #28]
 8013e32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e34:	69b9      	ldr	r1, [r7, #24]
 8013e36:	69fa      	ldr	r2, [r7, #28]
 8013e38:	e841 2300 	strex	r3, r2, [r1]
 8013e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d1e4      	bne.n	8013e0e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2202      	movs	r2, #2
 8013e48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013e4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013e4e:	4619      	mov	r1, r3
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f000 f881 	bl	8013f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013e56:	e063      	b.n	8013f20 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d00e      	beq.n	8013e82 <HAL_UART_IRQHandler+0x6c6>
 8013e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d008      	beq.n	8013e82 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013e78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f001 fe80 	bl	8015b80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013e80:	e051      	b.n	8013f26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d014      	beq.n	8013eb8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d105      	bne.n	8013ea6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d008      	beq.n	8013eb8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d03a      	beq.n	8013f24 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	4798      	blx	r3
    }
    return;
 8013eb6:	e035      	b.n	8013f24 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d009      	beq.n	8013ed8 <HAL_UART_IRQHandler+0x71c>
 8013ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d003      	beq.n	8013ed8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f001 f90d 	bl	80150f0 <UART_EndTransmit_IT>
    return;
 8013ed6:	e026      	b.n	8013f26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d009      	beq.n	8013ef8 <HAL_UART_IRQHandler+0x73c>
 8013ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013ee8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d003      	beq.n	8013ef8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f001 fe59 	bl	8015ba8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013ef6:	e016      	b.n	8013f26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d010      	beq.n	8013f26 <HAL_UART_IRQHandler+0x76a>
 8013f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	da0c      	bge.n	8013f26 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f001 fe41 	bl	8015b94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013f12:	e008      	b.n	8013f26 <HAL_UART_IRQHandler+0x76a>
      return;
 8013f14:	bf00      	nop
 8013f16:	e006      	b.n	8013f26 <HAL_UART_IRQHandler+0x76a>
    return;
 8013f18:	bf00      	nop
 8013f1a:	e004      	b.n	8013f26 <HAL_UART_IRQHandler+0x76a>
      return;
 8013f1c:	bf00      	nop
 8013f1e:	e002      	b.n	8013f26 <HAL_UART_IRQHandler+0x76a>
      return;
 8013f20:	bf00      	nop
 8013f22:	e000      	b.n	8013f26 <HAL_UART_IRQHandler+0x76a>
    return;
 8013f24:	bf00      	nop
  }
}
 8013f26:	37e8      	adds	r7, #232	; 0xe8
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}
 8013f2c:	effffffe 	.word	0xeffffffe

08013f30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013f38:	bf00      	nop
 8013f3a:	370c      	adds	r7, #12
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr

08013f44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013f44:	b480      	push	{r7}
 8013f46:	b083      	sub	sp, #12
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013f4c:	bf00      	nop
 8013f4e:	370c      	adds	r7, #12
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr

08013f58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	460b      	mov	r3, r1
 8013f62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013f64:	bf00      	nop
 8013f66:	370c      	adds	r7, #12
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr

08013f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013f74:	b092      	sub	sp, #72	; 0x48
 8013f76:	af00      	add	r7, sp, #0
 8013f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	689a      	ldr	r2, [r3, #8]
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	691b      	ldr	r3, [r3, #16]
 8013f88:	431a      	orrs	r2, r3
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	695b      	ldr	r3, [r3, #20]
 8013f8e:	431a      	orrs	r2, r3
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	69db      	ldr	r3, [r3, #28]
 8013f94:	4313      	orrs	r3, r2
 8013f96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	681a      	ldr	r2, [r3, #0]
 8013f9e:	4bbe      	ldr	r3, [pc, #760]	; (8014298 <UART_SetConfig+0x328>)
 8013fa0:	4013      	ands	r3, r2
 8013fa2:	697a      	ldr	r2, [r7, #20]
 8013fa4:	6812      	ldr	r2, [r2, #0]
 8013fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013fa8:	430b      	orrs	r3, r1
 8013faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	68da      	ldr	r2, [r3, #12]
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	430a      	orrs	r2, r1
 8013fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013fc2:	697b      	ldr	r3, [r7, #20]
 8013fc4:	699b      	ldr	r3, [r3, #24]
 8013fc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	4ab3      	ldr	r2, [pc, #716]	; (801429c <UART_SetConfig+0x32c>)
 8013fce:	4293      	cmp	r3, r2
 8013fd0:	d004      	beq.n	8013fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	6a1b      	ldr	r3, [r3, #32]
 8013fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013fd8:	4313      	orrs	r3, r2
 8013fda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	689a      	ldr	r2, [r3, #8]
 8013fe2:	4baf      	ldr	r3, [pc, #700]	; (80142a0 <UART_SetConfig+0x330>)
 8013fe4:	4013      	ands	r3, r2
 8013fe6:	697a      	ldr	r2, [r7, #20]
 8013fe8:	6812      	ldr	r2, [r2, #0]
 8013fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013fec:	430b      	orrs	r3, r1
 8013fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff6:	f023 010f 	bic.w	r1, r3, #15
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	430a      	orrs	r2, r1
 8014004:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4aa6      	ldr	r2, [pc, #664]	; (80142a4 <UART_SetConfig+0x334>)
 801400c:	4293      	cmp	r3, r2
 801400e:	d177      	bne.n	8014100 <UART_SetConfig+0x190>
 8014010:	4ba5      	ldr	r3, [pc, #660]	; (80142a8 <UART_SetConfig+0x338>)
 8014012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014014:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014018:	2b28      	cmp	r3, #40	; 0x28
 801401a:	d86d      	bhi.n	80140f8 <UART_SetConfig+0x188>
 801401c:	a201      	add	r2, pc, #4	; (adr r2, 8014024 <UART_SetConfig+0xb4>)
 801401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014022:	bf00      	nop
 8014024:	080140c9 	.word	0x080140c9
 8014028:	080140f9 	.word	0x080140f9
 801402c:	080140f9 	.word	0x080140f9
 8014030:	080140f9 	.word	0x080140f9
 8014034:	080140f9 	.word	0x080140f9
 8014038:	080140f9 	.word	0x080140f9
 801403c:	080140f9 	.word	0x080140f9
 8014040:	080140f9 	.word	0x080140f9
 8014044:	080140d1 	.word	0x080140d1
 8014048:	080140f9 	.word	0x080140f9
 801404c:	080140f9 	.word	0x080140f9
 8014050:	080140f9 	.word	0x080140f9
 8014054:	080140f9 	.word	0x080140f9
 8014058:	080140f9 	.word	0x080140f9
 801405c:	080140f9 	.word	0x080140f9
 8014060:	080140f9 	.word	0x080140f9
 8014064:	080140d9 	.word	0x080140d9
 8014068:	080140f9 	.word	0x080140f9
 801406c:	080140f9 	.word	0x080140f9
 8014070:	080140f9 	.word	0x080140f9
 8014074:	080140f9 	.word	0x080140f9
 8014078:	080140f9 	.word	0x080140f9
 801407c:	080140f9 	.word	0x080140f9
 8014080:	080140f9 	.word	0x080140f9
 8014084:	080140e1 	.word	0x080140e1
 8014088:	080140f9 	.word	0x080140f9
 801408c:	080140f9 	.word	0x080140f9
 8014090:	080140f9 	.word	0x080140f9
 8014094:	080140f9 	.word	0x080140f9
 8014098:	080140f9 	.word	0x080140f9
 801409c:	080140f9 	.word	0x080140f9
 80140a0:	080140f9 	.word	0x080140f9
 80140a4:	080140e9 	.word	0x080140e9
 80140a8:	080140f9 	.word	0x080140f9
 80140ac:	080140f9 	.word	0x080140f9
 80140b0:	080140f9 	.word	0x080140f9
 80140b4:	080140f9 	.word	0x080140f9
 80140b8:	080140f9 	.word	0x080140f9
 80140bc:	080140f9 	.word	0x080140f9
 80140c0:	080140f9 	.word	0x080140f9
 80140c4:	080140f1 	.word	0x080140f1
 80140c8:	2301      	movs	r3, #1
 80140ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140ce:	e222      	b.n	8014516 <UART_SetConfig+0x5a6>
 80140d0:	2304      	movs	r3, #4
 80140d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140d6:	e21e      	b.n	8014516 <UART_SetConfig+0x5a6>
 80140d8:	2308      	movs	r3, #8
 80140da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140de:	e21a      	b.n	8014516 <UART_SetConfig+0x5a6>
 80140e0:	2310      	movs	r3, #16
 80140e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140e6:	e216      	b.n	8014516 <UART_SetConfig+0x5a6>
 80140e8:	2320      	movs	r3, #32
 80140ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140ee:	e212      	b.n	8014516 <UART_SetConfig+0x5a6>
 80140f0:	2340      	movs	r3, #64	; 0x40
 80140f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140f6:	e20e      	b.n	8014516 <UART_SetConfig+0x5a6>
 80140f8:	2380      	movs	r3, #128	; 0x80
 80140fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140fe:	e20a      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	4a69      	ldr	r2, [pc, #420]	; (80142ac <UART_SetConfig+0x33c>)
 8014106:	4293      	cmp	r3, r2
 8014108:	d130      	bne.n	801416c <UART_SetConfig+0x1fc>
 801410a:	4b67      	ldr	r3, [pc, #412]	; (80142a8 <UART_SetConfig+0x338>)
 801410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801410e:	f003 0307 	and.w	r3, r3, #7
 8014112:	2b05      	cmp	r3, #5
 8014114:	d826      	bhi.n	8014164 <UART_SetConfig+0x1f4>
 8014116:	a201      	add	r2, pc, #4	; (adr r2, 801411c <UART_SetConfig+0x1ac>)
 8014118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801411c:	08014135 	.word	0x08014135
 8014120:	0801413d 	.word	0x0801413d
 8014124:	08014145 	.word	0x08014145
 8014128:	0801414d 	.word	0x0801414d
 801412c:	08014155 	.word	0x08014155
 8014130:	0801415d 	.word	0x0801415d
 8014134:	2300      	movs	r3, #0
 8014136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801413a:	e1ec      	b.n	8014516 <UART_SetConfig+0x5a6>
 801413c:	2304      	movs	r3, #4
 801413e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014142:	e1e8      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014144:	2308      	movs	r3, #8
 8014146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801414a:	e1e4      	b.n	8014516 <UART_SetConfig+0x5a6>
 801414c:	2310      	movs	r3, #16
 801414e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014152:	e1e0      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014154:	2320      	movs	r3, #32
 8014156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801415a:	e1dc      	b.n	8014516 <UART_SetConfig+0x5a6>
 801415c:	2340      	movs	r3, #64	; 0x40
 801415e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014162:	e1d8      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014164:	2380      	movs	r3, #128	; 0x80
 8014166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801416a:	e1d4      	b.n	8014516 <UART_SetConfig+0x5a6>
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	4a4f      	ldr	r2, [pc, #316]	; (80142b0 <UART_SetConfig+0x340>)
 8014172:	4293      	cmp	r3, r2
 8014174:	d130      	bne.n	80141d8 <UART_SetConfig+0x268>
 8014176:	4b4c      	ldr	r3, [pc, #304]	; (80142a8 <UART_SetConfig+0x338>)
 8014178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801417a:	f003 0307 	and.w	r3, r3, #7
 801417e:	2b05      	cmp	r3, #5
 8014180:	d826      	bhi.n	80141d0 <UART_SetConfig+0x260>
 8014182:	a201      	add	r2, pc, #4	; (adr r2, 8014188 <UART_SetConfig+0x218>)
 8014184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014188:	080141a1 	.word	0x080141a1
 801418c:	080141a9 	.word	0x080141a9
 8014190:	080141b1 	.word	0x080141b1
 8014194:	080141b9 	.word	0x080141b9
 8014198:	080141c1 	.word	0x080141c1
 801419c:	080141c9 	.word	0x080141c9
 80141a0:	2300      	movs	r3, #0
 80141a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141a6:	e1b6      	b.n	8014516 <UART_SetConfig+0x5a6>
 80141a8:	2304      	movs	r3, #4
 80141aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141ae:	e1b2      	b.n	8014516 <UART_SetConfig+0x5a6>
 80141b0:	2308      	movs	r3, #8
 80141b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141b6:	e1ae      	b.n	8014516 <UART_SetConfig+0x5a6>
 80141b8:	2310      	movs	r3, #16
 80141ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141be:	e1aa      	b.n	8014516 <UART_SetConfig+0x5a6>
 80141c0:	2320      	movs	r3, #32
 80141c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141c6:	e1a6      	b.n	8014516 <UART_SetConfig+0x5a6>
 80141c8:	2340      	movs	r3, #64	; 0x40
 80141ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141ce:	e1a2      	b.n	8014516 <UART_SetConfig+0x5a6>
 80141d0:	2380      	movs	r3, #128	; 0x80
 80141d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141d6:	e19e      	b.n	8014516 <UART_SetConfig+0x5a6>
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	4a35      	ldr	r2, [pc, #212]	; (80142b4 <UART_SetConfig+0x344>)
 80141de:	4293      	cmp	r3, r2
 80141e0:	d130      	bne.n	8014244 <UART_SetConfig+0x2d4>
 80141e2:	4b31      	ldr	r3, [pc, #196]	; (80142a8 <UART_SetConfig+0x338>)
 80141e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141e6:	f003 0307 	and.w	r3, r3, #7
 80141ea:	2b05      	cmp	r3, #5
 80141ec:	d826      	bhi.n	801423c <UART_SetConfig+0x2cc>
 80141ee:	a201      	add	r2, pc, #4	; (adr r2, 80141f4 <UART_SetConfig+0x284>)
 80141f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141f4:	0801420d 	.word	0x0801420d
 80141f8:	08014215 	.word	0x08014215
 80141fc:	0801421d 	.word	0x0801421d
 8014200:	08014225 	.word	0x08014225
 8014204:	0801422d 	.word	0x0801422d
 8014208:	08014235 	.word	0x08014235
 801420c:	2300      	movs	r3, #0
 801420e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014212:	e180      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014214:	2304      	movs	r3, #4
 8014216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801421a:	e17c      	b.n	8014516 <UART_SetConfig+0x5a6>
 801421c:	2308      	movs	r3, #8
 801421e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014222:	e178      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014224:	2310      	movs	r3, #16
 8014226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801422a:	e174      	b.n	8014516 <UART_SetConfig+0x5a6>
 801422c:	2320      	movs	r3, #32
 801422e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014232:	e170      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014234:	2340      	movs	r3, #64	; 0x40
 8014236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801423a:	e16c      	b.n	8014516 <UART_SetConfig+0x5a6>
 801423c:	2380      	movs	r3, #128	; 0x80
 801423e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014242:	e168      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	4a1b      	ldr	r2, [pc, #108]	; (80142b8 <UART_SetConfig+0x348>)
 801424a:	4293      	cmp	r3, r2
 801424c:	d142      	bne.n	80142d4 <UART_SetConfig+0x364>
 801424e:	4b16      	ldr	r3, [pc, #88]	; (80142a8 <UART_SetConfig+0x338>)
 8014250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014252:	f003 0307 	and.w	r3, r3, #7
 8014256:	2b05      	cmp	r3, #5
 8014258:	d838      	bhi.n	80142cc <UART_SetConfig+0x35c>
 801425a:	a201      	add	r2, pc, #4	; (adr r2, 8014260 <UART_SetConfig+0x2f0>)
 801425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014260:	08014279 	.word	0x08014279
 8014264:	08014281 	.word	0x08014281
 8014268:	08014289 	.word	0x08014289
 801426c:	08014291 	.word	0x08014291
 8014270:	080142bd 	.word	0x080142bd
 8014274:	080142c5 	.word	0x080142c5
 8014278:	2300      	movs	r3, #0
 801427a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801427e:	e14a      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014280:	2304      	movs	r3, #4
 8014282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014286:	e146      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014288:	2308      	movs	r3, #8
 801428a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801428e:	e142      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014290:	2310      	movs	r3, #16
 8014292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014296:	e13e      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014298:	cfff69f3 	.word	0xcfff69f3
 801429c:	58000c00 	.word	0x58000c00
 80142a0:	11fff4ff 	.word	0x11fff4ff
 80142a4:	40011000 	.word	0x40011000
 80142a8:	58024400 	.word	0x58024400
 80142ac:	40004400 	.word	0x40004400
 80142b0:	40004800 	.word	0x40004800
 80142b4:	40004c00 	.word	0x40004c00
 80142b8:	40005000 	.word	0x40005000
 80142bc:	2320      	movs	r3, #32
 80142be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142c2:	e128      	b.n	8014516 <UART_SetConfig+0x5a6>
 80142c4:	2340      	movs	r3, #64	; 0x40
 80142c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142ca:	e124      	b.n	8014516 <UART_SetConfig+0x5a6>
 80142cc:	2380      	movs	r3, #128	; 0x80
 80142ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142d2:	e120      	b.n	8014516 <UART_SetConfig+0x5a6>
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	4acb      	ldr	r2, [pc, #812]	; (8014608 <UART_SetConfig+0x698>)
 80142da:	4293      	cmp	r3, r2
 80142dc:	d176      	bne.n	80143cc <UART_SetConfig+0x45c>
 80142de:	4bcb      	ldr	r3, [pc, #812]	; (801460c <UART_SetConfig+0x69c>)
 80142e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80142e6:	2b28      	cmp	r3, #40	; 0x28
 80142e8:	d86c      	bhi.n	80143c4 <UART_SetConfig+0x454>
 80142ea:	a201      	add	r2, pc, #4	; (adr r2, 80142f0 <UART_SetConfig+0x380>)
 80142ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f0:	08014395 	.word	0x08014395
 80142f4:	080143c5 	.word	0x080143c5
 80142f8:	080143c5 	.word	0x080143c5
 80142fc:	080143c5 	.word	0x080143c5
 8014300:	080143c5 	.word	0x080143c5
 8014304:	080143c5 	.word	0x080143c5
 8014308:	080143c5 	.word	0x080143c5
 801430c:	080143c5 	.word	0x080143c5
 8014310:	0801439d 	.word	0x0801439d
 8014314:	080143c5 	.word	0x080143c5
 8014318:	080143c5 	.word	0x080143c5
 801431c:	080143c5 	.word	0x080143c5
 8014320:	080143c5 	.word	0x080143c5
 8014324:	080143c5 	.word	0x080143c5
 8014328:	080143c5 	.word	0x080143c5
 801432c:	080143c5 	.word	0x080143c5
 8014330:	080143a5 	.word	0x080143a5
 8014334:	080143c5 	.word	0x080143c5
 8014338:	080143c5 	.word	0x080143c5
 801433c:	080143c5 	.word	0x080143c5
 8014340:	080143c5 	.word	0x080143c5
 8014344:	080143c5 	.word	0x080143c5
 8014348:	080143c5 	.word	0x080143c5
 801434c:	080143c5 	.word	0x080143c5
 8014350:	080143ad 	.word	0x080143ad
 8014354:	080143c5 	.word	0x080143c5
 8014358:	080143c5 	.word	0x080143c5
 801435c:	080143c5 	.word	0x080143c5
 8014360:	080143c5 	.word	0x080143c5
 8014364:	080143c5 	.word	0x080143c5
 8014368:	080143c5 	.word	0x080143c5
 801436c:	080143c5 	.word	0x080143c5
 8014370:	080143b5 	.word	0x080143b5
 8014374:	080143c5 	.word	0x080143c5
 8014378:	080143c5 	.word	0x080143c5
 801437c:	080143c5 	.word	0x080143c5
 8014380:	080143c5 	.word	0x080143c5
 8014384:	080143c5 	.word	0x080143c5
 8014388:	080143c5 	.word	0x080143c5
 801438c:	080143c5 	.word	0x080143c5
 8014390:	080143bd 	.word	0x080143bd
 8014394:	2301      	movs	r3, #1
 8014396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801439a:	e0bc      	b.n	8014516 <UART_SetConfig+0x5a6>
 801439c:	2304      	movs	r3, #4
 801439e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143a2:	e0b8      	b.n	8014516 <UART_SetConfig+0x5a6>
 80143a4:	2308      	movs	r3, #8
 80143a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143aa:	e0b4      	b.n	8014516 <UART_SetConfig+0x5a6>
 80143ac:	2310      	movs	r3, #16
 80143ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143b2:	e0b0      	b.n	8014516 <UART_SetConfig+0x5a6>
 80143b4:	2320      	movs	r3, #32
 80143b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143ba:	e0ac      	b.n	8014516 <UART_SetConfig+0x5a6>
 80143bc:	2340      	movs	r3, #64	; 0x40
 80143be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143c2:	e0a8      	b.n	8014516 <UART_SetConfig+0x5a6>
 80143c4:	2380      	movs	r3, #128	; 0x80
 80143c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143ca:	e0a4      	b.n	8014516 <UART_SetConfig+0x5a6>
 80143cc:	697b      	ldr	r3, [r7, #20]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4a8f      	ldr	r2, [pc, #572]	; (8014610 <UART_SetConfig+0x6a0>)
 80143d2:	4293      	cmp	r3, r2
 80143d4:	d130      	bne.n	8014438 <UART_SetConfig+0x4c8>
 80143d6:	4b8d      	ldr	r3, [pc, #564]	; (801460c <UART_SetConfig+0x69c>)
 80143d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143da:	f003 0307 	and.w	r3, r3, #7
 80143de:	2b05      	cmp	r3, #5
 80143e0:	d826      	bhi.n	8014430 <UART_SetConfig+0x4c0>
 80143e2:	a201      	add	r2, pc, #4	; (adr r2, 80143e8 <UART_SetConfig+0x478>)
 80143e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143e8:	08014401 	.word	0x08014401
 80143ec:	08014409 	.word	0x08014409
 80143f0:	08014411 	.word	0x08014411
 80143f4:	08014419 	.word	0x08014419
 80143f8:	08014421 	.word	0x08014421
 80143fc:	08014429 	.word	0x08014429
 8014400:	2300      	movs	r3, #0
 8014402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014406:	e086      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014408:	2304      	movs	r3, #4
 801440a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801440e:	e082      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014410:	2308      	movs	r3, #8
 8014412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014416:	e07e      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014418:	2310      	movs	r3, #16
 801441a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801441e:	e07a      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014420:	2320      	movs	r3, #32
 8014422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014426:	e076      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014428:	2340      	movs	r3, #64	; 0x40
 801442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801442e:	e072      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014430:	2380      	movs	r3, #128	; 0x80
 8014432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014436:	e06e      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	4a75      	ldr	r2, [pc, #468]	; (8014614 <UART_SetConfig+0x6a4>)
 801443e:	4293      	cmp	r3, r2
 8014440:	d130      	bne.n	80144a4 <UART_SetConfig+0x534>
 8014442:	4b72      	ldr	r3, [pc, #456]	; (801460c <UART_SetConfig+0x69c>)
 8014444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014446:	f003 0307 	and.w	r3, r3, #7
 801444a:	2b05      	cmp	r3, #5
 801444c:	d826      	bhi.n	801449c <UART_SetConfig+0x52c>
 801444e:	a201      	add	r2, pc, #4	; (adr r2, 8014454 <UART_SetConfig+0x4e4>)
 8014450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014454:	0801446d 	.word	0x0801446d
 8014458:	08014475 	.word	0x08014475
 801445c:	0801447d 	.word	0x0801447d
 8014460:	08014485 	.word	0x08014485
 8014464:	0801448d 	.word	0x0801448d
 8014468:	08014495 	.word	0x08014495
 801446c:	2300      	movs	r3, #0
 801446e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014472:	e050      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014474:	2304      	movs	r3, #4
 8014476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801447a:	e04c      	b.n	8014516 <UART_SetConfig+0x5a6>
 801447c:	2308      	movs	r3, #8
 801447e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014482:	e048      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014484:	2310      	movs	r3, #16
 8014486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801448a:	e044      	b.n	8014516 <UART_SetConfig+0x5a6>
 801448c:	2320      	movs	r3, #32
 801448e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014492:	e040      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014494:	2340      	movs	r3, #64	; 0x40
 8014496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801449a:	e03c      	b.n	8014516 <UART_SetConfig+0x5a6>
 801449c:	2380      	movs	r3, #128	; 0x80
 801449e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144a2:	e038      	b.n	8014516 <UART_SetConfig+0x5a6>
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	4a5b      	ldr	r2, [pc, #364]	; (8014618 <UART_SetConfig+0x6a8>)
 80144aa:	4293      	cmp	r3, r2
 80144ac:	d130      	bne.n	8014510 <UART_SetConfig+0x5a0>
 80144ae:	4b57      	ldr	r3, [pc, #348]	; (801460c <UART_SetConfig+0x69c>)
 80144b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80144b2:	f003 0307 	and.w	r3, r3, #7
 80144b6:	2b05      	cmp	r3, #5
 80144b8:	d826      	bhi.n	8014508 <UART_SetConfig+0x598>
 80144ba:	a201      	add	r2, pc, #4	; (adr r2, 80144c0 <UART_SetConfig+0x550>)
 80144bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144c0:	080144d9 	.word	0x080144d9
 80144c4:	080144e1 	.word	0x080144e1
 80144c8:	080144e9 	.word	0x080144e9
 80144cc:	080144f1 	.word	0x080144f1
 80144d0:	080144f9 	.word	0x080144f9
 80144d4:	08014501 	.word	0x08014501
 80144d8:	2302      	movs	r3, #2
 80144da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144de:	e01a      	b.n	8014516 <UART_SetConfig+0x5a6>
 80144e0:	2304      	movs	r3, #4
 80144e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144e6:	e016      	b.n	8014516 <UART_SetConfig+0x5a6>
 80144e8:	2308      	movs	r3, #8
 80144ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144ee:	e012      	b.n	8014516 <UART_SetConfig+0x5a6>
 80144f0:	2310      	movs	r3, #16
 80144f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144f6:	e00e      	b.n	8014516 <UART_SetConfig+0x5a6>
 80144f8:	2320      	movs	r3, #32
 80144fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144fe:	e00a      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014500:	2340      	movs	r3, #64	; 0x40
 8014502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014506:	e006      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014508:	2380      	movs	r3, #128	; 0x80
 801450a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801450e:	e002      	b.n	8014516 <UART_SetConfig+0x5a6>
 8014510:	2380      	movs	r3, #128	; 0x80
 8014512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014516:	697b      	ldr	r3, [r7, #20]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4a3f      	ldr	r2, [pc, #252]	; (8014618 <UART_SetConfig+0x6a8>)
 801451c:	4293      	cmp	r3, r2
 801451e:	f040 80f8 	bne.w	8014712 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014522:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014526:	2b20      	cmp	r3, #32
 8014528:	dc46      	bgt.n	80145b8 <UART_SetConfig+0x648>
 801452a:	2b02      	cmp	r3, #2
 801452c:	f2c0 8082 	blt.w	8014634 <UART_SetConfig+0x6c4>
 8014530:	3b02      	subs	r3, #2
 8014532:	2b1e      	cmp	r3, #30
 8014534:	d87e      	bhi.n	8014634 <UART_SetConfig+0x6c4>
 8014536:	a201      	add	r2, pc, #4	; (adr r2, 801453c <UART_SetConfig+0x5cc>)
 8014538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801453c:	080145bf 	.word	0x080145bf
 8014540:	08014635 	.word	0x08014635
 8014544:	080145c7 	.word	0x080145c7
 8014548:	08014635 	.word	0x08014635
 801454c:	08014635 	.word	0x08014635
 8014550:	08014635 	.word	0x08014635
 8014554:	080145d7 	.word	0x080145d7
 8014558:	08014635 	.word	0x08014635
 801455c:	08014635 	.word	0x08014635
 8014560:	08014635 	.word	0x08014635
 8014564:	08014635 	.word	0x08014635
 8014568:	08014635 	.word	0x08014635
 801456c:	08014635 	.word	0x08014635
 8014570:	08014635 	.word	0x08014635
 8014574:	080145e7 	.word	0x080145e7
 8014578:	08014635 	.word	0x08014635
 801457c:	08014635 	.word	0x08014635
 8014580:	08014635 	.word	0x08014635
 8014584:	08014635 	.word	0x08014635
 8014588:	08014635 	.word	0x08014635
 801458c:	08014635 	.word	0x08014635
 8014590:	08014635 	.word	0x08014635
 8014594:	08014635 	.word	0x08014635
 8014598:	08014635 	.word	0x08014635
 801459c:	08014635 	.word	0x08014635
 80145a0:	08014635 	.word	0x08014635
 80145a4:	08014635 	.word	0x08014635
 80145a8:	08014635 	.word	0x08014635
 80145ac:	08014635 	.word	0x08014635
 80145b0:	08014635 	.word	0x08014635
 80145b4:	08014627 	.word	0x08014627
 80145b8:	2b40      	cmp	r3, #64	; 0x40
 80145ba:	d037      	beq.n	801462c <UART_SetConfig+0x6bc>
 80145bc:	e03a      	b.n	8014634 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80145be:	f7fb fc17 	bl	800fdf0 <HAL_RCCEx_GetD3PCLK1Freq>
 80145c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80145c4:	e03c      	b.n	8014640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80145c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7fb fc26 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80145d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80145d4:	e034      	b.n	8014640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80145d6:	f107 0318 	add.w	r3, r7, #24
 80145da:	4618      	mov	r0, r3
 80145dc:	f7fb fd72 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80145e0:	69fb      	ldr	r3, [r7, #28]
 80145e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80145e4:	e02c      	b.n	8014640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80145e6:	4b09      	ldr	r3, [pc, #36]	; (801460c <UART_SetConfig+0x69c>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	f003 0320 	and.w	r3, r3, #32
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d016      	beq.n	8014620 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80145f2:	4b06      	ldr	r3, [pc, #24]	; (801460c <UART_SetConfig+0x69c>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	08db      	lsrs	r3, r3, #3
 80145f8:	f003 0303 	and.w	r3, r3, #3
 80145fc:	4a07      	ldr	r2, [pc, #28]	; (801461c <UART_SetConfig+0x6ac>)
 80145fe:	fa22 f303 	lsr.w	r3, r2, r3
 8014602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014604:	e01c      	b.n	8014640 <UART_SetConfig+0x6d0>
 8014606:	bf00      	nop
 8014608:	40011400 	.word	0x40011400
 801460c:	58024400 	.word	0x58024400
 8014610:	40007800 	.word	0x40007800
 8014614:	40007c00 	.word	0x40007c00
 8014618:	58000c00 	.word	0x58000c00
 801461c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014620:	4b9d      	ldr	r3, [pc, #628]	; (8014898 <UART_SetConfig+0x928>)
 8014622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014624:	e00c      	b.n	8014640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014626:	4b9d      	ldr	r3, [pc, #628]	; (801489c <UART_SetConfig+0x92c>)
 8014628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801462a:	e009      	b.n	8014640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801462c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014632:	e005      	b.n	8014640 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014634:	2300      	movs	r3, #0
 8014636:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014638:	2301      	movs	r3, #1
 801463a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801463e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014642:	2b00      	cmp	r3, #0
 8014644:	f000 81de 	beq.w	8014a04 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801464c:	4a94      	ldr	r2, [pc, #592]	; (80148a0 <UART_SetConfig+0x930>)
 801464e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014652:	461a      	mov	r2, r3
 8014654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014656:	fbb3 f3f2 	udiv	r3, r3, r2
 801465a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	685a      	ldr	r2, [r3, #4]
 8014660:	4613      	mov	r3, r2
 8014662:	005b      	lsls	r3, r3, #1
 8014664:	4413      	add	r3, r2
 8014666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014668:	429a      	cmp	r2, r3
 801466a:	d305      	bcc.n	8014678 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	685b      	ldr	r3, [r3, #4]
 8014670:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014674:	429a      	cmp	r2, r3
 8014676:	d903      	bls.n	8014680 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8014678:	2301      	movs	r3, #1
 801467a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801467e:	e1c1      	b.n	8014a04 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014682:	2200      	movs	r2, #0
 8014684:	60bb      	str	r3, [r7, #8]
 8014686:	60fa      	str	r2, [r7, #12]
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801468c:	4a84      	ldr	r2, [pc, #528]	; (80148a0 <UART_SetConfig+0x930>)
 801468e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014692:	b29b      	uxth	r3, r3
 8014694:	2200      	movs	r2, #0
 8014696:	603b      	str	r3, [r7, #0]
 8014698:	607a      	str	r2, [r7, #4]
 801469a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801469e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80146a2:	f7eb fe1d 	bl	80002e0 <__aeabi_uldivmod>
 80146a6:	4602      	mov	r2, r0
 80146a8:	460b      	mov	r3, r1
 80146aa:	4610      	mov	r0, r2
 80146ac:	4619      	mov	r1, r3
 80146ae:	f04f 0200 	mov.w	r2, #0
 80146b2:	f04f 0300 	mov.w	r3, #0
 80146b6:	020b      	lsls	r3, r1, #8
 80146b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80146bc:	0202      	lsls	r2, r0, #8
 80146be:	6979      	ldr	r1, [r7, #20]
 80146c0:	6849      	ldr	r1, [r1, #4]
 80146c2:	0849      	lsrs	r1, r1, #1
 80146c4:	2000      	movs	r0, #0
 80146c6:	460c      	mov	r4, r1
 80146c8:	4605      	mov	r5, r0
 80146ca:	eb12 0804 	adds.w	r8, r2, r4
 80146ce:	eb43 0905 	adc.w	r9, r3, r5
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	685b      	ldr	r3, [r3, #4]
 80146d6:	2200      	movs	r2, #0
 80146d8:	469a      	mov	sl, r3
 80146da:	4693      	mov	fp, r2
 80146dc:	4652      	mov	r2, sl
 80146de:	465b      	mov	r3, fp
 80146e0:	4640      	mov	r0, r8
 80146e2:	4649      	mov	r1, r9
 80146e4:	f7eb fdfc 	bl	80002e0 <__aeabi_uldivmod>
 80146e8:	4602      	mov	r2, r0
 80146ea:	460b      	mov	r3, r1
 80146ec:	4613      	mov	r3, r2
 80146ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80146f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80146f6:	d308      	bcc.n	801470a <UART_SetConfig+0x79a>
 80146f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80146fe:	d204      	bcs.n	801470a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014706:	60da      	str	r2, [r3, #12]
 8014708:	e17c      	b.n	8014a04 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801470a:	2301      	movs	r3, #1
 801470c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014710:	e178      	b.n	8014a04 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	69db      	ldr	r3, [r3, #28]
 8014716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801471a:	f040 80c5 	bne.w	80148a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801471e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014722:	2b20      	cmp	r3, #32
 8014724:	dc48      	bgt.n	80147b8 <UART_SetConfig+0x848>
 8014726:	2b00      	cmp	r3, #0
 8014728:	db7b      	blt.n	8014822 <UART_SetConfig+0x8b2>
 801472a:	2b20      	cmp	r3, #32
 801472c:	d879      	bhi.n	8014822 <UART_SetConfig+0x8b2>
 801472e:	a201      	add	r2, pc, #4	; (adr r2, 8014734 <UART_SetConfig+0x7c4>)
 8014730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014734:	080147bf 	.word	0x080147bf
 8014738:	080147c7 	.word	0x080147c7
 801473c:	08014823 	.word	0x08014823
 8014740:	08014823 	.word	0x08014823
 8014744:	080147cf 	.word	0x080147cf
 8014748:	08014823 	.word	0x08014823
 801474c:	08014823 	.word	0x08014823
 8014750:	08014823 	.word	0x08014823
 8014754:	080147df 	.word	0x080147df
 8014758:	08014823 	.word	0x08014823
 801475c:	08014823 	.word	0x08014823
 8014760:	08014823 	.word	0x08014823
 8014764:	08014823 	.word	0x08014823
 8014768:	08014823 	.word	0x08014823
 801476c:	08014823 	.word	0x08014823
 8014770:	08014823 	.word	0x08014823
 8014774:	080147ef 	.word	0x080147ef
 8014778:	08014823 	.word	0x08014823
 801477c:	08014823 	.word	0x08014823
 8014780:	08014823 	.word	0x08014823
 8014784:	08014823 	.word	0x08014823
 8014788:	08014823 	.word	0x08014823
 801478c:	08014823 	.word	0x08014823
 8014790:	08014823 	.word	0x08014823
 8014794:	08014823 	.word	0x08014823
 8014798:	08014823 	.word	0x08014823
 801479c:	08014823 	.word	0x08014823
 80147a0:	08014823 	.word	0x08014823
 80147a4:	08014823 	.word	0x08014823
 80147a8:	08014823 	.word	0x08014823
 80147ac:	08014823 	.word	0x08014823
 80147b0:	08014823 	.word	0x08014823
 80147b4:	08014815 	.word	0x08014815
 80147b8:	2b40      	cmp	r3, #64	; 0x40
 80147ba:	d02e      	beq.n	801481a <UART_SetConfig+0x8aa>
 80147bc:	e031      	b.n	8014822 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80147be:	f7f9 fb1f 	bl	800de00 <HAL_RCC_GetPCLK1Freq>
 80147c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80147c4:	e033      	b.n	801482e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80147c6:	f7f9 fb31 	bl	800de2c <HAL_RCC_GetPCLK2Freq>
 80147ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80147cc:	e02f      	b.n	801482e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80147ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7fb fb22 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80147d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80147dc:	e027      	b.n	801482e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80147de:	f107 0318 	add.w	r3, r7, #24
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7fb fc6e 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80147e8:	69fb      	ldr	r3, [r7, #28]
 80147ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80147ec:	e01f      	b.n	801482e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80147ee:	4b2d      	ldr	r3, [pc, #180]	; (80148a4 <UART_SetConfig+0x934>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	f003 0320 	and.w	r3, r3, #32
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d009      	beq.n	801480e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80147fa:	4b2a      	ldr	r3, [pc, #168]	; (80148a4 <UART_SetConfig+0x934>)
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	08db      	lsrs	r3, r3, #3
 8014800:	f003 0303 	and.w	r3, r3, #3
 8014804:	4a24      	ldr	r2, [pc, #144]	; (8014898 <UART_SetConfig+0x928>)
 8014806:	fa22 f303 	lsr.w	r3, r2, r3
 801480a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801480c:	e00f      	b.n	801482e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801480e:	4b22      	ldr	r3, [pc, #136]	; (8014898 <UART_SetConfig+0x928>)
 8014810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014812:	e00c      	b.n	801482e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014814:	4b21      	ldr	r3, [pc, #132]	; (801489c <UART_SetConfig+0x92c>)
 8014816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014818:	e009      	b.n	801482e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801481a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801481e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014820:	e005      	b.n	801482e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014822:	2300      	movs	r3, #0
 8014824:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014826:	2301      	movs	r3, #1
 8014828:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801482c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801482e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014830:	2b00      	cmp	r3, #0
 8014832:	f000 80e7 	beq.w	8014a04 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801483a:	4a19      	ldr	r2, [pc, #100]	; (80148a0 <UART_SetConfig+0x930>)
 801483c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014840:	461a      	mov	r2, r3
 8014842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014844:	fbb3 f3f2 	udiv	r3, r3, r2
 8014848:	005a      	lsls	r2, r3, #1
 801484a:	697b      	ldr	r3, [r7, #20]
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	085b      	lsrs	r3, r3, #1
 8014850:	441a      	add	r2, r3
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	fbb2 f3f3 	udiv	r3, r2, r3
 801485a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801485e:	2b0f      	cmp	r3, #15
 8014860:	d916      	bls.n	8014890 <UART_SetConfig+0x920>
 8014862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014868:	d212      	bcs.n	8014890 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801486c:	b29b      	uxth	r3, r3
 801486e:	f023 030f 	bic.w	r3, r3, #15
 8014872:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014876:	085b      	lsrs	r3, r3, #1
 8014878:	b29b      	uxth	r3, r3
 801487a:	f003 0307 	and.w	r3, r3, #7
 801487e:	b29a      	uxth	r2, r3
 8014880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014882:	4313      	orrs	r3, r2
 8014884:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801488c:	60da      	str	r2, [r3, #12]
 801488e:	e0b9      	b.n	8014a04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014890:	2301      	movs	r3, #1
 8014892:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014896:	e0b5      	b.n	8014a04 <UART_SetConfig+0xa94>
 8014898:	03d09000 	.word	0x03d09000
 801489c:	003d0900 	.word	0x003d0900
 80148a0:	0801a18c 	.word	0x0801a18c
 80148a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80148a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80148ac:	2b20      	cmp	r3, #32
 80148ae:	dc49      	bgt.n	8014944 <UART_SetConfig+0x9d4>
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	db7c      	blt.n	80149ae <UART_SetConfig+0xa3e>
 80148b4:	2b20      	cmp	r3, #32
 80148b6:	d87a      	bhi.n	80149ae <UART_SetConfig+0xa3e>
 80148b8:	a201      	add	r2, pc, #4	; (adr r2, 80148c0 <UART_SetConfig+0x950>)
 80148ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148be:	bf00      	nop
 80148c0:	0801494b 	.word	0x0801494b
 80148c4:	08014953 	.word	0x08014953
 80148c8:	080149af 	.word	0x080149af
 80148cc:	080149af 	.word	0x080149af
 80148d0:	0801495b 	.word	0x0801495b
 80148d4:	080149af 	.word	0x080149af
 80148d8:	080149af 	.word	0x080149af
 80148dc:	080149af 	.word	0x080149af
 80148e0:	0801496b 	.word	0x0801496b
 80148e4:	080149af 	.word	0x080149af
 80148e8:	080149af 	.word	0x080149af
 80148ec:	080149af 	.word	0x080149af
 80148f0:	080149af 	.word	0x080149af
 80148f4:	080149af 	.word	0x080149af
 80148f8:	080149af 	.word	0x080149af
 80148fc:	080149af 	.word	0x080149af
 8014900:	0801497b 	.word	0x0801497b
 8014904:	080149af 	.word	0x080149af
 8014908:	080149af 	.word	0x080149af
 801490c:	080149af 	.word	0x080149af
 8014910:	080149af 	.word	0x080149af
 8014914:	080149af 	.word	0x080149af
 8014918:	080149af 	.word	0x080149af
 801491c:	080149af 	.word	0x080149af
 8014920:	080149af 	.word	0x080149af
 8014924:	080149af 	.word	0x080149af
 8014928:	080149af 	.word	0x080149af
 801492c:	080149af 	.word	0x080149af
 8014930:	080149af 	.word	0x080149af
 8014934:	080149af 	.word	0x080149af
 8014938:	080149af 	.word	0x080149af
 801493c:	080149af 	.word	0x080149af
 8014940:	080149a1 	.word	0x080149a1
 8014944:	2b40      	cmp	r3, #64	; 0x40
 8014946:	d02e      	beq.n	80149a6 <UART_SetConfig+0xa36>
 8014948:	e031      	b.n	80149ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801494a:	f7f9 fa59 	bl	800de00 <HAL_RCC_GetPCLK1Freq>
 801494e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014950:	e033      	b.n	80149ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014952:	f7f9 fa6b 	bl	800de2c <HAL_RCC_GetPCLK2Freq>
 8014956:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014958:	e02f      	b.n	80149ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801495a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801495e:	4618      	mov	r0, r3
 8014960:	f7fb fa5c 	bl	800fe1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014968:	e027      	b.n	80149ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801496a:	f107 0318 	add.w	r3, r7, #24
 801496e:	4618      	mov	r0, r3
 8014970:	f7fb fba8 	bl	80100c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014978:	e01f      	b.n	80149ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801497a:	4b2d      	ldr	r3, [pc, #180]	; (8014a30 <UART_SetConfig+0xac0>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	f003 0320 	and.w	r3, r3, #32
 8014982:	2b00      	cmp	r3, #0
 8014984:	d009      	beq.n	801499a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014986:	4b2a      	ldr	r3, [pc, #168]	; (8014a30 <UART_SetConfig+0xac0>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	08db      	lsrs	r3, r3, #3
 801498c:	f003 0303 	and.w	r3, r3, #3
 8014990:	4a28      	ldr	r2, [pc, #160]	; (8014a34 <UART_SetConfig+0xac4>)
 8014992:	fa22 f303 	lsr.w	r3, r2, r3
 8014996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014998:	e00f      	b.n	80149ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801499a:	4b26      	ldr	r3, [pc, #152]	; (8014a34 <UART_SetConfig+0xac4>)
 801499c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801499e:	e00c      	b.n	80149ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80149a0:	4b25      	ldr	r3, [pc, #148]	; (8014a38 <UART_SetConfig+0xac8>)
 80149a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80149a4:	e009      	b.n	80149ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80149a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80149aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80149ac:	e005      	b.n	80149ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80149ae:	2300      	movs	r3, #0
 80149b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80149b2:	2301      	movs	r3, #1
 80149b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80149b8:	bf00      	nop
    }

    if (pclk != 0U)
 80149ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d021      	beq.n	8014a04 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149c4:	4a1d      	ldr	r2, [pc, #116]	; (8014a3c <UART_SetConfig+0xacc>)
 80149c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149ca:	461a      	mov	r2, r3
 80149cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80149d2:	697b      	ldr	r3, [r7, #20]
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	085b      	lsrs	r3, r3, #1
 80149d8:	441a      	add	r2, r3
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	fbb2 f3f3 	udiv	r3, r2, r3
 80149e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80149e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149e6:	2b0f      	cmp	r3, #15
 80149e8:	d909      	bls.n	80149fe <UART_SetConfig+0xa8e>
 80149ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80149f0:	d205      	bcs.n	80149fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80149f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f4:	b29a      	uxth	r2, r3
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	60da      	str	r2, [r3, #12]
 80149fc:	e002      	b.n	8014a04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80149fe:	2301      	movs	r3, #1
 8014a00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	2201      	movs	r2, #1
 8014a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	2201      	movs	r2, #1
 8014a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	2200      	movs	r2, #0
 8014a18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8014a20:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3748      	adds	r7, #72	; 0x48
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014a2e:	bf00      	nop
 8014a30:	58024400 	.word	0x58024400
 8014a34:	03d09000 	.word	0x03d09000
 8014a38:	003d0900 	.word	0x003d0900
 8014a3c:	0801a18c 	.word	0x0801a18c

08014a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a4c:	f003 0308 	and.w	r3, r3, #8
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d00a      	beq.n	8014a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	685b      	ldr	r3, [r3, #4]
 8014a5a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	430a      	orrs	r2, r1
 8014a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a6e:	f003 0301 	and.w	r3, r3, #1
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d00a      	beq.n	8014a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	685b      	ldr	r3, [r3, #4]
 8014a7c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	430a      	orrs	r2, r1
 8014a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a90:	f003 0302 	and.w	r3, r3, #2
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d00a      	beq.n	8014aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	685b      	ldr	r3, [r3, #4]
 8014a9e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	430a      	orrs	r2, r1
 8014aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ab2:	f003 0304 	and.w	r3, r3, #4
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d00a      	beq.n	8014ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	685b      	ldr	r3, [r3, #4]
 8014ac0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	430a      	orrs	r2, r1
 8014ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ad4:	f003 0310 	and.w	r3, r3, #16
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d00a      	beq.n	8014af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	689b      	ldr	r3, [r3, #8]
 8014ae2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	430a      	orrs	r2, r1
 8014af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014af6:	f003 0320 	and.w	r3, r3, #32
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d00a      	beq.n	8014b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	689b      	ldr	r3, [r3, #8]
 8014b04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	430a      	orrs	r2, r1
 8014b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d01a      	beq.n	8014b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	685b      	ldr	r3, [r3, #4]
 8014b26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	430a      	orrs	r2, r1
 8014b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014b3e:	d10a      	bne.n	8014b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	685b      	ldr	r3, [r3, #4]
 8014b46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	430a      	orrs	r2, r1
 8014b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d00a      	beq.n	8014b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	685b      	ldr	r3, [r3, #4]
 8014b68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	430a      	orrs	r2, r1
 8014b76:	605a      	str	r2, [r3, #4]
  }
}
 8014b78:	bf00      	nop
 8014b7a:	370c      	adds	r7, #12
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b82:	4770      	bx	lr

08014b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b098      	sub	sp, #96	; 0x60
 8014b88:	af02      	add	r7, sp, #8
 8014b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	2200      	movs	r2, #0
 8014b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014b94:	f7f0 f906 	bl	8004da4 <HAL_GetTick>
 8014b98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	f003 0308 	and.w	r3, r3, #8
 8014ba4:	2b08      	cmp	r3, #8
 8014ba6:	d12f      	bne.n	8014c08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014bac:	9300      	str	r3, [sp, #0]
 8014bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f000 f88e 	bl	8014cd8 <UART_WaitOnFlagUntilTimeout>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d022      	beq.n	8014c08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bca:	e853 3f00 	ldrex	r3, [r3]
 8014bce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	461a      	mov	r2, r3
 8014bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014be0:	647b      	str	r3, [r7, #68]	; 0x44
 8014be2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014be4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014be8:	e841 2300 	strex	r3, r2, [r1]
 8014bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d1e6      	bne.n	8014bc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2220      	movs	r2, #32
 8014bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014c04:	2303      	movs	r3, #3
 8014c06:	e063      	b.n	8014cd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	f003 0304 	and.w	r3, r3, #4
 8014c12:	2b04      	cmp	r3, #4
 8014c14:	d149      	bne.n	8014caa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014c16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014c1a:	9300      	str	r3, [sp, #0]
 8014c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c1e:	2200      	movs	r2, #0
 8014c20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f000 f857 	bl	8014cd8 <UART_WaitOnFlagUntilTimeout>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d03c      	beq.n	8014caa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c38:	e853 3f00 	ldrex	r3, [r3]
 8014c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8014c3e:	6a3b      	ldr	r3, [r7, #32]
 8014c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014c44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	461a      	mov	r2, r3
 8014c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8014c50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c56:	e841 2300 	strex	r3, r2, [r1]
 8014c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d1e6      	bne.n	8014c30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	3308      	adds	r3, #8
 8014c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	e853 3f00 	ldrex	r3, [r3]
 8014c70:	60fb      	str	r3, [r7, #12]
   return(result);
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	f023 0301 	bic.w	r3, r3, #1
 8014c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	3308      	adds	r3, #8
 8014c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014c82:	61fa      	str	r2, [r7, #28]
 8014c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c86:	69b9      	ldr	r1, [r7, #24]
 8014c88:	69fa      	ldr	r2, [r7, #28]
 8014c8a:	e841 2300 	strex	r3, r2, [r1]
 8014c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d1e5      	bne.n	8014c62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	2220      	movs	r2, #32
 8014c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014ca6:	2303      	movs	r3, #3
 8014ca8:	e012      	b.n	8014cd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	2220      	movs	r2, #32
 8014cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2220      	movs	r2, #32
 8014cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2200      	movs	r2, #0
 8014cca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014cce:	2300      	movs	r3, #0
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3758      	adds	r7, #88	; 0x58
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	60f8      	str	r0, [r7, #12]
 8014ce0:	60b9      	str	r1, [r7, #8]
 8014ce2:	603b      	str	r3, [r7, #0]
 8014ce4:	4613      	mov	r3, r2
 8014ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014ce8:	e04f      	b.n	8014d8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014cea:	69bb      	ldr	r3, [r7, #24]
 8014cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014cf0:	d04b      	beq.n	8014d8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014cf2:	f7f0 f857 	bl	8004da4 <HAL_GetTick>
 8014cf6:	4602      	mov	r2, r0
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	1ad3      	subs	r3, r2, r3
 8014cfc:	69ba      	ldr	r2, [r7, #24]
 8014cfe:	429a      	cmp	r2, r3
 8014d00:	d302      	bcc.n	8014d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8014d02:	69bb      	ldr	r3, [r7, #24]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d101      	bne.n	8014d0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014d08:	2303      	movs	r3, #3
 8014d0a:	e04e      	b.n	8014daa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	f003 0304 	and.w	r3, r3, #4
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d037      	beq.n	8014d8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	2b80      	cmp	r3, #128	; 0x80
 8014d1e:	d034      	beq.n	8014d8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	2b40      	cmp	r3, #64	; 0x40
 8014d24:	d031      	beq.n	8014d8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	69db      	ldr	r3, [r3, #28]
 8014d2c:	f003 0308 	and.w	r3, r3, #8
 8014d30:	2b08      	cmp	r3, #8
 8014d32:	d110      	bne.n	8014d56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	2208      	movs	r2, #8
 8014d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	f000 f95b 	bl	8014ff8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2208      	movs	r2, #8
 8014d46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8014d52:	2301      	movs	r3, #1
 8014d54:	e029      	b.n	8014daa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	69db      	ldr	r3, [r3, #28]
 8014d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014d64:	d111      	bne.n	8014d8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014d70:	68f8      	ldr	r0, [r7, #12]
 8014d72:	f000 f941 	bl	8014ff8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2220      	movs	r2, #32
 8014d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	2200      	movs	r2, #0
 8014d82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8014d86:	2303      	movs	r3, #3
 8014d88:	e00f      	b.n	8014daa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	69da      	ldr	r2, [r3, #28]
 8014d90:	68bb      	ldr	r3, [r7, #8]
 8014d92:	4013      	ands	r3, r2
 8014d94:	68ba      	ldr	r2, [r7, #8]
 8014d96:	429a      	cmp	r2, r3
 8014d98:	bf0c      	ite	eq
 8014d9a:	2301      	moveq	r3, #1
 8014d9c:	2300      	movne	r3, #0
 8014d9e:	b2db      	uxtb	r3, r3
 8014da0:	461a      	mov	r2, r3
 8014da2:	79fb      	ldrb	r3, [r7, #7]
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d0a0      	beq.n	8014cea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014da8:	2300      	movs	r3, #0
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3710      	adds	r7, #16
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
	...

08014db4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014db4:	b480      	push	{r7}
 8014db6:	b0a3      	sub	sp, #140	; 0x8c
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	60f8      	str	r0, [r7, #12]
 8014dbc:	60b9      	str	r1, [r7, #8]
 8014dbe:	4613      	mov	r3, r2
 8014dc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	68ba      	ldr	r2, [r7, #8]
 8014dc6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	88fa      	ldrh	r2, [r7, #6]
 8014dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	88fa      	ldrh	r2, [r7, #6]
 8014dd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	689b      	ldr	r3, [r3, #8]
 8014de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014de6:	d10e      	bne.n	8014e06 <UART_Start_Receive_IT+0x52>
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	691b      	ldr	r3, [r3, #16]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d105      	bne.n	8014dfc <UART_Start_Receive_IT+0x48>
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014df6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014dfa:	e02d      	b.n	8014e58 <UART_Start_Receive_IT+0xa4>
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	22ff      	movs	r2, #255	; 0xff
 8014e00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e04:	e028      	b.n	8014e58 <UART_Start_Receive_IT+0xa4>
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	689b      	ldr	r3, [r3, #8]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d10d      	bne.n	8014e2a <UART_Start_Receive_IT+0x76>
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	691b      	ldr	r3, [r3, #16]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d104      	bne.n	8014e20 <UART_Start_Receive_IT+0x6c>
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	22ff      	movs	r2, #255	; 0xff
 8014e1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e1e:	e01b      	b.n	8014e58 <UART_Start_Receive_IT+0xa4>
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	227f      	movs	r2, #127	; 0x7f
 8014e24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e28:	e016      	b.n	8014e58 <UART_Start_Receive_IT+0xa4>
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	689b      	ldr	r3, [r3, #8]
 8014e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014e32:	d10d      	bne.n	8014e50 <UART_Start_Receive_IT+0x9c>
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	691b      	ldr	r3, [r3, #16]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d104      	bne.n	8014e46 <UART_Start_Receive_IT+0x92>
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	227f      	movs	r2, #127	; 0x7f
 8014e40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e44:	e008      	b.n	8014e58 <UART_Start_Receive_IT+0xa4>
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	223f      	movs	r2, #63	; 0x3f
 8014e4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014e4e:	e003      	b.n	8014e58 <UART_Start_Receive_IT+0xa4>
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	2200      	movs	r2, #0
 8014e54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	2222      	movs	r2, #34	; 0x22
 8014e64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	3308      	adds	r3, #8
 8014e6e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e72:	e853 3f00 	ldrex	r3, [r3]
 8014e76:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8014e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e7a:	f043 0301 	orr.w	r3, r3, #1
 8014e7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	3308      	adds	r3, #8
 8014e88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014e8c:	673a      	str	r2, [r7, #112]	; 0x70
 8014e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8014e92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014e94:	e841 2300 	strex	r3, r2, [r1]
 8014e98:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8014e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d1e3      	bne.n	8014e68 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014ea8:	d14f      	bne.n	8014f4a <UART_Start_Receive_IT+0x196>
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014eb0:	88fa      	ldrh	r2, [r7, #6]
 8014eb2:	429a      	cmp	r2, r3
 8014eb4:	d349      	bcc.n	8014f4a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	689b      	ldr	r3, [r3, #8]
 8014eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014ebe:	d107      	bne.n	8014ed0 <UART_Start_Receive_IT+0x11c>
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	691b      	ldr	r3, [r3, #16]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d103      	bne.n	8014ed0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	4a47      	ldr	r2, [pc, #284]	; (8014fe8 <UART_Start_Receive_IT+0x234>)
 8014ecc:	675a      	str	r2, [r3, #116]	; 0x74
 8014ece:	e002      	b.n	8014ed6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	4a46      	ldr	r2, [pc, #280]	; (8014fec <UART_Start_Receive_IT+0x238>)
 8014ed4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	691b      	ldr	r3, [r3, #16]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d01a      	beq.n	8014f14 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ee6:	e853 3f00 	ldrex	r3, [r3]
 8014eea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014ef2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	461a      	mov	r2, r3
 8014efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014f00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014f02:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014f06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014f08:	e841 2300 	strex	r3, r2, [r1]
 8014f0c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d1e4      	bne.n	8014ede <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	3308      	adds	r3, #8
 8014f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f1e:	e853 3f00 	ldrex	r3, [r3]
 8014f22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014f2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	3308      	adds	r3, #8
 8014f32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014f34:	64ba      	str	r2, [r7, #72]	; 0x48
 8014f36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014f3c:	e841 2300 	strex	r3, r2, [r1]
 8014f40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d1e5      	bne.n	8014f14 <UART_Start_Receive_IT+0x160>
 8014f48:	e046      	b.n	8014fd8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	689b      	ldr	r3, [r3, #8]
 8014f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014f52:	d107      	bne.n	8014f64 <UART_Start_Receive_IT+0x1b0>
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	691b      	ldr	r3, [r3, #16]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d103      	bne.n	8014f64 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	4a24      	ldr	r2, [pc, #144]	; (8014ff0 <UART_Start_Receive_IT+0x23c>)
 8014f60:	675a      	str	r2, [r3, #116]	; 0x74
 8014f62:	e002      	b.n	8014f6a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	4a23      	ldr	r2, [pc, #140]	; (8014ff4 <UART_Start_Receive_IT+0x240>)
 8014f68:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	691b      	ldr	r3, [r3, #16]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d019      	beq.n	8014fa6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f7a:	e853 3f00 	ldrex	r3, [r3]
 8014f7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f82:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8014f86:	677b      	str	r3, [r7, #116]	; 0x74
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f90:	637b      	str	r3, [r7, #52]	; 0x34
 8014f92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f98:	e841 2300 	strex	r3, r2, [r1]
 8014f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d1e6      	bne.n	8014f72 <UART_Start_Receive_IT+0x1be>
 8014fa4:	e018      	b.n	8014fd8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	e853 3f00 	ldrex	r3, [r3]
 8014fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	f043 0320 	orr.w	r3, r3, #32
 8014fba:	67bb      	str	r3, [r7, #120]	; 0x78
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	461a      	mov	r2, r3
 8014fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014fc4:	623b      	str	r3, [r7, #32]
 8014fc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fc8:	69f9      	ldr	r1, [r7, #28]
 8014fca:	6a3a      	ldr	r2, [r7, #32]
 8014fcc:	e841 2300 	strex	r3, r2, [r1]
 8014fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8014fd2:	69bb      	ldr	r3, [r7, #24]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d1e6      	bne.n	8014fa6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8014fd8:	2300      	movs	r3, #0
}
 8014fda:	4618      	mov	r0, r3
 8014fdc:	378c      	adds	r7, #140	; 0x8c
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe4:	4770      	bx	lr
 8014fe6:	bf00      	nop
 8014fe8:	08015819 	.word	0x08015819
 8014fec:	080154b9 	.word	0x080154b9
 8014ff0:	08015301 	.word	0x08015301
 8014ff4:	08015149 	.word	0x08015149

08014ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014ff8:	b480      	push	{r7}
 8014ffa:	b095      	sub	sp, #84	; 0x54
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015008:	e853 3f00 	ldrex	r3, [r3]
 801500c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	461a      	mov	r2, r3
 801501c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801501e:	643b      	str	r3, [r7, #64]	; 0x40
 8015020:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015022:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015026:	e841 2300 	strex	r3, r2, [r1]
 801502a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801502e:	2b00      	cmp	r3, #0
 8015030:	d1e6      	bne.n	8015000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	3308      	adds	r3, #8
 8015038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801503a:	6a3b      	ldr	r3, [r7, #32]
 801503c:	e853 3f00 	ldrex	r3, [r3]
 8015040:	61fb      	str	r3, [r7, #28]
   return(result);
 8015042:	69fa      	ldr	r2, [r7, #28]
 8015044:	4b1e      	ldr	r3, [pc, #120]	; (80150c0 <UART_EndRxTransfer+0xc8>)
 8015046:	4013      	ands	r3, r2
 8015048:	64bb      	str	r3, [r7, #72]	; 0x48
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	3308      	adds	r3, #8
 8015050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015054:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801505a:	e841 2300 	strex	r3, r2, [r1]
 801505e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015062:	2b00      	cmp	r3, #0
 8015064:	d1e5      	bne.n	8015032 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801506a:	2b01      	cmp	r3, #1
 801506c:	d118      	bne.n	80150a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	e853 3f00 	ldrex	r3, [r3]
 801507a:	60bb      	str	r3, [r7, #8]
   return(result);
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	f023 0310 	bic.w	r3, r3, #16
 8015082:	647b      	str	r3, [r7, #68]	; 0x44
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	461a      	mov	r2, r3
 801508a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801508c:	61bb      	str	r3, [r7, #24]
 801508e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015090:	6979      	ldr	r1, [r7, #20]
 8015092:	69ba      	ldr	r2, [r7, #24]
 8015094:	e841 2300 	strex	r3, r2, [r1]
 8015098:	613b      	str	r3, [r7, #16]
   return(result);
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d1e6      	bne.n	801506e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2220      	movs	r2, #32
 80150a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2200      	movs	r2, #0
 80150ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	2200      	movs	r2, #0
 80150b2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80150b4:	bf00      	nop
 80150b6:	3754      	adds	r7, #84	; 0x54
 80150b8:	46bd      	mov	sp, r7
 80150ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150be:	4770      	bx	lr
 80150c0:	effffffe 	.word	0xeffffffe

080150c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b084      	sub	sp, #16
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	2200      	movs	r2, #0
 80150d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2200      	movs	r2, #0
 80150de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80150e2:	68f8      	ldr	r0, [r7, #12]
 80150e4:	f7fe ff2e 	bl	8013f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80150e8:	bf00      	nop
 80150ea:	3710      	adds	r7, #16
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b088      	sub	sp, #32
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	e853 3f00 	ldrex	r3, [r3]
 8015104:	60bb      	str	r3, [r7, #8]
   return(result);
 8015106:	68bb      	ldr	r3, [r7, #8]
 8015108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801510c:	61fb      	str	r3, [r7, #28]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	461a      	mov	r2, r3
 8015114:	69fb      	ldr	r3, [r7, #28]
 8015116:	61bb      	str	r3, [r7, #24]
 8015118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801511a:	6979      	ldr	r1, [r7, #20]
 801511c:	69ba      	ldr	r2, [r7, #24]
 801511e:	e841 2300 	strex	r3, r2, [r1]
 8015122:	613b      	str	r3, [r7, #16]
   return(result);
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d1e6      	bne.n	80150f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2220      	movs	r2, #32
 801512e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2200      	movs	r2, #0
 8015136:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f7fe fef9 	bl	8013f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801513e:	bf00      	nop
 8015140:	3720      	adds	r7, #32
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
	...

08015148 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b09c      	sub	sp, #112	; 0x70
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015156:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015160:	2b22      	cmp	r3, #34	; 0x22
 8015162:	f040 80be 	bne.w	80152e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801516c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015170:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015174:	b2d9      	uxtb	r1, r3
 8015176:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801517a:	b2da      	uxtb	r2, r3
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015180:	400a      	ands	r2, r1
 8015182:	b2d2      	uxtb	r2, r2
 8015184:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801518a:	1c5a      	adds	r2, r3, #1
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015196:	b29b      	uxth	r3, r3
 8015198:	3b01      	subs	r3, #1
 801519a:	b29a      	uxth	r2, r3
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	f040 80a1 	bne.w	80152f2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151b8:	e853 3f00 	ldrex	r3, [r3]
 80151bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80151be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80151c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	461a      	mov	r2, r3
 80151cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80151d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80151d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80151d6:	e841 2300 	strex	r3, r2, [r1]
 80151da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80151dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d1e6      	bne.n	80151b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	3308      	adds	r3, #8
 80151e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151ec:	e853 3f00 	ldrex	r3, [r3]
 80151f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80151f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151f4:	f023 0301 	bic.w	r3, r3, #1
 80151f8:	667b      	str	r3, [r7, #100]	; 0x64
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	3308      	adds	r3, #8
 8015200:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015202:	647a      	str	r2, [r7, #68]	; 0x44
 8015204:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015206:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801520a:	e841 2300 	strex	r3, r2, [r1]
 801520e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015212:	2b00      	cmp	r3, #0
 8015214:	d1e5      	bne.n	80151e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2220      	movs	r2, #32
 801521a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	2200      	movs	r2, #0
 8015222:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	2200      	movs	r2, #0
 8015228:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	4a33      	ldr	r2, [pc, #204]	; (80152fc <UART_RxISR_8BIT+0x1b4>)
 8015230:	4293      	cmp	r3, r2
 8015232:	d01f      	beq.n	8015274 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	685b      	ldr	r3, [r3, #4]
 801523a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801523e:	2b00      	cmp	r3, #0
 8015240:	d018      	beq.n	8015274 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801524a:	e853 3f00 	ldrex	r3, [r3]
 801524e:	623b      	str	r3, [r7, #32]
   return(result);
 8015250:	6a3b      	ldr	r3, [r7, #32]
 8015252:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015256:	663b      	str	r3, [r7, #96]	; 0x60
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	461a      	mov	r2, r3
 801525e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015260:	633b      	str	r3, [r7, #48]	; 0x30
 8015262:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015268:	e841 2300 	strex	r3, r2, [r1]
 801526c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015270:	2b00      	cmp	r3, #0
 8015272:	d1e6      	bne.n	8015242 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015278:	2b01      	cmp	r3, #1
 801527a:	d12e      	bne.n	80152da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2200      	movs	r2, #0
 8015280:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015288:	693b      	ldr	r3, [r7, #16]
 801528a:	e853 3f00 	ldrex	r3, [r3]
 801528e:	60fb      	str	r3, [r7, #12]
   return(result);
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f023 0310 	bic.w	r3, r3, #16
 8015296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	461a      	mov	r2, r3
 801529e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80152a0:	61fb      	str	r3, [r7, #28]
 80152a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152a4:	69b9      	ldr	r1, [r7, #24]
 80152a6:	69fa      	ldr	r2, [r7, #28]
 80152a8:	e841 2300 	strex	r3, r2, [r1]
 80152ac:	617b      	str	r3, [r7, #20]
   return(result);
 80152ae:	697b      	ldr	r3, [r7, #20]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d1e6      	bne.n	8015282 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	69db      	ldr	r3, [r3, #28]
 80152ba:	f003 0310 	and.w	r3, r3, #16
 80152be:	2b10      	cmp	r3, #16
 80152c0:	d103      	bne.n	80152ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	2210      	movs	r2, #16
 80152c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80152d0:	4619      	mov	r1, r3
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f7fe fe40 	bl	8013f58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80152d8:	e00b      	b.n	80152f2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f7ec fe2c 	bl	8001f38 <HAL_UART_RxCpltCallback>
}
 80152e0:	e007      	b.n	80152f2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	699a      	ldr	r2, [r3, #24]
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	f042 0208 	orr.w	r2, r2, #8
 80152f0:	619a      	str	r2, [r3, #24]
}
 80152f2:	bf00      	nop
 80152f4:	3770      	adds	r7, #112	; 0x70
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}
 80152fa:	bf00      	nop
 80152fc:	58000c00 	.word	0x58000c00

08015300 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b09c      	sub	sp, #112	; 0x70
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801530e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015318:	2b22      	cmp	r3, #34	; 0x22
 801531a:	f040 80be 	bne.w	801549a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015324:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801532c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801532e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015332:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015336:	4013      	ands	r3, r2
 8015338:	b29a      	uxth	r2, r3
 801533a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801533c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015342:	1c9a      	adds	r2, r3, #2
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801534e:	b29b      	uxth	r3, r3
 8015350:	3b01      	subs	r3, #1
 8015352:	b29a      	uxth	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015360:	b29b      	uxth	r3, r3
 8015362:	2b00      	cmp	r3, #0
 8015364:	f040 80a1 	bne.w	80154aa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801536e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015370:	e853 3f00 	ldrex	r3, [r3]
 8015374:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801537c:	667b      	str	r3, [r7, #100]	; 0x64
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	461a      	mov	r2, r3
 8015384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015386:	657b      	str	r3, [r7, #84]	; 0x54
 8015388:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801538a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801538c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801538e:	e841 2300 	strex	r3, r2, [r1]
 8015392:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015396:	2b00      	cmp	r3, #0
 8015398:	d1e6      	bne.n	8015368 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	3308      	adds	r3, #8
 80153a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153a4:	e853 3f00 	ldrex	r3, [r3]
 80153a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80153aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ac:	f023 0301 	bic.w	r3, r3, #1
 80153b0:	663b      	str	r3, [r7, #96]	; 0x60
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	3308      	adds	r3, #8
 80153b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80153ba:	643a      	str	r2, [r7, #64]	; 0x40
 80153bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80153c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80153c2:	e841 2300 	strex	r3, r2, [r1]
 80153c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80153c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d1e5      	bne.n	801539a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2220      	movs	r2, #32
 80153d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	2200      	movs	r2, #0
 80153da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2200      	movs	r2, #0
 80153e0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	4a33      	ldr	r2, [pc, #204]	; (80154b4 <UART_RxISR_16BIT+0x1b4>)
 80153e8:	4293      	cmp	r3, r2
 80153ea:	d01f      	beq.n	801542c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d018      	beq.n	801542c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015400:	6a3b      	ldr	r3, [r7, #32]
 8015402:	e853 3f00 	ldrex	r3, [r3]
 8015406:	61fb      	str	r3, [r7, #28]
   return(result);
 8015408:	69fb      	ldr	r3, [r7, #28]
 801540a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801540e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	461a      	mov	r2, r3
 8015416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015418:	62fb      	str	r3, [r7, #44]	; 0x2c
 801541a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801541c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801541e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015420:	e841 2300 	strex	r3, r2, [r1]
 8015424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015428:	2b00      	cmp	r3, #0
 801542a:	d1e6      	bne.n	80153fa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015430:	2b01      	cmp	r3, #1
 8015432:	d12e      	bne.n	8015492 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	2200      	movs	r2, #0
 8015438:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	e853 3f00 	ldrex	r3, [r3]
 8015446:	60bb      	str	r3, [r7, #8]
   return(result);
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	f023 0310 	bic.w	r3, r3, #16
 801544e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	461a      	mov	r2, r3
 8015456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015458:	61bb      	str	r3, [r7, #24]
 801545a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801545c:	6979      	ldr	r1, [r7, #20]
 801545e:	69ba      	ldr	r2, [r7, #24]
 8015460:	e841 2300 	strex	r3, r2, [r1]
 8015464:	613b      	str	r3, [r7, #16]
   return(result);
 8015466:	693b      	ldr	r3, [r7, #16]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d1e6      	bne.n	801543a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	69db      	ldr	r3, [r3, #28]
 8015472:	f003 0310 	and.w	r3, r3, #16
 8015476:	2b10      	cmp	r3, #16
 8015478:	d103      	bne.n	8015482 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	2210      	movs	r2, #16
 8015480:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015488:	4619      	mov	r1, r3
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f7fe fd64 	bl	8013f58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015490:	e00b      	b.n	80154aa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f7ec fd50 	bl	8001f38 <HAL_UART_RxCpltCallback>
}
 8015498:	e007      	b.n	80154aa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	699a      	ldr	r2, [r3, #24]
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	f042 0208 	orr.w	r2, r2, #8
 80154a8:	619a      	str	r2, [r3, #24]
}
 80154aa:	bf00      	nop
 80154ac:	3770      	adds	r7, #112	; 0x70
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}
 80154b2:	bf00      	nop
 80154b4:	58000c00 	.word	0x58000c00

080154b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b0ac      	sub	sp, #176	; 0xb0
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80154c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	69db      	ldr	r3, [r3, #28]
 80154d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	689b      	ldr	r3, [r3, #8]
 80154e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80154ee:	2b22      	cmp	r3, #34	; 0x22
 80154f0:	f040 8180 	bne.w	80157f4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80154fa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80154fe:	e123      	b.n	8015748 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015506:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801550a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801550e:	b2d9      	uxtb	r1, r3
 8015510:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8015514:	b2da      	uxtb	r2, r3
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801551a:	400a      	ands	r2, r1
 801551c:	b2d2      	uxtb	r2, r2
 801551e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015524:	1c5a      	adds	r2, r3, #1
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015530:	b29b      	uxth	r3, r3
 8015532:	3b01      	subs	r3, #1
 8015534:	b29a      	uxth	r2, r3
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	69db      	ldr	r3, [r3, #28]
 8015542:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801554a:	f003 0307 	and.w	r3, r3, #7
 801554e:	2b00      	cmp	r3, #0
 8015550:	d053      	beq.n	80155fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015556:	f003 0301 	and.w	r3, r3, #1
 801555a:	2b00      	cmp	r3, #0
 801555c:	d011      	beq.n	8015582 <UART_RxISR_8BIT_FIFOEN+0xca>
 801555e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015566:	2b00      	cmp	r3, #0
 8015568:	d00b      	beq.n	8015582 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	2201      	movs	r2, #1
 8015570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015578:	f043 0201 	orr.w	r2, r3, #1
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015586:	f003 0302 	and.w	r3, r3, #2
 801558a:	2b00      	cmp	r3, #0
 801558c:	d011      	beq.n	80155b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801558e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015592:	f003 0301 	and.w	r3, r3, #1
 8015596:	2b00      	cmp	r3, #0
 8015598:	d00b      	beq.n	80155b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	2202      	movs	r2, #2
 80155a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80155a8:	f043 0204 	orr.w	r2, r3, #4
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80155b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155b6:	f003 0304 	and.w	r3, r3, #4
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d011      	beq.n	80155e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80155be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80155c2:	f003 0301 	and.w	r3, r3, #1
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d00b      	beq.n	80155e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	2204      	movs	r2, #4
 80155d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80155d8:	f043 0202 	orr.w	r2, r3, #2
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d006      	beq.n	80155fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f7fe fca9 	bl	8013f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	2200      	movs	r2, #0
 80155f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015600:	b29b      	uxth	r3, r3
 8015602:	2b00      	cmp	r3, #0
 8015604:	f040 80a0 	bne.w	8015748 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801560e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015610:	e853 3f00 	ldrex	r3, [r3]
 8015614:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8015616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801561c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	461a      	mov	r2, r3
 8015626:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801562a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801562c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801562e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8015630:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015632:	e841 2300 	strex	r3, r2, [r1]
 8015636:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8015638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801563a:	2b00      	cmp	r3, #0
 801563c:	d1e4      	bne.n	8015608 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	3308      	adds	r3, #8
 8015644:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015648:	e853 3f00 	ldrex	r3, [r3]
 801564c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801564e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015650:	4b6e      	ldr	r3, [pc, #440]	; (801580c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8015652:	4013      	ands	r3, r2
 8015654:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	3308      	adds	r3, #8
 801565e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015662:	66ba      	str	r2, [r7, #104]	; 0x68
 8015664:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015666:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015668:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801566a:	e841 2300 	strex	r3, r2, [r1]
 801566e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015672:	2b00      	cmp	r3, #0
 8015674:	d1e3      	bne.n	801563e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2220      	movs	r2, #32
 801567a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	2200      	movs	r2, #0
 8015682:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2200      	movs	r2, #0
 8015688:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	4a60      	ldr	r2, [pc, #384]	; (8015810 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8015690:	4293      	cmp	r3, r2
 8015692:	d021      	beq.n	80156d8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	685b      	ldr	r3, [r3, #4]
 801569a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d01a      	beq.n	80156d8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80156aa:	e853 3f00 	ldrex	r3, [r3]
 80156ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80156b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80156b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	461a      	mov	r2, r3
 80156c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80156c4:	657b      	str	r3, [r7, #84]	; 0x54
 80156c6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80156ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80156cc:	e841 2300 	strex	r3, r2, [r1]
 80156d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80156d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d1e4      	bne.n	80156a2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156dc:	2b01      	cmp	r3, #1
 80156de:	d130      	bne.n	8015742 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2200      	movs	r2, #0
 80156e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156ee:	e853 3f00 	ldrex	r3, [r3]
 80156f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80156f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f6:	f023 0310 	bic.w	r3, r3, #16
 80156fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	461a      	mov	r2, r3
 8015704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015708:	643b      	str	r3, [r7, #64]	; 0x40
 801570a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801570c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801570e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015710:	e841 2300 	strex	r3, r2, [r1]
 8015714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015718:	2b00      	cmp	r3, #0
 801571a:	d1e4      	bne.n	80156e6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	69db      	ldr	r3, [r3, #28]
 8015722:	f003 0310 	and.w	r3, r3, #16
 8015726:	2b10      	cmp	r3, #16
 8015728:	d103      	bne.n	8015732 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	2210      	movs	r2, #16
 8015730:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015738:	4619      	mov	r1, r3
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f7fe fc0c 	bl	8013f58 <HAL_UARTEx_RxEventCallback>
 8015740:	e002      	b.n	8015748 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f7ec fbf8 	bl	8001f38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015748:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801574c:	2b00      	cmp	r3, #0
 801574e:	d006      	beq.n	801575e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8015750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015754:	f003 0320 	and.w	r3, r3, #32
 8015758:	2b00      	cmp	r3, #0
 801575a:	f47f aed1 	bne.w	8015500 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015764:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015768:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801576c:	2b00      	cmp	r3, #0
 801576e:	d049      	beq.n	8015804 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015776:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801577a:	429a      	cmp	r2, r3
 801577c:	d242      	bcs.n	8015804 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	3308      	adds	r3, #8
 8015784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015786:	6a3b      	ldr	r3, [r7, #32]
 8015788:	e853 3f00 	ldrex	r3, [r3]
 801578c:	61fb      	str	r3, [r7, #28]
   return(result);
 801578e:	69fb      	ldr	r3, [r7, #28]
 8015790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	3308      	adds	r3, #8
 801579e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80157a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80157a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80157a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157aa:	e841 2300 	strex	r3, r2, [r1]
 80157ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80157b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d1e3      	bne.n	801577e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	4a16      	ldr	r2, [pc, #88]	; (8015814 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80157ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	e853 3f00 	ldrex	r3, [r3]
 80157c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	f043 0320 	orr.w	r3, r3, #32
 80157d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	461a      	mov	r2, r3
 80157da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80157de:	61bb      	str	r3, [r7, #24]
 80157e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157e2:	6979      	ldr	r1, [r7, #20]
 80157e4:	69ba      	ldr	r2, [r7, #24]
 80157e6:	e841 2300 	strex	r3, r2, [r1]
 80157ea:	613b      	str	r3, [r7, #16]
   return(result);
 80157ec:	693b      	ldr	r3, [r7, #16]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d1e4      	bne.n	80157bc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80157f2:	e007      	b.n	8015804 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	699a      	ldr	r2, [r3, #24]
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	f042 0208 	orr.w	r2, r2, #8
 8015802:	619a      	str	r2, [r3, #24]
}
 8015804:	bf00      	nop
 8015806:	37b0      	adds	r7, #176	; 0xb0
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}
 801580c:	effffffe 	.word	0xeffffffe
 8015810:	58000c00 	.word	0x58000c00
 8015814:	08015149 	.word	0x08015149

08015818 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b0ae      	sub	sp, #184	; 0xb8
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015826:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	69db      	ldr	r3, [r3, #28]
 8015830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	689b      	ldr	r3, [r3, #8]
 8015844:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801584e:	2b22      	cmp	r3, #34	; 0x22
 8015850:	f040 8184 	bne.w	8015b5c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801585a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801585e:	e127      	b.n	8015ab0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015866:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801586e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8015872:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8015876:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801587a:	4013      	ands	r3, r2
 801587c:	b29a      	uxth	r2, r3
 801587e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015882:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015888:	1c9a      	adds	r2, r3, #2
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015894:	b29b      	uxth	r3, r3
 8015896:	3b01      	subs	r3, #1
 8015898:	b29a      	uxth	r2, r3
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	69db      	ldr	r3, [r3, #28]
 80158a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80158aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80158ae:	f003 0307 	and.w	r3, r3, #7
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d053      	beq.n	801595e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80158b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80158ba:	f003 0301 	and.w	r3, r3, #1
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d011      	beq.n	80158e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80158c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80158c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d00b      	beq.n	80158e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	2201      	movs	r2, #1
 80158d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158dc:	f043 0201 	orr.w	r2, r3, #1
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80158e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80158ea:	f003 0302 	and.w	r3, r3, #2
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d011      	beq.n	8015916 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80158f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80158f6:	f003 0301 	and.w	r3, r3, #1
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d00b      	beq.n	8015916 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	2202      	movs	r2, #2
 8015904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801590c:	f043 0204 	orr.w	r2, r3, #4
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015916:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801591a:	f003 0304 	and.w	r3, r3, #4
 801591e:	2b00      	cmp	r3, #0
 8015920:	d011      	beq.n	8015946 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8015922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015926:	f003 0301 	and.w	r3, r3, #1
 801592a:	2b00      	cmp	r3, #0
 801592c:	d00b      	beq.n	8015946 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	2204      	movs	r2, #4
 8015934:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801593c:	f043 0202 	orr.w	r2, r3, #2
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801594c:	2b00      	cmp	r3, #0
 801594e:	d006      	beq.n	801595e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f7fe faf7 	bl	8013f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	2200      	movs	r2, #0
 801595a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015964:	b29b      	uxth	r3, r3
 8015966:	2b00      	cmp	r3, #0
 8015968:	f040 80a2 	bne.w	8015ab0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015974:	e853 3f00 	ldrex	r3, [r3]
 8015978:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801597a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801597c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	461a      	mov	r2, r3
 801598a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801598e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015992:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015994:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015996:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801599a:	e841 2300 	strex	r3, r2, [r1]
 801599e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80159a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d1e2      	bne.n	801596c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	3308      	adds	r3, #8
 80159ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80159b0:	e853 3f00 	ldrex	r3, [r3]
 80159b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80159b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80159b8:	4b6e      	ldr	r3, [pc, #440]	; (8015b74 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80159ba:	4013      	ands	r3, r2
 80159bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	3308      	adds	r3, #8
 80159c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80159ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80159cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80159d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80159d2:	e841 2300 	strex	r3, r2, [r1]
 80159d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80159d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d1e3      	bne.n	80159a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2220      	movs	r2, #32
 80159e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2200      	movs	r2, #0
 80159ea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	2200      	movs	r2, #0
 80159f0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	4a60      	ldr	r2, [pc, #384]	; (8015b78 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80159f8:	4293      	cmp	r3, r2
 80159fa:	d021      	beq.n	8015a40 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	685b      	ldr	r3, [r3, #4]
 8015a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d01a      	beq.n	8015a40 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a12:	e853 3f00 	ldrex	r3, [r3]
 8015a16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015a1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	461a      	mov	r2, r3
 8015a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015a2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8015a2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015a34:	e841 2300 	strex	r3, r2, [r1]
 8015a38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d1e4      	bne.n	8015a0a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	d130      	bne.n	8015aaa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a56:	e853 3f00 	ldrex	r3, [r3]
 8015a5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a5e:	f023 0310 	bic.w	r3, r3, #16
 8015a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	461a      	mov	r2, r3
 8015a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015a70:	647b      	str	r3, [r7, #68]	; 0x44
 8015a72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015a76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015a78:	e841 2300 	strex	r3, r2, [r1]
 8015a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d1e4      	bne.n	8015a4e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	69db      	ldr	r3, [r3, #28]
 8015a8a:	f003 0310 	and.w	r3, r3, #16
 8015a8e:	2b10      	cmp	r3, #16
 8015a90:	d103      	bne.n	8015a9a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	2210      	movs	r2, #16
 8015a98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015aa0:	4619      	mov	r1, r3
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f7fe fa58 	bl	8013f58 <HAL_UARTEx_RxEventCallback>
 8015aa8:	e002      	b.n	8015ab0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015aaa:	6878      	ldr	r0, [r7, #4]
 8015aac:	f7ec fa44 	bl	8001f38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015ab0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d006      	beq.n	8015ac6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8015ab8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015abc:	f003 0320 	and.w	r3, r3, #32
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	f47f aecd 	bne.w	8015860 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015acc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015ad0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d049      	beq.n	8015b6c <UART_RxISR_16BIT_FIFOEN+0x354>
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015ade:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d242      	bcs.n	8015b6c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	3308      	adds	r3, #8
 8015aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015af0:	e853 3f00 	ldrex	r3, [r3]
 8015af4:	623b      	str	r3, [r7, #32]
   return(result);
 8015af6:	6a3b      	ldr	r3, [r7, #32]
 8015af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	3308      	adds	r3, #8
 8015b06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015b0a:	633a      	str	r2, [r7, #48]	; 0x30
 8015b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b12:	e841 2300 	strex	r3, r2, [r1]
 8015b16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d1e3      	bne.n	8015ae6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	4a16      	ldr	r2, [pc, #88]	; (8015b7c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8015b22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b2a:	693b      	ldr	r3, [r7, #16]
 8015b2c:	e853 3f00 	ldrex	r3, [r3]
 8015b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	f043 0320 	orr.w	r3, r3, #32
 8015b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	461a      	mov	r2, r3
 8015b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015b46:	61fb      	str	r3, [r7, #28]
 8015b48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b4a:	69b9      	ldr	r1, [r7, #24]
 8015b4c:	69fa      	ldr	r2, [r7, #28]
 8015b4e:	e841 2300 	strex	r3, r2, [r1]
 8015b52:	617b      	str	r3, [r7, #20]
   return(result);
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d1e4      	bne.n	8015b24 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015b5a:	e007      	b.n	8015b6c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	699a      	ldr	r2, [r3, #24]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	f042 0208 	orr.w	r2, r2, #8
 8015b6a:	619a      	str	r2, [r3, #24]
}
 8015b6c:	bf00      	nop
 8015b6e:	37b8      	adds	r7, #184	; 0xb8
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd80      	pop	{r7, pc}
 8015b74:	effffffe 	.word	0xeffffffe
 8015b78:	58000c00 	.word	0x58000c00
 8015b7c:	08015301 	.word	0x08015301

08015b80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015b80:	b480      	push	{r7}
 8015b82:	b083      	sub	sp, #12
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015b88:	bf00      	nop
 8015b8a:	370c      	adds	r7, #12
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b92:	4770      	bx	lr

08015b94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015b94:	b480      	push	{r7}
 8015b96:	b083      	sub	sp, #12
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8015b9c:	bf00      	nop
 8015b9e:	370c      	adds	r7, #12
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr

08015ba8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015ba8:	b480      	push	{r7}
 8015baa:	b083      	sub	sp, #12
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015bb0:	bf00      	nop
 8015bb2:	370c      	adds	r7, #12
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bba:	4770      	bx	lr

08015bbc <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8015bbc:	b480      	push	{r7}
 8015bbe:	b089      	sub	sp, #36	; 0x24
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d101      	bne.n	8015bd2 <HAL_UARTEx_EnableStopMode+0x16>
 8015bce:	2302      	movs	r3, #2
 8015bd0:	e021      	b.n	8015c16 <HAL_UARTEx_EnableStopMode+0x5a>
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	e853 3f00 	ldrex	r3, [r3]
 8015be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	f043 0302 	orr.w	r3, r3, #2
 8015bee:	61fb      	str	r3, [r7, #28]
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	461a      	mov	r2, r3
 8015bf6:	69fb      	ldr	r3, [r7, #28]
 8015bf8:	61bb      	str	r3, [r7, #24]
 8015bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bfc:	6979      	ldr	r1, [r7, #20]
 8015bfe:	69ba      	ldr	r2, [r7, #24]
 8015c00:	e841 2300 	strex	r3, r2, [r1]
 8015c04:	613b      	str	r3, [r7, #16]
   return(result);
 8015c06:	693b      	ldr	r3, [r7, #16]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d1e6      	bne.n	8015bda <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015c14:	2300      	movs	r3, #0
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3724      	adds	r7, #36	; 0x24
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c20:	4770      	bx	lr

08015c22 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8015c22:	b580      	push	{r7, lr}
 8015c24:	b084      	sub	sp, #16
 8015c26:	af00      	add	r7, sp, #0
 8015c28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015c30:	2b01      	cmp	r3, #1
 8015c32:	d101      	bne.n	8015c38 <HAL_UARTEx_EnableFifoMode+0x16>
 8015c34:	2302      	movs	r3, #2
 8015c36:	e02b      	b.n	8015c90 <HAL_UARTEx_EnableFifoMode+0x6e>
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2224      	movs	r2, #36	; 0x24
 8015c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	681a      	ldr	r2, [r3, #0]
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	f022 0201 	bic.w	r2, r2, #1
 8015c5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015c66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8015c6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	68fa      	ldr	r2, [r7, #12]
 8015c76:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	f000 f8c3 	bl	8015e04 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2220      	movs	r2, #32
 8015c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	2200      	movs	r2, #0
 8015c8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015c8e:	2300      	movs	r3, #0
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3710      	adds	r7, #16
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}

08015c98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015c98:	b480      	push	{r7}
 8015c9a:	b085      	sub	sp, #20
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015ca6:	2b01      	cmp	r3, #1
 8015ca8:	d101      	bne.n	8015cae <HAL_UARTEx_DisableFifoMode+0x16>
 8015caa:	2302      	movs	r3, #2
 8015cac:	e027      	b.n	8015cfe <HAL_UARTEx_DisableFifoMode+0x66>
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	2201      	movs	r2, #1
 8015cb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	2224      	movs	r2, #36	; 0x24
 8015cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	681a      	ldr	r2, [r3, #0]
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	f022 0201 	bic.w	r2, r2, #1
 8015cd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015cdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	68fa      	ldr	r2, [r7, #12]
 8015cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	2220      	movs	r2, #32
 8015cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015cfc:	2300      	movs	r3, #0
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3714      	adds	r7, #20
 8015d02:	46bd      	mov	sp, r7
 8015d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d08:	4770      	bx	lr

08015d0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015d0a:	b580      	push	{r7, lr}
 8015d0c:	b084      	sub	sp, #16
 8015d0e:	af00      	add	r7, sp, #0
 8015d10:	6078      	str	r0, [r7, #4]
 8015d12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	d101      	bne.n	8015d22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015d1e:	2302      	movs	r3, #2
 8015d20:	e02d      	b.n	8015d7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	2201      	movs	r2, #1
 8015d26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	2224      	movs	r2, #36	; 0x24
 8015d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	681a      	ldr	r2, [r3, #0]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	f022 0201 	bic.w	r2, r2, #1
 8015d48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	689b      	ldr	r3, [r3, #8]
 8015d50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	683a      	ldr	r2, [r7, #0]
 8015d5a:	430a      	orrs	r2, r1
 8015d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015d5e:	6878      	ldr	r0, [r7, #4]
 8015d60:	f000 f850 	bl	8015e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	68fa      	ldr	r2, [r7, #12]
 8015d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2220      	movs	r2, #32
 8015d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2200      	movs	r2, #0
 8015d78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015d7c:	2300      	movs	r3, #0
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3710      	adds	r7, #16
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}

08015d86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015d86:	b580      	push	{r7, lr}
 8015d88:	b084      	sub	sp, #16
 8015d8a:	af00      	add	r7, sp, #0
 8015d8c:	6078      	str	r0, [r7, #4]
 8015d8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015d96:	2b01      	cmp	r3, #1
 8015d98:	d101      	bne.n	8015d9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015d9a:	2302      	movs	r3, #2
 8015d9c:	e02d      	b.n	8015dfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2201      	movs	r2, #1
 8015da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	2224      	movs	r2, #36	; 0x24
 8015daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	681a      	ldr	r2, [r3, #0]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	f022 0201 	bic.w	r2, r2, #1
 8015dc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	689b      	ldr	r3, [r3, #8]
 8015dcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	683a      	ldr	r2, [r7, #0]
 8015dd6:	430a      	orrs	r2, r1
 8015dd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f000 f812 	bl	8015e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	68fa      	ldr	r2, [r7, #12]
 8015de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2220      	movs	r2, #32
 8015dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2200      	movs	r2, #0
 8015df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015df8:	2300      	movs	r3, #0
}
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3710      	adds	r7, #16
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}
	...

08015e04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015e04:	b480      	push	{r7}
 8015e06:	b085      	sub	sp, #20
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d108      	bne.n	8015e26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2201      	movs	r2, #1
 8015e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2201      	movs	r2, #1
 8015e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015e24:	e031      	b.n	8015e8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015e26:	2310      	movs	r3, #16
 8015e28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015e2a:	2310      	movs	r3, #16
 8015e2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	689b      	ldr	r3, [r3, #8]
 8015e34:	0e5b      	lsrs	r3, r3, #25
 8015e36:	b2db      	uxtb	r3, r3
 8015e38:	f003 0307 	and.w	r3, r3, #7
 8015e3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	689b      	ldr	r3, [r3, #8]
 8015e44:	0f5b      	lsrs	r3, r3, #29
 8015e46:	b2db      	uxtb	r3, r3
 8015e48:	f003 0307 	and.w	r3, r3, #7
 8015e4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015e4e:	7bbb      	ldrb	r3, [r7, #14]
 8015e50:	7b3a      	ldrb	r2, [r7, #12]
 8015e52:	4911      	ldr	r1, [pc, #68]	; (8015e98 <UARTEx_SetNbDataToProcess+0x94>)
 8015e54:	5c8a      	ldrb	r2, [r1, r2]
 8015e56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015e5a:	7b3a      	ldrb	r2, [r7, #12]
 8015e5c:	490f      	ldr	r1, [pc, #60]	; (8015e9c <UARTEx_SetNbDataToProcess+0x98>)
 8015e5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015e60:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e64:	b29a      	uxth	r2, r3
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015e6c:	7bfb      	ldrb	r3, [r7, #15]
 8015e6e:	7b7a      	ldrb	r2, [r7, #13]
 8015e70:	4909      	ldr	r1, [pc, #36]	; (8015e98 <UARTEx_SetNbDataToProcess+0x94>)
 8015e72:	5c8a      	ldrb	r2, [r1, r2]
 8015e74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015e78:	7b7a      	ldrb	r2, [r7, #13]
 8015e7a:	4908      	ldr	r1, [pc, #32]	; (8015e9c <UARTEx_SetNbDataToProcess+0x98>)
 8015e7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015e7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e82:	b29a      	uxth	r2, r3
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8015e8a:	bf00      	nop
 8015e8c:	3714      	adds	r7, #20
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e94:	4770      	bx	lr
 8015e96:	bf00      	nop
 8015e98:	0801a1a4 	.word	0x0801a1a4
 8015e9c:	0801a1ac 	.word	0x0801a1ac

08015ea0 <__NVIC_SetPriority>:
{
 8015ea0:	b480      	push	{r7}
 8015ea2:	b083      	sub	sp, #12
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	6039      	str	r1, [r7, #0]
 8015eaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	db0a      	blt.n	8015eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	b2da      	uxtb	r2, r3
 8015eb8:	490c      	ldr	r1, [pc, #48]	; (8015eec <__NVIC_SetPriority+0x4c>)
 8015eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ebe:	0112      	lsls	r2, r2, #4
 8015ec0:	b2d2      	uxtb	r2, r2
 8015ec2:	440b      	add	r3, r1
 8015ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015ec8:	e00a      	b.n	8015ee0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	b2da      	uxtb	r2, r3
 8015ece:	4908      	ldr	r1, [pc, #32]	; (8015ef0 <__NVIC_SetPriority+0x50>)
 8015ed0:	88fb      	ldrh	r3, [r7, #6]
 8015ed2:	f003 030f 	and.w	r3, r3, #15
 8015ed6:	3b04      	subs	r3, #4
 8015ed8:	0112      	lsls	r2, r2, #4
 8015eda:	b2d2      	uxtb	r2, r2
 8015edc:	440b      	add	r3, r1
 8015ede:	761a      	strb	r2, [r3, #24]
}
 8015ee0:	bf00      	nop
 8015ee2:	370c      	adds	r7, #12
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eea:	4770      	bx	lr
 8015eec:	e000e100 	.word	0xe000e100
 8015ef0:	e000ed00 	.word	0xe000ed00

08015ef4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015ef8:	4b05      	ldr	r3, [pc, #20]	; (8015f10 <SysTick_Handler+0x1c>)
 8015efa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015efc:	f002 f958 	bl	80181b0 <xTaskGetSchedulerState>
 8015f00:	4603      	mov	r3, r0
 8015f02:	2b01      	cmp	r3, #1
 8015f04:	d001      	beq.n	8015f0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015f06:	f002 ff77 	bl	8018df8 <xPortSysTickHandler>
  }
}
 8015f0a:	bf00      	nop
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	bf00      	nop
 8015f10:	e000e010 	.word	0xe000e010

08015f14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015f14:	b580      	push	{r7, lr}
 8015f16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015f18:	2100      	movs	r1, #0
 8015f1a:	f06f 0004 	mvn.w	r0, #4
 8015f1e:	f7ff ffbf 	bl	8015ea0 <__NVIC_SetPriority>
#endif
}
 8015f22:	bf00      	nop
 8015f24:	bd80      	pop	{r7, pc}
	...

08015f28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015f28:	b480      	push	{r7}
 8015f2a:	b083      	sub	sp, #12
 8015f2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f2e:	f3ef 8305 	mrs	r3, IPSR
 8015f32:	603b      	str	r3, [r7, #0]
  return(result);
 8015f34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d003      	beq.n	8015f42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015f3a:	f06f 0305 	mvn.w	r3, #5
 8015f3e:	607b      	str	r3, [r7, #4]
 8015f40:	e00c      	b.n	8015f5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015f42:	4b0a      	ldr	r3, [pc, #40]	; (8015f6c <osKernelInitialize+0x44>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d105      	bne.n	8015f56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015f4a:	4b08      	ldr	r3, [pc, #32]	; (8015f6c <osKernelInitialize+0x44>)
 8015f4c:	2201      	movs	r2, #1
 8015f4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015f50:	2300      	movs	r3, #0
 8015f52:	607b      	str	r3, [r7, #4]
 8015f54:	e002      	b.n	8015f5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015f5c:	687b      	ldr	r3, [r7, #4]
}
 8015f5e:	4618      	mov	r0, r3
 8015f60:	370c      	adds	r7, #12
 8015f62:	46bd      	mov	sp, r7
 8015f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f68:	4770      	bx	lr
 8015f6a:	bf00      	nop
 8015f6c:	2400201c 	.word	0x2400201c

08015f70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f76:	f3ef 8305 	mrs	r3, IPSR
 8015f7a:	603b      	str	r3, [r7, #0]
  return(result);
 8015f7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d003      	beq.n	8015f8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8015f82:	f06f 0305 	mvn.w	r3, #5
 8015f86:	607b      	str	r3, [r7, #4]
 8015f88:	e010      	b.n	8015fac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015f8a:	4b0b      	ldr	r3, [pc, #44]	; (8015fb8 <osKernelStart+0x48>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	2b01      	cmp	r3, #1
 8015f90:	d109      	bne.n	8015fa6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015f92:	f7ff ffbf 	bl	8015f14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015f96:	4b08      	ldr	r3, [pc, #32]	; (8015fb8 <osKernelStart+0x48>)
 8015f98:	2202      	movs	r2, #2
 8015f9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015f9c:	f001 fc0c 	bl	80177b8 <vTaskStartScheduler>
      stat = osOK;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	607b      	str	r3, [r7, #4]
 8015fa4:	e002      	b.n	8015fac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015fac:	687b      	ldr	r3, [r7, #4]
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3708      	adds	r7, #8
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	2400201c 	.word	0x2400201c

08015fbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b08e      	sub	sp, #56	; 0x38
 8015fc0:	af04      	add	r7, sp, #16
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015fcc:	f3ef 8305 	mrs	r3, IPSR
 8015fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8015fd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d17e      	bne.n	80160d6 <osThreadNew+0x11a>
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d07b      	beq.n	80160d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015fde:	2380      	movs	r3, #128	; 0x80
 8015fe0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015fe2:	2318      	movs	r3, #24
 8015fe4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015fee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d045      	beq.n	8016082 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d002      	beq.n	8016004 <osThreadNew+0x48>
        name = attr->name;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	699b      	ldr	r3, [r3, #24]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d002      	beq.n	8016012 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	699b      	ldr	r3, [r3, #24]
 8016010:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016012:	69fb      	ldr	r3, [r7, #28]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d008      	beq.n	801602a <osThreadNew+0x6e>
 8016018:	69fb      	ldr	r3, [r7, #28]
 801601a:	2b38      	cmp	r3, #56	; 0x38
 801601c:	d805      	bhi.n	801602a <osThreadNew+0x6e>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	685b      	ldr	r3, [r3, #4]
 8016022:	f003 0301 	and.w	r3, r3, #1
 8016026:	2b00      	cmp	r3, #0
 8016028:	d001      	beq.n	801602e <osThreadNew+0x72>
        return (NULL);
 801602a:	2300      	movs	r3, #0
 801602c:	e054      	b.n	80160d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	695b      	ldr	r3, [r3, #20]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d003      	beq.n	801603e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	695b      	ldr	r3, [r3, #20]
 801603a:	089b      	lsrs	r3, r3, #2
 801603c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	689b      	ldr	r3, [r3, #8]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d00e      	beq.n	8016064 <osThreadNew+0xa8>
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	68db      	ldr	r3, [r3, #12]
 801604a:	2b5b      	cmp	r3, #91	; 0x5b
 801604c:	d90a      	bls.n	8016064 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016052:	2b00      	cmp	r3, #0
 8016054:	d006      	beq.n	8016064 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	695b      	ldr	r3, [r3, #20]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d002      	beq.n	8016064 <osThreadNew+0xa8>
        mem = 1;
 801605e:	2301      	movs	r3, #1
 8016060:	61bb      	str	r3, [r7, #24]
 8016062:	e010      	b.n	8016086 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	689b      	ldr	r3, [r3, #8]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d10c      	bne.n	8016086 <osThreadNew+0xca>
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	68db      	ldr	r3, [r3, #12]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d108      	bne.n	8016086 <osThreadNew+0xca>
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	691b      	ldr	r3, [r3, #16]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d104      	bne.n	8016086 <osThreadNew+0xca>
          mem = 0;
 801607c:	2300      	movs	r3, #0
 801607e:	61bb      	str	r3, [r7, #24]
 8016080:	e001      	b.n	8016086 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016082:	2300      	movs	r3, #0
 8016084:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016086:	69bb      	ldr	r3, [r7, #24]
 8016088:	2b01      	cmp	r3, #1
 801608a:	d110      	bne.n	80160ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016090:	687a      	ldr	r2, [r7, #4]
 8016092:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016094:	9202      	str	r2, [sp, #8]
 8016096:	9301      	str	r3, [sp, #4]
 8016098:	69fb      	ldr	r3, [r7, #28]
 801609a:	9300      	str	r3, [sp, #0]
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	6a3a      	ldr	r2, [r7, #32]
 80160a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160a2:	68f8      	ldr	r0, [r7, #12]
 80160a4:	f001 f9b2 	bl	801740c <xTaskCreateStatic>
 80160a8:	4603      	mov	r3, r0
 80160aa:	613b      	str	r3, [r7, #16]
 80160ac:	e013      	b.n	80160d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80160ae:	69bb      	ldr	r3, [r7, #24]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d110      	bne.n	80160d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80160b4:	6a3b      	ldr	r3, [r7, #32]
 80160b6:	b29a      	uxth	r2, r3
 80160b8:	f107 0310 	add.w	r3, r7, #16
 80160bc:	9301      	str	r3, [sp, #4]
 80160be:	69fb      	ldr	r3, [r7, #28]
 80160c0:	9300      	str	r3, [sp, #0]
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160c6:	68f8      	ldr	r0, [r7, #12]
 80160c8:	f001 f9fd 	bl	80174c6 <xTaskCreate>
 80160cc:	4603      	mov	r3, r0
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	d001      	beq.n	80160d6 <osThreadNew+0x11a>
            hTask = NULL;
 80160d2:	2300      	movs	r3, #0
 80160d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80160d6:	693b      	ldr	r3, [r7, #16]
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3728      	adds	r7, #40	; 0x28
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80160e0:	b480      	push	{r7}
 80160e2:	b083      	sub	sp, #12
 80160e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80160e6:	f3ef 8305 	mrs	r3, IPSR
 80160ea:	603b      	str	r3, [r7, #0]
  return(result);
 80160ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d003      	beq.n	80160fa <osThreadYield+0x1a>
    stat = osErrorISR;
 80160f2:	f06f 0305 	mvn.w	r3, #5
 80160f6:	607b      	str	r3, [r7, #4]
 80160f8:	e009      	b.n	801610e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80160fa:	2300      	movs	r3, #0
 80160fc:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80160fe:	4b07      	ldr	r3, [pc, #28]	; (801611c <osThreadYield+0x3c>)
 8016100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016104:	601a      	str	r2, [r3, #0]
 8016106:	f3bf 8f4f 	dsb	sy
 801610a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801610e:	687b      	ldr	r3, [r7, #4]
}
 8016110:	4618      	mov	r0, r3
 8016112:	370c      	adds	r7, #12
 8016114:	46bd      	mov	sp, r7
 8016116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611a:	4770      	bx	lr
 801611c:	e000ed04 	.word	0xe000ed04

08016120 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016120:	b580      	push	{r7, lr}
 8016122:	b084      	sub	sp, #16
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016128:	f3ef 8305 	mrs	r3, IPSR
 801612c:	60bb      	str	r3, [r7, #8]
  return(result);
 801612e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016130:	2b00      	cmp	r3, #0
 8016132:	d003      	beq.n	801613c <osDelay+0x1c>
    stat = osErrorISR;
 8016134:	f06f 0305 	mvn.w	r3, #5
 8016138:	60fb      	str	r3, [r7, #12]
 801613a:	e007      	b.n	801614c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801613c:	2300      	movs	r3, #0
 801613e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d002      	beq.n	801614c <osDelay+0x2c>
      vTaskDelay(ticks);
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f001 fb02 	bl	8017750 <vTaskDelay>
    }
  }

  return (stat);
 801614c:	68fb      	ldr	r3, [r7, #12]
}
 801614e:	4618      	mov	r0, r3
 8016150:	3710      	adds	r7, #16
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016156:	b580      	push	{r7, lr}
 8016158:	b086      	sub	sp, #24
 801615a:	af00      	add	r7, sp, #0
 801615c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801615e:	2300      	movs	r3, #0
 8016160:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016162:	f3ef 8305 	mrs	r3, IPSR
 8016166:	60fb      	str	r3, [r7, #12]
  return(result);
 8016168:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801616a:	2b00      	cmp	r3, #0
 801616c:	d12d      	bne.n	80161ca <osEventFlagsNew+0x74>
    mem = -1;
 801616e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016172:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d015      	beq.n	80161a6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	689b      	ldr	r3, [r3, #8]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d006      	beq.n	8016190 <osEventFlagsNew+0x3a>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	68db      	ldr	r3, [r3, #12]
 8016186:	2b1f      	cmp	r3, #31
 8016188:	d902      	bls.n	8016190 <osEventFlagsNew+0x3a>
        mem = 1;
 801618a:	2301      	movs	r3, #1
 801618c:	613b      	str	r3, [r7, #16]
 801618e:	e00c      	b.n	80161aa <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	689b      	ldr	r3, [r3, #8]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d108      	bne.n	80161aa <osEventFlagsNew+0x54>
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	68db      	ldr	r3, [r3, #12]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d104      	bne.n	80161aa <osEventFlagsNew+0x54>
          mem = 0;
 80161a0:	2300      	movs	r3, #0
 80161a2:	613b      	str	r3, [r7, #16]
 80161a4:	e001      	b.n	80161aa <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80161a6:	2300      	movs	r3, #0
 80161a8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80161aa:	693b      	ldr	r3, [r7, #16]
 80161ac:	2b01      	cmp	r3, #1
 80161ae:	d106      	bne.n	80161be <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	689b      	ldr	r3, [r3, #8]
 80161b4:	4618      	mov	r0, r3
 80161b6:	f000 f91d 	bl	80163f4 <xEventGroupCreateStatic>
 80161ba:	6178      	str	r0, [r7, #20]
 80161bc:	e005      	b.n	80161ca <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80161be:	693b      	ldr	r3, [r7, #16]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d102      	bne.n	80161ca <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80161c4:	f000 f94d 	bl	8016462 <xEventGroupCreate>
 80161c8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80161ca:	697b      	ldr	r3, [r7, #20]
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	3718      	adds	r7, #24
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}

080161d4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b086      	sub	sp, #24
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d004      	beq.n	80161f2 <osEventFlagsSet+0x1e>
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d003      	beq.n	80161fa <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80161f2:	f06f 0303 	mvn.w	r3, #3
 80161f6:	617b      	str	r3, [r7, #20]
 80161f8:	e028      	b.n	801624c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161fa:	f3ef 8305 	mrs	r3, IPSR
 80161fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8016200:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016202:	2b00      	cmp	r3, #0
 8016204:	d01d      	beq.n	8016242 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016206:	2300      	movs	r3, #0
 8016208:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801620a:	f107 0308 	add.w	r3, r7, #8
 801620e:	461a      	mov	r2, r3
 8016210:	6839      	ldr	r1, [r7, #0]
 8016212:	6938      	ldr	r0, [r7, #16]
 8016214:	f000 fb46 	bl	80168a4 <xEventGroupSetBitsFromISR>
 8016218:	4603      	mov	r3, r0
 801621a:	2b00      	cmp	r3, #0
 801621c:	d103      	bne.n	8016226 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801621e:	f06f 0302 	mvn.w	r3, #2
 8016222:	617b      	str	r3, [r7, #20]
 8016224:	e012      	b.n	801624c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d00d      	beq.n	801624c <osEventFlagsSet+0x78>
 8016230:	4b09      	ldr	r3, [pc, #36]	; (8016258 <osEventFlagsSet+0x84>)
 8016232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016236:	601a      	str	r2, [r3, #0]
 8016238:	f3bf 8f4f 	dsb	sy
 801623c:	f3bf 8f6f 	isb	sy
 8016240:	e004      	b.n	801624c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016242:	6839      	ldr	r1, [r7, #0]
 8016244:	6938      	ldr	r0, [r7, #16]
 8016246:	f000 fa65 	bl	8016714 <xEventGroupSetBits>
 801624a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801624c:	697b      	ldr	r3, [r7, #20]
}
 801624e:	4618      	mov	r0, r3
 8016250:	3718      	adds	r7, #24
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	e000ed04 	.word	0xe000ed04

0801625c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 801625c:	b580      	push	{r7, lr}
 801625e:	b086      	sub	sp, #24
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
 8016264:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d004      	beq.n	801627a <osEventFlagsClear+0x1e>
 8016270:	683b      	ldr	r3, [r7, #0]
 8016272:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016276:	2b00      	cmp	r3, #0
 8016278:	d003      	beq.n	8016282 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 801627a:	f06f 0303 	mvn.w	r3, #3
 801627e:	617b      	str	r3, [r7, #20]
 8016280:	e019      	b.n	80162b6 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016282:	f3ef 8305 	mrs	r3, IPSR
 8016286:	60fb      	str	r3, [r7, #12]
  return(result);
 8016288:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801628a:	2b00      	cmp	r3, #0
 801628c:	d00e      	beq.n	80162ac <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801628e:	6938      	ldr	r0, [r7, #16]
 8016290:	f000 fa1c 	bl	80166cc <xEventGroupGetBitsFromISR>
 8016294:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016296:	6839      	ldr	r1, [r7, #0]
 8016298:	6938      	ldr	r0, [r7, #16]
 801629a:	f000 fa03 	bl	80166a4 <xEventGroupClearBitsFromISR>
 801629e:	4603      	mov	r3, r0
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d108      	bne.n	80162b6 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80162a4:	f06f 0302 	mvn.w	r3, #2
 80162a8:	617b      	str	r3, [r7, #20]
 80162aa:	e004      	b.n	80162b6 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80162ac:	6839      	ldr	r1, [r7, #0]
 80162ae:	6938      	ldr	r0, [r7, #16]
 80162b0:	f000 f9c0 	bl	8016634 <xEventGroupClearBits>
 80162b4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80162b6:	697b      	ldr	r3, [r7, #20]
}
 80162b8:	4618      	mov	r0, r3
 80162ba:	3718      	adds	r7, #24
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}

080162c0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b08c      	sub	sp, #48	; 0x30
 80162c4:	af02      	add	r7, sp, #8
 80162c6:	60f8      	str	r0, [r7, #12]
 80162c8:	60b9      	str	r1, [r7, #8]
 80162ca:	607a      	str	r2, [r7, #4]
 80162cc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80162d2:	69bb      	ldr	r3, [r7, #24]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d004      	beq.n	80162e2 <osEventFlagsWait+0x22>
 80162d8:	68bb      	ldr	r3, [r7, #8]
 80162da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d003      	beq.n	80162ea <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80162e2:	f06f 0303 	mvn.w	r3, #3
 80162e6:	61fb      	str	r3, [r7, #28]
 80162e8:	e04b      	b.n	8016382 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162ea:	f3ef 8305 	mrs	r3, IPSR
 80162ee:	617b      	str	r3, [r7, #20]
  return(result);
 80162f0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d003      	beq.n	80162fe <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80162f6:	f06f 0305 	mvn.w	r3, #5
 80162fa:	61fb      	str	r3, [r7, #28]
 80162fc:	e041      	b.n	8016382 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f003 0301 	and.w	r3, r3, #1
 8016304:	2b00      	cmp	r3, #0
 8016306:	d002      	beq.n	801630e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016308:	2301      	movs	r3, #1
 801630a:	627b      	str	r3, [r7, #36]	; 0x24
 801630c:	e001      	b.n	8016312 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801630e:	2300      	movs	r3, #0
 8016310:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f003 0302 	and.w	r3, r3, #2
 8016318:	2b00      	cmp	r3, #0
 801631a:	d002      	beq.n	8016322 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 801631c:	2300      	movs	r3, #0
 801631e:	623b      	str	r3, [r7, #32]
 8016320:	e001      	b.n	8016326 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016322:	2301      	movs	r3, #1
 8016324:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	9300      	str	r3, [sp, #0]
 801632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632c:	6a3a      	ldr	r2, [r7, #32]
 801632e:	68b9      	ldr	r1, [r7, #8]
 8016330:	69b8      	ldr	r0, [r7, #24]
 8016332:	f000 f8b1 	bl	8016498 <xEventGroupWaitBits>
 8016336:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	f003 0301 	and.w	r3, r3, #1
 801633e:	2b00      	cmp	r3, #0
 8016340:	d010      	beq.n	8016364 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016342:	68ba      	ldr	r2, [r7, #8]
 8016344:	69fb      	ldr	r3, [r7, #28]
 8016346:	4013      	ands	r3, r2
 8016348:	68ba      	ldr	r2, [r7, #8]
 801634a:	429a      	cmp	r2, r3
 801634c:	d019      	beq.n	8016382 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d003      	beq.n	801635c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016354:	f06f 0301 	mvn.w	r3, #1
 8016358:	61fb      	str	r3, [r7, #28]
 801635a:	e012      	b.n	8016382 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801635c:	f06f 0302 	mvn.w	r3, #2
 8016360:	61fb      	str	r3, [r7, #28]
 8016362:	e00e      	b.n	8016382 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8016364:	68ba      	ldr	r2, [r7, #8]
 8016366:	69fb      	ldr	r3, [r7, #28]
 8016368:	4013      	ands	r3, r2
 801636a:	2b00      	cmp	r3, #0
 801636c:	d109      	bne.n	8016382 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d003      	beq.n	801637c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8016374:	f06f 0301 	mvn.w	r3, #1
 8016378:	61fb      	str	r3, [r7, #28]
 801637a:	e002      	b.n	8016382 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801637c:	f06f 0302 	mvn.w	r3, #2
 8016380:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8016382:	69fb      	ldr	r3, [r7, #28]
}
 8016384:	4618      	mov	r0, r3
 8016386:	3728      	adds	r7, #40	; 0x28
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}

0801638c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801638c:	b480      	push	{r7}
 801638e:	b085      	sub	sp, #20
 8016390:	af00      	add	r7, sp, #0
 8016392:	60f8      	str	r0, [r7, #12]
 8016394:	60b9      	str	r1, [r7, #8]
 8016396:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	4a07      	ldr	r2, [pc, #28]	; (80163b8 <vApplicationGetIdleTaskMemory+0x2c>)
 801639c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	4a06      	ldr	r2, [pc, #24]	; (80163bc <vApplicationGetIdleTaskMemory+0x30>)
 80163a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2280      	movs	r2, #128	; 0x80
 80163a8:	601a      	str	r2, [r3, #0]
}
 80163aa:	bf00      	nop
 80163ac:	3714      	adds	r7, #20
 80163ae:	46bd      	mov	sp, r7
 80163b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b4:	4770      	bx	lr
 80163b6:	bf00      	nop
 80163b8:	24002020 	.word	0x24002020
 80163bc:	2400207c 	.word	0x2400207c

080163c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80163c0:	b480      	push	{r7}
 80163c2:	b085      	sub	sp, #20
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	60f8      	str	r0, [r7, #12]
 80163c8:	60b9      	str	r1, [r7, #8]
 80163ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	4a07      	ldr	r2, [pc, #28]	; (80163ec <vApplicationGetTimerTaskMemory+0x2c>)
 80163d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80163d2:	68bb      	ldr	r3, [r7, #8]
 80163d4:	4a06      	ldr	r2, [pc, #24]	; (80163f0 <vApplicationGetTimerTaskMemory+0x30>)
 80163d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80163de:	601a      	str	r2, [r3, #0]
}
 80163e0:	bf00      	nop
 80163e2:	3714      	adds	r7, #20
 80163e4:	46bd      	mov	sp, r7
 80163e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ea:	4770      	bx	lr
 80163ec:	2400227c 	.word	0x2400227c
 80163f0:	240022d8 	.word	0x240022d8

080163f4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b086      	sub	sp, #24
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d10a      	bne.n	8016418 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016406:	f383 8811 	msr	BASEPRI, r3
 801640a:	f3bf 8f6f 	isb	sy
 801640e:	f3bf 8f4f 	dsb	sy
 8016412:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016414:	bf00      	nop
 8016416:	e7fe      	b.n	8016416 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8016418:	2320      	movs	r3, #32
 801641a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	2b20      	cmp	r3, #32
 8016420:	d00a      	beq.n	8016438 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8016422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016426:	f383 8811 	msr	BASEPRI, r3
 801642a:	f3bf 8f6f 	isb	sy
 801642e:	f3bf 8f4f 	dsb	sy
 8016432:	60fb      	str	r3, [r7, #12]
}
 8016434:	bf00      	nop
 8016436:	e7fe      	b.n	8016436 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801643c:	697b      	ldr	r3, [r7, #20]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d00a      	beq.n	8016458 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8016442:	697b      	ldr	r3, [r7, #20]
 8016444:	2200      	movs	r2, #0
 8016446:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016448:	697b      	ldr	r3, [r7, #20]
 801644a:	3304      	adds	r3, #4
 801644c:	4618      	mov	r0, r3
 801644e:	f000 fa3d 	bl	80168cc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8016452:	697b      	ldr	r3, [r7, #20]
 8016454:	2201      	movs	r2, #1
 8016456:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8016458:	697b      	ldr	r3, [r7, #20]
	}
 801645a:	4618      	mov	r0, r3
 801645c:	3718      	adds	r7, #24
 801645e:	46bd      	mov	sp, r7
 8016460:	bd80      	pop	{r7, pc}

08016462 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8016462:	b580      	push	{r7, lr}
 8016464:	b082      	sub	sp, #8
 8016466:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8016468:	2020      	movs	r0, #32
 801646a:	f002 fd55 	bl	8018f18 <pvPortMalloc>
 801646e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d00a      	beq.n	801648c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2200      	movs	r2, #0
 801647a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	3304      	adds	r3, #4
 8016480:	4618      	mov	r0, r3
 8016482:	f000 fa23 	bl	80168cc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2200      	movs	r2, #0
 801648a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801648c:	687b      	ldr	r3, [r7, #4]
	}
 801648e:	4618      	mov	r0, r3
 8016490:	3708      	adds	r7, #8
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}
	...

08016498 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b090      	sub	sp, #64	; 0x40
 801649c:	af00      	add	r7, sp, #0
 801649e:	60f8      	str	r0, [r7, #12]
 80164a0:	60b9      	str	r1, [r7, #8]
 80164a2:	607a      	str	r2, [r7, #4]
 80164a4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80164aa:	2300      	movs	r3, #0
 80164ac:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80164ae:	2300      	movs	r3, #0
 80164b0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d10a      	bne.n	80164ce <xEventGroupWaitBits+0x36>
	__asm volatile
 80164b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164bc:	f383 8811 	msr	BASEPRI, r3
 80164c0:	f3bf 8f6f 	isb	sy
 80164c4:	f3bf 8f4f 	dsb	sy
 80164c8:	623b      	str	r3, [r7, #32]
}
 80164ca:	bf00      	nop
 80164cc:	e7fe      	b.n	80164cc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d00a      	beq.n	80164ee <xEventGroupWaitBits+0x56>
	__asm volatile
 80164d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164dc:	f383 8811 	msr	BASEPRI, r3
 80164e0:	f3bf 8f6f 	isb	sy
 80164e4:	f3bf 8f4f 	dsb	sy
 80164e8:	61fb      	str	r3, [r7, #28]
}
 80164ea:	bf00      	nop
 80164ec:	e7fe      	b.n	80164ec <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d10a      	bne.n	801650a <xEventGroupWaitBits+0x72>
	__asm volatile
 80164f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164f8:	f383 8811 	msr	BASEPRI, r3
 80164fc:	f3bf 8f6f 	isb	sy
 8016500:	f3bf 8f4f 	dsb	sy
 8016504:	61bb      	str	r3, [r7, #24]
}
 8016506:	bf00      	nop
 8016508:	e7fe      	b.n	8016508 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801650a:	f001 fe51 	bl	80181b0 <xTaskGetSchedulerState>
 801650e:	4603      	mov	r3, r0
 8016510:	2b00      	cmp	r3, #0
 8016512:	d102      	bne.n	801651a <xEventGroupWaitBits+0x82>
 8016514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016516:	2b00      	cmp	r3, #0
 8016518:	d101      	bne.n	801651e <xEventGroupWaitBits+0x86>
 801651a:	2301      	movs	r3, #1
 801651c:	e000      	b.n	8016520 <xEventGroupWaitBits+0x88>
 801651e:	2300      	movs	r3, #0
 8016520:	2b00      	cmp	r3, #0
 8016522:	d10a      	bne.n	801653a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8016524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016528:	f383 8811 	msr	BASEPRI, r3
 801652c:	f3bf 8f6f 	isb	sy
 8016530:	f3bf 8f4f 	dsb	sy
 8016534:	617b      	str	r3, [r7, #20]
}
 8016536:	bf00      	nop
 8016538:	e7fe      	b.n	8016538 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801653a:	f001 f9a3 	bl	8017884 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8016544:	683a      	ldr	r2, [r7, #0]
 8016546:	68b9      	ldr	r1, [r7, #8]
 8016548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801654a:	f000 f988 	bl	801685e <prvTestWaitCondition>
 801654e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8016550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016552:	2b00      	cmp	r3, #0
 8016554:	d00e      	beq.n	8016574 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8016556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016558:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801655a:	2300      	movs	r3, #0
 801655c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d028      	beq.n	80165b6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016566:	681a      	ldr	r2, [r3, #0]
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	43db      	mvns	r3, r3
 801656c:	401a      	ands	r2, r3
 801656e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016570:	601a      	str	r2, [r3, #0]
 8016572:	e020      	b.n	80165b6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8016574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016576:	2b00      	cmp	r3, #0
 8016578:	d104      	bne.n	8016584 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801657c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801657e:	2301      	movs	r3, #1
 8016580:	633b      	str	r3, [r7, #48]	; 0x30
 8016582:	e018      	b.n	80165b6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d003      	beq.n	8016592 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801658c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016590:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d003      	beq.n	80165a0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8016598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801659a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801659e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80165a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165a2:	1d18      	adds	r0, r3, #4
 80165a4:	68ba      	ldr	r2, [r7, #8]
 80165a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a8:	4313      	orrs	r3, r2
 80165aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80165ac:	4619      	mov	r1, r3
 80165ae:	f001 fb77 	bl	8017ca0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80165b2:	2300      	movs	r3, #0
 80165b4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80165b6:	f001 f973 	bl	80178a0 <xTaskResumeAll>
 80165ba:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80165bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d031      	beq.n	8016626 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80165c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d107      	bne.n	80165d8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80165c8:	4b19      	ldr	r3, [pc, #100]	; (8016630 <xEventGroupWaitBits+0x198>)
 80165ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165ce:	601a      	str	r2, [r3, #0]
 80165d0:	f3bf 8f4f 	dsb	sy
 80165d4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80165d8:	f001 fe76 	bl	80182c8 <uxTaskResetEventItemValue>
 80165dc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80165de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d11a      	bne.n	801661e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80165e8:	f002 fb74 	bl	8018cd4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80165ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80165f2:	683a      	ldr	r2, [r7, #0]
 80165f4:	68b9      	ldr	r1, [r7, #8]
 80165f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80165f8:	f000 f931 	bl	801685e <prvTestWaitCondition>
 80165fc:	4603      	mov	r3, r0
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d009      	beq.n	8016616 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d006      	beq.n	8016616 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	43db      	mvns	r3, r3
 8016610:	401a      	ands	r2, r3
 8016612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016614:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8016616:	2301      	movs	r3, #1
 8016618:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801661a:	f002 fb8b 	bl	8018d34 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016620:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016624:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8016626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016628:	4618      	mov	r0, r3
 801662a:	3740      	adds	r7, #64	; 0x40
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}
 8016630:	e000ed04 	.word	0xe000ed04

08016634 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b086      	sub	sp, #24
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
 801663c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d10a      	bne.n	801665e <xEventGroupClearBits+0x2a>
	__asm volatile
 8016648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801664c:	f383 8811 	msr	BASEPRI, r3
 8016650:	f3bf 8f6f 	isb	sy
 8016654:	f3bf 8f4f 	dsb	sy
 8016658:	60fb      	str	r3, [r7, #12]
}
 801665a:	bf00      	nop
 801665c:	e7fe      	b.n	801665c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016664:	2b00      	cmp	r3, #0
 8016666:	d00a      	beq.n	801667e <xEventGroupClearBits+0x4a>
	__asm volatile
 8016668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801666c:	f383 8811 	msr	BASEPRI, r3
 8016670:	f3bf 8f6f 	isb	sy
 8016674:	f3bf 8f4f 	dsb	sy
 8016678:	60bb      	str	r3, [r7, #8]
}
 801667a:	bf00      	nop
 801667c:	e7fe      	b.n	801667c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801667e:	f002 fb29 	bl	8018cd4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8016688:	697b      	ldr	r3, [r7, #20]
 801668a:	681a      	ldr	r2, [r3, #0]
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	43db      	mvns	r3, r3
 8016690:	401a      	ands	r2, r3
 8016692:	697b      	ldr	r3, [r7, #20]
 8016694:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8016696:	f002 fb4d 	bl	8018d34 <vPortExitCritical>

	return uxReturn;
 801669a:	693b      	ldr	r3, [r7, #16]
}
 801669c:	4618      	mov	r0, r3
 801669e:	3718      	adds	r7, #24
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bd80      	pop	{r7, pc}

080166a4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b084      	sub	sp, #16
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
 80166ac:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80166ae:	2300      	movs	r3, #0
 80166b0:	683a      	ldr	r2, [r7, #0]
 80166b2:	6879      	ldr	r1, [r7, #4]
 80166b4:	4804      	ldr	r0, [pc, #16]	; (80166c8 <xEventGroupClearBitsFromISR+0x24>)
 80166b6:	f002 f9c1 	bl	8018a3c <xTimerPendFunctionCallFromISR>
 80166ba:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80166bc:	68fb      	ldr	r3, [r7, #12]
	}
 80166be:	4618      	mov	r0, r3
 80166c0:	3710      	adds	r7, #16
 80166c2:	46bd      	mov	sp, r7
 80166c4:	bd80      	pop	{r7, pc}
 80166c6:	bf00      	nop
 80166c8:	08016845 	.word	0x08016845

080166cc <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80166cc:	b480      	push	{r7}
 80166ce:	b089      	sub	sp, #36	; 0x24
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80166d8:	f3ef 8211 	mrs	r2, BASEPRI
 80166dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166e0:	f383 8811 	msr	BASEPRI, r3
 80166e4:	f3bf 8f6f 	isb	sy
 80166e8:	f3bf 8f4f 	dsb	sy
 80166ec:	60fa      	str	r2, [r7, #12]
 80166ee:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80166f0:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80166f2:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80166f4:	69fb      	ldr	r3, [r7, #28]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	617b      	str	r3, [r7, #20]
 80166fa:	69bb      	ldr	r3, [r7, #24]
 80166fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016704:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8016706:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8016708:	4618      	mov	r0, r3
 801670a:	3724      	adds	r7, #36	; 0x24
 801670c:	46bd      	mov	sp, r7
 801670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016712:	4770      	bx	lr

08016714 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b08e      	sub	sp, #56	; 0x38
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801671e:	2300      	movs	r3, #0
 8016720:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8016726:	2300      	movs	r3, #0
 8016728:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d10a      	bne.n	8016746 <xEventGroupSetBits+0x32>
	__asm volatile
 8016730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016734:	f383 8811 	msr	BASEPRI, r3
 8016738:	f3bf 8f6f 	isb	sy
 801673c:	f3bf 8f4f 	dsb	sy
 8016740:	613b      	str	r3, [r7, #16]
}
 8016742:	bf00      	nop
 8016744:	e7fe      	b.n	8016744 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016746:	683b      	ldr	r3, [r7, #0]
 8016748:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801674c:	2b00      	cmp	r3, #0
 801674e:	d00a      	beq.n	8016766 <xEventGroupSetBits+0x52>
	__asm volatile
 8016750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016754:	f383 8811 	msr	BASEPRI, r3
 8016758:	f3bf 8f6f 	isb	sy
 801675c:	f3bf 8f4f 	dsb	sy
 8016760:	60fb      	str	r3, [r7, #12]
}
 8016762:	bf00      	nop
 8016764:	e7fe      	b.n	8016764 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8016766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016768:	3304      	adds	r3, #4
 801676a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801676e:	3308      	adds	r3, #8
 8016770:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8016772:	f001 f887 	bl	8017884 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8016776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016778:	68db      	ldr	r3, [r3, #12]
 801677a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801677e:	681a      	ldr	r2, [r3, #0]
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	431a      	orrs	r2, r3
 8016784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016786:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8016788:	e03c      	b.n	8016804 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801678c:	685b      	ldr	r3, [r3, #4]
 801678e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8016790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8016796:	2300      	movs	r3, #0
 8016798:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801679a:	69bb      	ldr	r3, [r7, #24]
 801679c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80167a0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80167a2:	69bb      	ldr	r3, [r7, #24]
 80167a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80167a8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80167aa:	697b      	ldr	r3, [r7, #20]
 80167ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d108      	bne.n	80167c6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80167b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	69bb      	ldr	r3, [r7, #24]
 80167ba:	4013      	ands	r3, r2
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d00b      	beq.n	80167d8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80167c0:	2301      	movs	r3, #1
 80167c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80167c4:	e008      	b.n	80167d8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80167c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c8:	681a      	ldr	r2, [r3, #0]
 80167ca:	69bb      	ldr	r3, [r7, #24]
 80167cc:	4013      	ands	r3, r2
 80167ce:	69ba      	ldr	r2, [r7, #24]
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d101      	bne.n	80167d8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80167d4:	2301      	movs	r3, #1
 80167d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80167d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d010      	beq.n	8016800 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80167de:	697b      	ldr	r3, [r7, #20]
 80167e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d003      	beq.n	80167f0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80167e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167ea:	69bb      	ldr	r3, [r7, #24]
 80167ec:	4313      	orrs	r3, r2
 80167ee:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80167f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80167f8:	4619      	mov	r1, r3
 80167fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80167fc:	f001 fb1c 	bl	8017e38 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8016800:	69fb      	ldr	r3, [r7, #28]
 8016802:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8016804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016806:	6a3b      	ldr	r3, [r7, #32]
 8016808:	429a      	cmp	r2, r3
 801680a:	d1be      	bne.n	801678a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801680e:	681a      	ldr	r2, [r3, #0]
 8016810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016812:	43db      	mvns	r3, r3
 8016814:	401a      	ands	r2, r3
 8016816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016818:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801681a:	f001 f841 	bl	80178a0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016820:	681b      	ldr	r3, [r3, #0]
}
 8016822:	4618      	mov	r0, r3
 8016824:	3738      	adds	r7, #56	; 0x38
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}

0801682a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801682a:	b580      	push	{r7, lr}
 801682c:	b082      	sub	sp, #8
 801682e:	af00      	add	r7, sp, #0
 8016830:	6078      	str	r0, [r7, #4]
 8016832:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8016834:	6839      	ldr	r1, [r7, #0]
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f7ff ff6c 	bl	8016714 <xEventGroupSetBits>
}
 801683c:	bf00      	nop
 801683e:	3708      	adds	r7, #8
 8016840:	46bd      	mov	sp, r7
 8016842:	bd80      	pop	{r7, pc}

08016844 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
 801684c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801684e:	6839      	ldr	r1, [r7, #0]
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	f7ff feef 	bl	8016634 <xEventGroupClearBits>
}
 8016856:	bf00      	nop
 8016858:	3708      	adds	r7, #8
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}

0801685e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801685e:	b480      	push	{r7}
 8016860:	b087      	sub	sp, #28
 8016862:	af00      	add	r7, sp, #0
 8016864:	60f8      	str	r0, [r7, #12]
 8016866:	60b9      	str	r1, [r7, #8]
 8016868:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801686a:	2300      	movs	r3, #0
 801686c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d107      	bne.n	8016884 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8016874:	68fa      	ldr	r2, [r7, #12]
 8016876:	68bb      	ldr	r3, [r7, #8]
 8016878:	4013      	ands	r3, r2
 801687a:	2b00      	cmp	r3, #0
 801687c:	d00a      	beq.n	8016894 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801687e:	2301      	movs	r3, #1
 8016880:	617b      	str	r3, [r7, #20]
 8016882:	e007      	b.n	8016894 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8016884:	68fa      	ldr	r2, [r7, #12]
 8016886:	68bb      	ldr	r3, [r7, #8]
 8016888:	4013      	ands	r3, r2
 801688a:	68ba      	ldr	r2, [r7, #8]
 801688c:	429a      	cmp	r2, r3
 801688e:	d101      	bne.n	8016894 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8016890:	2301      	movs	r3, #1
 8016892:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8016894:	697b      	ldr	r3, [r7, #20]
}
 8016896:	4618      	mov	r0, r3
 8016898:	371c      	adds	r7, #28
 801689a:	46bd      	mov	sp, r7
 801689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a0:	4770      	bx	lr
	...

080168a4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b086      	sub	sp, #24
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	60f8      	str	r0, [r7, #12]
 80168ac:	60b9      	str	r1, [r7, #8]
 80168ae:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	68ba      	ldr	r2, [r7, #8]
 80168b4:	68f9      	ldr	r1, [r7, #12]
 80168b6:	4804      	ldr	r0, [pc, #16]	; (80168c8 <xEventGroupSetBitsFromISR+0x24>)
 80168b8:	f002 f8c0 	bl	8018a3c <xTimerPendFunctionCallFromISR>
 80168bc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80168be:	697b      	ldr	r3, [r7, #20]
	}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3718      	adds	r7, #24
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	0801682b 	.word	0x0801682b

080168cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80168cc:	b480      	push	{r7}
 80168ce:	b083      	sub	sp, #12
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f103 0208 	add.w	r2, r3, #8
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80168e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f103 0208 	add.w	r2, r3, #8
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f103 0208 	add.w	r2, r3, #8
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2200      	movs	r2, #0
 80168fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016900:	bf00      	nop
 8016902:	370c      	adds	r7, #12
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr

0801690c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801690c:	b480      	push	{r7}
 801690e:	b083      	sub	sp, #12
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	2200      	movs	r2, #0
 8016918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801691a:	bf00      	nop
 801691c:	370c      	adds	r7, #12
 801691e:	46bd      	mov	sp, r7
 8016920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016924:	4770      	bx	lr

08016926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016926:	b480      	push	{r7}
 8016928:	b085      	sub	sp, #20
 801692a:	af00      	add	r7, sp, #0
 801692c:	6078      	str	r0, [r7, #4]
 801692e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	685b      	ldr	r3, [r3, #4]
 8016934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016936:	683b      	ldr	r3, [r7, #0]
 8016938:	68fa      	ldr	r2, [r7, #12]
 801693a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	689a      	ldr	r2, [r3, #8]
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	689b      	ldr	r3, [r3, #8]
 8016948:	683a      	ldr	r2, [r7, #0]
 801694a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	683a      	ldr	r2, [r7, #0]
 8016950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016952:	683b      	ldr	r3, [r7, #0]
 8016954:	687a      	ldr	r2, [r7, #4]
 8016956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	1c5a      	adds	r2, r3, #1
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	601a      	str	r2, [r3, #0]
}
 8016962:	bf00      	nop
 8016964:	3714      	adds	r7, #20
 8016966:	46bd      	mov	sp, r7
 8016968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696c:	4770      	bx	lr

0801696e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801696e:	b480      	push	{r7}
 8016970:	b085      	sub	sp, #20
 8016972:	af00      	add	r7, sp, #0
 8016974:	6078      	str	r0, [r7, #4]
 8016976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016984:	d103      	bne.n	801698e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	691b      	ldr	r3, [r3, #16]
 801698a:	60fb      	str	r3, [r7, #12]
 801698c:	e00c      	b.n	80169a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	3308      	adds	r3, #8
 8016992:	60fb      	str	r3, [r7, #12]
 8016994:	e002      	b.n	801699c <vListInsert+0x2e>
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	685b      	ldr	r3, [r3, #4]
 801699a:	60fb      	str	r3, [r7, #12]
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	685b      	ldr	r3, [r3, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	68ba      	ldr	r2, [r7, #8]
 80169a4:	429a      	cmp	r2, r3
 80169a6:	d2f6      	bcs.n	8016996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	685a      	ldr	r2, [r3, #4]
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	685b      	ldr	r3, [r3, #4]
 80169b4:	683a      	ldr	r2, [r7, #0]
 80169b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80169b8:	683b      	ldr	r3, [r7, #0]
 80169ba:	68fa      	ldr	r2, [r7, #12]
 80169bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	683a      	ldr	r2, [r7, #0]
 80169c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	687a      	ldr	r2, [r7, #4]
 80169c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	1c5a      	adds	r2, r3, #1
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	601a      	str	r2, [r3, #0]
}
 80169d4:	bf00      	nop
 80169d6:	3714      	adds	r7, #20
 80169d8:	46bd      	mov	sp, r7
 80169da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169de:	4770      	bx	lr

080169e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80169e0:	b480      	push	{r7}
 80169e2:	b085      	sub	sp, #20
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	691b      	ldr	r3, [r3, #16]
 80169ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	685b      	ldr	r3, [r3, #4]
 80169f2:	687a      	ldr	r2, [r7, #4]
 80169f4:	6892      	ldr	r2, [r2, #8]
 80169f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	689b      	ldr	r3, [r3, #8]
 80169fc:	687a      	ldr	r2, [r7, #4]
 80169fe:	6852      	ldr	r2, [r2, #4]
 8016a00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	687a      	ldr	r2, [r7, #4]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d103      	bne.n	8016a14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	689a      	ldr	r2, [r3, #8]
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	2200      	movs	r2, #0
 8016a18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	1e5a      	subs	r2, r3, #1
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	681b      	ldr	r3, [r3, #0]
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	3714      	adds	r7, #20
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a32:	4770      	bx	lr

08016a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b084      	sub	sp, #16
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
 8016a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d10a      	bne.n	8016a5e <xQueueGenericReset+0x2a>
	__asm volatile
 8016a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a4c:	f383 8811 	msr	BASEPRI, r3
 8016a50:	f3bf 8f6f 	isb	sy
 8016a54:	f3bf 8f4f 	dsb	sy
 8016a58:	60bb      	str	r3, [r7, #8]
}
 8016a5a:	bf00      	nop
 8016a5c:	e7fe      	b.n	8016a5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016a5e:	f002 f939 	bl	8018cd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	681a      	ldr	r2, [r3, #0]
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a6a:	68f9      	ldr	r1, [r7, #12]
 8016a6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016a6e:	fb01 f303 	mul.w	r3, r1, r3
 8016a72:	441a      	add	r2, r3
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681a      	ldr	r2, [r3, #0]
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	681a      	ldr	r2, [r3, #0]
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a8e:	3b01      	subs	r3, #1
 8016a90:	68f9      	ldr	r1, [r7, #12]
 8016a92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016a94:	fb01 f303 	mul.w	r3, r1, r3
 8016a98:	441a      	add	r2, r3
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	22ff      	movs	r2, #255	; 0xff
 8016aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	22ff      	movs	r2, #255	; 0xff
 8016aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d114      	bne.n	8016ade <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	691b      	ldr	r3, [r3, #16]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d01a      	beq.n	8016af2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	3310      	adds	r3, #16
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f001 f955 	bl	8017d70 <xTaskRemoveFromEventList>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d012      	beq.n	8016af2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016acc:	4b0c      	ldr	r3, [pc, #48]	; (8016b00 <xQueueGenericReset+0xcc>)
 8016ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ad2:	601a      	str	r2, [r3, #0]
 8016ad4:	f3bf 8f4f 	dsb	sy
 8016ad8:	f3bf 8f6f 	isb	sy
 8016adc:	e009      	b.n	8016af2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	3310      	adds	r3, #16
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f7ff fef2 	bl	80168cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	3324      	adds	r3, #36	; 0x24
 8016aec:	4618      	mov	r0, r3
 8016aee:	f7ff feed 	bl	80168cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016af2:	f002 f91f 	bl	8018d34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016af6:	2301      	movs	r3, #1
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	3710      	adds	r7, #16
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd80      	pop	{r7, pc}
 8016b00:	e000ed04 	.word	0xe000ed04

08016b04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b08e      	sub	sp, #56	; 0x38
 8016b08:	af02      	add	r7, sp, #8
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	607a      	str	r2, [r7, #4]
 8016b10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d10a      	bne.n	8016b2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b1c:	f383 8811 	msr	BASEPRI, r3
 8016b20:	f3bf 8f6f 	isb	sy
 8016b24:	f3bf 8f4f 	dsb	sy
 8016b28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016b2a:	bf00      	nop
 8016b2c:	e7fe      	b.n	8016b2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016b2e:	683b      	ldr	r3, [r7, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d10a      	bne.n	8016b4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b38:	f383 8811 	msr	BASEPRI, r3
 8016b3c:	f3bf 8f6f 	isb	sy
 8016b40:	f3bf 8f4f 	dsb	sy
 8016b44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016b46:	bf00      	nop
 8016b48:	e7fe      	b.n	8016b48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d002      	beq.n	8016b56 <xQueueGenericCreateStatic+0x52>
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d001      	beq.n	8016b5a <xQueueGenericCreateStatic+0x56>
 8016b56:	2301      	movs	r3, #1
 8016b58:	e000      	b.n	8016b5c <xQueueGenericCreateStatic+0x58>
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d10a      	bne.n	8016b76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b64:	f383 8811 	msr	BASEPRI, r3
 8016b68:	f3bf 8f6f 	isb	sy
 8016b6c:	f3bf 8f4f 	dsb	sy
 8016b70:	623b      	str	r3, [r7, #32]
}
 8016b72:	bf00      	nop
 8016b74:	e7fe      	b.n	8016b74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d102      	bne.n	8016b82 <xQueueGenericCreateStatic+0x7e>
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d101      	bne.n	8016b86 <xQueueGenericCreateStatic+0x82>
 8016b82:	2301      	movs	r3, #1
 8016b84:	e000      	b.n	8016b88 <xQueueGenericCreateStatic+0x84>
 8016b86:	2300      	movs	r3, #0
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d10a      	bne.n	8016ba2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b90:	f383 8811 	msr	BASEPRI, r3
 8016b94:	f3bf 8f6f 	isb	sy
 8016b98:	f3bf 8f4f 	dsb	sy
 8016b9c:	61fb      	str	r3, [r7, #28]
}
 8016b9e:	bf00      	nop
 8016ba0:	e7fe      	b.n	8016ba0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016ba2:	2350      	movs	r3, #80	; 0x50
 8016ba4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016ba6:	697b      	ldr	r3, [r7, #20]
 8016ba8:	2b50      	cmp	r3, #80	; 0x50
 8016baa:	d00a      	beq.n	8016bc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb0:	f383 8811 	msr	BASEPRI, r3
 8016bb4:	f3bf 8f6f 	isb	sy
 8016bb8:	f3bf 8f4f 	dsb	sy
 8016bbc:	61bb      	str	r3, [r7, #24]
}
 8016bbe:	bf00      	nop
 8016bc0:	e7fe      	b.n	8016bc0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016bc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d00d      	beq.n	8016bea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bd0:	2201      	movs	r2, #1
 8016bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016bd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bdc:	9300      	str	r3, [sp, #0]
 8016bde:	4613      	mov	r3, r2
 8016be0:	687a      	ldr	r2, [r7, #4]
 8016be2:	68b9      	ldr	r1, [r7, #8]
 8016be4:	68f8      	ldr	r0, [r7, #12]
 8016be6:	f000 f805 	bl	8016bf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016bec:	4618      	mov	r0, r3
 8016bee:	3730      	adds	r7, #48	; 0x30
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}

08016bf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b084      	sub	sp, #16
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	60f8      	str	r0, [r7, #12]
 8016bfc:	60b9      	str	r1, [r7, #8]
 8016bfe:	607a      	str	r2, [r7, #4]
 8016c00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d103      	bne.n	8016c10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016c08:	69bb      	ldr	r3, [r7, #24]
 8016c0a:	69ba      	ldr	r2, [r7, #24]
 8016c0c:	601a      	str	r2, [r3, #0]
 8016c0e:	e002      	b.n	8016c16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016c10:	69bb      	ldr	r3, [r7, #24]
 8016c12:	687a      	ldr	r2, [r7, #4]
 8016c14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016c16:	69bb      	ldr	r3, [r7, #24]
 8016c18:	68fa      	ldr	r2, [r7, #12]
 8016c1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016c1c:	69bb      	ldr	r3, [r7, #24]
 8016c1e:	68ba      	ldr	r2, [r7, #8]
 8016c20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c22:	2101      	movs	r1, #1
 8016c24:	69b8      	ldr	r0, [r7, #24]
 8016c26:	f7ff ff05 	bl	8016a34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016c2a:	69bb      	ldr	r3, [r7, #24]
 8016c2c:	78fa      	ldrb	r2, [r7, #3]
 8016c2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016c32:	bf00      	nop
 8016c34:	3710      	adds	r7, #16
 8016c36:	46bd      	mov	sp, r7
 8016c38:	bd80      	pop	{r7, pc}
	...

08016c3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b08e      	sub	sp, #56	; 0x38
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	60f8      	str	r0, [r7, #12]
 8016c44:	60b9      	str	r1, [r7, #8]
 8016c46:	607a      	str	r2, [r7, #4]
 8016c48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d10a      	bne.n	8016c6e <xQueueGenericSend+0x32>
	__asm volatile
 8016c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c5c:	f383 8811 	msr	BASEPRI, r3
 8016c60:	f3bf 8f6f 	isb	sy
 8016c64:	f3bf 8f4f 	dsb	sy
 8016c68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016c6a:	bf00      	nop
 8016c6c:	e7fe      	b.n	8016c6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016c6e:	68bb      	ldr	r3, [r7, #8]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d103      	bne.n	8016c7c <xQueueGenericSend+0x40>
 8016c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d101      	bne.n	8016c80 <xQueueGenericSend+0x44>
 8016c7c:	2301      	movs	r3, #1
 8016c7e:	e000      	b.n	8016c82 <xQueueGenericSend+0x46>
 8016c80:	2300      	movs	r3, #0
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d10a      	bne.n	8016c9c <xQueueGenericSend+0x60>
	__asm volatile
 8016c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c8a:	f383 8811 	msr	BASEPRI, r3
 8016c8e:	f3bf 8f6f 	isb	sy
 8016c92:	f3bf 8f4f 	dsb	sy
 8016c96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016c98:	bf00      	nop
 8016c9a:	e7fe      	b.n	8016c9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	2b02      	cmp	r3, #2
 8016ca0:	d103      	bne.n	8016caa <xQueueGenericSend+0x6e>
 8016ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ca6:	2b01      	cmp	r3, #1
 8016ca8:	d101      	bne.n	8016cae <xQueueGenericSend+0x72>
 8016caa:	2301      	movs	r3, #1
 8016cac:	e000      	b.n	8016cb0 <xQueueGenericSend+0x74>
 8016cae:	2300      	movs	r3, #0
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d10a      	bne.n	8016cca <xQueueGenericSend+0x8e>
	__asm volatile
 8016cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb8:	f383 8811 	msr	BASEPRI, r3
 8016cbc:	f3bf 8f6f 	isb	sy
 8016cc0:	f3bf 8f4f 	dsb	sy
 8016cc4:	623b      	str	r3, [r7, #32]
}
 8016cc6:	bf00      	nop
 8016cc8:	e7fe      	b.n	8016cc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016cca:	f001 fa71 	bl	80181b0 <xTaskGetSchedulerState>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d102      	bne.n	8016cda <xQueueGenericSend+0x9e>
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d101      	bne.n	8016cde <xQueueGenericSend+0xa2>
 8016cda:	2301      	movs	r3, #1
 8016cdc:	e000      	b.n	8016ce0 <xQueueGenericSend+0xa4>
 8016cde:	2300      	movs	r3, #0
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d10a      	bne.n	8016cfa <xQueueGenericSend+0xbe>
	__asm volatile
 8016ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce8:	f383 8811 	msr	BASEPRI, r3
 8016cec:	f3bf 8f6f 	isb	sy
 8016cf0:	f3bf 8f4f 	dsb	sy
 8016cf4:	61fb      	str	r3, [r7, #28]
}
 8016cf6:	bf00      	nop
 8016cf8:	e7fe      	b.n	8016cf8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016cfa:	f001 ffeb 	bl	8018cd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d06:	429a      	cmp	r2, r3
 8016d08:	d302      	bcc.n	8016d10 <xQueueGenericSend+0xd4>
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	2b02      	cmp	r3, #2
 8016d0e:	d129      	bne.n	8016d64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016d10:	683a      	ldr	r2, [r7, #0]
 8016d12:	68b9      	ldr	r1, [r7, #8]
 8016d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d16:	f000 fa0b 	bl	8017130 <prvCopyDataToQueue>
 8016d1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d010      	beq.n	8016d46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d26:	3324      	adds	r3, #36	; 0x24
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f001 f821 	bl	8017d70 <xTaskRemoveFromEventList>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d013      	beq.n	8016d5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016d34:	4b3f      	ldr	r3, [pc, #252]	; (8016e34 <xQueueGenericSend+0x1f8>)
 8016d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d3a:	601a      	str	r2, [r3, #0]
 8016d3c:	f3bf 8f4f 	dsb	sy
 8016d40:	f3bf 8f6f 	isb	sy
 8016d44:	e00a      	b.n	8016d5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d007      	beq.n	8016d5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016d4c:	4b39      	ldr	r3, [pc, #228]	; (8016e34 <xQueueGenericSend+0x1f8>)
 8016d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d52:	601a      	str	r2, [r3, #0]
 8016d54:	f3bf 8f4f 	dsb	sy
 8016d58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016d5c:	f001 ffea 	bl	8018d34 <vPortExitCritical>
				return pdPASS;
 8016d60:	2301      	movs	r3, #1
 8016d62:	e063      	b.n	8016e2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d103      	bne.n	8016d72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016d6a:	f001 ffe3 	bl	8018d34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016d6e:	2300      	movs	r3, #0
 8016d70:	e05c      	b.n	8016e2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d106      	bne.n	8016d86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016d78:	f107 0314 	add.w	r3, r7, #20
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f001 f8bd 	bl	8017efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016d82:	2301      	movs	r3, #1
 8016d84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016d86:	f001 ffd5 	bl	8018d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016d8a:	f000 fd7b 	bl	8017884 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016d8e:	f001 ffa1 	bl	8018cd4 <vPortEnterCritical>
 8016d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d98:	b25b      	sxtb	r3, r3
 8016d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016d9e:	d103      	bne.n	8016da8 <xQueueGenericSend+0x16c>
 8016da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da2:	2200      	movs	r2, #0
 8016da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016daa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016dae:	b25b      	sxtb	r3, r3
 8016db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016db4:	d103      	bne.n	8016dbe <xQueueGenericSend+0x182>
 8016db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016db8:	2200      	movs	r2, #0
 8016dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016dbe:	f001 ffb9 	bl	8018d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016dc2:	1d3a      	adds	r2, r7, #4
 8016dc4:	f107 0314 	add.w	r3, r7, #20
 8016dc8:	4611      	mov	r1, r2
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f001 f8ac 	bl	8017f28 <xTaskCheckForTimeOut>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d124      	bne.n	8016e20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016dd8:	f000 faa2 	bl	8017320 <prvIsQueueFull>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d018      	beq.n	8016e14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de4:	3310      	adds	r3, #16
 8016de6:	687a      	ldr	r2, [r7, #4]
 8016de8:	4611      	mov	r1, r2
 8016dea:	4618      	mov	r0, r3
 8016dec:	f000 ff34 	bl	8017c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016df2:	f000 fa2d 	bl	8017250 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016df6:	f000 fd53 	bl	80178a0 <xTaskResumeAll>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	f47f af7c 	bne.w	8016cfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016e02:	4b0c      	ldr	r3, [pc, #48]	; (8016e34 <xQueueGenericSend+0x1f8>)
 8016e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e08:	601a      	str	r2, [r3, #0]
 8016e0a:	f3bf 8f4f 	dsb	sy
 8016e0e:	f3bf 8f6f 	isb	sy
 8016e12:	e772      	b.n	8016cfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e16:	f000 fa1b 	bl	8017250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016e1a:	f000 fd41 	bl	80178a0 <xTaskResumeAll>
 8016e1e:	e76c      	b.n	8016cfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e22:	f000 fa15 	bl	8017250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016e26:	f000 fd3b 	bl	80178a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016e2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3738      	adds	r7, #56	; 0x38
 8016e30:	46bd      	mov	sp, r7
 8016e32:	bd80      	pop	{r7, pc}
 8016e34:	e000ed04 	.word	0xe000ed04

08016e38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b090      	sub	sp, #64	; 0x40
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	60f8      	str	r0, [r7, #12]
 8016e40:	60b9      	str	r1, [r7, #8]
 8016e42:	607a      	str	r2, [r7, #4]
 8016e44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d10a      	bne.n	8016e66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e54:	f383 8811 	msr	BASEPRI, r3
 8016e58:	f3bf 8f6f 	isb	sy
 8016e5c:	f3bf 8f4f 	dsb	sy
 8016e60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016e62:	bf00      	nop
 8016e64:	e7fe      	b.n	8016e64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d103      	bne.n	8016e74 <xQueueGenericSendFromISR+0x3c>
 8016e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d101      	bne.n	8016e78 <xQueueGenericSendFromISR+0x40>
 8016e74:	2301      	movs	r3, #1
 8016e76:	e000      	b.n	8016e7a <xQueueGenericSendFromISR+0x42>
 8016e78:	2300      	movs	r3, #0
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d10a      	bne.n	8016e94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e82:	f383 8811 	msr	BASEPRI, r3
 8016e86:	f3bf 8f6f 	isb	sy
 8016e8a:	f3bf 8f4f 	dsb	sy
 8016e8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016e90:	bf00      	nop
 8016e92:	e7fe      	b.n	8016e92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	2b02      	cmp	r3, #2
 8016e98:	d103      	bne.n	8016ea2 <xQueueGenericSendFromISR+0x6a>
 8016e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e9e:	2b01      	cmp	r3, #1
 8016ea0:	d101      	bne.n	8016ea6 <xQueueGenericSendFromISR+0x6e>
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	e000      	b.n	8016ea8 <xQueueGenericSendFromISR+0x70>
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d10a      	bne.n	8016ec2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb0:	f383 8811 	msr	BASEPRI, r3
 8016eb4:	f3bf 8f6f 	isb	sy
 8016eb8:	f3bf 8f4f 	dsb	sy
 8016ebc:	623b      	str	r3, [r7, #32]
}
 8016ebe:	bf00      	nop
 8016ec0:	e7fe      	b.n	8016ec0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016ec2:	f001 ffe9 	bl	8018e98 <vPortValidateInterruptPriority>
	__asm volatile
 8016ec6:	f3ef 8211 	mrs	r2, BASEPRI
 8016eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ece:	f383 8811 	msr	BASEPRI, r3
 8016ed2:	f3bf 8f6f 	isb	sy
 8016ed6:	f3bf 8f4f 	dsb	sy
 8016eda:	61fa      	str	r2, [r7, #28]
 8016edc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8016ede:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016ee0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016eea:	429a      	cmp	r2, r3
 8016eec:	d302      	bcc.n	8016ef4 <xQueueGenericSendFromISR+0xbc>
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	2b02      	cmp	r3, #2
 8016ef2:	d12f      	bne.n	8016f54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f04:	683a      	ldr	r2, [r7, #0]
 8016f06:	68b9      	ldr	r1, [r7, #8]
 8016f08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016f0a:	f000 f911 	bl	8017130 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016f0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f16:	d112      	bne.n	8016f3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d016      	beq.n	8016f4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f22:	3324      	adds	r3, #36	; 0x24
 8016f24:	4618      	mov	r0, r3
 8016f26:	f000 ff23 	bl	8017d70 <xTaskRemoveFromEventList>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d00e      	beq.n	8016f4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d00b      	beq.n	8016f4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	2201      	movs	r2, #1
 8016f3a:	601a      	str	r2, [r3, #0]
 8016f3c:	e007      	b.n	8016f4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016f3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016f42:	3301      	adds	r3, #1
 8016f44:	b2db      	uxtb	r3, r3
 8016f46:	b25a      	sxtb	r2, r3
 8016f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016f4e:	2301      	movs	r3, #1
 8016f50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016f52:	e001      	b.n	8016f58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016f54:	2300      	movs	r3, #0
 8016f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f5a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8016f5c:	697b      	ldr	r3, [r7, #20]
 8016f5e:	f383 8811 	msr	BASEPRI, r3
}
 8016f62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3740      	adds	r7, #64	; 0x40
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}
	...

08016f70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b08c      	sub	sp, #48	; 0x30
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	60f8      	str	r0, [r7, #12]
 8016f78:	60b9      	str	r1, [r7, #8]
 8016f7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d10a      	bne.n	8016fa0 <xQueueReceive+0x30>
	__asm volatile
 8016f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f8e:	f383 8811 	msr	BASEPRI, r3
 8016f92:	f3bf 8f6f 	isb	sy
 8016f96:	f3bf 8f4f 	dsb	sy
 8016f9a:	623b      	str	r3, [r7, #32]
}
 8016f9c:	bf00      	nop
 8016f9e:	e7fe      	b.n	8016f9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016fa0:	68bb      	ldr	r3, [r7, #8]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d103      	bne.n	8016fae <xQueueReceive+0x3e>
 8016fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d101      	bne.n	8016fb2 <xQueueReceive+0x42>
 8016fae:	2301      	movs	r3, #1
 8016fb0:	e000      	b.n	8016fb4 <xQueueReceive+0x44>
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d10a      	bne.n	8016fce <xQueueReceive+0x5e>
	__asm volatile
 8016fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fbc:	f383 8811 	msr	BASEPRI, r3
 8016fc0:	f3bf 8f6f 	isb	sy
 8016fc4:	f3bf 8f4f 	dsb	sy
 8016fc8:	61fb      	str	r3, [r7, #28]
}
 8016fca:	bf00      	nop
 8016fcc:	e7fe      	b.n	8016fcc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016fce:	f001 f8ef 	bl	80181b0 <xTaskGetSchedulerState>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d102      	bne.n	8016fde <xQueueReceive+0x6e>
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d101      	bne.n	8016fe2 <xQueueReceive+0x72>
 8016fde:	2301      	movs	r3, #1
 8016fe0:	e000      	b.n	8016fe4 <xQueueReceive+0x74>
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d10a      	bne.n	8016ffe <xQueueReceive+0x8e>
	__asm volatile
 8016fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fec:	f383 8811 	msr	BASEPRI, r3
 8016ff0:	f3bf 8f6f 	isb	sy
 8016ff4:	f3bf 8f4f 	dsb	sy
 8016ff8:	61bb      	str	r3, [r7, #24]
}
 8016ffa:	bf00      	nop
 8016ffc:	e7fe      	b.n	8016ffc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016ffe:	f001 fe69 	bl	8018cd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017006:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801700a:	2b00      	cmp	r3, #0
 801700c:	d01f      	beq.n	801704e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801700e:	68b9      	ldr	r1, [r7, #8]
 8017010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017012:	f000 f8f7 	bl	8017204 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017018:	1e5a      	subs	r2, r3, #1
 801701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017020:	691b      	ldr	r3, [r3, #16]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d00f      	beq.n	8017046 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017028:	3310      	adds	r3, #16
 801702a:	4618      	mov	r0, r3
 801702c:	f000 fea0 	bl	8017d70 <xTaskRemoveFromEventList>
 8017030:	4603      	mov	r3, r0
 8017032:	2b00      	cmp	r3, #0
 8017034:	d007      	beq.n	8017046 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017036:	4b3d      	ldr	r3, [pc, #244]	; (801712c <xQueueReceive+0x1bc>)
 8017038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801703c:	601a      	str	r2, [r3, #0]
 801703e:	f3bf 8f4f 	dsb	sy
 8017042:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017046:	f001 fe75 	bl	8018d34 <vPortExitCritical>
				return pdPASS;
 801704a:	2301      	movs	r3, #1
 801704c:	e069      	b.n	8017122 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d103      	bne.n	801705c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017054:	f001 fe6e 	bl	8018d34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017058:	2300      	movs	r3, #0
 801705a:	e062      	b.n	8017122 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801705e:	2b00      	cmp	r3, #0
 8017060:	d106      	bne.n	8017070 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017062:	f107 0310 	add.w	r3, r7, #16
 8017066:	4618      	mov	r0, r3
 8017068:	f000 ff48 	bl	8017efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801706c:	2301      	movs	r3, #1
 801706e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017070:	f001 fe60 	bl	8018d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017074:	f000 fc06 	bl	8017884 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017078:	f001 fe2c 	bl	8018cd4 <vPortEnterCritical>
 801707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801707e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017082:	b25b      	sxtb	r3, r3
 8017084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017088:	d103      	bne.n	8017092 <xQueueReceive+0x122>
 801708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708c:	2200      	movs	r2, #0
 801708e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017098:	b25b      	sxtb	r3, r3
 801709a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801709e:	d103      	bne.n	80170a8 <xQueueReceive+0x138>
 80170a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a2:	2200      	movs	r2, #0
 80170a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80170a8:	f001 fe44 	bl	8018d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80170ac:	1d3a      	adds	r2, r7, #4
 80170ae:	f107 0310 	add.w	r3, r7, #16
 80170b2:	4611      	mov	r1, r2
 80170b4:	4618      	mov	r0, r3
 80170b6:	f000 ff37 	bl	8017f28 <xTaskCheckForTimeOut>
 80170ba:	4603      	mov	r3, r0
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d123      	bne.n	8017108 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80170c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170c2:	f000 f917 	bl	80172f4 <prvIsQueueEmpty>
 80170c6:	4603      	mov	r3, r0
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d017      	beq.n	80170fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80170cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ce:	3324      	adds	r3, #36	; 0x24
 80170d0:	687a      	ldr	r2, [r7, #4]
 80170d2:	4611      	mov	r1, r2
 80170d4:	4618      	mov	r0, r3
 80170d6:	f000 fdbf 	bl	8017c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80170da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170dc:	f000 f8b8 	bl	8017250 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80170e0:	f000 fbde 	bl	80178a0 <xTaskResumeAll>
 80170e4:	4603      	mov	r3, r0
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d189      	bne.n	8016ffe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80170ea:	4b10      	ldr	r3, [pc, #64]	; (801712c <xQueueReceive+0x1bc>)
 80170ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170f0:	601a      	str	r2, [r3, #0]
 80170f2:	f3bf 8f4f 	dsb	sy
 80170f6:	f3bf 8f6f 	isb	sy
 80170fa:	e780      	b.n	8016ffe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80170fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170fe:	f000 f8a7 	bl	8017250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017102:	f000 fbcd 	bl	80178a0 <xTaskResumeAll>
 8017106:	e77a      	b.n	8016ffe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801710a:	f000 f8a1 	bl	8017250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801710e:	f000 fbc7 	bl	80178a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017114:	f000 f8ee 	bl	80172f4 <prvIsQueueEmpty>
 8017118:	4603      	mov	r3, r0
 801711a:	2b00      	cmp	r3, #0
 801711c:	f43f af6f 	beq.w	8016ffe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017120:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017122:	4618      	mov	r0, r3
 8017124:	3730      	adds	r7, #48	; 0x30
 8017126:	46bd      	mov	sp, r7
 8017128:	bd80      	pop	{r7, pc}
 801712a:	bf00      	nop
 801712c:	e000ed04 	.word	0xe000ed04

08017130 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b086      	sub	sp, #24
 8017134:	af00      	add	r7, sp, #0
 8017136:	60f8      	str	r0, [r7, #12]
 8017138:	60b9      	str	r1, [r7, #8]
 801713a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801713c:	2300      	movs	r3, #0
 801713e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017144:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801714a:	2b00      	cmp	r3, #0
 801714c:	d10d      	bne.n	801716a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d14d      	bne.n	80171f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	689b      	ldr	r3, [r3, #8]
 801715a:	4618      	mov	r0, r3
 801715c:	f001 f846 	bl	80181ec <xTaskPriorityDisinherit>
 8017160:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	2200      	movs	r2, #0
 8017166:	609a      	str	r2, [r3, #8]
 8017168:	e043      	b.n	80171f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d119      	bne.n	80171a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	6858      	ldr	r0, [r3, #4]
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017178:	461a      	mov	r2, r3
 801717a:	68b9      	ldr	r1, [r7, #8]
 801717c:	f002 f8e0 	bl	8019340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	685a      	ldr	r2, [r3, #4]
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017188:	441a      	add	r2, r3
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	685a      	ldr	r2, [r3, #4]
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	689b      	ldr	r3, [r3, #8]
 8017196:	429a      	cmp	r2, r3
 8017198:	d32b      	bcc.n	80171f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	681a      	ldr	r2, [r3, #0]
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	605a      	str	r2, [r3, #4]
 80171a2:	e026      	b.n	80171f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	68d8      	ldr	r0, [r3, #12]
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ac:	461a      	mov	r2, r3
 80171ae:	68b9      	ldr	r1, [r7, #8]
 80171b0:	f002 f8c6 	bl	8019340 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	68da      	ldr	r2, [r3, #12]
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171bc:	425b      	negs	r3, r3
 80171be:	441a      	add	r2, r3
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	68da      	ldr	r2, [r3, #12]
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d207      	bcs.n	80171e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	689a      	ldr	r2, [r3, #8]
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171d8:	425b      	negs	r3, r3
 80171da:	441a      	add	r2, r3
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	2b02      	cmp	r3, #2
 80171e4:	d105      	bne.n	80171f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80171e6:	693b      	ldr	r3, [r7, #16]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d002      	beq.n	80171f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80171ec:	693b      	ldr	r3, [r7, #16]
 80171ee:	3b01      	subs	r3, #1
 80171f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80171f2:	693b      	ldr	r3, [r7, #16]
 80171f4:	1c5a      	adds	r2, r3, #1
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80171fa:	697b      	ldr	r3, [r7, #20]
}
 80171fc:	4618      	mov	r0, r3
 80171fe:	3718      	adds	r7, #24
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}

08017204 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b082      	sub	sp, #8
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017212:	2b00      	cmp	r3, #0
 8017214:	d018      	beq.n	8017248 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	68da      	ldr	r2, [r3, #12]
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801721e:	441a      	add	r2, r3
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	68da      	ldr	r2, [r3, #12]
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	689b      	ldr	r3, [r3, #8]
 801722c:	429a      	cmp	r2, r3
 801722e:	d303      	bcc.n	8017238 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681a      	ldr	r2, [r3, #0]
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	68d9      	ldr	r1, [r3, #12]
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017240:	461a      	mov	r2, r3
 8017242:	6838      	ldr	r0, [r7, #0]
 8017244:	f002 f87c 	bl	8019340 <memcpy>
	}
}
 8017248:	bf00      	nop
 801724a:	3708      	adds	r7, #8
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}

08017250 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b084      	sub	sp, #16
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017258:	f001 fd3c 	bl	8018cd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017262:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017264:	e011      	b.n	801728a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801726a:	2b00      	cmp	r3, #0
 801726c:	d012      	beq.n	8017294 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	3324      	adds	r3, #36	; 0x24
 8017272:	4618      	mov	r0, r3
 8017274:	f000 fd7c 	bl	8017d70 <xTaskRemoveFromEventList>
 8017278:	4603      	mov	r3, r0
 801727a:	2b00      	cmp	r3, #0
 801727c:	d001      	beq.n	8017282 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801727e:	f000 feb5 	bl	8017fec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017282:	7bfb      	ldrb	r3, [r7, #15]
 8017284:	3b01      	subs	r3, #1
 8017286:	b2db      	uxtb	r3, r3
 8017288:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801728a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801728e:	2b00      	cmp	r3, #0
 8017290:	dce9      	bgt.n	8017266 <prvUnlockQueue+0x16>
 8017292:	e000      	b.n	8017296 <prvUnlockQueue+0x46>
					break;
 8017294:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	22ff      	movs	r2, #255	; 0xff
 801729a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801729e:	f001 fd49 	bl	8018d34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80172a2:	f001 fd17 	bl	8018cd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80172ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80172ae:	e011      	b.n	80172d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	691b      	ldr	r3, [r3, #16]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d012      	beq.n	80172de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	3310      	adds	r3, #16
 80172bc:	4618      	mov	r0, r3
 80172be:	f000 fd57 	bl	8017d70 <xTaskRemoveFromEventList>
 80172c2:	4603      	mov	r3, r0
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d001      	beq.n	80172cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80172c8:	f000 fe90 	bl	8017fec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80172cc:	7bbb      	ldrb	r3, [r7, #14]
 80172ce:	3b01      	subs	r3, #1
 80172d0:	b2db      	uxtb	r3, r3
 80172d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80172d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	dce9      	bgt.n	80172b0 <prvUnlockQueue+0x60>
 80172dc:	e000      	b.n	80172e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80172de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	22ff      	movs	r2, #255	; 0xff
 80172e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80172e8:	f001 fd24 	bl	8018d34 <vPortExitCritical>
}
 80172ec:	bf00      	nop
 80172ee:	3710      	adds	r7, #16
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}

080172f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b084      	sub	sp, #16
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80172fc:	f001 fcea 	bl	8018cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017304:	2b00      	cmp	r3, #0
 8017306:	d102      	bne.n	801730e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017308:	2301      	movs	r3, #1
 801730a:	60fb      	str	r3, [r7, #12]
 801730c:	e001      	b.n	8017312 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801730e:	2300      	movs	r3, #0
 8017310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017312:	f001 fd0f 	bl	8018d34 <vPortExitCritical>

	return xReturn;
 8017316:	68fb      	ldr	r3, [r7, #12]
}
 8017318:	4618      	mov	r0, r3
 801731a:	3710      	adds	r7, #16
 801731c:	46bd      	mov	sp, r7
 801731e:	bd80      	pop	{r7, pc}

08017320 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b084      	sub	sp, #16
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017328:	f001 fcd4 	bl	8018cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017334:	429a      	cmp	r2, r3
 8017336:	d102      	bne.n	801733e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017338:	2301      	movs	r3, #1
 801733a:	60fb      	str	r3, [r7, #12]
 801733c:	e001      	b.n	8017342 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801733e:	2300      	movs	r3, #0
 8017340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017342:	f001 fcf7 	bl	8018d34 <vPortExitCritical>

	return xReturn;
 8017346:	68fb      	ldr	r3, [r7, #12]
}
 8017348:	4618      	mov	r0, r3
 801734a:	3710      	adds	r7, #16
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017350:	b480      	push	{r7}
 8017352:	b085      	sub	sp, #20
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801735a:	2300      	movs	r3, #0
 801735c:	60fb      	str	r3, [r7, #12]
 801735e:	e014      	b.n	801738a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017360:	4a0f      	ldr	r2, [pc, #60]	; (80173a0 <vQueueAddToRegistry+0x50>)
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d10b      	bne.n	8017384 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801736c:	490c      	ldr	r1, [pc, #48]	; (80173a0 <vQueueAddToRegistry+0x50>)
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	683a      	ldr	r2, [r7, #0]
 8017372:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017376:	4a0a      	ldr	r2, [pc, #40]	; (80173a0 <vQueueAddToRegistry+0x50>)
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	00db      	lsls	r3, r3, #3
 801737c:	4413      	add	r3, r2
 801737e:	687a      	ldr	r2, [r7, #4]
 8017380:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017382:	e006      	b.n	8017392 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	3301      	adds	r3, #1
 8017388:	60fb      	str	r3, [r7, #12]
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	2b07      	cmp	r3, #7
 801738e:	d9e7      	bls.n	8017360 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017390:	bf00      	nop
 8017392:	bf00      	nop
 8017394:	3714      	adds	r7, #20
 8017396:	46bd      	mov	sp, r7
 8017398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739c:	4770      	bx	lr
 801739e:	bf00      	nop
 80173a0:	240026d8 	.word	0x240026d8

080173a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80173a4:	b580      	push	{r7, lr}
 80173a6:	b086      	sub	sp, #24
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	60f8      	str	r0, [r7, #12]
 80173ac:	60b9      	str	r1, [r7, #8]
 80173ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80173b4:	f001 fc8e 	bl	8018cd4 <vPortEnterCritical>
 80173b8:	697b      	ldr	r3, [r7, #20]
 80173ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80173be:	b25b      	sxtb	r3, r3
 80173c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80173c4:	d103      	bne.n	80173ce <vQueueWaitForMessageRestricted+0x2a>
 80173c6:	697b      	ldr	r3, [r7, #20]
 80173c8:	2200      	movs	r2, #0
 80173ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80173ce:	697b      	ldr	r3, [r7, #20]
 80173d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80173d4:	b25b      	sxtb	r3, r3
 80173d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80173da:	d103      	bne.n	80173e4 <vQueueWaitForMessageRestricted+0x40>
 80173dc:	697b      	ldr	r3, [r7, #20]
 80173de:	2200      	movs	r2, #0
 80173e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80173e4:	f001 fca6 	bl	8018d34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80173e8:	697b      	ldr	r3, [r7, #20]
 80173ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d106      	bne.n	80173fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80173f0:	697b      	ldr	r3, [r7, #20]
 80173f2:	3324      	adds	r3, #36	; 0x24
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	68b9      	ldr	r1, [r7, #8]
 80173f8:	4618      	mov	r0, r3
 80173fa:	f000 fc8d 	bl	8017d18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80173fe:	6978      	ldr	r0, [r7, #20]
 8017400:	f7ff ff26 	bl	8017250 <prvUnlockQueue>
	}
 8017404:	bf00      	nop
 8017406:	3718      	adds	r7, #24
 8017408:	46bd      	mov	sp, r7
 801740a:	bd80      	pop	{r7, pc}

0801740c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801740c:	b580      	push	{r7, lr}
 801740e:	b08e      	sub	sp, #56	; 0x38
 8017410:	af04      	add	r7, sp, #16
 8017412:	60f8      	str	r0, [r7, #12]
 8017414:	60b9      	str	r1, [r7, #8]
 8017416:	607a      	str	r2, [r7, #4]
 8017418:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801741a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801741c:	2b00      	cmp	r3, #0
 801741e:	d10a      	bne.n	8017436 <xTaskCreateStatic+0x2a>
	__asm volatile
 8017420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017424:	f383 8811 	msr	BASEPRI, r3
 8017428:	f3bf 8f6f 	isb	sy
 801742c:	f3bf 8f4f 	dsb	sy
 8017430:	623b      	str	r3, [r7, #32]
}
 8017432:	bf00      	nop
 8017434:	e7fe      	b.n	8017434 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017438:	2b00      	cmp	r3, #0
 801743a:	d10a      	bne.n	8017452 <xTaskCreateStatic+0x46>
	__asm volatile
 801743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017440:	f383 8811 	msr	BASEPRI, r3
 8017444:	f3bf 8f6f 	isb	sy
 8017448:	f3bf 8f4f 	dsb	sy
 801744c:	61fb      	str	r3, [r7, #28]
}
 801744e:	bf00      	nop
 8017450:	e7fe      	b.n	8017450 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017452:	235c      	movs	r3, #92	; 0x5c
 8017454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	2b5c      	cmp	r3, #92	; 0x5c
 801745a:	d00a      	beq.n	8017472 <xTaskCreateStatic+0x66>
	__asm volatile
 801745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017460:	f383 8811 	msr	BASEPRI, r3
 8017464:	f3bf 8f6f 	isb	sy
 8017468:	f3bf 8f4f 	dsb	sy
 801746c:	61bb      	str	r3, [r7, #24]
}
 801746e:	bf00      	nop
 8017470:	e7fe      	b.n	8017470 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017472:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017476:	2b00      	cmp	r3, #0
 8017478:	d01e      	beq.n	80174b8 <xTaskCreateStatic+0xac>
 801747a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801747c:	2b00      	cmp	r3, #0
 801747e:	d01b      	beq.n	80174b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017482:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017488:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801748c:	2202      	movs	r2, #2
 801748e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017492:	2300      	movs	r3, #0
 8017494:	9303      	str	r3, [sp, #12]
 8017496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017498:	9302      	str	r3, [sp, #8]
 801749a:	f107 0314 	add.w	r3, r7, #20
 801749e:	9301      	str	r3, [sp, #4]
 80174a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a2:	9300      	str	r3, [sp, #0]
 80174a4:	683b      	ldr	r3, [r7, #0]
 80174a6:	687a      	ldr	r2, [r7, #4]
 80174a8:	68b9      	ldr	r1, [r7, #8]
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f000 f850 	bl	8017550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80174b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174b2:	f000 f8dd 	bl	8017670 <prvAddNewTaskToReadyList>
 80174b6:	e001      	b.n	80174bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80174b8:	2300      	movs	r3, #0
 80174ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80174bc:	697b      	ldr	r3, [r7, #20]
	}
 80174be:	4618      	mov	r0, r3
 80174c0:	3728      	adds	r7, #40	; 0x28
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}

080174c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b08c      	sub	sp, #48	; 0x30
 80174ca:	af04      	add	r7, sp, #16
 80174cc:	60f8      	str	r0, [r7, #12]
 80174ce:	60b9      	str	r1, [r7, #8]
 80174d0:	603b      	str	r3, [r7, #0]
 80174d2:	4613      	mov	r3, r2
 80174d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80174d6:	88fb      	ldrh	r3, [r7, #6]
 80174d8:	009b      	lsls	r3, r3, #2
 80174da:	4618      	mov	r0, r3
 80174dc:	f001 fd1c 	bl	8018f18 <pvPortMalloc>
 80174e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80174e2:	697b      	ldr	r3, [r7, #20]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d00e      	beq.n	8017506 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80174e8:	205c      	movs	r0, #92	; 0x5c
 80174ea:	f001 fd15 	bl	8018f18 <pvPortMalloc>
 80174ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80174f0:	69fb      	ldr	r3, [r7, #28]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d003      	beq.n	80174fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80174f6:	69fb      	ldr	r3, [r7, #28]
 80174f8:	697a      	ldr	r2, [r7, #20]
 80174fa:	631a      	str	r2, [r3, #48]	; 0x30
 80174fc:	e005      	b.n	801750a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80174fe:	6978      	ldr	r0, [r7, #20]
 8017500:	f001 fdd6 	bl	80190b0 <vPortFree>
 8017504:	e001      	b.n	801750a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017506:	2300      	movs	r3, #0
 8017508:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801750a:	69fb      	ldr	r3, [r7, #28]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d017      	beq.n	8017540 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017510:	69fb      	ldr	r3, [r7, #28]
 8017512:	2200      	movs	r2, #0
 8017514:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017518:	88fa      	ldrh	r2, [r7, #6]
 801751a:	2300      	movs	r3, #0
 801751c:	9303      	str	r3, [sp, #12]
 801751e:	69fb      	ldr	r3, [r7, #28]
 8017520:	9302      	str	r3, [sp, #8]
 8017522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017524:	9301      	str	r3, [sp, #4]
 8017526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017528:	9300      	str	r3, [sp, #0]
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	68b9      	ldr	r1, [r7, #8]
 801752e:	68f8      	ldr	r0, [r7, #12]
 8017530:	f000 f80e 	bl	8017550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017534:	69f8      	ldr	r0, [r7, #28]
 8017536:	f000 f89b 	bl	8017670 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801753a:	2301      	movs	r3, #1
 801753c:	61bb      	str	r3, [r7, #24]
 801753e:	e002      	b.n	8017546 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017544:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017546:	69bb      	ldr	r3, [r7, #24]
	}
 8017548:	4618      	mov	r0, r3
 801754a:	3720      	adds	r7, #32
 801754c:	46bd      	mov	sp, r7
 801754e:	bd80      	pop	{r7, pc}

08017550 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017550:	b580      	push	{r7, lr}
 8017552:	b088      	sub	sp, #32
 8017554:	af00      	add	r7, sp, #0
 8017556:	60f8      	str	r0, [r7, #12]
 8017558:	60b9      	str	r1, [r7, #8]
 801755a:	607a      	str	r2, [r7, #4]
 801755c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017560:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	009b      	lsls	r3, r3, #2
 8017566:	461a      	mov	r2, r3
 8017568:	21a5      	movs	r1, #165	; 0xa5
 801756a:	f001 fef7 	bl	801935c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017572:	6879      	ldr	r1, [r7, #4]
 8017574:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017578:	440b      	add	r3, r1
 801757a:	009b      	lsls	r3, r3, #2
 801757c:	4413      	add	r3, r2
 801757e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	f023 0307 	bic.w	r3, r3, #7
 8017586:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017588:	69bb      	ldr	r3, [r7, #24]
 801758a:	f003 0307 	and.w	r3, r3, #7
 801758e:	2b00      	cmp	r3, #0
 8017590:	d00a      	beq.n	80175a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017596:	f383 8811 	msr	BASEPRI, r3
 801759a:	f3bf 8f6f 	isb	sy
 801759e:	f3bf 8f4f 	dsb	sy
 80175a2:	617b      	str	r3, [r7, #20]
}
 80175a4:	bf00      	nop
 80175a6:	e7fe      	b.n	80175a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d01f      	beq.n	80175ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80175ae:	2300      	movs	r3, #0
 80175b0:	61fb      	str	r3, [r7, #28]
 80175b2:	e012      	b.n	80175da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80175b4:	68ba      	ldr	r2, [r7, #8]
 80175b6:	69fb      	ldr	r3, [r7, #28]
 80175b8:	4413      	add	r3, r2
 80175ba:	7819      	ldrb	r1, [r3, #0]
 80175bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175be:	69fb      	ldr	r3, [r7, #28]
 80175c0:	4413      	add	r3, r2
 80175c2:	3334      	adds	r3, #52	; 0x34
 80175c4:	460a      	mov	r2, r1
 80175c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80175c8:	68ba      	ldr	r2, [r7, #8]
 80175ca:	69fb      	ldr	r3, [r7, #28]
 80175cc:	4413      	add	r3, r2
 80175ce:	781b      	ldrb	r3, [r3, #0]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d006      	beq.n	80175e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80175d4:	69fb      	ldr	r3, [r7, #28]
 80175d6:	3301      	adds	r3, #1
 80175d8:	61fb      	str	r3, [r7, #28]
 80175da:	69fb      	ldr	r3, [r7, #28]
 80175dc:	2b0f      	cmp	r3, #15
 80175de:	d9e9      	bls.n	80175b4 <prvInitialiseNewTask+0x64>
 80175e0:	e000      	b.n	80175e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80175e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80175e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e6:	2200      	movs	r2, #0
 80175e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80175ec:	e003      	b.n	80175f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80175ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f0:	2200      	movs	r2, #0
 80175f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80175f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f8:	2b37      	cmp	r3, #55	; 0x37
 80175fa:	d901      	bls.n	8017600 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80175fc:	2337      	movs	r3, #55	; 0x37
 80175fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017604:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801760a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801760e:	2200      	movs	r2, #0
 8017610:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017614:	3304      	adds	r3, #4
 8017616:	4618      	mov	r0, r3
 8017618:	f7ff f978 	bl	801690c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801761e:	3318      	adds	r3, #24
 8017620:	4618      	mov	r0, r3
 8017622:	f7ff f973 	bl	801690c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801762a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801762e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017634:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801763a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801763e:	2200      	movs	r2, #0
 8017640:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017644:	2200      	movs	r2, #0
 8017646:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801764a:	683a      	ldr	r2, [r7, #0]
 801764c:	68f9      	ldr	r1, [r7, #12]
 801764e:	69b8      	ldr	r0, [r7, #24]
 8017650:	f001 fa14 	bl	8018a7c <pxPortInitialiseStack>
 8017654:	4602      	mov	r2, r0
 8017656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017658:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801765c:	2b00      	cmp	r3, #0
 801765e:	d002      	beq.n	8017666 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017666:	bf00      	nop
 8017668:	3720      	adds	r7, #32
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}
	...

08017670 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b082      	sub	sp, #8
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017678:	f001 fb2c 	bl	8018cd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801767c:	4b2d      	ldr	r3, [pc, #180]	; (8017734 <prvAddNewTaskToReadyList+0xc4>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	3301      	adds	r3, #1
 8017682:	4a2c      	ldr	r2, [pc, #176]	; (8017734 <prvAddNewTaskToReadyList+0xc4>)
 8017684:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017686:	4b2c      	ldr	r3, [pc, #176]	; (8017738 <prvAddNewTaskToReadyList+0xc8>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d109      	bne.n	80176a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801768e:	4a2a      	ldr	r2, [pc, #168]	; (8017738 <prvAddNewTaskToReadyList+0xc8>)
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017694:	4b27      	ldr	r3, [pc, #156]	; (8017734 <prvAddNewTaskToReadyList+0xc4>)
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	2b01      	cmp	r3, #1
 801769a:	d110      	bne.n	80176be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801769c:	f000 fcca 	bl	8018034 <prvInitialiseTaskLists>
 80176a0:	e00d      	b.n	80176be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80176a2:	4b26      	ldr	r3, [pc, #152]	; (801773c <prvAddNewTaskToReadyList+0xcc>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d109      	bne.n	80176be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80176aa:	4b23      	ldr	r3, [pc, #140]	; (8017738 <prvAddNewTaskToReadyList+0xc8>)
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176b4:	429a      	cmp	r2, r3
 80176b6:	d802      	bhi.n	80176be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80176b8:	4a1f      	ldr	r2, [pc, #124]	; (8017738 <prvAddNewTaskToReadyList+0xc8>)
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80176be:	4b20      	ldr	r3, [pc, #128]	; (8017740 <prvAddNewTaskToReadyList+0xd0>)
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	3301      	adds	r3, #1
 80176c4:	4a1e      	ldr	r2, [pc, #120]	; (8017740 <prvAddNewTaskToReadyList+0xd0>)
 80176c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80176c8:	4b1d      	ldr	r3, [pc, #116]	; (8017740 <prvAddNewTaskToReadyList+0xd0>)
 80176ca:	681a      	ldr	r2, [r3, #0]
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176d4:	4b1b      	ldr	r3, [pc, #108]	; (8017744 <prvAddNewTaskToReadyList+0xd4>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	429a      	cmp	r2, r3
 80176da:	d903      	bls.n	80176e4 <prvAddNewTaskToReadyList+0x74>
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176e0:	4a18      	ldr	r2, [pc, #96]	; (8017744 <prvAddNewTaskToReadyList+0xd4>)
 80176e2:	6013      	str	r3, [r2, #0]
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176e8:	4613      	mov	r3, r2
 80176ea:	009b      	lsls	r3, r3, #2
 80176ec:	4413      	add	r3, r2
 80176ee:	009b      	lsls	r3, r3, #2
 80176f0:	4a15      	ldr	r2, [pc, #84]	; (8017748 <prvAddNewTaskToReadyList+0xd8>)
 80176f2:	441a      	add	r2, r3
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	3304      	adds	r3, #4
 80176f8:	4619      	mov	r1, r3
 80176fa:	4610      	mov	r0, r2
 80176fc:	f7ff f913 	bl	8016926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017700:	f001 fb18 	bl	8018d34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017704:	4b0d      	ldr	r3, [pc, #52]	; (801773c <prvAddNewTaskToReadyList+0xcc>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d00e      	beq.n	801772a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801770c:	4b0a      	ldr	r3, [pc, #40]	; (8017738 <prvAddNewTaskToReadyList+0xc8>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017716:	429a      	cmp	r2, r3
 8017718:	d207      	bcs.n	801772a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801771a:	4b0c      	ldr	r3, [pc, #48]	; (801774c <prvAddNewTaskToReadyList+0xdc>)
 801771c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017720:	601a      	str	r2, [r3, #0]
 8017722:	f3bf 8f4f 	dsb	sy
 8017726:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801772a:	bf00      	nop
 801772c:	3708      	adds	r7, #8
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}
 8017732:	bf00      	nop
 8017734:	24002bec 	.word	0x24002bec
 8017738:	24002718 	.word	0x24002718
 801773c:	24002bf8 	.word	0x24002bf8
 8017740:	24002c08 	.word	0x24002c08
 8017744:	24002bf4 	.word	0x24002bf4
 8017748:	2400271c 	.word	0x2400271c
 801774c:	e000ed04 	.word	0xe000ed04

08017750 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017750:	b580      	push	{r7, lr}
 8017752:	b084      	sub	sp, #16
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017758:	2300      	movs	r3, #0
 801775a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d017      	beq.n	8017792 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017762:	4b13      	ldr	r3, [pc, #76]	; (80177b0 <vTaskDelay+0x60>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d00a      	beq.n	8017780 <vTaskDelay+0x30>
	__asm volatile
 801776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801776e:	f383 8811 	msr	BASEPRI, r3
 8017772:	f3bf 8f6f 	isb	sy
 8017776:	f3bf 8f4f 	dsb	sy
 801777a:	60bb      	str	r3, [r7, #8]
}
 801777c:	bf00      	nop
 801777e:	e7fe      	b.n	801777e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017780:	f000 f880 	bl	8017884 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017784:	2100      	movs	r1, #0
 8017786:	6878      	ldr	r0, [r7, #4]
 8017788:	f000 fdb6 	bl	80182f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801778c:	f000 f888 	bl	80178a0 <xTaskResumeAll>
 8017790:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d107      	bne.n	80177a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017798:	4b06      	ldr	r3, [pc, #24]	; (80177b4 <vTaskDelay+0x64>)
 801779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801779e:	601a      	str	r2, [r3, #0]
 80177a0:	f3bf 8f4f 	dsb	sy
 80177a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80177a8:	bf00      	nop
 80177aa:	3710      	adds	r7, #16
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd80      	pop	{r7, pc}
 80177b0:	24002c14 	.word	0x24002c14
 80177b4:	e000ed04 	.word	0xe000ed04

080177b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b08a      	sub	sp, #40	; 0x28
 80177bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80177be:	2300      	movs	r3, #0
 80177c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80177c2:	2300      	movs	r3, #0
 80177c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80177c6:	463a      	mov	r2, r7
 80177c8:	1d39      	adds	r1, r7, #4
 80177ca:	f107 0308 	add.w	r3, r7, #8
 80177ce:	4618      	mov	r0, r3
 80177d0:	f7fe fddc 	bl	801638c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80177d4:	6839      	ldr	r1, [r7, #0]
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	68ba      	ldr	r2, [r7, #8]
 80177da:	9202      	str	r2, [sp, #8]
 80177dc:	9301      	str	r3, [sp, #4]
 80177de:	2300      	movs	r3, #0
 80177e0:	9300      	str	r3, [sp, #0]
 80177e2:	2300      	movs	r3, #0
 80177e4:	460a      	mov	r2, r1
 80177e6:	4921      	ldr	r1, [pc, #132]	; (801786c <vTaskStartScheduler+0xb4>)
 80177e8:	4821      	ldr	r0, [pc, #132]	; (8017870 <vTaskStartScheduler+0xb8>)
 80177ea:	f7ff fe0f 	bl	801740c <xTaskCreateStatic>
 80177ee:	4603      	mov	r3, r0
 80177f0:	4a20      	ldr	r2, [pc, #128]	; (8017874 <vTaskStartScheduler+0xbc>)
 80177f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80177f4:	4b1f      	ldr	r3, [pc, #124]	; (8017874 <vTaskStartScheduler+0xbc>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d002      	beq.n	8017802 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80177fc:	2301      	movs	r3, #1
 80177fe:	617b      	str	r3, [r7, #20]
 8017800:	e001      	b.n	8017806 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017802:	2300      	movs	r3, #0
 8017804:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017806:	697b      	ldr	r3, [r7, #20]
 8017808:	2b01      	cmp	r3, #1
 801780a:	d102      	bne.n	8017812 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801780c:	f000 fdc8 	bl	80183a0 <xTimerCreateTimerTask>
 8017810:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	2b01      	cmp	r3, #1
 8017816:	d116      	bne.n	8017846 <vTaskStartScheduler+0x8e>
	__asm volatile
 8017818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801781c:	f383 8811 	msr	BASEPRI, r3
 8017820:	f3bf 8f6f 	isb	sy
 8017824:	f3bf 8f4f 	dsb	sy
 8017828:	613b      	str	r3, [r7, #16]
}
 801782a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801782c:	4b12      	ldr	r3, [pc, #72]	; (8017878 <vTaskStartScheduler+0xc0>)
 801782e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017832:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017834:	4b11      	ldr	r3, [pc, #68]	; (801787c <vTaskStartScheduler+0xc4>)
 8017836:	2201      	movs	r2, #1
 8017838:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801783a:	4b11      	ldr	r3, [pc, #68]	; (8017880 <vTaskStartScheduler+0xc8>)
 801783c:	2200      	movs	r2, #0
 801783e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017840:	f001 f9a6 	bl	8018b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017844:	e00e      	b.n	8017864 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017846:	697b      	ldr	r3, [r7, #20]
 8017848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801784c:	d10a      	bne.n	8017864 <vTaskStartScheduler+0xac>
	__asm volatile
 801784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017852:	f383 8811 	msr	BASEPRI, r3
 8017856:	f3bf 8f6f 	isb	sy
 801785a:	f3bf 8f4f 	dsb	sy
 801785e:	60fb      	str	r3, [r7, #12]
}
 8017860:	bf00      	nop
 8017862:	e7fe      	b.n	8017862 <vTaskStartScheduler+0xaa>
}
 8017864:	bf00      	nop
 8017866:	3718      	adds	r7, #24
 8017868:	46bd      	mov	sp, r7
 801786a:	bd80      	pop	{r7, pc}
 801786c:	08019fd0 	.word	0x08019fd0
 8017870:	08018005 	.word	0x08018005
 8017874:	24002c10 	.word	0x24002c10
 8017878:	24002c0c 	.word	0x24002c0c
 801787c:	24002bf8 	.word	0x24002bf8
 8017880:	24002bf0 	.word	0x24002bf0

08017884 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017884:	b480      	push	{r7}
 8017886:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017888:	4b04      	ldr	r3, [pc, #16]	; (801789c <vTaskSuspendAll+0x18>)
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	3301      	adds	r3, #1
 801788e:	4a03      	ldr	r2, [pc, #12]	; (801789c <vTaskSuspendAll+0x18>)
 8017890:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017892:	bf00      	nop
 8017894:	46bd      	mov	sp, r7
 8017896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789a:	4770      	bx	lr
 801789c:	24002c14 	.word	0x24002c14

080178a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80178a6:	2300      	movs	r3, #0
 80178a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80178aa:	2300      	movs	r3, #0
 80178ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80178ae:	4b42      	ldr	r3, [pc, #264]	; (80179b8 <xTaskResumeAll+0x118>)
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d10a      	bne.n	80178cc <xTaskResumeAll+0x2c>
	__asm volatile
 80178b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178ba:	f383 8811 	msr	BASEPRI, r3
 80178be:	f3bf 8f6f 	isb	sy
 80178c2:	f3bf 8f4f 	dsb	sy
 80178c6:	603b      	str	r3, [r7, #0]
}
 80178c8:	bf00      	nop
 80178ca:	e7fe      	b.n	80178ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80178cc:	f001 fa02 	bl	8018cd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80178d0:	4b39      	ldr	r3, [pc, #228]	; (80179b8 <xTaskResumeAll+0x118>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	3b01      	subs	r3, #1
 80178d6:	4a38      	ldr	r2, [pc, #224]	; (80179b8 <xTaskResumeAll+0x118>)
 80178d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80178da:	4b37      	ldr	r3, [pc, #220]	; (80179b8 <xTaskResumeAll+0x118>)
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d162      	bne.n	80179a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80178e2:	4b36      	ldr	r3, [pc, #216]	; (80179bc <xTaskResumeAll+0x11c>)
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d05e      	beq.n	80179a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80178ea:	e02f      	b.n	801794c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80178ec:	4b34      	ldr	r3, [pc, #208]	; (80179c0 <xTaskResumeAll+0x120>)
 80178ee:	68db      	ldr	r3, [r3, #12]
 80178f0:	68db      	ldr	r3, [r3, #12]
 80178f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	3318      	adds	r3, #24
 80178f8:	4618      	mov	r0, r3
 80178fa:	f7ff f871 	bl	80169e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	3304      	adds	r3, #4
 8017902:	4618      	mov	r0, r3
 8017904:	f7ff f86c 	bl	80169e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801790c:	4b2d      	ldr	r3, [pc, #180]	; (80179c4 <xTaskResumeAll+0x124>)
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	429a      	cmp	r2, r3
 8017912:	d903      	bls.n	801791c <xTaskResumeAll+0x7c>
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017918:	4a2a      	ldr	r2, [pc, #168]	; (80179c4 <xTaskResumeAll+0x124>)
 801791a:	6013      	str	r3, [r2, #0]
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017920:	4613      	mov	r3, r2
 8017922:	009b      	lsls	r3, r3, #2
 8017924:	4413      	add	r3, r2
 8017926:	009b      	lsls	r3, r3, #2
 8017928:	4a27      	ldr	r2, [pc, #156]	; (80179c8 <xTaskResumeAll+0x128>)
 801792a:	441a      	add	r2, r3
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	3304      	adds	r3, #4
 8017930:	4619      	mov	r1, r3
 8017932:	4610      	mov	r0, r2
 8017934:	f7fe fff7 	bl	8016926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801793c:	4b23      	ldr	r3, [pc, #140]	; (80179cc <xTaskResumeAll+0x12c>)
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017942:	429a      	cmp	r2, r3
 8017944:	d302      	bcc.n	801794c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017946:	4b22      	ldr	r3, [pc, #136]	; (80179d0 <xTaskResumeAll+0x130>)
 8017948:	2201      	movs	r2, #1
 801794a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801794c:	4b1c      	ldr	r3, [pc, #112]	; (80179c0 <xTaskResumeAll+0x120>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d1cb      	bne.n	80178ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d001      	beq.n	801795e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801795a:	f000 fc09 	bl	8018170 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801795e:	4b1d      	ldr	r3, [pc, #116]	; (80179d4 <xTaskResumeAll+0x134>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d010      	beq.n	801798c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801796a:	f000 f847 	bl	80179fc <xTaskIncrementTick>
 801796e:	4603      	mov	r3, r0
 8017970:	2b00      	cmp	r3, #0
 8017972:	d002      	beq.n	801797a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017974:	4b16      	ldr	r3, [pc, #88]	; (80179d0 <xTaskResumeAll+0x130>)
 8017976:	2201      	movs	r2, #1
 8017978:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	3b01      	subs	r3, #1
 801797e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d1f1      	bne.n	801796a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017986:	4b13      	ldr	r3, [pc, #76]	; (80179d4 <xTaskResumeAll+0x134>)
 8017988:	2200      	movs	r2, #0
 801798a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801798c:	4b10      	ldr	r3, [pc, #64]	; (80179d0 <xTaskResumeAll+0x130>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d009      	beq.n	80179a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017994:	2301      	movs	r3, #1
 8017996:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017998:	4b0f      	ldr	r3, [pc, #60]	; (80179d8 <xTaskResumeAll+0x138>)
 801799a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801799e:	601a      	str	r2, [r3, #0]
 80179a0:	f3bf 8f4f 	dsb	sy
 80179a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80179a8:	f001 f9c4 	bl	8018d34 <vPortExitCritical>

	return xAlreadyYielded;
 80179ac:	68bb      	ldr	r3, [r7, #8]
}
 80179ae:	4618      	mov	r0, r3
 80179b0:	3710      	adds	r7, #16
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}
 80179b6:	bf00      	nop
 80179b8:	24002c14 	.word	0x24002c14
 80179bc:	24002bec 	.word	0x24002bec
 80179c0:	24002bac 	.word	0x24002bac
 80179c4:	24002bf4 	.word	0x24002bf4
 80179c8:	2400271c 	.word	0x2400271c
 80179cc:	24002718 	.word	0x24002718
 80179d0:	24002c00 	.word	0x24002c00
 80179d4:	24002bfc 	.word	0x24002bfc
 80179d8:	e000ed04 	.word	0xe000ed04

080179dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80179dc:	b480      	push	{r7}
 80179de:	b083      	sub	sp, #12
 80179e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80179e2:	4b05      	ldr	r3, [pc, #20]	; (80179f8 <xTaskGetTickCount+0x1c>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80179e8:	687b      	ldr	r3, [r7, #4]
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	370c      	adds	r7, #12
 80179ee:	46bd      	mov	sp, r7
 80179f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f4:	4770      	bx	lr
 80179f6:	bf00      	nop
 80179f8:	24002bf0 	.word	0x24002bf0

080179fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b086      	sub	sp, #24
 8017a00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017a02:	2300      	movs	r3, #0
 8017a04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017a06:	4b53      	ldr	r3, [pc, #332]	; (8017b54 <xTaskIncrementTick+0x158>)
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	f040 8095 	bne.w	8017b3a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017a10:	4b51      	ldr	r3, [pc, #324]	; (8017b58 <xTaskIncrementTick+0x15c>)
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	3301      	adds	r3, #1
 8017a16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017a18:	4a4f      	ldr	r2, [pc, #316]	; (8017b58 <xTaskIncrementTick+0x15c>)
 8017a1a:	693b      	ldr	r3, [r7, #16]
 8017a1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017a1e:	693b      	ldr	r3, [r7, #16]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d120      	bne.n	8017a66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017a24:	4b4d      	ldr	r3, [pc, #308]	; (8017b5c <xTaskIncrementTick+0x160>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d00a      	beq.n	8017a44 <xTaskIncrementTick+0x48>
	__asm volatile
 8017a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a32:	f383 8811 	msr	BASEPRI, r3
 8017a36:	f3bf 8f6f 	isb	sy
 8017a3a:	f3bf 8f4f 	dsb	sy
 8017a3e:	603b      	str	r3, [r7, #0]
}
 8017a40:	bf00      	nop
 8017a42:	e7fe      	b.n	8017a42 <xTaskIncrementTick+0x46>
 8017a44:	4b45      	ldr	r3, [pc, #276]	; (8017b5c <xTaskIncrementTick+0x160>)
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	60fb      	str	r3, [r7, #12]
 8017a4a:	4b45      	ldr	r3, [pc, #276]	; (8017b60 <xTaskIncrementTick+0x164>)
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	4a43      	ldr	r2, [pc, #268]	; (8017b5c <xTaskIncrementTick+0x160>)
 8017a50:	6013      	str	r3, [r2, #0]
 8017a52:	4a43      	ldr	r2, [pc, #268]	; (8017b60 <xTaskIncrementTick+0x164>)
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	6013      	str	r3, [r2, #0]
 8017a58:	4b42      	ldr	r3, [pc, #264]	; (8017b64 <xTaskIncrementTick+0x168>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	3301      	adds	r3, #1
 8017a5e:	4a41      	ldr	r2, [pc, #260]	; (8017b64 <xTaskIncrementTick+0x168>)
 8017a60:	6013      	str	r3, [r2, #0]
 8017a62:	f000 fb85 	bl	8018170 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017a66:	4b40      	ldr	r3, [pc, #256]	; (8017b68 <xTaskIncrementTick+0x16c>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	693a      	ldr	r2, [r7, #16]
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	d349      	bcc.n	8017b04 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017a70:	4b3a      	ldr	r3, [pc, #232]	; (8017b5c <xTaskIncrementTick+0x160>)
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d104      	bne.n	8017a84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017a7a:	4b3b      	ldr	r3, [pc, #236]	; (8017b68 <xTaskIncrementTick+0x16c>)
 8017a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a80:	601a      	str	r2, [r3, #0]
					break;
 8017a82:	e03f      	b.n	8017b04 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a84:	4b35      	ldr	r3, [pc, #212]	; (8017b5c <xTaskIncrementTick+0x160>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	68db      	ldr	r3, [r3, #12]
 8017a8a:	68db      	ldr	r3, [r3, #12]
 8017a8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	685b      	ldr	r3, [r3, #4]
 8017a92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017a94:	693a      	ldr	r2, [r7, #16]
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	d203      	bcs.n	8017aa4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017a9c:	4a32      	ldr	r2, [pc, #200]	; (8017b68 <xTaskIncrementTick+0x16c>)
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017aa2:	e02f      	b.n	8017b04 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017aa4:	68bb      	ldr	r3, [r7, #8]
 8017aa6:	3304      	adds	r3, #4
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f7fe ff99 	bl	80169e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d004      	beq.n	8017ac0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017ab6:	68bb      	ldr	r3, [r7, #8]
 8017ab8:	3318      	adds	r3, #24
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7fe ff90 	bl	80169e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017ac0:	68bb      	ldr	r3, [r7, #8]
 8017ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ac4:	4b29      	ldr	r3, [pc, #164]	; (8017b6c <xTaskIncrementTick+0x170>)
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	429a      	cmp	r2, r3
 8017aca:	d903      	bls.n	8017ad4 <xTaskIncrementTick+0xd8>
 8017acc:	68bb      	ldr	r3, [r7, #8]
 8017ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ad0:	4a26      	ldr	r2, [pc, #152]	; (8017b6c <xTaskIncrementTick+0x170>)
 8017ad2:	6013      	str	r3, [r2, #0]
 8017ad4:	68bb      	ldr	r3, [r7, #8]
 8017ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ad8:	4613      	mov	r3, r2
 8017ada:	009b      	lsls	r3, r3, #2
 8017adc:	4413      	add	r3, r2
 8017ade:	009b      	lsls	r3, r3, #2
 8017ae0:	4a23      	ldr	r2, [pc, #140]	; (8017b70 <xTaskIncrementTick+0x174>)
 8017ae2:	441a      	add	r2, r3
 8017ae4:	68bb      	ldr	r3, [r7, #8]
 8017ae6:	3304      	adds	r3, #4
 8017ae8:	4619      	mov	r1, r3
 8017aea:	4610      	mov	r0, r2
 8017aec:	f7fe ff1b 	bl	8016926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017af0:	68bb      	ldr	r3, [r7, #8]
 8017af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017af4:	4b1f      	ldr	r3, [pc, #124]	; (8017b74 <xTaskIncrementTick+0x178>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017afa:	429a      	cmp	r2, r3
 8017afc:	d3b8      	bcc.n	8017a70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017afe:	2301      	movs	r3, #1
 8017b00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017b02:	e7b5      	b.n	8017a70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017b04:	4b1b      	ldr	r3, [pc, #108]	; (8017b74 <xTaskIncrementTick+0x178>)
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b0a:	4919      	ldr	r1, [pc, #100]	; (8017b70 <xTaskIncrementTick+0x174>)
 8017b0c:	4613      	mov	r3, r2
 8017b0e:	009b      	lsls	r3, r3, #2
 8017b10:	4413      	add	r3, r2
 8017b12:	009b      	lsls	r3, r3, #2
 8017b14:	440b      	add	r3, r1
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	2b01      	cmp	r3, #1
 8017b1a:	d901      	bls.n	8017b20 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017b1c:	2301      	movs	r3, #1
 8017b1e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8017b20:	4b15      	ldr	r3, [pc, #84]	; (8017b78 <xTaskIncrementTick+0x17c>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d101      	bne.n	8017b2c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8017b28:	f7e9 fd9c 	bl	8001664 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017b2c:	4b13      	ldr	r3, [pc, #76]	; (8017b7c <xTaskIncrementTick+0x180>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d009      	beq.n	8017b48 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8017b34:	2301      	movs	r3, #1
 8017b36:	617b      	str	r3, [r7, #20]
 8017b38:	e006      	b.n	8017b48 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017b3a:	4b0f      	ldr	r3, [pc, #60]	; (8017b78 <xTaskIncrementTick+0x17c>)
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	3301      	adds	r3, #1
 8017b40:	4a0d      	ldr	r2, [pc, #52]	; (8017b78 <xTaskIncrementTick+0x17c>)
 8017b42:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8017b44:	f7e9 fd8e 	bl	8001664 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8017b48:	697b      	ldr	r3, [r7, #20]
}
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	3718      	adds	r7, #24
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bd80      	pop	{r7, pc}
 8017b52:	bf00      	nop
 8017b54:	24002c14 	.word	0x24002c14
 8017b58:	24002bf0 	.word	0x24002bf0
 8017b5c:	24002ba4 	.word	0x24002ba4
 8017b60:	24002ba8 	.word	0x24002ba8
 8017b64:	24002c04 	.word	0x24002c04
 8017b68:	24002c0c 	.word	0x24002c0c
 8017b6c:	24002bf4 	.word	0x24002bf4
 8017b70:	2400271c 	.word	0x2400271c
 8017b74:	24002718 	.word	0x24002718
 8017b78:	24002bfc 	.word	0x24002bfc
 8017b7c:	24002c00 	.word	0x24002c00

08017b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b084      	sub	sp, #16
 8017b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017b86:	4b2f      	ldr	r3, [pc, #188]	; (8017c44 <vTaskSwitchContext+0xc4>)
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d003      	beq.n	8017b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017b8e:	4b2e      	ldr	r3, [pc, #184]	; (8017c48 <vTaskSwitchContext+0xc8>)
 8017b90:	2201      	movs	r2, #1
 8017b92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017b94:	e052      	b.n	8017c3c <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8017b96:	4b2c      	ldr	r3, [pc, #176]	; (8017c48 <vTaskSwitchContext+0xc8>)
 8017b98:	2200      	movs	r2, #0
 8017b9a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017b9c:	4b2b      	ldr	r3, [pc, #172]	; (8017c4c <vTaskSwitchContext+0xcc>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	681a      	ldr	r2, [r3, #0]
 8017ba2:	4b2a      	ldr	r3, [pc, #168]	; (8017c4c <vTaskSwitchContext+0xcc>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ba8:	429a      	cmp	r2, r3
 8017baa:	d808      	bhi.n	8017bbe <vTaskSwitchContext+0x3e>
 8017bac:	4b27      	ldr	r3, [pc, #156]	; (8017c4c <vTaskSwitchContext+0xcc>)
 8017bae:	681a      	ldr	r2, [r3, #0]
 8017bb0:	4b26      	ldr	r3, [pc, #152]	; (8017c4c <vTaskSwitchContext+0xcc>)
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	3334      	adds	r3, #52	; 0x34
 8017bb6:	4619      	mov	r1, r3
 8017bb8:	4610      	mov	r0, r2
 8017bba:	f7e9 fd61 	bl	8001680 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bbe:	4b24      	ldr	r3, [pc, #144]	; (8017c50 <vTaskSwitchContext+0xd0>)
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	60fb      	str	r3, [r7, #12]
 8017bc4:	e010      	b.n	8017be8 <vTaskSwitchContext+0x68>
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d10a      	bne.n	8017be2 <vTaskSwitchContext+0x62>
	__asm volatile
 8017bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bd0:	f383 8811 	msr	BASEPRI, r3
 8017bd4:	f3bf 8f6f 	isb	sy
 8017bd8:	f3bf 8f4f 	dsb	sy
 8017bdc:	607b      	str	r3, [r7, #4]
}
 8017bde:	bf00      	nop
 8017be0:	e7fe      	b.n	8017be0 <vTaskSwitchContext+0x60>
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	3b01      	subs	r3, #1
 8017be6:	60fb      	str	r3, [r7, #12]
 8017be8:	491a      	ldr	r1, [pc, #104]	; (8017c54 <vTaskSwitchContext+0xd4>)
 8017bea:	68fa      	ldr	r2, [r7, #12]
 8017bec:	4613      	mov	r3, r2
 8017bee:	009b      	lsls	r3, r3, #2
 8017bf0:	4413      	add	r3, r2
 8017bf2:	009b      	lsls	r3, r3, #2
 8017bf4:	440b      	add	r3, r1
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d0e4      	beq.n	8017bc6 <vTaskSwitchContext+0x46>
 8017bfc:	68fa      	ldr	r2, [r7, #12]
 8017bfe:	4613      	mov	r3, r2
 8017c00:	009b      	lsls	r3, r3, #2
 8017c02:	4413      	add	r3, r2
 8017c04:	009b      	lsls	r3, r3, #2
 8017c06:	4a13      	ldr	r2, [pc, #76]	; (8017c54 <vTaskSwitchContext+0xd4>)
 8017c08:	4413      	add	r3, r2
 8017c0a:	60bb      	str	r3, [r7, #8]
 8017c0c:	68bb      	ldr	r3, [r7, #8]
 8017c0e:	685b      	ldr	r3, [r3, #4]
 8017c10:	685a      	ldr	r2, [r3, #4]
 8017c12:	68bb      	ldr	r3, [r7, #8]
 8017c14:	605a      	str	r2, [r3, #4]
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	685a      	ldr	r2, [r3, #4]
 8017c1a:	68bb      	ldr	r3, [r7, #8]
 8017c1c:	3308      	adds	r3, #8
 8017c1e:	429a      	cmp	r2, r3
 8017c20:	d104      	bne.n	8017c2c <vTaskSwitchContext+0xac>
 8017c22:	68bb      	ldr	r3, [r7, #8]
 8017c24:	685b      	ldr	r3, [r3, #4]
 8017c26:	685a      	ldr	r2, [r3, #4]
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	605a      	str	r2, [r3, #4]
 8017c2c:	68bb      	ldr	r3, [r7, #8]
 8017c2e:	685b      	ldr	r3, [r3, #4]
 8017c30:	68db      	ldr	r3, [r3, #12]
 8017c32:	4a06      	ldr	r2, [pc, #24]	; (8017c4c <vTaskSwitchContext+0xcc>)
 8017c34:	6013      	str	r3, [r2, #0]
 8017c36:	4a06      	ldr	r2, [pc, #24]	; (8017c50 <vTaskSwitchContext+0xd0>)
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	6013      	str	r3, [r2, #0]
}
 8017c3c:	bf00      	nop
 8017c3e:	3710      	adds	r7, #16
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}
 8017c44:	24002c14 	.word	0x24002c14
 8017c48:	24002c00 	.word	0x24002c00
 8017c4c:	24002718 	.word	0x24002718
 8017c50:	24002bf4 	.word	0x24002bf4
 8017c54:	2400271c 	.word	0x2400271c

08017c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b084      	sub	sp, #16
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
 8017c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d10a      	bne.n	8017c7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c6c:	f383 8811 	msr	BASEPRI, r3
 8017c70:	f3bf 8f6f 	isb	sy
 8017c74:	f3bf 8f4f 	dsb	sy
 8017c78:	60fb      	str	r3, [r7, #12]
}
 8017c7a:	bf00      	nop
 8017c7c:	e7fe      	b.n	8017c7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017c7e:	4b07      	ldr	r3, [pc, #28]	; (8017c9c <vTaskPlaceOnEventList+0x44>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	3318      	adds	r3, #24
 8017c84:	4619      	mov	r1, r3
 8017c86:	6878      	ldr	r0, [r7, #4]
 8017c88:	f7fe fe71 	bl	801696e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017c8c:	2101      	movs	r1, #1
 8017c8e:	6838      	ldr	r0, [r7, #0]
 8017c90:	f000 fb32 	bl	80182f8 <prvAddCurrentTaskToDelayedList>
}
 8017c94:	bf00      	nop
 8017c96:	3710      	adds	r7, #16
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bd80      	pop	{r7, pc}
 8017c9c:	24002718 	.word	0x24002718

08017ca0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b086      	sub	sp, #24
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	60f8      	str	r0, [r7, #12]
 8017ca8:	60b9      	str	r1, [r7, #8]
 8017caa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d10a      	bne.n	8017cc8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8017cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cb6:	f383 8811 	msr	BASEPRI, r3
 8017cba:	f3bf 8f6f 	isb	sy
 8017cbe:	f3bf 8f4f 	dsb	sy
 8017cc2:	617b      	str	r3, [r7, #20]
}
 8017cc4:	bf00      	nop
 8017cc6:	e7fe      	b.n	8017cc6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8017cc8:	4b11      	ldr	r3, [pc, #68]	; (8017d10 <vTaskPlaceOnUnorderedEventList+0x70>)
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d10a      	bne.n	8017ce6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8017cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cd4:	f383 8811 	msr	BASEPRI, r3
 8017cd8:	f3bf 8f6f 	isb	sy
 8017cdc:	f3bf 8f4f 	dsb	sy
 8017ce0:	613b      	str	r3, [r7, #16]
}
 8017ce2:	bf00      	nop
 8017ce4:	e7fe      	b.n	8017ce4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8017ce6:	4b0b      	ldr	r3, [pc, #44]	; (8017d14 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	68ba      	ldr	r2, [r7, #8]
 8017cec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8017cf0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017cf2:	4b08      	ldr	r3, [pc, #32]	; (8017d14 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	3318      	adds	r3, #24
 8017cf8:	4619      	mov	r1, r3
 8017cfa:	68f8      	ldr	r0, [r7, #12]
 8017cfc:	f7fe fe13 	bl	8016926 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017d00:	2101      	movs	r1, #1
 8017d02:	6878      	ldr	r0, [r7, #4]
 8017d04:	f000 faf8 	bl	80182f8 <prvAddCurrentTaskToDelayedList>
}
 8017d08:	bf00      	nop
 8017d0a:	3718      	adds	r7, #24
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd80      	pop	{r7, pc}
 8017d10:	24002c14 	.word	0x24002c14
 8017d14:	24002718 	.word	0x24002718

08017d18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b086      	sub	sp, #24
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	60f8      	str	r0, [r7, #12]
 8017d20:	60b9      	str	r1, [r7, #8]
 8017d22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d10a      	bne.n	8017d40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d2e:	f383 8811 	msr	BASEPRI, r3
 8017d32:	f3bf 8f6f 	isb	sy
 8017d36:	f3bf 8f4f 	dsb	sy
 8017d3a:	617b      	str	r3, [r7, #20]
}
 8017d3c:	bf00      	nop
 8017d3e:	e7fe      	b.n	8017d3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017d40:	4b0a      	ldr	r3, [pc, #40]	; (8017d6c <vTaskPlaceOnEventListRestricted+0x54>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	3318      	adds	r3, #24
 8017d46:	4619      	mov	r1, r3
 8017d48:	68f8      	ldr	r0, [r7, #12]
 8017d4a:	f7fe fdec 	bl	8016926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d002      	beq.n	8017d5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017d5a:	6879      	ldr	r1, [r7, #4]
 8017d5c:	68b8      	ldr	r0, [r7, #8]
 8017d5e:	f000 facb 	bl	80182f8 <prvAddCurrentTaskToDelayedList>
	}
 8017d62:	bf00      	nop
 8017d64:	3718      	adds	r7, #24
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}
 8017d6a:	bf00      	nop
 8017d6c:	24002718 	.word	0x24002718

08017d70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b086      	sub	sp, #24
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	68db      	ldr	r3, [r3, #12]
 8017d7c:	68db      	ldr	r3, [r3, #12]
 8017d7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017d80:	693b      	ldr	r3, [r7, #16]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d10a      	bne.n	8017d9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d8a:	f383 8811 	msr	BASEPRI, r3
 8017d8e:	f3bf 8f6f 	isb	sy
 8017d92:	f3bf 8f4f 	dsb	sy
 8017d96:	60fb      	str	r3, [r7, #12]
}
 8017d98:	bf00      	nop
 8017d9a:	e7fe      	b.n	8017d9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017d9c:	693b      	ldr	r3, [r7, #16]
 8017d9e:	3318      	adds	r3, #24
 8017da0:	4618      	mov	r0, r3
 8017da2:	f7fe fe1d 	bl	80169e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017da6:	4b1e      	ldr	r3, [pc, #120]	; (8017e20 <xTaskRemoveFromEventList+0xb0>)
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d11d      	bne.n	8017dea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017dae:	693b      	ldr	r3, [r7, #16]
 8017db0:	3304      	adds	r3, #4
 8017db2:	4618      	mov	r0, r3
 8017db4:	f7fe fe14 	bl	80169e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017db8:	693b      	ldr	r3, [r7, #16]
 8017dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dbc:	4b19      	ldr	r3, [pc, #100]	; (8017e24 <xTaskRemoveFromEventList+0xb4>)
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	429a      	cmp	r2, r3
 8017dc2:	d903      	bls.n	8017dcc <xTaskRemoveFromEventList+0x5c>
 8017dc4:	693b      	ldr	r3, [r7, #16]
 8017dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dc8:	4a16      	ldr	r2, [pc, #88]	; (8017e24 <xTaskRemoveFromEventList+0xb4>)
 8017dca:	6013      	str	r3, [r2, #0]
 8017dcc:	693b      	ldr	r3, [r7, #16]
 8017dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dd0:	4613      	mov	r3, r2
 8017dd2:	009b      	lsls	r3, r3, #2
 8017dd4:	4413      	add	r3, r2
 8017dd6:	009b      	lsls	r3, r3, #2
 8017dd8:	4a13      	ldr	r2, [pc, #76]	; (8017e28 <xTaskRemoveFromEventList+0xb8>)
 8017dda:	441a      	add	r2, r3
 8017ddc:	693b      	ldr	r3, [r7, #16]
 8017dde:	3304      	adds	r3, #4
 8017de0:	4619      	mov	r1, r3
 8017de2:	4610      	mov	r0, r2
 8017de4:	f7fe fd9f 	bl	8016926 <vListInsertEnd>
 8017de8:	e005      	b.n	8017df6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017dea:	693b      	ldr	r3, [r7, #16]
 8017dec:	3318      	adds	r3, #24
 8017dee:	4619      	mov	r1, r3
 8017df0:	480e      	ldr	r0, [pc, #56]	; (8017e2c <xTaskRemoveFromEventList+0xbc>)
 8017df2:	f7fe fd98 	bl	8016926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017df6:	693b      	ldr	r3, [r7, #16]
 8017df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dfa:	4b0d      	ldr	r3, [pc, #52]	; (8017e30 <xTaskRemoveFromEventList+0xc0>)
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e00:	429a      	cmp	r2, r3
 8017e02:	d905      	bls.n	8017e10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017e04:	2301      	movs	r3, #1
 8017e06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017e08:	4b0a      	ldr	r3, [pc, #40]	; (8017e34 <xTaskRemoveFromEventList+0xc4>)
 8017e0a:	2201      	movs	r2, #1
 8017e0c:	601a      	str	r2, [r3, #0]
 8017e0e:	e001      	b.n	8017e14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017e10:	2300      	movs	r3, #0
 8017e12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017e14:	697b      	ldr	r3, [r7, #20]
}
 8017e16:	4618      	mov	r0, r3
 8017e18:	3718      	adds	r7, #24
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}
 8017e1e:	bf00      	nop
 8017e20:	24002c14 	.word	0x24002c14
 8017e24:	24002bf4 	.word	0x24002bf4
 8017e28:	2400271c 	.word	0x2400271c
 8017e2c:	24002bac 	.word	0x24002bac
 8017e30:	24002718 	.word	0x24002718
 8017e34:	24002c00 	.word	0x24002c00

08017e38 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8017e38:	b580      	push	{r7, lr}
 8017e3a:	b086      	sub	sp, #24
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	6078      	str	r0, [r7, #4]
 8017e40:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8017e42:	4b29      	ldr	r3, [pc, #164]	; (8017ee8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d10a      	bne.n	8017e60 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8017e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e4e:	f383 8811 	msr	BASEPRI, r3
 8017e52:	f3bf 8f6f 	isb	sy
 8017e56:	f3bf 8f4f 	dsb	sy
 8017e5a:	613b      	str	r3, [r7, #16]
}
 8017e5c:	bf00      	nop
 8017e5e:	e7fe      	b.n	8017e5e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	68db      	ldr	r3, [r3, #12]
 8017e6e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8017e70:	697b      	ldr	r3, [r7, #20]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d10a      	bne.n	8017e8c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8017e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e7a:	f383 8811 	msr	BASEPRI, r3
 8017e7e:	f3bf 8f6f 	isb	sy
 8017e82:	f3bf 8f4f 	dsb	sy
 8017e86:	60fb      	str	r3, [r7, #12]
}
 8017e88:	bf00      	nop
 8017e8a:	e7fe      	b.n	8017e8a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f7fe fda7 	bl	80169e0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017e92:	697b      	ldr	r3, [r7, #20]
 8017e94:	3304      	adds	r3, #4
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7fe fda2 	bl	80169e0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8017e9c:	697b      	ldr	r3, [r7, #20]
 8017e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ea0:	4b12      	ldr	r3, [pc, #72]	; (8017eec <vTaskRemoveFromUnorderedEventList+0xb4>)
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	429a      	cmp	r2, r3
 8017ea6:	d903      	bls.n	8017eb0 <vTaskRemoveFromUnorderedEventList+0x78>
 8017ea8:	697b      	ldr	r3, [r7, #20]
 8017eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eac:	4a0f      	ldr	r2, [pc, #60]	; (8017eec <vTaskRemoveFromUnorderedEventList+0xb4>)
 8017eae:	6013      	str	r3, [r2, #0]
 8017eb0:	697b      	ldr	r3, [r7, #20]
 8017eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017eb4:	4613      	mov	r3, r2
 8017eb6:	009b      	lsls	r3, r3, #2
 8017eb8:	4413      	add	r3, r2
 8017eba:	009b      	lsls	r3, r3, #2
 8017ebc:	4a0c      	ldr	r2, [pc, #48]	; (8017ef0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8017ebe:	441a      	add	r2, r3
 8017ec0:	697b      	ldr	r3, [r7, #20]
 8017ec2:	3304      	adds	r3, #4
 8017ec4:	4619      	mov	r1, r3
 8017ec6:	4610      	mov	r0, r2
 8017ec8:	f7fe fd2d 	bl	8016926 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017ecc:	697b      	ldr	r3, [r7, #20]
 8017ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ed0:	4b08      	ldr	r3, [pc, #32]	; (8017ef4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	d902      	bls.n	8017ee0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8017eda:	4b07      	ldr	r3, [pc, #28]	; (8017ef8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8017edc:	2201      	movs	r2, #1
 8017ede:	601a      	str	r2, [r3, #0]
	}
}
 8017ee0:	bf00      	nop
 8017ee2:	3718      	adds	r7, #24
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}
 8017ee8:	24002c14 	.word	0x24002c14
 8017eec:	24002bf4 	.word	0x24002bf4
 8017ef0:	2400271c 	.word	0x2400271c
 8017ef4:	24002718 	.word	0x24002718
 8017ef8:	24002c00 	.word	0x24002c00

08017efc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017efc:	b480      	push	{r7}
 8017efe:	b083      	sub	sp, #12
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017f04:	4b06      	ldr	r3, [pc, #24]	; (8017f20 <vTaskInternalSetTimeOutState+0x24>)
 8017f06:	681a      	ldr	r2, [r3, #0]
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017f0c:	4b05      	ldr	r3, [pc, #20]	; (8017f24 <vTaskInternalSetTimeOutState+0x28>)
 8017f0e:	681a      	ldr	r2, [r3, #0]
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	605a      	str	r2, [r3, #4]
}
 8017f14:	bf00      	nop
 8017f16:	370c      	adds	r7, #12
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1e:	4770      	bx	lr
 8017f20:	24002c04 	.word	0x24002c04
 8017f24:	24002bf0 	.word	0x24002bf0

08017f28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b088      	sub	sp, #32
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]
 8017f30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d10a      	bne.n	8017f4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f3c:	f383 8811 	msr	BASEPRI, r3
 8017f40:	f3bf 8f6f 	isb	sy
 8017f44:	f3bf 8f4f 	dsb	sy
 8017f48:	613b      	str	r3, [r7, #16]
}
 8017f4a:	bf00      	nop
 8017f4c:	e7fe      	b.n	8017f4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017f4e:	683b      	ldr	r3, [r7, #0]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d10a      	bne.n	8017f6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f58:	f383 8811 	msr	BASEPRI, r3
 8017f5c:	f3bf 8f6f 	isb	sy
 8017f60:	f3bf 8f4f 	dsb	sy
 8017f64:	60fb      	str	r3, [r7, #12]
}
 8017f66:	bf00      	nop
 8017f68:	e7fe      	b.n	8017f68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017f6a:	f000 feb3 	bl	8018cd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017f6e:	4b1d      	ldr	r3, [pc, #116]	; (8017fe4 <xTaskCheckForTimeOut+0xbc>)
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	685b      	ldr	r3, [r3, #4]
 8017f78:	69ba      	ldr	r2, [r7, #24]
 8017f7a:	1ad3      	subs	r3, r2, r3
 8017f7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017f7e:	683b      	ldr	r3, [r7, #0]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f86:	d102      	bne.n	8017f8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017f88:	2300      	movs	r3, #0
 8017f8a:	61fb      	str	r3, [r7, #28]
 8017f8c:	e023      	b.n	8017fd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	681a      	ldr	r2, [r3, #0]
 8017f92:	4b15      	ldr	r3, [pc, #84]	; (8017fe8 <xTaskCheckForTimeOut+0xc0>)
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	429a      	cmp	r2, r3
 8017f98:	d007      	beq.n	8017faa <xTaskCheckForTimeOut+0x82>
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	685b      	ldr	r3, [r3, #4]
 8017f9e:	69ba      	ldr	r2, [r7, #24]
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d302      	bcc.n	8017faa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	61fb      	str	r3, [r7, #28]
 8017fa8:	e015      	b.n	8017fd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	697a      	ldr	r2, [r7, #20]
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d20b      	bcs.n	8017fcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017fb4:	683b      	ldr	r3, [r7, #0]
 8017fb6:	681a      	ldr	r2, [r3, #0]
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	1ad2      	subs	r2, r2, r3
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017fc0:	6878      	ldr	r0, [r7, #4]
 8017fc2:	f7ff ff9b 	bl	8017efc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	61fb      	str	r3, [r7, #28]
 8017fca:	e004      	b.n	8017fd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017fcc:	683b      	ldr	r3, [r7, #0]
 8017fce:	2200      	movs	r2, #0
 8017fd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017fd2:	2301      	movs	r3, #1
 8017fd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017fd6:	f000 fead 	bl	8018d34 <vPortExitCritical>

	return xReturn;
 8017fda:	69fb      	ldr	r3, [r7, #28]
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3720      	adds	r7, #32
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}
 8017fe4:	24002bf0 	.word	0x24002bf0
 8017fe8:	24002c04 	.word	0x24002c04

08017fec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017fec:	b480      	push	{r7}
 8017fee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017ff0:	4b03      	ldr	r3, [pc, #12]	; (8018000 <vTaskMissedYield+0x14>)
 8017ff2:	2201      	movs	r2, #1
 8017ff4:	601a      	str	r2, [r3, #0]
}
 8017ff6:	bf00      	nop
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ffe:	4770      	bx	lr
 8018000:	24002c00 	.word	0x24002c00

08018004 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b082      	sub	sp, #8
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801800c:	f000 f852 	bl	80180b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018010:	4b06      	ldr	r3, [pc, #24]	; (801802c <prvIdleTask+0x28>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	2b01      	cmp	r3, #1
 8018016:	d9f9      	bls.n	801800c <prvIdleTask+0x8>
			{
				taskYIELD();
 8018018:	4b05      	ldr	r3, [pc, #20]	; (8018030 <prvIdleTask+0x2c>)
 801801a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801801e:	601a      	str	r2, [r3, #0]
 8018020:	f3bf 8f4f 	dsb	sy
 8018024:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018028:	e7f0      	b.n	801800c <prvIdleTask+0x8>
 801802a:	bf00      	nop
 801802c:	2400271c 	.word	0x2400271c
 8018030:	e000ed04 	.word	0xe000ed04

08018034 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b082      	sub	sp, #8
 8018038:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801803a:	2300      	movs	r3, #0
 801803c:	607b      	str	r3, [r7, #4]
 801803e:	e00c      	b.n	801805a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018040:	687a      	ldr	r2, [r7, #4]
 8018042:	4613      	mov	r3, r2
 8018044:	009b      	lsls	r3, r3, #2
 8018046:	4413      	add	r3, r2
 8018048:	009b      	lsls	r3, r3, #2
 801804a:	4a12      	ldr	r2, [pc, #72]	; (8018094 <prvInitialiseTaskLists+0x60>)
 801804c:	4413      	add	r3, r2
 801804e:	4618      	mov	r0, r3
 8018050:	f7fe fc3c 	bl	80168cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	3301      	adds	r3, #1
 8018058:	607b      	str	r3, [r7, #4]
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	2b37      	cmp	r3, #55	; 0x37
 801805e:	d9ef      	bls.n	8018040 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018060:	480d      	ldr	r0, [pc, #52]	; (8018098 <prvInitialiseTaskLists+0x64>)
 8018062:	f7fe fc33 	bl	80168cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018066:	480d      	ldr	r0, [pc, #52]	; (801809c <prvInitialiseTaskLists+0x68>)
 8018068:	f7fe fc30 	bl	80168cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801806c:	480c      	ldr	r0, [pc, #48]	; (80180a0 <prvInitialiseTaskLists+0x6c>)
 801806e:	f7fe fc2d 	bl	80168cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018072:	480c      	ldr	r0, [pc, #48]	; (80180a4 <prvInitialiseTaskLists+0x70>)
 8018074:	f7fe fc2a 	bl	80168cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018078:	480b      	ldr	r0, [pc, #44]	; (80180a8 <prvInitialiseTaskLists+0x74>)
 801807a:	f7fe fc27 	bl	80168cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801807e:	4b0b      	ldr	r3, [pc, #44]	; (80180ac <prvInitialiseTaskLists+0x78>)
 8018080:	4a05      	ldr	r2, [pc, #20]	; (8018098 <prvInitialiseTaskLists+0x64>)
 8018082:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018084:	4b0a      	ldr	r3, [pc, #40]	; (80180b0 <prvInitialiseTaskLists+0x7c>)
 8018086:	4a05      	ldr	r2, [pc, #20]	; (801809c <prvInitialiseTaskLists+0x68>)
 8018088:	601a      	str	r2, [r3, #0]
}
 801808a:	bf00      	nop
 801808c:	3708      	adds	r7, #8
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}
 8018092:	bf00      	nop
 8018094:	2400271c 	.word	0x2400271c
 8018098:	24002b7c 	.word	0x24002b7c
 801809c:	24002b90 	.word	0x24002b90
 80180a0:	24002bac 	.word	0x24002bac
 80180a4:	24002bc0 	.word	0x24002bc0
 80180a8:	24002bd8 	.word	0x24002bd8
 80180ac:	24002ba4 	.word	0x24002ba4
 80180b0:	24002ba8 	.word	0x24002ba8

080180b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80180ba:	e019      	b.n	80180f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80180bc:	f000 fe0a 	bl	8018cd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80180c0:	4b10      	ldr	r3, [pc, #64]	; (8018104 <prvCheckTasksWaitingTermination+0x50>)
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	68db      	ldr	r3, [r3, #12]
 80180c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	3304      	adds	r3, #4
 80180cc:	4618      	mov	r0, r3
 80180ce:	f7fe fc87 	bl	80169e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80180d2:	4b0d      	ldr	r3, [pc, #52]	; (8018108 <prvCheckTasksWaitingTermination+0x54>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	3b01      	subs	r3, #1
 80180d8:	4a0b      	ldr	r2, [pc, #44]	; (8018108 <prvCheckTasksWaitingTermination+0x54>)
 80180da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80180dc:	4b0b      	ldr	r3, [pc, #44]	; (801810c <prvCheckTasksWaitingTermination+0x58>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	3b01      	subs	r3, #1
 80180e2:	4a0a      	ldr	r2, [pc, #40]	; (801810c <prvCheckTasksWaitingTermination+0x58>)
 80180e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80180e6:	f000 fe25 	bl	8018d34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80180ea:	6878      	ldr	r0, [r7, #4]
 80180ec:	f000 f810 	bl	8018110 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80180f0:	4b06      	ldr	r3, [pc, #24]	; (801810c <prvCheckTasksWaitingTermination+0x58>)
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d1e1      	bne.n	80180bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80180f8:	bf00      	nop
 80180fa:	bf00      	nop
 80180fc:	3708      	adds	r7, #8
 80180fe:	46bd      	mov	sp, r7
 8018100:	bd80      	pop	{r7, pc}
 8018102:	bf00      	nop
 8018104:	24002bc0 	.word	0x24002bc0
 8018108:	24002bec 	.word	0x24002bec
 801810c:	24002bd4 	.word	0x24002bd4

08018110 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018110:	b580      	push	{r7, lr}
 8018112:	b084      	sub	sp, #16
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801811e:	2b00      	cmp	r3, #0
 8018120:	d108      	bne.n	8018134 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018126:	4618      	mov	r0, r3
 8018128:	f000 ffc2 	bl	80190b0 <vPortFree>
				vPortFree( pxTCB );
 801812c:	6878      	ldr	r0, [r7, #4]
 801812e:	f000 ffbf 	bl	80190b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018132:	e018      	b.n	8018166 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801813a:	2b01      	cmp	r3, #1
 801813c:	d103      	bne.n	8018146 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	f000 ffb6 	bl	80190b0 <vPortFree>
	}
 8018144:	e00f      	b.n	8018166 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801814c:	2b02      	cmp	r3, #2
 801814e:	d00a      	beq.n	8018166 <prvDeleteTCB+0x56>
	__asm volatile
 8018150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018154:	f383 8811 	msr	BASEPRI, r3
 8018158:	f3bf 8f6f 	isb	sy
 801815c:	f3bf 8f4f 	dsb	sy
 8018160:	60fb      	str	r3, [r7, #12]
}
 8018162:	bf00      	nop
 8018164:	e7fe      	b.n	8018164 <prvDeleteTCB+0x54>
	}
 8018166:	bf00      	nop
 8018168:	3710      	adds	r7, #16
 801816a:	46bd      	mov	sp, r7
 801816c:	bd80      	pop	{r7, pc}
	...

08018170 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018170:	b480      	push	{r7}
 8018172:	b083      	sub	sp, #12
 8018174:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018176:	4b0c      	ldr	r3, [pc, #48]	; (80181a8 <prvResetNextTaskUnblockTime+0x38>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d104      	bne.n	801818a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018180:	4b0a      	ldr	r3, [pc, #40]	; (80181ac <prvResetNextTaskUnblockTime+0x3c>)
 8018182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018186:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018188:	e008      	b.n	801819c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801818a:	4b07      	ldr	r3, [pc, #28]	; (80181a8 <prvResetNextTaskUnblockTime+0x38>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	68db      	ldr	r3, [r3, #12]
 8018190:	68db      	ldr	r3, [r3, #12]
 8018192:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	4a04      	ldr	r2, [pc, #16]	; (80181ac <prvResetNextTaskUnblockTime+0x3c>)
 801819a:	6013      	str	r3, [r2, #0]
}
 801819c:	bf00      	nop
 801819e:	370c      	adds	r7, #12
 80181a0:	46bd      	mov	sp, r7
 80181a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a6:	4770      	bx	lr
 80181a8:	24002ba4 	.word	0x24002ba4
 80181ac:	24002c0c 	.word	0x24002c0c

080181b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80181b0:	b480      	push	{r7}
 80181b2:	b083      	sub	sp, #12
 80181b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80181b6:	4b0b      	ldr	r3, [pc, #44]	; (80181e4 <xTaskGetSchedulerState+0x34>)
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d102      	bne.n	80181c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80181be:	2301      	movs	r3, #1
 80181c0:	607b      	str	r3, [r7, #4]
 80181c2:	e008      	b.n	80181d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80181c4:	4b08      	ldr	r3, [pc, #32]	; (80181e8 <xTaskGetSchedulerState+0x38>)
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d102      	bne.n	80181d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80181cc:	2302      	movs	r3, #2
 80181ce:	607b      	str	r3, [r7, #4]
 80181d0:	e001      	b.n	80181d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80181d2:	2300      	movs	r3, #0
 80181d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80181d6:	687b      	ldr	r3, [r7, #4]
	}
 80181d8:	4618      	mov	r0, r3
 80181da:	370c      	adds	r7, #12
 80181dc:	46bd      	mov	sp, r7
 80181de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e2:	4770      	bx	lr
 80181e4:	24002bf8 	.word	0x24002bf8
 80181e8:	24002c14 	.word	0x24002c14

080181ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b086      	sub	sp, #24
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80181f8:	2300      	movs	r3, #0
 80181fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d056      	beq.n	80182b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018202:	4b2e      	ldr	r3, [pc, #184]	; (80182bc <xTaskPriorityDisinherit+0xd0>)
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	693a      	ldr	r2, [r7, #16]
 8018208:	429a      	cmp	r2, r3
 801820a:	d00a      	beq.n	8018222 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018210:	f383 8811 	msr	BASEPRI, r3
 8018214:	f3bf 8f6f 	isb	sy
 8018218:	f3bf 8f4f 	dsb	sy
 801821c:	60fb      	str	r3, [r7, #12]
}
 801821e:	bf00      	nop
 8018220:	e7fe      	b.n	8018220 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018226:	2b00      	cmp	r3, #0
 8018228:	d10a      	bne.n	8018240 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801822e:	f383 8811 	msr	BASEPRI, r3
 8018232:	f3bf 8f6f 	isb	sy
 8018236:	f3bf 8f4f 	dsb	sy
 801823a:	60bb      	str	r3, [r7, #8]
}
 801823c:	bf00      	nop
 801823e:	e7fe      	b.n	801823e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018240:	693b      	ldr	r3, [r7, #16]
 8018242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018244:	1e5a      	subs	r2, r3, #1
 8018246:	693b      	ldr	r3, [r7, #16]
 8018248:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801824a:	693b      	ldr	r3, [r7, #16]
 801824c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018252:	429a      	cmp	r2, r3
 8018254:	d02c      	beq.n	80182b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018256:	693b      	ldr	r3, [r7, #16]
 8018258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801825a:	2b00      	cmp	r3, #0
 801825c:	d128      	bne.n	80182b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801825e:	693b      	ldr	r3, [r7, #16]
 8018260:	3304      	adds	r3, #4
 8018262:	4618      	mov	r0, r3
 8018264:	f7fe fbbc 	bl	80169e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018268:	693b      	ldr	r3, [r7, #16]
 801826a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801826c:	693b      	ldr	r3, [r7, #16]
 801826e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018270:	693b      	ldr	r3, [r7, #16]
 8018272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018274:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018278:	693b      	ldr	r3, [r7, #16]
 801827a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801827c:	693b      	ldr	r3, [r7, #16]
 801827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018280:	4b0f      	ldr	r3, [pc, #60]	; (80182c0 <xTaskPriorityDisinherit+0xd4>)
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	429a      	cmp	r2, r3
 8018286:	d903      	bls.n	8018290 <xTaskPriorityDisinherit+0xa4>
 8018288:	693b      	ldr	r3, [r7, #16]
 801828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801828c:	4a0c      	ldr	r2, [pc, #48]	; (80182c0 <xTaskPriorityDisinherit+0xd4>)
 801828e:	6013      	str	r3, [r2, #0]
 8018290:	693b      	ldr	r3, [r7, #16]
 8018292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018294:	4613      	mov	r3, r2
 8018296:	009b      	lsls	r3, r3, #2
 8018298:	4413      	add	r3, r2
 801829a:	009b      	lsls	r3, r3, #2
 801829c:	4a09      	ldr	r2, [pc, #36]	; (80182c4 <xTaskPriorityDisinherit+0xd8>)
 801829e:	441a      	add	r2, r3
 80182a0:	693b      	ldr	r3, [r7, #16]
 80182a2:	3304      	adds	r3, #4
 80182a4:	4619      	mov	r1, r3
 80182a6:	4610      	mov	r0, r2
 80182a8:	f7fe fb3d 	bl	8016926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80182ac:	2301      	movs	r3, #1
 80182ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80182b0:	697b      	ldr	r3, [r7, #20]
	}
 80182b2:	4618      	mov	r0, r3
 80182b4:	3718      	adds	r7, #24
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}
 80182ba:	bf00      	nop
 80182bc:	24002718 	.word	0x24002718
 80182c0:	24002bf4 	.word	0x24002bf4
 80182c4:	2400271c 	.word	0x2400271c

080182c8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80182c8:	b480      	push	{r7}
 80182ca:	b083      	sub	sp, #12
 80182cc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80182ce:	4b09      	ldr	r3, [pc, #36]	; (80182f4 <uxTaskResetEventItemValue+0x2c>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	699b      	ldr	r3, [r3, #24]
 80182d4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182d6:	4b07      	ldr	r3, [pc, #28]	; (80182f4 <uxTaskResetEventItemValue+0x2c>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182dc:	4b05      	ldr	r3, [pc, #20]	; (80182f4 <uxTaskResetEventItemValue+0x2c>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80182e4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80182e6:	687b      	ldr	r3, [r7, #4]
}
 80182e8:	4618      	mov	r0, r3
 80182ea:	370c      	adds	r7, #12
 80182ec:	46bd      	mov	sp, r7
 80182ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f2:	4770      	bx	lr
 80182f4:	24002718 	.word	0x24002718

080182f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b084      	sub	sp, #16
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
 8018300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018302:	4b21      	ldr	r3, [pc, #132]	; (8018388 <prvAddCurrentTaskToDelayedList+0x90>)
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018308:	4b20      	ldr	r3, [pc, #128]	; (801838c <prvAddCurrentTaskToDelayedList+0x94>)
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	3304      	adds	r3, #4
 801830e:	4618      	mov	r0, r3
 8018310:	f7fe fb66 	bl	80169e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801831a:	d10a      	bne.n	8018332 <prvAddCurrentTaskToDelayedList+0x3a>
 801831c:	683b      	ldr	r3, [r7, #0]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d007      	beq.n	8018332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018322:	4b1a      	ldr	r3, [pc, #104]	; (801838c <prvAddCurrentTaskToDelayedList+0x94>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	3304      	adds	r3, #4
 8018328:	4619      	mov	r1, r3
 801832a:	4819      	ldr	r0, [pc, #100]	; (8018390 <prvAddCurrentTaskToDelayedList+0x98>)
 801832c:	f7fe fafb 	bl	8016926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018330:	e026      	b.n	8018380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018332:	68fa      	ldr	r2, [r7, #12]
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	4413      	add	r3, r2
 8018338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801833a:	4b14      	ldr	r3, [pc, #80]	; (801838c <prvAddCurrentTaskToDelayedList+0x94>)
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	68ba      	ldr	r2, [r7, #8]
 8018340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018342:	68ba      	ldr	r2, [r7, #8]
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	429a      	cmp	r2, r3
 8018348:	d209      	bcs.n	801835e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801834a:	4b12      	ldr	r3, [pc, #72]	; (8018394 <prvAddCurrentTaskToDelayedList+0x9c>)
 801834c:	681a      	ldr	r2, [r3, #0]
 801834e:	4b0f      	ldr	r3, [pc, #60]	; (801838c <prvAddCurrentTaskToDelayedList+0x94>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	3304      	adds	r3, #4
 8018354:	4619      	mov	r1, r3
 8018356:	4610      	mov	r0, r2
 8018358:	f7fe fb09 	bl	801696e <vListInsert>
}
 801835c:	e010      	b.n	8018380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801835e:	4b0e      	ldr	r3, [pc, #56]	; (8018398 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018360:	681a      	ldr	r2, [r3, #0]
 8018362:	4b0a      	ldr	r3, [pc, #40]	; (801838c <prvAddCurrentTaskToDelayedList+0x94>)
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	3304      	adds	r3, #4
 8018368:	4619      	mov	r1, r3
 801836a:	4610      	mov	r0, r2
 801836c:	f7fe faff 	bl	801696e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018370:	4b0a      	ldr	r3, [pc, #40]	; (801839c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	68ba      	ldr	r2, [r7, #8]
 8018376:	429a      	cmp	r2, r3
 8018378:	d202      	bcs.n	8018380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801837a:	4a08      	ldr	r2, [pc, #32]	; (801839c <prvAddCurrentTaskToDelayedList+0xa4>)
 801837c:	68bb      	ldr	r3, [r7, #8]
 801837e:	6013      	str	r3, [r2, #0]
}
 8018380:	bf00      	nop
 8018382:	3710      	adds	r7, #16
 8018384:	46bd      	mov	sp, r7
 8018386:	bd80      	pop	{r7, pc}
 8018388:	24002bf0 	.word	0x24002bf0
 801838c:	24002718 	.word	0x24002718
 8018390:	24002bd8 	.word	0x24002bd8
 8018394:	24002ba8 	.word	0x24002ba8
 8018398:	24002ba4 	.word	0x24002ba4
 801839c:	24002c0c 	.word	0x24002c0c

080183a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b08a      	sub	sp, #40	; 0x28
 80183a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80183a6:	2300      	movs	r3, #0
 80183a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80183aa:	f000 fb07 	bl	80189bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80183ae:	4b1c      	ldr	r3, [pc, #112]	; (8018420 <xTimerCreateTimerTask+0x80>)
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d021      	beq.n	80183fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80183b6:	2300      	movs	r3, #0
 80183b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80183ba:	2300      	movs	r3, #0
 80183bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80183be:	1d3a      	adds	r2, r7, #4
 80183c0:	f107 0108 	add.w	r1, r7, #8
 80183c4:	f107 030c 	add.w	r3, r7, #12
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7fd fff9 	bl	80163c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80183ce:	6879      	ldr	r1, [r7, #4]
 80183d0:	68bb      	ldr	r3, [r7, #8]
 80183d2:	68fa      	ldr	r2, [r7, #12]
 80183d4:	9202      	str	r2, [sp, #8]
 80183d6:	9301      	str	r3, [sp, #4]
 80183d8:	2302      	movs	r3, #2
 80183da:	9300      	str	r3, [sp, #0]
 80183dc:	2300      	movs	r3, #0
 80183de:	460a      	mov	r2, r1
 80183e0:	4910      	ldr	r1, [pc, #64]	; (8018424 <xTimerCreateTimerTask+0x84>)
 80183e2:	4811      	ldr	r0, [pc, #68]	; (8018428 <xTimerCreateTimerTask+0x88>)
 80183e4:	f7ff f812 	bl	801740c <xTaskCreateStatic>
 80183e8:	4603      	mov	r3, r0
 80183ea:	4a10      	ldr	r2, [pc, #64]	; (801842c <xTimerCreateTimerTask+0x8c>)
 80183ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80183ee:	4b0f      	ldr	r3, [pc, #60]	; (801842c <xTimerCreateTimerTask+0x8c>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d001      	beq.n	80183fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80183f6:	2301      	movs	r3, #1
 80183f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d10a      	bne.n	8018416 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018404:	f383 8811 	msr	BASEPRI, r3
 8018408:	f3bf 8f6f 	isb	sy
 801840c:	f3bf 8f4f 	dsb	sy
 8018410:	613b      	str	r3, [r7, #16]
}
 8018412:	bf00      	nop
 8018414:	e7fe      	b.n	8018414 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018416:	697b      	ldr	r3, [r7, #20]
}
 8018418:	4618      	mov	r0, r3
 801841a:	3718      	adds	r7, #24
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}
 8018420:	24002c48 	.word	0x24002c48
 8018424:	08019fd8 	.word	0x08019fd8
 8018428:	08018565 	.word	0x08018565
 801842c:	24002c4c 	.word	0x24002c4c

08018430 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b08a      	sub	sp, #40	; 0x28
 8018434:	af00      	add	r7, sp, #0
 8018436:	60f8      	str	r0, [r7, #12]
 8018438:	60b9      	str	r1, [r7, #8]
 801843a:	607a      	str	r2, [r7, #4]
 801843c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801843e:	2300      	movs	r3, #0
 8018440:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d10a      	bne.n	801845e <xTimerGenericCommand+0x2e>
	__asm volatile
 8018448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801844c:	f383 8811 	msr	BASEPRI, r3
 8018450:	f3bf 8f6f 	isb	sy
 8018454:	f3bf 8f4f 	dsb	sy
 8018458:	623b      	str	r3, [r7, #32]
}
 801845a:	bf00      	nop
 801845c:	e7fe      	b.n	801845c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801845e:	4b1a      	ldr	r3, [pc, #104]	; (80184c8 <xTimerGenericCommand+0x98>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d02a      	beq.n	80184bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018472:	68bb      	ldr	r3, [r7, #8]
 8018474:	2b05      	cmp	r3, #5
 8018476:	dc18      	bgt.n	80184aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018478:	f7ff fe9a 	bl	80181b0 <xTaskGetSchedulerState>
 801847c:	4603      	mov	r3, r0
 801847e:	2b02      	cmp	r3, #2
 8018480:	d109      	bne.n	8018496 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018482:	4b11      	ldr	r3, [pc, #68]	; (80184c8 <xTimerGenericCommand+0x98>)
 8018484:	6818      	ldr	r0, [r3, #0]
 8018486:	f107 0110 	add.w	r1, r7, #16
 801848a:	2300      	movs	r3, #0
 801848c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801848e:	f7fe fbd5 	bl	8016c3c <xQueueGenericSend>
 8018492:	6278      	str	r0, [r7, #36]	; 0x24
 8018494:	e012      	b.n	80184bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018496:	4b0c      	ldr	r3, [pc, #48]	; (80184c8 <xTimerGenericCommand+0x98>)
 8018498:	6818      	ldr	r0, [r3, #0]
 801849a:	f107 0110 	add.w	r1, r7, #16
 801849e:	2300      	movs	r3, #0
 80184a0:	2200      	movs	r2, #0
 80184a2:	f7fe fbcb 	bl	8016c3c <xQueueGenericSend>
 80184a6:	6278      	str	r0, [r7, #36]	; 0x24
 80184a8:	e008      	b.n	80184bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80184aa:	4b07      	ldr	r3, [pc, #28]	; (80184c8 <xTimerGenericCommand+0x98>)
 80184ac:	6818      	ldr	r0, [r3, #0]
 80184ae:	f107 0110 	add.w	r1, r7, #16
 80184b2:	2300      	movs	r3, #0
 80184b4:	683a      	ldr	r2, [r7, #0]
 80184b6:	f7fe fcbf 	bl	8016e38 <xQueueGenericSendFromISR>
 80184ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80184bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80184be:	4618      	mov	r0, r3
 80184c0:	3728      	adds	r7, #40	; 0x28
 80184c2:	46bd      	mov	sp, r7
 80184c4:	bd80      	pop	{r7, pc}
 80184c6:	bf00      	nop
 80184c8:	24002c48 	.word	0x24002c48

080184cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b088      	sub	sp, #32
 80184d0:	af02      	add	r7, sp, #8
 80184d2:	6078      	str	r0, [r7, #4]
 80184d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184d6:	4b22      	ldr	r3, [pc, #136]	; (8018560 <prvProcessExpiredTimer+0x94>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	68db      	ldr	r3, [r3, #12]
 80184dc:	68db      	ldr	r3, [r3, #12]
 80184de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80184e0:	697b      	ldr	r3, [r7, #20]
 80184e2:	3304      	adds	r3, #4
 80184e4:	4618      	mov	r0, r3
 80184e6:	f7fe fa7b 	bl	80169e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80184ea:	697b      	ldr	r3, [r7, #20]
 80184ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184f0:	f003 0304 	and.w	r3, r3, #4
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d022      	beq.n	801853e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80184f8:	697b      	ldr	r3, [r7, #20]
 80184fa:	699a      	ldr	r2, [r3, #24]
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	18d1      	adds	r1, r2, r3
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	683a      	ldr	r2, [r7, #0]
 8018504:	6978      	ldr	r0, [r7, #20]
 8018506:	f000 f8d1 	bl	80186ac <prvInsertTimerInActiveList>
 801850a:	4603      	mov	r3, r0
 801850c:	2b00      	cmp	r3, #0
 801850e:	d01f      	beq.n	8018550 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018510:	2300      	movs	r3, #0
 8018512:	9300      	str	r3, [sp, #0]
 8018514:	2300      	movs	r3, #0
 8018516:	687a      	ldr	r2, [r7, #4]
 8018518:	2100      	movs	r1, #0
 801851a:	6978      	ldr	r0, [r7, #20]
 801851c:	f7ff ff88 	bl	8018430 <xTimerGenericCommand>
 8018520:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018522:	693b      	ldr	r3, [r7, #16]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d113      	bne.n	8018550 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801852c:	f383 8811 	msr	BASEPRI, r3
 8018530:	f3bf 8f6f 	isb	sy
 8018534:	f3bf 8f4f 	dsb	sy
 8018538:	60fb      	str	r3, [r7, #12]
}
 801853a:	bf00      	nop
 801853c:	e7fe      	b.n	801853c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801853e:	697b      	ldr	r3, [r7, #20]
 8018540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018544:	f023 0301 	bic.w	r3, r3, #1
 8018548:	b2da      	uxtb	r2, r3
 801854a:	697b      	ldr	r3, [r7, #20]
 801854c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018550:	697b      	ldr	r3, [r7, #20]
 8018552:	6a1b      	ldr	r3, [r3, #32]
 8018554:	6978      	ldr	r0, [r7, #20]
 8018556:	4798      	blx	r3
}
 8018558:	bf00      	nop
 801855a:	3718      	adds	r7, #24
 801855c:	46bd      	mov	sp, r7
 801855e:	bd80      	pop	{r7, pc}
 8018560:	24002c40 	.word	0x24002c40

08018564 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b084      	sub	sp, #16
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801856c:	f107 0308 	add.w	r3, r7, #8
 8018570:	4618      	mov	r0, r3
 8018572:	f000 f857 	bl	8018624 <prvGetNextExpireTime>
 8018576:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018578:	68bb      	ldr	r3, [r7, #8]
 801857a:	4619      	mov	r1, r3
 801857c:	68f8      	ldr	r0, [r7, #12]
 801857e:	f000 f803 	bl	8018588 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018582:	f000 f8d5 	bl	8018730 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018586:	e7f1      	b.n	801856c <prvTimerTask+0x8>

08018588 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b084      	sub	sp, #16
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
 8018590:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018592:	f7ff f977 	bl	8017884 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018596:	f107 0308 	add.w	r3, r7, #8
 801859a:	4618      	mov	r0, r3
 801859c:	f000 f866 	bl	801866c <prvSampleTimeNow>
 80185a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80185a2:	68bb      	ldr	r3, [r7, #8]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d130      	bne.n	801860a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80185a8:	683b      	ldr	r3, [r7, #0]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d10a      	bne.n	80185c4 <prvProcessTimerOrBlockTask+0x3c>
 80185ae:	687a      	ldr	r2, [r7, #4]
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d806      	bhi.n	80185c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80185b6:	f7ff f973 	bl	80178a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80185ba:	68f9      	ldr	r1, [r7, #12]
 80185bc:	6878      	ldr	r0, [r7, #4]
 80185be:	f7ff ff85 	bl	80184cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80185c2:	e024      	b.n	801860e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80185c4:	683b      	ldr	r3, [r7, #0]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d008      	beq.n	80185dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80185ca:	4b13      	ldr	r3, [pc, #76]	; (8018618 <prvProcessTimerOrBlockTask+0x90>)
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d101      	bne.n	80185d8 <prvProcessTimerOrBlockTask+0x50>
 80185d4:	2301      	movs	r3, #1
 80185d6:	e000      	b.n	80185da <prvProcessTimerOrBlockTask+0x52>
 80185d8:	2300      	movs	r3, #0
 80185da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80185dc:	4b0f      	ldr	r3, [pc, #60]	; (801861c <prvProcessTimerOrBlockTask+0x94>)
 80185de:	6818      	ldr	r0, [r3, #0]
 80185e0:	687a      	ldr	r2, [r7, #4]
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	1ad3      	subs	r3, r2, r3
 80185e6:	683a      	ldr	r2, [r7, #0]
 80185e8:	4619      	mov	r1, r3
 80185ea:	f7fe fedb 	bl	80173a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80185ee:	f7ff f957 	bl	80178a0 <xTaskResumeAll>
 80185f2:	4603      	mov	r3, r0
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d10a      	bne.n	801860e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80185f8:	4b09      	ldr	r3, [pc, #36]	; (8018620 <prvProcessTimerOrBlockTask+0x98>)
 80185fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185fe:	601a      	str	r2, [r3, #0]
 8018600:	f3bf 8f4f 	dsb	sy
 8018604:	f3bf 8f6f 	isb	sy
}
 8018608:	e001      	b.n	801860e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801860a:	f7ff f949 	bl	80178a0 <xTaskResumeAll>
}
 801860e:	bf00      	nop
 8018610:	3710      	adds	r7, #16
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}
 8018616:	bf00      	nop
 8018618:	24002c44 	.word	0x24002c44
 801861c:	24002c48 	.word	0x24002c48
 8018620:	e000ed04 	.word	0xe000ed04

08018624 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018624:	b480      	push	{r7}
 8018626:	b085      	sub	sp, #20
 8018628:	af00      	add	r7, sp, #0
 801862a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801862c:	4b0e      	ldr	r3, [pc, #56]	; (8018668 <prvGetNextExpireTime+0x44>)
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d101      	bne.n	801863a <prvGetNextExpireTime+0x16>
 8018636:	2201      	movs	r2, #1
 8018638:	e000      	b.n	801863c <prvGetNextExpireTime+0x18>
 801863a:	2200      	movs	r2, #0
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d105      	bne.n	8018654 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018648:	4b07      	ldr	r3, [pc, #28]	; (8018668 <prvGetNextExpireTime+0x44>)
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	68db      	ldr	r3, [r3, #12]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	60fb      	str	r3, [r7, #12]
 8018652:	e001      	b.n	8018658 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018654:	2300      	movs	r3, #0
 8018656:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018658:	68fb      	ldr	r3, [r7, #12]
}
 801865a:	4618      	mov	r0, r3
 801865c:	3714      	adds	r7, #20
 801865e:	46bd      	mov	sp, r7
 8018660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018664:	4770      	bx	lr
 8018666:	bf00      	nop
 8018668:	24002c40 	.word	0x24002c40

0801866c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b084      	sub	sp, #16
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018674:	f7ff f9b2 	bl	80179dc <xTaskGetTickCount>
 8018678:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801867a:	4b0b      	ldr	r3, [pc, #44]	; (80186a8 <prvSampleTimeNow+0x3c>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	68fa      	ldr	r2, [r7, #12]
 8018680:	429a      	cmp	r2, r3
 8018682:	d205      	bcs.n	8018690 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018684:	f000 f936 	bl	80188f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	2201      	movs	r2, #1
 801868c:	601a      	str	r2, [r3, #0]
 801868e:	e002      	b.n	8018696 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	2200      	movs	r2, #0
 8018694:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018696:	4a04      	ldr	r2, [pc, #16]	; (80186a8 <prvSampleTimeNow+0x3c>)
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801869c:	68fb      	ldr	r3, [r7, #12]
}
 801869e:	4618      	mov	r0, r3
 80186a0:	3710      	adds	r7, #16
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd80      	pop	{r7, pc}
 80186a6:	bf00      	nop
 80186a8:	24002c50 	.word	0x24002c50

080186ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b086      	sub	sp, #24
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	60f8      	str	r0, [r7, #12]
 80186b4:	60b9      	str	r1, [r7, #8]
 80186b6:	607a      	str	r2, [r7, #4]
 80186b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80186ba:	2300      	movs	r3, #0
 80186bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	68ba      	ldr	r2, [r7, #8]
 80186c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	68fa      	ldr	r2, [r7, #12]
 80186c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80186ca:	68ba      	ldr	r2, [r7, #8]
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	429a      	cmp	r2, r3
 80186d0:	d812      	bhi.n	80186f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186d2:	687a      	ldr	r2, [r7, #4]
 80186d4:	683b      	ldr	r3, [r7, #0]
 80186d6:	1ad2      	subs	r2, r2, r3
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	699b      	ldr	r3, [r3, #24]
 80186dc:	429a      	cmp	r2, r3
 80186de:	d302      	bcc.n	80186e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80186e0:	2301      	movs	r3, #1
 80186e2:	617b      	str	r3, [r7, #20]
 80186e4:	e01b      	b.n	801871e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80186e6:	4b10      	ldr	r3, [pc, #64]	; (8018728 <prvInsertTimerInActiveList+0x7c>)
 80186e8:	681a      	ldr	r2, [r3, #0]
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	3304      	adds	r3, #4
 80186ee:	4619      	mov	r1, r3
 80186f0:	4610      	mov	r0, r2
 80186f2:	f7fe f93c 	bl	801696e <vListInsert>
 80186f6:	e012      	b.n	801871e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80186f8:	687a      	ldr	r2, [r7, #4]
 80186fa:	683b      	ldr	r3, [r7, #0]
 80186fc:	429a      	cmp	r2, r3
 80186fe:	d206      	bcs.n	801870e <prvInsertTimerInActiveList+0x62>
 8018700:	68ba      	ldr	r2, [r7, #8]
 8018702:	683b      	ldr	r3, [r7, #0]
 8018704:	429a      	cmp	r2, r3
 8018706:	d302      	bcc.n	801870e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018708:	2301      	movs	r3, #1
 801870a:	617b      	str	r3, [r7, #20]
 801870c:	e007      	b.n	801871e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801870e:	4b07      	ldr	r3, [pc, #28]	; (801872c <prvInsertTimerInActiveList+0x80>)
 8018710:	681a      	ldr	r2, [r3, #0]
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	3304      	adds	r3, #4
 8018716:	4619      	mov	r1, r3
 8018718:	4610      	mov	r0, r2
 801871a:	f7fe f928 	bl	801696e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801871e:	697b      	ldr	r3, [r7, #20]
}
 8018720:	4618      	mov	r0, r3
 8018722:	3718      	adds	r7, #24
 8018724:	46bd      	mov	sp, r7
 8018726:	bd80      	pop	{r7, pc}
 8018728:	24002c44 	.word	0x24002c44
 801872c:	24002c40 	.word	0x24002c40

08018730 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b08e      	sub	sp, #56	; 0x38
 8018734:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018736:	e0ca      	b.n	80188ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	2b00      	cmp	r3, #0
 801873c:	da18      	bge.n	8018770 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801873e:	1d3b      	adds	r3, r7, #4
 8018740:	3304      	adds	r3, #4
 8018742:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018746:	2b00      	cmp	r3, #0
 8018748:	d10a      	bne.n	8018760 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801874e:	f383 8811 	msr	BASEPRI, r3
 8018752:	f3bf 8f6f 	isb	sy
 8018756:	f3bf 8f4f 	dsb	sy
 801875a:	61fb      	str	r3, [r7, #28]
}
 801875c:	bf00      	nop
 801875e:	e7fe      	b.n	801875e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018766:	6850      	ldr	r0, [r2, #4]
 8018768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801876a:	6892      	ldr	r2, [r2, #8]
 801876c:	4611      	mov	r1, r2
 801876e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	2b00      	cmp	r3, #0
 8018774:	f2c0 80aa 	blt.w	80188cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801877e:	695b      	ldr	r3, [r3, #20]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d004      	beq.n	801878e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018786:	3304      	adds	r3, #4
 8018788:	4618      	mov	r0, r3
 801878a:	f7fe f929 	bl	80169e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801878e:	463b      	mov	r3, r7
 8018790:	4618      	mov	r0, r3
 8018792:	f7ff ff6b 	bl	801866c <prvSampleTimeNow>
 8018796:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	2b09      	cmp	r3, #9
 801879c:	f200 8097 	bhi.w	80188ce <prvProcessReceivedCommands+0x19e>
 80187a0:	a201      	add	r2, pc, #4	; (adr r2, 80187a8 <prvProcessReceivedCommands+0x78>)
 80187a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187a6:	bf00      	nop
 80187a8:	080187d1 	.word	0x080187d1
 80187ac:	080187d1 	.word	0x080187d1
 80187b0:	080187d1 	.word	0x080187d1
 80187b4:	08018845 	.word	0x08018845
 80187b8:	08018859 	.word	0x08018859
 80187bc:	080188a3 	.word	0x080188a3
 80187c0:	080187d1 	.word	0x080187d1
 80187c4:	080187d1 	.word	0x080187d1
 80187c8:	08018845 	.word	0x08018845
 80187cc:	08018859 	.word	0x08018859
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80187d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187d6:	f043 0301 	orr.w	r3, r3, #1
 80187da:	b2da      	uxtb	r2, r3
 80187dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80187e2:	68ba      	ldr	r2, [r7, #8]
 80187e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e6:	699b      	ldr	r3, [r3, #24]
 80187e8:	18d1      	adds	r1, r2, r3
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187f0:	f7ff ff5c 	bl	80186ac <prvInsertTimerInActiveList>
 80187f4:	4603      	mov	r3, r0
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d069      	beq.n	80188ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80187fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187fc:	6a1b      	ldr	r3, [r3, #32]
 80187fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018800:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018808:	f003 0304 	and.w	r3, r3, #4
 801880c:	2b00      	cmp	r3, #0
 801880e:	d05e      	beq.n	80188ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018810:	68ba      	ldr	r2, [r7, #8]
 8018812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018814:	699b      	ldr	r3, [r3, #24]
 8018816:	441a      	add	r2, r3
 8018818:	2300      	movs	r3, #0
 801881a:	9300      	str	r3, [sp, #0]
 801881c:	2300      	movs	r3, #0
 801881e:	2100      	movs	r1, #0
 8018820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018822:	f7ff fe05 	bl	8018430 <xTimerGenericCommand>
 8018826:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018828:	6a3b      	ldr	r3, [r7, #32]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d14f      	bne.n	80188ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018832:	f383 8811 	msr	BASEPRI, r3
 8018836:	f3bf 8f6f 	isb	sy
 801883a:	f3bf 8f4f 	dsb	sy
 801883e:	61bb      	str	r3, [r7, #24]
}
 8018840:	bf00      	nop
 8018842:	e7fe      	b.n	8018842 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801884a:	f023 0301 	bic.w	r3, r3, #1
 801884e:	b2da      	uxtb	r2, r3
 8018850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018856:	e03a      	b.n	80188ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801885a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801885e:	f043 0301 	orr.w	r3, r3, #1
 8018862:	b2da      	uxtb	r2, r3
 8018864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801886a:	68ba      	ldr	r2, [r7, #8]
 801886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801886e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018872:	699b      	ldr	r3, [r3, #24]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d10a      	bne.n	801888e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801887c:	f383 8811 	msr	BASEPRI, r3
 8018880:	f3bf 8f6f 	isb	sy
 8018884:	f3bf 8f4f 	dsb	sy
 8018888:	617b      	str	r3, [r7, #20]
}
 801888a:	bf00      	nop
 801888c:	e7fe      	b.n	801888c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018890:	699a      	ldr	r2, [r3, #24]
 8018892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018894:	18d1      	adds	r1, r2, r3
 8018896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801889a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801889c:	f7ff ff06 	bl	80186ac <prvInsertTimerInActiveList>
					break;
 80188a0:	e015      	b.n	80188ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80188a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188a8:	f003 0302 	and.w	r3, r3, #2
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d103      	bne.n	80188b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80188b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80188b2:	f000 fbfd 	bl	80190b0 <vPortFree>
 80188b6:	e00a      	b.n	80188ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80188b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188be:	f023 0301 	bic.w	r3, r3, #1
 80188c2:	b2da      	uxtb	r2, r3
 80188c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80188ca:	e000      	b.n	80188ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80188cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80188ce:	4b08      	ldr	r3, [pc, #32]	; (80188f0 <prvProcessReceivedCommands+0x1c0>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	1d39      	adds	r1, r7, #4
 80188d4:	2200      	movs	r2, #0
 80188d6:	4618      	mov	r0, r3
 80188d8:	f7fe fb4a 	bl	8016f70 <xQueueReceive>
 80188dc:	4603      	mov	r3, r0
 80188de:	2b00      	cmp	r3, #0
 80188e0:	f47f af2a 	bne.w	8018738 <prvProcessReceivedCommands+0x8>
	}
}
 80188e4:	bf00      	nop
 80188e6:	bf00      	nop
 80188e8:	3730      	adds	r7, #48	; 0x30
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}
 80188ee:	bf00      	nop
 80188f0:	24002c48 	.word	0x24002c48

080188f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b088      	sub	sp, #32
 80188f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80188fa:	e048      	b.n	801898e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80188fc:	4b2d      	ldr	r3, [pc, #180]	; (80189b4 <prvSwitchTimerLists+0xc0>)
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	68db      	ldr	r3, [r3, #12]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018906:	4b2b      	ldr	r3, [pc, #172]	; (80189b4 <prvSwitchTimerLists+0xc0>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	68db      	ldr	r3, [r3, #12]
 801890c:	68db      	ldr	r3, [r3, #12]
 801890e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	3304      	adds	r3, #4
 8018914:	4618      	mov	r0, r3
 8018916:	f7fe f863 	bl	80169e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	6a1b      	ldr	r3, [r3, #32]
 801891e:	68f8      	ldr	r0, [r7, #12]
 8018920:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018928:	f003 0304 	and.w	r3, r3, #4
 801892c:	2b00      	cmp	r3, #0
 801892e:	d02e      	beq.n	801898e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	699b      	ldr	r3, [r3, #24]
 8018934:	693a      	ldr	r2, [r7, #16]
 8018936:	4413      	add	r3, r2
 8018938:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801893a:	68ba      	ldr	r2, [r7, #8]
 801893c:	693b      	ldr	r3, [r7, #16]
 801893e:	429a      	cmp	r2, r3
 8018940:	d90e      	bls.n	8018960 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	68ba      	ldr	r2, [r7, #8]
 8018946:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	68fa      	ldr	r2, [r7, #12]
 801894c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801894e:	4b19      	ldr	r3, [pc, #100]	; (80189b4 <prvSwitchTimerLists+0xc0>)
 8018950:	681a      	ldr	r2, [r3, #0]
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	3304      	adds	r3, #4
 8018956:	4619      	mov	r1, r3
 8018958:	4610      	mov	r0, r2
 801895a:	f7fe f808 	bl	801696e <vListInsert>
 801895e:	e016      	b.n	801898e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018960:	2300      	movs	r3, #0
 8018962:	9300      	str	r3, [sp, #0]
 8018964:	2300      	movs	r3, #0
 8018966:	693a      	ldr	r2, [r7, #16]
 8018968:	2100      	movs	r1, #0
 801896a:	68f8      	ldr	r0, [r7, #12]
 801896c:	f7ff fd60 	bl	8018430 <xTimerGenericCommand>
 8018970:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	2b00      	cmp	r3, #0
 8018976:	d10a      	bne.n	801898e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801897c:	f383 8811 	msr	BASEPRI, r3
 8018980:	f3bf 8f6f 	isb	sy
 8018984:	f3bf 8f4f 	dsb	sy
 8018988:	603b      	str	r3, [r7, #0]
}
 801898a:	bf00      	nop
 801898c:	e7fe      	b.n	801898c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801898e:	4b09      	ldr	r3, [pc, #36]	; (80189b4 <prvSwitchTimerLists+0xc0>)
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d1b1      	bne.n	80188fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018998:	4b06      	ldr	r3, [pc, #24]	; (80189b4 <prvSwitchTimerLists+0xc0>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801899e:	4b06      	ldr	r3, [pc, #24]	; (80189b8 <prvSwitchTimerLists+0xc4>)
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	4a04      	ldr	r2, [pc, #16]	; (80189b4 <prvSwitchTimerLists+0xc0>)
 80189a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80189a6:	4a04      	ldr	r2, [pc, #16]	; (80189b8 <prvSwitchTimerLists+0xc4>)
 80189a8:	697b      	ldr	r3, [r7, #20]
 80189aa:	6013      	str	r3, [r2, #0]
}
 80189ac:	bf00      	nop
 80189ae:	3718      	adds	r7, #24
 80189b0:	46bd      	mov	sp, r7
 80189b2:	bd80      	pop	{r7, pc}
 80189b4:	24002c40 	.word	0x24002c40
 80189b8:	24002c44 	.word	0x24002c44

080189bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b082      	sub	sp, #8
 80189c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80189c2:	f000 f987 	bl	8018cd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80189c6:	4b15      	ldr	r3, [pc, #84]	; (8018a1c <prvCheckForValidListAndQueue+0x60>)
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d120      	bne.n	8018a10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80189ce:	4814      	ldr	r0, [pc, #80]	; (8018a20 <prvCheckForValidListAndQueue+0x64>)
 80189d0:	f7fd ff7c 	bl	80168cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80189d4:	4813      	ldr	r0, [pc, #76]	; (8018a24 <prvCheckForValidListAndQueue+0x68>)
 80189d6:	f7fd ff79 	bl	80168cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80189da:	4b13      	ldr	r3, [pc, #76]	; (8018a28 <prvCheckForValidListAndQueue+0x6c>)
 80189dc:	4a10      	ldr	r2, [pc, #64]	; (8018a20 <prvCheckForValidListAndQueue+0x64>)
 80189de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80189e0:	4b12      	ldr	r3, [pc, #72]	; (8018a2c <prvCheckForValidListAndQueue+0x70>)
 80189e2:	4a10      	ldr	r2, [pc, #64]	; (8018a24 <prvCheckForValidListAndQueue+0x68>)
 80189e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80189e6:	2300      	movs	r3, #0
 80189e8:	9300      	str	r3, [sp, #0]
 80189ea:	4b11      	ldr	r3, [pc, #68]	; (8018a30 <prvCheckForValidListAndQueue+0x74>)
 80189ec:	4a11      	ldr	r2, [pc, #68]	; (8018a34 <prvCheckForValidListAndQueue+0x78>)
 80189ee:	2110      	movs	r1, #16
 80189f0:	200a      	movs	r0, #10
 80189f2:	f7fe f887 	bl	8016b04 <xQueueGenericCreateStatic>
 80189f6:	4603      	mov	r3, r0
 80189f8:	4a08      	ldr	r2, [pc, #32]	; (8018a1c <prvCheckForValidListAndQueue+0x60>)
 80189fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80189fc:	4b07      	ldr	r3, [pc, #28]	; (8018a1c <prvCheckForValidListAndQueue+0x60>)
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d005      	beq.n	8018a10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018a04:	4b05      	ldr	r3, [pc, #20]	; (8018a1c <prvCheckForValidListAndQueue+0x60>)
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	490b      	ldr	r1, [pc, #44]	; (8018a38 <prvCheckForValidListAndQueue+0x7c>)
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f7fe fca0 	bl	8017350 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018a10:	f000 f990 	bl	8018d34 <vPortExitCritical>
}
 8018a14:	bf00      	nop
 8018a16:	46bd      	mov	sp, r7
 8018a18:	bd80      	pop	{r7, pc}
 8018a1a:	bf00      	nop
 8018a1c:	24002c48 	.word	0x24002c48
 8018a20:	24002c18 	.word	0x24002c18
 8018a24:	24002c2c 	.word	0x24002c2c
 8018a28:	24002c40 	.word	0x24002c40
 8018a2c:	24002c44 	.word	0x24002c44
 8018a30:	24002cf4 	.word	0x24002cf4
 8018a34:	24002c54 	.word	0x24002c54
 8018a38:	08019fe0 	.word	0x08019fe0

08018a3c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b08a      	sub	sp, #40	; 0x28
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	60f8      	str	r0, [r7, #12]
 8018a44:	60b9      	str	r1, [r7, #8]
 8018a46:	607a      	str	r2, [r7, #4]
 8018a48:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8018a4a:	f06f 0301 	mvn.w	r3, #1
 8018a4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8018a54:	68bb      	ldr	r3, [r7, #8]
 8018a56:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018a5c:	4b06      	ldr	r3, [pc, #24]	; (8018a78 <xTimerPendFunctionCallFromISR+0x3c>)
 8018a5e:	6818      	ldr	r0, [r3, #0]
 8018a60:	f107 0114 	add.w	r1, r7, #20
 8018a64:	2300      	movs	r3, #0
 8018a66:	683a      	ldr	r2, [r7, #0]
 8018a68:	f7fe f9e6 	bl	8016e38 <xQueueGenericSendFromISR>
 8018a6c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8018a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8018a70:	4618      	mov	r0, r3
 8018a72:	3728      	adds	r7, #40	; 0x28
 8018a74:	46bd      	mov	sp, r7
 8018a76:	bd80      	pop	{r7, pc}
 8018a78:	24002c48 	.word	0x24002c48

08018a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018a7c:	b480      	push	{r7}
 8018a7e:	b085      	sub	sp, #20
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	60f8      	str	r0, [r7, #12]
 8018a84:	60b9      	str	r1, [r7, #8]
 8018a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	3b04      	subs	r3, #4
 8018a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	3b04      	subs	r3, #4
 8018a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018a9c:	68bb      	ldr	r3, [r7, #8]
 8018a9e:	f023 0201 	bic.w	r2, r3, #1
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	3b04      	subs	r3, #4
 8018aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018aac:	4a0c      	ldr	r2, [pc, #48]	; (8018ae0 <pxPortInitialiseStack+0x64>)
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	3b14      	subs	r3, #20
 8018ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018ab8:	687a      	ldr	r2, [r7, #4]
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	3b04      	subs	r3, #4
 8018ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	f06f 0202 	mvn.w	r2, #2
 8018aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	3b20      	subs	r3, #32
 8018ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018ad2:	68fb      	ldr	r3, [r7, #12]
}
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	3714      	adds	r7, #20
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ade:	4770      	bx	lr
 8018ae0:	08018ae5 	.word	0x08018ae5

08018ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018ae4:	b480      	push	{r7}
 8018ae6:	b085      	sub	sp, #20
 8018ae8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018aea:	2300      	movs	r3, #0
 8018aec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018aee:	4b12      	ldr	r3, [pc, #72]	; (8018b38 <prvTaskExitError+0x54>)
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018af6:	d00a      	beq.n	8018b0e <prvTaskExitError+0x2a>
	__asm volatile
 8018af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018afc:	f383 8811 	msr	BASEPRI, r3
 8018b00:	f3bf 8f6f 	isb	sy
 8018b04:	f3bf 8f4f 	dsb	sy
 8018b08:	60fb      	str	r3, [r7, #12]
}
 8018b0a:	bf00      	nop
 8018b0c:	e7fe      	b.n	8018b0c <prvTaskExitError+0x28>
	__asm volatile
 8018b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b12:	f383 8811 	msr	BASEPRI, r3
 8018b16:	f3bf 8f6f 	isb	sy
 8018b1a:	f3bf 8f4f 	dsb	sy
 8018b1e:	60bb      	str	r3, [r7, #8]
}
 8018b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018b22:	bf00      	nop
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d0fc      	beq.n	8018b24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018b2a:	bf00      	nop
 8018b2c:	bf00      	nop
 8018b2e:	3714      	adds	r7, #20
 8018b30:	46bd      	mov	sp, r7
 8018b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b36:	4770      	bx	lr
 8018b38:	240000d0 	.word	0x240000d0
 8018b3c:	00000000 	.word	0x00000000

08018b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018b40:	4b07      	ldr	r3, [pc, #28]	; (8018b60 <pxCurrentTCBConst2>)
 8018b42:	6819      	ldr	r1, [r3, #0]
 8018b44:	6808      	ldr	r0, [r1, #0]
 8018b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b4a:	f380 8809 	msr	PSP, r0
 8018b4e:	f3bf 8f6f 	isb	sy
 8018b52:	f04f 0000 	mov.w	r0, #0
 8018b56:	f380 8811 	msr	BASEPRI, r0
 8018b5a:	4770      	bx	lr
 8018b5c:	f3af 8000 	nop.w

08018b60 <pxCurrentTCBConst2>:
 8018b60:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018b64:	bf00      	nop
 8018b66:	bf00      	nop

08018b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018b68:	4808      	ldr	r0, [pc, #32]	; (8018b8c <prvPortStartFirstTask+0x24>)
 8018b6a:	6800      	ldr	r0, [r0, #0]
 8018b6c:	6800      	ldr	r0, [r0, #0]
 8018b6e:	f380 8808 	msr	MSP, r0
 8018b72:	f04f 0000 	mov.w	r0, #0
 8018b76:	f380 8814 	msr	CONTROL, r0
 8018b7a:	b662      	cpsie	i
 8018b7c:	b661      	cpsie	f
 8018b7e:	f3bf 8f4f 	dsb	sy
 8018b82:	f3bf 8f6f 	isb	sy
 8018b86:	df00      	svc	0
 8018b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018b8a:	bf00      	nop
 8018b8c:	e000ed08 	.word	0xe000ed08

08018b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b086      	sub	sp, #24
 8018b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018b96:	4b46      	ldr	r3, [pc, #280]	; (8018cb0 <xPortStartScheduler+0x120>)
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	4a46      	ldr	r2, [pc, #280]	; (8018cb4 <xPortStartScheduler+0x124>)
 8018b9c:	4293      	cmp	r3, r2
 8018b9e:	d10a      	bne.n	8018bb6 <xPortStartScheduler+0x26>
	__asm volatile
 8018ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ba4:	f383 8811 	msr	BASEPRI, r3
 8018ba8:	f3bf 8f6f 	isb	sy
 8018bac:	f3bf 8f4f 	dsb	sy
 8018bb0:	613b      	str	r3, [r7, #16]
}
 8018bb2:	bf00      	nop
 8018bb4:	e7fe      	b.n	8018bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018bb6:	4b3e      	ldr	r3, [pc, #248]	; (8018cb0 <xPortStartScheduler+0x120>)
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	4a3f      	ldr	r2, [pc, #252]	; (8018cb8 <xPortStartScheduler+0x128>)
 8018bbc:	4293      	cmp	r3, r2
 8018bbe:	d10a      	bne.n	8018bd6 <xPortStartScheduler+0x46>
	__asm volatile
 8018bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bc4:	f383 8811 	msr	BASEPRI, r3
 8018bc8:	f3bf 8f6f 	isb	sy
 8018bcc:	f3bf 8f4f 	dsb	sy
 8018bd0:	60fb      	str	r3, [r7, #12]
}
 8018bd2:	bf00      	nop
 8018bd4:	e7fe      	b.n	8018bd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018bd6:	4b39      	ldr	r3, [pc, #228]	; (8018cbc <xPortStartScheduler+0x12c>)
 8018bd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018bda:	697b      	ldr	r3, [r7, #20]
 8018bdc:	781b      	ldrb	r3, [r3, #0]
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018be2:	697b      	ldr	r3, [r7, #20]
 8018be4:	22ff      	movs	r2, #255	; 0xff
 8018be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018be8:	697b      	ldr	r3, [r7, #20]
 8018bea:	781b      	ldrb	r3, [r3, #0]
 8018bec:	b2db      	uxtb	r3, r3
 8018bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018bf0:	78fb      	ldrb	r3, [r7, #3]
 8018bf2:	b2db      	uxtb	r3, r3
 8018bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018bf8:	b2da      	uxtb	r2, r3
 8018bfa:	4b31      	ldr	r3, [pc, #196]	; (8018cc0 <xPortStartScheduler+0x130>)
 8018bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018bfe:	4b31      	ldr	r3, [pc, #196]	; (8018cc4 <xPortStartScheduler+0x134>)
 8018c00:	2207      	movs	r2, #7
 8018c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c04:	e009      	b.n	8018c1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018c06:	4b2f      	ldr	r3, [pc, #188]	; (8018cc4 <xPortStartScheduler+0x134>)
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	3b01      	subs	r3, #1
 8018c0c:	4a2d      	ldr	r2, [pc, #180]	; (8018cc4 <xPortStartScheduler+0x134>)
 8018c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018c10:	78fb      	ldrb	r3, [r7, #3]
 8018c12:	b2db      	uxtb	r3, r3
 8018c14:	005b      	lsls	r3, r3, #1
 8018c16:	b2db      	uxtb	r3, r3
 8018c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c1a:	78fb      	ldrb	r3, [r7, #3]
 8018c1c:	b2db      	uxtb	r3, r3
 8018c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c22:	2b80      	cmp	r3, #128	; 0x80
 8018c24:	d0ef      	beq.n	8018c06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018c26:	4b27      	ldr	r3, [pc, #156]	; (8018cc4 <xPortStartScheduler+0x134>)
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	f1c3 0307 	rsb	r3, r3, #7
 8018c2e:	2b04      	cmp	r3, #4
 8018c30:	d00a      	beq.n	8018c48 <xPortStartScheduler+0xb8>
	__asm volatile
 8018c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c36:	f383 8811 	msr	BASEPRI, r3
 8018c3a:	f3bf 8f6f 	isb	sy
 8018c3e:	f3bf 8f4f 	dsb	sy
 8018c42:	60bb      	str	r3, [r7, #8]
}
 8018c44:	bf00      	nop
 8018c46:	e7fe      	b.n	8018c46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018c48:	4b1e      	ldr	r3, [pc, #120]	; (8018cc4 <xPortStartScheduler+0x134>)
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	021b      	lsls	r3, r3, #8
 8018c4e:	4a1d      	ldr	r2, [pc, #116]	; (8018cc4 <xPortStartScheduler+0x134>)
 8018c50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018c52:	4b1c      	ldr	r3, [pc, #112]	; (8018cc4 <xPortStartScheduler+0x134>)
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018c5a:	4a1a      	ldr	r2, [pc, #104]	; (8018cc4 <xPortStartScheduler+0x134>)
 8018c5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	b2da      	uxtb	r2, r3
 8018c62:	697b      	ldr	r3, [r7, #20]
 8018c64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018c66:	4b18      	ldr	r3, [pc, #96]	; (8018cc8 <xPortStartScheduler+0x138>)
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	4a17      	ldr	r2, [pc, #92]	; (8018cc8 <xPortStartScheduler+0x138>)
 8018c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018c72:	4b15      	ldr	r3, [pc, #84]	; (8018cc8 <xPortStartScheduler+0x138>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	4a14      	ldr	r2, [pc, #80]	; (8018cc8 <xPortStartScheduler+0x138>)
 8018c78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018c7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018c7e:	f000 f8dd 	bl	8018e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018c82:	4b12      	ldr	r3, [pc, #72]	; (8018ccc <xPortStartScheduler+0x13c>)
 8018c84:	2200      	movs	r2, #0
 8018c86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018c88:	f000 f8fc 	bl	8018e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018c8c:	4b10      	ldr	r3, [pc, #64]	; (8018cd0 <xPortStartScheduler+0x140>)
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	4a0f      	ldr	r2, [pc, #60]	; (8018cd0 <xPortStartScheduler+0x140>)
 8018c92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018c96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018c98:	f7ff ff66 	bl	8018b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018c9c:	f7fe ff70 	bl	8017b80 <vTaskSwitchContext>
	prvTaskExitError();
 8018ca0:	f7ff ff20 	bl	8018ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018ca4:	2300      	movs	r3, #0
}
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	3718      	adds	r7, #24
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}
 8018cae:	bf00      	nop
 8018cb0:	e000ed00 	.word	0xe000ed00
 8018cb4:	410fc271 	.word	0x410fc271
 8018cb8:	410fc270 	.word	0x410fc270
 8018cbc:	e000e400 	.word	0xe000e400
 8018cc0:	24002d44 	.word	0x24002d44
 8018cc4:	24002d48 	.word	0x24002d48
 8018cc8:	e000ed20 	.word	0xe000ed20
 8018ccc:	240000d0 	.word	0x240000d0
 8018cd0:	e000ef34 	.word	0xe000ef34

08018cd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018cd4:	b480      	push	{r7}
 8018cd6:	b083      	sub	sp, #12
 8018cd8:	af00      	add	r7, sp, #0
	__asm volatile
 8018cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cde:	f383 8811 	msr	BASEPRI, r3
 8018ce2:	f3bf 8f6f 	isb	sy
 8018ce6:	f3bf 8f4f 	dsb	sy
 8018cea:	607b      	str	r3, [r7, #4]
}
 8018cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018cee:	4b0f      	ldr	r3, [pc, #60]	; (8018d2c <vPortEnterCritical+0x58>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	3301      	adds	r3, #1
 8018cf4:	4a0d      	ldr	r2, [pc, #52]	; (8018d2c <vPortEnterCritical+0x58>)
 8018cf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018cf8:	4b0c      	ldr	r3, [pc, #48]	; (8018d2c <vPortEnterCritical+0x58>)
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	2b01      	cmp	r3, #1
 8018cfe:	d10f      	bne.n	8018d20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018d00:	4b0b      	ldr	r3, [pc, #44]	; (8018d30 <vPortEnterCritical+0x5c>)
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	b2db      	uxtb	r3, r3
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d00a      	beq.n	8018d20 <vPortEnterCritical+0x4c>
	__asm volatile
 8018d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d0e:	f383 8811 	msr	BASEPRI, r3
 8018d12:	f3bf 8f6f 	isb	sy
 8018d16:	f3bf 8f4f 	dsb	sy
 8018d1a:	603b      	str	r3, [r7, #0]
}
 8018d1c:	bf00      	nop
 8018d1e:	e7fe      	b.n	8018d1e <vPortEnterCritical+0x4a>
	}
}
 8018d20:	bf00      	nop
 8018d22:	370c      	adds	r7, #12
 8018d24:	46bd      	mov	sp, r7
 8018d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2a:	4770      	bx	lr
 8018d2c:	240000d0 	.word	0x240000d0
 8018d30:	e000ed04 	.word	0xe000ed04

08018d34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018d34:	b480      	push	{r7}
 8018d36:	b083      	sub	sp, #12
 8018d38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018d3a:	4b12      	ldr	r3, [pc, #72]	; (8018d84 <vPortExitCritical+0x50>)
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d10a      	bne.n	8018d58 <vPortExitCritical+0x24>
	__asm volatile
 8018d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d46:	f383 8811 	msr	BASEPRI, r3
 8018d4a:	f3bf 8f6f 	isb	sy
 8018d4e:	f3bf 8f4f 	dsb	sy
 8018d52:	607b      	str	r3, [r7, #4]
}
 8018d54:	bf00      	nop
 8018d56:	e7fe      	b.n	8018d56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018d58:	4b0a      	ldr	r3, [pc, #40]	; (8018d84 <vPortExitCritical+0x50>)
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	3b01      	subs	r3, #1
 8018d5e:	4a09      	ldr	r2, [pc, #36]	; (8018d84 <vPortExitCritical+0x50>)
 8018d60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018d62:	4b08      	ldr	r3, [pc, #32]	; (8018d84 <vPortExitCritical+0x50>)
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d105      	bne.n	8018d76 <vPortExitCritical+0x42>
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	f383 8811 	msr	BASEPRI, r3
}
 8018d74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018d76:	bf00      	nop
 8018d78:	370c      	adds	r7, #12
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d80:	4770      	bx	lr
 8018d82:	bf00      	nop
 8018d84:	240000d0 	.word	0x240000d0
	...

08018d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018d90:	f3ef 8009 	mrs	r0, PSP
 8018d94:	f3bf 8f6f 	isb	sy
 8018d98:	4b15      	ldr	r3, [pc, #84]	; (8018df0 <pxCurrentTCBConst>)
 8018d9a:	681a      	ldr	r2, [r3, #0]
 8018d9c:	f01e 0f10 	tst.w	lr, #16
 8018da0:	bf08      	it	eq
 8018da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018daa:	6010      	str	r0, [r2, #0]
 8018dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018db4:	f380 8811 	msr	BASEPRI, r0
 8018db8:	f3bf 8f4f 	dsb	sy
 8018dbc:	f3bf 8f6f 	isb	sy
 8018dc0:	f7fe fede 	bl	8017b80 <vTaskSwitchContext>
 8018dc4:	f04f 0000 	mov.w	r0, #0
 8018dc8:	f380 8811 	msr	BASEPRI, r0
 8018dcc:	bc09      	pop	{r0, r3}
 8018dce:	6819      	ldr	r1, [r3, #0]
 8018dd0:	6808      	ldr	r0, [r1, #0]
 8018dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dd6:	f01e 0f10 	tst.w	lr, #16
 8018dda:	bf08      	it	eq
 8018ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018de0:	f380 8809 	msr	PSP, r0
 8018de4:	f3bf 8f6f 	isb	sy
 8018de8:	4770      	bx	lr
 8018dea:	bf00      	nop
 8018dec:	f3af 8000 	nop.w

08018df0 <pxCurrentTCBConst>:
 8018df0:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018df4:	bf00      	nop
 8018df6:	bf00      	nop

08018df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b082      	sub	sp, #8
 8018dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8018dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e02:	f383 8811 	msr	BASEPRI, r3
 8018e06:	f3bf 8f6f 	isb	sy
 8018e0a:	f3bf 8f4f 	dsb	sy
 8018e0e:	607b      	str	r3, [r7, #4]
}
 8018e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018e12:	f7fe fdf3 	bl	80179fc <xTaskIncrementTick>
 8018e16:	4603      	mov	r3, r0
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d003      	beq.n	8018e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018e1c:	4b06      	ldr	r3, [pc, #24]	; (8018e38 <xPortSysTickHandler+0x40>)
 8018e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e22:	601a      	str	r2, [r3, #0]
 8018e24:	2300      	movs	r3, #0
 8018e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018e28:	683b      	ldr	r3, [r7, #0]
 8018e2a:	f383 8811 	msr	BASEPRI, r3
}
 8018e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018e30:	bf00      	nop
 8018e32:	3708      	adds	r7, #8
 8018e34:	46bd      	mov	sp, r7
 8018e36:	bd80      	pop	{r7, pc}
 8018e38:	e000ed04 	.word	0xe000ed04

08018e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018e3c:	b480      	push	{r7}
 8018e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018e40:	4b0b      	ldr	r3, [pc, #44]	; (8018e70 <vPortSetupTimerInterrupt+0x34>)
 8018e42:	2200      	movs	r2, #0
 8018e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018e46:	4b0b      	ldr	r3, [pc, #44]	; (8018e74 <vPortSetupTimerInterrupt+0x38>)
 8018e48:	2200      	movs	r2, #0
 8018e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018e4c:	4b0a      	ldr	r3, [pc, #40]	; (8018e78 <vPortSetupTimerInterrupt+0x3c>)
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	4a0a      	ldr	r2, [pc, #40]	; (8018e7c <vPortSetupTimerInterrupt+0x40>)
 8018e52:	fba2 2303 	umull	r2, r3, r2, r3
 8018e56:	099b      	lsrs	r3, r3, #6
 8018e58:	4a09      	ldr	r2, [pc, #36]	; (8018e80 <vPortSetupTimerInterrupt+0x44>)
 8018e5a:	3b01      	subs	r3, #1
 8018e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018e5e:	4b04      	ldr	r3, [pc, #16]	; (8018e70 <vPortSetupTimerInterrupt+0x34>)
 8018e60:	2207      	movs	r2, #7
 8018e62:	601a      	str	r2, [r3, #0]
}
 8018e64:	bf00      	nop
 8018e66:	46bd      	mov	sp, r7
 8018e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6c:	4770      	bx	lr
 8018e6e:	bf00      	nop
 8018e70:	e000e010 	.word	0xe000e010
 8018e74:	e000e018 	.word	0xe000e018
 8018e78:	240000c0 	.word	0x240000c0
 8018e7c:	10624dd3 	.word	0x10624dd3
 8018e80:	e000e014 	.word	0xe000e014

08018e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018e84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018e94 <vPortEnableVFP+0x10>
 8018e88:	6801      	ldr	r1, [r0, #0]
 8018e8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018e8e:	6001      	str	r1, [r0, #0]
 8018e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018e92:	bf00      	nop
 8018e94:	e000ed88 	.word	0xe000ed88

08018e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018e98:	b480      	push	{r7}
 8018e9a:	b085      	sub	sp, #20
 8018e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018e9e:	f3ef 8305 	mrs	r3, IPSR
 8018ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	2b0f      	cmp	r3, #15
 8018ea8:	d914      	bls.n	8018ed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018eaa:	4a17      	ldr	r2, [pc, #92]	; (8018f08 <vPortValidateInterruptPriority+0x70>)
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	4413      	add	r3, r2
 8018eb0:	781b      	ldrb	r3, [r3, #0]
 8018eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018eb4:	4b15      	ldr	r3, [pc, #84]	; (8018f0c <vPortValidateInterruptPriority+0x74>)
 8018eb6:	781b      	ldrb	r3, [r3, #0]
 8018eb8:	7afa      	ldrb	r2, [r7, #11]
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	d20a      	bcs.n	8018ed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8018ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ec2:	f383 8811 	msr	BASEPRI, r3
 8018ec6:	f3bf 8f6f 	isb	sy
 8018eca:	f3bf 8f4f 	dsb	sy
 8018ece:	607b      	str	r3, [r7, #4]
}
 8018ed0:	bf00      	nop
 8018ed2:	e7fe      	b.n	8018ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018ed4:	4b0e      	ldr	r3, [pc, #56]	; (8018f10 <vPortValidateInterruptPriority+0x78>)
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018edc:	4b0d      	ldr	r3, [pc, #52]	; (8018f14 <vPortValidateInterruptPriority+0x7c>)
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	429a      	cmp	r2, r3
 8018ee2:	d90a      	bls.n	8018efa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ee8:	f383 8811 	msr	BASEPRI, r3
 8018eec:	f3bf 8f6f 	isb	sy
 8018ef0:	f3bf 8f4f 	dsb	sy
 8018ef4:	603b      	str	r3, [r7, #0]
}
 8018ef6:	bf00      	nop
 8018ef8:	e7fe      	b.n	8018ef8 <vPortValidateInterruptPriority+0x60>
	}
 8018efa:	bf00      	nop
 8018efc:	3714      	adds	r7, #20
 8018efe:	46bd      	mov	sp, r7
 8018f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f04:	4770      	bx	lr
 8018f06:	bf00      	nop
 8018f08:	e000e3f0 	.word	0xe000e3f0
 8018f0c:	24002d44 	.word	0x24002d44
 8018f10:	e000ed0c 	.word	0xe000ed0c
 8018f14:	24002d48 	.word	0x24002d48

08018f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b08a      	sub	sp, #40	; 0x28
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018f20:	2300      	movs	r3, #0
 8018f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018f24:	f7fe fcae 	bl	8017884 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018f28:	4b5b      	ldr	r3, [pc, #364]	; (8019098 <pvPortMalloc+0x180>)
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d101      	bne.n	8018f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018f30:	f000 f920 	bl	8019174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018f34:	4b59      	ldr	r3, [pc, #356]	; (801909c <pvPortMalloc+0x184>)
 8018f36:	681a      	ldr	r2, [r3, #0]
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	4013      	ands	r3, r2
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	f040 8093 	bne.w	8019068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d01d      	beq.n	8018f84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018f48:	2208      	movs	r2, #8
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	4413      	add	r3, r2
 8018f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	f003 0307 	and.w	r3, r3, #7
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d014      	beq.n	8018f84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	f023 0307 	bic.w	r3, r3, #7
 8018f60:	3308      	adds	r3, #8
 8018f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	f003 0307 	and.w	r3, r3, #7
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d00a      	beq.n	8018f84 <pvPortMalloc+0x6c>
	__asm volatile
 8018f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f72:	f383 8811 	msr	BASEPRI, r3
 8018f76:	f3bf 8f6f 	isb	sy
 8018f7a:	f3bf 8f4f 	dsb	sy
 8018f7e:	617b      	str	r3, [r7, #20]
}
 8018f80:	bf00      	nop
 8018f82:	e7fe      	b.n	8018f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d06e      	beq.n	8019068 <pvPortMalloc+0x150>
 8018f8a:	4b45      	ldr	r3, [pc, #276]	; (80190a0 <pvPortMalloc+0x188>)
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	687a      	ldr	r2, [r7, #4]
 8018f90:	429a      	cmp	r2, r3
 8018f92:	d869      	bhi.n	8019068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018f94:	4b43      	ldr	r3, [pc, #268]	; (80190a4 <pvPortMalloc+0x18c>)
 8018f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018f98:	4b42      	ldr	r3, [pc, #264]	; (80190a4 <pvPortMalloc+0x18c>)
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018f9e:	e004      	b.n	8018faa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fac:	685b      	ldr	r3, [r3, #4]
 8018fae:	687a      	ldr	r2, [r7, #4]
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	d903      	bls.n	8018fbc <pvPortMalloc+0xa4>
 8018fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d1f1      	bne.n	8018fa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018fbc:	4b36      	ldr	r3, [pc, #216]	; (8019098 <pvPortMalloc+0x180>)
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018fc2:	429a      	cmp	r2, r3
 8018fc4:	d050      	beq.n	8019068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018fc6:	6a3b      	ldr	r3, [r7, #32]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	2208      	movs	r2, #8
 8018fcc:	4413      	add	r3, r2
 8018fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fd2:	681a      	ldr	r2, [r3, #0]
 8018fd4:	6a3b      	ldr	r3, [r7, #32]
 8018fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fda:	685a      	ldr	r2, [r3, #4]
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	1ad2      	subs	r2, r2, r3
 8018fe0:	2308      	movs	r3, #8
 8018fe2:	005b      	lsls	r3, r3, #1
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d91f      	bls.n	8019028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	4413      	add	r3, r2
 8018fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018ff0:	69bb      	ldr	r3, [r7, #24]
 8018ff2:	f003 0307 	and.w	r3, r3, #7
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d00a      	beq.n	8019010 <pvPortMalloc+0xf8>
	__asm volatile
 8018ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ffe:	f383 8811 	msr	BASEPRI, r3
 8019002:	f3bf 8f6f 	isb	sy
 8019006:	f3bf 8f4f 	dsb	sy
 801900a:	613b      	str	r3, [r7, #16]
}
 801900c:	bf00      	nop
 801900e:	e7fe      	b.n	801900e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019012:	685a      	ldr	r2, [r3, #4]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	1ad2      	subs	r2, r2, r3
 8019018:	69bb      	ldr	r3, [r7, #24]
 801901a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801901e:	687a      	ldr	r2, [r7, #4]
 8019020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019022:	69b8      	ldr	r0, [r7, #24]
 8019024:	f000 f908 	bl	8019238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019028:	4b1d      	ldr	r3, [pc, #116]	; (80190a0 <pvPortMalloc+0x188>)
 801902a:	681a      	ldr	r2, [r3, #0]
 801902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801902e:	685b      	ldr	r3, [r3, #4]
 8019030:	1ad3      	subs	r3, r2, r3
 8019032:	4a1b      	ldr	r2, [pc, #108]	; (80190a0 <pvPortMalloc+0x188>)
 8019034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019036:	4b1a      	ldr	r3, [pc, #104]	; (80190a0 <pvPortMalloc+0x188>)
 8019038:	681a      	ldr	r2, [r3, #0]
 801903a:	4b1b      	ldr	r3, [pc, #108]	; (80190a8 <pvPortMalloc+0x190>)
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	429a      	cmp	r2, r3
 8019040:	d203      	bcs.n	801904a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019042:	4b17      	ldr	r3, [pc, #92]	; (80190a0 <pvPortMalloc+0x188>)
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	4a18      	ldr	r2, [pc, #96]	; (80190a8 <pvPortMalloc+0x190>)
 8019048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801904c:	685a      	ldr	r2, [r3, #4]
 801904e:	4b13      	ldr	r3, [pc, #76]	; (801909c <pvPortMalloc+0x184>)
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	431a      	orrs	r2, r3
 8019054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801905a:	2200      	movs	r2, #0
 801905c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801905e:	4b13      	ldr	r3, [pc, #76]	; (80190ac <pvPortMalloc+0x194>)
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	3301      	adds	r3, #1
 8019064:	4a11      	ldr	r2, [pc, #68]	; (80190ac <pvPortMalloc+0x194>)
 8019066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019068:	f7fe fc1a 	bl	80178a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801906c:	69fb      	ldr	r3, [r7, #28]
 801906e:	f003 0307 	and.w	r3, r3, #7
 8019072:	2b00      	cmp	r3, #0
 8019074:	d00a      	beq.n	801908c <pvPortMalloc+0x174>
	__asm volatile
 8019076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801907a:	f383 8811 	msr	BASEPRI, r3
 801907e:	f3bf 8f6f 	isb	sy
 8019082:	f3bf 8f4f 	dsb	sy
 8019086:	60fb      	str	r3, [r7, #12]
}
 8019088:	bf00      	nop
 801908a:	e7fe      	b.n	801908a <pvPortMalloc+0x172>
	return pvReturn;
 801908c:	69fb      	ldr	r3, [r7, #28]
}
 801908e:	4618      	mov	r0, r3
 8019090:	3728      	adds	r7, #40	; 0x28
 8019092:	46bd      	mov	sp, r7
 8019094:	bd80      	pop	{r7, pc}
 8019096:	bf00      	nop
 8019098:	24006954 	.word	0x24006954
 801909c:	24006968 	.word	0x24006968
 80190a0:	24006958 	.word	0x24006958
 80190a4:	2400694c 	.word	0x2400694c
 80190a8:	2400695c 	.word	0x2400695c
 80190ac:	24006960 	.word	0x24006960

080190b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80190b0:	b580      	push	{r7, lr}
 80190b2:	b086      	sub	sp, #24
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d04d      	beq.n	801915e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80190c2:	2308      	movs	r3, #8
 80190c4:	425b      	negs	r3, r3
 80190c6:	697a      	ldr	r2, [r7, #20]
 80190c8:	4413      	add	r3, r2
 80190ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80190cc:	697b      	ldr	r3, [r7, #20]
 80190ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80190d0:	693b      	ldr	r3, [r7, #16]
 80190d2:	685a      	ldr	r2, [r3, #4]
 80190d4:	4b24      	ldr	r3, [pc, #144]	; (8019168 <vPortFree+0xb8>)
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	4013      	ands	r3, r2
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d10a      	bne.n	80190f4 <vPortFree+0x44>
	__asm volatile
 80190de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190e2:	f383 8811 	msr	BASEPRI, r3
 80190e6:	f3bf 8f6f 	isb	sy
 80190ea:	f3bf 8f4f 	dsb	sy
 80190ee:	60fb      	str	r3, [r7, #12]
}
 80190f0:	bf00      	nop
 80190f2:	e7fe      	b.n	80190f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80190f4:	693b      	ldr	r3, [r7, #16]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d00a      	beq.n	8019112 <vPortFree+0x62>
	__asm volatile
 80190fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019100:	f383 8811 	msr	BASEPRI, r3
 8019104:	f3bf 8f6f 	isb	sy
 8019108:	f3bf 8f4f 	dsb	sy
 801910c:	60bb      	str	r3, [r7, #8]
}
 801910e:	bf00      	nop
 8019110:	e7fe      	b.n	8019110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019112:	693b      	ldr	r3, [r7, #16]
 8019114:	685a      	ldr	r2, [r3, #4]
 8019116:	4b14      	ldr	r3, [pc, #80]	; (8019168 <vPortFree+0xb8>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	4013      	ands	r3, r2
 801911c:	2b00      	cmp	r3, #0
 801911e:	d01e      	beq.n	801915e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019120:	693b      	ldr	r3, [r7, #16]
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d11a      	bne.n	801915e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019128:	693b      	ldr	r3, [r7, #16]
 801912a:	685a      	ldr	r2, [r3, #4]
 801912c:	4b0e      	ldr	r3, [pc, #56]	; (8019168 <vPortFree+0xb8>)
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	43db      	mvns	r3, r3
 8019132:	401a      	ands	r2, r3
 8019134:	693b      	ldr	r3, [r7, #16]
 8019136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019138:	f7fe fba4 	bl	8017884 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801913c:	693b      	ldr	r3, [r7, #16]
 801913e:	685a      	ldr	r2, [r3, #4]
 8019140:	4b0a      	ldr	r3, [pc, #40]	; (801916c <vPortFree+0xbc>)
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	4413      	add	r3, r2
 8019146:	4a09      	ldr	r2, [pc, #36]	; (801916c <vPortFree+0xbc>)
 8019148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801914a:	6938      	ldr	r0, [r7, #16]
 801914c:	f000 f874 	bl	8019238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019150:	4b07      	ldr	r3, [pc, #28]	; (8019170 <vPortFree+0xc0>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	3301      	adds	r3, #1
 8019156:	4a06      	ldr	r2, [pc, #24]	; (8019170 <vPortFree+0xc0>)
 8019158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801915a:	f7fe fba1 	bl	80178a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801915e:	bf00      	nop
 8019160:	3718      	adds	r7, #24
 8019162:	46bd      	mov	sp, r7
 8019164:	bd80      	pop	{r7, pc}
 8019166:	bf00      	nop
 8019168:	24006968 	.word	0x24006968
 801916c:	24006958 	.word	0x24006958
 8019170:	24006964 	.word	0x24006964

08019174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019174:	b480      	push	{r7}
 8019176:	b085      	sub	sp, #20
 8019178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801917a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801917e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019180:	4b27      	ldr	r3, [pc, #156]	; (8019220 <prvHeapInit+0xac>)
 8019182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	f003 0307 	and.w	r3, r3, #7
 801918a:	2b00      	cmp	r3, #0
 801918c:	d00c      	beq.n	80191a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	3307      	adds	r3, #7
 8019192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	f023 0307 	bic.w	r3, r3, #7
 801919a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801919c:	68ba      	ldr	r2, [r7, #8]
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	1ad3      	subs	r3, r2, r3
 80191a2:	4a1f      	ldr	r2, [pc, #124]	; (8019220 <prvHeapInit+0xac>)
 80191a4:	4413      	add	r3, r2
 80191a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80191ac:	4a1d      	ldr	r2, [pc, #116]	; (8019224 <prvHeapInit+0xb0>)
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80191b2:	4b1c      	ldr	r3, [pc, #112]	; (8019224 <prvHeapInit+0xb0>)
 80191b4:	2200      	movs	r2, #0
 80191b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	68ba      	ldr	r2, [r7, #8]
 80191bc:	4413      	add	r3, r2
 80191be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80191c0:	2208      	movs	r2, #8
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	1a9b      	subs	r3, r3, r2
 80191c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	f023 0307 	bic.w	r3, r3, #7
 80191ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	4a15      	ldr	r2, [pc, #84]	; (8019228 <prvHeapInit+0xb4>)
 80191d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80191d6:	4b14      	ldr	r3, [pc, #80]	; (8019228 <prvHeapInit+0xb4>)
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	2200      	movs	r2, #0
 80191dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80191de:	4b12      	ldr	r3, [pc, #72]	; (8019228 <prvHeapInit+0xb4>)
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	2200      	movs	r2, #0
 80191e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	68fa      	ldr	r2, [r7, #12]
 80191ee:	1ad2      	subs	r2, r2, r3
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80191f4:	4b0c      	ldr	r3, [pc, #48]	; (8019228 <prvHeapInit+0xb4>)
 80191f6:	681a      	ldr	r2, [r3, #0]
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	685b      	ldr	r3, [r3, #4]
 8019200:	4a0a      	ldr	r2, [pc, #40]	; (801922c <prvHeapInit+0xb8>)
 8019202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	685b      	ldr	r3, [r3, #4]
 8019208:	4a09      	ldr	r2, [pc, #36]	; (8019230 <prvHeapInit+0xbc>)
 801920a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801920c:	4b09      	ldr	r3, [pc, #36]	; (8019234 <prvHeapInit+0xc0>)
 801920e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019212:	601a      	str	r2, [r3, #0]
}
 8019214:	bf00      	nop
 8019216:	3714      	adds	r7, #20
 8019218:	46bd      	mov	sp, r7
 801921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921e:	4770      	bx	lr
 8019220:	24002d4c 	.word	0x24002d4c
 8019224:	2400694c 	.word	0x2400694c
 8019228:	24006954 	.word	0x24006954
 801922c:	2400695c 	.word	0x2400695c
 8019230:	24006958 	.word	0x24006958
 8019234:	24006968 	.word	0x24006968

08019238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019238:	b480      	push	{r7}
 801923a:	b085      	sub	sp, #20
 801923c:	af00      	add	r7, sp, #0
 801923e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019240:	4b28      	ldr	r3, [pc, #160]	; (80192e4 <prvInsertBlockIntoFreeList+0xac>)
 8019242:	60fb      	str	r3, [r7, #12]
 8019244:	e002      	b.n	801924c <prvInsertBlockIntoFreeList+0x14>
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	60fb      	str	r3, [r7, #12]
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	687a      	ldr	r2, [r7, #4]
 8019252:	429a      	cmp	r2, r3
 8019254:	d8f7      	bhi.n	8019246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	685b      	ldr	r3, [r3, #4]
 801925e:	68ba      	ldr	r2, [r7, #8]
 8019260:	4413      	add	r3, r2
 8019262:	687a      	ldr	r2, [r7, #4]
 8019264:	429a      	cmp	r2, r3
 8019266:	d108      	bne.n	801927a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	685a      	ldr	r2, [r3, #4]
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	685b      	ldr	r3, [r3, #4]
 8019270:	441a      	add	r2, r3
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	685b      	ldr	r3, [r3, #4]
 8019282:	68ba      	ldr	r2, [r7, #8]
 8019284:	441a      	add	r2, r3
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	429a      	cmp	r2, r3
 801928c:	d118      	bne.n	80192c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	681a      	ldr	r2, [r3, #0]
 8019292:	4b15      	ldr	r3, [pc, #84]	; (80192e8 <prvInsertBlockIntoFreeList+0xb0>)
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	429a      	cmp	r2, r3
 8019298:	d00d      	beq.n	80192b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	685a      	ldr	r2, [r3, #4]
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	685b      	ldr	r3, [r3, #4]
 80192a4:	441a      	add	r2, r3
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	681a      	ldr	r2, [r3, #0]
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	601a      	str	r2, [r3, #0]
 80192b4:	e008      	b.n	80192c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80192b6:	4b0c      	ldr	r3, [pc, #48]	; (80192e8 <prvInsertBlockIntoFreeList+0xb0>)
 80192b8:	681a      	ldr	r2, [r3, #0]
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	601a      	str	r2, [r3, #0]
 80192be:	e003      	b.n	80192c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	681a      	ldr	r2, [r3, #0]
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80192c8:	68fa      	ldr	r2, [r7, #12]
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	429a      	cmp	r2, r3
 80192ce:	d002      	beq.n	80192d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	687a      	ldr	r2, [r7, #4]
 80192d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80192d6:	bf00      	nop
 80192d8:	3714      	adds	r7, #20
 80192da:	46bd      	mov	sp, r7
 80192dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e0:	4770      	bx	lr
 80192e2:	bf00      	nop
 80192e4:	2400694c 	.word	0x2400694c
 80192e8:	24006954 	.word	0x24006954

080192ec <__errno>:
 80192ec:	4b01      	ldr	r3, [pc, #4]	; (80192f4 <__errno+0x8>)
 80192ee:	6818      	ldr	r0, [r3, #0]
 80192f0:	4770      	bx	lr
 80192f2:	bf00      	nop
 80192f4:	240000d4 	.word	0x240000d4

080192f8 <__libc_init_array>:
 80192f8:	b570      	push	{r4, r5, r6, lr}
 80192fa:	4d0d      	ldr	r5, [pc, #52]	; (8019330 <__libc_init_array+0x38>)
 80192fc:	4c0d      	ldr	r4, [pc, #52]	; (8019334 <__libc_init_array+0x3c>)
 80192fe:	1b64      	subs	r4, r4, r5
 8019300:	10a4      	asrs	r4, r4, #2
 8019302:	2600      	movs	r6, #0
 8019304:	42a6      	cmp	r6, r4
 8019306:	d109      	bne.n	801931c <__libc_init_array+0x24>
 8019308:	4d0b      	ldr	r5, [pc, #44]	; (8019338 <__libc_init_array+0x40>)
 801930a:	4c0c      	ldr	r4, [pc, #48]	; (801933c <__libc_init_array+0x44>)
 801930c:	f000 fd2c 	bl	8019d68 <_init>
 8019310:	1b64      	subs	r4, r4, r5
 8019312:	10a4      	asrs	r4, r4, #2
 8019314:	2600      	movs	r6, #0
 8019316:	42a6      	cmp	r6, r4
 8019318:	d105      	bne.n	8019326 <__libc_init_array+0x2e>
 801931a:	bd70      	pop	{r4, r5, r6, pc}
 801931c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019320:	4798      	blx	r3
 8019322:	3601      	adds	r6, #1
 8019324:	e7ee      	b.n	8019304 <__libc_init_array+0xc>
 8019326:	f855 3b04 	ldr.w	r3, [r5], #4
 801932a:	4798      	blx	r3
 801932c:	3601      	adds	r6, #1
 801932e:	e7f2      	b.n	8019316 <__libc_init_array+0x1e>
 8019330:	0801a220 	.word	0x0801a220
 8019334:	0801a220 	.word	0x0801a220
 8019338:	0801a220 	.word	0x0801a220
 801933c:	0801a224 	.word	0x0801a224

08019340 <memcpy>:
 8019340:	440a      	add	r2, r1
 8019342:	4291      	cmp	r1, r2
 8019344:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019348:	d100      	bne.n	801934c <memcpy+0xc>
 801934a:	4770      	bx	lr
 801934c:	b510      	push	{r4, lr}
 801934e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019356:	4291      	cmp	r1, r2
 8019358:	d1f9      	bne.n	801934e <memcpy+0xe>
 801935a:	bd10      	pop	{r4, pc}

0801935c <memset>:
 801935c:	4402      	add	r2, r0
 801935e:	4603      	mov	r3, r0
 8019360:	4293      	cmp	r3, r2
 8019362:	d100      	bne.n	8019366 <memset+0xa>
 8019364:	4770      	bx	lr
 8019366:	f803 1b01 	strb.w	r1, [r3], #1
 801936a:	e7f9      	b.n	8019360 <memset+0x4>

0801936c <_puts_r>:
 801936c:	b570      	push	{r4, r5, r6, lr}
 801936e:	460e      	mov	r6, r1
 8019370:	4605      	mov	r5, r0
 8019372:	b118      	cbz	r0, 801937c <_puts_r+0x10>
 8019374:	6983      	ldr	r3, [r0, #24]
 8019376:	b90b      	cbnz	r3, 801937c <_puts_r+0x10>
 8019378:	f000 fa48 	bl	801980c <__sinit>
 801937c:	69ab      	ldr	r3, [r5, #24]
 801937e:	68ac      	ldr	r4, [r5, #8]
 8019380:	b913      	cbnz	r3, 8019388 <_puts_r+0x1c>
 8019382:	4628      	mov	r0, r5
 8019384:	f000 fa42 	bl	801980c <__sinit>
 8019388:	4b2c      	ldr	r3, [pc, #176]	; (801943c <_puts_r+0xd0>)
 801938a:	429c      	cmp	r4, r3
 801938c:	d120      	bne.n	80193d0 <_puts_r+0x64>
 801938e:	686c      	ldr	r4, [r5, #4]
 8019390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019392:	07db      	lsls	r3, r3, #31
 8019394:	d405      	bmi.n	80193a2 <_puts_r+0x36>
 8019396:	89a3      	ldrh	r3, [r4, #12]
 8019398:	0598      	lsls	r0, r3, #22
 801939a:	d402      	bmi.n	80193a2 <_puts_r+0x36>
 801939c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801939e:	f000 fad3 	bl	8019948 <__retarget_lock_acquire_recursive>
 80193a2:	89a3      	ldrh	r3, [r4, #12]
 80193a4:	0719      	lsls	r1, r3, #28
 80193a6:	d51d      	bpl.n	80193e4 <_puts_r+0x78>
 80193a8:	6923      	ldr	r3, [r4, #16]
 80193aa:	b1db      	cbz	r3, 80193e4 <_puts_r+0x78>
 80193ac:	3e01      	subs	r6, #1
 80193ae:	68a3      	ldr	r3, [r4, #8]
 80193b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80193b4:	3b01      	subs	r3, #1
 80193b6:	60a3      	str	r3, [r4, #8]
 80193b8:	bb39      	cbnz	r1, 801940a <_puts_r+0x9e>
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	da38      	bge.n	8019430 <_puts_r+0xc4>
 80193be:	4622      	mov	r2, r4
 80193c0:	210a      	movs	r1, #10
 80193c2:	4628      	mov	r0, r5
 80193c4:	f000 f848 	bl	8019458 <__swbuf_r>
 80193c8:	3001      	adds	r0, #1
 80193ca:	d011      	beq.n	80193f0 <_puts_r+0x84>
 80193cc:	250a      	movs	r5, #10
 80193ce:	e011      	b.n	80193f4 <_puts_r+0x88>
 80193d0:	4b1b      	ldr	r3, [pc, #108]	; (8019440 <_puts_r+0xd4>)
 80193d2:	429c      	cmp	r4, r3
 80193d4:	d101      	bne.n	80193da <_puts_r+0x6e>
 80193d6:	68ac      	ldr	r4, [r5, #8]
 80193d8:	e7da      	b.n	8019390 <_puts_r+0x24>
 80193da:	4b1a      	ldr	r3, [pc, #104]	; (8019444 <_puts_r+0xd8>)
 80193dc:	429c      	cmp	r4, r3
 80193de:	bf08      	it	eq
 80193e0:	68ec      	ldreq	r4, [r5, #12]
 80193e2:	e7d5      	b.n	8019390 <_puts_r+0x24>
 80193e4:	4621      	mov	r1, r4
 80193e6:	4628      	mov	r0, r5
 80193e8:	f000 f888 	bl	80194fc <__swsetup_r>
 80193ec:	2800      	cmp	r0, #0
 80193ee:	d0dd      	beq.n	80193ac <_puts_r+0x40>
 80193f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80193f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80193f6:	07da      	lsls	r2, r3, #31
 80193f8:	d405      	bmi.n	8019406 <_puts_r+0x9a>
 80193fa:	89a3      	ldrh	r3, [r4, #12]
 80193fc:	059b      	lsls	r3, r3, #22
 80193fe:	d402      	bmi.n	8019406 <_puts_r+0x9a>
 8019400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019402:	f000 faa2 	bl	801994a <__retarget_lock_release_recursive>
 8019406:	4628      	mov	r0, r5
 8019408:	bd70      	pop	{r4, r5, r6, pc}
 801940a:	2b00      	cmp	r3, #0
 801940c:	da04      	bge.n	8019418 <_puts_r+0xac>
 801940e:	69a2      	ldr	r2, [r4, #24]
 8019410:	429a      	cmp	r2, r3
 8019412:	dc06      	bgt.n	8019422 <_puts_r+0xb6>
 8019414:	290a      	cmp	r1, #10
 8019416:	d004      	beq.n	8019422 <_puts_r+0xb6>
 8019418:	6823      	ldr	r3, [r4, #0]
 801941a:	1c5a      	adds	r2, r3, #1
 801941c:	6022      	str	r2, [r4, #0]
 801941e:	7019      	strb	r1, [r3, #0]
 8019420:	e7c5      	b.n	80193ae <_puts_r+0x42>
 8019422:	4622      	mov	r2, r4
 8019424:	4628      	mov	r0, r5
 8019426:	f000 f817 	bl	8019458 <__swbuf_r>
 801942a:	3001      	adds	r0, #1
 801942c:	d1bf      	bne.n	80193ae <_puts_r+0x42>
 801942e:	e7df      	b.n	80193f0 <_puts_r+0x84>
 8019430:	6823      	ldr	r3, [r4, #0]
 8019432:	250a      	movs	r5, #10
 8019434:	1c5a      	adds	r2, r3, #1
 8019436:	6022      	str	r2, [r4, #0]
 8019438:	701d      	strb	r5, [r3, #0]
 801943a:	e7db      	b.n	80193f4 <_puts_r+0x88>
 801943c:	0801a1d8 	.word	0x0801a1d8
 8019440:	0801a1f8 	.word	0x0801a1f8
 8019444:	0801a1b8 	.word	0x0801a1b8

08019448 <puts>:
 8019448:	4b02      	ldr	r3, [pc, #8]	; (8019454 <puts+0xc>)
 801944a:	4601      	mov	r1, r0
 801944c:	6818      	ldr	r0, [r3, #0]
 801944e:	f7ff bf8d 	b.w	801936c <_puts_r>
 8019452:	bf00      	nop
 8019454:	240000d4 	.word	0x240000d4

08019458 <__swbuf_r>:
 8019458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801945a:	460e      	mov	r6, r1
 801945c:	4614      	mov	r4, r2
 801945e:	4605      	mov	r5, r0
 8019460:	b118      	cbz	r0, 801946a <__swbuf_r+0x12>
 8019462:	6983      	ldr	r3, [r0, #24]
 8019464:	b90b      	cbnz	r3, 801946a <__swbuf_r+0x12>
 8019466:	f000 f9d1 	bl	801980c <__sinit>
 801946a:	4b21      	ldr	r3, [pc, #132]	; (80194f0 <__swbuf_r+0x98>)
 801946c:	429c      	cmp	r4, r3
 801946e:	d12b      	bne.n	80194c8 <__swbuf_r+0x70>
 8019470:	686c      	ldr	r4, [r5, #4]
 8019472:	69a3      	ldr	r3, [r4, #24]
 8019474:	60a3      	str	r3, [r4, #8]
 8019476:	89a3      	ldrh	r3, [r4, #12]
 8019478:	071a      	lsls	r2, r3, #28
 801947a:	d52f      	bpl.n	80194dc <__swbuf_r+0x84>
 801947c:	6923      	ldr	r3, [r4, #16]
 801947e:	b36b      	cbz	r3, 80194dc <__swbuf_r+0x84>
 8019480:	6923      	ldr	r3, [r4, #16]
 8019482:	6820      	ldr	r0, [r4, #0]
 8019484:	1ac0      	subs	r0, r0, r3
 8019486:	6963      	ldr	r3, [r4, #20]
 8019488:	b2f6      	uxtb	r6, r6
 801948a:	4283      	cmp	r3, r0
 801948c:	4637      	mov	r7, r6
 801948e:	dc04      	bgt.n	801949a <__swbuf_r+0x42>
 8019490:	4621      	mov	r1, r4
 8019492:	4628      	mov	r0, r5
 8019494:	f000 f926 	bl	80196e4 <_fflush_r>
 8019498:	bb30      	cbnz	r0, 80194e8 <__swbuf_r+0x90>
 801949a:	68a3      	ldr	r3, [r4, #8]
 801949c:	3b01      	subs	r3, #1
 801949e:	60a3      	str	r3, [r4, #8]
 80194a0:	6823      	ldr	r3, [r4, #0]
 80194a2:	1c5a      	adds	r2, r3, #1
 80194a4:	6022      	str	r2, [r4, #0]
 80194a6:	701e      	strb	r6, [r3, #0]
 80194a8:	6963      	ldr	r3, [r4, #20]
 80194aa:	3001      	adds	r0, #1
 80194ac:	4283      	cmp	r3, r0
 80194ae:	d004      	beq.n	80194ba <__swbuf_r+0x62>
 80194b0:	89a3      	ldrh	r3, [r4, #12]
 80194b2:	07db      	lsls	r3, r3, #31
 80194b4:	d506      	bpl.n	80194c4 <__swbuf_r+0x6c>
 80194b6:	2e0a      	cmp	r6, #10
 80194b8:	d104      	bne.n	80194c4 <__swbuf_r+0x6c>
 80194ba:	4621      	mov	r1, r4
 80194bc:	4628      	mov	r0, r5
 80194be:	f000 f911 	bl	80196e4 <_fflush_r>
 80194c2:	b988      	cbnz	r0, 80194e8 <__swbuf_r+0x90>
 80194c4:	4638      	mov	r0, r7
 80194c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194c8:	4b0a      	ldr	r3, [pc, #40]	; (80194f4 <__swbuf_r+0x9c>)
 80194ca:	429c      	cmp	r4, r3
 80194cc:	d101      	bne.n	80194d2 <__swbuf_r+0x7a>
 80194ce:	68ac      	ldr	r4, [r5, #8]
 80194d0:	e7cf      	b.n	8019472 <__swbuf_r+0x1a>
 80194d2:	4b09      	ldr	r3, [pc, #36]	; (80194f8 <__swbuf_r+0xa0>)
 80194d4:	429c      	cmp	r4, r3
 80194d6:	bf08      	it	eq
 80194d8:	68ec      	ldreq	r4, [r5, #12]
 80194da:	e7ca      	b.n	8019472 <__swbuf_r+0x1a>
 80194dc:	4621      	mov	r1, r4
 80194de:	4628      	mov	r0, r5
 80194e0:	f000 f80c 	bl	80194fc <__swsetup_r>
 80194e4:	2800      	cmp	r0, #0
 80194e6:	d0cb      	beq.n	8019480 <__swbuf_r+0x28>
 80194e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80194ec:	e7ea      	b.n	80194c4 <__swbuf_r+0x6c>
 80194ee:	bf00      	nop
 80194f0:	0801a1d8 	.word	0x0801a1d8
 80194f4:	0801a1f8 	.word	0x0801a1f8
 80194f8:	0801a1b8 	.word	0x0801a1b8

080194fc <__swsetup_r>:
 80194fc:	4b32      	ldr	r3, [pc, #200]	; (80195c8 <__swsetup_r+0xcc>)
 80194fe:	b570      	push	{r4, r5, r6, lr}
 8019500:	681d      	ldr	r5, [r3, #0]
 8019502:	4606      	mov	r6, r0
 8019504:	460c      	mov	r4, r1
 8019506:	b125      	cbz	r5, 8019512 <__swsetup_r+0x16>
 8019508:	69ab      	ldr	r3, [r5, #24]
 801950a:	b913      	cbnz	r3, 8019512 <__swsetup_r+0x16>
 801950c:	4628      	mov	r0, r5
 801950e:	f000 f97d 	bl	801980c <__sinit>
 8019512:	4b2e      	ldr	r3, [pc, #184]	; (80195cc <__swsetup_r+0xd0>)
 8019514:	429c      	cmp	r4, r3
 8019516:	d10f      	bne.n	8019538 <__swsetup_r+0x3c>
 8019518:	686c      	ldr	r4, [r5, #4]
 801951a:	89a3      	ldrh	r3, [r4, #12]
 801951c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019520:	0719      	lsls	r1, r3, #28
 8019522:	d42c      	bmi.n	801957e <__swsetup_r+0x82>
 8019524:	06dd      	lsls	r5, r3, #27
 8019526:	d411      	bmi.n	801954c <__swsetup_r+0x50>
 8019528:	2309      	movs	r3, #9
 801952a:	6033      	str	r3, [r6, #0]
 801952c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019530:	81a3      	strh	r3, [r4, #12]
 8019532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019536:	e03e      	b.n	80195b6 <__swsetup_r+0xba>
 8019538:	4b25      	ldr	r3, [pc, #148]	; (80195d0 <__swsetup_r+0xd4>)
 801953a:	429c      	cmp	r4, r3
 801953c:	d101      	bne.n	8019542 <__swsetup_r+0x46>
 801953e:	68ac      	ldr	r4, [r5, #8]
 8019540:	e7eb      	b.n	801951a <__swsetup_r+0x1e>
 8019542:	4b24      	ldr	r3, [pc, #144]	; (80195d4 <__swsetup_r+0xd8>)
 8019544:	429c      	cmp	r4, r3
 8019546:	bf08      	it	eq
 8019548:	68ec      	ldreq	r4, [r5, #12]
 801954a:	e7e6      	b.n	801951a <__swsetup_r+0x1e>
 801954c:	0758      	lsls	r0, r3, #29
 801954e:	d512      	bpl.n	8019576 <__swsetup_r+0x7a>
 8019550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019552:	b141      	cbz	r1, 8019566 <__swsetup_r+0x6a>
 8019554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019558:	4299      	cmp	r1, r3
 801955a:	d002      	beq.n	8019562 <__swsetup_r+0x66>
 801955c:	4630      	mov	r0, r6
 801955e:	f000 fa5b 	bl	8019a18 <_free_r>
 8019562:	2300      	movs	r3, #0
 8019564:	6363      	str	r3, [r4, #52]	; 0x34
 8019566:	89a3      	ldrh	r3, [r4, #12]
 8019568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801956c:	81a3      	strh	r3, [r4, #12]
 801956e:	2300      	movs	r3, #0
 8019570:	6063      	str	r3, [r4, #4]
 8019572:	6923      	ldr	r3, [r4, #16]
 8019574:	6023      	str	r3, [r4, #0]
 8019576:	89a3      	ldrh	r3, [r4, #12]
 8019578:	f043 0308 	orr.w	r3, r3, #8
 801957c:	81a3      	strh	r3, [r4, #12]
 801957e:	6923      	ldr	r3, [r4, #16]
 8019580:	b94b      	cbnz	r3, 8019596 <__swsetup_r+0x9a>
 8019582:	89a3      	ldrh	r3, [r4, #12]
 8019584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801958c:	d003      	beq.n	8019596 <__swsetup_r+0x9a>
 801958e:	4621      	mov	r1, r4
 8019590:	4630      	mov	r0, r6
 8019592:	f000 fa01 	bl	8019998 <__smakebuf_r>
 8019596:	89a0      	ldrh	r0, [r4, #12]
 8019598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801959c:	f010 0301 	ands.w	r3, r0, #1
 80195a0:	d00a      	beq.n	80195b8 <__swsetup_r+0xbc>
 80195a2:	2300      	movs	r3, #0
 80195a4:	60a3      	str	r3, [r4, #8]
 80195a6:	6963      	ldr	r3, [r4, #20]
 80195a8:	425b      	negs	r3, r3
 80195aa:	61a3      	str	r3, [r4, #24]
 80195ac:	6923      	ldr	r3, [r4, #16]
 80195ae:	b943      	cbnz	r3, 80195c2 <__swsetup_r+0xc6>
 80195b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80195b4:	d1ba      	bne.n	801952c <__swsetup_r+0x30>
 80195b6:	bd70      	pop	{r4, r5, r6, pc}
 80195b8:	0781      	lsls	r1, r0, #30
 80195ba:	bf58      	it	pl
 80195bc:	6963      	ldrpl	r3, [r4, #20]
 80195be:	60a3      	str	r3, [r4, #8]
 80195c0:	e7f4      	b.n	80195ac <__swsetup_r+0xb0>
 80195c2:	2000      	movs	r0, #0
 80195c4:	e7f7      	b.n	80195b6 <__swsetup_r+0xba>
 80195c6:	bf00      	nop
 80195c8:	240000d4 	.word	0x240000d4
 80195cc:	0801a1d8 	.word	0x0801a1d8
 80195d0:	0801a1f8 	.word	0x0801a1f8
 80195d4:	0801a1b8 	.word	0x0801a1b8

080195d8 <__sflush_r>:
 80195d8:	898a      	ldrh	r2, [r1, #12]
 80195da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195de:	4605      	mov	r5, r0
 80195e0:	0710      	lsls	r0, r2, #28
 80195e2:	460c      	mov	r4, r1
 80195e4:	d458      	bmi.n	8019698 <__sflush_r+0xc0>
 80195e6:	684b      	ldr	r3, [r1, #4]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	dc05      	bgt.n	80195f8 <__sflush_r+0x20>
 80195ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	dc02      	bgt.n	80195f8 <__sflush_r+0x20>
 80195f2:	2000      	movs	r0, #0
 80195f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80195fa:	2e00      	cmp	r6, #0
 80195fc:	d0f9      	beq.n	80195f2 <__sflush_r+0x1a>
 80195fe:	2300      	movs	r3, #0
 8019600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019604:	682f      	ldr	r7, [r5, #0]
 8019606:	602b      	str	r3, [r5, #0]
 8019608:	d032      	beq.n	8019670 <__sflush_r+0x98>
 801960a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801960c:	89a3      	ldrh	r3, [r4, #12]
 801960e:	075a      	lsls	r2, r3, #29
 8019610:	d505      	bpl.n	801961e <__sflush_r+0x46>
 8019612:	6863      	ldr	r3, [r4, #4]
 8019614:	1ac0      	subs	r0, r0, r3
 8019616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019618:	b10b      	cbz	r3, 801961e <__sflush_r+0x46>
 801961a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801961c:	1ac0      	subs	r0, r0, r3
 801961e:	2300      	movs	r3, #0
 8019620:	4602      	mov	r2, r0
 8019622:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019624:	6a21      	ldr	r1, [r4, #32]
 8019626:	4628      	mov	r0, r5
 8019628:	47b0      	blx	r6
 801962a:	1c43      	adds	r3, r0, #1
 801962c:	89a3      	ldrh	r3, [r4, #12]
 801962e:	d106      	bne.n	801963e <__sflush_r+0x66>
 8019630:	6829      	ldr	r1, [r5, #0]
 8019632:	291d      	cmp	r1, #29
 8019634:	d82c      	bhi.n	8019690 <__sflush_r+0xb8>
 8019636:	4a2a      	ldr	r2, [pc, #168]	; (80196e0 <__sflush_r+0x108>)
 8019638:	40ca      	lsrs	r2, r1
 801963a:	07d6      	lsls	r6, r2, #31
 801963c:	d528      	bpl.n	8019690 <__sflush_r+0xb8>
 801963e:	2200      	movs	r2, #0
 8019640:	6062      	str	r2, [r4, #4]
 8019642:	04d9      	lsls	r1, r3, #19
 8019644:	6922      	ldr	r2, [r4, #16]
 8019646:	6022      	str	r2, [r4, #0]
 8019648:	d504      	bpl.n	8019654 <__sflush_r+0x7c>
 801964a:	1c42      	adds	r2, r0, #1
 801964c:	d101      	bne.n	8019652 <__sflush_r+0x7a>
 801964e:	682b      	ldr	r3, [r5, #0]
 8019650:	b903      	cbnz	r3, 8019654 <__sflush_r+0x7c>
 8019652:	6560      	str	r0, [r4, #84]	; 0x54
 8019654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019656:	602f      	str	r7, [r5, #0]
 8019658:	2900      	cmp	r1, #0
 801965a:	d0ca      	beq.n	80195f2 <__sflush_r+0x1a>
 801965c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019660:	4299      	cmp	r1, r3
 8019662:	d002      	beq.n	801966a <__sflush_r+0x92>
 8019664:	4628      	mov	r0, r5
 8019666:	f000 f9d7 	bl	8019a18 <_free_r>
 801966a:	2000      	movs	r0, #0
 801966c:	6360      	str	r0, [r4, #52]	; 0x34
 801966e:	e7c1      	b.n	80195f4 <__sflush_r+0x1c>
 8019670:	6a21      	ldr	r1, [r4, #32]
 8019672:	2301      	movs	r3, #1
 8019674:	4628      	mov	r0, r5
 8019676:	47b0      	blx	r6
 8019678:	1c41      	adds	r1, r0, #1
 801967a:	d1c7      	bne.n	801960c <__sflush_r+0x34>
 801967c:	682b      	ldr	r3, [r5, #0]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d0c4      	beq.n	801960c <__sflush_r+0x34>
 8019682:	2b1d      	cmp	r3, #29
 8019684:	d001      	beq.n	801968a <__sflush_r+0xb2>
 8019686:	2b16      	cmp	r3, #22
 8019688:	d101      	bne.n	801968e <__sflush_r+0xb6>
 801968a:	602f      	str	r7, [r5, #0]
 801968c:	e7b1      	b.n	80195f2 <__sflush_r+0x1a>
 801968e:	89a3      	ldrh	r3, [r4, #12]
 8019690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019694:	81a3      	strh	r3, [r4, #12]
 8019696:	e7ad      	b.n	80195f4 <__sflush_r+0x1c>
 8019698:	690f      	ldr	r7, [r1, #16]
 801969a:	2f00      	cmp	r7, #0
 801969c:	d0a9      	beq.n	80195f2 <__sflush_r+0x1a>
 801969e:	0793      	lsls	r3, r2, #30
 80196a0:	680e      	ldr	r6, [r1, #0]
 80196a2:	bf08      	it	eq
 80196a4:	694b      	ldreq	r3, [r1, #20]
 80196a6:	600f      	str	r7, [r1, #0]
 80196a8:	bf18      	it	ne
 80196aa:	2300      	movne	r3, #0
 80196ac:	eba6 0807 	sub.w	r8, r6, r7
 80196b0:	608b      	str	r3, [r1, #8]
 80196b2:	f1b8 0f00 	cmp.w	r8, #0
 80196b6:	dd9c      	ble.n	80195f2 <__sflush_r+0x1a>
 80196b8:	6a21      	ldr	r1, [r4, #32]
 80196ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80196bc:	4643      	mov	r3, r8
 80196be:	463a      	mov	r2, r7
 80196c0:	4628      	mov	r0, r5
 80196c2:	47b0      	blx	r6
 80196c4:	2800      	cmp	r0, #0
 80196c6:	dc06      	bgt.n	80196d6 <__sflush_r+0xfe>
 80196c8:	89a3      	ldrh	r3, [r4, #12]
 80196ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196ce:	81a3      	strh	r3, [r4, #12]
 80196d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80196d4:	e78e      	b.n	80195f4 <__sflush_r+0x1c>
 80196d6:	4407      	add	r7, r0
 80196d8:	eba8 0800 	sub.w	r8, r8, r0
 80196dc:	e7e9      	b.n	80196b2 <__sflush_r+0xda>
 80196de:	bf00      	nop
 80196e0:	20400001 	.word	0x20400001

080196e4 <_fflush_r>:
 80196e4:	b538      	push	{r3, r4, r5, lr}
 80196e6:	690b      	ldr	r3, [r1, #16]
 80196e8:	4605      	mov	r5, r0
 80196ea:	460c      	mov	r4, r1
 80196ec:	b913      	cbnz	r3, 80196f4 <_fflush_r+0x10>
 80196ee:	2500      	movs	r5, #0
 80196f0:	4628      	mov	r0, r5
 80196f2:	bd38      	pop	{r3, r4, r5, pc}
 80196f4:	b118      	cbz	r0, 80196fe <_fflush_r+0x1a>
 80196f6:	6983      	ldr	r3, [r0, #24]
 80196f8:	b90b      	cbnz	r3, 80196fe <_fflush_r+0x1a>
 80196fa:	f000 f887 	bl	801980c <__sinit>
 80196fe:	4b14      	ldr	r3, [pc, #80]	; (8019750 <_fflush_r+0x6c>)
 8019700:	429c      	cmp	r4, r3
 8019702:	d11b      	bne.n	801973c <_fflush_r+0x58>
 8019704:	686c      	ldr	r4, [r5, #4]
 8019706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d0ef      	beq.n	80196ee <_fflush_r+0xa>
 801970e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019710:	07d0      	lsls	r0, r2, #31
 8019712:	d404      	bmi.n	801971e <_fflush_r+0x3a>
 8019714:	0599      	lsls	r1, r3, #22
 8019716:	d402      	bmi.n	801971e <_fflush_r+0x3a>
 8019718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801971a:	f000 f915 	bl	8019948 <__retarget_lock_acquire_recursive>
 801971e:	4628      	mov	r0, r5
 8019720:	4621      	mov	r1, r4
 8019722:	f7ff ff59 	bl	80195d8 <__sflush_r>
 8019726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019728:	07da      	lsls	r2, r3, #31
 801972a:	4605      	mov	r5, r0
 801972c:	d4e0      	bmi.n	80196f0 <_fflush_r+0xc>
 801972e:	89a3      	ldrh	r3, [r4, #12]
 8019730:	059b      	lsls	r3, r3, #22
 8019732:	d4dd      	bmi.n	80196f0 <_fflush_r+0xc>
 8019734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019736:	f000 f908 	bl	801994a <__retarget_lock_release_recursive>
 801973a:	e7d9      	b.n	80196f0 <_fflush_r+0xc>
 801973c:	4b05      	ldr	r3, [pc, #20]	; (8019754 <_fflush_r+0x70>)
 801973e:	429c      	cmp	r4, r3
 8019740:	d101      	bne.n	8019746 <_fflush_r+0x62>
 8019742:	68ac      	ldr	r4, [r5, #8]
 8019744:	e7df      	b.n	8019706 <_fflush_r+0x22>
 8019746:	4b04      	ldr	r3, [pc, #16]	; (8019758 <_fflush_r+0x74>)
 8019748:	429c      	cmp	r4, r3
 801974a:	bf08      	it	eq
 801974c:	68ec      	ldreq	r4, [r5, #12]
 801974e:	e7da      	b.n	8019706 <_fflush_r+0x22>
 8019750:	0801a1d8 	.word	0x0801a1d8
 8019754:	0801a1f8 	.word	0x0801a1f8
 8019758:	0801a1b8 	.word	0x0801a1b8

0801975c <std>:
 801975c:	2300      	movs	r3, #0
 801975e:	b510      	push	{r4, lr}
 8019760:	4604      	mov	r4, r0
 8019762:	e9c0 3300 	strd	r3, r3, [r0]
 8019766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801976a:	6083      	str	r3, [r0, #8]
 801976c:	8181      	strh	r1, [r0, #12]
 801976e:	6643      	str	r3, [r0, #100]	; 0x64
 8019770:	81c2      	strh	r2, [r0, #14]
 8019772:	6183      	str	r3, [r0, #24]
 8019774:	4619      	mov	r1, r3
 8019776:	2208      	movs	r2, #8
 8019778:	305c      	adds	r0, #92	; 0x5c
 801977a:	f7ff fdef 	bl	801935c <memset>
 801977e:	4b05      	ldr	r3, [pc, #20]	; (8019794 <std+0x38>)
 8019780:	6263      	str	r3, [r4, #36]	; 0x24
 8019782:	4b05      	ldr	r3, [pc, #20]	; (8019798 <std+0x3c>)
 8019784:	62a3      	str	r3, [r4, #40]	; 0x28
 8019786:	4b05      	ldr	r3, [pc, #20]	; (801979c <std+0x40>)
 8019788:	62e3      	str	r3, [r4, #44]	; 0x2c
 801978a:	4b05      	ldr	r3, [pc, #20]	; (80197a0 <std+0x44>)
 801978c:	6224      	str	r4, [r4, #32]
 801978e:	6323      	str	r3, [r4, #48]	; 0x30
 8019790:	bd10      	pop	{r4, pc}
 8019792:	bf00      	nop
 8019794:	08019bf9 	.word	0x08019bf9
 8019798:	08019c1b 	.word	0x08019c1b
 801979c:	08019c53 	.word	0x08019c53
 80197a0:	08019c77 	.word	0x08019c77

080197a4 <_cleanup_r>:
 80197a4:	4901      	ldr	r1, [pc, #4]	; (80197ac <_cleanup_r+0x8>)
 80197a6:	f000 b8af 	b.w	8019908 <_fwalk_reent>
 80197aa:	bf00      	nop
 80197ac:	080196e5 	.word	0x080196e5

080197b0 <__sfmoreglue>:
 80197b0:	b570      	push	{r4, r5, r6, lr}
 80197b2:	2268      	movs	r2, #104	; 0x68
 80197b4:	1e4d      	subs	r5, r1, #1
 80197b6:	4355      	muls	r5, r2
 80197b8:	460e      	mov	r6, r1
 80197ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80197be:	f000 f997 	bl	8019af0 <_malloc_r>
 80197c2:	4604      	mov	r4, r0
 80197c4:	b140      	cbz	r0, 80197d8 <__sfmoreglue+0x28>
 80197c6:	2100      	movs	r1, #0
 80197c8:	e9c0 1600 	strd	r1, r6, [r0]
 80197cc:	300c      	adds	r0, #12
 80197ce:	60a0      	str	r0, [r4, #8]
 80197d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80197d4:	f7ff fdc2 	bl	801935c <memset>
 80197d8:	4620      	mov	r0, r4
 80197da:	bd70      	pop	{r4, r5, r6, pc}

080197dc <__sfp_lock_acquire>:
 80197dc:	4801      	ldr	r0, [pc, #4]	; (80197e4 <__sfp_lock_acquire+0x8>)
 80197de:	f000 b8b3 	b.w	8019948 <__retarget_lock_acquire_recursive>
 80197e2:	bf00      	nop
 80197e4:	2400696d 	.word	0x2400696d

080197e8 <__sfp_lock_release>:
 80197e8:	4801      	ldr	r0, [pc, #4]	; (80197f0 <__sfp_lock_release+0x8>)
 80197ea:	f000 b8ae 	b.w	801994a <__retarget_lock_release_recursive>
 80197ee:	bf00      	nop
 80197f0:	2400696d 	.word	0x2400696d

080197f4 <__sinit_lock_acquire>:
 80197f4:	4801      	ldr	r0, [pc, #4]	; (80197fc <__sinit_lock_acquire+0x8>)
 80197f6:	f000 b8a7 	b.w	8019948 <__retarget_lock_acquire_recursive>
 80197fa:	bf00      	nop
 80197fc:	2400696e 	.word	0x2400696e

08019800 <__sinit_lock_release>:
 8019800:	4801      	ldr	r0, [pc, #4]	; (8019808 <__sinit_lock_release+0x8>)
 8019802:	f000 b8a2 	b.w	801994a <__retarget_lock_release_recursive>
 8019806:	bf00      	nop
 8019808:	2400696e 	.word	0x2400696e

0801980c <__sinit>:
 801980c:	b510      	push	{r4, lr}
 801980e:	4604      	mov	r4, r0
 8019810:	f7ff fff0 	bl	80197f4 <__sinit_lock_acquire>
 8019814:	69a3      	ldr	r3, [r4, #24]
 8019816:	b11b      	cbz	r3, 8019820 <__sinit+0x14>
 8019818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801981c:	f7ff bff0 	b.w	8019800 <__sinit_lock_release>
 8019820:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019824:	6523      	str	r3, [r4, #80]	; 0x50
 8019826:	4b13      	ldr	r3, [pc, #76]	; (8019874 <__sinit+0x68>)
 8019828:	4a13      	ldr	r2, [pc, #76]	; (8019878 <__sinit+0x6c>)
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	62a2      	str	r2, [r4, #40]	; 0x28
 801982e:	42a3      	cmp	r3, r4
 8019830:	bf04      	itt	eq
 8019832:	2301      	moveq	r3, #1
 8019834:	61a3      	streq	r3, [r4, #24]
 8019836:	4620      	mov	r0, r4
 8019838:	f000 f820 	bl	801987c <__sfp>
 801983c:	6060      	str	r0, [r4, #4]
 801983e:	4620      	mov	r0, r4
 8019840:	f000 f81c 	bl	801987c <__sfp>
 8019844:	60a0      	str	r0, [r4, #8]
 8019846:	4620      	mov	r0, r4
 8019848:	f000 f818 	bl	801987c <__sfp>
 801984c:	2200      	movs	r2, #0
 801984e:	60e0      	str	r0, [r4, #12]
 8019850:	2104      	movs	r1, #4
 8019852:	6860      	ldr	r0, [r4, #4]
 8019854:	f7ff ff82 	bl	801975c <std>
 8019858:	68a0      	ldr	r0, [r4, #8]
 801985a:	2201      	movs	r2, #1
 801985c:	2109      	movs	r1, #9
 801985e:	f7ff ff7d 	bl	801975c <std>
 8019862:	68e0      	ldr	r0, [r4, #12]
 8019864:	2202      	movs	r2, #2
 8019866:	2112      	movs	r1, #18
 8019868:	f7ff ff78 	bl	801975c <std>
 801986c:	2301      	movs	r3, #1
 801986e:	61a3      	str	r3, [r4, #24]
 8019870:	e7d2      	b.n	8019818 <__sinit+0xc>
 8019872:	bf00      	nop
 8019874:	0801a1b4 	.word	0x0801a1b4
 8019878:	080197a5 	.word	0x080197a5

0801987c <__sfp>:
 801987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801987e:	4607      	mov	r7, r0
 8019880:	f7ff ffac 	bl	80197dc <__sfp_lock_acquire>
 8019884:	4b1e      	ldr	r3, [pc, #120]	; (8019900 <__sfp+0x84>)
 8019886:	681e      	ldr	r6, [r3, #0]
 8019888:	69b3      	ldr	r3, [r6, #24]
 801988a:	b913      	cbnz	r3, 8019892 <__sfp+0x16>
 801988c:	4630      	mov	r0, r6
 801988e:	f7ff ffbd 	bl	801980c <__sinit>
 8019892:	3648      	adds	r6, #72	; 0x48
 8019894:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019898:	3b01      	subs	r3, #1
 801989a:	d503      	bpl.n	80198a4 <__sfp+0x28>
 801989c:	6833      	ldr	r3, [r6, #0]
 801989e:	b30b      	cbz	r3, 80198e4 <__sfp+0x68>
 80198a0:	6836      	ldr	r6, [r6, #0]
 80198a2:	e7f7      	b.n	8019894 <__sfp+0x18>
 80198a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80198a8:	b9d5      	cbnz	r5, 80198e0 <__sfp+0x64>
 80198aa:	4b16      	ldr	r3, [pc, #88]	; (8019904 <__sfp+0x88>)
 80198ac:	60e3      	str	r3, [r4, #12]
 80198ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80198b2:	6665      	str	r5, [r4, #100]	; 0x64
 80198b4:	f000 f847 	bl	8019946 <__retarget_lock_init_recursive>
 80198b8:	f7ff ff96 	bl	80197e8 <__sfp_lock_release>
 80198bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80198c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80198c4:	6025      	str	r5, [r4, #0]
 80198c6:	61a5      	str	r5, [r4, #24]
 80198c8:	2208      	movs	r2, #8
 80198ca:	4629      	mov	r1, r5
 80198cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80198d0:	f7ff fd44 	bl	801935c <memset>
 80198d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80198d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80198dc:	4620      	mov	r0, r4
 80198de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198e0:	3468      	adds	r4, #104	; 0x68
 80198e2:	e7d9      	b.n	8019898 <__sfp+0x1c>
 80198e4:	2104      	movs	r1, #4
 80198e6:	4638      	mov	r0, r7
 80198e8:	f7ff ff62 	bl	80197b0 <__sfmoreglue>
 80198ec:	4604      	mov	r4, r0
 80198ee:	6030      	str	r0, [r6, #0]
 80198f0:	2800      	cmp	r0, #0
 80198f2:	d1d5      	bne.n	80198a0 <__sfp+0x24>
 80198f4:	f7ff ff78 	bl	80197e8 <__sfp_lock_release>
 80198f8:	230c      	movs	r3, #12
 80198fa:	603b      	str	r3, [r7, #0]
 80198fc:	e7ee      	b.n	80198dc <__sfp+0x60>
 80198fe:	bf00      	nop
 8019900:	0801a1b4 	.word	0x0801a1b4
 8019904:	ffff0001 	.word	0xffff0001

08019908 <_fwalk_reent>:
 8019908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801990c:	4606      	mov	r6, r0
 801990e:	4688      	mov	r8, r1
 8019910:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019914:	2700      	movs	r7, #0
 8019916:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801991a:	f1b9 0901 	subs.w	r9, r9, #1
 801991e:	d505      	bpl.n	801992c <_fwalk_reent+0x24>
 8019920:	6824      	ldr	r4, [r4, #0]
 8019922:	2c00      	cmp	r4, #0
 8019924:	d1f7      	bne.n	8019916 <_fwalk_reent+0xe>
 8019926:	4638      	mov	r0, r7
 8019928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801992c:	89ab      	ldrh	r3, [r5, #12]
 801992e:	2b01      	cmp	r3, #1
 8019930:	d907      	bls.n	8019942 <_fwalk_reent+0x3a>
 8019932:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019936:	3301      	adds	r3, #1
 8019938:	d003      	beq.n	8019942 <_fwalk_reent+0x3a>
 801993a:	4629      	mov	r1, r5
 801993c:	4630      	mov	r0, r6
 801993e:	47c0      	blx	r8
 8019940:	4307      	orrs	r7, r0
 8019942:	3568      	adds	r5, #104	; 0x68
 8019944:	e7e9      	b.n	801991a <_fwalk_reent+0x12>

08019946 <__retarget_lock_init_recursive>:
 8019946:	4770      	bx	lr

08019948 <__retarget_lock_acquire_recursive>:
 8019948:	4770      	bx	lr

0801994a <__retarget_lock_release_recursive>:
 801994a:	4770      	bx	lr

0801994c <__swhatbuf_r>:
 801994c:	b570      	push	{r4, r5, r6, lr}
 801994e:	460e      	mov	r6, r1
 8019950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019954:	2900      	cmp	r1, #0
 8019956:	b096      	sub	sp, #88	; 0x58
 8019958:	4614      	mov	r4, r2
 801995a:	461d      	mov	r5, r3
 801995c:	da08      	bge.n	8019970 <__swhatbuf_r+0x24>
 801995e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019962:	2200      	movs	r2, #0
 8019964:	602a      	str	r2, [r5, #0]
 8019966:	061a      	lsls	r2, r3, #24
 8019968:	d410      	bmi.n	801998c <__swhatbuf_r+0x40>
 801996a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801996e:	e00e      	b.n	801998e <__swhatbuf_r+0x42>
 8019970:	466a      	mov	r2, sp
 8019972:	f000 f9a7 	bl	8019cc4 <_fstat_r>
 8019976:	2800      	cmp	r0, #0
 8019978:	dbf1      	blt.n	801995e <__swhatbuf_r+0x12>
 801997a:	9a01      	ldr	r2, [sp, #4]
 801997c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019980:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019984:	425a      	negs	r2, r3
 8019986:	415a      	adcs	r2, r3
 8019988:	602a      	str	r2, [r5, #0]
 801998a:	e7ee      	b.n	801996a <__swhatbuf_r+0x1e>
 801998c:	2340      	movs	r3, #64	; 0x40
 801998e:	2000      	movs	r0, #0
 8019990:	6023      	str	r3, [r4, #0]
 8019992:	b016      	add	sp, #88	; 0x58
 8019994:	bd70      	pop	{r4, r5, r6, pc}
	...

08019998 <__smakebuf_r>:
 8019998:	898b      	ldrh	r3, [r1, #12]
 801999a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801999c:	079d      	lsls	r5, r3, #30
 801999e:	4606      	mov	r6, r0
 80199a0:	460c      	mov	r4, r1
 80199a2:	d507      	bpl.n	80199b4 <__smakebuf_r+0x1c>
 80199a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80199a8:	6023      	str	r3, [r4, #0]
 80199aa:	6123      	str	r3, [r4, #16]
 80199ac:	2301      	movs	r3, #1
 80199ae:	6163      	str	r3, [r4, #20]
 80199b0:	b002      	add	sp, #8
 80199b2:	bd70      	pop	{r4, r5, r6, pc}
 80199b4:	ab01      	add	r3, sp, #4
 80199b6:	466a      	mov	r2, sp
 80199b8:	f7ff ffc8 	bl	801994c <__swhatbuf_r>
 80199bc:	9900      	ldr	r1, [sp, #0]
 80199be:	4605      	mov	r5, r0
 80199c0:	4630      	mov	r0, r6
 80199c2:	f000 f895 	bl	8019af0 <_malloc_r>
 80199c6:	b948      	cbnz	r0, 80199dc <__smakebuf_r+0x44>
 80199c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199cc:	059a      	lsls	r2, r3, #22
 80199ce:	d4ef      	bmi.n	80199b0 <__smakebuf_r+0x18>
 80199d0:	f023 0303 	bic.w	r3, r3, #3
 80199d4:	f043 0302 	orr.w	r3, r3, #2
 80199d8:	81a3      	strh	r3, [r4, #12]
 80199da:	e7e3      	b.n	80199a4 <__smakebuf_r+0xc>
 80199dc:	4b0d      	ldr	r3, [pc, #52]	; (8019a14 <__smakebuf_r+0x7c>)
 80199de:	62b3      	str	r3, [r6, #40]	; 0x28
 80199e0:	89a3      	ldrh	r3, [r4, #12]
 80199e2:	6020      	str	r0, [r4, #0]
 80199e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80199e8:	81a3      	strh	r3, [r4, #12]
 80199ea:	9b00      	ldr	r3, [sp, #0]
 80199ec:	6163      	str	r3, [r4, #20]
 80199ee:	9b01      	ldr	r3, [sp, #4]
 80199f0:	6120      	str	r0, [r4, #16]
 80199f2:	b15b      	cbz	r3, 8019a0c <__smakebuf_r+0x74>
 80199f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199f8:	4630      	mov	r0, r6
 80199fa:	f000 f975 	bl	8019ce8 <_isatty_r>
 80199fe:	b128      	cbz	r0, 8019a0c <__smakebuf_r+0x74>
 8019a00:	89a3      	ldrh	r3, [r4, #12]
 8019a02:	f023 0303 	bic.w	r3, r3, #3
 8019a06:	f043 0301 	orr.w	r3, r3, #1
 8019a0a:	81a3      	strh	r3, [r4, #12]
 8019a0c:	89a0      	ldrh	r0, [r4, #12]
 8019a0e:	4305      	orrs	r5, r0
 8019a10:	81a5      	strh	r5, [r4, #12]
 8019a12:	e7cd      	b.n	80199b0 <__smakebuf_r+0x18>
 8019a14:	080197a5 	.word	0x080197a5

08019a18 <_free_r>:
 8019a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a1a:	2900      	cmp	r1, #0
 8019a1c:	d044      	beq.n	8019aa8 <_free_r+0x90>
 8019a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a22:	9001      	str	r0, [sp, #4]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	f1a1 0404 	sub.w	r4, r1, #4
 8019a2a:	bfb8      	it	lt
 8019a2c:	18e4      	addlt	r4, r4, r3
 8019a2e:	f000 f97d 	bl	8019d2c <__malloc_lock>
 8019a32:	4a1e      	ldr	r2, [pc, #120]	; (8019aac <_free_r+0x94>)
 8019a34:	9801      	ldr	r0, [sp, #4]
 8019a36:	6813      	ldr	r3, [r2, #0]
 8019a38:	b933      	cbnz	r3, 8019a48 <_free_r+0x30>
 8019a3a:	6063      	str	r3, [r4, #4]
 8019a3c:	6014      	str	r4, [r2, #0]
 8019a3e:	b003      	add	sp, #12
 8019a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a44:	f000 b978 	b.w	8019d38 <__malloc_unlock>
 8019a48:	42a3      	cmp	r3, r4
 8019a4a:	d908      	bls.n	8019a5e <_free_r+0x46>
 8019a4c:	6825      	ldr	r5, [r4, #0]
 8019a4e:	1961      	adds	r1, r4, r5
 8019a50:	428b      	cmp	r3, r1
 8019a52:	bf01      	itttt	eq
 8019a54:	6819      	ldreq	r1, [r3, #0]
 8019a56:	685b      	ldreq	r3, [r3, #4]
 8019a58:	1949      	addeq	r1, r1, r5
 8019a5a:	6021      	streq	r1, [r4, #0]
 8019a5c:	e7ed      	b.n	8019a3a <_free_r+0x22>
 8019a5e:	461a      	mov	r2, r3
 8019a60:	685b      	ldr	r3, [r3, #4]
 8019a62:	b10b      	cbz	r3, 8019a68 <_free_r+0x50>
 8019a64:	42a3      	cmp	r3, r4
 8019a66:	d9fa      	bls.n	8019a5e <_free_r+0x46>
 8019a68:	6811      	ldr	r1, [r2, #0]
 8019a6a:	1855      	adds	r5, r2, r1
 8019a6c:	42a5      	cmp	r5, r4
 8019a6e:	d10b      	bne.n	8019a88 <_free_r+0x70>
 8019a70:	6824      	ldr	r4, [r4, #0]
 8019a72:	4421      	add	r1, r4
 8019a74:	1854      	adds	r4, r2, r1
 8019a76:	42a3      	cmp	r3, r4
 8019a78:	6011      	str	r1, [r2, #0]
 8019a7a:	d1e0      	bne.n	8019a3e <_free_r+0x26>
 8019a7c:	681c      	ldr	r4, [r3, #0]
 8019a7e:	685b      	ldr	r3, [r3, #4]
 8019a80:	6053      	str	r3, [r2, #4]
 8019a82:	4421      	add	r1, r4
 8019a84:	6011      	str	r1, [r2, #0]
 8019a86:	e7da      	b.n	8019a3e <_free_r+0x26>
 8019a88:	d902      	bls.n	8019a90 <_free_r+0x78>
 8019a8a:	230c      	movs	r3, #12
 8019a8c:	6003      	str	r3, [r0, #0]
 8019a8e:	e7d6      	b.n	8019a3e <_free_r+0x26>
 8019a90:	6825      	ldr	r5, [r4, #0]
 8019a92:	1961      	adds	r1, r4, r5
 8019a94:	428b      	cmp	r3, r1
 8019a96:	bf04      	itt	eq
 8019a98:	6819      	ldreq	r1, [r3, #0]
 8019a9a:	685b      	ldreq	r3, [r3, #4]
 8019a9c:	6063      	str	r3, [r4, #4]
 8019a9e:	bf04      	itt	eq
 8019aa0:	1949      	addeq	r1, r1, r5
 8019aa2:	6021      	streq	r1, [r4, #0]
 8019aa4:	6054      	str	r4, [r2, #4]
 8019aa6:	e7ca      	b.n	8019a3e <_free_r+0x26>
 8019aa8:	b003      	add	sp, #12
 8019aaa:	bd30      	pop	{r4, r5, pc}
 8019aac:	24006970 	.word	0x24006970

08019ab0 <sbrk_aligned>:
 8019ab0:	b570      	push	{r4, r5, r6, lr}
 8019ab2:	4e0e      	ldr	r6, [pc, #56]	; (8019aec <sbrk_aligned+0x3c>)
 8019ab4:	460c      	mov	r4, r1
 8019ab6:	6831      	ldr	r1, [r6, #0]
 8019ab8:	4605      	mov	r5, r0
 8019aba:	b911      	cbnz	r1, 8019ac2 <sbrk_aligned+0x12>
 8019abc:	f000 f88c 	bl	8019bd8 <_sbrk_r>
 8019ac0:	6030      	str	r0, [r6, #0]
 8019ac2:	4621      	mov	r1, r4
 8019ac4:	4628      	mov	r0, r5
 8019ac6:	f000 f887 	bl	8019bd8 <_sbrk_r>
 8019aca:	1c43      	adds	r3, r0, #1
 8019acc:	d00a      	beq.n	8019ae4 <sbrk_aligned+0x34>
 8019ace:	1cc4      	adds	r4, r0, #3
 8019ad0:	f024 0403 	bic.w	r4, r4, #3
 8019ad4:	42a0      	cmp	r0, r4
 8019ad6:	d007      	beq.n	8019ae8 <sbrk_aligned+0x38>
 8019ad8:	1a21      	subs	r1, r4, r0
 8019ada:	4628      	mov	r0, r5
 8019adc:	f000 f87c 	bl	8019bd8 <_sbrk_r>
 8019ae0:	3001      	adds	r0, #1
 8019ae2:	d101      	bne.n	8019ae8 <sbrk_aligned+0x38>
 8019ae4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019ae8:	4620      	mov	r0, r4
 8019aea:	bd70      	pop	{r4, r5, r6, pc}
 8019aec:	24006974 	.word	0x24006974

08019af0 <_malloc_r>:
 8019af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019af4:	1ccd      	adds	r5, r1, #3
 8019af6:	f025 0503 	bic.w	r5, r5, #3
 8019afa:	3508      	adds	r5, #8
 8019afc:	2d0c      	cmp	r5, #12
 8019afe:	bf38      	it	cc
 8019b00:	250c      	movcc	r5, #12
 8019b02:	2d00      	cmp	r5, #0
 8019b04:	4607      	mov	r7, r0
 8019b06:	db01      	blt.n	8019b0c <_malloc_r+0x1c>
 8019b08:	42a9      	cmp	r1, r5
 8019b0a:	d905      	bls.n	8019b18 <_malloc_r+0x28>
 8019b0c:	230c      	movs	r3, #12
 8019b0e:	603b      	str	r3, [r7, #0]
 8019b10:	2600      	movs	r6, #0
 8019b12:	4630      	mov	r0, r6
 8019b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b18:	4e2e      	ldr	r6, [pc, #184]	; (8019bd4 <_malloc_r+0xe4>)
 8019b1a:	f000 f907 	bl	8019d2c <__malloc_lock>
 8019b1e:	6833      	ldr	r3, [r6, #0]
 8019b20:	461c      	mov	r4, r3
 8019b22:	bb34      	cbnz	r4, 8019b72 <_malloc_r+0x82>
 8019b24:	4629      	mov	r1, r5
 8019b26:	4638      	mov	r0, r7
 8019b28:	f7ff ffc2 	bl	8019ab0 <sbrk_aligned>
 8019b2c:	1c43      	adds	r3, r0, #1
 8019b2e:	4604      	mov	r4, r0
 8019b30:	d14d      	bne.n	8019bce <_malloc_r+0xde>
 8019b32:	6834      	ldr	r4, [r6, #0]
 8019b34:	4626      	mov	r6, r4
 8019b36:	2e00      	cmp	r6, #0
 8019b38:	d140      	bne.n	8019bbc <_malloc_r+0xcc>
 8019b3a:	6823      	ldr	r3, [r4, #0]
 8019b3c:	4631      	mov	r1, r6
 8019b3e:	4638      	mov	r0, r7
 8019b40:	eb04 0803 	add.w	r8, r4, r3
 8019b44:	f000 f848 	bl	8019bd8 <_sbrk_r>
 8019b48:	4580      	cmp	r8, r0
 8019b4a:	d13a      	bne.n	8019bc2 <_malloc_r+0xd2>
 8019b4c:	6821      	ldr	r1, [r4, #0]
 8019b4e:	3503      	adds	r5, #3
 8019b50:	1a6d      	subs	r5, r5, r1
 8019b52:	f025 0503 	bic.w	r5, r5, #3
 8019b56:	3508      	adds	r5, #8
 8019b58:	2d0c      	cmp	r5, #12
 8019b5a:	bf38      	it	cc
 8019b5c:	250c      	movcc	r5, #12
 8019b5e:	4629      	mov	r1, r5
 8019b60:	4638      	mov	r0, r7
 8019b62:	f7ff ffa5 	bl	8019ab0 <sbrk_aligned>
 8019b66:	3001      	adds	r0, #1
 8019b68:	d02b      	beq.n	8019bc2 <_malloc_r+0xd2>
 8019b6a:	6823      	ldr	r3, [r4, #0]
 8019b6c:	442b      	add	r3, r5
 8019b6e:	6023      	str	r3, [r4, #0]
 8019b70:	e00e      	b.n	8019b90 <_malloc_r+0xa0>
 8019b72:	6822      	ldr	r2, [r4, #0]
 8019b74:	1b52      	subs	r2, r2, r5
 8019b76:	d41e      	bmi.n	8019bb6 <_malloc_r+0xc6>
 8019b78:	2a0b      	cmp	r2, #11
 8019b7a:	d916      	bls.n	8019baa <_malloc_r+0xba>
 8019b7c:	1961      	adds	r1, r4, r5
 8019b7e:	42a3      	cmp	r3, r4
 8019b80:	6025      	str	r5, [r4, #0]
 8019b82:	bf18      	it	ne
 8019b84:	6059      	strne	r1, [r3, #4]
 8019b86:	6863      	ldr	r3, [r4, #4]
 8019b88:	bf08      	it	eq
 8019b8a:	6031      	streq	r1, [r6, #0]
 8019b8c:	5162      	str	r2, [r4, r5]
 8019b8e:	604b      	str	r3, [r1, #4]
 8019b90:	4638      	mov	r0, r7
 8019b92:	f104 060b 	add.w	r6, r4, #11
 8019b96:	f000 f8cf 	bl	8019d38 <__malloc_unlock>
 8019b9a:	f026 0607 	bic.w	r6, r6, #7
 8019b9e:	1d23      	adds	r3, r4, #4
 8019ba0:	1af2      	subs	r2, r6, r3
 8019ba2:	d0b6      	beq.n	8019b12 <_malloc_r+0x22>
 8019ba4:	1b9b      	subs	r3, r3, r6
 8019ba6:	50a3      	str	r3, [r4, r2]
 8019ba8:	e7b3      	b.n	8019b12 <_malloc_r+0x22>
 8019baa:	6862      	ldr	r2, [r4, #4]
 8019bac:	42a3      	cmp	r3, r4
 8019bae:	bf0c      	ite	eq
 8019bb0:	6032      	streq	r2, [r6, #0]
 8019bb2:	605a      	strne	r2, [r3, #4]
 8019bb4:	e7ec      	b.n	8019b90 <_malloc_r+0xa0>
 8019bb6:	4623      	mov	r3, r4
 8019bb8:	6864      	ldr	r4, [r4, #4]
 8019bba:	e7b2      	b.n	8019b22 <_malloc_r+0x32>
 8019bbc:	4634      	mov	r4, r6
 8019bbe:	6876      	ldr	r6, [r6, #4]
 8019bc0:	e7b9      	b.n	8019b36 <_malloc_r+0x46>
 8019bc2:	230c      	movs	r3, #12
 8019bc4:	603b      	str	r3, [r7, #0]
 8019bc6:	4638      	mov	r0, r7
 8019bc8:	f000 f8b6 	bl	8019d38 <__malloc_unlock>
 8019bcc:	e7a1      	b.n	8019b12 <_malloc_r+0x22>
 8019bce:	6025      	str	r5, [r4, #0]
 8019bd0:	e7de      	b.n	8019b90 <_malloc_r+0xa0>
 8019bd2:	bf00      	nop
 8019bd4:	24006970 	.word	0x24006970

08019bd8 <_sbrk_r>:
 8019bd8:	b538      	push	{r3, r4, r5, lr}
 8019bda:	4d06      	ldr	r5, [pc, #24]	; (8019bf4 <_sbrk_r+0x1c>)
 8019bdc:	2300      	movs	r3, #0
 8019bde:	4604      	mov	r4, r0
 8019be0:	4608      	mov	r0, r1
 8019be2:	602b      	str	r3, [r5, #0]
 8019be4:	f7ea f822 	bl	8003c2c <_sbrk>
 8019be8:	1c43      	adds	r3, r0, #1
 8019bea:	d102      	bne.n	8019bf2 <_sbrk_r+0x1a>
 8019bec:	682b      	ldr	r3, [r5, #0]
 8019bee:	b103      	cbz	r3, 8019bf2 <_sbrk_r+0x1a>
 8019bf0:	6023      	str	r3, [r4, #0]
 8019bf2:	bd38      	pop	{r3, r4, r5, pc}
 8019bf4:	24006978 	.word	0x24006978

08019bf8 <__sread>:
 8019bf8:	b510      	push	{r4, lr}
 8019bfa:	460c      	mov	r4, r1
 8019bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c00:	f000 f8a0 	bl	8019d44 <_read_r>
 8019c04:	2800      	cmp	r0, #0
 8019c06:	bfab      	itete	ge
 8019c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8019c0c:	181b      	addge	r3, r3, r0
 8019c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019c12:	bfac      	ite	ge
 8019c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8019c16:	81a3      	strhlt	r3, [r4, #12]
 8019c18:	bd10      	pop	{r4, pc}

08019c1a <__swrite>:
 8019c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c1e:	461f      	mov	r7, r3
 8019c20:	898b      	ldrh	r3, [r1, #12]
 8019c22:	05db      	lsls	r3, r3, #23
 8019c24:	4605      	mov	r5, r0
 8019c26:	460c      	mov	r4, r1
 8019c28:	4616      	mov	r6, r2
 8019c2a:	d505      	bpl.n	8019c38 <__swrite+0x1e>
 8019c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c30:	2302      	movs	r3, #2
 8019c32:	2200      	movs	r2, #0
 8019c34:	f000 f868 	bl	8019d08 <_lseek_r>
 8019c38:	89a3      	ldrh	r3, [r4, #12]
 8019c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019c42:	81a3      	strh	r3, [r4, #12]
 8019c44:	4632      	mov	r2, r6
 8019c46:	463b      	mov	r3, r7
 8019c48:	4628      	mov	r0, r5
 8019c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c4e:	f000 b817 	b.w	8019c80 <_write_r>

08019c52 <__sseek>:
 8019c52:	b510      	push	{r4, lr}
 8019c54:	460c      	mov	r4, r1
 8019c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c5a:	f000 f855 	bl	8019d08 <_lseek_r>
 8019c5e:	1c43      	adds	r3, r0, #1
 8019c60:	89a3      	ldrh	r3, [r4, #12]
 8019c62:	bf15      	itete	ne
 8019c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8019c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019c6e:	81a3      	strheq	r3, [r4, #12]
 8019c70:	bf18      	it	ne
 8019c72:	81a3      	strhne	r3, [r4, #12]
 8019c74:	bd10      	pop	{r4, pc}

08019c76 <__sclose>:
 8019c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c7a:	f000 b813 	b.w	8019ca4 <_close_r>
	...

08019c80 <_write_r>:
 8019c80:	b538      	push	{r3, r4, r5, lr}
 8019c82:	4d07      	ldr	r5, [pc, #28]	; (8019ca0 <_write_r+0x20>)
 8019c84:	4604      	mov	r4, r0
 8019c86:	4608      	mov	r0, r1
 8019c88:	4611      	mov	r1, r2
 8019c8a:	2200      	movs	r2, #0
 8019c8c:	602a      	str	r2, [r5, #0]
 8019c8e:	461a      	mov	r2, r3
 8019c90:	f7e9 ff7b 	bl	8003b8a <_write>
 8019c94:	1c43      	adds	r3, r0, #1
 8019c96:	d102      	bne.n	8019c9e <_write_r+0x1e>
 8019c98:	682b      	ldr	r3, [r5, #0]
 8019c9a:	b103      	cbz	r3, 8019c9e <_write_r+0x1e>
 8019c9c:	6023      	str	r3, [r4, #0]
 8019c9e:	bd38      	pop	{r3, r4, r5, pc}
 8019ca0:	24006978 	.word	0x24006978

08019ca4 <_close_r>:
 8019ca4:	b538      	push	{r3, r4, r5, lr}
 8019ca6:	4d06      	ldr	r5, [pc, #24]	; (8019cc0 <_close_r+0x1c>)
 8019ca8:	2300      	movs	r3, #0
 8019caa:	4604      	mov	r4, r0
 8019cac:	4608      	mov	r0, r1
 8019cae:	602b      	str	r3, [r5, #0]
 8019cb0:	f7e9 ff87 	bl	8003bc2 <_close>
 8019cb4:	1c43      	adds	r3, r0, #1
 8019cb6:	d102      	bne.n	8019cbe <_close_r+0x1a>
 8019cb8:	682b      	ldr	r3, [r5, #0]
 8019cba:	b103      	cbz	r3, 8019cbe <_close_r+0x1a>
 8019cbc:	6023      	str	r3, [r4, #0]
 8019cbe:	bd38      	pop	{r3, r4, r5, pc}
 8019cc0:	24006978 	.word	0x24006978

08019cc4 <_fstat_r>:
 8019cc4:	b538      	push	{r3, r4, r5, lr}
 8019cc6:	4d07      	ldr	r5, [pc, #28]	; (8019ce4 <_fstat_r+0x20>)
 8019cc8:	2300      	movs	r3, #0
 8019cca:	4604      	mov	r4, r0
 8019ccc:	4608      	mov	r0, r1
 8019cce:	4611      	mov	r1, r2
 8019cd0:	602b      	str	r3, [r5, #0]
 8019cd2:	f7e9 ff82 	bl	8003bda <_fstat>
 8019cd6:	1c43      	adds	r3, r0, #1
 8019cd8:	d102      	bne.n	8019ce0 <_fstat_r+0x1c>
 8019cda:	682b      	ldr	r3, [r5, #0]
 8019cdc:	b103      	cbz	r3, 8019ce0 <_fstat_r+0x1c>
 8019cde:	6023      	str	r3, [r4, #0]
 8019ce0:	bd38      	pop	{r3, r4, r5, pc}
 8019ce2:	bf00      	nop
 8019ce4:	24006978 	.word	0x24006978

08019ce8 <_isatty_r>:
 8019ce8:	b538      	push	{r3, r4, r5, lr}
 8019cea:	4d06      	ldr	r5, [pc, #24]	; (8019d04 <_isatty_r+0x1c>)
 8019cec:	2300      	movs	r3, #0
 8019cee:	4604      	mov	r4, r0
 8019cf0:	4608      	mov	r0, r1
 8019cf2:	602b      	str	r3, [r5, #0]
 8019cf4:	f7e9 ff81 	bl	8003bfa <_isatty>
 8019cf8:	1c43      	adds	r3, r0, #1
 8019cfa:	d102      	bne.n	8019d02 <_isatty_r+0x1a>
 8019cfc:	682b      	ldr	r3, [r5, #0]
 8019cfe:	b103      	cbz	r3, 8019d02 <_isatty_r+0x1a>
 8019d00:	6023      	str	r3, [r4, #0]
 8019d02:	bd38      	pop	{r3, r4, r5, pc}
 8019d04:	24006978 	.word	0x24006978

08019d08 <_lseek_r>:
 8019d08:	b538      	push	{r3, r4, r5, lr}
 8019d0a:	4d07      	ldr	r5, [pc, #28]	; (8019d28 <_lseek_r+0x20>)
 8019d0c:	4604      	mov	r4, r0
 8019d0e:	4608      	mov	r0, r1
 8019d10:	4611      	mov	r1, r2
 8019d12:	2200      	movs	r2, #0
 8019d14:	602a      	str	r2, [r5, #0]
 8019d16:	461a      	mov	r2, r3
 8019d18:	f7e9 ff7a 	bl	8003c10 <_lseek>
 8019d1c:	1c43      	adds	r3, r0, #1
 8019d1e:	d102      	bne.n	8019d26 <_lseek_r+0x1e>
 8019d20:	682b      	ldr	r3, [r5, #0]
 8019d22:	b103      	cbz	r3, 8019d26 <_lseek_r+0x1e>
 8019d24:	6023      	str	r3, [r4, #0]
 8019d26:	bd38      	pop	{r3, r4, r5, pc}
 8019d28:	24006978 	.word	0x24006978

08019d2c <__malloc_lock>:
 8019d2c:	4801      	ldr	r0, [pc, #4]	; (8019d34 <__malloc_lock+0x8>)
 8019d2e:	f7ff be0b 	b.w	8019948 <__retarget_lock_acquire_recursive>
 8019d32:	bf00      	nop
 8019d34:	2400696c 	.word	0x2400696c

08019d38 <__malloc_unlock>:
 8019d38:	4801      	ldr	r0, [pc, #4]	; (8019d40 <__malloc_unlock+0x8>)
 8019d3a:	f7ff be06 	b.w	801994a <__retarget_lock_release_recursive>
 8019d3e:	bf00      	nop
 8019d40:	2400696c 	.word	0x2400696c

08019d44 <_read_r>:
 8019d44:	b538      	push	{r3, r4, r5, lr}
 8019d46:	4d07      	ldr	r5, [pc, #28]	; (8019d64 <_read_r+0x20>)
 8019d48:	4604      	mov	r4, r0
 8019d4a:	4608      	mov	r0, r1
 8019d4c:	4611      	mov	r1, r2
 8019d4e:	2200      	movs	r2, #0
 8019d50:	602a      	str	r2, [r5, #0]
 8019d52:	461a      	mov	r2, r3
 8019d54:	f7e9 fefc 	bl	8003b50 <_read>
 8019d58:	1c43      	adds	r3, r0, #1
 8019d5a:	d102      	bne.n	8019d62 <_read_r+0x1e>
 8019d5c:	682b      	ldr	r3, [r5, #0]
 8019d5e:	b103      	cbz	r3, 8019d62 <_read_r+0x1e>
 8019d60:	6023      	str	r3, [r4, #0]
 8019d62:	bd38      	pop	{r3, r4, r5, pc}
 8019d64:	24006978 	.word	0x24006978

08019d68 <_init>:
 8019d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d6a:	bf00      	nop
 8019d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d6e:	bc08      	pop	{r3}
 8019d70:	469e      	mov	lr, r3
 8019d72:	4770      	bx	lr

08019d74 <_fini>:
 8019d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d76:	bf00      	nop
 8019d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d7a:	bc08      	pop	{r3}
 8019d7c:	469e      	mov	lr, r3
 8019d7e:	4770      	bx	lr
