
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016aa0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08016d40  08016d40  00026d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017188  08017188  00027188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017190  08017190  00027190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017194  08017194  00027194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017198  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000594c  24000120  080172a0  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a6c  080172a0  00035a6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032f44  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005570  00000000  00000000  0006307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026a0  00000000  00000000  000685f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002498  00000000  00000000  0006ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fdbf  00000000  00000000  0006d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000316bd  00000000  00000000  000acee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194869  00000000  00000000  000de5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00272e0d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad8c  00000000  00000000  00272e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016d28 	.word	0x08016d28

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016d28 	.word	0x08016d28

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	UptimeMillis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c38 	.word	0x24000c38

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fb62 	bl	8012ce0 <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fb57 	bl	8012ce0 <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fb4c 	bl	8012ce0 <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fb41 	bl	8012ce0 <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f015 ffb1 	bl	80165c8 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c58 	.word	0x24000c58
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	08016db0 	.word	0x08016db0

08000688 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fcbd 	bl	8010014 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 83e8 	bhi.w	8000e78 <HAL_UART_RxCpltCallback+0x7f0>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a85 	.word	0x08000a85
 80006b8:	08000b0b 	.word	0x08000b0b
 80006bc:	08000b35 	.word	0x08000b35
 80006c0:	08000b5d 	.word	0x08000b5d
 80006c4:	08000b87 	.word	0x08000b87
 80006c8:	08000bb3 	.word	0x08000bb3
 80006cc:	08000bdf 	.word	0x08000bdf
 80006d0:	08000c09 	.word	0x08000c09
 80006d4:	08000c35 	.word	0x08000c35
 80006d8:	08000c61 	.word	0x08000c61
 80006dc:	08000c93 	.word	0x08000c93
 80006e0:	08000cc5 	.word	0x08000cc5
 80006e4:	08000d17 	.word	0x08000d17
 80006e8:	08000e1d 	.word	0x08000e1d
 80006ec:	08000e4d 	.word	0x08000e4d
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000af5 	.word	0x08000af5
 80006fc:	08000b21 	.word	0x08000b21
 8000700:	08000b49 	.word	0x08000b49
 8000704:	08000b71 	.word	0x08000b71
 8000708:	08000b9d 	.word	0x08000b9d
 800070c:	08000bc9 	.word	0x08000bc9
 8000710:	08000bf5 	.word	0x08000bf5
 8000714:	08000c1d 	.word	0x08000c1d
 8000718:	08000c45 	.word	0x08000c45
 800071c:	08000c77 	.word	0x08000c77
 8000720:	08000ca9 	.word	0x08000ca9
 8000724:	08000cdb 	.word	0x08000cdb
 8000728:	08000df5 	.word	0x08000df5
 800072c:	08000e45 	.word	0x08000e45
 8000730:	08000e79 	.word	0x08000e79
 8000734:	08000e79 	.word	0x08000e79
 8000738:	08000e79 	.word	0x08000e79
 800073c:	08000e79 	.word	0x08000e79
 8000740:	08000e79 	.word	0x08000e79
 8000744:	08000e79 	.word	0x08000e79
 8000748:	08000e79 	.word	0x08000e79
 800074c:	08000e79 	.word	0x08000e79
 8000750:	08000e79 	.word	0x08000e79
 8000754:	08000e79 	.word	0x08000e79
 8000758:	08000e79 	.word	0x08000e79
 800075c:	08000e79 	.word	0x08000e79
 8000760:	08000e79 	.word	0x08000e79
 8000764:	08000e79 	.word	0x08000e79
 8000768:	08000e79 	.word	0x08000e79
 800076c:	08000e79 	.word	0x08000e79
 8000770:	08000e79 	.word	0x08000e79
 8000774:	08000e79 	.word	0x08000e79
 8000778:	08000e79 	.word	0x08000e79
 800077c:	08000e79 	.word	0x08000e79
 8000780:	08000e79 	.word	0x08000e79
 8000784:	08000e79 	.word	0x08000e79
 8000788:	08000e79 	.word	0x08000e79
 800078c:	08000e79 	.word	0x08000e79
 8000790:	08000e79 	.word	0x08000e79
 8000794:	08000e79 	.word	0x08000e79
 8000798:	08000e79 	.word	0x08000e79
 800079c:	08000e79 	.word	0x08000e79
 80007a0:	08000e79 	.word	0x08000e79
 80007a4:	08000e79 	.word	0x08000e79
 80007a8:	08000e79 	.word	0x08000e79
 80007ac:	08000e79 	.word	0x08000e79
 80007b0:	08000e79 	.word	0x08000e79
 80007b4:	08000e79 	.word	0x08000e79
 80007b8:	08000e79 	.word	0x08000e79
 80007bc:	08000e79 	.word	0x08000e79
 80007c0:	08000e79 	.word	0x08000e79
 80007c4:	08000e79 	.word	0x08000e79
 80007c8:	08000e79 	.word	0x08000e79
 80007cc:	08000e79 	.word	0x08000e79
 80007d0:	08000e79 	.word	0x08000e79
 80007d4:	08000e79 	.word	0x08000e79
 80007d8:	08000e79 	.word	0x08000e79
 80007dc:	08000e79 	.word	0x08000e79
 80007e0:	08000e79 	.word	0x08000e79
 80007e4:	08000e79 	.word	0x08000e79
 80007e8:	08000e79 	.word	0x08000e79
 80007ec:	08000e79 	.word	0x08000e79
 80007f0:	08000e79 	.word	0x08000e79
 80007f4:	08000e79 	.word	0x08000e79
 80007f8:	08000e79 	.word	0x08000e79
 80007fc:	08000e79 	.word	0x08000e79
 8000800:	08000e79 	.word	0x08000e79
 8000804:	08000e79 	.word	0x08000e79
 8000808:	08000e79 	.word	0x08000e79
 800080c:	08000e79 	.word	0x08000e79
 8000810:	08000e79 	.word	0x08000e79
 8000814:	08000e79 	.word	0x08000e79
 8000818:	08000e79 	.word	0x08000e79
 800081c:	08000e79 	.word	0x08000e79
 8000820:	08000e79 	.word	0x08000e79
 8000824:	08000e79 	.word	0x08000e79
 8000828:	08000e79 	.word	0x08000e79
 800082c:	08000e79 	.word	0x08000e79
 8000830:	08000e79 	.word	0x08000e79
 8000834:	08000e79 	.word	0x08000e79
 8000838:	08000e79 	.word	0x08000e79
 800083c:	08000e79 	.word	0x08000e79
 8000840:	08000e79 	.word	0x08000e79
 8000844:	08000e79 	.word	0x08000e79
 8000848:	08000e79 	.word	0x08000e79
 800084c:	08000e79 	.word	0x08000e79
 8000850:	08000e79 	.word	0x08000e79
 8000854:	08000e79 	.word	0x08000e79
 8000858:	08000e79 	.word	0x08000e79
 800085c:	08000e79 	.word	0x08000e79
 8000860:	08000e79 	.word	0x08000e79
 8000864:	08000e79 	.word	0x08000e79
 8000868:	08000e79 	.word	0x08000e79
 800086c:	08000e79 	.word	0x08000e79
 8000870:	08000e79 	.word	0x08000e79
 8000874:	08000e79 	.word	0x08000e79
 8000878:	08000e79 	.word	0x08000e79
 800087c:	08000e79 	.word	0x08000e79
 8000880:	08000e79 	.word	0x08000e79
 8000884:	08000e79 	.word	0x08000e79
 8000888:	08000e79 	.word	0x08000e79
 800088c:	08000e79 	.word	0x08000e79
 8000890:	08000e79 	.word	0x08000e79
 8000894:	08000e79 	.word	0x08000e79
 8000898:	08000e79 	.word	0x08000e79
 800089c:	08000e79 	.word	0x08000e79
 80008a0:	08000e79 	.word	0x08000e79
 80008a4:	08000e79 	.word	0x08000e79
 80008a8:	08000e79 	.word	0x08000e79
 80008ac:	08000e79 	.word	0x08000e79
 80008b0:	08000e79 	.word	0x08000e79
 80008b4:	08000e79 	.word	0x08000e79
 80008b8:	08000e79 	.word	0x08000e79
 80008bc:	08000e79 	.word	0x08000e79
 80008c0:	08000e79 	.word	0x08000e79
 80008c4:	08000e79 	.word	0x08000e79
 80008c8:	08000e79 	.word	0x08000e79
 80008cc:	08000e79 	.word	0x08000e79
 80008d0:	08000e79 	.word	0x08000e79
 80008d4:	08000e79 	.word	0x08000e79
 80008d8:	08000e79 	.word	0x08000e79
 80008dc:	08000e79 	.word	0x08000e79
 80008e0:	08000e79 	.word	0x08000e79
 80008e4:	08000e79 	.word	0x08000e79
 80008e8:	08000e79 	.word	0x08000e79
 80008ec:	08000e79 	.word	0x08000e79
 80008f0:	08000e79 	.word	0x08000e79
 80008f4:	08000e79 	.word	0x08000e79
 80008f8:	08000e79 	.word	0x08000e79
 80008fc:	08000e79 	.word	0x08000e79
 8000900:	08000e79 	.word	0x08000e79
 8000904:	08000e79 	.word	0x08000e79
 8000908:	08000e79 	.word	0x08000e79
 800090c:	08000e79 	.word	0x08000e79
 8000910:	08000e79 	.word	0x08000e79
 8000914:	08000e79 	.word	0x08000e79
 8000918:	08000e79 	.word	0x08000e79
 800091c:	08000e79 	.word	0x08000e79
 8000920:	08000e79 	.word	0x08000e79
 8000924:	08000e79 	.word	0x08000e79
 8000928:	08000e79 	.word	0x08000e79
 800092c:	08000e79 	.word	0x08000e79
 8000930:	08000e79 	.word	0x08000e79
 8000934:	08000e79 	.word	0x08000e79
 8000938:	08000e79 	.word	0x08000e79
 800093c:	08000e79 	.word	0x08000e79
 8000940:	08000e79 	.word	0x08000e79
 8000944:	08000e79 	.word	0x08000e79
 8000948:	08000e79 	.word	0x08000e79
 800094c:	08000e79 	.word	0x08000e79
 8000950:	08000e79 	.word	0x08000e79
 8000954:	08000e79 	.word	0x08000e79
 8000958:	08000e79 	.word	0x08000e79
 800095c:	08000e79 	.word	0x08000e79
 8000960:	08000e79 	.word	0x08000e79
 8000964:	08000e79 	.word	0x08000e79
 8000968:	08000e79 	.word	0x08000e79
 800096c:	08000e79 	.word	0x08000e79
 8000970:	08000e79 	.word	0x08000e79
 8000974:	08000e79 	.word	0x08000e79
 8000978:	08000e79 	.word	0x08000e79
 800097c:	08000e79 	.word	0x08000e79
 8000980:	08000e79 	.word	0x08000e79
 8000984:	08000e79 	.word	0x08000e79
 8000988:	08000e79 	.word	0x08000e79
 800098c:	08000e79 	.word	0x08000e79
 8000990:	08000e79 	.word	0x08000e79
 8000994:	08000e79 	.word	0x08000e79
 8000998:	08000e79 	.word	0x08000e79
 800099c:	08000e79 	.word	0x08000e79
 80009a0:	08000e79 	.word	0x08000e79
 80009a4:	08000e79 	.word	0x08000e79
 80009a8:	08000e79 	.word	0x08000e79
 80009ac:	08000e79 	.word	0x08000e79
 80009b0:	08000e79 	.word	0x08000e79
 80009b4:	08000e79 	.word	0x08000e79
 80009b8:	08000e79 	.word	0x08000e79
 80009bc:	08000e79 	.word	0x08000e79
 80009c0:	08000e79 	.word	0x08000e79
 80009c4:	08000e79 	.word	0x08000e79
 80009c8:	08000e79 	.word	0x08000e79
 80009cc:	08000e79 	.word	0x08000e79
 80009d0:	08000e79 	.word	0x08000e79
 80009d4:	08000e79 	.word	0x08000e79
 80009d8:	08000e79 	.word	0x08000e79
 80009dc:	08000e79 	.word	0x08000e79
 80009e0:	08000e79 	.word	0x08000e79
 80009e4:	08000e79 	.word	0x08000e79
 80009e8:	08000e79 	.word	0x08000e79
 80009ec:	08000e79 	.word	0x08000e79
 80009f0:	08000e67 	.word	0x08000e67
 80009f4:	08000e79 	.word	0x08000e79
 80009f8:	08000e79 	.word	0x08000e79
 80009fc:	08000e79 	.word	0x08000e79
 8000a00:	08000e79 	.word	0x08000e79
 8000a04:	08000e79 	.word	0x08000e79
 8000a08:	08000e79 	.word	0x08000e79
 8000a0c:	08000e79 	.word	0x08000e79
 8000a10:	08000e79 	.word	0x08000e79
 8000a14:	08000e79 	.word	0x08000e79
 8000a18:	08000e79 	.word	0x08000e79
 8000a1c:	08000e79 	.word	0x08000e79
 8000a20:	08000e79 	.word	0x08000e79
 8000a24:	08000e79 	.word	0x08000e79
 8000a28:	08000e79 	.word	0x08000e79
 8000a2c:	08000e79 	.word	0x08000e79
 8000a30:	08000e55 	.word	0x08000e55
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f015 fdc7 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fa3f 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000a46:	e222      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f015 fdbd 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fa35 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e218      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
 8000a5c:	24000c5c 	.word	0x24000c5c
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08016dc8 	.word	0x08016dc8
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	08016dd0 	.word	0x08016dd0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48b8      	ldr	r0, [pc, #736]	; (8000d54 <HAL_UART_RxCpltCallback+0x6cc>)
 8000a72:	f015 fda9 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bb8      	ldr	r3, [pc, #736]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fa21 	bl	8008ec4 <HAL_GPIO_WritePin>

		break;
 8000a82:	e204      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a84:	48b5      	ldr	r0, [pc, #724]	; (8000d5c <HAL_UART_RxCpltCallback+0x6d4>)
 8000a86:	f015 fd9f 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a8a:	4bb3      	ldr	r3, [pc, #716]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f008 fa17 	bl	8008ec4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a96:	4bb0      	ldr	r3, [pc, #704]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a98:	2140      	movs	r1, #64	; 0x40
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 fa11 	bl	8008ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa2:	4baf      	ldr	r3, [pc, #700]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 fa0a 	bl	8008ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab0:	4bab      	ldr	r3, [pc, #684]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f008 fa03 	bl	8008ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000abe:	4ba8      	ldr	r3, [pc, #672]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f008 f9fc 	bl	8008ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000acc:	4ba4      	ldr	r3, [pc, #656]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 f9f6 	bl	8008ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ad8:	4ba1      	ldr	r3, [pc, #644]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	2200      	movs	r2, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 f9f0 	bl	8008ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ae4:	4b9e      	ldr	r3, [pc, #632]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	2200      	movs	r2, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 f9e9 	bl	8008ec4 <HAL_GPIO_WritePin>

		break;
 8000af2:	e1cc      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000af4:	489b      	ldr	r0, [pc, #620]	; (8000d64 <HAL_UART_RxCpltCallback+0x6dc>)
 8000af6:	f015 fd67 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000afa:	4b99      	ldr	r3, [pc, #612]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	2201      	movs	r2, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f008 f9de 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000b08:	e1c1      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b0a:	4897      	ldr	r0, [pc, #604]	; (8000d68 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b0c:	f015 fd5c 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b10:	4b93      	ldr	r3, [pc, #588]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	2200      	movs	r2, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f008 f9d3 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000b1e:	e1b6      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b20:	4892      	ldr	r0, [pc, #584]	; (8000d6c <HAL_UART_RxCpltCallback+0x6e4>)
 8000b22:	f015 fd51 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b26:	4b8e      	ldr	r3, [pc, #568]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 f9c9 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000b32:	e1ac      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b34:	488e      	ldr	r0, [pc, #568]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b36:	f015 fd47 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b3a:	4b89      	ldr	r3, [pc, #548]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 f9bf 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000b46:	e1a2      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b48:	488a      	ldr	r0, [pc, #552]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b4a:	f015 fd3d 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b4e:	4b84      	ldr	r3, [pc, #528]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	2201      	movs	r2, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f008 f9b5 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000b5a:	e198      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b5c:	4886      	ldr	r0, [pc, #536]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b5e:	f015 fd33 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b62:	4b7f      	ldr	r3, [pc, #508]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	2200      	movs	r2, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f008 f9ab 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000b6e:	e18e      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b70:	4882      	ldr	r0, [pc, #520]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b72:	f015 fd29 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b76:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f008 f9a0 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000b84:	e183      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b86:	487e      	ldr	r0, [pc, #504]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b88:	f015 fd1e 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b8c:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	2200      	movs	r2, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 f995 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000b9a:	e178      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b9c:	4879      	ldr	r0, [pc, #484]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b9e:	f015 fd13 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ba2:	4b6f      	ldr	r3, [pc, #444]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f008 f98a 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000bb0:	e16d      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000bb2:	4875      	ldr	r0, [pc, #468]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bb4:	f015 fd08 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000bb8:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 f97f 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000bc6:	e162      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000bc8:	4870      	ldr	r0, [pc, #448]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000bca:	f015 fcfd 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f008 f974 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000bdc:	e157      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bde:	486c      	ldr	r0, [pc, #432]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000be0:	f015 fcf2 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000be4:	4b5e      	ldr	r3, [pc, #376]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	2200      	movs	r2, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 f969 	bl	8008ec4 <HAL_GPIO_WritePin>

		break;
 8000bf2:	e14c      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bf4:	4867      	ldr	r0, [pc, #412]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bf6:	f015 fce7 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bfa:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4618      	mov	r0, r3
 8000c02:	f008 f95f 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000c06:	e142      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c08:	4863      	ldr	r0, [pc, #396]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c0a:	f015 fcdd 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c0e:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	2200      	movs	r2, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f008 f955 	bl	8008ec4 <HAL_GPIO_WritePin>
		break;
 8000c1a:	e138      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c1c:	485f      	ldr	r0, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	f015 fcd3 	bl	80165c8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2320      	movs	r3, #32
 8000c28:	4a5d      	ldr	r2, [pc, #372]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	485d      	ldr	r0, [pc, #372]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c2e:	f004 fdb9 	bl	80057a4 <HAL_DAC_Start_DMA>
		break;
 8000c32:	e12c      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c34:	485c      	ldr	r0, [pc, #368]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c36:	f015 fcc7 	bl	80165c8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4859      	ldr	r0, [pc, #356]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c3e:	f004 fe71 	bl	8005924 <HAL_DAC_Stop_DMA>
		break;
 8000c42:	e124      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c44:	4859      	ldr	r0, [pc, #356]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000c46:	f015 fcbf 	bl	80165c8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	4858      	ldr	r0, [pc, #352]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000c4e:	f00d fd01 	bl	800e654 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c52:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c58:	4b57      	ldr	r3, [pc, #348]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
		break;
 8000c5e:	e116      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c60:	4856      	ldr	r0, [pc, #344]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000c62:	f015 fcb1 	bl	80165c8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c66:	210c      	movs	r1, #12
 8000c68:	4851      	ldr	r0, [pc, #324]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000c6a:	f00d fe4d 	bl	800e908 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c6e:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
		break;
 8000c74:	e10b      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c76:	4852      	ldr	r0, [pc, #328]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000c78:	f015 fca6 	bl	80165c8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4851      	ldr	r0, [pc, #324]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c80:	f00d fce8 	bl	800e654 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
		break;
 8000c90:	e0fd      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c92:	484f      	ldr	r0, [pc, #316]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c94:	f015 fc98 	bl	80165c8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	484a      	ldr	r0, [pc, #296]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c9c:	f00d fe34 	bl	800e908 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		break;
 8000ca6:	e0f2      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000ca8:	484a      	ldr	r0, [pc, #296]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000caa:	f015 fc8d 	bl	80165c8 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4849      	ldr	r0, [pc, #292]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cb2:	f00d fccf 	bl	800e654 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000cb6:	4b49      	ldr	r3, [pc, #292]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000cbc:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
		break;
 8000cc2:	e0e4      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000cc4:	4847      	ldr	r0, [pc, #284]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cc6:	f015 fc7f 	bl	80165c8 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4842      	ldr	r0, [pc, #264]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cce:	f00d fe1b 	bl	800e908 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
		break;
 8000cd8:	e0d9      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cda:	4843      	ldr	r0, [pc, #268]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cdc:	f015 fc74 	bl	80165c8 <puts>
		if (step < 17) {
 8000ce0:	4b42      	ldr	r3, [pc, #264]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	f200 80cb 	bhi.w	8000e80 <HAL_UART_RxCpltCallback+0x7f8>
			step += 2;
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cf4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	4827      	ldr	r0, [pc, #156]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d08:	f004 feaf 	bl	8005a6a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4825      	ldr	r0, [pc, #148]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d10:	f004 fcf0 	bl	80056f4 <HAL_DAC_Start>
		}
		break;
 8000d14:	e0b4      	b.n	8000e80 <HAL_UART_RxCpltCallback+0x7f8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000d16:	4836      	ldr	r0, [pc, #216]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000d18:	f015 fc56 	bl	80165c8 <puts>
		if (step > 3) {
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	f240 80af 	bls.w	8000e84 <HAL_UART_RxCpltCallback+0x7fc>
			step -= 2;
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d30:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d44:	f004 fe91 	bl	8005a6a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d4c:	f004 fcd2 	bl	80056f4 <HAL_DAC_Start>
		}
		break;
 8000d50:	e098      	b.n	8000e84 <HAL_UART_RxCpltCallback+0x7fc>
 8000d52:	bf00      	nop
 8000d54:	08016ddc 	.word	0x08016ddc
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	08016de8 	.word	0x08016de8
 8000d60:	58020800 	.word	0x58020800
 8000d64:	08016df4 	.word	0x08016df4
 8000d68:	08016e00 	.word	0x08016e00
 8000d6c:	08016e10 	.word	0x08016e10
 8000d70:	08016e1c 	.word	0x08016e1c
 8000d74:	08016e28 	.word	0x08016e28
 8000d78:	08016e34 	.word	0x08016e34
 8000d7c:	08016e44 	.word	0x08016e44
 8000d80:	08016e50 	.word	0x08016e50
 8000d84:	08016e5c 	.word	0x08016e5c
 8000d88:	08016e68 	.word	0x08016e68
 8000d8c:	08016e74 	.word	0x08016e74
 8000d90:	08016e84 	.word	0x08016e84
 8000d94:	08016e94 	.word	0x08016e94
 8000d98:	08016ea0 	.word	0x08016ea0
 8000d9c:	08016eb0 	.word	0x08016eb0
 8000da0:	24000010 	.word	0x24000010
 8000da4:	240002f4 	.word	0x240002f4
 8000da8:	08016ec0 	.word	0x08016ec0
 8000dac:	08016ed0 	.word	0x08016ed0
 8000db0:	24000554 	.word	0x24000554
 8000db4:	24000c53 	.word	0x24000c53
 8000db8:	24000c4e 	.word	0x24000c4e
 8000dbc:	08016ed8 	.word	0x08016ed8
 8000dc0:	08016ee4 	.word	0x08016ee4
 8000dc4:	24000508 	.word	0x24000508
 8000dc8:	24000c52 	.word	0x24000c52
 8000dcc:	24000c4c 	.word	0x24000c4c
 8000dd0:	08016eec 	.word	0x08016eec
 8000dd4:	08016ef4 	.word	0x08016ef4
 8000dd8:	240005a0 	.word	0x240005a0
 8000ddc:	24000c54 	.word	0x24000c54
 8000de0:	24000c50 	.word	0x24000c50
 8000de4:	08016efc 	.word	0x08016efc
 8000de8:	08016f04 	.word	0x08016f04
 8000dec:	2400000c 	.word	0x2400000c
 8000df0:	08016f0c 	.word	0x08016f0c
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000df4:	4828      	ldr	r0, [pc, #160]	; (8000e98 <HAL_UART_RxCpltCallback+0x810>)
 8000df6:	f015 fbe7 	bl	80165c8 <puts>
		if (cadence <= 50000) {
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d840      	bhi.n	8000e88 <HAL_UART_RxCpltCallback+0x800>
			cadence *= 2;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e0e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e1a:	e035      	b.n	8000e88 <HAL_UART_RxCpltCallback+0x800>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e1c:	4820      	ldr	r0, [pc, #128]	; (8000ea0 <HAL_UART_RxCpltCallback+0x818>)
 8000e1e:	f015 fbd3 	bl	80165c8 <puts>
		if (cadence >= 6250) {
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d92e      	bls.n	8000e8c <HAL_UART_RxCpltCallback+0x804>
			cadence /= 2;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e36:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e42:	e023      	b.n	8000e8c <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e44:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <HAL_UART_RxCpltCallback+0x81c>)
 8000e46:	f015 fbbf 	bl	80165c8 <puts>
		// TODO: Exit stop mode
		break;
 8000e4a:	e020      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e4c:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000e4e:	f015 fbbb 	bl	80165c8 <puts>
		// TODO: Enter stop mode
		break;
 8000e52:	e01c      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e54:	4815      	ldr	r0, [pc, #84]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e56:	f015 fbb7 	bl	80165c8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_UART_RxCpltCallback+0x828>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f013 fc14 	bl	801468c <xTaskResumeFromISR>
		break;
 8000e64:	e013      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e66:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <HAL_UART_RxCpltCallback+0x82c>)
 8000e68:	f015 fbae 	bl	80165c8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_UART_RxCpltCallback+0x830>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f013 fc0b 	bl	801468c <xTaskResumeFromISR>
		break;
 8000e76:	e00a      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	default: {
		printf("Unknown Command\n");
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <HAL_UART_RxCpltCallback+0x834>)
 8000e7a:	f015 fba5 	bl	80165c8 <puts>
		break;
 8000e7e:	e006      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e80:	bf00      	nop
 8000e82:	e004      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e84:	bf00      	nop
 8000e86:	e002      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e88:	bf00      	nop
 8000e8a:	e000      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e8c:	bf00      	nop
	}
	}
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08016f18 	.word	0x08016f18
 8000e9c:	24000008 	.word	0x24000008
 8000ea0:	08016f24 	.word	0x08016f24
 8000ea4:	08016f30 	.word	0x08016f30
 8000ea8:	08016f40 	.word	0x08016f40
 8000eac:	08016f50 	.word	0x08016f50
 8000eb0:	24000754 	.word	0x24000754
 8000eb4:	08016f5c 	.word	0x08016f5c
 8000eb8:	240009b4 	.word	0x240009b4
 8000ebc:	08016f68 	.word	0x08016f68

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f002 fe82 	bl	8003bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f8b4 	bl	8001034 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ecc:	f000 f92e 	bl	800112c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f000 fed6 	bl	8001c80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed4:	f000 fe9c 	bl	8001c10 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ed8:	f000 fdb0 	bl	8001a3c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000edc:	f000 fe4c 	bl	8001b78 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ee0:	f000 fb3a 	bl	8001558 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ee4:	f000 fc30 	bl	8001748 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ee8:	f000 fd32 	bl	8001950 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000eec:	f000 fc84 	bl	80017f8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000ef0:	f000 fa6e 	bl	80013d0 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000ef4:	f000 f94a 	bl	800118c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000ef8:	f000 fafc 	bl	80014f4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000efc:	f000 fbcc 	bl	8001698 <MX_SPI1_Init>
  MX_RTC_Init();
 8000f00:	f000 fb6c 	bl	80015dc <MX_RTC_Init>
  MX_TIM4_Init();
 8000f04:	f000 fdea 	bl	8001adc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#ifndef DAMY
	if (!handshake()) {
 8000f08:	f001 f8ae 	bl	8002068 <handshake>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <main+0x56>
		Error_Handler();
 8000f12:	f001 ff19 	bl	8002d48 <Error_Handler>
	}
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f16:	f011 fd6b 	bl	80129f0 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	2080      	movs	r0, #128	; 0x80
 8000f20:	f011 ff88 	bl	8012e34 <osMessageQueueNew>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <main+0x108>)
 8000f28:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f2a:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <main+0x10c>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4828      	ldr	r0, [pc, #160]	; (8000fd0 <main+0x110>)
 8000f30:	f011 fda8 	bl	8012a84 <osThreadNew>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <main+0x114>)
 8000f38:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f3a:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <main+0x118>)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4827      	ldr	r0, [pc, #156]	; (8000fdc <main+0x11c>)
 8000f40:	f011 fda0 	bl	8012a84 <osThreadNew>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <main+0x120>)
 8000f48:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f4a:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <main+0x124>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <main+0x128>)
 8000f50:	f011 fd98 	bl	8012a84 <osThreadNew>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a25      	ldr	r2, [pc, #148]	; (8000fec <main+0x12c>)
 8000f58:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f5a:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <main+0x130>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4825      	ldr	r0, [pc, #148]	; (8000ff4 <main+0x134>)
 8000f60:	f011 fd90 	bl	8012a84 <osThreadNew>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <main+0x138>)
 8000f68:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f6a:	4a24      	ldr	r2, [pc, #144]	; (8000ffc <main+0x13c>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4824      	ldr	r0, [pc, #144]	; (8001000 <main+0x140>)
 8000f70:	f011 fd88 	bl	8012a84 <osThreadNew>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a23      	ldr	r2, [pc, #140]	; (8001004 <main+0x144>)
 8000f78:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f7a:	4a23      	ldr	r2, [pc, #140]	; (8001008 <main+0x148>)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4823      	ldr	r0, [pc, #140]	; (800100c <main+0x14c>)
 8000f80:	f011 fd80 	bl	8012a84 <osThreadNew>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <main+0x150>)
 8000f88:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f8a:	4a22      	ldr	r2, [pc, #136]	; (8001014 <main+0x154>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4822      	ldr	r0, [pc, #136]	; (8001018 <main+0x158>)
 8000f90:	f011 fd78 	bl	8012a84 <osThreadNew>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a21      	ldr	r2, [pc, #132]	; (800101c <main+0x15c>)
 8000f98:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000f9a:	4a21      	ldr	r2, [pc, #132]	; (8001020 <main+0x160>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4821      	ldr	r0, [pc, #132]	; (8001024 <main+0x164>)
 8000fa0:	f011 fd70 	bl	8012a84 <osThreadNew>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a20      	ldr	r2, [pc, #128]	; (8001028 <main+0x168>)
 8000fa8:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f011 fe58 	bl	8012c60 <osEventFlagsNew>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <main+0x16c>)
 8000fb4:	6013      	str	r3, [r2, #0]
	system_setup();
 8000fb6:	f001 f8e5 	bl	8002184 <system_setup>
	printf("Starting kernal...\n");
 8000fba:	481d      	ldr	r0, [pc, #116]	; (8001030 <main+0x170>)
 8000fbc:	f015 fb04 	bl	80165c8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc0:	f011 fd3a 	bl	8012a38 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fc4:	e7fe      	b.n	8000fc4 <main+0x104>
 8000fc6:	bf00      	nop
 8000fc8:	24000c3c 	.word	0x24000c3c
 8000fcc:	08016fc4 	.word	0x08016fc4
 8000fd0:	08002941 	.word	0x08002941
 8000fd4:	24000744 	.word	0x24000744
 8000fd8:	08016fe8 	.word	0x08016fe8
 8000fdc:	08002985 	.word	0x08002985
 8000fe0:	24000748 	.word	0x24000748
 8000fe4:	0801700c 	.word	0x0801700c
 8000fe8:	080029c9 	.word	0x080029c9
 8000fec:	2400074c 	.word	0x2400074c
 8000ff0:	08017030 	.word	0x08017030
 8000ff4:	08002a0d 	.word	0x08002a0d
 8000ff8:	24000750 	.word	0x24000750
 8000ffc:	08017054 	.word	0x08017054
 8001000:	08002a31 	.word	0x08002a31
 8001004:	24000754 	.word	0x24000754
 8001008:	08017078 	.word	0x08017078
 800100c:	08002ad9 	.word	0x08002ad9
 8001010:	240009b4 	.word	0x240009b4
 8001014:	0801709c 	.word	0x0801709c
 8001018:	08002b81 	.word	0x08002b81
 800101c:	24000c14 	.word	0x24000c14
 8001020:	080170c0 	.word	0x080170c0
 8001024:	08002c39 	.word	0x08002c39
 8001028:	24000c18 	.word	0x24000c18
 800102c:	24000c58 	.word	0x24000c58
 8001030:	08016f78 	.word	0x08016f78

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09c      	sub	sp, #112	; 0x70
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	224c      	movs	r2, #76	; 0x4c
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f015 f96a 	bl	801631c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f015 f964 	bl	801631c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001054:	2002      	movs	r0, #2
 8001056:	f008 fd5b 	bl	8009b10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <SystemClock_Config+0xf0>)
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	4a30      	ldr	r2, [pc, #192]	; (8001124 <SystemClock_Config+0xf0>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	62d3      	str	r3, [r2, #44]	; 0x2c
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <SystemClock_Config+0xf0>)
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <SystemClock_Config+0xf4>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800107c:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <SystemClock_Config+0xf4>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <SystemClock_Config+0xf4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001090:	bf00      	nop
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <SystemClock_Config+0xf4>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800109e:	d1f8      	bne.n	8001092 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	2302      	movs	r3, #2
 80010b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80010b6:	2320      	movs	r3, #32
 80010b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010be:	2304      	movs	r3, #4
 80010c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010c6:	2308      	movs	r3, #8
 80010c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f008 fd54 	bl	8009b84 <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010e2:	f001 fe31 	bl	8002d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	233f      	movs	r3, #63	; 0x3f
 80010e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2303      	movs	r3, #3
 80010ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2101      	movs	r1, #1
 800110a:	4618      	mov	r0, r3
 800110c:	f009 f994 	bl	800a438 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001116:	f001 fe17 	bl	8002d48 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3770      	adds	r7, #112	; 0x70
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	58000400 	.word	0x58000400
 8001128:	58024800 	.word	0x58024800

0800112c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0b0      	sub	sp, #192	; 0xc0
 8001130:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	22c0      	movs	r2, #192	; 0xc0
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f015 f8ef 	bl	801631c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800113e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800114a:	2304      	movs	r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800114e:	2320      	movs	r3, #32
 8001150:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001152:	2308      	movs	r3, #8
 8001154:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001156:	2304      	movs	r3, #4
 8001158:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4618      	mov	r0, r3
 8001174:	f009 fd2e 	bl	800abd4 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800117e:	f001 fde3 	bl	8002d48 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	37c0      	adds	r7, #192	; 0xc0
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011b0:	4b7a      	ldr	r3, [pc, #488]	; (800139c <MX_ADC1_Init+0x210>)
 80011b2:	4a7b      	ldr	r2, [pc, #492]	; (80013a0 <MX_ADC1_Init+0x214>)
 80011b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80011b6:	4b79      	ldr	r3, [pc, #484]	; (800139c <MX_ADC1_Init+0x210>)
 80011b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011be:	4b77      	ldr	r3, [pc, #476]	; (800139c <MX_ADC1_Init+0x210>)
 80011c0:	2208      	movs	r2, #8
 80011c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011c4:	4b75      	ldr	r3, [pc, #468]	; (800139c <MX_ADC1_Init+0x210>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ca:	4b74      	ldr	r3, [pc, #464]	; (800139c <MX_ADC1_Init+0x210>)
 80011cc:	2204      	movs	r2, #4
 80011ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011d0:	4b72      	ldr	r3, [pc, #456]	; (800139c <MX_ADC1_Init+0x210>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011d6:	4b71      	ldr	r3, [pc, #452]	; (800139c <MX_ADC1_Init+0x210>)
 80011d8:	2201      	movs	r2, #1
 80011da:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011dc:	4b6f      	ldr	r3, [pc, #444]	; (800139c <MX_ADC1_Init+0x210>)
 80011de:	220b      	movs	r2, #11
 80011e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e2:	4b6e      	ldr	r3, [pc, #440]	; (800139c <MX_ADC1_Init+0x210>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b6c      	ldr	r3, [pc, #432]	; (800139c <MX_ADC1_Init+0x210>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ee:	4b6b      	ldr	r3, [pc, #428]	; (800139c <MX_ADC1_Init+0x210>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011f4:	4b69      	ldr	r3, [pc, #420]	; (800139c <MX_ADC1_Init+0x210>)
 80011f6:	2203      	movs	r2, #3
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011fa:	4b68      	ldr	r3, [pc, #416]	; (800139c <MX_ADC1_Init+0x210>)
 80011fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001200:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001202:	4b66      	ldr	r3, [pc, #408]	; (800139c <MX_ADC1_Init+0x210>)
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <MX_ADC1_Init+0x210>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001210:	4862      	ldr	r0, [pc, #392]	; (800139c <MX_ADC1_Init+0x210>)
 8001212:	f002 ff67 	bl	80040e4 <HAL_ADC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800121c:	f001 fd94 	bl	8002d48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	485c      	ldr	r0, [pc, #368]	; (800139c <MX_ADC1_Init+0x210>)
 800122c:	f004 f882 	bl	8005334 <HAL_ADCEx_MultiModeConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001236:	f001 fd87 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800123a:	4b5a      	ldr	r3, [pc, #360]	; (80013a4 <MX_ADC1_Init+0x218>)
 800123c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123e:	2306      	movs	r3, #6
 8001240:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001242:	2307      	movs	r3, #7
 8001244:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001246:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800124a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124c:	2304      	movs	r3, #4
 800124e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	484f      	ldr	r0, [pc, #316]	; (800139c <MX_ADC1_Init+0x210>)
 800125e:	f003 f9c5 	bl	80045ec <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001268:	f001 fd6e 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800126c:	4b4e      	ldr	r3, [pc, #312]	; (80013a8 <MX_ADC1_Init+0x21c>)
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001270:	230c      	movs	r3, #12
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	4848      	ldr	r0, [pc, #288]	; (800139c <MX_ADC1_Init+0x210>)
 800127a:	f003 f9b7 	bl	80045ec <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001284:	f001 fd60 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001288:	4b48      	ldr	r3, [pc, #288]	; (80013ac <MX_ADC1_Init+0x220>)
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800128c:	2312      	movs	r3, #18
 800128e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	4841      	ldr	r0, [pc, #260]	; (800139c <MX_ADC1_Init+0x210>)
 8001296:	f003 f9a9 	bl	80045ec <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012a0:	f001 fd52 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012a4:	4b42      	ldr	r3, [pc, #264]	; (80013b0 <MX_ADC1_Init+0x224>)
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012a8:	2318      	movs	r3, #24
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	483a      	ldr	r0, [pc, #232]	; (800139c <MX_ADC1_Init+0x210>)
 80012b2:	f003 f99b 	bl	80045ec <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80012bc:	f001 fd44 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012c0:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <MX_ADC1_Init+0x228>)
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	4619      	mov	r1, r3
 80012ce:	4833      	ldr	r0, [pc, #204]	; (800139c <MX_ADC1_Init+0x210>)
 80012d0:	f003 f98c 	bl	80045ec <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012da:	f001 fd35 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <MX_ADC1_Init+0x22c>)
 80012e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012e2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	482b      	ldr	r0, [pc, #172]	; (800139c <MX_ADC1_Init+0x210>)
 80012ee:	f003 f97d 	bl	80045ec <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012f8:	f001 fd26 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012fc:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <MX_ADC1_Init+0x230>)
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001300:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001304:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4824      	ldr	r0, [pc, #144]	; (800139c <MX_ADC1_Init+0x210>)
 800130c:	f003 f96e 	bl	80045ec <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001316:	f001 fd17 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <MX_ADC1_Init+0x234>)
 800131c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800131e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	481c      	ldr	r0, [pc, #112]	; (800139c <MX_ADC1_Init+0x210>)
 800132a:	f003 f95f 	bl	80045ec <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001334:	f001 fd08 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <MX_ADC1_Init+0x238>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800133c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001340:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	4619      	mov	r1, r3
 8001346:	4815      	ldr	r0, [pc, #84]	; (800139c <MX_ADC1_Init+0x210>)
 8001348:	f003 f950 	bl	80045ec <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001352:	f001 fcf9 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_ADC1_Init+0x23c>)
 8001358:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800135a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_ADC1_Init+0x210>)
 8001366:	f003 f941 	bl	80045ec <HAL_ADC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001370:	f001 fcea 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_ADC1_Init+0x240>)
 8001376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001378:	f240 2306 	movw	r3, #518	; 0x206
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_ADC1_Init+0x210>)
 8001384:	f003 f932 	bl	80045ec <HAL_ADC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800138e:	f001 fcdb 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2400013c 	.word	0x2400013c
 80013a0:	40022000 	.word	0x40022000
 80013a4:	0c900008 	.word	0x0c900008
 80013a8:	10c00010 	.word	0x10c00010
 80013ac:	14f00020 	.word	0x14f00020
 80013b0:	1d500080 	.word	0x1d500080
 80013b4:	21800100 	.word	0x21800100
 80013b8:	25b00200 	.word	0x25b00200
 80013bc:	2a000400 	.word	0x2a000400
 80013c0:	2e300800 	.word	0x2e300800
 80013c4:	3ac04000 	.word	0x3ac04000
 80013c8:	3ef08000 	.word	0x3ef08000
 80013cc:	47520000 	.word	0x47520000

080013d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <MX_ADC3_Init+0x110>)
 80013ea:	4a3e      	ldr	r2, [pc, #248]	; (80014e4 <MX_ADC3_Init+0x114>)
 80013ec:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013ee:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <MX_ADC3_Init+0x110>)
 80013f0:	2208      	movs	r2, #8
 80013f2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013f4:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <MX_ADC3_Init+0x110>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_ADC3_Init+0x110>)
 80013fc:	2204      	movs	r2, #4
 80013fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001400:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001402:	2200      	movs	r2, #0
 8001404:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001408:	2201      	movs	r2, #1
 800140a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <MX_ADC3_Init+0x110>)
 800140e:	2204      	movs	r2, #4
 8001410:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001414:	2200      	movs	r2, #0
 8001416:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <MX_ADC3_Init+0x110>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001420:	2200      	movs	r2, #0
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001426:	2203      	movs	r2, #3
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_ADC3_Init+0x110>)
 800142c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <MX_ADC3_Init+0x110>)
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001440:	4827      	ldr	r0, [pc, #156]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001442:	f002 fe4f 	bl	80040e4 <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800144c:	f001 fc7c 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <MX_ADC3_Init+0x118>)
 8001452:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001454:	2306      	movs	r3, #6
 8001456:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001458:	2307      	movs	r3, #7
 800145a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800145c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001460:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001462:	2304      	movs	r3, #4
 8001464:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	481b      	ldr	r0, [pc, #108]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001474:	f003 f8ba 	bl	80045ec <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800147e:	f001 fc63 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_ADC3_Init+0x11c>)
 8001484:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001486:	230c      	movs	r3, #12
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4814      	ldr	r0, [pc, #80]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001490:	f003 f8ac 	bl	80045ec <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800149a:	f001 fc55 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800149e:	2301      	movs	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014a2:	2312      	movs	r3, #18
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_ADC3_Init+0x110>)
 80014ac:	f003 f89e 	bl	80045ec <HAL_ADC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80014b6:	f001 fc47 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <MX_ADC3_Init+0x120>)
 80014bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014be:	2318      	movs	r3, #24
 80014c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MX_ADC3_Init+0x110>)
 80014c8:	f003 f890 	bl	80045ec <HAL_ADC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014d2:	f001 fc39 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	240001a0 	.word	0x240001a0
 80014e4:	58026000 	.word	0x58026000
 80014e8:	cb840000 	.word	0xcb840000
 80014ec:	cfb80000 	.word	0xcfb80000
 80014f0:	04300002 	.word	0x04300002

080014f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2224      	movs	r2, #36	; 0x24
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f014 ff0b 	bl	801631c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_DAC1_Init+0x5c>)
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_DAC1_Init+0x60>)
 800150a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800150c:	4810      	ldr	r0, [pc, #64]	; (8001550 <MX_DAC1_Init+0x5c>)
 800150e:	f004 f8cf 	bl	80056b0 <HAL_DAC_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001518:	f001 fc16 	bl	8002d48 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001520:	230a      	movs	r3, #10
 8001522:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001528:	2301      	movs	r3, #1
 800152a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_DAC1_Init+0x5c>)
 8001538:	f004 faea 	bl	8005b10 <HAL_DAC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001542:	f001 fc01 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	240002f4 	.word	0x240002f4
 8001554:	40007400 	.word	0x40007400

08001558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_I2C1_Init+0x78>)
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <MX_I2C1_Init+0x7c>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <MX_I2C1_Init+0x80>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_I2C1_Init+0x78>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001570:	2201      	movs	r2, #1
 8001572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_I2C1_Init+0x78>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_I2C1_Init+0x78>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001594:	f007 fcb0 	bl	8008ef8 <HAL_I2C_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800159e:	f001 fbd3 	bl	8002d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a2:	2100      	movs	r1, #0
 80015a4:	480a      	ldr	r0, [pc, #40]	; (80015d0 <MX_I2C1_Init+0x78>)
 80015a6:	f008 f9f7 	bl	8009998 <HAL_I2CEx_ConfigAnalogFilter>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015b0:	f001 fbca 	bl	8002d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b4:	2100      	movs	r1, #0
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_I2C1_Init+0x78>)
 80015b8:	f008 fa39 	bl	8009a2e <HAL_I2CEx_ConfigDigitalFilter>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015c2:	f001 fbc1 	bl	8002d48 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f008 fa7e 	bl	8009ac8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	24000380 	.word	0x24000380
 80015d4:	40005400 	.word	0x40005400
 80015d8:	0020081f 	.word	0x0020081f

080015dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015f0:	2300      	movs	r3, #0
 80015f2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_RTC_Init+0xb4>)
 80015f6:	4a27      	ldr	r2, [pc, #156]	; (8001694 <MX_RTC_Init+0xb8>)
 80015f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <MX_RTC_Init+0xb4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001600:	4b23      	ldr	r3, [pc, #140]	; (8001690 <MX_RTC_Init+0xb4>)
 8001602:	2263      	movs	r2, #99	; 0x63
 8001604:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_RTC_Init+0xb4>)
 8001608:	f242 720f 	movw	r2, #9999	; 0x270f
 800160c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <MX_RTC_Init+0xb4>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_RTC_Init+0xb4>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_RTC_Init+0xb4>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_RTC_Init+0xb4>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001626:	481a      	ldr	r0, [pc, #104]	; (8001690 <MX_RTC_Init+0xb4>)
 8001628:	f00b ffd2 	bl	800d5d0 <HAL_RTC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001632:	f001 fb89 	bl	8002d48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001636:	2300      	movs	r3, #0
 8001638:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800163a:	2300      	movs	r3, #0
 800163c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800163e:	2300      	movs	r3, #0
 8001640:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2201      	movs	r2, #1
 800164e:	4619      	mov	r1, r3
 8001650:	480f      	ldr	r0, [pc, #60]	; (8001690 <MX_RTC_Init+0xb4>)
 8001652:	f00c f83f 	bl	800d6d4 <HAL_RTC_SetTime>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800165c:	f001 fb74 	bl	8002d48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001660:	2301      	movs	r3, #1
 8001662:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001664:	2301      	movs	r3, #1
 8001666:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001668:	2301      	movs	r3, #1
 800166a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800166c:	2300      	movs	r3, #0
 800166e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	2201      	movs	r2, #1
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_RTC_Init+0xb4>)
 8001678:	f00c f926 	bl	800d8c8 <HAL_RTC_SetDate>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001682:	f001 fb61 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	240003d4 	.word	0x240003d4
 8001694:	58004000 	.word	0x58004000

08001698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <MX_SPI1_Init+0xa8>)
 800169e:	4a29      	ldr	r2, [pc, #164]	; (8001744 <MX_SPI1_Init+0xac>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016b4:	220f      	movs	r2, #15
 80016b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016ce:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_SPI1_Init+0xa8>)
 8001702:	2200      	movs	r2, #0
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_SPI1_Init+0xa8>)
 8001708:	2200      	movs	r2, #0
 800170a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_SPI1_Init+0xa8>)
 800170e:	2200      	movs	r2, #0
 8001710:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_SPI1_Init+0xa8>)
 8001714:	2200      	movs	r2, #0
 8001716:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_SPI1_Init+0xa8>)
 800171a:	2200      	movs	r2, #0
 800171c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_SPI1_Init+0xa8>)
 8001720:	2200      	movs	r2, #0
 8001722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_SPI1_Init+0xa8>)
 8001726:	2200      	movs	r2, #0
 8001728:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_SPI1_Init+0xa8>)
 800172c:	f00c fa72 	bl	800dc14 <HAL_SPI_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001736:	f001 fb07 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	240003f8 	.word	0x240003f8
 8001744:	40013000 	.word	0x40013000

08001748 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800174e:	4a29      	ldr	r2, [pc, #164]	; (80017f4 <MX_SPI2_Init+0xac>)
 8001750:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001754:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001758:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800175c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001760:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001764:	220f      	movs	r2, #15
 8001766:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001776:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800177a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800177e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001782:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017dc:	f00c fa1a 	bl	800dc14 <HAL_SPI_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017e6:	f001 faaf 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	24000480 	.word	0x24000480
 80017f4:	40003800 	.word	0x40003800

080017f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b09a      	sub	sp, #104	; 0x68
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
 8001828:	615a      	str	r2, [r3, #20]
 800182a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	222c      	movs	r2, #44	; 0x2c
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f014 fd72 	bl	801631c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <MX_TIM1_Init+0x150>)
 800183a:	4a44      	ldr	r2, [pc, #272]	; (800194c <MX_TIM1_Init+0x154>)
 800183c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800183e:	4b42      	ldr	r3, [pc, #264]	; (8001948 <MX_TIM1_Init+0x150>)
 8001840:	2231      	movs	r2, #49	; 0x31
 8001842:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001844:	4b40      	ldr	r3, [pc, #256]	; (8001948 <MX_TIM1_Init+0x150>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <MX_TIM1_Init+0x150>)
 800184c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001850:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <MX_TIM1_Init+0x150>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001858:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <MX_TIM1_Init+0x150>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185e:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <MX_TIM1_Init+0x150>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001864:	4838      	ldr	r0, [pc, #224]	; (8001948 <MX_TIM1_Init+0x150>)
 8001866:	f00c fe26 	bl	800e4b6 <HAL_TIM_Base_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001870:	f001 fa6a 	bl	8002d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001878:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800187a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800187e:	4619      	mov	r1, r3
 8001880:	4831      	ldr	r0, [pc, #196]	; (8001948 <MX_TIM1_Init+0x150>)
 8001882:	f00d fba1 	bl	800efc8 <HAL_TIM_ConfigClockSource>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800188c:	f001 fa5c 	bl	8002d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001890:	482d      	ldr	r0, [pc, #180]	; (8001948 <MX_TIM1_Init+0x150>)
 8001892:	f00d f91d 	bl	800ead0 <HAL_TIM_PWM_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800189c:	f001 fa54 	bl	8002d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b0:	4619      	mov	r1, r3
 80018b2:	4825      	ldr	r0, [pc, #148]	; (8001948 <MX_TIM1_Init+0x150>)
 80018b4:	f00e f8de 	bl	800fa74 <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018be:	f001 fa43 	bl	8002d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c2:	2360      	movs	r3, #96	; 0x60
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ce:	2300      	movs	r3, #0
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4818      	ldr	r0, [pc, #96]	; (8001948 <MX_TIM1_Init+0x150>)
 80018e8:	f00d fa5a 	bl	800eda0 <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018f2:	f001 fa29 	bl	8002d48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800190a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001918:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <MX_TIM1_Init+0x150>)
 800192c:	f00e f930 	bl	800fb90 <HAL_TIMEx_ConfigBreakDeadTime>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001936:	f001 fa07 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <MX_TIM1_Init+0x150>)
 800193c:	f001 fdb4 	bl	80034a8 <HAL_TIM_MspPostInit>

}
 8001940:	bf00      	nop
 8001942:	3768      	adds	r7, #104	; 0x68
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	24000508 	.word	0x24000508
 800194c:	40010000 	.word	0x40010000

08001950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08e      	sub	sp, #56	; 0x38
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001970:	463b      	mov	r3, r7
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001988:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <MX_TIM2_Init+0xe8>)
 800198c:	2231      	movs	r2, #49	; 0x31
 800198e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001998:	f640 4234 	movw	r2, #3124	; 0xc34
 800199c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019aa:	4823      	ldr	r0, [pc, #140]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019ac:	f00c fd83 	bl	800e4b6 <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019b6:	f001 f9c7 	bl	8002d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c4:	4619      	mov	r1, r3
 80019c6:	481c      	ldr	r0, [pc, #112]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019c8:	f00d fafe 	bl	800efc8 <HAL_TIM_ConfigClockSource>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019d2:	f001 f9b9 	bl	8002d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019d6:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019d8:	f00d f87a 	bl	800ead0 <HAL_TIM_PWM_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019e2:	f001 f9b1 	bl	8002d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019e6:	2320      	movs	r3, #32
 80019e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4810      	ldr	r0, [pc, #64]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019f6:	f00e f83d 	bl	800fa74 <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a00:	f001 f9a2 	bl	8002d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a04:	2360      	movs	r3, #96	; 0x60
 8001a06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	220c      	movs	r2, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001a1c:	f00d f9c0 	bl	800eda0 <HAL_TIM_PWM_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a26:	f001 f98f 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001a2c:	f001 fd3c 	bl	80034a8 <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3738      	adds	r7, #56	; 0x38
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000554 	.word	0x24000554

08001a3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <MX_TIM3_Init+0x9c>)
 8001a5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a62:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a70:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a84:	f00c fd17 	bl	800e4b6 <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a8e:	f001 f95b 	bl	8002d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001aa0:	f00d fa92 	bl	800efc8 <HAL_TIM_ConfigClockSource>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001aaa:	f001 f94d 	bl	8002d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001abc:	f00d ffda 	bl	800fa74 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001ac6:	f001 f93f 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	240005a0 	.word	0x240005a0
 8001ad8:	40000400 	.word	0x40000400

08001adc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <MX_TIM4_Init+0x98>)
 8001afe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b02:	2263      	movs	r2, #99	; 0x63
 8001b04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b0e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b22:	f00c fcc8 	bl	800e4b6 <HAL_TIM_Base_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b2c:	f001 f90c 	bl	8002d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480c      	ldr	r0, [pc, #48]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b3e:	f00d fa43 	bl	800efc8 <HAL_TIM_ConfigClockSource>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b48:	f001 f8fe 	bl	8002d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b5a:	f00d ff8b 	bl	800fa74 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b64:	f001 f8f0 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	240005ec 	.word	0x240005ec
 8001b74:	40000800 	.word	0x40000800

08001b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b7e:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <MX_USART1_UART_Init+0x94>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b84:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bc0:	4811      	ldr	r0, [pc, #68]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bc2:	f00e f881 	bl	800fcc8 <HAL_UART_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bcc:	f001 f8bc 	bl	8002d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	480d      	ldr	r0, [pc, #52]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bd4:	f010 fdfd 	bl	80127d2 <HAL_UARTEx_SetTxFifoThreshold>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bde:	f001 f8b3 	bl	8002d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be2:	2100      	movs	r1, #0
 8001be4:	4808      	ldr	r0, [pc, #32]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001be6:	f010 fe32 	bl	801284e <HAL_UARTEx_SetRxFifoThreshold>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bf0:	f001 f8aa 	bl	8002d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bf6:	f010 fdb3 	bl	8012760 <HAL_UARTEx_DisableFifoMode>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c00:	f001 f8a2 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	24000638 	.word	0x24000638
 8001c0c:	40011000 	.word	0x40011000

08001c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_DMA_Init+0x6c>)
 8001c18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c1c:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <MX_DMA_Init+0x6c>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_DMA_Init+0x6c>)
 8001c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2105      	movs	r1, #5
 8001c38:	200b      	movs	r0, #11
 8001c3a:	f003 fd11 	bl	8005660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c3e:	200b      	movs	r0, #11
 8001c40:	f003 fd28 	bl	8005694 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2105      	movs	r1, #5
 8001c48:	200c      	movs	r0, #12
 8001c4a:	f003 fd09 	bl	8005660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c4e:	200c      	movs	r0, #12
 8001c50:	f003 fd20 	bl	8005694 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2105      	movs	r1, #5
 8001c58:	200d      	movs	r0, #13
 8001c5a:	f003 fd01 	bl	8005660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c5e:	200d      	movs	r0, #13
 8001c60:	f003 fd18 	bl	8005694 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2105      	movs	r1, #5
 8001c68:	2010      	movs	r0, #16
 8001c6a:	f003 fcf9 	bl	8005660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c6e:	2010      	movs	r0, #16
 8001c70:	f003 fd10 	bl	8005694 <HAL_NVIC_EnableIRQ>

}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	58024400 	.word	0x58024400

08001c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	4a32      	ldr	r2, [pc, #200]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cba:	4a2b      	ldr	r2, [pc, #172]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001d14:	4815      	ldr	r0, [pc, #84]	; (8001d6c <MX_GPIO_Init+0xec>)
 8001d16:	f007 f8d5 	bl	8008ec4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2164      	movs	r1, #100	; 0x64
 8001d1e:	4814      	ldr	r0, [pc, #80]	; (8001d70 <MX_GPIO_Init+0xf0>)
 8001d20:	f007 f8d0 	bl	8008ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d24:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <MX_GPIO_Init+0xec>)
 8001d3e:	f006 fef9 	bl	8008b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_GPIO_Init+0xf0>)
 8001d5a:	f006 feeb 	bl	8008b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	58020800 	.word	0x58020800
 8001d70:	58020400 	.word	0x58020400

08001d74 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	b299      	uxth	r1, r3
 8001d86:	f107 0208 	add.w	r2, r7, #8
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2301      	movs	r3, #1
 8001d92:	4817      	ldr	r0, [pc, #92]	; (8001df0 <poll_i2c_sensor+0x7c>)
 8001d94:	f007 f94c 	bl	8009030 <HAL_I2C_Master_Transmit>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001d9c:	7b7b      	ldrb	r3, [r7, #13]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001da2:	4814      	ldr	r0, [pc, #80]	; (8001df4 <poll_i2c_sensor+0x80>)
 8001da4:	f014 fc10 	bl	80165c8 <puts>
 8001da8:	e01c      	b.n	8001de4 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	b299      	uxth	r1, r3
 8001dae:	f107 0208 	add.w	r2, r7, #8
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2302      	movs	r3, #2
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <poll_i2c_sensor+0x7c>)
 8001dbc:	f007 fa50 	bl	8009260 <HAL_I2C_Master_Receive>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001dc4:	7b7b      	ldrb	r3, [r7, #13]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <poll_i2c_sensor+0x84>)
 8001dcc:	f014 fbfc 	bl	80165c8 <puts>
 8001dd0:	e008      	b.n	8001de4 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001dd2:	7a3b      	ldrb	r3, [r7, #8]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001dd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ddc:	7a7a      	ldrb	r2, [r7, #9]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	10db      	asrs	r3, r3, #3
 8001de2:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001de4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	24000380 	.word	0x24000380
 8001df4:	08016f8c 	.word	0x08016f8c
 8001df8:	08016f9c 	.word	0x08016f9c

08001dfc <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001e04:	f107 010c 	add.w	r1, r7, #12
 8001e08:	2301      	movs	r3, #1
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <receive_pmt_spi+0x44>)
 8001e0e:	f00c f825 	bl	800de5c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e16:	7b7b      	ldrb	r3, [r7, #13]
 8001e18:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <receive_pmt_spi+0x44>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <receive_pmt_spi+0x44>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e28:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7bba      	ldrb	r2, [r7, #14]
 8001e2e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3301      	adds	r3, #1
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	701a      	strb	r2, [r3, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	240003f8 	.word	0x240003f8

08001e44 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001e4c:	f107 010c 	add.w	r1, r7, #12
 8001e50:	2364      	movs	r3, #100	; 0x64
 8001e52:	2201      	movs	r2, #1
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <receive_erpa_spi+0x44>)
 8001e56:	f00c f801 	bl	800de5c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e5e:	7b7b      	ldrb	r3, [r7, #13]
 8001e60:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <receive_erpa_spi+0x44>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <receive_erpa_spi+0x44>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e70:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7bba      	ldrb	r2, [r7, #14]
 8001e76:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	24000480 	.word	0x24000480

08001e8c <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <receive_erpa_adc+0x30>)
 8001e96:	885b      	ldrh	r3, [r3, #2]
 8001e98:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <receive_erpa_adc+0x30>)
 8001e9c:	895b      	ldrh	r3, [r3, #10]
 8001e9e:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	89fa      	ldrh	r2, [r7, #14]
 8001ea4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	89ba      	ldrh	r2, [r7, #12]
 8001eac:	801a      	strh	r2, [r3, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	24000ca0 	.word	0x24000ca0

08001ec0 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001ec8:	2390      	movs	r3, #144	; 0x90
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff52 	bl	8001d74 <poll_i2c_sensor>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001ed4:	2394      	movs	r3, #148	; 0x94
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff4c 	bl	8001d74 <poll_i2c_sensor>
 8001edc:	4603      	mov	r3, r0
 8001ede:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001ee0:	2392      	movs	r3, #146	; 0x92
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff46 	bl	8001d74 <poll_i2c_sensor>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001eec:	2396      	movs	r3, #150	; 0x96
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff40 	bl	8001d74 <poll_i2c_sensor>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	89fa      	ldrh	r2, [r7, #14]
 8001efc:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3302      	adds	r3, #2
 8001f02:	89ba      	ldrh	r2, [r7, #12]
 8001f04:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	897a      	ldrh	r2, [r7, #10]
 8001f0c:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3306      	adds	r3, #6
 8001f12:	893a      	ldrh	r2, [r7, #8]
 8001f14:	801a      	strh	r2, [r3, #0]
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <receive_hk_adc1+0x90>)
 8001f2a:	8a9b      	ldrh	r3, [r3, #20]
 8001f2c:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <receive_hk_adc1+0x90>)
 8001f30:	8a1b      	ldrh	r3, [r3, #16]
 8001f32:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <receive_hk_adc1+0x90>)
 8001f36:	899b      	ldrh	r3, [r3, #12]
 8001f38:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <receive_hk_adc1+0x90>)
 8001f3c:	8a5b      	ldrh	r3, [r3, #18]
 8001f3e:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <receive_hk_adc1+0x90>)
 8001f42:	889b      	ldrh	r3, [r3, #4]
 8001f44:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <receive_hk_adc1+0x90>)
 8001f48:	88db      	ldrh	r3, [r3, #6]
 8001f4a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <receive_hk_adc1+0x90>)
 8001f4e:	89db      	ldrh	r3, [r3, #14]
 8001f50:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <receive_hk_adc1+0x90>)
 8001f54:	891b      	ldrh	r3, [r3, #8]
 8001f56:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <receive_hk_adc1+0x90>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	8bfa      	ldrh	r2, [r7, #30]
 8001f62:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3302      	adds	r3, #2
 8001f68:	8bba      	ldrh	r2, [r7, #28]
 8001f6a:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	8b7a      	ldrh	r2, [r7, #26]
 8001f72:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3306      	adds	r3, #6
 8001f78:	8b3a      	ldrh	r2, [r7, #24]
 8001f7a:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3308      	adds	r3, #8
 8001f80:	8afa      	ldrh	r2, [r7, #22]
 8001f82:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	330a      	adds	r3, #10
 8001f88:	8aba      	ldrh	r2, [r7, #20]
 8001f8a:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	330c      	adds	r3, #12
 8001f90:	8a7a      	ldrh	r2, [r7, #18]
 8001f92:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	330e      	adds	r3, #14
 8001f98:	8a3a      	ldrh	r2, [r7, #16]
 8001f9a:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3310      	adds	r3, #16
 8001fa0:	89fa      	ldrh	r2, [r7, #14]
 8001fa2:	801a      	strh	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3724      	adds	r7, #36	; 0x24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	24000ca0 	.word	0x24000ca0

08001fb4 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <receive_hk_adc3+0x4c>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <receive_hk_adc3+0x4c>)
 8001fc4:	885b      	ldrh	r3, [r3, #2]
 8001fc6:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <receive_hk_adc3+0x4c>)
 8001fca:	889b      	ldrh	r3, [r3, #4]
 8001fcc:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <receive_hk_adc3+0x4c>)
 8001fd0:	88db      	ldrh	r3, [r3, #6]
 8001fd2:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	89fa      	ldrh	r2, [r7, #14]
 8001fd8:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3302      	adds	r3, #2
 8001fde:	89ba      	ldrh	r2, [r7, #12]
 8001fe0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	897a      	ldrh	r2, [r7, #10]
 8001fe8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3306      	adds	r3, #6
 8001fee:	893a      	ldrh	r2, [r7, #8]
 8001ff0:	801a      	strh	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	24000cc0 	.word	0x24000cc0

08002004 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_UART_TxCpltCallback+0x1c>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	24000000 	.word	0x24000000

08002024 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	4613      	mov	r3, r2
 8002030:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4618      	mov	r0, r3
 8002036:	f014 f953 	bl	80162e0 <malloc>
 800203a:	4603      	mov	r3, r0
 800203c:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	88fa      	ldrh	r2, [r7, #6]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	4618      	mov	r0, r3
 8002046:	f014 f95b 	bl	8016300 <memcpy>
	packet.size = size;
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	82bb      	strh	r3, [r7, #20]
	return packet;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	461a      	mov	r2, r3
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	e893 0003 	ldmia.w	r3, {r0, r1}
 800205a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <handshake>:

/**
 * @brief Performs a handshake by receiving and sending data over UART.
 * @return Status of the handshake operation.
 */
int handshake() {
 8002068:	b580      	push	{r7, lr}
 800206a:	b090      	sub	sp, #64	; 0x40
 800206c:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 800206e:	230a      	movs	r3, #10
 8002070:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do {
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8002072:	f107 011c 	add.w	r1, r7, #28
 8002076:	2364      	movs	r3, #100	; 0x64
 8002078:	2209      	movs	r2, #9
 800207a:	4840      	ldr	r0, [pc, #256]	; (800217c <handshake+0x114>)
 800207c:	f00d ff02 	bl	800fe84 <HAL_UART_Receive>
		key = rx_buffer[0];
 8002080:	7f3b      	ldrb	r3, [r7, #28]
 8002082:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	} while (key != 0xFF);
 8002086:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800208a:	2bff      	cmp	r3, #255	; 0xff
 800208c:	d1f1      	bne.n	8002072 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 800208e:	7f7b      	ldrb	r3, [r7, #29]
 8002090:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8002094:	7fbb      	ldrb	r3, [r7, #30]
 8002096:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 80020a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 80020a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80020ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 80020b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80020b4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8];
 80020b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	b21a      	sxth	r2, r3
 80020c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 80020cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80020d0:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 80020d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020d6:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 80020d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020dc:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 80020de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020e2:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 80020e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020e8:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 80020ea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80020ee:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds;
 80020f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020f2:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 80020f4:	f107 0318 	add.w	r3, r7, #24
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	4820      	ldr	r0, [pc, #128]	; (8002180 <handshake+0x118>)
 80020fe:	f00b fbe3 	bl	800d8c8 <HAL_RTC_SetDate>
 8002102:	4603      	mov	r3, r0
 8002104:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002108:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <handshake+0xac>
		Error_Handler();
 8002110:	f000 fe1a 	bl	8002d48 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2200      	movs	r2, #0
 8002118:	4619      	mov	r1, r3
 800211a:	4819      	ldr	r0, [pc, #100]	; (8002180 <handshake+0x118>)
 800211c:	f00b fada 	bl	800d6d4 <HAL_RTC_SetTime>
 8002120:	4603      	mov	r3, r0
 8002122:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002126:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <handshake+0xca>
		Error_Handler();
 800212e:	f000 fe0b 	bl	8002d48 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8002132:	23fa      	movs	r3, #250	; 0xfa
 8002134:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 2;
 8002138:	2302      	movs	r3, #2
 800213a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 1;
 800214a:	2301      	movs	r3, #1
 800214c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for (int i = 0; i < allowed_tries; i++) {
 8002150:	2300      	movs	r3, #0
 8002152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002154:	e009      	b.n	800216a <handshake+0x102>
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8002156:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800215a:	2364      	movs	r3, #100	; 0x64
 800215c:	2205      	movs	r2, #5
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <handshake+0x114>)
 8002160:	f00d fe02 	bl	800fd68 <HAL_UART_Transmit>
	for (int i = 0; i < allowed_tries; i++) {
 8002164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002166:	3301      	adds	r3, #1
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	429a      	cmp	r2, r3
 8002170:	dbf1      	blt.n	8002156 <handshake+0xee>
	}

	return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3740      	adds	r7, #64	; 0x40
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	24000638 	.word	0x24000638
 8002180:	240003d4 	.word	0x240003d4

08002184 <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002188:	2100      	movs	r1, #0
 800218a:	481b      	ldr	r0, [pc, #108]	; (80021f8 <system_setup+0x74>)
 800218c:	f00c fa62 	bl	800e654 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 8002190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002194:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800219a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800219e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021a2:	4816      	ldr	r0, [pc, #88]	; (80021fc <system_setup+0x78>)
 80021a4:	f003 f862 	bl	800526c <HAL_ADCEx_Calibration_Start>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80021ae:	f000 fdcb 	bl	8002d48 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80021b2:	220b      	movs	r2, #11
 80021b4:	4912      	ldr	r1, [pc, #72]	; (8002200 <system_setup+0x7c>)
 80021b6:	4811      	ldr	r0, [pc, #68]	; (80021fc <system_setup+0x78>)
 80021b8:	f002 f936 	bl	8004428 <HAL_ADC_Start_DMA>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80021c2:	f000 fdc1 	bl	8002d48 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80021c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80021ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021ce:	480d      	ldr	r0, [pc, #52]	; (8002204 <system_setup+0x80>)
 80021d0:	f003 f84c 	bl	800526c <HAL_ADCEx_Calibration_Start>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80021da:	f000 fdb5 	bl	8002d48 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80021de:	2204      	movs	r2, #4
 80021e0:	4909      	ldr	r1, [pc, #36]	; (8002208 <system_setup+0x84>)
 80021e2:	4808      	ldr	r0, [pc, #32]	; (8002204 <system_setup+0x80>)
 80021e4:	f002 f920 	bl	8004428 <HAL_ADC_Start_DMA>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80021ee:	f000 fdab 	bl	8002d48 <Error_Handler>
	}
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	240005ec 	.word	0x240005ec
 80021fc:	2400013c 	.word	0x2400013c
 8002200:	24000ca0 	.word	0x24000ca0
 8002204:	240001a0 	.word	0x240001a0
 8002208:	24000cc0 	.word	0x24000cc0

0800220c <getUptime>:

void getUptime(uint8_t *buffer)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
    uint32_t ms = UptimeMillis;
 8002218:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <getUptime+0x88>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	617b      	str	r3, [r7, #20]
    uint32_t st = SysTick->VAL;
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <getUptime+0x8c>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	613b      	str	r3, [r7, #16]

    // Did UptimeMillis rollover while reading SysTick->VAL?
    if (ms != UptimeMillis)
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <getUptime+0x88>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	429a      	cmp	r2, r3
 800222c:	d005      	beq.n	800223a <getUptime+0x2e>
        // Rollover occurred so read both again.
        // Must read both because we don't know whether the
        // rollover occurred before or after reading SysTick->VAL.
        // No need to check for another rollover because there is
        // no chance of another rollover occurring so quickly.
        ms = UptimeMillis;
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <getUptime+0x88>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	617b      	str	r3, [r7, #20]
        st = SysTick->VAL;
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <getUptime+0x8c>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	613b      	str	r3, [r7, #16]
    }
    uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002240:	fb03 f202 	mul.w	r2, r3, r2
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <getUptime+0x8c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	3301      	adds	r3, #1
 800224a:	4914      	ldr	r1, [pc, #80]	; (800229c <getUptime+0x90>)
 800224c:	fba1 1303 	umull	r1, r3, r1, r3
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	6939      	ldr	r1, [r7, #16]
 8002254:	fbb1 f3f3 	udiv	r3, r1, r3
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	0e1b      	lsrs	r3, r3, #24
 8002260:	b2da      	uxtb	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0c1a      	lsrs	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3301      	adds	r3, #1
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	0a1a      	lsrs	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3302      	adds	r3, #2
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3303      	adds	r3, #3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	24000c38 	.word	0x24000c38
 8002298:	e000e010 	.word	0xe000e010
 800229c:	10624dd3 	.word	0x10624dd3

080022a0 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80022a8:	f107 0310 	add.w	r3, r7, #16
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	4821      	ldr	r0, [pc, #132]	; (8002338 <getTimestamp+0x98>)
 80022b2:	f00b faad 	bl	800d810 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	2200      	movs	r2, #0
 80022bc:	4619      	mov	r1, r3
 80022be:	481e      	ldr	r0, [pc, #120]	; (8002338 <getTimestamp+0x98>)
 80022c0:	f00b fb8a 	bl	800d9d8 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2264      	movs	r2, #100	; 0x64
 80022c8:	fb03 f202 	mul.w	r2, r3, r2
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <getTimestamp+0x9c>)
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = currentDate.Year;				// 0-99
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;				// 1-12
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3301      	adds	r3, #1
 80022dc:	7b7a      	ldrb	r2, [r7, #13]
 80022de:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;				// 1-31
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3302      	adds	r3, #2
 80022e4:	7bba      	ldrb	r2, [r7, #14]
 80022e6:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;				// 0-23
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3303      	adds	r3, #3
 80022ec:	7c3a      	ldrb	r2, [r7, #16]
 80022ee:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;			// 0-59
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	7c7a      	ldrb	r2, [r7, #17]
 80022f6:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;			// 0-59
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3305      	adds	r3, #5
 80022fc:	7cba      	ldrb	r2, [r7, #18]
 80022fe:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	0e1a      	lsrs	r2, r3, #24
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3306      	adds	r3, #6
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	0c1a      	lsrs	r2, r3, #16
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3307      	adds	r3, #7
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	0a1a      	lsrs	r2, r3, #8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3308      	adds	r3, #8
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3309      	adds	r3, #9
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	240003d4 	.word	0x240003d4
 800233c:	000f4240 	.word	0x000f4240

08002340 <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002346:	bf00      	nop
 8002348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234c:	4836      	ldr	r0, [pc, #216]	; (8002428 <sample_pmt+0xe8>)
 800234e:	f006 fda1 	bl	8008e94 <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f7      	bne.n	8002348 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002358:	200a      	movs	r0, #10
 800235a:	f013 ffc1 	bl	80162e0 <malloc>
 800235e:	4603      	mov	r3, r0
 8002360:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002362:	2002      	movs	r0, #2
 8002364:	f013 ffbc 	bl	80162e0 <malloc>
 8002368:	4603      	mov	r3, r0
 800236a:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800236c:	2004      	movs	r0, #4
 800236e:	f013 ffb7 	bl	80162e0 <malloc>
 8002372:	4603      	mov	r3, r0
 8002374:	60fb      	str	r3, [r7, #12]

	getUptime(uptime);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7ff ff48 	bl	800220c <getUptime>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 800237c:	6938      	ldr	r0, [r7, #16]
 800237e:	f7ff fd3d 	bl	8001dfc <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	22bb      	movs	r2, #187	; 0xbb
 8002386:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3301      	adds	r3, #1
 800238c:	22bb      	movs	r2, #187	; 0xbb
 800238e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002390:	4b26      	ldr	r3, [pc, #152]	; (800242c <sample_pmt+0xec>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	b29a      	uxth	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3302      	adds	r3, #2
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80023a0:	4b22      	ldr	r3, [pc, #136]	; (800242c <sample_pmt+0xec>)
 80023a2:	881a      	ldrh	r2, [r3, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3303      	adds	r3, #3
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3304      	adds	r3, #4
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3305      	adds	r3, #5
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	7852      	ldrb	r2, [r2, #1]
 80023be:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3306      	adds	r3, #6
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	7812      	ldrb	r2, [r2, #0]
 80023c8:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3307      	adds	r3, #7
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	7852      	ldrb	r2, [r2, #1]
 80023d2:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3308      	adds	r3, #8
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	7892      	ldrb	r2, [r2, #2]
 80023dc:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3309      	adds	r3, #9
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	78d2      	ldrb	r2, [r2, #3]
 80023e6:	701a      	strb	r2, [r3, #0]


	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	220a      	movs	r2, #10
 80023ec:	6979      	ldr	r1, [r7, #20]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fe18 	bl	8002024 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <sample_pmt+0xf0>)
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	1d39      	adds	r1, r7, #4
 80023fa:	2300      	movs	r3, #0
 80023fc:	2200      	movs	r2, #0
 80023fe:	f010 fd8d 	bl	8012f1c <osMessageQueuePut>
	available_msgs++;
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <sample_pmt+0xf4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <sample_pmt+0xf4>)
 800240a:	6013      	str	r3, [r2, #0]
	free(buffer);
 800240c:	6978      	ldr	r0, [r7, #20]
 800240e:	f013 ff6f 	bl	80162f0 <free>
	free(pmt_spi);
 8002412:	6938      	ldr	r0, [r7, #16]
 8002414:	f013 ff6c 	bl	80162f0 <free>
	free(uptime);
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f013 ff69 	bl	80162f0 <free>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	58020000 	.word	0x58020000
 800242c:	24000c4c 	.word	0x24000c4c
 8002430:	24000c3c 	.word	0x24000c3c
 8002434:	24000c48 	.word	0x24000c48

08002438 <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800243e:	bf00      	nop
 8002440:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002444:	484a      	ldr	r0, [pc, #296]	; (8002570 <sample_erpa+0x138>)
 8002446:	f006 fd25 	bl	8008e94 <HAL_GPIO_ReadPin>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f7      	bne.n	8002440 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002450:	200e      	movs	r0, #14
 8002452:	f013 ff45 	bl	80162e0 <malloc>
 8002456:	4603      	mov	r3, r0
 8002458:	617b      	str	r3, [r7, #20]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800245a:	2002      	movs	r0, #2
 800245c:	f013 ff40 	bl	80162e0 <malloc>
 8002460:	4603      	mov	r3, r0
 8002462:	613b      	str	r3, [r7, #16]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 8002464:	2004      	movs	r0, #4
 8002466:	f013 ff3b 	bl	80162e0 <malloc>
 800246a:	4603      	mov	r3, r0
 800246c:	60fb      	str	r3, [r7, #12]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800246e:	2004      	movs	r0, #4
 8002470:	f013 ff36 	bl	80162e0 <malloc>
 8002474:	4603      	mov	r3, r0
 8002476:	60bb      	str	r3, [r7, #8]

	getUptime(uptime);
 8002478:	68b8      	ldr	r0, [r7, #8]
 800247a:	f7ff fec7 	bl	800220c <getUptime>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 800247e:	6938      	ldr	r0, [r7, #16]
 8002480:	f7ff fce0 	bl	8001e44 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff fd01 	bl	8001e8c <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	22aa      	movs	r2, #170	; 0xaa
 800248e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3301      	adds	r3, #1
 8002494:	22aa      	movs	r2, #170	; 0xaa
 8002496:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <sample_erpa+0x13c>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29a      	uxth	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3302      	adds	r3, #2
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 80024a8:	4b32      	ldr	r3, [pc, #200]	; (8002574 <sample_erpa+0x13c>)
 80024aa:	881a      	ldrh	r2, [r3, #0]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3303      	adds	r3, #3
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3304      	adds	r3, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	881a      	ldrh	r2, [r3, #0]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3305      	adds	r3, #5
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3302      	adds	r3, #2
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	b29a      	uxth	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3306      	adds	r3, #6
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3302      	adds	r3, #2
 80024e6:	881a      	ldrh	r2, [r3, #0]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3307      	adds	r3, #7
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3308      	adds	r3, #8
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3309      	adds	r3, #9
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	7852      	ldrb	r2, [r2, #1]
 8002502:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	330a      	adds	r3, #10
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	330b      	adds	r3, #11
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	7852      	ldrb	r2, [r2, #1]
 8002516:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	330c      	adds	r3, #12
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	7892      	ldrb	r2, [r2, #2]
 8002520:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	330d      	adds	r3, #13
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	78d2      	ldrb	r2, [r2, #3]
 800252a:	701a      	strb	r2, [r3, #0]


	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 800252c:	463b      	mov	r3, r7
 800252e:	220e      	movs	r2, #14
 8002530:	6979      	ldr	r1, [r7, #20]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fd76 	bl	8002024 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <sample_erpa+0x140>)
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	4639      	mov	r1, r7
 800253e:	2300      	movs	r3, #0
 8002540:	2200      	movs	r2, #0
 8002542:	f010 fceb 	bl	8012f1c <osMessageQueuePut>
	available_msgs++;
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <sample_erpa+0x144>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	4a0b      	ldr	r2, [pc, #44]	; (800257c <sample_erpa+0x144>)
 800254e:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002550:	6978      	ldr	r0, [r7, #20]
 8002552:	f013 fecd 	bl	80162f0 <free>
	free(erpa_spi);
 8002556:	6938      	ldr	r0, [r7, #16]
 8002558:	f013 feca 	bl	80162f0 <free>
	free(erpa_adc);
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f013 fec7 	bl	80162f0 <free>
	free(uptime);
 8002562:	68b8      	ldr	r0, [r7, #8]
 8002564:	f013 fec4 	bl	80162f0 <free>
}
 8002568:	bf00      	nop
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	58020400 	.word	0x58020400
 8002574:	24000c4e 	.word	0x24000c4e
 8002578:	24000c3c 	.word	0x24000c3c
 800257c:	24000c48 	.word	0x24000c48

08002580 <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002586:	2030      	movs	r0, #48	; 0x30
 8002588:	f013 feaa 	bl	80162e0 <malloc>
 800258c:	4603      	mov	r3, r0
 800258e:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8002590:	2008      	movs	r0, #8
 8002592:	f013 fea5 	bl	80162e0 <malloc>
 8002596:	4603      	mov	r3, r0
 8002598:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 800259a:	200a      	movs	r0, #10
 800259c:	f013 fea0 	bl	80162e0 <malloc>
 80025a0:	4603      	mov	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff fe7b 	bl	80022a0 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <sample_hk+0x78>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b2:	db25      	blt.n	8002600 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 80025b4:	6938      	ldr	r0, [r7, #16]
 80025b6:	f7ff fc83 	bl	8001ec0 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <sample_hk+0x7c>)
 80025c4:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	3302      	adds	r3, #2
 80025ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <sample_hk+0x7c>)
 80025d2:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	3304      	adds	r3, #4
 80025d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <sample_hk+0x7c>)
 80025e0:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	3306      	adds	r3, #6
 80025e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <sample_hk+0x7c>)
 80025ee:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80025f0:	4b01      	ldr	r3, [pc, #4]	; (80025f8 <sample_hk+0x78>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e01f      	b.n	8002638 <sample_hk+0xb8>
 80025f8:	24000004 	.word	0x24000004
 80025fc:	24000cc8 	.word	0x24000cc8
	} else {
		TEMPERATURE_COUNTER++;
 8002600:	4b9f      	ldr	r3, [pc, #636]	; (8002880 <sample_hk+0x300>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	4a9e      	ldr	r2, [pc, #632]	; (8002880 <sample_hk+0x300>)
 8002608:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 800260a:	4b9e      	ldr	r3, [pc, #632]	; (8002884 <sample_hk+0x304>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b21a      	sxth	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 8002614:	4b9b      	ldr	r3, [pc, #620]	; (8002884 <sample_hk+0x304>)
 8002616:	885a      	ldrh	r2, [r3, #2]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	3302      	adds	r3, #2
 800261c:	b212      	sxth	r2, r2
 800261e:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002620:	4b98      	ldr	r3, [pc, #608]	; (8002884 <sample_hk+0x304>)
 8002622:	889a      	ldrh	r2, [r3, #4]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	3304      	adds	r3, #4
 8002628:	b212      	sxth	r2, r2
 800262a:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 800262c:	4b95      	ldr	r3, [pc, #596]	; (8002884 <sample_hk+0x304>)
 800262e:	88da      	ldrh	r2, [r3, #6]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	3306      	adds	r3, #6
 8002634:	b212      	sxth	r2, r2
 8002636:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	22cc      	movs	r2, #204	; 0xcc
 800263c:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	22cc      	movs	r2, #204	; 0xcc
 8002644:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002646:	4b90      	ldr	r3, [pc, #576]	; (8002888 <sample_hk+0x308>)
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	b29a      	uxth	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3302      	adds	r3, #2
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002656:	4b8c      	ldr	r3, [pc, #560]	; (8002888 <sample_hk+0x308>)
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3303      	adds	r3, #3
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 8002662:	4b8a      	ldr	r3, [pc, #552]	; (800288c <sample_hk+0x30c>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	b29a      	uxth	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3304      	adds	r3, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 8002672:	4b86      	ldr	r3, [pc, #536]	; (800288c <sample_hk+0x30c>)
 8002674:	881a      	ldrh	r2, [r3, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3305      	adds	r3, #5
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 800267e:	4b84      	ldr	r3, [pc, #528]	; (8002890 <sample_hk+0x310>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	b29a      	uxth	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3306      	adds	r3, #6
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 800268e:	4b80      	ldr	r3, [pc, #512]	; (8002890 <sample_hk+0x310>)
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3307      	adds	r3, #7
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a0:	121a      	asrs	r2, r3, #8
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3308      	adds	r3, #8
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3309      	adds	r3, #9
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	3302      	adds	r3, #2
 80026bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c0:	121a      	asrs	r2, r3, #8
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	330a      	adds	r3, #10
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	3302      	adds	r3, #2
 80026ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	330b      	adds	r3, #11
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	3304      	adds	r3, #4
 80026de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e2:	121a      	asrs	r2, r3, #8
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	330c      	adds	r3, #12
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	3304      	adds	r3, #4
 80026f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	330d      	adds	r3, #13
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	3306      	adds	r3, #6
 8002700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002704:	121a      	asrs	r2, r3, #8
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	330e      	adds	r3, #14
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3306      	adds	r3, #6
 8002712:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	330f      	adds	r3, #15
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <sample_hk+0x314>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	b29a      	uxth	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3310      	adds	r3, #16
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 800272e:	4b59      	ldr	r3, [pc, #356]	; (8002894 <sample_hk+0x314>)
 8002730:	881a      	ldrh	r2, [r3, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3311      	adds	r3, #17
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 800273a:	4b57      	ldr	r3, [pc, #348]	; (8002898 <sample_hk+0x318>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b29a      	uxth	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3312      	adds	r3, #18
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 800274a:	4b53      	ldr	r3, [pc, #332]	; (8002898 <sample_hk+0x318>)
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3313      	adds	r3, #19
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002756:	4b51      	ldr	r3, [pc, #324]	; (800289c <sample_hk+0x31c>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	b29a      	uxth	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3314      	adds	r3, #20
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002766:	4b4d      	ldr	r3, [pc, #308]	; (800289c <sample_hk+0x31c>)
 8002768:	881a      	ldrh	r2, [r3, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3315      	adds	r3, #21
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002772:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <sample_hk+0x320>)
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	b29a      	uxth	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3316      	adds	r3, #22
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <sample_hk+0x320>)
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3317      	adds	r3, #23
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 800278e:	4b45      	ldr	r3, [pc, #276]	; (80028a4 <sample_hk+0x324>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	b29a      	uxth	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3318      	adds	r3, #24
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <sample_hk+0x324>)
 80027a0:	881a      	ldrh	r2, [r3, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3319      	adds	r3, #25
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 80027aa:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <sample_hk+0x328>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	331a      	adds	r3, #26
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <sample_hk+0x328>)
 80027bc:	881a      	ldrh	r2, [r3, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	331b      	adds	r3, #27
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 80027c6:	4b39      	ldr	r3, [pc, #228]	; (80028ac <sample_hk+0x32c>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	331c      	adds	r3, #28
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 80027d6:	4b35      	ldr	r3, [pc, #212]	; (80028ac <sample_hk+0x32c>)
 80027d8:	881a      	ldrh	r2, [r3, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	331d      	adds	r3, #29
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 80027e2:	4b33      	ldr	r3, [pc, #204]	; (80028b0 <sample_hk+0x330>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	331e      	adds	r3, #30
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 80027f2:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <sample_hk+0x330>)
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	331f      	adds	r3, #31
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80027fe:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <sample_hk+0x334>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	b29a      	uxth	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3320      	adds	r3, #32
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 800280e:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <sample_hk+0x334>)
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3321      	adds	r3, #33	; 0x21
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <sample_hk+0x338>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	b29a      	uxth	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3322      	adds	r3, #34	; 0x22
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 800282a:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <sample_hk+0x338>)
 800282c:	881a      	ldrh	r2, [r3, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3323      	adds	r3, #35	; 0x23
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <sample_hk+0x33c>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	b29a      	uxth	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3324      	adds	r3, #36	; 0x24
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <sample_hk+0x33c>)
 8002848:	881a      	ldrh	r2, [r3, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3325      	adds	r3, #37	; 0x25
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3326      	adds	r3, #38	; 0x26
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	7812      	ldrb	r2, [r2, #0]
 800285a:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3327      	adds	r3, #39	; 0x27
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	7852      	ldrb	r2, [r2, #1]
 8002864:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3328      	adds	r3, #40	; 0x28
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	7892      	ldrb	r2, [r2, #2]
 800286e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3329      	adds	r3, #41	; 0x29
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	78d2      	ldrb	r2, [r2, #3]
 8002878:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	332a      	adds	r3, #42	; 0x2a
 800287e:	e01f      	b.n	80028c0 <sample_hk+0x340>
 8002880:	24000004 	.word	0x24000004
 8002884:	24000cc8 	.word	0x24000cc8
 8002888:	24000c50 	.word	0x24000c50
 800288c:	24000c1c 	.word	0x24000c1c
 8002890:	24000c1e 	.word	0x24000c1e
 8002894:	24000c20 	.word	0x24000c20
 8002898:	24000c22 	.word	0x24000c22
 800289c:	24000c24 	.word	0x24000c24
 80028a0:	24000c26 	.word	0x24000c26
 80028a4:	24000c28 	.word	0x24000c28
 80028a8:	24000c2a 	.word	0x24000c2a
 80028ac:	24000c2c 	.word	0x24000c2c
 80028b0:	24000c2e 	.word	0x24000c2e
 80028b4:	24000c30 	.word	0x24000c30
 80028b8:	24000c32 	.word	0x24000c32
 80028bc:	24000c34 	.word	0x24000c34
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	7912      	ldrb	r2, [r2, #4]
 80028c4:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	332b      	adds	r3, #43	; 0x2b
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	7952      	ldrb	r2, [r2, #5]
 80028ce:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	332c      	adds	r3, #44	; 0x2c
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	7992      	ldrb	r2, [r2, #6]
 80028d8:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	332d      	adds	r3, #45	; 0x2d
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	79d2      	ldrb	r2, [r2, #7]
 80028e2:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	332e      	adds	r3, #46	; 0x2e
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	7a12      	ldrb	r2, [r2, #8]
 80028ec:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	332f      	adds	r3, #47	; 0x2f
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	7a52      	ldrb	r2, [r2, #9]
 80028f6:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	2230      	movs	r2, #48	; 0x30
 80028fc:	6979      	ldr	r1, [r7, #20]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fb90 	bl	8002024 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <sample_hk+0x3b8>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	1d39      	adds	r1, r7, #4
 800290a:	2300      	movs	r3, #0
 800290c:	2200      	movs	r2, #0
 800290e:	f010 fb05 	bl	8012f1c <osMessageQueuePut>
	available_msgs++;
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <sample_hk+0x3bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	4a08      	ldr	r2, [pc, #32]	; (800293c <sample_hk+0x3bc>)
 800291a:	6013      	str	r3, [r2, #0]

	free(buffer);
 800291c:	6978      	ldr	r0, [r7, #20]
 800291e:	f013 fce7 	bl	80162f0 <free>
	free(hk_i2c);
 8002922:	6938      	ldr	r0, [r7, #16]
 8002924:	f013 fce4 	bl	80162f0 <free>
	free(timestamp);
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f013 fce1 	bl	80162f0 <free>
}
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	24000c3c 	.word	0x24000c3c
 800293c:	24000c48 	.word	0x24000c48

08002940 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <PMT_init+0x38>)
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002950:	2200      	movs	r2, #0
 8002952:	2101      	movs	r1, #1
 8002954:	f010 fa08 	bl	8012d68 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <PMT_init+0x3c>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <PMT_init+0x30>
			sample_pmt();
 8002960:	f7ff fcee 	bl	8002340 <sample_pmt>
			pmt_seq++;
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <PMT_init+0x40>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <PMT_init+0x40>)
 800296e:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002970:	f010 f91a 	bl	8012ba8 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002974:	e7e8      	b.n	8002948 <PMT_init+0x8>
 8002976:	bf00      	nop
 8002978:	24000c58 	.word	0x24000c58
 800297c:	24000c52 	.word	0x24000c52
 8002980:	24000c4c 	.word	0x24000c4c

08002984 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <ERPA_init+0x38>)
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002994:	2200      	movs	r2, #0
 8002996:	2102      	movs	r1, #2
 8002998:	f010 f9e6 	bl	8012d68 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <ERPA_init+0x3c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <ERPA_init+0x30>
			sample_erpa();
 80029a4:	f7ff fd48 	bl	8002438 <sample_erpa>
			erpa_seq++;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <ERPA_init+0x40>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <ERPA_init+0x40>)
 80029b2:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 80029b4:	f010 f8f8 	bl	8012ba8 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 80029b8:	e7e8      	b.n	800298c <ERPA_init+0x8>
 80029ba:	bf00      	nop
 80029bc:	24000c58 	.word	0x24000c58
 80029c0:	24000c53 	.word	0x24000c53
 80029c4:	24000c4e 	.word	0x24000c4e

080029c8 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HK_init+0x38>)
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d8:	2200      	movs	r2, #0
 80029da:	2104      	movs	r1, #4
 80029dc:	f010 f9c4 	bl	8012d68 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HK_init+0x3c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HK_init+0x30>
			sample_hk();
 80029e8:	f7ff fdca 	bl	8002580 <sample_hk>
			hk_seq++;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HK_init+0x40>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <HK_init+0x40>)
 80029f6:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 80029f8:	f010 f8d6 	bl	8012ba8 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 80029fc:	e7e8      	b.n	80029d0 <HK_init+0x8>
 80029fe:	bf00      	nop
 8002a00:	24000c58 	.word	0x24000c58
 8002a04:	24000c54 	.word	0x24000c54
 8002a08:	24000c50 	.word	0x24000c50

08002a0c <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a14:	2201      	movs	r2, #1
 8002a16:	4904      	ldr	r1, [pc, #16]	; (8002a28 <UART_RX_init+0x1c>)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <UART_RX_init+0x20>)
 8002a1a:	f00d fafb 	bl	8010014 <HAL_UART_Receive_IT>
		osDelay(5);
 8002a1e:	2005      	movs	r0, #5
 8002a20:	f010 f903 	bl	8012c2a <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a24:	e7f6      	b.n	8002a14 <UART_RX_init+0x8>
 8002a26:	bf00      	nop
 8002a28:	24000c5c 	.word	0x24000c5c
 8002a2c:	24000638 	.word	0x24000638

08002a30 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <GPIO_on_init+0x9c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f010 f8d3 	bl	8012be8 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <GPIO_on_init+0xa0>)
 8002a44:	2104      	movs	r1, #4
 8002a46:	2201      	movs	r2, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f006 fa3b 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a4e:	2064      	movs	r0, #100	; 0x64
 8002a50:	f010 f8eb 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <GPIO_on_init+0xa0>)
 8002a56:	2120      	movs	r1, #32
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f006 fa32 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a60:	2064      	movs	r0, #100	; 0x64
 8002a62:	f010 f8e2 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <GPIO_on_init+0xa4>)
 8002a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f006 fa28 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a74:	2064      	movs	r0, #100	; 0x64
 8002a76:	f010 f8d8 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <GPIO_on_init+0xa4>)
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f006 fa1f 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a86:	2064      	movs	r0, #100	; 0x64
 8002a88:	f010 f8cf 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <GPIO_on_init+0xa4>)
 8002a8e:	2140      	movs	r1, #64	; 0x40
 8002a90:	2201      	movs	r2, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f006 fa16 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a98:	2064      	movs	r0, #100	; 0x64
 8002a9a:	f010 f8c6 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <GPIO_on_init+0xa4>)
 8002aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f006 fa0c 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002aac:	2064      	movs	r0, #100	; 0x64
 8002aae:	f010 f8bc 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <GPIO_on_init+0xa4>)
 8002ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f006 fa02 	bl	8008ec4 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002ac0:	4b02      	ldr	r3, [pc, #8]	; (8002acc <GPIO_on_init+0x9c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f010 f88f 	bl	8012be8 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002aca:	e7ba      	b.n	8002a42 <GPIO_on_init+0x12>
 8002acc:	24000754 	.word	0x24000754
 8002ad0:	58020400 	.word	0x58020400
 8002ad4:	58020800 	.word	0x58020800

08002ad8 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <GPIO_off_init+0x9c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f010 f87f 	bl	8012be8 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <GPIO_off_init+0xa0>)
 8002aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002af0:	2200      	movs	r2, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f006 f9e6 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002af8:	2064      	movs	r0, #100	; 0x64
 8002afa:	f010 f896 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <GPIO_off_init+0xa0>)
 8002b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b04:	2200      	movs	r2, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f006 f9dc 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b0c:	2064      	movs	r0, #100	; 0x64
 8002b0e:	f010 f88c 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002b12:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <GPIO_off_init+0xa0>)
 8002b14:	2140      	movs	r1, #64	; 0x40
 8002b16:	2200      	movs	r2, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f006 f9d3 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b1e:	2064      	movs	r0, #100	; 0x64
 8002b20:	f010 f883 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <GPIO_off_init+0xa0>)
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f006 f9ca 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b30:	2064      	movs	r0, #100	; 0x64
 8002b32:	f010 f87a 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <GPIO_off_init+0xa0>)
 8002b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f006 f9c0 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b44:	2064      	movs	r0, #100	; 0x64
 8002b46:	f010 f870 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <GPIO_off_init+0xa4>)
 8002b4c:	2120      	movs	r1, #32
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f006 f9b7 	bl	8008ec4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b56:	2064      	movs	r0, #100	; 0x64
 8002b58:	f010 f867 	bl	8012c2a <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <GPIO_off_init+0xa4>)
 8002b5e:	2104      	movs	r1, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f006 f9ae 	bl	8008ec4 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002b68:	4b02      	ldr	r3, [pc, #8]	; (8002b74 <GPIO_off_init+0x9c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f010 f83b 	bl	8012be8 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002b72:	e7ba      	b.n	8002aea <GPIO_off_init+0x12>
 8002b74:	240009b4 	.word	0x240009b4
 8002b78:	58020800 	.word	0x58020800
 8002b7c:	58020400 	.word	0x58020400

08002b80 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <UART_TX_init+0xa4>)
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b98:	2200      	movs	r2, #0
 8002b9a:	4923      	ldr	r1, [pc, #140]	; (8002c28 <UART_TX_init+0xa8>)
 8002b9c:	f010 fa1e 	bl	8012fdc <osMessageQueueGet>
 8002ba0:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d120      	bne.n	8002bea <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <UART_TX_init+0xa8>)
 8002baa:	889b      	ldrh	r3, [r3, #4]
 8002bac:	461a      	mov	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb6:	d218      	bcs.n	8002bea <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <UART_TX_init+0xac>)
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4a1a      	ldr	r2, [pc, #104]	; (8002c28 <UART_TX_init+0xa8>)
 8002bc0:	6811      	ldr	r1, [r2, #0]
 8002bc2:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <UART_TX_init+0xa8>)
 8002bc4:	8892      	ldrh	r2, [r2, #4]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f013 fb9a 	bl	8016300 <memcpy>
					free(msg.array);
 8002bcc:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <UART_TX_init+0xa8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f013 fb8d 	bl	80162f0 <free>
					total_size += msg.size;
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <UART_TX_init+0xa8>)
 8002bd8:	889b      	ldrh	r3, [r3, #4]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
					if(total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)){
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8002be8:	d203      	bcs.n	8002bf2 <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0cf      	beq.n	8002b90 <UART_TX_init+0x10>
 8002bf0:	e000      	b.n	8002bf4 <UART_TX_init+0x74>
						break;
 8002bf2:	bf00      	nop

		if (total_size > 0) {
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	490a      	ldr	r1, [pc, #40]	; (8002c2c <UART_TX_init+0xac>)
 8002c02:	480b      	ldr	r0, [pc, #44]	; (8002c30 <UART_TX_init+0xb0>)
 8002c04:	f00d fa52 	bl	80100ac <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002c08:	e001      	b.n	8002c0e <UART_TX_init+0x8e>
				osThreadYield();
 8002c0a:	f00f ffcd 	bl	8012ba8 <osThreadYield>
			while (tx_flag == 0) {
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <UART_TX_init+0xb4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f9      	beq.n	8002c0a <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <UART_TX_init+0xb4>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002c1c:	f00f ffc4 	bl	8012ba8 <osThreadYield>
		total_size = 0;
 8002c20:	e7b4      	b.n	8002b8c <UART_TX_init+0xc>
 8002c22:	bf00      	nop
 8002c24:	24000c3c 	.word	0x24000c3c
 8002c28:	24000c40 	.word	0x24000c40
 8002c2c:	24000cd0 	.word	0x24000cd0
 8002c30:	24000638 	.word	0x24000638
 8002c34:	24000000 	.word	0x24000000

08002c38 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
		osThreadExit();
#endif
	//osThreadExit(); // REMOVE

	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002c40:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <Voltage_Monitor_init+0xb4>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2108      	movs	r1, #8
 8002c4c:	f010 f88c 	bl	8012d68 <osEventFlagsWait>
				osWaitForever);


		uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 8002c50:	2012      	movs	r0, #18
 8002c52:	f013 fb45 	bl	80162e0 <malloc>
 8002c56:	4603      	mov	r3, r0
 8002c58:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002c5a:	2008      	movs	r0, #8
 8002c5c:	f013 fb40 	bl	80162e0 <malloc>
 8002c60:	4603      	mov	r3, r0
 8002c62:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff f95b 	bl	8001f20 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002c6a:	68b8      	ldr	r0, [r7, #8]
 8002c6c:	f7ff f9a2 	bl	8001fb4 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	885a      	ldrh	r2, [r3, #2]
 8002c74:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <Voltage_Monitor_init+0xb8>)
 8002c76:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <Voltage_Monitor_init+0xbc>)
 8002c7e:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	881a      	ldrh	r2, [r3, #0]
 8002c84:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <Voltage_Monitor_init+0xc0>)
 8002c86:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	885a      	ldrh	r2, [r3, #2]
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <Voltage_Monitor_init+0xc4>)
 8002c8e:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	889a      	ldrh	r2, [r3, #4]
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <Voltage_Monitor_init+0xc8>)
 8002c96:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	88da      	ldrh	r2, [r3, #6]
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <Voltage_Monitor_init+0xcc>)
 8002c9e:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	899a      	ldrh	r2, [r3, #12]
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <Voltage_Monitor_init+0xd0>)
 8002ca6:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88da      	ldrh	r2, [r3, #6]
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <Voltage_Monitor_init+0xd4>)
 8002cae:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	889a      	ldrh	r2, [r3, #4]
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <Voltage_Monitor_init+0xd8>)
 8002cb6:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	89da      	ldrh	r2, [r3, #14]
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <Voltage_Monitor_init+0xdc>)
 8002cbe:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8a1a      	ldrh	r2, [r3, #16]
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <Voltage_Monitor_init+0xe0>)
 8002cc6:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	891a      	ldrh	r2, [r3, #8]
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <Voltage_Monitor_init+0xe4>)
 8002cce:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	895a      	ldrh	r2, [r3, #10]
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <Voltage_Monitor_init+0xe8>)
 8002cd6:	801a      	strh	r2, [r3, #0]
//
//		if (!inRange(_n800v, 3018, 3336)) {
//			error_protocol(RAIL_n800v);
//		}

		free(hk_adc1);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f013 fb09 	bl	80162f0 <free>
		free(hk_adc3);
 8002cde:	68b8      	ldr	r0, [r7, #8]
 8002ce0:	f013 fb06 	bl	80162f0 <free>

		osThreadYield();
 8002ce4:	f00f ff60 	bl	8012ba8 <osThreadYield>
	for (;;) {
 8002ce8:	e7aa      	b.n	8002c40 <Voltage_Monitor_init+0x8>
 8002cea:	bf00      	nop
 8002cec:	24000c58 	.word	0x24000c58
 8002cf0:	24000c1c 	.word	0x24000c1c
 8002cf4:	24000c1e 	.word	0x24000c1e
 8002cf8:	24000c20 	.word	0x24000c20
 8002cfc:	24000c22 	.word	0x24000c22
 8002d00:	24000c24 	.word	0x24000c24
 8002d04:	24000c26 	.word	0x24000c26
 8002d08:	24000c28 	.word	0x24000c28
 8002d0c:	24000c2a 	.word	0x24000c2a
 8002d10:	24000c2c 	.word	0x24000c2c
 8002d14:	24000c2e 	.word	0x24000c2e
 8002d18:	24000c30 	.word	0x24000c30
 8002d1c:	24000c32 	.word	0x24000c32
 8002d20:	24000c34 	.word	0x24000c34

08002d24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d36:	f000 ff85 	bl	8003c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40001000 	.word	0x40001000

08002d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d4c:	b672      	cpsid	i
}
 8002d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d50:	e7fe      	b.n	8002d50 <Error_Handler+0x8>
	...

08002d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_MspInit+0x38>)
 8002d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_MspInit+0x38>)
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_MspInit+0x38>)
 8002d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f06f 0001 	mvn.w	r0, #1
 8002d80:	f002 fc6e 	bl	8005660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	58024400 	.word	0x58024400

08002d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	; 0x38
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a7b      	ldr	r2, [pc, #492]	; (8002f9c <HAL_ADC_MspInit+0x20c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	f040 8091 	bne.w	8002ed6 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002db4:	4b7a      	ldr	r3, [pc, #488]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002db6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dba:	4a79      	ldr	r2, [pc, #484]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002dbc:	f043 0320 	orr.w	r3, r3, #32
 8002dc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002dc4:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	623b      	str	r3, [r7, #32]
 8002dd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd2:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd8:	4a71      	ldr	r2, [pc, #452]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002de2:	4b6f      	ldr	r3, [pc, #444]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	4b6b      	ldr	r3, [pc, #428]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df6:	4a6a      	ldr	r2, [pc, #424]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e00:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e14:	4a62      	ldr	r2, [pc, #392]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e1e:	4b60      	ldr	r3, [pc, #384]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002e2c:	2333      	movs	r3, #51	; 0x33
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e30:	2303      	movs	r3, #3
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4859      	ldr	r0, [pc, #356]	; (8002fa4 <HAL_ADC_MspInit+0x214>)
 8002e40:	f005 fe78 	bl	8008b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002e44:	23ce      	movs	r3, #206	; 0xce
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e54:	4619      	mov	r1, r3
 8002e56:	4854      	ldr	r0, [pc, #336]	; (8002fa8 <HAL_ADC_MspInit+0x218>)
 8002e58:	f005 fe6c 	bl	8008b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e60:	2303      	movs	r3, #3
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	484f      	ldr	r0, [pc, #316]	; (8002fac <HAL_ADC_MspInit+0x21c>)
 8002e70:	f005 fe60 	bl	8008b34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002e74:	4b4e      	ldr	r3, [pc, #312]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002e76:	4a4f      	ldr	r2, [pc, #316]	; (8002fb4 <HAL_ADC_MspInit+0x224>)
 8002e78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e7a:	4b4d      	ldr	r3, [pc, #308]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002e7c:	2209      	movs	r2, #9
 8002e7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e80:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e86:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e8c:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e94:	4b46      	ldr	r3, [pc, #280]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e9c:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ea2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ea4:	4b42      	ldr	r3, [pc, #264]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eaa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002eac:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002eb8:	483d      	ldr	r0, [pc, #244]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002eba:	f002 ffff 	bl	8005ebc <HAL_DMA_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002ec4:	f7ff ff40 	bl	8002d48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a39      	ldr	r2, [pc, #228]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002ecc:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ece:	4a38      	ldr	r2, [pc, #224]	; (8002fb0 <HAL_ADC_MspInit+0x220>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ed4:	e05e      	b.n	8002f94 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a37      	ldr	r2, [pc, #220]	; (8002fb8 <HAL_ADC_MspInit+0x228>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d159      	bne.n	8002f94 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee6:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f04:	4a26      	ldr	r2, [pc, #152]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_ADC_MspInit+0x210>)
 8002f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002f1c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002f20:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002f24:	f000 feba 	bl	8003c9c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002f28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002f2c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002f30:	f000 feb4 	bl	8003c9c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f36:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_ADC_MspInit+0x230>)
 8002f38:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f3c:	2273      	movs	r2, #115	; 0x73
 8002f3e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f40:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f52:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f5a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f62:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002f64:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f6a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002f78:	4810      	ldr	r0, [pc, #64]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f7a:	f002 ff9f 	bl	8005ebc <HAL_DMA_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002f84:	f7ff fee0 	bl	8002d48 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f8e:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <HAL_ADC_MspInit+0x22c>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f94:	bf00      	nop
 8002f96:	3738      	adds	r7, #56	; 0x38
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40022000 	.word	0x40022000
 8002fa0:	58024400 	.word	0x58024400
 8002fa4:	58020800 	.word	0x58020800
 8002fa8:	58020000 	.word	0x58020000
 8002fac:	58020400 	.word	0x58020400
 8002fb0:	24000204 	.word	0x24000204
 8002fb4:	40020010 	.word	0x40020010
 8002fb8:	58026000 	.word	0x58026000
 8002fbc:	2400027c 	.word	0x2400027c
 8002fc0:	40020028 	.word	0x40020028

08002fc4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a34      	ldr	r2, [pc, #208]	; (80030b4 <HAL_DAC_MspInit+0xf0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d161      	bne.n	80030aa <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002fe6:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_DAC_MspInit+0xf4>)
 8002fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fec:	4a32      	ldr	r2, [pc, #200]	; (80030b8 <HAL_DAC_MspInit+0xf4>)
 8002fee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ff6:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <HAL_DAC_MspInit+0xf4>)
 8002ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003004:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <HAL_DAC_MspInit+0xf4>)
 8003006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800300a:	4a2b      	ldr	r2, [pc, #172]	; (80030b8 <HAL_DAC_MspInit+0xf4>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_DAC_MspInit+0xf4>)
 8003016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003022:	2310      	movs	r3, #16
 8003024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003026:	2303      	movs	r3, #3
 8003028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	4619      	mov	r1, r3
 8003034:	4821      	ldr	r0, [pc, #132]	; (80030bc <HAL_DAC_MspInit+0xf8>)
 8003036:	f005 fd7d 	bl	8008b34 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800303a:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 800303c:	4a21      	ldr	r2, [pc, #132]	; (80030c4 <HAL_DAC_MspInit+0x100>)
 800303e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003040:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 8003042:	2243      	movs	r2, #67	; 0x43
 8003044:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003046:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 8003048:	2240      	movs	r2, #64	; 0x40
 800304a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800304c:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003052:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 8003054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003058:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 800305c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003060:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 8003064:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003068:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800306a:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 800306c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003070:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 800307a:	2200      	movs	r2, #0
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800307e:	4810      	ldr	r0, [pc, #64]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 8003080:	f002 ff1c 	bl	8005ebc <HAL_DMA_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800308a:	f7ff fe5d 	bl	8002d48 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_DAC_MspInit+0xfc>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	2105      	movs	r1, #5
 800309e:	2036      	movs	r0, #54	; 0x36
 80030a0:	f002 fade 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80030a4:	2036      	movs	r0, #54	; 0x36
 80030a6:	f002 faf5 	bl	8005694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80030aa:	bf00      	nop
 80030ac:	3728      	adds	r7, #40	; 0x28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40007400 	.word	0x40007400
 80030b8:	58024400 	.word	0x58024400
 80030bc:	58020000 	.word	0x58020000
 80030c0:	24000308 	.word	0x24000308
 80030c4:	40020088 	.word	0x40020088

080030c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0ba      	sub	sp, #232	; 0xe8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	22c0      	movs	r2, #192	; 0xc0
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f013 f917 	bl	801631c <memset>
  if(hi2c->Instance==I2C1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a27      	ldr	r2, [pc, #156]	; (8003190 <HAL_I2C_MspInit+0xc8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d146      	bne.n	8003186 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030f8:	f04f 0208 	mov.w	r2, #8
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800310a:	f107 0310 	add.w	r3, r7, #16
 800310e:	4618      	mov	r0, r3
 8003110:	f007 fd60 	bl	800abd4 <HAL_RCCEx_PeriphCLKConfig>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800311a:	f7ff fe15 	bl	8002d48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_I2C_MspInit+0xcc>)
 8003120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <HAL_I2C_MspInit+0xcc>)
 8003126:	f043 0302 	orr.w	r3, r3, #2
 800312a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800312e:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_I2C_MspInit+0xcc>)
 8003130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800313c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003140:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003144:	2312      	movs	r3, #18
 8003146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	2300      	movs	r3, #0
 8003152:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003156:	2304      	movs	r3, #4
 8003158:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003160:	4619      	mov	r1, r3
 8003162:	480d      	ldr	r0, [pc, #52]	; (8003198 <HAL_I2C_MspInit+0xd0>)
 8003164:	f005 fce6 	bl	8008b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_I2C_MspInit+0xcc>)
 800316a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800316e:	4a09      	ldr	r2, [pc, #36]	; (8003194 <HAL_I2C_MspInit+0xcc>)
 8003170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003174:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_I2C_MspInit+0xcc>)
 800317a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800317e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003186:	bf00      	nop
 8003188:	37e8      	adds	r7, #232	; 0xe8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40005400 	.word	0x40005400
 8003194:	58024400 	.word	0x58024400
 8003198:	58020400 	.word	0x58020400

0800319c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b0b2      	sub	sp, #200	; 0xc8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031a4:	f107 0308 	add.w	r3, r7, #8
 80031a8:	22c0      	movs	r2, #192	; 0xc0
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f013 f8b5 	bl	801631c <memset>
  if(hrtc->Instance==RTC)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <HAL_RTC_MspInit+0x5c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d118      	bne.n	80031ee <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <HAL_RTC_MspInit+0x60>)
 80031ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ce:	f107 0308 	add.w	r3, r7, #8
 80031d2:	4618      	mov	r0, r3
 80031d4:	f007 fcfe 	bl	800abd4 <HAL_RCCEx_PeriphCLKConfig>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80031de:	f7ff fdb3 	bl	8002d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <HAL_RTC_MspInit+0x64>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a06      	ldr	r2, [pc, #24]	; (8003200 <HAL_RTC_MspInit+0x64>)
 80031e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80031ee:	bf00      	nop
 80031f0:	37c8      	adds	r7, #200	; 0xc8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	58004000 	.word	0x58004000
 80031fc:	00019300 	.word	0x00019300
 8003200:	58024400 	.word	0x58024400

08003204 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b0bc      	sub	sp, #240	; 0xf0
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800321c:	f107 0318 	add.w	r3, r7, #24
 8003220:	22c0      	movs	r2, #192	; 0xc0
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f013 f879 	bl	801631c <memset>
  if(hspi->Instance==SPI1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a4c      	ldr	r2, [pc, #304]	; (8003360 <HAL_SPI_MspInit+0x15c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d145      	bne.n	80032c0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003240:	2300      	movs	r3, #0
 8003242:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003244:	f107 0318 	add.w	r3, r7, #24
 8003248:	4618      	mov	r0, r3
 800324a:	f007 fcc3 	bl	800abd4 <HAL_RCCEx_PeriphCLKConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003254:	f7ff fd78 	bl	8002d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003258:	4b42      	ldr	r3, [pc, #264]	; (8003364 <HAL_SPI_MspInit+0x160>)
 800325a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800325e:	4a41      	ldr	r2, [pc, #260]	; (8003364 <HAL_SPI_MspInit+0x160>)
 8003260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003264:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003268:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <HAL_SPI_MspInit+0x160>)
 800326a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800326e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003276:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_SPI_MspInit+0x160>)
 8003278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327c:	4a39      	ldr	r2, [pc, #228]	; (8003364 <HAL_SPI_MspInit+0x160>)
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003286:	4b37      	ldr	r3, [pc, #220]	; (8003364 <HAL_SPI_MspInit+0x160>)
 8003288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003294:	2318      	movs	r3, #24
 8003296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ac:	2305      	movs	r3, #5
 80032ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032b6:	4619      	mov	r1, r3
 80032b8:	482b      	ldr	r0, [pc, #172]	; (8003368 <HAL_SPI_MspInit+0x164>)
 80032ba:	f005 fc3b 	bl	8008b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032be:	e04a      	b.n	8003356 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a29      	ldr	r2, [pc, #164]	; (800336c <HAL_SPI_MspInit+0x168>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d145      	bne.n	8003356 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80032ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032da:	f107 0318 	add.w	r3, r7, #24
 80032de:	4618      	mov	r0, r3
 80032e0:	f007 fc78 	bl	800abd4 <HAL_RCCEx_PeriphCLKConfig>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80032ea:	f7ff fd2d 	bl	8002d48 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_SPI_MspInit+0x160>)
 80032f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_SPI_MspInit+0x160>)
 80032f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_SPI_MspInit+0x160>)
 8003300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330c:	4b15      	ldr	r3, [pc, #84]	; (8003364 <HAL_SPI_MspInit+0x160>)
 800330e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003312:	4a14      	ldr	r2, [pc, #80]	; (8003364 <HAL_SPI_MspInit+0x160>)
 8003314:	f043 0302 	orr.w	r3, r3, #2
 8003318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <HAL_SPI_MspInit+0x160>)
 800331e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800332a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800332e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	2302      	movs	r3, #2
 8003334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003344:	2305      	movs	r3, #5
 8003346:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800334e:	4619      	mov	r1, r3
 8003350:	4805      	ldr	r0, [pc, #20]	; (8003368 <HAL_SPI_MspInit+0x164>)
 8003352:	f005 fbef 	bl	8008b34 <HAL_GPIO_Init>
}
 8003356:	bf00      	nop
 8003358:	37f0      	adds	r7, #240	; 0xf0
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40013000 	.word	0x40013000
 8003364:	58024400 	.word	0x58024400
 8003368:	58020400 	.word	0x58020400
 800336c:	40003800 	.word	0x40003800

08003370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a46      	ldr	r2, [pc, #280]	; (8003498 <HAL_TIM_Base_MspInit+0x128>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d12f      	bne.n	80033e2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003382:	4b46      	ldr	r3, [pc, #280]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 8003384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003388:	4a44      	ldr	r2, [pc, #272]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003392:	4b42      	ldr	r3, [pc, #264]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 8003394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80033a0:	2200      	movs	r2, #0
 80033a2:	2105      	movs	r1, #5
 80033a4:	2018      	movs	r0, #24
 80033a6:	f002 f95b 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80033aa:	2018      	movs	r0, #24
 80033ac:	f002 f972 	bl	8005694 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2105      	movs	r1, #5
 80033b4:	2019      	movs	r0, #25
 80033b6:	f002 f953 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80033ba:	2019      	movs	r0, #25
 80033bc:	f002 f96a 	bl	8005694 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80033c0:	2200      	movs	r2, #0
 80033c2:	2105      	movs	r1, #5
 80033c4:	201a      	movs	r0, #26
 80033c6:	f002 f94b 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80033ca:	201a      	movs	r0, #26
 80033cc:	f002 f962 	bl	8005694 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	2105      	movs	r1, #5
 80033d4:	201b      	movs	r0, #27
 80033d6:	f002 f943 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80033da:	201b      	movs	r0, #27
 80033dc:	f002 f95a 	bl	8005694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80033e0:	e055      	b.n	800348e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d117      	bne.n	800341c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 80033ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033f2:	4a2a      	ldr	r2, [pc, #168]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033fc:	4b27      	ldr	r3, [pc, #156]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 80033fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800340a:	2200      	movs	r2, #0
 800340c:	2105      	movs	r1, #5
 800340e:	201c      	movs	r0, #28
 8003410:	f002 f926 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003414:	201c      	movs	r0, #28
 8003416:	f002 f93d 	bl	8005694 <HAL_NVIC_EnableIRQ>
}
 800341a:	e038      	b.n	800348e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <HAL_TIM_Base_MspInit+0x130>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d117      	bne.n	8003456 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 8003428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800342c:	4a1b      	ldr	r2, [pc, #108]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 8003438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003444:	2200      	movs	r2, #0
 8003446:	2105      	movs	r1, #5
 8003448:	201d      	movs	r0, #29
 800344a:	f002 f909 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800344e:	201d      	movs	r0, #29
 8003450:	f002 f920 	bl	8005694 <HAL_NVIC_EnableIRQ>
}
 8003454:	e01b      	b.n	800348e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <HAL_TIM_Base_MspInit+0x134>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d116      	bne.n	800348e <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 8003462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003466:	4a0d      	ldr	r2, [pc, #52]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003470:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_TIM_Base_MspInit+0x12c>)
 8003472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800347e:	2200      	movs	r2, #0
 8003480:	2105      	movs	r1, #5
 8003482:	201e      	movs	r0, #30
 8003484:	f002 f8ec 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003488:	201e      	movs	r0, #30
 800348a:	f002 f903 	bl	8005694 <HAL_NVIC_EnableIRQ>
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40010000 	.word	0x40010000
 800349c:	58024400 	.word	0x58024400
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800

080034a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a26      	ldr	r2, [pc, #152]	; (8003560 <HAL_TIM_MspPostInit+0xb8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d120      	bne.n	800350c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	4b26      	ldr	r3, [pc, #152]	; (8003564 <HAL_TIM_MspPostInit+0xbc>)
 80034cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d0:	4a24      	ldr	r2, [pc, #144]	; (8003564 <HAL_TIM_MspPostInit+0xbc>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034da:	4b22      	ldr	r3, [pc, #136]	; (8003564 <HAL_TIM_MspPostInit+0xbc>)
 80034dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034fa:	2301      	movs	r3, #1
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	4619      	mov	r1, r3
 8003504:	4818      	ldr	r0, [pc, #96]	; (8003568 <HAL_TIM_MspPostInit+0xc0>)
 8003506:	f005 fb15 	bl	8008b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800350a:	e024      	b.n	8003556 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d11f      	bne.n	8003556 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_TIM_MspPostInit+0xbc>)
 8003518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800351c:	4a11      	ldr	r2, [pc, #68]	; (8003564 <HAL_TIM_MspPostInit+0xbc>)
 800351e:	f043 0302 	orr.w	r3, r3, #2
 8003522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <HAL_TIM_MspPostInit+0xbc>)
 8003528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353a:	2302      	movs	r3, #2
 800353c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003546:	2301      	movs	r3, #1
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354a:	f107 0314 	add.w	r3, r7, #20
 800354e:	4619      	mov	r1, r3
 8003550:	4806      	ldr	r0, [pc, #24]	; (800356c <HAL_TIM_MspPostInit+0xc4>)
 8003552:	f005 faef 	bl	8008b34 <HAL_GPIO_Init>
}
 8003556:	bf00      	nop
 8003558:	3728      	adds	r7, #40	; 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000
 8003564:	58024400 	.word	0x58024400
 8003568:	58020000 	.word	0x58020000
 800356c:	58020400 	.word	0x58020400

08003570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b0ba      	sub	sp, #232	; 0xe8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	22c0      	movs	r2, #192	; 0xc0
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f012 fec3 	bl	801631c <memset>
  if(huart->Instance==USART1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a41      	ldr	r2, [pc, #260]	; (80036a0 <HAL_UART_MspInit+0x130>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d17b      	bne.n	8003698 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035a0:	f04f 0201 	mov.w	r2, #1
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035b2:	f107 0310 	add.w	r3, r7, #16
 80035b6:	4618      	mov	r0, r3
 80035b8:	f007 fb0c 	bl	800abd4 <HAL_RCCEx_PeriphCLKConfig>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80035c2:	f7ff fbc1 	bl	8002d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035c6:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_UART_MspInit+0x134>)
 80035c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035cc:	4a35      	ldr	r2, [pc, #212]	; (80036a4 <HAL_UART_MspInit+0x134>)
 80035ce:	f043 0310 	orr.w	r3, r3, #16
 80035d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035d6:	4b33      	ldr	r3, [pc, #204]	; (80036a4 <HAL_UART_MspInit+0x134>)
 80035d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e4:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <HAL_UART_MspInit+0x134>)
 80035e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ea:	4a2e      	ldr	r2, [pc, #184]	; (80036a4 <HAL_UART_MspInit+0x134>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035f4:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <HAL_UART_MspInit+0x134>)
 80035f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003602:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800361c:	2307      	movs	r3, #7
 800361e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003622:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003626:	4619      	mov	r1, r3
 8003628:	481f      	ldr	r0, [pc, #124]	; (80036a8 <HAL_UART_MspInit+0x138>)
 800362a:	f005 fa83 	bl	8008b34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800362e:	4b1f      	ldr	r3, [pc, #124]	; (80036ac <HAL_UART_MspInit+0x13c>)
 8003630:	4a1f      	ldr	r2, [pc, #124]	; (80036b0 <HAL_UART_MspInit+0x140>)
 8003632:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_UART_MspInit+0x13c>)
 8003636:	222a      	movs	r2, #42	; 0x2a
 8003638:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800363a:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <HAL_UART_MspInit+0x13c>)
 800363c:	2240      	movs	r2, #64	; 0x40
 800363e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_UART_MspInit+0x13c>)
 8003642:	2200      	movs	r2, #0
 8003644:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003646:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_UART_MspInit+0x13c>)
 8003648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800364c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800364e:	4b17      	ldr	r3, [pc, #92]	; (80036ac <HAL_UART_MspInit+0x13c>)
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <HAL_UART_MspInit+0x13c>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_UART_MspInit+0x13c>)
 800365c:	2200      	movs	r2, #0
 800365e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_UART_MspInit+0x13c>)
 8003662:	2200      	movs	r2, #0
 8003664:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_UART_MspInit+0x13c>)
 8003668:	2200      	movs	r2, #0
 800366a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800366c:	480f      	ldr	r0, [pc, #60]	; (80036ac <HAL_UART_MspInit+0x13c>)
 800366e:	f002 fc25 	bl	8005ebc <HAL_DMA_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003678:	f7ff fb66 	bl	8002d48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <HAL_UART_MspInit+0x13c>)
 8003680:	67da      	str	r2, [r3, #124]	; 0x7c
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_UART_MspInit+0x13c>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003688:	2200      	movs	r2, #0
 800368a:	2105      	movs	r1, #5
 800368c:	2025      	movs	r0, #37	; 0x25
 800368e:	f001 ffe7 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003692:	2025      	movs	r0, #37	; 0x25
 8003694:	f001 fffe 	bl	8005694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003698:	bf00      	nop
 800369a:	37e8      	adds	r7, #232	; 0xe8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40011000 	.word	0x40011000
 80036a4:	58024400 	.word	0x58024400
 80036a8:	58020000 	.word	0x58020000
 80036ac:	240006cc 	.word	0x240006cc
 80036b0:	40020040 	.word	0x40020040

080036b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b090      	sub	sp, #64	; 0x40
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	d827      	bhi.n	8003712 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80036c2:	2200      	movs	r2, #0
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	2036      	movs	r0, #54	; 0x36
 80036c8:	f001 ffca 	bl	8005660 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036cc:	2036      	movs	r0, #54	; 0x36
 80036ce:	f001 ffe1 	bl	8005694 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80036d2:	4a29      	ldr	r2, [pc, #164]	; (8003778 <HAL_InitTick+0xc4>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036d8:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_InitTick+0xc8>)
 80036da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036de:	4a27      	ldr	r2, [pc, #156]	; (800377c <HAL_InitTick+0xc8>)
 80036e0:	f043 0310 	orr.w	r3, r3, #16
 80036e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_InitTick+0xc8>)
 80036ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036f6:	f107 0210 	add.w	r2, r7, #16
 80036fa:	f107 0314 	add.w	r3, r7, #20
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f007 fa25 	bl	800ab50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <HAL_InitTick+0x6a>
 8003710:	e001      	b.n	8003716 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e02b      	b.n	800376e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003716:	f007 f9ef 	bl	800aaf8 <HAL_RCC_GetPCLK1Freq>
 800371a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800371c:	e004      	b.n	8003728 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800371e:	f007 f9eb 	bl	800aaf8 <HAL_RCC_GetPCLK1Freq>
 8003722:	4603      	mov	r3, r0
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372a:	4a15      	ldr	r2, [pc, #84]	; (8003780 <HAL_InitTick+0xcc>)
 800372c:	fba2 2303 	umull	r2, r3, r2, r3
 8003730:	0c9b      	lsrs	r3, r3, #18
 8003732:	3b01      	subs	r3, #1
 8003734:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003736:	4b13      	ldr	r3, [pc, #76]	; (8003784 <HAL_InitTick+0xd0>)
 8003738:	4a13      	ldr	r2, [pc, #76]	; (8003788 <HAL_InitTick+0xd4>)
 800373a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <HAL_InitTick+0xd0>)
 800373e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003742:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003744:	4a0f      	ldr	r2, [pc, #60]	; (8003784 <HAL_InitTick+0xd0>)
 8003746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003748:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800374a:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <HAL_InitTick+0xd0>)
 800374c:	2200      	movs	r2, #0
 800374e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <HAL_InitTick+0xd0>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003756:	480b      	ldr	r0, [pc, #44]	; (8003784 <HAL_InitTick+0xd0>)
 8003758:	f00a fead 	bl	800e4b6 <HAL_TIM_Base_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d104      	bne.n	800376c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003762:	4808      	ldr	r0, [pc, #32]	; (8003784 <HAL_InitTick+0xd0>)
 8003764:	f00a fefe 	bl	800e564 <HAL_TIM_Base_Start_IT>
 8003768:	4603      	mov	r3, r0
 800376a:	e000      	b.n	800376e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
}
 800376e:	4618      	mov	r0, r3
 8003770:	3740      	adds	r7, #64	; 0x40
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	24000098 	.word	0x24000098
 800377c:	58024400 	.word	0x58024400
 8003780:	431bde83 	.word	0x431bde83
 8003784:	240010b8 	.word	0x240010b8
 8003788:	40001000 	.word	0x40001000

0800378c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003790:	e7fe      	b.n	8003790 <NMI_Handler+0x4>

08003792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003792:	b480      	push	{r7}
 8003794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003796:	e7fe      	b.n	8003796 <HardFault_Handler+0x4>

08003798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800379c:	e7fe      	b.n	800379c <MemManage_Handler+0x4>

0800379e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037a2:	e7fe      	b.n	80037a2 <BusFault_Handler+0x4>

080037a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037a8:	e7fe      	b.n	80037a8 <UsageFault_Handler+0x4>

080037aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037bc:	4802      	ldr	r0, [pc, #8]	; (80037c8 <DMA1_Stream0_IRQHandler+0x10>)
 80037be:	f003 fea7 	bl	8007510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	24000204 	.word	0x24000204

080037cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80037d0:	4802      	ldr	r0, [pc, #8]	; (80037dc <DMA1_Stream1_IRQHandler+0x10>)
 80037d2:	f003 fe9d 	bl	8007510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	2400027c 	.word	0x2400027c

080037e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80037e4:	4802      	ldr	r0, [pc, #8]	; (80037f0 <DMA1_Stream2_IRQHandler+0x10>)
 80037e6:	f003 fe93 	bl	8007510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	240006cc 	.word	0x240006cc

080037f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80037f8:	4802      	ldr	r0, [pc, #8]	; (8003804 <DMA1_Stream5_IRQHandler+0x10>)
 80037fa:	f003 fe89 	bl	8007510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	24000308 	.word	0x24000308

08003808 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800380c:	4802      	ldr	r0, [pc, #8]	; (8003818 <TIM1_BRK_IRQHandler+0x10>)
 800380e:	f00b f9c0 	bl	800eb92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	24000508 	.word	0x24000508

0800381c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <TIM1_UP_IRQHandler+0x10>)
 8003822:	f00b f9b6 	bl	800eb92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	24000508 	.word	0x24000508

08003830 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003836:	f00b f9ac 	bl	800eb92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	24000508 	.word	0x24000508

08003844 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <TIM1_CC_IRQHandler+0x10>)
 800384a:	f00b f9a2 	bl	800eb92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	24000508 	.word	0x24000508

08003858 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <TIM2_IRQHandler+0x10>)
 800385e:	f00b f998 	bl	800eb92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	24000554 	.word	0x24000554

0800386c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <TIM3_IRQHandler+0x10>)
 8003872:	f00b f98e 	bl	800eb92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	240005a0 	.word	0x240005a0

08003880 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <TIM4_IRQHandler+0x10>)
 8003886:	f00b f984 	bl	800eb92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	240005ec 	.word	0x240005ec

08003894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <USART1_IRQHandler+0x10>)
 800389a:	f00c fc87 	bl	80101ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	24000638 	.word	0x24000638

080038a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <TIM6_DAC_IRQHandler+0x20>)
 80038ae:	791b      	ldrb	r3, [r3, #4]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80038b6:	4804      	ldr	r0, [pc, #16]	; (80038c8 <TIM6_DAC_IRQHandler+0x20>)
 80038b8:	f002 f881 	bl	80059be <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80038bc:	4803      	ldr	r0, [pc, #12]	; (80038cc <TIM6_DAC_IRQHandler+0x24>)
 80038be:	f00b f968 	bl	800eb92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	240002f4 	.word	0x240002f4
 80038cc:	240010b8 	.word	0x240010b8

080038d0 <ITM_SendChar>:
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <ITM_SendChar+0x48>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <ITM_SendChar+0x48>)
 80038e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <ITM_SendChar+0x4c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a0c      	ldr	r2, [pc, #48]	; (800391c <ITM_SendChar+0x4c>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	bf00      	nop
 80038f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f8      	beq.n	80038f4 <ITM_SendChar+0x24>
 8003902:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000edfc 	.word	0xe000edfc
 800391c:	e0000e00 	.word	0xe0000e00

08003920 <_read>:
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	e00a      	b.n	8003948 <_read+0x28>
 8003932:	f3af 8000 	nop.w
 8003936:	4601      	mov	r1, r0
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	60ba      	str	r2, [r7, #8]
 800393e:	b2ca      	uxtb	r2, r1
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	3301      	adds	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	dbf0      	blt.n	8003932 <_read+0x12>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <_write>:
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e009      	b.n	8003980 <_write+0x26>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	60ba      	str	r2, [r7, #8]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ffab 	bl	80038d0 <ITM_SendChar>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3301      	adds	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	dbf1      	blt.n	800396c <_write+0x12>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <_close>:
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <_fstat>:
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	2300      	movs	r3, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <_isatty>:
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	2301      	movs	r3, #1
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <_lseek>:
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	2300      	movs	r3, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <_sbrk>:
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <_sbrk+0x5c>)
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <_sbrk+0x60>)
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <_sbrk+0x64>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <_sbrk+0x22>
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <_sbrk+0x64>)
 8003a1a:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <_sbrk+0x68>)
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <_sbrk+0x64>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d207      	bcs.n	8003a3c <_sbrk+0x40>
 8003a2c:	f012 fc2e 	bl	801628c <__errno>
 8003a30:	4603      	mov	r3, r0
 8003a32:	220c      	movs	r2, #12
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a3a:	e009      	b.n	8003a50 <_sbrk+0x54>
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <_sbrk+0x64>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <_sbrk+0x64>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <_sbrk+0x64>)
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	24080000 	.word	0x24080000
 8003a5c:	00000400 	.word	0x00000400
 8003a60:	24001104 	.word	0x24001104
 8003a64:	24005a70 	.word	0x24005a70

08003a68 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003a6c:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <SystemInit+0xe4>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	4a36      	ldr	r2, [pc, #216]	; (8003b4c <SystemInit+0xe4>)
 8003a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003a7c:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <SystemInit+0xe8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d807      	bhi.n	8003a98 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003a88:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <SystemInit+0xe8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 030f 	bic.w	r3, r3, #15
 8003a90:	4a2f      	ldr	r2, [pc, #188]	; (8003b50 <SystemInit+0xe8>)
 8003a92:	f043 0307 	orr.w	r3, r3, #7
 8003a96:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003a98:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <SystemInit+0xec>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <SystemInit+0xec>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <SystemInit+0xec>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003aaa:	4b2a      	ldr	r3, [pc, #168]	; (8003b54 <SystemInit+0xec>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4929      	ldr	r1, [pc, #164]	; (8003b54 <SystemInit+0xec>)
 8003ab0:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <SystemInit+0xf0>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <SystemInit+0xe8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003ac2:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <SystemInit+0xe8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 030f 	bic.w	r3, r3, #15
 8003aca:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <SystemInit+0xe8>)
 8003acc:	f043 0307 	orr.w	r3, r3, #7
 8003ad0:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003ad2:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <SystemInit+0xec>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <SystemInit+0xec>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <SystemInit+0xec>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <SystemInit+0xec>)
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <SystemInit+0xf4>)
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003aea:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <SystemInit+0xec>)
 8003aec:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <SystemInit+0xf8>)
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003af0:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <SystemInit+0xec>)
 8003af2:	4a1c      	ldr	r2, [pc, #112]	; (8003b64 <SystemInit+0xfc>)
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003af6:	4b17      	ldr	r3, [pc, #92]	; (8003b54 <SystemInit+0xec>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003afc:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <SystemInit+0xec>)
 8003afe:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <SystemInit+0xfc>)
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003b02:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <SystemInit+0xec>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <SystemInit+0xec>)
 8003b0a:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <SystemInit+0xfc>)
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <SystemInit+0xec>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <SystemInit+0xec>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <SystemInit+0xec>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <SystemInit+0xec>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <SystemInit+0x100>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <SystemInit+0x104>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b32:	d202      	bcs.n	8003b3a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <SystemInit+0x108>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <SystemInit+0x10c>)
 8003b3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003b42:	bf00      	nop
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	e000ed00 	.word	0xe000ed00
 8003b50:	52002000 	.word	0x52002000
 8003b54:	58024400 	.word	0x58024400
 8003b58:	eaf6ed7f 	.word	0xeaf6ed7f
 8003b5c:	02020200 	.word	0x02020200
 8003b60:	01ff0000 	.word	0x01ff0000
 8003b64:	01010280 	.word	0x01010280
 8003b68:	5c001000 	.word	0x5c001000
 8003b6c:	ffff0000 	.word	0xffff0000
 8003b70:	51008108 	.word	0x51008108
 8003b74:	52004000 	.word	0x52004000

08003b78 <Reset_Handler>:
 8003b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bb0 <LoopFillZerobss+0xe>
 8003b7c:	f7ff ff74 	bl	8003a68 <SystemInit>
 8003b80:	480c      	ldr	r0, [pc, #48]	; (8003bb4 <LoopFillZerobss+0x12>)
 8003b82:	490d      	ldr	r1, [pc, #52]	; (8003bb8 <LoopFillZerobss+0x16>)
 8003b84:	4a0d      	ldr	r2, [pc, #52]	; (8003bbc <LoopFillZerobss+0x1a>)
 8003b86:	2300      	movs	r3, #0
 8003b88:	e002      	b.n	8003b90 <LoopCopyDataInit>

08003b8a <CopyDataInit>:
 8003b8a:	58d4      	ldr	r4, [r2, r3]
 8003b8c:	50c4      	str	r4, [r0, r3]
 8003b8e:	3304      	adds	r3, #4

08003b90 <LoopCopyDataInit>:
 8003b90:	18c4      	adds	r4, r0, r3
 8003b92:	428c      	cmp	r4, r1
 8003b94:	d3f9      	bcc.n	8003b8a <CopyDataInit>
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <LoopFillZerobss+0x1e>)
 8003b98:	4c0a      	ldr	r4, [pc, #40]	; (8003bc4 <LoopFillZerobss+0x22>)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e001      	b.n	8003ba2 <LoopFillZerobss>

08003b9e <FillZerobss>:
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	3204      	adds	r2, #4

08003ba2 <LoopFillZerobss>:
 8003ba2:	42a2      	cmp	r2, r4
 8003ba4:	d3fb      	bcc.n	8003b9e <FillZerobss>
 8003ba6:	f012 fb77 	bl	8016298 <__libc_init_array>
 8003baa:	f7fd f989 	bl	8000ec0 <main>
 8003bae:	4770      	bx	lr
 8003bb0:	24080000 	.word	0x24080000
 8003bb4:	24000000 	.word	0x24000000
 8003bb8:	24000108 	.word	0x24000108
 8003bbc:	08017198 	.word	0x08017198
 8003bc0:	24000120 	.word	0x24000120
 8003bc4:	24005a6c 	.word	0x24005a6c

08003bc8 <ADC3_IRQHandler>:
 8003bc8:	e7fe      	b.n	8003bc8 <ADC3_IRQHandler>
	...

08003bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd2:	2003      	movs	r0, #3
 8003bd4:	f001 fd39 	bl	800564a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bd8:	f006 fde4 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <HAL_Init+0x68>)
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	4913      	ldr	r1, [pc, #76]	; (8003c38 <HAL_Init+0x6c>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_Init+0x68>)
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	4a0e      	ldr	r2, [pc, #56]	; (8003c38 <HAL_Init+0x6c>)
 8003c00:	5cd3      	ldrb	r3, [r2, r3]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0c:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <HAL_Init+0x70>)
 8003c0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c10:	4a0b      	ldr	r2, [pc, #44]	; (8003c40 <HAL_Init+0x74>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c16:	2005      	movs	r0, #5
 8003c18:	f7ff fd4c 	bl	80036b4 <HAL_InitTick>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e002      	b.n	8003c2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c26:	f7ff f895 	bl	8002d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	58024400 	.word	0x58024400
 8003c38:	080170e4 	.word	0x080170e4
 8003c3c:	24000094 	.word	0x24000094
 8003c40:	24000090 	.word	0x24000090

08003c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_IncTick+0x20>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_IncTick+0x24>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4413      	add	r3, r2
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <HAL_IncTick+0x24>)
 8003c56:	6013      	str	r3, [r2, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	2400009c 	.word	0x2400009c
 8003c68:	24001108 	.word	0x24001108

08003c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_GetTick+0x14>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	24001108 	.word	0x24001108

08003c84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_GetREVID+0x14>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	0c1b      	lsrs	r3, r3, #16
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	5c001000 	.word	0x5c001000

08003c9c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	401a      	ands	r2, r3
 8003cb0:	4904      	ldr	r1, [pc, #16]	; (8003cc4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	58000400 	.word	0x58000400

08003cc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	609a      	str	r2, [r3, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3360      	adds	r3, #96	; 0x60
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	611a      	str	r2, [r3, #16]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b087      	sub	sp, #28
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3360      	adds	r3, #96	; 0x60
 8003db2:	461a      	mov	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	601a      	str	r2, [r3, #0]
  }
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b087      	sub	sp, #28
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3330      	adds	r3, #48	; 0x30
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	4413      	add	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	211f      	movs	r1, #31
 8003e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	401a      	ands	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	0e9b      	lsrs	r3, r3, #26
 8003e36:	f003 011f 	and.w	r1, r3, #31
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	431a      	orrs	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f023 0203 	bic.w	r2, r3, #3
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	0e5b      	lsrs	r3, r3, #25
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	4413      	add	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	0d1b      	lsrs	r3, r3, #20
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	2107      	movs	r1, #7
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	0d1b      	lsrs	r3, r3, #20
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f003 0318 	and.w	r3, r3, #24
 8003ef6:	4908      	ldr	r1, [pc, #32]	; (8003f18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ef8:	40d9      	lsrs	r1, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	400b      	ands	r3, r1
 8003efe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	000fffff 	.word	0x000fffff

08003f1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 031f 	and.w	r3, r3, #31
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6093      	str	r3, [r2, #8]
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	5fffffc0 	.word	0x5fffffc0

08003f5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f70:	d101      	bne.n	8003f76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	6fffffc0 	.word	0x6fffffc0

08003fac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc0:	d101      	bne.n	8003fc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <LL_ADC_Enable+0x24>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	f043 0201 	orr.w	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	7fffffc0 	.word	0x7fffffc0

08003ffc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <LL_ADC_Disable+0x24>)
 800400a:	4013      	ands	r3, r2
 800400c:	f043 0202 	orr.w	r2, r3, #2
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	7fffffc0 	.word	0x7fffffc0

08004024 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <LL_ADC_IsEnabled+0x18>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <LL_ADC_IsEnabled+0x1a>
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b02      	cmp	r3, #2
 800405c:	d101      	bne.n	8004062 <LL_ADC_IsDisableOngoing+0x18>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <LL_ADC_IsDisableOngoing+0x1a>
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <LL_ADC_REG_StartConversion+0x24>)
 800407e:	4013      	ands	r3, r2
 8004080:	f043 0204 	orr.w	r2, r3, #4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	7fffffc0 	.word	0x7fffffc0

08004098 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d101      	bne.n	80040b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d101      	bne.n	80040d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b089      	sub	sp, #36	; 0x24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e18f      	b.n	800441e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fe fe3f 	bl	8002d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff ff19 	bl	8003f5c <LL_ADC_IsDeepPowerDownEnabled>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d004      	beq.n	800413a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff feff 	bl	8003f38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff ff34 	bl	8003fac <LL_ADC_IsInternalRegulatorEnabled>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d114      	bne.n	8004174 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff ff18 	bl	8003f84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004154:	4b87      	ldr	r3, [pc, #540]	; (8004374 <HAL_ADC_Init+0x290>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	099b      	lsrs	r3, r3, #6
 800415a:	4a87      	ldr	r2, [pc, #540]	; (8004378 <HAL_ADC_Init+0x294>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	099b      	lsrs	r3, r3, #6
 8004162:	3301      	adds	r3, #1
 8004164:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004166:	e002      	b.n	800416e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	3b01      	subs	r3, #1
 800416c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f9      	bne.n	8004168 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ff17 	bl	8003fac <LL_ADC_IsInternalRegulatorEnabled>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10d      	bne.n	80041a0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	f043 0210 	orr.w	r2, r3, #16
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ff77 	bl	8004098 <LL_ADC_REG_IsConversionOngoing>
 80041aa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f040 8129 	bne.w	800440c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 8125 	bne.w	800440c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80041ca:	f043 0202 	orr.w	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff ff24 	bl	8004024 <LL_ADC_IsEnabled>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d136      	bne.n	8004250 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a65      	ldr	r2, [pc, #404]	; (800437c <HAL_ADC_Init+0x298>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d004      	beq.n	80041f6 <HAL_ADC_Init+0x112>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a63      	ldr	r2, [pc, #396]	; (8004380 <HAL_ADC_Init+0x29c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10e      	bne.n	8004214 <HAL_ADC_Init+0x130>
 80041f6:	4861      	ldr	r0, [pc, #388]	; (800437c <HAL_ADC_Init+0x298>)
 80041f8:	f7ff ff14 	bl	8004024 <LL_ADC_IsEnabled>
 80041fc:	4604      	mov	r4, r0
 80041fe:	4860      	ldr	r0, [pc, #384]	; (8004380 <HAL_ADC_Init+0x29c>)
 8004200:	f7ff ff10 	bl	8004024 <LL_ADC_IsEnabled>
 8004204:	4603      	mov	r3, r0
 8004206:	4323      	orrs	r3, r4
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	e008      	b.n	8004226 <HAL_ADC_Init+0x142>
 8004214:	485b      	ldr	r0, [pc, #364]	; (8004384 <HAL_ADC_Init+0x2a0>)
 8004216:	f7ff ff05 	bl	8004024 <LL_ADC_IsEnabled>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d012      	beq.n	8004250 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a53      	ldr	r2, [pc, #332]	; (800437c <HAL_ADC_Init+0x298>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_ADC_Init+0x15a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a51      	ldr	r2, [pc, #324]	; (8004380 <HAL_ADC_Init+0x29c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d101      	bne.n	8004242 <HAL_ADC_Init+0x15e>
 800423e:	4a52      	ldr	r2, [pc, #328]	; (8004388 <HAL_ADC_Init+0x2a4>)
 8004240:	e000      	b.n	8004244 <HAL_ADC_Init+0x160>
 8004242:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_ADC_Init+0x2a8>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f7ff fd3c 	bl	8003cc8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004250:	f7ff fd18 	bl	8003c84 <HAL_GetREVID>
 8004254:	4603      	mov	r3, r0
 8004256:	f241 0203 	movw	r2, #4099	; 0x1003
 800425a:	4293      	cmp	r3, r2
 800425c:	d914      	bls.n	8004288 <HAL_ADC_Init+0x1a4>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b10      	cmp	r3, #16
 8004264:	d110      	bne.n	8004288 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	7d5b      	ldrb	r3, [r3, #21]
 800426a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004270:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004276:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7f1b      	ldrb	r3, [r3, #28]
 800427c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800427e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004280:	f043 030c 	orr.w	r3, r3, #12
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	e00d      	b.n	80042a4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7d5b      	ldrb	r3, [r3, #21]
 800428c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004292:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004298:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7f1b      	ldrb	r3, [r3, #28]
 800429e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	7f1b      	ldrb	r3, [r3, #28]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d106      	bne.n	80042ba <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	045b      	lsls	r3, r3, #17
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <HAL_ADC_Init+0x2ac>)
 80042de:	4013      	ands	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	69b9      	ldr	r1, [r7, #24]
 80042e6:	430b      	orrs	r3, r1
 80042e8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fed2 	bl	8004098 <LL_ADC_REG_IsConversionOngoing>
 80042f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fedf 	bl	80040be <LL_ADC_INJ_IsConversionOngoing>
 8004300:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d15f      	bne.n	80043c8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d15c      	bne.n	80043c8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7d1b      	ldrb	r3, [r3, #20]
 8004312:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004318:	4313      	orrs	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <HAL_ADC_Init+0x2b0>)
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	69b9      	ldr	r1, [r7, #24]
 800432c:	430b      	orrs	r3, r1
 800432e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004336:	2b01      	cmp	r3, #1
 8004338:	d130      	bne.n	800439c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	4b14      	ldr	r3, [pc, #80]	; (8004398 <HAL_ADC_Init+0x2b4>)
 8004348:	4013      	ands	r3, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800434e:	3a01      	subs	r2, #1
 8004350:	0411      	lsls	r1, r2, #16
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004356:	4311      	orrs	r1, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800435c:	4311      	orrs	r1, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004362:	430a      	orrs	r2, r1
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	611a      	str	r2, [r3, #16]
 8004370:	e01c      	b.n	80043ac <HAL_ADC_Init+0x2c8>
 8004372:	bf00      	nop
 8004374:	24000090 	.word	0x24000090
 8004378:	053e2d63 	.word	0x053e2d63
 800437c:	40022000 	.word	0x40022000
 8004380:	40022100 	.word	0x40022100
 8004384:	58026000 	.word	0x58026000
 8004388:	40022300 	.word	0x40022300
 800438c:	58026300 	.word	0x58026300
 8004390:	fff0c003 	.word	0xfff0c003
 8004394:	ffffbffc 	.word	0xffffbffc
 8004398:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fdec 	bl	8004fa0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10c      	bne.n	80043ea <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f023 010f 	bic.w	r1, r3, #15
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	1e5a      	subs	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
 80043e8:	e007      	b.n	80043fa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 020f 	bic.w	r2, r2, #15
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	f043 0201 	orr.w	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	655a      	str	r2, [r3, #84]	; 0x54
 800440a:	e007      	b.n	800441c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	f043 0210 	orr.w	r2, r3, #16
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800441c:	7ffb      	ldrb	r3, [r7, #31]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3724      	adds	r7, #36	; 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd90      	pop	{r4, r7, pc}
 8004426:	bf00      	nop

08004428 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a55      	ldr	r2, [pc, #340]	; (8004590 <HAL_ADC_Start_DMA+0x168>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_ADC_Start_DMA+0x20>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a54      	ldr	r2, [pc, #336]	; (8004594 <HAL_ADC_Start_DMA+0x16c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <HAL_ADC_Start_DMA+0x24>
 8004448:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_ADC_Start_DMA+0x170>)
 800444a:	e000      	b.n	800444e <HAL_ADC_Start_DMA+0x26>
 800444c:	4b53      	ldr	r3, [pc, #332]	; (800459c <HAL_ADC_Start_DMA+0x174>)
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fd64 	bl	8003f1c <LL_ADC_GetMultimode>
 8004454:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fe1c 	bl	8004098 <LL_ADC_REG_IsConversionOngoing>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	f040 808c 	bne.w	8004580 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_ADC_Start_DMA+0x4e>
 8004472:	2302      	movs	r3, #2
 8004474:	e087      	b.n	8004586 <HAL_ADC_Start_DMA+0x15e>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b05      	cmp	r3, #5
 8004488:	d002      	beq.n	8004490 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b09      	cmp	r3, #9
 800448e:	d170      	bne.n	8004572 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fc07 	bl	8004ca4 <ADC_Enable>
 8004496:	4603      	mov	r3, r0
 8004498:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d163      	bne.n	8004568 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044a4:	4b3e      	ldr	r3, [pc, #248]	; (80045a0 <HAL_ADC_Start_DMA+0x178>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a37      	ldr	r2, [pc, #220]	; (8004594 <HAL_ADC_Start_DMA+0x16c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d002      	beq.n	80044c0 <HAL_ADC_Start_DMA+0x98>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	e000      	b.n	80044c2 <HAL_ADC_Start_DMA+0x9a>
 80044c0:	4b33      	ldr	r3, [pc, #204]	; (8004590 <HAL_ADC_Start_DMA+0x168>)
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d002      	beq.n	80044d0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	f023 0206 	bic.w	r2, r3, #6
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	659a      	str	r2, [r3, #88]	; 0x58
 80044f4:	e002      	b.n	80044fc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004500:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <HAL_ADC_Start_DMA+0x17c>)
 8004502:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <HAL_ADC_Start_DMA+0x180>)
 800450a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <HAL_ADC_Start_DMA+0x184>)
 8004512:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	221c      	movs	r2, #28
 800451a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0210 	orr.w	r2, r2, #16
 8004532:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f7ff fc89 	bl	8003e56 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3340      	adds	r3, #64	; 0x40
 800454e:	4619      	mov	r1, r3
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f002 f80e 	bl	8006574 <HAL_DMA_Start_IT>
 8004558:	4603      	mov	r3, r0
 800455a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fd85 	bl	8004070 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004566:	e00d      	b.n	8004584 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004570:	e008      	b.n	8004584 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800457e:	e001      	b.n	8004584 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004580:	2302      	movs	r3, #2
 8004582:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004584:	7dfb      	ldrb	r3, [r7, #23]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40022000 	.word	0x40022000
 8004594:	40022100 	.word	0x40022100
 8004598:	40022300 	.word	0x40022300
 800459c:	58026300 	.word	0x58026300
 80045a0:	fffff0fe 	.word	0xfffff0fe
 80045a4:	08004e77 	.word	0x08004e77
 80045a8:	08004f4f 	.word	0x08004f4f
 80045ac:	08004f6b 	.word	0x08004f6b

080045b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b0a1      	sub	sp, #132	; 0x84
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a65      	ldr	r2, [pc, #404]	; (800479c <HAL_ADC_ConfigChannel+0x1b0>)
 8004606:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x2a>
 8004612:	2302      	movs	r3, #2
 8004614:	e32e      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x688>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fd38 	bl	8004098 <LL_ADC_REG_IsConversionOngoing>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 8313 	bne.w	8004c56 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	db2c      	blt.n	8004692 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004640:	2b00      	cmp	r3, #0
 8004642:	d108      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x6a>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0e9b      	lsrs	r3, r3, #26
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	2201      	movs	r2, #1
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	e016      	b.n	8004684 <HAL_ADC_ConfigChannel+0x98>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004666:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800466e:	2320      	movs	r3, #32
 8004670:	e003      	b.n	800467a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2201      	movs	r2, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	69d1      	ldr	r1, [r2, #28]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	430b      	orrs	r3, r1
 8004690:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	f7ff fbad 	bl	8003dfe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fcf5 	bl	8004098 <LL_ADC_REG_IsConversionOngoing>
 80046ae:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fd02 	bl	80040be <LL_ADC_INJ_IsConversionOngoing>
 80046ba:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 80b8 	bne.w	8004834 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 80b4 	bne.w	8004834 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	461a      	mov	r2, r3
 80046da:	f7ff fbcf 	bl	8003e7c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046de:	4b30      	ldr	r3, [pc, #192]	; (80047a0 <HAL_ADC_ConfigChannel+0x1b4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80046e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ea:	d10b      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x118>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	e01d      	b.n	8004740 <HAL_ADC_ConfigChannel+0x154>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_ADC_ConfigChannel+0x13e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	e00a      	b.n	8004740 <HAL_ADC_ConfigChannel+0x154>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	089b      	lsrs	r3, r3, #2
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d02c      	beq.n	80047a4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6919      	ldr	r1, [r3, #16]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004758:	f7ff faea 	bl	8003d30 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	6919      	ldr	r1, [r3, #16]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	7e5b      	ldrb	r3, [r3, #25]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d102      	bne.n	8004772 <HAL_ADC_ConfigChannel+0x186>
 800476c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004770:	e000      	b.n	8004774 <HAL_ADC_ConfigChannel+0x188>
 8004772:	2300      	movs	r3, #0
 8004774:	461a      	mov	r2, r3
 8004776:	f7ff fb14 	bl	8003da2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6919      	ldr	r1, [r3, #16]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	7e1b      	ldrb	r3, [r3, #24]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d102      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x1a4>
 800478a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800478e:	e000      	b.n	8004792 <HAL_ADC_ConfigChannel+0x1a6>
 8004790:	2300      	movs	r3, #0
 8004792:	461a      	mov	r2, r3
 8004794:	f7ff faec 	bl	8003d70 <LL_ADC_SetDataRightShift>
 8004798:	e04c      	b.n	8004834 <HAL_ADC_ConfigChannel+0x248>
 800479a:	bf00      	nop
 800479c:	47ff0000 	.word	0x47ff0000
 80047a0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	069b      	lsls	r3, r3, #26
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d107      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047c6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	069b      	lsls	r3, r3, #26
 80047d8:	429a      	cmp	r2, r3
 80047da:	d107      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047ea:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	069b      	lsls	r3, r3, #26
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d107      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800480e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	069b      	lsls	r3, r3, #26
 8004820:	429a      	cmp	r2, r3
 8004822:	d107      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004832:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fbf3 	bl	8004024 <LL_ADC_IsEnabled>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 8211 	bne.w	8004c68 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6819      	ldr	r1, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	461a      	mov	r2, r3
 8004854:	f7ff fb3e 	bl	8003ed4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4aa1      	ldr	r2, [pc, #644]	; (8004ae4 <HAL_ADC_ConfigChannel+0x4f8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	f040 812e 	bne.w	8004ac0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <HAL_ADC_ConfigChannel+0x2a0>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	0e9b      	lsrs	r3, r3, #26
 800487a:	3301      	adds	r3, #1
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	2b09      	cmp	r3, #9
 8004882:	bf94      	ite	ls
 8004884:	2301      	movls	r3, #1
 8004886:	2300      	movhi	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e019      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x2d4>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004894:	fa93 f3a3 	rbit	r3, r3
 8004898:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800489a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800489e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80048a4:	2320      	movs	r3, #32
 80048a6:	e003      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80048a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048aa:	fab3 f383 	clz	r3, r3
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	3301      	adds	r3, #1
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2b09      	cmp	r3, #9
 80048b8:	bf94      	ite	ls
 80048ba:	2301      	movls	r3, #1
 80048bc:	2300      	movhi	r3, #0
 80048be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d079      	beq.n	80049b8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d107      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x2f4>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0e9b      	lsrs	r3, r3, #26
 80048d6:	3301      	adds	r3, #1
 80048d8:	069b      	lsls	r3, r3, #26
 80048da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048de:	e015      	b.n	800490c <HAL_ADC_ConfigChannel+0x320>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80048ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80048f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80048f8:	2320      	movs	r3, #32
 80048fa:	e003      	b.n	8004904 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80048fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	3301      	adds	r3, #1
 8004906:	069b      	lsls	r3, r3, #26
 8004908:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004914:	2b00      	cmp	r3, #0
 8004916:	d109      	bne.n	800492c <HAL_ADC_ConfigChannel+0x340>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	0e9b      	lsrs	r3, r3, #26
 800491e:	3301      	adds	r3, #1
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2101      	movs	r1, #1
 8004926:	fa01 f303 	lsl.w	r3, r1, r3
 800492a:	e017      	b.n	800495c <HAL_ADC_ConfigChannel+0x370>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004934:	fa93 f3a3 	rbit	r3, r3
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800493a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800493e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004944:	2320      	movs	r3, #32
 8004946:	e003      	b.n	8004950 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	3301      	adds	r3, #1
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2101      	movs	r1, #1
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	ea42 0103 	orr.w	r1, r2, r3
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x396>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	0e9b      	lsrs	r3, r3, #26
 8004972:	3301      	adds	r3, #1
 8004974:	f003 021f 	and.w	r2, r3, #31
 8004978:	4613      	mov	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4413      	add	r3, r2
 800497e:	051b      	lsls	r3, r3, #20
 8004980:	e018      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x3c8>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	fa93 f3a3 	rbit	r3, r3
 800498e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800499a:	2320      	movs	r3, #32
 800499c:	e003      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	fab3 f383 	clz	r3, r3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	3301      	adds	r3, #1
 80049a8:	f003 021f 	and.w	r2, r3, #31
 80049ac:	4613      	mov	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4413      	add	r3, r2
 80049b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049b4:	430b      	orrs	r3, r1
 80049b6:	e07e      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d107      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x3e8>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0e9b      	lsrs	r3, r3, #26
 80049ca:	3301      	adds	r3, #1
 80049cc:	069b      	lsls	r3, r3, #26
 80049ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049d2:	e015      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x414>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	fa93 f3a3 	rbit	r3, r3
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80049ec:	2320      	movs	r3, #32
 80049ee:	e003      	b.n	80049f8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	fab3 f383 	clz	r3, r3
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	3301      	adds	r3, #1
 80049fa:	069b      	lsls	r3, r3, #26
 80049fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x434>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	0e9b      	lsrs	r3, r3, #26
 8004a12:	3301      	adds	r3, #1
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	2101      	movs	r1, #1
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	e017      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x464>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	61bb      	str	r3, [r7, #24]
  return result;
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e003      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3301      	adds	r3, #1
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a50:	ea42 0103 	orr.w	r1, r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10d      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x490>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0e9b      	lsrs	r3, r3, #26
 8004a66:	3301      	adds	r3, #1
 8004a68:	f003 021f 	and.w	r2, r3, #31
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	4413      	add	r3, r2
 8004a72:	3b1e      	subs	r3, #30
 8004a74:	051b      	lsls	r3, r3, #20
 8004a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	e01b      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x4c8>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	fa93 f3a3 	rbit	r3, r3
 8004a88:	60fb      	str	r3, [r7, #12]
  return result;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004a94:	2320      	movs	r3, #32
 8004a96:	e003      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	f003 021f 	and.w	r2, r3, #31
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4413      	add	r3, r2
 8004aac:	3b1e      	subs	r3, #30
 8004aae:	051b      	lsls	r3, r3, #20
 8004ab0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	6892      	ldr	r2, [r2, #8]
 8004aba:	4619      	mov	r1, r3
 8004abc:	f7ff f9de 	bl	8003e7c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f280 80cf 	bge.w	8004c68 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a06      	ldr	r2, [pc, #24]	; (8004ae8 <HAL_ADC_ConfigChannel+0x4fc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_ADC_ConfigChannel+0x4f2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a04      	ldr	r2, [pc, #16]	; (8004aec <HAL_ADC_ConfigChannel+0x500>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10a      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x508>
 8004ade:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <HAL_ADC_ConfigChannel+0x504>)
 8004ae0:	e009      	b.n	8004af6 <HAL_ADC_ConfigChannel+0x50a>
 8004ae2:	bf00      	nop
 8004ae4:	47ff0000 	.word	0x47ff0000
 8004ae8:	40022000 	.word	0x40022000
 8004aec:	40022100 	.word	0x40022100
 8004af0:	40022300 	.word	0x40022300
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_ADC_ConfigChannel+0x690>)
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff f90c 	bl	8003d14 <LL_ADC_GetCommonPathInternalCh>
 8004afc:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a5f      	ldr	r2, [pc, #380]	; (8004c80 <HAL_ADC_ConfigChannel+0x694>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_ADC_ConfigChannel+0x526>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a5d      	ldr	r2, [pc, #372]	; (8004c84 <HAL_ADC_ConfigChannel+0x698>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d10e      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x544>
 8004b12:	485b      	ldr	r0, [pc, #364]	; (8004c80 <HAL_ADC_ConfigChannel+0x694>)
 8004b14:	f7ff fa86 	bl	8004024 <LL_ADC_IsEnabled>
 8004b18:	4604      	mov	r4, r0
 8004b1a:	485a      	ldr	r0, [pc, #360]	; (8004c84 <HAL_ADC_ConfigChannel+0x698>)
 8004b1c:	f7ff fa82 	bl	8004024 <LL_ADC_IsEnabled>
 8004b20:	4603      	mov	r3, r0
 8004b22:	4323      	orrs	r3, r4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e008      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x556>
 8004b30:	4855      	ldr	r0, [pc, #340]	; (8004c88 <HAL_ADC_ConfigChannel+0x69c>)
 8004b32:	f7ff fa77 	bl	8004024 <LL_ADC_IsEnabled>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d07d      	beq.n	8004c42 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a50      	ldr	r2, [pc, #320]	; (8004c8c <HAL_ADC_ConfigChannel+0x6a0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d130      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x5c6>
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d12b      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a4a      	ldr	r2, [pc, #296]	; (8004c88 <HAL_ADC_ConfigChannel+0x69c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	f040 8081 	bne.w	8004c68 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a45      	ldr	r2, [pc, #276]	; (8004c80 <HAL_ADC_ConfigChannel+0x694>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d004      	beq.n	8004b7a <HAL_ADC_ConfigChannel+0x58e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a43      	ldr	r2, [pc, #268]	; (8004c84 <HAL_ADC_ConfigChannel+0x698>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x592>
 8004b7a:	4a45      	ldr	r2, [pc, #276]	; (8004c90 <HAL_ADC_ConfigChannel+0x6a4>)
 8004b7c:	e000      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x594>
 8004b7e:	4a3f      	ldr	r2, [pc, #252]	; (8004c7c <HAL_ADC_ConfigChannel+0x690>)
 8004b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7ff f8b0 	bl	8003cee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b8e:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <HAL_ADC_ConfigChannel+0x6a8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	099b      	lsrs	r3, r3, #6
 8004b94:	4a40      	ldr	r2, [pc, #256]	; (8004c98 <HAL_ADC_ConfigChannel+0x6ac>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	099b      	lsrs	r3, r3, #6
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ba2:	e002      	b.n	8004baa <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f9      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bb0:	e05a      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a39      	ldr	r2, [pc, #228]	; (8004c9c <HAL_ADC_ConfigChannel+0x6b0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d11e      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x60e>
 8004bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d119      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <HAL_ADC_ConfigChannel+0x69c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d14b      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2a      	ldr	r2, [pc, #168]	; (8004c80 <HAL_ADC_ConfigChannel+0x694>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_ADC_ConfigChannel+0x5f8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <HAL_ADC_ConfigChannel+0x698>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d101      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x5fc>
 8004be4:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <HAL_ADC_ConfigChannel+0x6a4>)
 8004be6:	e000      	b.n	8004bea <HAL_ADC_ConfigChannel+0x5fe>
 8004be8:	4a24      	ldr	r2, [pc, #144]	; (8004c7c <HAL_ADC_ConfigChannel+0x690>)
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f7ff f87b 	bl	8003cee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bf8:	e036      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <HAL_ADC_ConfigChannel+0x6b4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d131      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x67c>
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d12c      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <HAL_ADC_ConfigChannel+0x69c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d127      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <HAL_ADC_ConfigChannel+0x694>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_ADC_ConfigChannel+0x640>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <HAL_ADC_ConfigChannel+0x698>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0x644>
 8004c2c:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <HAL_ADC_ConfigChannel+0x6a4>)
 8004c2e:	e000      	b.n	8004c32 <HAL_ADC_ConfigChannel+0x646>
 8004c30:	4a12      	ldr	r2, [pc, #72]	; (8004c7c <HAL_ADC_ConfigChannel+0x690>)
 8004c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	f7ff f857 	bl	8003cee <LL_ADC_SetCommonPathInternalCh>
 8004c40:	e012      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004c54:	e008      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	f043 0220 	orr.w	r2, r3, #32
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c70:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3784      	adds	r7, #132	; 0x84
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd90      	pop	{r4, r7, pc}
 8004c7c:	58026300 	.word	0x58026300
 8004c80:	40022000 	.word	0x40022000
 8004c84:	40022100 	.word	0x40022100
 8004c88:	58026000 	.word	0x58026000
 8004c8c:	cb840000 	.word	0xcb840000
 8004c90:	40022300 	.word	0x40022300
 8004c94:	24000090 	.word	0x24000090
 8004c98:	053e2d63 	.word	0x053e2d63
 8004c9c:	c7520000 	.word	0xc7520000
 8004ca0:	cfb80000 	.word	0xcfb80000

08004ca4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff f9b7 	bl	8004024 <LL_ADC_IsEnabled>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d16e      	bne.n	8004d9a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	4b38      	ldr	r3, [pc, #224]	; (8004da4 <ADC_Enable+0x100>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	f043 0210 	orr.w	r2, r3, #16
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cda:	f043 0201 	orr.w	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e05a      	b.n	8004d9c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff f972 	bl	8003fd4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004cf0:	f7fe ffbc 	bl	8003c6c <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <ADC_Enable+0x104>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <ADC_Enable+0x66>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a29      	ldr	r2, [pc, #164]	; (8004dac <ADC_Enable+0x108>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d101      	bne.n	8004d0e <ADC_Enable+0x6a>
 8004d0a:	4b29      	ldr	r3, [pc, #164]	; (8004db0 <ADC_Enable+0x10c>)
 8004d0c:	e000      	b.n	8004d10 <ADC_Enable+0x6c>
 8004d0e:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <ADC_Enable+0x110>)
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff f903 	bl	8003f1c <LL_ADC_GetMultimode>
 8004d16:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a23      	ldr	r2, [pc, #140]	; (8004dac <ADC_Enable+0x108>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d002      	beq.n	8004d28 <ADC_Enable+0x84>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	e000      	b.n	8004d2a <ADC_Enable+0x86>
 8004d28:	4b1f      	ldr	r3, [pc, #124]	; (8004da8 <ADC_Enable+0x104>)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02c      	beq.n	8004d8c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d130      	bne.n	8004d9a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d38:	e028      	b.n	8004d8c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff f970 	bl	8004024 <LL_ADC_IsEnabled>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff f940 	bl	8003fd4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d54:	f7fe ff8a 	bl	8003c6c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d914      	bls.n	8004d8c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d00d      	beq.n	8004d8c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	f043 0210 	orr.w	r2, r3, #16
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	f043 0201 	orr.w	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e007      	b.n	8004d9c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d1cf      	bne.n	8004d3a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	8000003f 	.word	0x8000003f
 8004da8:	40022000 	.word	0x40022000
 8004dac:	40022100 	.word	0x40022100
 8004db0:	40022300 	.word	0x40022300
 8004db4:	58026300 	.word	0x58026300

08004db8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff f940 	bl	800404a <LL_ADC_IsDisableOngoing>
 8004dca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff f927 	bl	8004024 <LL_ADC_IsEnabled>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d047      	beq.n	8004e6c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d144      	bne.n	8004e6c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 030d 	and.w	r3, r3, #13
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d10c      	bne.n	8004e0a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff f901 	bl	8003ffc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2203      	movs	r2, #3
 8004e00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e02:	f7fe ff33 	bl	8003c6c <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e08:	e029      	b.n	8004e5e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	f043 0210 	orr.w	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1a:	f043 0201 	orr.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e023      	b.n	8004e6e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e26:	f7fe ff21 	bl	8003c6c <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d914      	bls.n	8004e5e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00d      	beq.n	8004e5e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	f043 0210 	orr.w	r2, r3, #16
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	f043 0201 	orr.w	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e007      	b.n	8004e6e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1dc      	bne.n	8004e26 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d14b      	bne.n	8004f28 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d021      	beq.n	8004eee <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe ff92 	bl	8003dd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d032      	beq.n	8004f20 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d12b      	bne.n	8004f20 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d11f      	bne.n	8004f20 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	f043 0201 	orr.w	r2, r3, #1
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
 8004eec:	e018      	b.n	8004f20 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d111      	bne.n	8004f20 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f043 0201 	orr.w	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff fb45 	bl	80045b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f26:	e00e      	b.n	8004f46 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff fb4f 	bl	80045d8 <HAL_ADC_ErrorCallback>
}
 8004f3a:	e004      	b.n	8004f46 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7ff fb31 	bl	80045c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	f043 0204 	orr.w	r2, r3, #4
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff fb21 	bl	80045d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a7a      	ldr	r2, [pc, #488]	; (8005198 <ADC_ConfigureBoostMode+0x1f8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <ADC_ConfigureBoostMode+0x1c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a79      	ldr	r2, [pc, #484]	; (800519c <ADC_ConfigureBoostMode+0x1fc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d109      	bne.n	8004fd0 <ADC_ConfigureBoostMode+0x30>
 8004fbc:	4b78      	ldr	r3, [pc, #480]	; (80051a0 <ADC_ConfigureBoostMode+0x200>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bf14      	ite	ne
 8004fc8:	2301      	movne	r3, #1
 8004fca:	2300      	moveq	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	e008      	b.n	8004fe2 <ADC_ConfigureBoostMode+0x42>
 8004fd0:	4b74      	ldr	r3, [pc, #464]	; (80051a4 <ADC_ConfigureBoostMode+0x204>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01c      	beq.n	8005020 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004fe6:	f005 fd57 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 8004fea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ff4:	d010      	beq.n	8005018 <ADC_ConfigureBoostMode+0x78>
 8004ff6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ffa:	d873      	bhi.n	80050e4 <ADC_ConfigureBoostMode+0x144>
 8004ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005000:	d002      	beq.n	8005008 <ADC_ConfigureBoostMode+0x68>
 8005002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005006:	d16d      	bne.n	80050e4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	60fb      	str	r3, [r7, #12]
        break;
 8005016:	e068      	b.n	80050ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	60fb      	str	r3, [r7, #12]
        break;
 800501e:	e064      	b.n	80050ea <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005020:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005024:	f04f 0100 	mov.w	r1, #0
 8005028:	f006 ffde 	bl	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq>
 800502c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005036:	d051      	beq.n	80050dc <ADC_ConfigureBoostMode+0x13c>
 8005038:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800503c:	d854      	bhi.n	80050e8 <ADC_ConfigureBoostMode+0x148>
 800503e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005042:	d047      	beq.n	80050d4 <ADC_ConfigureBoostMode+0x134>
 8005044:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005048:	d84e      	bhi.n	80050e8 <ADC_ConfigureBoostMode+0x148>
 800504a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800504e:	d03d      	beq.n	80050cc <ADC_ConfigureBoostMode+0x12c>
 8005050:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005054:	d848      	bhi.n	80050e8 <ADC_ConfigureBoostMode+0x148>
 8005056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800505a:	d033      	beq.n	80050c4 <ADC_ConfigureBoostMode+0x124>
 800505c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005060:	d842      	bhi.n	80050e8 <ADC_ConfigureBoostMode+0x148>
 8005062:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005066:	d029      	beq.n	80050bc <ADC_ConfigureBoostMode+0x11c>
 8005068:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800506c:	d83c      	bhi.n	80050e8 <ADC_ConfigureBoostMode+0x148>
 800506e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005072:	d01a      	beq.n	80050aa <ADC_ConfigureBoostMode+0x10a>
 8005074:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005078:	d836      	bhi.n	80050e8 <ADC_ConfigureBoostMode+0x148>
 800507a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800507e:	d014      	beq.n	80050aa <ADC_ConfigureBoostMode+0x10a>
 8005080:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005084:	d830      	bhi.n	80050e8 <ADC_ConfigureBoostMode+0x148>
 8005086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800508a:	d00e      	beq.n	80050aa <ADC_ConfigureBoostMode+0x10a>
 800508c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005090:	d82a      	bhi.n	80050e8 <ADC_ConfigureBoostMode+0x148>
 8005092:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005096:	d008      	beq.n	80050aa <ADC_ConfigureBoostMode+0x10a>
 8005098:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800509c:	d824      	bhi.n	80050e8 <ADC_ConfigureBoostMode+0x148>
 800509e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050a2:	d002      	beq.n	80050aa <ADC_ConfigureBoostMode+0x10a>
 80050a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050a8:	d11e      	bne.n	80050e8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	0c9b      	lsrs	r3, r3, #18
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	60fb      	str	r3, [r7, #12]
        break;
 80050ba:	e016      	b.n	80050ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	60fb      	str	r3, [r7, #12]
        break;
 80050c2:	e012      	b.n	80050ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	60fb      	str	r3, [r7, #12]
        break;
 80050ca:	e00e      	b.n	80050ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	60fb      	str	r3, [r7, #12]
        break;
 80050d2:	e00a      	b.n	80050ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	09db      	lsrs	r3, r3, #7
 80050d8:	60fb      	str	r3, [r7, #12]
        break;
 80050da:	e006      	b.n	80050ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	60fb      	str	r3, [r7, #12]
        break;
 80050e2:	e002      	b.n	80050ea <ADC_ConfigureBoostMode+0x14a>
        break;
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80050e8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80050ea:	f7fe fdcb 	bl	8003c84 <HAL_GetREVID>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d815      	bhi.n	8005124 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a2b      	ldr	r2, [pc, #172]	; (80051a8 <ADC_ConfigureBoostMode+0x208>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d908      	bls.n	8005112 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005110:	e03e      	b.n	8005190 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005120:	609a      	str	r2, [r3, #8]
}
 8005122:	e035      	b.n	8005190 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <ADC_ConfigureBoostMode+0x20c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d808      	bhi.n	8005144 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005140:	609a      	str	r2, [r3, #8]
}
 8005142:	e025      	b.n	8005190 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <ADC_ConfigureBoostMode+0x210>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d80a      	bhi.n	8005162 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515e:	609a      	str	r2, [r3, #8]
}
 8005160:	e016      	b.n	8005190 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <ADC_ConfigureBoostMode+0x214>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d80a      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517c:	609a      	str	r2, [r3, #8]
}
 800517e:	e007      	b.n	8005190 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800518e:	609a      	str	r2, [r3, #8]
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40022000 	.word	0x40022000
 800519c:	40022100 	.word	0x40022100
 80051a0:	40022300 	.word	0x40022300
 80051a4:	58026300 	.word	0x58026300
 80051a8:	01312d00 	.word	0x01312d00
 80051ac:	005f5e10 	.word	0x005f5e10
 80051b0:	00bebc20 	.word	0x00bebc20
 80051b4:	017d7840 	.word	0x017d7840

080051b8 <LL_ADC_IsEnabled>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <LL_ADC_IsEnabled+0x18>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <LL_ADC_IsEnabled+0x1a>
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <LL_ADC_StartCalibration>:
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	4b09      	ldr	r3, [pc, #36]	; (8005218 <LL_ADC_StartCalibration+0x38>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005200:	430a      	orrs	r2, r1
 8005202:	4313      	orrs	r3, r2
 8005204:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	609a      	str	r2, [r3, #8]
}
 800520c:	bf00      	nop
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	3ffeffc0 	.word	0x3ffeffc0

0800521c <LL_ADC_IsCalibrationOnGoing>:
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800522c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005230:	d101      	bne.n	8005236 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <LL_ADC_REG_IsConversionOngoing>:
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b04      	cmp	r3, #4
 8005256:	d101      	bne.n	800525c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_ADCEx_Calibration_Start+0x1e>
 8005286:	2302      	movs	r3, #2
 8005288:	e04c      	b.n	8005324 <HAL_ADCEx_Calibration_Start+0xb8>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff fd90 	bl	8004db8 <ADC_Disable>
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d135      	bne.n	800530e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052a6:	4b21      	ldr	r3, [pc, #132]	; (800532c <HAL_ADCEx_Calibration_Start+0xc0>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	f043 0202 	orr.w	r2, r3, #2
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff ff90 	bl	80051e0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80052c0:	e014      	b.n	80052ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	3301      	adds	r3, #1
 80052c6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4a19      	ldr	r2, [pc, #100]	; (8005330 <HAL_ADCEx_Calibration_Start+0xc4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d30d      	bcc.n	80052ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	f023 0312 	bic.w	r3, r3, #18
 80052d8:	f043 0210 	orr.w	r2, r3, #16
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e01b      	b.n	8005324 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff93 	bl	800521c <LL_ADC_IsCalibrationOnGoing>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e2      	bne.n	80052c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005300:	f023 0303 	bic.w	r3, r3, #3
 8005304:	f043 0201 	orr.w	r2, r3, #1
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	655a      	str	r2, [r3, #84]	; 0x54
 800530c:	e005      	b.n	800531a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	f043 0210 	orr.w	r2, r3, #16
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005322:	7dfb      	ldrb	r3, [r7, #23]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	ffffeefd 	.word	0xffffeefd
 8005330:	25c3f800 	.word	0x25c3f800

08005334 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b09f      	sub	sp, #124	; 0x7c
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800534e:	2302      	movs	r3, #2
 8005350:	e0be      	b.n	80054d0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800535a:	2300      	movs	r3, #0
 800535c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800535e:	2300      	movs	r3, #0
 8005360:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a5c      	ldr	r2, [pc, #368]	; (80054d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d102      	bne.n	8005372 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800536c:	4b5b      	ldr	r3, [pc, #364]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	e001      	b.n	8005376 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10b      	bne.n	8005394 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	f043 0220 	orr.w	r2, r3, #32
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e09d      	b.n	80054d0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff ff54 	bl	8005244 <LL_ADC_REG_IsConversionOngoing>
 800539c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff ff4e 	bl	8005244 <LL_ADC_REG_IsConversionOngoing>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d17f      	bne.n	80054ae <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80053ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d17c      	bne.n	80054ae <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a47      	ldr	r2, [pc, #284]	; (80054d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a46      	ldr	r2, [pc, #280]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d101      	bne.n	80053cc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80053c8:	4b45      	ldr	r3, [pc, #276]	; (80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053ca:	e000      	b.n	80053ce <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80053cc:	4b45      	ldr	r3, [pc, #276]	; (80054e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053ce:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d039      	beq.n	800544c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80053d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a3a      	ldr	r2, [pc, #232]	; (80054d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a38      	ldr	r2, [pc, #224]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10e      	bne.n	800541c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80053fe:	4836      	ldr	r0, [pc, #216]	; (80054d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005400:	f7ff feda 	bl	80051b8 <LL_ADC_IsEnabled>
 8005404:	4604      	mov	r4, r0
 8005406:	4835      	ldr	r0, [pc, #212]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005408:	f7ff fed6 	bl	80051b8 <LL_ADC_IsEnabled>
 800540c:	4603      	mov	r3, r0
 800540e:	4323      	orrs	r3, r4
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	e008      	b.n	800542e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800541c:	4832      	ldr	r0, [pc, #200]	; (80054e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800541e:	f7ff fecb 	bl	80051b8 <LL_ADC_IsEnabled>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d047      	beq.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	4b2d      	ldr	r3, [pc, #180]	; (80054ec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005438:	4013      	ands	r3, r2
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	6811      	ldr	r1, [r2, #0]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	6892      	ldr	r2, [r2, #8]
 8005442:	430a      	orrs	r2, r1
 8005444:	431a      	orrs	r2, r3
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005448:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800544a:	e03a      	b.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800544c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005456:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d10e      	bne.n	800548a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800546c:	481a      	ldr	r0, [pc, #104]	; (80054d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800546e:	f7ff fea3 	bl	80051b8 <LL_ADC_IsEnabled>
 8005472:	4604      	mov	r4, r0
 8005474:	4819      	ldr	r0, [pc, #100]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005476:	f7ff fe9f 	bl	80051b8 <LL_ADC_IsEnabled>
 800547a:	4603      	mov	r3, r0
 800547c:	4323      	orrs	r3, r4
 800547e:	2b00      	cmp	r3, #0
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	e008      	b.n	800549c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800548a:	4817      	ldr	r0, [pc, #92]	; (80054e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800548c:	f7ff fe94 	bl	80051b8 <LL_ADC_IsEnabled>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	4b11      	ldr	r3, [pc, #68]	; (80054ec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054aa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054ac:	e009      	b.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80054c0:	e000      	b.n	80054c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054c2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80054cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	377c      	adds	r7, #124	; 0x7c
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd90      	pop	{r4, r7, pc}
 80054d8:	40022000 	.word	0x40022000
 80054dc:	40022100 	.word	0x40022100
 80054e0:	40022300 	.word	0x40022300
 80054e4:	58026300 	.word	0x58026300
 80054e8:	58026000 	.word	0x58026000
 80054ec:	fffff0e0 	.word	0xfffff0e0

080054f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <__NVIC_SetPriorityGrouping+0x40>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800550c:	4013      	ands	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <__NVIC_SetPriorityGrouping+0x44>)
 800551a:	4313      	orrs	r3, r2
 800551c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800551e:	4a04      	ldr	r2, [pc, #16]	; (8005530 <__NVIC_SetPriorityGrouping+0x40>)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	60d3      	str	r3, [r2, #12]
}
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	e000ed00 	.word	0xe000ed00
 8005534:	05fa0000 	.word	0x05fa0000

08005538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800553c:	4b04      	ldr	r3, [pc, #16]	; (8005550 <__NVIC_GetPriorityGrouping+0x18>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	0a1b      	lsrs	r3, r3, #8
 8005542:	f003 0307 	and.w	r3, r3, #7
}
 8005546:	4618      	mov	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	e000ed00 	.word	0xe000ed00

08005554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800555e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005562:	2b00      	cmp	r3, #0
 8005564:	db0b      	blt.n	800557e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	f003 021f 	and.w	r2, r3, #31
 800556c:	4907      	ldr	r1, [pc, #28]	; (800558c <__NVIC_EnableIRQ+0x38>)
 800556e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	2001      	movs	r0, #1
 8005576:	fa00 f202 	lsl.w	r2, r0, r2
 800557a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	e000e100 	.word	0xe000e100

08005590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	4603      	mov	r3, r0
 8005598:	6039      	str	r1, [r7, #0]
 800559a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800559c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	db0a      	blt.n	80055ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	490c      	ldr	r1, [pc, #48]	; (80055dc <__NVIC_SetPriority+0x4c>)
 80055aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055ae:	0112      	lsls	r2, r2, #4
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	440b      	add	r3, r1
 80055b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055b8:	e00a      	b.n	80055d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	4908      	ldr	r1, [pc, #32]	; (80055e0 <__NVIC_SetPriority+0x50>)
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	3b04      	subs	r3, #4
 80055c8:	0112      	lsls	r2, r2, #4
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	440b      	add	r3, r1
 80055ce:	761a      	strb	r2, [r3, #24]
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	e000e100 	.word	0xe000e100
 80055e0:	e000ed00 	.word	0xe000ed00

080055e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b089      	sub	sp, #36	; 0x24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f1c3 0307 	rsb	r3, r3, #7
 80055fe:	2b04      	cmp	r3, #4
 8005600:	bf28      	it	cs
 8005602:	2304      	movcs	r3, #4
 8005604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	3304      	adds	r3, #4
 800560a:	2b06      	cmp	r3, #6
 800560c:	d902      	bls.n	8005614 <NVIC_EncodePriority+0x30>
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3b03      	subs	r3, #3
 8005612:	e000      	b.n	8005616 <NVIC_EncodePriority+0x32>
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43da      	mvns	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	401a      	ands	r2, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800562c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	43d9      	mvns	r1, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800563c:	4313      	orrs	r3, r2
         );
}
 800563e:	4618      	mov	r0, r3
 8005640:	3724      	adds	r7, #36	; 0x24
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff ff4c 	bl	80054f0 <__NVIC_SetPriorityGrouping>
}
 8005658:	bf00      	nop
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800566e:	f7ff ff63 	bl	8005538 <__NVIC_GetPriorityGrouping>
 8005672:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	6978      	ldr	r0, [r7, #20]
 800567a:	f7ff ffb3 	bl	80055e4 <NVIC_EncodePriority>
 800567e:	4602      	mov	r2, r0
 8005680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005684:	4611      	mov	r1, r2
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff ff82 	bl	8005590 <__NVIC_SetPriority>
}
 800568c:	bf00      	nop
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800569e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff ff56 	bl	8005554 <__NVIC_EnableIRQ>
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e014      	b.n	80056ec <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	791b      	ldrb	r3, [r3, #4]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d105      	bne.n	80056d8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fd fc76 	bl	8002fc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e046      	b.n	8005796 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	795b      	ldrb	r3, [r3, #5]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_DAC_Start+0x20>
 8005710:	2302      	movs	r3, #2
 8005712:	e040      	b.n	8005796 <HAL_DAC_Start+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6819      	ldr	r1, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2201      	movs	r2, #1
 800572e:	409a      	lsls	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10f      	bne.n	800575e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005748:	2b02      	cmp	r3, #2
 800574a:	d11d      	bne.n	8005788 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	605a      	str	r2, [r3, #4]
 800575c:	e014      	b.n	8005788 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2102      	movs	r1, #2
 8005770:	fa01 f303 	lsl.w	r3, r1, r3
 8005774:	429a      	cmp	r2, r3
 8005776:	d107      	bne.n	8005788 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0202 	orr.w	r2, r2, #2
 8005786:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0a2      	b.n	8005902 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	795b      	ldrb	r3, [r3, #5]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_DAC_Start_DMA+0x24>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e09c      	b.n	8005902 <HAL_DAC_Start_DMA+0x15e>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2202      	movs	r2, #2
 80057d2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d129      	bne.n	800582e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	4a4b      	ldr	r2, [pc, #300]	; (800590c <HAL_DAC_Start_DMA+0x168>)
 80057e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	4a4a      	ldr	r2, [pc, #296]	; (8005910 <HAL_DAC_Start_DMA+0x16c>)
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	4a49      	ldr	r2, [pc, #292]	; (8005914 <HAL_DAC_Start_DMA+0x170>)
 80057f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005800:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_DAC_Start_DMA+0x6c>
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2b04      	cmp	r3, #4
 800580c:	d005      	beq.n	800581a <HAL_DAC_Start_DMA+0x76>
 800580e:	e009      	b.n	8005824 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3308      	adds	r3, #8
 8005816:	613b      	str	r3, [r7, #16]
        break;
 8005818:	e033      	b.n	8005882 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	613b      	str	r3, [r7, #16]
        break;
 8005822:	e02e      	b.n	8005882 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3310      	adds	r3, #16
 800582a:	613b      	str	r3, [r7, #16]
        break;
 800582c:	e029      	b.n	8005882 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	4a39      	ldr	r2, [pc, #228]	; (8005918 <HAL_DAC_Start_DMA+0x174>)
 8005834:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	4a38      	ldr	r2, [pc, #224]	; (800591c <HAL_DAC_Start_DMA+0x178>)
 800583c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4a37      	ldr	r2, [pc, #220]	; (8005920 <HAL_DAC_Start_DMA+0x17c>)
 8005844:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005854:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_DAC_Start_DMA+0xc0>
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	2b04      	cmp	r3, #4
 8005860:	d005      	beq.n	800586e <HAL_DAC_Start_DMA+0xca>
 8005862:	e009      	b.n	8005878 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3314      	adds	r3, #20
 800586a:	613b      	str	r3, [r7, #16]
        break;
 800586c:	e009      	b.n	8005882 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3318      	adds	r3, #24
 8005874:	613b      	str	r3, [r7, #16]
        break;
 8005876:	e004      	b.n	8005882 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	331c      	adds	r3, #28
 800587e:	613b      	str	r3, [r7, #16]
        break;
 8005880:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d111      	bne.n	80058ac <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005896:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6898      	ldr	r0, [r3, #8]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	f000 fe67 	bl	8006574 <HAL_DMA_Start_IT>
 80058a6:	4603      	mov	r3, r0
 80058a8:	75fb      	strb	r3, [r7, #23]
 80058aa:	e010      	b.n	80058ce <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80058ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68d8      	ldr	r0, [r3, #12]
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	f000 fe55 	bl	8006574 <HAL_DMA_Start_IT>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10c      	bne.n	80058f4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	2201      	movs	r2, #1
 80058e8:	409a      	lsls	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e005      	b.n	8005900 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f043 0204 	orr.w	r2, r3, #4
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005900:	7dfb      	ldrb	r3, [r7, #23]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	08005d95 	.word	0x08005d95
 8005910:	08005db7 	.word	0x08005db7
 8005914:	08005dd3 	.word	0x08005dd3
 8005918:	08005e51 	.word	0x08005e51
 800591c:	08005e73 	.word	0x08005e73
 8005920:	08005e8f 	.word	0x08005e8f

08005924 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e03e      	b.n	80059b6 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6819      	ldr	r1, [r3, #0]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43da      	mvns	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	400a      	ands	r2, r1
 8005954:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6819      	ldr	r1, [r3, #0]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2201      	movs	r2, #1
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	43da      	mvns	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	400a      	ands	r2, r1
 8005970:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10d      	bne.n	8005994 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4618      	mov	r0, r3
 800597e:	f001 f863 	bl	8006a48 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e00c      	b.n	80059ae <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4618      	mov	r0, r3
 800599a:	f001 f855 	bl	8006a48 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80059ac:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01d      	beq.n	8005a1c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d018      	beq.n	8005a1c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2204      	movs	r2, #4
 80059ee:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f043 0201 	orr.w	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a14:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f86f 	bl	8005afa <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01d      	beq.n	8005a62 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d018      	beq.n	8005a62 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2204      	movs	r2, #4
 8005a34:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f043 0202 	orr.w	r2, r3, #2
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005a4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005a5a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f9ed 	bl	8005e3c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e015      	b.n	8005ab2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d105      	bne.n	8005a9e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4413      	add	r3, r2
 8005a98:	3308      	adds	r3, #8
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	e004      	b.n	8005aa8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	371c      	adds	r7, #28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_DAC_ConfigChannel+0x1e>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e12a      	b.n	8005d88 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	795b      	ldrb	r3, [r3, #5]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_DAC_ConfigChannel+0x2e>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e124      	b.n	8005d88 <HAL_DAC_ConfigChannel+0x278>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2202      	movs	r2, #2
 8005b48:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d17a      	bne.n	8005c48 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005b52:	f7fe f88b 	bl	8003c6c <HAL_GetTick>
 8005b56:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d13d      	bne.n	8005bda <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b5e:	e018      	b.n	8005b92 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b60:	f7fe f884 	bl	8003c6c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d911      	bls.n	8005b92 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b74:	4b86      	ldr	r3, [pc, #536]	; (8005d90 <HAL_DAC_ConfigChannel+0x280>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f043 0208 	orr.w	r2, r3, #8
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e0fa      	b.n	8005d88 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b98:	4b7d      	ldr	r3, [pc, #500]	; (8005d90 <HAL_DAC_ConfigChannel+0x280>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1df      	bne.n	8005b60 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	6992      	ldr	r2, [r2, #24]
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8005baa:	e020      	b.n	8005bee <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005bac:	f7fe f85e 	bl	8003c6c <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d90f      	bls.n	8005bda <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	da0a      	bge.n	8005bda <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f043 0208 	orr.w	r2, r3, #8
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e0d6      	b.n	8005d88 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dbe3      	blt.n	8005bac <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	6992      	ldr	r2, [r2, #24]
 8005bec:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	ea02 0103 	and.w	r1, r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	409a      	lsls	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	21ff      	movs	r1, #255	; 0xff
 8005c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	ea02 0103 	and.w	r1, r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6a1a      	ldr	r2, [r3, #32]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	409a      	lsls	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d11d      	bne.n	8005c8c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	221f      	movs	r2, #31
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	43db      	mvns	r3, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c92:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f003 0310 	and.w	r3, r3, #16
 8005c9a:	2207      	movs	r2, #7
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d102      	bne.n	8005cb6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb4:	e00f      	b.n	8005cd6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d102      	bne.n	8005cc4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc2:	e008      	b.n	8005cd6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd0:	e001      	b.n	8005cd6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6819      	ldr	r1, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43da      	mvns	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	400a      	ands	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6819      	ldr	r1, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	22c0      	movs	r2, #192	; 0xc0
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	400a      	ands	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005d84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3728      	adds	r7, #40	; 0x28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20008000 	.word	0x20008000

08005d94 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7ff fe8b 	bl	8005abe <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	711a      	strb	r2, [r3, #4]
}
 8005dae:	bf00      	nop
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff fe84 	bl	8005ad2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f043 0204 	orr.w	r2, r3, #4
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7ff fe7a 	bl	8005ae6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	711a      	strb	r2, [r3, #4]
}
 8005df8:	bf00      	nop
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff ffce 	bl	8005e00 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	711a      	strb	r2, [r3, #4]
}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff ffc7 	bl	8005e14 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f043 0204 	orr.w	r2, r3, #4
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7ff ffbd 	bl	8005e28 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	711a      	strb	r2, [r3, #4]
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005ec4:	f7fd fed2 	bl	8003c6c <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e316      	b.n	8006502 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a66      	ldr	r2, [pc, #408]	; (8006074 <HAL_DMA_Init+0x1b8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d04a      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a65      	ldr	r2, [pc, #404]	; (8006078 <HAL_DMA_Init+0x1bc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d045      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a63      	ldr	r2, [pc, #396]	; (800607c <HAL_DMA_Init+0x1c0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d040      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a62      	ldr	r2, [pc, #392]	; (8006080 <HAL_DMA_Init+0x1c4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d03b      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a60      	ldr	r2, [pc, #384]	; (8006084 <HAL_DMA_Init+0x1c8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d036      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a5f      	ldr	r2, [pc, #380]	; (8006088 <HAL_DMA_Init+0x1cc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d031      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a5d      	ldr	r2, [pc, #372]	; (800608c <HAL_DMA_Init+0x1d0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d02c      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a5c      	ldr	r2, [pc, #368]	; (8006090 <HAL_DMA_Init+0x1d4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d027      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a5a      	ldr	r2, [pc, #360]	; (8006094 <HAL_DMA_Init+0x1d8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d022      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a59      	ldr	r2, [pc, #356]	; (8006098 <HAL_DMA_Init+0x1dc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d01d      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a57      	ldr	r2, [pc, #348]	; (800609c <HAL_DMA_Init+0x1e0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d018      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a56      	ldr	r2, [pc, #344]	; (80060a0 <HAL_DMA_Init+0x1e4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d013      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a54      	ldr	r2, [pc, #336]	; (80060a4 <HAL_DMA_Init+0x1e8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00e      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a53      	ldr	r2, [pc, #332]	; (80060a8 <HAL_DMA_Init+0x1ec>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a51      	ldr	r2, [pc, #324]	; (80060ac <HAL_DMA_Init+0x1f0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <HAL_DMA_Init+0xb8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a50      	ldr	r2, [pc, #320]	; (80060b0 <HAL_DMA_Init+0x1f4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d101      	bne.n	8005f78 <HAL_DMA_Init+0xbc>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <HAL_DMA_Init+0xbe>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 813b 	beq.w	80061f6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a37      	ldr	r2, [pc, #220]	; (8006074 <HAL_DMA_Init+0x1b8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d04a      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a36      	ldr	r2, [pc, #216]	; (8006078 <HAL_DMA_Init+0x1bc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d045      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a34      	ldr	r2, [pc, #208]	; (800607c <HAL_DMA_Init+0x1c0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d040      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a33      	ldr	r2, [pc, #204]	; (8006080 <HAL_DMA_Init+0x1c4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d03b      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a31      	ldr	r2, [pc, #196]	; (8006084 <HAL_DMA_Init+0x1c8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d036      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a30      	ldr	r2, [pc, #192]	; (8006088 <HAL_DMA_Init+0x1cc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d031      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a2e      	ldr	r2, [pc, #184]	; (800608c <HAL_DMA_Init+0x1d0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d02c      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a2d      	ldr	r2, [pc, #180]	; (8006090 <HAL_DMA_Init+0x1d4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d027      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a2b      	ldr	r2, [pc, #172]	; (8006094 <HAL_DMA_Init+0x1d8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d022      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a2a      	ldr	r2, [pc, #168]	; (8006098 <HAL_DMA_Init+0x1dc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d01d      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a28      	ldr	r2, [pc, #160]	; (800609c <HAL_DMA_Init+0x1e0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d018      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a27      	ldr	r2, [pc, #156]	; (80060a0 <HAL_DMA_Init+0x1e4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a25      	ldr	r2, [pc, #148]	; (80060a4 <HAL_DMA_Init+0x1e8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a24      	ldr	r2, [pc, #144]	; (80060a8 <HAL_DMA_Init+0x1ec>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d009      	beq.n	8006030 <HAL_DMA_Init+0x174>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a22      	ldr	r2, [pc, #136]	; (80060ac <HAL_DMA_Init+0x1f0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_DMA_Init+0x174>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a21      	ldr	r2, [pc, #132]	; (80060b0 <HAL_DMA_Init+0x1f4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d108      	bne.n	8006042 <HAL_DMA_Init+0x186>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0201 	bic.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e007      	b.n	8006052 <HAL_DMA_Init+0x196>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006052:	e02f      	b.n	80060b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006054:	f7fd fe0a 	bl	8003c6c <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b05      	cmp	r3, #5
 8006060:	d928      	bls.n	80060b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2203      	movs	r2, #3
 800606c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e246      	b.n	8006502 <HAL_DMA_Init+0x646>
 8006074:	40020010 	.word	0x40020010
 8006078:	40020028 	.word	0x40020028
 800607c:	40020040 	.word	0x40020040
 8006080:	40020058 	.word	0x40020058
 8006084:	40020070 	.word	0x40020070
 8006088:	40020088 	.word	0x40020088
 800608c:	400200a0 	.word	0x400200a0
 8006090:	400200b8 	.word	0x400200b8
 8006094:	40020410 	.word	0x40020410
 8006098:	40020428 	.word	0x40020428
 800609c:	40020440 	.word	0x40020440
 80060a0:	40020458 	.word	0x40020458
 80060a4:	40020470 	.word	0x40020470
 80060a8:	40020488 	.word	0x40020488
 80060ac:	400204a0 	.word	0x400204a0
 80060b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1c8      	bne.n	8006054 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4b83      	ldr	r3, [pc, #524]	; (80062dc <HAL_DMA_Init+0x420>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80060da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	2b04      	cmp	r3, #4
 8006106:	d107      	bne.n	8006118 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	4313      	orrs	r3, r2
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006118:	4b71      	ldr	r3, [pc, #452]	; (80062e0 <HAL_DMA_Init+0x424>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	4b71      	ldr	r3, [pc, #452]	; (80062e4 <HAL_DMA_Init+0x428>)
 800611e:	4013      	ands	r3, r2
 8006120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006124:	d328      	bcc.n	8006178 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b28      	cmp	r3, #40	; 0x28
 800612c:	d903      	bls.n	8006136 <HAL_DMA_Init+0x27a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b2e      	cmp	r3, #46	; 0x2e
 8006134:	d917      	bls.n	8006166 <HAL_DMA_Init+0x2aa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b3e      	cmp	r3, #62	; 0x3e
 800613c:	d903      	bls.n	8006146 <HAL_DMA_Init+0x28a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b42      	cmp	r3, #66	; 0x42
 8006144:	d90f      	bls.n	8006166 <HAL_DMA_Init+0x2aa>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b46      	cmp	r3, #70	; 0x46
 800614c:	d903      	bls.n	8006156 <HAL_DMA_Init+0x29a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b48      	cmp	r3, #72	; 0x48
 8006154:	d907      	bls.n	8006166 <HAL_DMA_Init+0x2aa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b4e      	cmp	r3, #78	; 0x4e
 800615c:	d905      	bls.n	800616a <HAL_DMA_Init+0x2ae>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b52      	cmp	r3, #82	; 0x52
 8006164:	d801      	bhi.n	800616a <HAL_DMA_Init+0x2ae>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <HAL_DMA_Init+0x2b0>
 800616a:	2300      	movs	r3, #0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006176:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f023 0307 	bic.w	r3, r3, #7
 800618e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d117      	bne.n	80061d2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f002 fb33 	bl	8008820 <DMA_CheckFifoParam>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2240      	movs	r2, #64	; 0x40
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e197      	b.n	8006502 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f002 fa6e 	bl	80086bc <DMA_CalcBaseAndBitshift>
 80061e0:	4603      	mov	r3, r0
 80061e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	223f      	movs	r2, #63	; 0x3f
 80061ee:	409a      	lsls	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	609a      	str	r2, [r3, #8]
 80061f4:	e0cd      	b.n	8006392 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a3b      	ldr	r2, [pc, #236]	; (80062e8 <HAL_DMA_Init+0x42c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d022      	beq.n	8006246 <HAL_DMA_Init+0x38a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a39      	ldr	r2, [pc, #228]	; (80062ec <HAL_DMA_Init+0x430>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d01d      	beq.n	8006246 <HAL_DMA_Init+0x38a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a38      	ldr	r2, [pc, #224]	; (80062f0 <HAL_DMA_Init+0x434>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d018      	beq.n	8006246 <HAL_DMA_Init+0x38a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a36      	ldr	r2, [pc, #216]	; (80062f4 <HAL_DMA_Init+0x438>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_DMA_Init+0x38a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a35      	ldr	r2, [pc, #212]	; (80062f8 <HAL_DMA_Init+0x43c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00e      	beq.n	8006246 <HAL_DMA_Init+0x38a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a33      	ldr	r2, [pc, #204]	; (80062fc <HAL_DMA_Init+0x440>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d009      	beq.n	8006246 <HAL_DMA_Init+0x38a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a32      	ldr	r2, [pc, #200]	; (8006300 <HAL_DMA_Init+0x444>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <HAL_DMA_Init+0x38a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a30      	ldr	r2, [pc, #192]	; (8006304 <HAL_DMA_Init+0x448>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_DMA_Init+0x38e>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <HAL_DMA_Init+0x390>
 800624a:	2300      	movs	r3, #0
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8097 	beq.w	8006380 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a24      	ldr	r2, [pc, #144]	; (80062e8 <HAL_DMA_Init+0x42c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d021      	beq.n	80062a0 <HAL_DMA_Init+0x3e4>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a22      	ldr	r2, [pc, #136]	; (80062ec <HAL_DMA_Init+0x430>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01c      	beq.n	80062a0 <HAL_DMA_Init+0x3e4>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a21      	ldr	r2, [pc, #132]	; (80062f0 <HAL_DMA_Init+0x434>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d017      	beq.n	80062a0 <HAL_DMA_Init+0x3e4>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1f      	ldr	r2, [pc, #124]	; (80062f4 <HAL_DMA_Init+0x438>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d012      	beq.n	80062a0 <HAL_DMA_Init+0x3e4>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <HAL_DMA_Init+0x43c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00d      	beq.n	80062a0 <HAL_DMA_Init+0x3e4>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1c      	ldr	r2, [pc, #112]	; (80062fc <HAL_DMA_Init+0x440>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d008      	beq.n	80062a0 <HAL_DMA_Init+0x3e4>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1b      	ldr	r2, [pc, #108]	; (8006300 <HAL_DMA_Init+0x444>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d003      	beq.n	80062a0 <HAL_DMA_Init+0x3e4>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a19      	ldr	r2, [pc, #100]	; (8006304 <HAL_DMA_Init+0x448>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4b12      	ldr	r3, [pc, #72]	; (8006308 <HAL_DMA_Init+0x44c>)
 80062be:	4013      	ands	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d020      	beq.n	800630c <HAL_DMA_Init+0x450>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b80      	cmp	r3, #128	; 0x80
 80062d0:	d102      	bne.n	80062d8 <HAL_DMA_Init+0x41c>
 80062d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062d6:	e01a      	b.n	800630e <HAL_DMA_Init+0x452>
 80062d8:	2300      	movs	r3, #0
 80062da:	e018      	b.n	800630e <HAL_DMA_Init+0x452>
 80062dc:	fe10803f 	.word	0xfe10803f
 80062e0:	5c001000 	.word	0x5c001000
 80062e4:	ffff0000 	.word	0xffff0000
 80062e8:	58025408 	.word	0x58025408
 80062ec:	5802541c 	.word	0x5802541c
 80062f0:	58025430 	.word	0x58025430
 80062f4:	58025444 	.word	0x58025444
 80062f8:	58025458 	.word	0x58025458
 80062fc:	5802546c 	.word	0x5802546c
 8006300:	58025480 	.word	0x58025480
 8006304:	58025494 	.word	0x58025494
 8006308:	fffe000f 	.word	0xfffe000f
 800630c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68d2      	ldr	r2, [r2, #12]
 8006312:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006314:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800631c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006324:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800632c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006334:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800633c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	461a      	mov	r2, r3
 8006352:	4b6e      	ldr	r3, [pc, #440]	; (800650c <HAL_DMA_Init+0x650>)
 8006354:	4413      	add	r3, r2
 8006356:	4a6e      	ldr	r2, [pc, #440]	; (8006510 <HAL_DMA_Init+0x654>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	091b      	lsrs	r3, r3, #4
 800635e:	009a      	lsls	r2, r3, #2
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f002 f9a9 	bl	80086bc <DMA_CalcBaseAndBitshift>
 800636a:	4603      	mov	r3, r0
 800636c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	2201      	movs	r2, #1
 8006378:	409a      	lsls	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	605a      	str	r2, [r3, #4]
 800637e:	e008      	b.n	8006392 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2240      	movs	r2, #64	; 0x40
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2203      	movs	r2, #3
 800638a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e0b7      	b.n	8006502 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a5f      	ldr	r2, [pc, #380]	; (8006514 <HAL_DMA_Init+0x658>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d072      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a5d      	ldr	r2, [pc, #372]	; (8006518 <HAL_DMA_Init+0x65c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d06d      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a5c      	ldr	r2, [pc, #368]	; (800651c <HAL_DMA_Init+0x660>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d068      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a5a      	ldr	r2, [pc, #360]	; (8006520 <HAL_DMA_Init+0x664>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d063      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a59      	ldr	r2, [pc, #356]	; (8006524 <HAL_DMA_Init+0x668>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d05e      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a57      	ldr	r2, [pc, #348]	; (8006528 <HAL_DMA_Init+0x66c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d059      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a56      	ldr	r2, [pc, #344]	; (800652c <HAL_DMA_Init+0x670>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d054      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a54      	ldr	r2, [pc, #336]	; (8006530 <HAL_DMA_Init+0x674>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d04f      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a53      	ldr	r2, [pc, #332]	; (8006534 <HAL_DMA_Init+0x678>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d04a      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a51      	ldr	r2, [pc, #324]	; (8006538 <HAL_DMA_Init+0x67c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d045      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a50      	ldr	r2, [pc, #320]	; (800653c <HAL_DMA_Init+0x680>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d040      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a4e      	ldr	r2, [pc, #312]	; (8006540 <HAL_DMA_Init+0x684>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d03b      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a4d      	ldr	r2, [pc, #308]	; (8006544 <HAL_DMA_Init+0x688>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d036      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a4b      	ldr	r2, [pc, #300]	; (8006548 <HAL_DMA_Init+0x68c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d031      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a4a      	ldr	r2, [pc, #296]	; (800654c <HAL_DMA_Init+0x690>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d02c      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a48      	ldr	r2, [pc, #288]	; (8006550 <HAL_DMA_Init+0x694>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d027      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a47      	ldr	r2, [pc, #284]	; (8006554 <HAL_DMA_Init+0x698>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d022      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a45      	ldr	r2, [pc, #276]	; (8006558 <HAL_DMA_Init+0x69c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01d      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a44      	ldr	r2, [pc, #272]	; (800655c <HAL_DMA_Init+0x6a0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d018      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a42      	ldr	r2, [pc, #264]	; (8006560 <HAL_DMA_Init+0x6a4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a41      	ldr	r2, [pc, #260]	; (8006564 <HAL_DMA_Init+0x6a8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00e      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a3f      	ldr	r2, [pc, #252]	; (8006568 <HAL_DMA_Init+0x6ac>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a3e      	ldr	r2, [pc, #248]	; (800656c <HAL_DMA_Init+0x6b0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_DMA_Init+0x5c6>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a3c      	ldr	r2, [pc, #240]	; (8006570 <HAL_DMA_Init+0x6b4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d101      	bne.n	8006486 <HAL_DMA_Init+0x5ca>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <HAL_DMA_Init+0x5cc>
 8006486:	2300      	movs	r3, #0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d032      	beq.n	80064f2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f002 fa43 	bl	8008918 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2b80      	cmp	r3, #128	; 0x80
 8006498:	d102      	bne.n	80064a0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d010      	beq.n	80064e0 <HAL_DMA_Init+0x624>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d80c      	bhi.n	80064e0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f002 fac0 	bl	8008a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064dc:	605a      	str	r2, [r3, #4]
 80064de:	e008      	b.n	80064f2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	a7fdabf8 	.word	0xa7fdabf8
 8006510:	cccccccd 	.word	0xcccccccd
 8006514:	40020010 	.word	0x40020010
 8006518:	40020028 	.word	0x40020028
 800651c:	40020040 	.word	0x40020040
 8006520:	40020058 	.word	0x40020058
 8006524:	40020070 	.word	0x40020070
 8006528:	40020088 	.word	0x40020088
 800652c:	400200a0 	.word	0x400200a0
 8006530:	400200b8 	.word	0x400200b8
 8006534:	40020410 	.word	0x40020410
 8006538:	40020428 	.word	0x40020428
 800653c:	40020440 	.word	0x40020440
 8006540:	40020458 	.word	0x40020458
 8006544:	40020470 	.word	0x40020470
 8006548:	40020488 	.word	0x40020488
 800654c:	400204a0 	.word	0x400204a0
 8006550:	400204b8 	.word	0x400204b8
 8006554:	58025408 	.word	0x58025408
 8006558:	5802541c 	.word	0x5802541c
 800655c:	58025430 	.word	0x58025430
 8006560:	58025444 	.word	0x58025444
 8006564:	58025458 	.word	0x58025458
 8006568:	5802546c 	.word	0x5802546c
 800656c:	58025480 	.word	0x58025480
 8006570:	58025494 	.word	0x58025494

08006574 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e226      	b.n	80069de <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <HAL_DMA_Start_IT+0x2a>
 800659a:	2302      	movs	r3, #2
 800659c:	e21f      	b.n	80069de <HAL_DMA_Start_IT+0x46a>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	f040 820a 	bne.w	80069c8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a68      	ldr	r2, [pc, #416]	; (8006768 <HAL_DMA_Start_IT+0x1f4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d04a      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a66      	ldr	r2, [pc, #408]	; (800676c <HAL_DMA_Start_IT+0x1f8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d045      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a65      	ldr	r2, [pc, #404]	; (8006770 <HAL_DMA_Start_IT+0x1fc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d040      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a63      	ldr	r2, [pc, #396]	; (8006774 <HAL_DMA_Start_IT+0x200>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d03b      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a62      	ldr	r2, [pc, #392]	; (8006778 <HAL_DMA_Start_IT+0x204>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d036      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a60      	ldr	r2, [pc, #384]	; (800677c <HAL_DMA_Start_IT+0x208>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d031      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a5f      	ldr	r2, [pc, #380]	; (8006780 <HAL_DMA_Start_IT+0x20c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d02c      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a5d      	ldr	r2, [pc, #372]	; (8006784 <HAL_DMA_Start_IT+0x210>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d027      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a5c      	ldr	r2, [pc, #368]	; (8006788 <HAL_DMA_Start_IT+0x214>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d022      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a5a      	ldr	r2, [pc, #360]	; (800678c <HAL_DMA_Start_IT+0x218>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d01d      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a59      	ldr	r2, [pc, #356]	; (8006790 <HAL_DMA_Start_IT+0x21c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d018      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a57      	ldr	r2, [pc, #348]	; (8006794 <HAL_DMA_Start_IT+0x220>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d013      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a56      	ldr	r2, [pc, #344]	; (8006798 <HAL_DMA_Start_IT+0x224>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00e      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a54      	ldr	r2, [pc, #336]	; (800679c <HAL_DMA_Start_IT+0x228>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d009      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a53      	ldr	r2, [pc, #332]	; (80067a0 <HAL_DMA_Start_IT+0x22c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_DMA_Start_IT+0xee>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a51      	ldr	r2, [pc, #324]	; (80067a4 <HAL_DMA_Start_IT+0x230>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d108      	bne.n	8006674 <HAL_DMA_Start_IT+0x100>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0201 	bic.w	r2, r2, #1
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e007      	b.n	8006684 <HAL_DMA_Start_IT+0x110>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0201 	bic.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 fe6a 	bl	8008364 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a34      	ldr	r2, [pc, #208]	; (8006768 <HAL_DMA_Start_IT+0x1f4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d04a      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a33      	ldr	r2, [pc, #204]	; (800676c <HAL_DMA_Start_IT+0x1f8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d045      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a31      	ldr	r2, [pc, #196]	; (8006770 <HAL_DMA_Start_IT+0x1fc>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d040      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a30      	ldr	r2, [pc, #192]	; (8006774 <HAL_DMA_Start_IT+0x200>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d03b      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a2e      	ldr	r2, [pc, #184]	; (8006778 <HAL_DMA_Start_IT+0x204>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d036      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a2d      	ldr	r2, [pc, #180]	; (800677c <HAL_DMA_Start_IT+0x208>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d031      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a2b      	ldr	r2, [pc, #172]	; (8006780 <HAL_DMA_Start_IT+0x20c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d02c      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <HAL_DMA_Start_IT+0x210>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d027      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a28      	ldr	r2, [pc, #160]	; (8006788 <HAL_DMA_Start_IT+0x214>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d022      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a27      	ldr	r2, [pc, #156]	; (800678c <HAL_DMA_Start_IT+0x218>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d01d      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a25      	ldr	r2, [pc, #148]	; (8006790 <HAL_DMA_Start_IT+0x21c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d018      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a24      	ldr	r2, [pc, #144]	; (8006794 <HAL_DMA_Start_IT+0x220>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d013      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a22      	ldr	r2, [pc, #136]	; (8006798 <HAL_DMA_Start_IT+0x224>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00e      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a21      	ldr	r2, [pc, #132]	; (800679c <HAL_DMA_Start_IT+0x228>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d009      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1f      	ldr	r2, [pc, #124]	; (80067a0 <HAL_DMA_Start_IT+0x22c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <HAL_DMA_Start_IT+0x1bc>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <HAL_DMA_Start_IT+0x230>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d101      	bne.n	8006734 <HAL_DMA_Start_IT+0x1c0>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <HAL_DMA_Start_IT+0x1c2>
 8006734:	2300      	movs	r3, #0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d036      	beq.n	80067a8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f023 021e 	bic.w	r2, r3, #30
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0216 	orr.w	r2, r2, #22
 800674c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d03e      	beq.n	80067d4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0208 	orr.w	r2, r2, #8
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	e035      	b.n	80067d4 <HAL_DMA_Start_IT+0x260>
 8006768:	40020010 	.word	0x40020010
 800676c:	40020028 	.word	0x40020028
 8006770:	40020040 	.word	0x40020040
 8006774:	40020058 	.word	0x40020058
 8006778:	40020070 	.word	0x40020070
 800677c:	40020088 	.word	0x40020088
 8006780:	400200a0 	.word	0x400200a0
 8006784:	400200b8 	.word	0x400200b8
 8006788:	40020410 	.word	0x40020410
 800678c:	40020428 	.word	0x40020428
 8006790:	40020440 	.word	0x40020440
 8006794:	40020458 	.word	0x40020458
 8006798:	40020470 	.word	0x40020470
 800679c:	40020488 	.word	0x40020488
 80067a0:	400204a0 	.word	0x400204a0
 80067a4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f023 020e 	bic.w	r2, r3, #14
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 020a 	orr.w	r2, r2, #10
 80067ba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0204 	orr.w	r2, r2, #4
 80067d2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a83      	ldr	r2, [pc, #524]	; (80069e8 <HAL_DMA_Start_IT+0x474>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d072      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a82      	ldr	r2, [pc, #520]	; (80069ec <HAL_DMA_Start_IT+0x478>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d06d      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a80      	ldr	r2, [pc, #512]	; (80069f0 <HAL_DMA_Start_IT+0x47c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d068      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a7f      	ldr	r2, [pc, #508]	; (80069f4 <HAL_DMA_Start_IT+0x480>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d063      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a7d      	ldr	r2, [pc, #500]	; (80069f8 <HAL_DMA_Start_IT+0x484>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d05e      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a7c      	ldr	r2, [pc, #496]	; (80069fc <HAL_DMA_Start_IT+0x488>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d059      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a7a      	ldr	r2, [pc, #488]	; (8006a00 <HAL_DMA_Start_IT+0x48c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d054      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a79      	ldr	r2, [pc, #484]	; (8006a04 <HAL_DMA_Start_IT+0x490>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d04f      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a77      	ldr	r2, [pc, #476]	; (8006a08 <HAL_DMA_Start_IT+0x494>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d04a      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a76      	ldr	r2, [pc, #472]	; (8006a0c <HAL_DMA_Start_IT+0x498>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d045      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a74      	ldr	r2, [pc, #464]	; (8006a10 <HAL_DMA_Start_IT+0x49c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d040      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a73      	ldr	r2, [pc, #460]	; (8006a14 <HAL_DMA_Start_IT+0x4a0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d03b      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a71      	ldr	r2, [pc, #452]	; (8006a18 <HAL_DMA_Start_IT+0x4a4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d036      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a70      	ldr	r2, [pc, #448]	; (8006a1c <HAL_DMA_Start_IT+0x4a8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d031      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a6e      	ldr	r2, [pc, #440]	; (8006a20 <HAL_DMA_Start_IT+0x4ac>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d02c      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6d      	ldr	r2, [pc, #436]	; (8006a24 <HAL_DMA_Start_IT+0x4b0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d027      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a6b      	ldr	r2, [pc, #428]	; (8006a28 <HAL_DMA_Start_IT+0x4b4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d022      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a6a      	ldr	r2, [pc, #424]	; (8006a2c <HAL_DMA_Start_IT+0x4b8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d01d      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a68      	ldr	r2, [pc, #416]	; (8006a30 <HAL_DMA_Start_IT+0x4bc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d018      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a67      	ldr	r2, [pc, #412]	; (8006a34 <HAL_DMA_Start_IT+0x4c0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a65      	ldr	r2, [pc, #404]	; (8006a38 <HAL_DMA_Start_IT+0x4c4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00e      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a64      	ldr	r2, [pc, #400]	; (8006a3c <HAL_DMA_Start_IT+0x4c8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d009      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a62      	ldr	r2, [pc, #392]	; (8006a40 <HAL_DMA_Start_IT+0x4cc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_DMA_Start_IT+0x350>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a61      	ldr	r2, [pc, #388]	; (8006a44 <HAL_DMA_Start_IT+0x4d0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d101      	bne.n	80068c8 <HAL_DMA_Start_IT+0x354>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <HAL_DMA_Start_IT+0x356>
 80068c8:	2300      	movs	r3, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01a      	beq.n	8006904 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d007      	beq.n	80068ec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006902:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a37      	ldr	r2, [pc, #220]	; (80069e8 <HAL_DMA_Start_IT+0x474>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d04a      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a36      	ldr	r2, [pc, #216]	; (80069ec <HAL_DMA_Start_IT+0x478>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d045      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a34      	ldr	r2, [pc, #208]	; (80069f0 <HAL_DMA_Start_IT+0x47c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d040      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a33      	ldr	r2, [pc, #204]	; (80069f4 <HAL_DMA_Start_IT+0x480>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d03b      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a31      	ldr	r2, [pc, #196]	; (80069f8 <HAL_DMA_Start_IT+0x484>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d036      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a30      	ldr	r2, [pc, #192]	; (80069fc <HAL_DMA_Start_IT+0x488>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d031      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a2e      	ldr	r2, [pc, #184]	; (8006a00 <HAL_DMA_Start_IT+0x48c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d02c      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a2d      	ldr	r2, [pc, #180]	; (8006a04 <HAL_DMA_Start_IT+0x490>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d027      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a2b      	ldr	r2, [pc, #172]	; (8006a08 <HAL_DMA_Start_IT+0x494>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d022      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2a      	ldr	r2, [pc, #168]	; (8006a0c <HAL_DMA_Start_IT+0x498>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d01d      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a28      	ldr	r2, [pc, #160]	; (8006a10 <HAL_DMA_Start_IT+0x49c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d018      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a27      	ldr	r2, [pc, #156]	; (8006a14 <HAL_DMA_Start_IT+0x4a0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a25      	ldr	r2, [pc, #148]	; (8006a18 <HAL_DMA_Start_IT+0x4a4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00e      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a24      	ldr	r2, [pc, #144]	; (8006a1c <HAL_DMA_Start_IT+0x4a8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a22      	ldr	r2, [pc, #136]	; (8006a20 <HAL_DMA_Start_IT+0x4ac>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_DMA_Start_IT+0x430>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a21      	ldr	r2, [pc, #132]	; (8006a24 <HAL_DMA_Start_IT+0x4b0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d108      	bne.n	80069b6 <HAL_DMA_Start_IT+0x442>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e012      	b.n	80069dc <HAL_DMA_Start_IT+0x468>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0201 	orr.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	e009      	b.n	80069dc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40020010 	.word	0x40020010
 80069ec:	40020028 	.word	0x40020028
 80069f0:	40020040 	.word	0x40020040
 80069f4:	40020058 	.word	0x40020058
 80069f8:	40020070 	.word	0x40020070
 80069fc:	40020088 	.word	0x40020088
 8006a00:	400200a0 	.word	0x400200a0
 8006a04:	400200b8 	.word	0x400200b8
 8006a08:	40020410 	.word	0x40020410
 8006a0c:	40020428 	.word	0x40020428
 8006a10:	40020440 	.word	0x40020440
 8006a14:	40020458 	.word	0x40020458
 8006a18:	40020470 	.word	0x40020470
 8006a1c:	40020488 	.word	0x40020488
 8006a20:	400204a0 	.word	0x400204a0
 8006a24:	400204b8 	.word	0x400204b8
 8006a28:	58025408 	.word	0x58025408
 8006a2c:	5802541c 	.word	0x5802541c
 8006a30:	58025430 	.word	0x58025430
 8006a34:	58025444 	.word	0x58025444
 8006a38:	58025458 	.word	0x58025458
 8006a3c:	5802546c 	.word	0x5802546c
 8006a40:	58025480 	.word	0x58025480
 8006a44:	58025494 	.word	0x58025494

08006a48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006a50:	f7fd f90c 	bl	8003c6c <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e2dc      	b.n	800701a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d008      	beq.n	8006a7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2280      	movs	r2, #128	; 0x80
 8006a70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e2cd      	b.n	800701a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a76      	ldr	r2, [pc, #472]	; (8006c5c <HAL_DMA_Abort+0x214>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d04a      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a74      	ldr	r2, [pc, #464]	; (8006c60 <HAL_DMA_Abort+0x218>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d045      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a73      	ldr	r2, [pc, #460]	; (8006c64 <HAL_DMA_Abort+0x21c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d040      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a71      	ldr	r2, [pc, #452]	; (8006c68 <HAL_DMA_Abort+0x220>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d03b      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a70      	ldr	r2, [pc, #448]	; (8006c6c <HAL_DMA_Abort+0x224>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d036      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a6e      	ldr	r2, [pc, #440]	; (8006c70 <HAL_DMA_Abort+0x228>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d031      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a6d      	ldr	r2, [pc, #436]	; (8006c74 <HAL_DMA_Abort+0x22c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d02c      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a6b      	ldr	r2, [pc, #428]	; (8006c78 <HAL_DMA_Abort+0x230>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d027      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a6a      	ldr	r2, [pc, #424]	; (8006c7c <HAL_DMA_Abort+0x234>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d022      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a68      	ldr	r2, [pc, #416]	; (8006c80 <HAL_DMA_Abort+0x238>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d01d      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a67      	ldr	r2, [pc, #412]	; (8006c84 <HAL_DMA_Abort+0x23c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d018      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a65      	ldr	r2, [pc, #404]	; (8006c88 <HAL_DMA_Abort+0x240>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d013      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a64      	ldr	r2, [pc, #400]	; (8006c8c <HAL_DMA_Abort+0x244>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00e      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a62      	ldr	r2, [pc, #392]	; (8006c90 <HAL_DMA_Abort+0x248>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d009      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a61      	ldr	r2, [pc, #388]	; (8006c94 <HAL_DMA_Abort+0x24c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d004      	beq.n	8006b1e <HAL_DMA_Abort+0xd6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a5f      	ldr	r2, [pc, #380]	; (8006c98 <HAL_DMA_Abort+0x250>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d101      	bne.n	8006b22 <HAL_DMA_Abort+0xda>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <HAL_DMA_Abort+0xdc>
 8006b22:	2300      	movs	r3, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d013      	beq.n	8006b50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 021e 	bic.w	r2, r2, #30
 8006b36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695a      	ldr	r2, [r3, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	e00a      	b.n	8006b66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 020e 	bic.w	r2, r2, #14
 8006b5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a3c      	ldr	r2, [pc, #240]	; (8006c5c <HAL_DMA_Abort+0x214>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d072      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a3a      	ldr	r2, [pc, #232]	; (8006c60 <HAL_DMA_Abort+0x218>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d06d      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a39      	ldr	r2, [pc, #228]	; (8006c64 <HAL_DMA_Abort+0x21c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d068      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a37      	ldr	r2, [pc, #220]	; (8006c68 <HAL_DMA_Abort+0x220>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d063      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a36      	ldr	r2, [pc, #216]	; (8006c6c <HAL_DMA_Abort+0x224>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d05e      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a34      	ldr	r2, [pc, #208]	; (8006c70 <HAL_DMA_Abort+0x228>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d059      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a33      	ldr	r2, [pc, #204]	; (8006c74 <HAL_DMA_Abort+0x22c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d054      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a31      	ldr	r2, [pc, #196]	; (8006c78 <HAL_DMA_Abort+0x230>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d04f      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a30      	ldr	r2, [pc, #192]	; (8006c7c <HAL_DMA_Abort+0x234>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d04a      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a2e      	ldr	r2, [pc, #184]	; (8006c80 <HAL_DMA_Abort+0x238>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d045      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a2d      	ldr	r2, [pc, #180]	; (8006c84 <HAL_DMA_Abort+0x23c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d040      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a2b      	ldr	r2, [pc, #172]	; (8006c88 <HAL_DMA_Abort+0x240>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d03b      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a2a      	ldr	r2, [pc, #168]	; (8006c8c <HAL_DMA_Abort+0x244>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d036      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a28      	ldr	r2, [pc, #160]	; (8006c90 <HAL_DMA_Abort+0x248>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d031      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a27      	ldr	r2, [pc, #156]	; (8006c94 <HAL_DMA_Abort+0x24c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d02c      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a25      	ldr	r2, [pc, #148]	; (8006c98 <HAL_DMA_Abort+0x250>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d027      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a24      	ldr	r2, [pc, #144]	; (8006c9c <HAL_DMA_Abort+0x254>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d022      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a22      	ldr	r2, [pc, #136]	; (8006ca0 <HAL_DMA_Abort+0x258>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d01d      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a21      	ldr	r2, [pc, #132]	; (8006ca4 <HAL_DMA_Abort+0x25c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d018      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1f      	ldr	r2, [pc, #124]	; (8006ca8 <HAL_DMA_Abort+0x260>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1e      	ldr	r2, [pc, #120]	; (8006cac <HAL_DMA_Abort+0x264>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00e      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1c      	ldr	r2, [pc, #112]	; (8006cb0 <HAL_DMA_Abort+0x268>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d009      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <HAL_DMA_Abort+0x26c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d004      	beq.n	8006c56 <HAL_DMA_Abort+0x20e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <HAL_DMA_Abort+0x270>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d132      	bne.n	8006cbc <HAL_DMA_Abort+0x274>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e031      	b.n	8006cbe <HAL_DMA_Abort+0x276>
 8006c5a:	bf00      	nop
 8006c5c:	40020010 	.word	0x40020010
 8006c60:	40020028 	.word	0x40020028
 8006c64:	40020040 	.word	0x40020040
 8006c68:	40020058 	.word	0x40020058
 8006c6c:	40020070 	.word	0x40020070
 8006c70:	40020088 	.word	0x40020088
 8006c74:	400200a0 	.word	0x400200a0
 8006c78:	400200b8 	.word	0x400200b8
 8006c7c:	40020410 	.word	0x40020410
 8006c80:	40020428 	.word	0x40020428
 8006c84:	40020440 	.word	0x40020440
 8006c88:	40020458 	.word	0x40020458
 8006c8c:	40020470 	.word	0x40020470
 8006c90:	40020488 	.word	0x40020488
 8006c94:	400204a0 	.word	0x400204a0
 8006c98:	400204b8 	.word	0x400204b8
 8006c9c:	58025408 	.word	0x58025408
 8006ca0:	5802541c 	.word	0x5802541c
 8006ca4:	58025430 	.word	0x58025430
 8006ca8:	58025444 	.word	0x58025444
 8006cac:	58025458 	.word	0x58025458
 8006cb0:	5802546c 	.word	0x5802546c
 8006cb4:	58025480 	.word	0x58025480
 8006cb8:	58025494 	.word	0x58025494
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a6d      	ldr	r2, [pc, #436]	; (8006e8c <HAL_DMA_Abort+0x444>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d04a      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a6b      	ldr	r2, [pc, #428]	; (8006e90 <HAL_DMA_Abort+0x448>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d045      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a6a      	ldr	r2, [pc, #424]	; (8006e94 <HAL_DMA_Abort+0x44c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d040      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a68      	ldr	r2, [pc, #416]	; (8006e98 <HAL_DMA_Abort+0x450>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d03b      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a67      	ldr	r2, [pc, #412]	; (8006e9c <HAL_DMA_Abort+0x454>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d036      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a65      	ldr	r2, [pc, #404]	; (8006ea0 <HAL_DMA_Abort+0x458>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d031      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a64      	ldr	r2, [pc, #400]	; (8006ea4 <HAL_DMA_Abort+0x45c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d02c      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a62      	ldr	r2, [pc, #392]	; (8006ea8 <HAL_DMA_Abort+0x460>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d027      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a61      	ldr	r2, [pc, #388]	; (8006eac <HAL_DMA_Abort+0x464>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d022      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a5f      	ldr	r2, [pc, #380]	; (8006eb0 <HAL_DMA_Abort+0x468>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01d      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a5e      	ldr	r2, [pc, #376]	; (8006eb4 <HAL_DMA_Abort+0x46c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d018      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a5c      	ldr	r2, [pc, #368]	; (8006eb8 <HAL_DMA_Abort+0x470>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d013      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a5b      	ldr	r2, [pc, #364]	; (8006ebc <HAL_DMA_Abort+0x474>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00e      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a59      	ldr	r2, [pc, #356]	; (8006ec0 <HAL_DMA_Abort+0x478>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d009      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a58      	ldr	r2, [pc, #352]	; (8006ec4 <HAL_DMA_Abort+0x47c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d004      	beq.n	8006d72 <HAL_DMA_Abort+0x32a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a56      	ldr	r2, [pc, #344]	; (8006ec8 <HAL_DMA_Abort+0x480>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d108      	bne.n	8006d84 <HAL_DMA_Abort+0x33c>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0201 	bic.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	e007      	b.n	8006d94 <HAL_DMA_Abort+0x34c>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0201 	bic.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d94:	e013      	b.n	8006dbe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d96:	f7fc ff69 	bl	8003c6c <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b05      	cmp	r3, #5
 8006da2:	d90c      	bls.n	8006dbe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2203      	movs	r2, #3
 8006dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e12d      	b.n	800701a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e5      	bne.n	8006d96 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a2f      	ldr	r2, [pc, #188]	; (8006e8c <HAL_DMA_Abort+0x444>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d04a      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a2d      	ldr	r2, [pc, #180]	; (8006e90 <HAL_DMA_Abort+0x448>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d045      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a2c      	ldr	r2, [pc, #176]	; (8006e94 <HAL_DMA_Abort+0x44c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d040      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a2a      	ldr	r2, [pc, #168]	; (8006e98 <HAL_DMA_Abort+0x450>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d03b      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a29      	ldr	r2, [pc, #164]	; (8006e9c <HAL_DMA_Abort+0x454>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d036      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a27      	ldr	r2, [pc, #156]	; (8006ea0 <HAL_DMA_Abort+0x458>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d031      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a26      	ldr	r2, [pc, #152]	; (8006ea4 <HAL_DMA_Abort+0x45c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d02c      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a24      	ldr	r2, [pc, #144]	; (8006ea8 <HAL_DMA_Abort+0x460>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d027      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a23      	ldr	r2, [pc, #140]	; (8006eac <HAL_DMA_Abort+0x464>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d022      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a21      	ldr	r2, [pc, #132]	; (8006eb0 <HAL_DMA_Abort+0x468>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d01d      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <HAL_DMA_Abort+0x46c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d018      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1e      	ldr	r2, [pc, #120]	; (8006eb8 <HAL_DMA_Abort+0x470>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d013      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1d      	ldr	r2, [pc, #116]	; (8006ebc <HAL_DMA_Abort+0x474>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00e      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1b      	ldr	r2, [pc, #108]	; (8006ec0 <HAL_DMA_Abort+0x478>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d009      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ec4 <HAL_DMA_Abort+0x47c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d004      	beq.n	8006e6a <HAL_DMA_Abort+0x422>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a18      	ldr	r2, [pc, #96]	; (8006ec8 <HAL_DMA_Abort+0x480>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d101      	bne.n	8006e6e <HAL_DMA_Abort+0x426>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <HAL_DMA_Abort+0x428>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d02b      	beq.n	8006ecc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e78:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	223f      	movs	r2, #63	; 0x3f
 8006e84:	409a      	lsls	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	609a      	str	r2, [r3, #8]
 8006e8a:	e02a      	b.n	8006ee2 <HAL_DMA_Abort+0x49a>
 8006e8c:	40020010 	.word	0x40020010
 8006e90:	40020028 	.word	0x40020028
 8006e94:	40020040 	.word	0x40020040
 8006e98:	40020058 	.word	0x40020058
 8006e9c:	40020070 	.word	0x40020070
 8006ea0:	40020088 	.word	0x40020088
 8006ea4:	400200a0 	.word	0x400200a0
 8006ea8:	400200b8 	.word	0x400200b8
 8006eac:	40020410 	.word	0x40020410
 8006eb0:	40020428 	.word	0x40020428
 8006eb4:	40020440 	.word	0x40020440
 8006eb8:	40020458 	.word	0x40020458
 8006ebc:	40020470 	.word	0x40020470
 8006ec0:	40020488 	.word	0x40020488
 8006ec4:	400204a0 	.word	0x400204a0
 8006ec8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	2201      	movs	r2, #1
 8006edc:	409a      	lsls	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a4f      	ldr	r2, [pc, #316]	; (8007024 <HAL_DMA_Abort+0x5dc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d072      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a4d      	ldr	r2, [pc, #308]	; (8007028 <HAL_DMA_Abort+0x5e0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d06d      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a4c      	ldr	r2, [pc, #304]	; (800702c <HAL_DMA_Abort+0x5e4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d068      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a4a      	ldr	r2, [pc, #296]	; (8007030 <HAL_DMA_Abort+0x5e8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d063      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a49      	ldr	r2, [pc, #292]	; (8007034 <HAL_DMA_Abort+0x5ec>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d05e      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a47      	ldr	r2, [pc, #284]	; (8007038 <HAL_DMA_Abort+0x5f0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d059      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a46      	ldr	r2, [pc, #280]	; (800703c <HAL_DMA_Abort+0x5f4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d054      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a44      	ldr	r2, [pc, #272]	; (8007040 <HAL_DMA_Abort+0x5f8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d04f      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a43      	ldr	r2, [pc, #268]	; (8007044 <HAL_DMA_Abort+0x5fc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d04a      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a41      	ldr	r2, [pc, #260]	; (8007048 <HAL_DMA_Abort+0x600>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d045      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a40      	ldr	r2, [pc, #256]	; (800704c <HAL_DMA_Abort+0x604>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d040      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a3e      	ldr	r2, [pc, #248]	; (8007050 <HAL_DMA_Abort+0x608>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d03b      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a3d      	ldr	r2, [pc, #244]	; (8007054 <HAL_DMA_Abort+0x60c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d036      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a3b      	ldr	r2, [pc, #236]	; (8007058 <HAL_DMA_Abort+0x610>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d031      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a3a      	ldr	r2, [pc, #232]	; (800705c <HAL_DMA_Abort+0x614>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d02c      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a38      	ldr	r2, [pc, #224]	; (8007060 <HAL_DMA_Abort+0x618>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d027      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a37      	ldr	r2, [pc, #220]	; (8007064 <HAL_DMA_Abort+0x61c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d022      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a35      	ldr	r2, [pc, #212]	; (8007068 <HAL_DMA_Abort+0x620>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01d      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a34      	ldr	r2, [pc, #208]	; (800706c <HAL_DMA_Abort+0x624>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d018      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a32      	ldr	r2, [pc, #200]	; (8007070 <HAL_DMA_Abort+0x628>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a31      	ldr	r2, [pc, #196]	; (8007074 <HAL_DMA_Abort+0x62c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a2f      	ldr	r2, [pc, #188]	; (8007078 <HAL_DMA_Abort+0x630>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2e      	ldr	r2, [pc, #184]	; (800707c <HAL_DMA_Abort+0x634>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_DMA_Abort+0x58a>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2c      	ldr	r2, [pc, #176]	; (8007080 <HAL_DMA_Abort+0x638>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d101      	bne.n	8006fd6 <HAL_DMA_Abort+0x58e>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <HAL_DMA_Abort+0x590>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d015      	beq.n	8007008 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fe4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00c      	beq.n	8007008 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ffc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007006:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40020010 	.word	0x40020010
 8007028:	40020028 	.word	0x40020028
 800702c:	40020040 	.word	0x40020040
 8007030:	40020058 	.word	0x40020058
 8007034:	40020070 	.word	0x40020070
 8007038:	40020088 	.word	0x40020088
 800703c:	400200a0 	.word	0x400200a0
 8007040:	400200b8 	.word	0x400200b8
 8007044:	40020410 	.word	0x40020410
 8007048:	40020428 	.word	0x40020428
 800704c:	40020440 	.word	0x40020440
 8007050:	40020458 	.word	0x40020458
 8007054:	40020470 	.word	0x40020470
 8007058:	40020488 	.word	0x40020488
 800705c:	400204a0 	.word	0x400204a0
 8007060:	400204b8 	.word	0x400204b8
 8007064:	58025408 	.word	0x58025408
 8007068:	5802541c 	.word	0x5802541c
 800706c:	58025430 	.word	0x58025430
 8007070:	58025444 	.word	0x58025444
 8007074:	58025458 	.word	0x58025458
 8007078:	5802546c 	.word	0x5802546c
 800707c:	58025480 	.word	0x58025480
 8007080:	58025494 	.word	0x58025494

08007084 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e237      	b.n	8007506 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d004      	beq.n	80070ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2280      	movs	r2, #128	; 0x80
 80070a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e22c      	b.n	8007506 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a5c      	ldr	r2, [pc, #368]	; (8007224 <HAL_DMA_Abort_IT+0x1a0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d04a      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a5b      	ldr	r2, [pc, #364]	; (8007228 <HAL_DMA_Abort_IT+0x1a4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d045      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a59      	ldr	r2, [pc, #356]	; (800722c <HAL_DMA_Abort_IT+0x1a8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d040      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a58      	ldr	r2, [pc, #352]	; (8007230 <HAL_DMA_Abort_IT+0x1ac>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d03b      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a56      	ldr	r2, [pc, #344]	; (8007234 <HAL_DMA_Abort_IT+0x1b0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d036      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a55      	ldr	r2, [pc, #340]	; (8007238 <HAL_DMA_Abort_IT+0x1b4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d031      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a53      	ldr	r2, [pc, #332]	; (800723c <HAL_DMA_Abort_IT+0x1b8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d02c      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a52      	ldr	r2, [pc, #328]	; (8007240 <HAL_DMA_Abort_IT+0x1bc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d027      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a50      	ldr	r2, [pc, #320]	; (8007244 <HAL_DMA_Abort_IT+0x1c0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d022      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a4f      	ldr	r2, [pc, #316]	; (8007248 <HAL_DMA_Abort_IT+0x1c4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d01d      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a4d      	ldr	r2, [pc, #308]	; (800724c <HAL_DMA_Abort_IT+0x1c8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d018      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a4c      	ldr	r2, [pc, #304]	; (8007250 <HAL_DMA_Abort_IT+0x1cc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d013      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a4a      	ldr	r2, [pc, #296]	; (8007254 <HAL_DMA_Abort_IT+0x1d0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00e      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a49      	ldr	r2, [pc, #292]	; (8007258 <HAL_DMA_Abort_IT+0x1d4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d009      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a47      	ldr	r2, [pc, #284]	; (800725c <HAL_DMA_Abort_IT+0x1d8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d004      	beq.n	800714c <HAL_DMA_Abort_IT+0xc8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a46      	ldr	r2, [pc, #280]	; (8007260 <HAL_DMA_Abort_IT+0x1dc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d101      	bne.n	8007150 <HAL_DMA_Abort_IT+0xcc>
 800714c:	2301      	movs	r3, #1
 800714e:	e000      	b.n	8007152 <HAL_DMA_Abort_IT+0xce>
 8007150:	2300      	movs	r3, #0
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 8086 	beq.w	8007264 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2204      	movs	r2, #4
 800715c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a2f      	ldr	r2, [pc, #188]	; (8007224 <HAL_DMA_Abort_IT+0x1a0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d04a      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a2e      	ldr	r2, [pc, #184]	; (8007228 <HAL_DMA_Abort_IT+0x1a4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d045      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a2c      	ldr	r2, [pc, #176]	; (800722c <HAL_DMA_Abort_IT+0x1a8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d040      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a2b      	ldr	r2, [pc, #172]	; (8007230 <HAL_DMA_Abort_IT+0x1ac>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d03b      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a29      	ldr	r2, [pc, #164]	; (8007234 <HAL_DMA_Abort_IT+0x1b0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d036      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a28      	ldr	r2, [pc, #160]	; (8007238 <HAL_DMA_Abort_IT+0x1b4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d031      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a26      	ldr	r2, [pc, #152]	; (800723c <HAL_DMA_Abort_IT+0x1b8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d02c      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a25      	ldr	r2, [pc, #148]	; (8007240 <HAL_DMA_Abort_IT+0x1bc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d027      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a23      	ldr	r2, [pc, #140]	; (8007244 <HAL_DMA_Abort_IT+0x1c0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d022      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a22      	ldr	r2, [pc, #136]	; (8007248 <HAL_DMA_Abort_IT+0x1c4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d01d      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a20      	ldr	r2, [pc, #128]	; (800724c <HAL_DMA_Abort_IT+0x1c8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d018      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1f      	ldr	r2, [pc, #124]	; (8007250 <HAL_DMA_Abort_IT+0x1cc>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d013      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1d      	ldr	r2, [pc, #116]	; (8007254 <HAL_DMA_Abort_IT+0x1d0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00e      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a1c      	ldr	r2, [pc, #112]	; (8007258 <HAL_DMA_Abort_IT+0x1d4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d009      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1a      	ldr	r2, [pc, #104]	; (800725c <HAL_DMA_Abort_IT+0x1d8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d004      	beq.n	8007200 <HAL_DMA_Abort_IT+0x17c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a19      	ldr	r2, [pc, #100]	; (8007260 <HAL_DMA_Abort_IT+0x1dc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d108      	bne.n	8007212 <HAL_DMA_Abort_IT+0x18e>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0201 	bic.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	e178      	b.n	8007504 <HAL_DMA_Abort_IT+0x480>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0201 	bic.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e16f      	b.n	8007504 <HAL_DMA_Abort_IT+0x480>
 8007224:	40020010 	.word	0x40020010
 8007228:	40020028 	.word	0x40020028
 800722c:	40020040 	.word	0x40020040
 8007230:	40020058 	.word	0x40020058
 8007234:	40020070 	.word	0x40020070
 8007238:	40020088 	.word	0x40020088
 800723c:	400200a0 	.word	0x400200a0
 8007240:	400200b8 	.word	0x400200b8
 8007244:	40020410 	.word	0x40020410
 8007248:	40020428 	.word	0x40020428
 800724c:	40020440 	.word	0x40020440
 8007250:	40020458 	.word	0x40020458
 8007254:	40020470 	.word	0x40020470
 8007258:	40020488 	.word	0x40020488
 800725c:	400204a0 	.word	0x400204a0
 8007260:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 020e 	bic.w	r2, r2, #14
 8007272:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a6c      	ldr	r2, [pc, #432]	; (800742c <HAL_DMA_Abort_IT+0x3a8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d04a      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a6b      	ldr	r2, [pc, #428]	; (8007430 <HAL_DMA_Abort_IT+0x3ac>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d045      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a69      	ldr	r2, [pc, #420]	; (8007434 <HAL_DMA_Abort_IT+0x3b0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d040      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a68      	ldr	r2, [pc, #416]	; (8007438 <HAL_DMA_Abort_IT+0x3b4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d03b      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a66      	ldr	r2, [pc, #408]	; (800743c <HAL_DMA_Abort_IT+0x3b8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d036      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a65      	ldr	r2, [pc, #404]	; (8007440 <HAL_DMA_Abort_IT+0x3bc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d031      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a63      	ldr	r2, [pc, #396]	; (8007444 <HAL_DMA_Abort_IT+0x3c0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d02c      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a62      	ldr	r2, [pc, #392]	; (8007448 <HAL_DMA_Abort_IT+0x3c4>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d027      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a60      	ldr	r2, [pc, #384]	; (800744c <HAL_DMA_Abort_IT+0x3c8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d022      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a5f      	ldr	r2, [pc, #380]	; (8007450 <HAL_DMA_Abort_IT+0x3cc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d01d      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a5d      	ldr	r2, [pc, #372]	; (8007454 <HAL_DMA_Abort_IT+0x3d0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d018      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a5c      	ldr	r2, [pc, #368]	; (8007458 <HAL_DMA_Abort_IT+0x3d4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d013      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a5a      	ldr	r2, [pc, #360]	; (800745c <HAL_DMA_Abort_IT+0x3d8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00e      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a59      	ldr	r2, [pc, #356]	; (8007460 <HAL_DMA_Abort_IT+0x3dc>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d009      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a57      	ldr	r2, [pc, #348]	; (8007464 <HAL_DMA_Abort_IT+0x3e0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d004      	beq.n	8007314 <HAL_DMA_Abort_IT+0x290>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a56      	ldr	r2, [pc, #344]	; (8007468 <HAL_DMA_Abort_IT+0x3e4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d108      	bne.n	8007326 <HAL_DMA_Abort_IT+0x2a2>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 0201 	bic.w	r2, r2, #1
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	e007      	b.n	8007336 <HAL_DMA_Abort_IT+0x2b2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a3c      	ldr	r2, [pc, #240]	; (800742c <HAL_DMA_Abort_IT+0x3a8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d072      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a3a      	ldr	r2, [pc, #232]	; (8007430 <HAL_DMA_Abort_IT+0x3ac>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d06d      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a39      	ldr	r2, [pc, #228]	; (8007434 <HAL_DMA_Abort_IT+0x3b0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d068      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a37      	ldr	r2, [pc, #220]	; (8007438 <HAL_DMA_Abort_IT+0x3b4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d063      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a36      	ldr	r2, [pc, #216]	; (800743c <HAL_DMA_Abort_IT+0x3b8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d05e      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a34      	ldr	r2, [pc, #208]	; (8007440 <HAL_DMA_Abort_IT+0x3bc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d059      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a33      	ldr	r2, [pc, #204]	; (8007444 <HAL_DMA_Abort_IT+0x3c0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d054      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a31      	ldr	r2, [pc, #196]	; (8007448 <HAL_DMA_Abort_IT+0x3c4>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d04f      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a30      	ldr	r2, [pc, #192]	; (800744c <HAL_DMA_Abort_IT+0x3c8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d04a      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a2e      	ldr	r2, [pc, #184]	; (8007450 <HAL_DMA_Abort_IT+0x3cc>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d045      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2d      	ldr	r2, [pc, #180]	; (8007454 <HAL_DMA_Abort_IT+0x3d0>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d040      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a2b      	ldr	r2, [pc, #172]	; (8007458 <HAL_DMA_Abort_IT+0x3d4>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d03b      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a2a      	ldr	r2, [pc, #168]	; (800745c <HAL_DMA_Abort_IT+0x3d8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d036      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a28      	ldr	r2, [pc, #160]	; (8007460 <HAL_DMA_Abort_IT+0x3dc>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d031      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a27      	ldr	r2, [pc, #156]	; (8007464 <HAL_DMA_Abort_IT+0x3e0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d02c      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a25      	ldr	r2, [pc, #148]	; (8007468 <HAL_DMA_Abort_IT+0x3e4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d027      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a24      	ldr	r2, [pc, #144]	; (800746c <HAL_DMA_Abort_IT+0x3e8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d022      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a22      	ldr	r2, [pc, #136]	; (8007470 <HAL_DMA_Abort_IT+0x3ec>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d01d      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a21      	ldr	r2, [pc, #132]	; (8007474 <HAL_DMA_Abort_IT+0x3f0>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d018      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1f      	ldr	r2, [pc, #124]	; (8007478 <HAL_DMA_Abort_IT+0x3f4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d013      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1e      	ldr	r2, [pc, #120]	; (800747c <HAL_DMA_Abort_IT+0x3f8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00e      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1c      	ldr	r2, [pc, #112]	; (8007480 <HAL_DMA_Abort_IT+0x3fc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d009      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1b      	ldr	r2, [pc, #108]	; (8007484 <HAL_DMA_Abort_IT+0x400>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d004      	beq.n	8007426 <HAL_DMA_Abort_IT+0x3a2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a19      	ldr	r2, [pc, #100]	; (8007488 <HAL_DMA_Abort_IT+0x404>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d132      	bne.n	800748c <HAL_DMA_Abort_IT+0x408>
 8007426:	2301      	movs	r3, #1
 8007428:	e031      	b.n	800748e <HAL_DMA_Abort_IT+0x40a>
 800742a:	bf00      	nop
 800742c:	40020010 	.word	0x40020010
 8007430:	40020028 	.word	0x40020028
 8007434:	40020040 	.word	0x40020040
 8007438:	40020058 	.word	0x40020058
 800743c:	40020070 	.word	0x40020070
 8007440:	40020088 	.word	0x40020088
 8007444:	400200a0 	.word	0x400200a0
 8007448:	400200b8 	.word	0x400200b8
 800744c:	40020410 	.word	0x40020410
 8007450:	40020428 	.word	0x40020428
 8007454:	40020440 	.word	0x40020440
 8007458:	40020458 	.word	0x40020458
 800745c:	40020470 	.word	0x40020470
 8007460:	40020488 	.word	0x40020488
 8007464:	400204a0 	.word	0x400204a0
 8007468:	400204b8 	.word	0x400204b8
 800746c:	58025408 	.word	0x58025408
 8007470:	5802541c 	.word	0x5802541c
 8007474:	58025430 	.word	0x58025430
 8007478:	58025444 	.word	0x58025444
 800747c:	58025458 	.word	0x58025458
 8007480:	5802546c 	.word	0x5802546c
 8007484:	58025480 	.word	0x58025480
 8007488:	58025494 	.word	0x58025494
 800748c:	2300      	movs	r3, #0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d028      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800749c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ac:	f003 031f 	and.w	r3, r3, #31
 80074b0:	2201      	movs	r2, #1
 80074b2:	409a      	lsls	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80074c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00c      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop

08007510 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800751c:	4b67      	ldr	r3, [pc, #412]	; (80076bc <HAL_DMA_IRQHandler+0x1ac>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a67      	ldr	r2, [pc, #412]	; (80076c0 <HAL_DMA_IRQHandler+0x1b0>)
 8007522:	fba2 2303 	umull	r2, r3, r2, r3
 8007526:	0a9b      	lsrs	r3, r3, #10
 8007528:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007534:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a5f      	ldr	r2, [pc, #380]	; (80076c4 <HAL_DMA_IRQHandler+0x1b4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d04a      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a5d      	ldr	r2, [pc, #372]	; (80076c8 <HAL_DMA_IRQHandler+0x1b8>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d045      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a5c      	ldr	r2, [pc, #368]	; (80076cc <HAL_DMA_IRQHandler+0x1bc>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d040      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a5a      	ldr	r2, [pc, #360]	; (80076d0 <HAL_DMA_IRQHandler+0x1c0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d03b      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a59      	ldr	r2, [pc, #356]	; (80076d4 <HAL_DMA_IRQHandler+0x1c4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d036      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a57      	ldr	r2, [pc, #348]	; (80076d8 <HAL_DMA_IRQHandler+0x1c8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d031      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a56      	ldr	r2, [pc, #344]	; (80076dc <HAL_DMA_IRQHandler+0x1cc>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d02c      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a54      	ldr	r2, [pc, #336]	; (80076e0 <HAL_DMA_IRQHandler+0x1d0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d027      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a53      	ldr	r2, [pc, #332]	; (80076e4 <HAL_DMA_IRQHandler+0x1d4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d022      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a51      	ldr	r2, [pc, #324]	; (80076e8 <HAL_DMA_IRQHandler+0x1d8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d01d      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a50      	ldr	r2, [pc, #320]	; (80076ec <HAL_DMA_IRQHandler+0x1dc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d018      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a4e      	ldr	r2, [pc, #312]	; (80076f0 <HAL_DMA_IRQHandler+0x1e0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d013      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a4d      	ldr	r2, [pc, #308]	; (80076f4 <HAL_DMA_IRQHandler+0x1e4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00e      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a4b      	ldr	r2, [pc, #300]	; (80076f8 <HAL_DMA_IRQHandler+0x1e8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d009      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a4a      	ldr	r2, [pc, #296]	; (80076fc <HAL_DMA_IRQHandler+0x1ec>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d004      	beq.n	80075e2 <HAL_DMA_IRQHandler+0xd2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a48      	ldr	r2, [pc, #288]	; (8007700 <HAL_DMA_IRQHandler+0x1f0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d101      	bne.n	80075e6 <HAL_DMA_IRQHandler+0xd6>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <HAL_DMA_IRQHandler+0xd8>
 80075e6:	2300      	movs	r3, #0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 842b 	beq.w	8007e44 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	2208      	movs	r2, #8
 80075f8:	409a      	lsls	r2, r3
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	4013      	ands	r3, r2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 80a2 	beq.w	8007748 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a2e      	ldr	r2, [pc, #184]	; (80076c4 <HAL_DMA_IRQHandler+0x1b4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d04a      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a2d      	ldr	r2, [pc, #180]	; (80076c8 <HAL_DMA_IRQHandler+0x1b8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d045      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a2b      	ldr	r2, [pc, #172]	; (80076cc <HAL_DMA_IRQHandler+0x1bc>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d040      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a2a      	ldr	r2, [pc, #168]	; (80076d0 <HAL_DMA_IRQHandler+0x1c0>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d03b      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a28      	ldr	r2, [pc, #160]	; (80076d4 <HAL_DMA_IRQHandler+0x1c4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d036      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a27      	ldr	r2, [pc, #156]	; (80076d8 <HAL_DMA_IRQHandler+0x1c8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d031      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a25      	ldr	r2, [pc, #148]	; (80076dc <HAL_DMA_IRQHandler+0x1cc>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d02c      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a24      	ldr	r2, [pc, #144]	; (80076e0 <HAL_DMA_IRQHandler+0x1d0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d027      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a22      	ldr	r2, [pc, #136]	; (80076e4 <HAL_DMA_IRQHandler+0x1d4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d022      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a21      	ldr	r2, [pc, #132]	; (80076e8 <HAL_DMA_IRQHandler+0x1d8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d01d      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a1f      	ldr	r2, [pc, #124]	; (80076ec <HAL_DMA_IRQHandler+0x1dc>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d018      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a1e      	ldr	r2, [pc, #120]	; (80076f0 <HAL_DMA_IRQHandler+0x1e0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d013      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1c      	ldr	r2, [pc, #112]	; (80076f4 <HAL_DMA_IRQHandler+0x1e4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d00e      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a1b      	ldr	r2, [pc, #108]	; (80076f8 <HAL_DMA_IRQHandler+0x1e8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d009      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a19      	ldr	r2, [pc, #100]	; (80076fc <HAL_DMA_IRQHandler+0x1ec>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d004      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x194>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a18      	ldr	r2, [pc, #96]	; (8007700 <HAL_DMA_IRQHandler+0x1f0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d12f      	bne.n	8007704 <HAL_DMA_IRQHandler+0x1f4>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	bf14      	ite	ne
 80076b2:	2301      	movne	r3, #1
 80076b4:	2300      	moveq	r3, #0
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	e02e      	b.n	8007718 <HAL_DMA_IRQHandler+0x208>
 80076ba:	bf00      	nop
 80076bc:	24000090 	.word	0x24000090
 80076c0:	1b4e81b5 	.word	0x1b4e81b5
 80076c4:	40020010 	.word	0x40020010
 80076c8:	40020028 	.word	0x40020028
 80076cc:	40020040 	.word	0x40020040
 80076d0:	40020058 	.word	0x40020058
 80076d4:	40020070 	.word	0x40020070
 80076d8:	40020088 	.word	0x40020088
 80076dc:	400200a0 	.word	0x400200a0
 80076e0:	400200b8 	.word	0x400200b8
 80076e4:	40020410 	.word	0x40020410
 80076e8:	40020428 	.word	0x40020428
 80076ec:	40020440 	.word	0x40020440
 80076f0:	40020458 	.word	0x40020458
 80076f4:	40020470 	.word	0x40020470
 80076f8:	40020488 	.word	0x40020488
 80076fc:	400204a0 	.word	0x400204a0
 8007700:	400204b8 	.word	0x400204b8
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0308 	and.w	r3, r3, #8
 800770e:	2b00      	cmp	r3, #0
 8007710:	bf14      	ite	ne
 8007712:	2301      	movne	r3, #1
 8007714:	2300      	moveq	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d015      	beq.n	8007748 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0204 	bic.w	r2, r2, #4
 800772a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2208      	movs	r2, #8
 8007736:	409a      	lsls	r2, r3
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007740:	f043 0201 	orr.w	r2, r3, #1
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800774c:	f003 031f 	and.w	r3, r3, #31
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	fa22 f303 	lsr.w	r3, r2, r3
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d06e      	beq.n	800783c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a69      	ldr	r2, [pc, #420]	; (8007908 <HAL_DMA_IRQHandler+0x3f8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d04a      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a67      	ldr	r2, [pc, #412]	; (800790c <HAL_DMA_IRQHandler+0x3fc>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d045      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a66      	ldr	r2, [pc, #408]	; (8007910 <HAL_DMA_IRQHandler+0x400>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d040      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a64      	ldr	r2, [pc, #400]	; (8007914 <HAL_DMA_IRQHandler+0x404>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d03b      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a63      	ldr	r2, [pc, #396]	; (8007918 <HAL_DMA_IRQHandler+0x408>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d036      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a61      	ldr	r2, [pc, #388]	; (800791c <HAL_DMA_IRQHandler+0x40c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d031      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a60      	ldr	r2, [pc, #384]	; (8007920 <HAL_DMA_IRQHandler+0x410>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d02c      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a5e      	ldr	r2, [pc, #376]	; (8007924 <HAL_DMA_IRQHandler+0x414>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d027      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a5d      	ldr	r2, [pc, #372]	; (8007928 <HAL_DMA_IRQHandler+0x418>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d022      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a5b      	ldr	r2, [pc, #364]	; (800792c <HAL_DMA_IRQHandler+0x41c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d01d      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a5a      	ldr	r2, [pc, #360]	; (8007930 <HAL_DMA_IRQHandler+0x420>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d018      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a58      	ldr	r2, [pc, #352]	; (8007934 <HAL_DMA_IRQHandler+0x424>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a57      	ldr	r2, [pc, #348]	; (8007938 <HAL_DMA_IRQHandler+0x428>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00e      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a55      	ldr	r2, [pc, #340]	; (800793c <HAL_DMA_IRQHandler+0x42c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d009      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a54      	ldr	r2, [pc, #336]	; (8007940 <HAL_DMA_IRQHandler+0x430>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d004      	beq.n	80077fe <HAL_DMA_IRQHandler+0x2ee>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a52      	ldr	r2, [pc, #328]	; (8007944 <HAL_DMA_IRQHandler+0x434>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d10a      	bne.n	8007814 <HAL_DMA_IRQHandler+0x304>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007808:	2b00      	cmp	r3, #0
 800780a:	bf14      	ite	ne
 800780c:	2301      	movne	r3, #1
 800780e:	2300      	moveq	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	e003      	b.n	800781c <HAL_DMA_IRQHandler+0x30c>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2300      	movs	r3, #0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00d      	beq.n	800783c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	2201      	movs	r2, #1
 800782a:	409a      	lsls	r2, r3
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007834:	f043 0202 	orr.w	r2, r3, #2
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007840:	f003 031f 	and.w	r3, r3, #31
 8007844:	2204      	movs	r2, #4
 8007846:	409a      	lsls	r2, r3
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	4013      	ands	r3, r2
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 808f 	beq.w	8007970 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a2c      	ldr	r2, [pc, #176]	; (8007908 <HAL_DMA_IRQHandler+0x3f8>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d04a      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a2a      	ldr	r2, [pc, #168]	; (800790c <HAL_DMA_IRQHandler+0x3fc>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d045      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a29      	ldr	r2, [pc, #164]	; (8007910 <HAL_DMA_IRQHandler+0x400>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d040      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a27      	ldr	r2, [pc, #156]	; (8007914 <HAL_DMA_IRQHandler+0x404>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d03b      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a26      	ldr	r2, [pc, #152]	; (8007918 <HAL_DMA_IRQHandler+0x408>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d036      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a24      	ldr	r2, [pc, #144]	; (800791c <HAL_DMA_IRQHandler+0x40c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d031      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a23      	ldr	r2, [pc, #140]	; (8007920 <HAL_DMA_IRQHandler+0x410>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d02c      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a21      	ldr	r2, [pc, #132]	; (8007924 <HAL_DMA_IRQHandler+0x414>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d027      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a20      	ldr	r2, [pc, #128]	; (8007928 <HAL_DMA_IRQHandler+0x418>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d022      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1e      	ldr	r2, [pc, #120]	; (800792c <HAL_DMA_IRQHandler+0x41c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d01d      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1d      	ldr	r2, [pc, #116]	; (8007930 <HAL_DMA_IRQHandler+0x420>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d018      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <HAL_DMA_IRQHandler+0x424>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d013      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1a      	ldr	r2, [pc, #104]	; (8007938 <HAL_DMA_IRQHandler+0x428>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00e      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a18      	ldr	r2, [pc, #96]	; (800793c <HAL_DMA_IRQHandler+0x42c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d009      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a17      	ldr	r2, [pc, #92]	; (8007940 <HAL_DMA_IRQHandler+0x430>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d004      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x3e2>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a15      	ldr	r2, [pc, #84]	; (8007944 <HAL_DMA_IRQHandler+0x434>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d12a      	bne.n	8007948 <HAL_DMA_IRQHandler+0x438>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf14      	ite	ne
 8007900:	2301      	movne	r3, #1
 8007902:	2300      	moveq	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	e023      	b.n	8007950 <HAL_DMA_IRQHandler+0x440>
 8007908:	40020010 	.word	0x40020010
 800790c:	40020028 	.word	0x40020028
 8007910:	40020040 	.word	0x40020040
 8007914:	40020058 	.word	0x40020058
 8007918:	40020070 	.word	0x40020070
 800791c:	40020088 	.word	0x40020088
 8007920:	400200a0 	.word	0x400200a0
 8007924:	400200b8 	.word	0x400200b8
 8007928:	40020410 	.word	0x40020410
 800792c:	40020428 	.word	0x40020428
 8007930:	40020440 	.word	0x40020440
 8007934:	40020458 	.word	0x40020458
 8007938:	40020470 	.word	0x40020470
 800793c:	40020488 	.word	0x40020488
 8007940:	400204a0 	.word	0x400204a0
 8007944:	400204b8 	.word	0x400204b8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2300      	movs	r3, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00d      	beq.n	8007970 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007958:	f003 031f 	and.w	r3, r3, #31
 800795c:	2204      	movs	r2, #4
 800795e:	409a      	lsls	r2, r3
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007968:	f043 0204 	orr.w	r2, r3, #4
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007974:	f003 031f 	and.w	r3, r3, #31
 8007978:	2210      	movs	r2, #16
 800797a:	409a      	lsls	r2, r3
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	4013      	ands	r3, r2
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 80a6 	beq.w	8007ad2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a85      	ldr	r2, [pc, #532]	; (8007ba0 <HAL_DMA_IRQHandler+0x690>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d04a      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a83      	ldr	r2, [pc, #524]	; (8007ba4 <HAL_DMA_IRQHandler+0x694>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d045      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a82      	ldr	r2, [pc, #520]	; (8007ba8 <HAL_DMA_IRQHandler+0x698>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d040      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a80      	ldr	r2, [pc, #512]	; (8007bac <HAL_DMA_IRQHandler+0x69c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d03b      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a7f      	ldr	r2, [pc, #508]	; (8007bb0 <HAL_DMA_IRQHandler+0x6a0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d036      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a7d      	ldr	r2, [pc, #500]	; (8007bb4 <HAL_DMA_IRQHandler+0x6a4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d031      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a7c      	ldr	r2, [pc, #496]	; (8007bb8 <HAL_DMA_IRQHandler+0x6a8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d02c      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a7a      	ldr	r2, [pc, #488]	; (8007bbc <HAL_DMA_IRQHandler+0x6ac>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d027      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a79      	ldr	r2, [pc, #484]	; (8007bc0 <HAL_DMA_IRQHandler+0x6b0>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d022      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a77      	ldr	r2, [pc, #476]	; (8007bc4 <HAL_DMA_IRQHandler+0x6b4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d01d      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a76      	ldr	r2, [pc, #472]	; (8007bc8 <HAL_DMA_IRQHandler+0x6b8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d018      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a74      	ldr	r2, [pc, #464]	; (8007bcc <HAL_DMA_IRQHandler+0x6bc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d013      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a73      	ldr	r2, [pc, #460]	; (8007bd0 <HAL_DMA_IRQHandler+0x6c0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00e      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a71      	ldr	r2, [pc, #452]	; (8007bd4 <HAL_DMA_IRQHandler+0x6c4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d009      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a70      	ldr	r2, [pc, #448]	; (8007bd8 <HAL_DMA_IRQHandler+0x6c8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d004      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x516>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a6e      	ldr	r2, [pc, #440]	; (8007bdc <HAL_DMA_IRQHandler+0x6cc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d10a      	bne.n	8007a3c <HAL_DMA_IRQHandler+0x52c>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bf14      	ite	ne
 8007a34:	2301      	movne	r3, #1
 8007a36:	2300      	moveq	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	e009      	b.n	8007a50 <HAL_DMA_IRQHandler+0x540>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bf14      	ite	ne
 8007a4a:	2301      	movne	r3, #1
 8007a4c:	2300      	moveq	r3, #0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d03e      	beq.n	8007ad2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a58:	f003 031f 	and.w	r3, r3, #31
 8007a5c:	2210      	movs	r2, #16
 8007a5e:	409a      	lsls	r2, r3
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d018      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d108      	bne.n	8007a92 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d024      	beq.n	8007ad2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
 8007a90:	e01f      	b.n	8007ad2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d01b      	beq.n	8007ad2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
 8007aa2:	e016      	b.n	8007ad2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d107      	bne.n	8007ac2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0208 	bic.w	r2, r2, #8
 8007ac0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad6:	f003 031f 	and.w	r3, r3, #31
 8007ada:	2220      	movs	r2, #32
 8007adc:	409a      	lsls	r2, r3
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 8110 	beq.w	8007d08 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a2c      	ldr	r2, [pc, #176]	; (8007ba0 <HAL_DMA_IRQHandler+0x690>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d04a      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a2b      	ldr	r2, [pc, #172]	; (8007ba4 <HAL_DMA_IRQHandler+0x694>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d045      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a29      	ldr	r2, [pc, #164]	; (8007ba8 <HAL_DMA_IRQHandler+0x698>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d040      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a28      	ldr	r2, [pc, #160]	; (8007bac <HAL_DMA_IRQHandler+0x69c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d03b      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a26      	ldr	r2, [pc, #152]	; (8007bb0 <HAL_DMA_IRQHandler+0x6a0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d036      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a25      	ldr	r2, [pc, #148]	; (8007bb4 <HAL_DMA_IRQHandler+0x6a4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d031      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a23      	ldr	r2, [pc, #140]	; (8007bb8 <HAL_DMA_IRQHandler+0x6a8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d02c      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a22      	ldr	r2, [pc, #136]	; (8007bbc <HAL_DMA_IRQHandler+0x6ac>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d027      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a20      	ldr	r2, [pc, #128]	; (8007bc0 <HAL_DMA_IRQHandler+0x6b0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d022      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a1f      	ldr	r2, [pc, #124]	; (8007bc4 <HAL_DMA_IRQHandler+0x6b4>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d01d      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a1d      	ldr	r2, [pc, #116]	; (8007bc8 <HAL_DMA_IRQHandler+0x6b8>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d018      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a1c      	ldr	r2, [pc, #112]	; (8007bcc <HAL_DMA_IRQHandler+0x6bc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d013      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1a      	ldr	r2, [pc, #104]	; (8007bd0 <HAL_DMA_IRQHandler+0x6c0>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00e      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a19      	ldr	r2, [pc, #100]	; (8007bd4 <HAL_DMA_IRQHandler+0x6c4>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d009      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a17      	ldr	r2, [pc, #92]	; (8007bd8 <HAL_DMA_IRQHandler+0x6c8>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d004      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x678>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a16      	ldr	r2, [pc, #88]	; (8007bdc <HAL_DMA_IRQHandler+0x6cc>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d12b      	bne.n	8007be0 <HAL_DMA_IRQHandler+0x6d0>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0310 	and.w	r3, r3, #16
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	bf14      	ite	ne
 8007b96:	2301      	movne	r3, #1
 8007b98:	2300      	moveq	r3, #0
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	e02a      	b.n	8007bf4 <HAL_DMA_IRQHandler+0x6e4>
 8007b9e:	bf00      	nop
 8007ba0:	40020010 	.word	0x40020010
 8007ba4:	40020028 	.word	0x40020028
 8007ba8:	40020040 	.word	0x40020040
 8007bac:	40020058 	.word	0x40020058
 8007bb0:	40020070 	.word	0x40020070
 8007bb4:	40020088 	.word	0x40020088
 8007bb8:	400200a0 	.word	0x400200a0
 8007bbc:	400200b8 	.word	0x400200b8
 8007bc0:	40020410 	.word	0x40020410
 8007bc4:	40020428 	.word	0x40020428
 8007bc8:	40020440 	.word	0x40020440
 8007bcc:	40020458 	.word	0x40020458
 8007bd0:	40020470 	.word	0x40020470
 8007bd4:	40020488 	.word	0x40020488
 8007bd8:	400204a0 	.word	0x400204a0
 8007bdc:	400204b8 	.word	0x400204b8
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bf14      	ite	ne
 8007bee:	2301      	movne	r3, #1
 8007bf0:	2300      	moveq	r3, #0
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8087 	beq.w	8007d08 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfe:	f003 031f 	and.w	r3, r3, #31
 8007c02:	2220      	movs	r2, #32
 8007c04:	409a      	lsls	r2, r3
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d139      	bne.n	8007c8a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0216 	bic.w	r2, r2, #22
 8007c24:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	695a      	ldr	r2, [r3, #20]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c34:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d103      	bne.n	8007c46 <HAL_DMA_IRQHandler+0x736>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d007      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0208 	bic.w	r2, r2, #8
 8007c54:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c5a:	f003 031f 	and.w	r3, r3, #31
 8007c5e:	223f      	movs	r2, #63	; 0x3f
 8007c60:	409a      	lsls	r2, r3
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 834a 	beq.w	8008314 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	4798      	blx	r3
          }
          return;
 8007c88:	e344      	b.n	8008314 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d018      	beq.n	8007cca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d108      	bne.n	8007cb8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02c      	beq.n	8007d08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
 8007cb6:	e027      	b.n	8007d08 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d023      	beq.n	8007d08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
 8007cc8:	e01e      	b.n	8007d08 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10f      	bne.n	8007cf8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0210 	bic.w	r2, r2, #16
 8007ce6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8306 	beq.w	800831e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8088 	beq.w	8007e30 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2204      	movs	r2, #4
 8007d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a7a      	ldr	r2, [pc, #488]	; (8007f18 <HAL_DMA_IRQHandler+0xa08>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d04a      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a79      	ldr	r2, [pc, #484]	; (8007f1c <HAL_DMA_IRQHandler+0xa0c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d045      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a77      	ldr	r2, [pc, #476]	; (8007f20 <HAL_DMA_IRQHandler+0xa10>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d040      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a76      	ldr	r2, [pc, #472]	; (8007f24 <HAL_DMA_IRQHandler+0xa14>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d03b      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a74      	ldr	r2, [pc, #464]	; (8007f28 <HAL_DMA_IRQHandler+0xa18>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d036      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a73      	ldr	r2, [pc, #460]	; (8007f2c <HAL_DMA_IRQHandler+0xa1c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d031      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a71      	ldr	r2, [pc, #452]	; (8007f30 <HAL_DMA_IRQHandler+0xa20>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d02c      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a70      	ldr	r2, [pc, #448]	; (8007f34 <HAL_DMA_IRQHandler+0xa24>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d027      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a6e      	ldr	r2, [pc, #440]	; (8007f38 <HAL_DMA_IRQHandler+0xa28>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d022      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a6d      	ldr	r2, [pc, #436]	; (8007f3c <HAL_DMA_IRQHandler+0xa2c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d01d      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a6b      	ldr	r2, [pc, #428]	; (8007f40 <HAL_DMA_IRQHandler+0xa30>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d018      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a6a      	ldr	r2, [pc, #424]	; (8007f44 <HAL_DMA_IRQHandler+0xa34>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d013      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a68      	ldr	r2, [pc, #416]	; (8007f48 <HAL_DMA_IRQHandler+0xa38>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00e      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a67      	ldr	r2, [pc, #412]	; (8007f4c <HAL_DMA_IRQHandler+0xa3c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d009      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a65      	ldr	r2, [pc, #404]	; (8007f50 <HAL_DMA_IRQHandler+0xa40>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d004      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x8b8>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a64      	ldr	r2, [pc, #400]	; (8007f54 <HAL_DMA_IRQHandler+0xa44>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d108      	bne.n	8007dda <HAL_DMA_IRQHandler+0x8ca>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0201 	bic.w	r2, r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e007      	b.n	8007dea <HAL_DMA_IRQHandler+0x8da>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0201 	bic.w	r2, r2, #1
 8007de8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d307      	bcc.n	8007e06 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f2      	bne.n	8007dea <HAL_DMA_IRQHandler+0x8da>
 8007e04:	e000      	b.n	8007e08 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007e06:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d004      	beq.n	8007e20 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2203      	movs	r2, #3
 8007e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007e1e:	e003      	b.n	8007e28 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8272 	beq.w	800831e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
 8007e42:	e26c      	b.n	800831e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a43      	ldr	r2, [pc, #268]	; (8007f58 <HAL_DMA_IRQHandler+0xa48>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d022      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x984>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a42      	ldr	r2, [pc, #264]	; (8007f5c <HAL_DMA_IRQHandler+0xa4c>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d01d      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x984>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a40      	ldr	r2, [pc, #256]	; (8007f60 <HAL_DMA_IRQHandler+0xa50>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d018      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x984>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a3f      	ldr	r2, [pc, #252]	; (8007f64 <HAL_DMA_IRQHandler+0xa54>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d013      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x984>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a3d      	ldr	r2, [pc, #244]	; (8007f68 <HAL_DMA_IRQHandler+0xa58>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d00e      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x984>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a3c      	ldr	r2, [pc, #240]	; (8007f6c <HAL_DMA_IRQHandler+0xa5c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d009      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x984>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a3a      	ldr	r2, [pc, #232]	; (8007f70 <HAL_DMA_IRQHandler+0xa60>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d004      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x984>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a39      	ldr	r2, [pc, #228]	; (8007f74 <HAL_DMA_IRQHandler+0xa64>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d101      	bne.n	8007e98 <HAL_DMA_IRQHandler+0x988>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e000      	b.n	8007e9a <HAL_DMA_IRQHandler+0x98a>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 823f 	beq.w	800831e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80cd 	beq.w	8008058 <HAL_DMA_IRQHandler+0xb48>
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80c7 	beq.w	8008058 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ece:	f003 031f 	and.w	r3, r3, #31
 8007ed2:	2204      	movs	r2, #4
 8007ed4:	409a      	lsls	r2, r3
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d049      	beq.n	8007f78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d109      	bne.n	8007f02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 8210 	beq.w	8008318 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f00:	e20a      	b.n	8008318 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 8206 	beq.w	8008318 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f14:	e200      	b.n	8008318 <HAL_DMA_IRQHandler+0xe08>
 8007f16:	bf00      	nop
 8007f18:	40020010 	.word	0x40020010
 8007f1c:	40020028 	.word	0x40020028
 8007f20:	40020040 	.word	0x40020040
 8007f24:	40020058 	.word	0x40020058
 8007f28:	40020070 	.word	0x40020070
 8007f2c:	40020088 	.word	0x40020088
 8007f30:	400200a0 	.word	0x400200a0
 8007f34:	400200b8 	.word	0x400200b8
 8007f38:	40020410 	.word	0x40020410
 8007f3c:	40020428 	.word	0x40020428
 8007f40:	40020440 	.word	0x40020440
 8007f44:	40020458 	.word	0x40020458
 8007f48:	40020470 	.word	0x40020470
 8007f4c:	40020488 	.word	0x40020488
 8007f50:	400204a0 	.word	0x400204a0
 8007f54:	400204b8 	.word	0x400204b8
 8007f58:	58025408 	.word	0x58025408
 8007f5c:	5802541c 	.word	0x5802541c
 8007f60:	58025430 	.word	0x58025430
 8007f64:	58025444 	.word	0x58025444
 8007f68:	58025458 	.word	0x58025458
 8007f6c:	5802546c 	.word	0x5802546c
 8007f70:	58025480 	.word	0x58025480
 8007f74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d160      	bne.n	8008044 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a7f      	ldr	r2, [pc, #508]	; (8008184 <HAL_DMA_IRQHandler+0xc74>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d04a      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a7d      	ldr	r2, [pc, #500]	; (8008188 <HAL_DMA_IRQHandler+0xc78>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d045      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a7c      	ldr	r2, [pc, #496]	; (800818c <HAL_DMA_IRQHandler+0xc7c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d040      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a7a      	ldr	r2, [pc, #488]	; (8008190 <HAL_DMA_IRQHandler+0xc80>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d03b      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a79      	ldr	r2, [pc, #484]	; (8008194 <HAL_DMA_IRQHandler+0xc84>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d036      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a77      	ldr	r2, [pc, #476]	; (8008198 <HAL_DMA_IRQHandler+0xc88>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d031      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a76      	ldr	r2, [pc, #472]	; (800819c <HAL_DMA_IRQHandler+0xc8c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d02c      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a74      	ldr	r2, [pc, #464]	; (80081a0 <HAL_DMA_IRQHandler+0xc90>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d027      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a73      	ldr	r2, [pc, #460]	; (80081a4 <HAL_DMA_IRQHandler+0xc94>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d022      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a71      	ldr	r2, [pc, #452]	; (80081a8 <HAL_DMA_IRQHandler+0xc98>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d01d      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a70      	ldr	r2, [pc, #448]	; (80081ac <HAL_DMA_IRQHandler+0xc9c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d018      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a6e      	ldr	r2, [pc, #440]	; (80081b0 <HAL_DMA_IRQHandler+0xca0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d013      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a6d      	ldr	r2, [pc, #436]	; (80081b4 <HAL_DMA_IRQHandler+0xca4>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d00e      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a6b      	ldr	r2, [pc, #428]	; (80081b8 <HAL_DMA_IRQHandler+0xca8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d009      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a6a      	ldr	r2, [pc, #424]	; (80081bc <HAL_DMA_IRQHandler+0xcac>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d004      	beq.n	8008022 <HAL_DMA_IRQHandler+0xb12>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a68      	ldr	r2, [pc, #416]	; (80081c0 <HAL_DMA_IRQHandler+0xcb0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d108      	bne.n	8008034 <HAL_DMA_IRQHandler+0xb24>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0208 	bic.w	r2, r2, #8
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e007      	b.n	8008044 <HAL_DMA_IRQHandler+0xb34>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 0204 	bic.w	r2, r2, #4
 8008042:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8165 	beq.w	8008318 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008056:	e15f      	b.n	8008318 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805c:	f003 031f 	and.w	r3, r3, #31
 8008060:	2202      	movs	r2, #2
 8008062:	409a      	lsls	r2, r3
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80c5 	beq.w	80081f8 <HAL_DMA_IRQHandler+0xce8>
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 80bf 	beq.w	80081f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807e:	f003 031f 	and.w	r3, r3, #31
 8008082:	2202      	movs	r2, #2
 8008084:	409a      	lsls	r2, r3
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d018      	beq.n	80080c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d109      	bne.n	80080b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 813a 	beq.w	800831c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080b0:	e134      	b.n	800831c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 8130 	beq.w	800831c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080c4:	e12a      	b.n	800831c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f040 8089 	bne.w	80081e4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a2b      	ldr	r2, [pc, #172]	; (8008184 <HAL_DMA_IRQHandler+0xc74>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d04a      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a29      	ldr	r2, [pc, #164]	; (8008188 <HAL_DMA_IRQHandler+0xc78>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d045      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a28      	ldr	r2, [pc, #160]	; (800818c <HAL_DMA_IRQHandler+0xc7c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d040      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a26      	ldr	r2, [pc, #152]	; (8008190 <HAL_DMA_IRQHandler+0xc80>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d03b      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a25      	ldr	r2, [pc, #148]	; (8008194 <HAL_DMA_IRQHandler+0xc84>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d036      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a23      	ldr	r2, [pc, #140]	; (8008198 <HAL_DMA_IRQHandler+0xc88>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d031      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a22      	ldr	r2, [pc, #136]	; (800819c <HAL_DMA_IRQHandler+0xc8c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d02c      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a20      	ldr	r2, [pc, #128]	; (80081a0 <HAL_DMA_IRQHandler+0xc90>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d027      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a1f      	ldr	r2, [pc, #124]	; (80081a4 <HAL_DMA_IRQHandler+0xc94>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d022      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a1d      	ldr	r2, [pc, #116]	; (80081a8 <HAL_DMA_IRQHandler+0xc98>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d01d      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a1c      	ldr	r2, [pc, #112]	; (80081ac <HAL_DMA_IRQHandler+0xc9c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d018      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a1a      	ldr	r2, [pc, #104]	; (80081b0 <HAL_DMA_IRQHandler+0xca0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d013      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a19      	ldr	r2, [pc, #100]	; (80081b4 <HAL_DMA_IRQHandler+0xca4>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00e      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a17      	ldr	r2, [pc, #92]	; (80081b8 <HAL_DMA_IRQHandler+0xca8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d009      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a16      	ldr	r2, [pc, #88]	; (80081bc <HAL_DMA_IRQHandler+0xcac>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d004      	beq.n	8008172 <HAL_DMA_IRQHandler+0xc62>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a14      	ldr	r2, [pc, #80]	; (80081c0 <HAL_DMA_IRQHandler+0xcb0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d128      	bne.n	80081c4 <HAL_DMA_IRQHandler+0xcb4>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0214 	bic.w	r2, r2, #20
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	e027      	b.n	80081d4 <HAL_DMA_IRQHandler+0xcc4>
 8008184:	40020010 	.word	0x40020010
 8008188:	40020028 	.word	0x40020028
 800818c:	40020040 	.word	0x40020040
 8008190:	40020058 	.word	0x40020058
 8008194:	40020070 	.word	0x40020070
 8008198:	40020088 	.word	0x40020088
 800819c:	400200a0 	.word	0x400200a0
 80081a0:	400200b8 	.word	0x400200b8
 80081a4:	40020410 	.word	0x40020410
 80081a8:	40020428 	.word	0x40020428
 80081ac:	40020440 	.word	0x40020440
 80081b0:	40020458 	.word	0x40020458
 80081b4:	40020470 	.word	0x40020470
 80081b8:	40020488 	.word	0x40020488
 80081bc:	400204a0 	.word	0x400204a0
 80081c0:	400204b8 	.word	0x400204b8
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 020a 	bic.w	r2, r2, #10
 80081d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8097 	beq.w	800831c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081f6:	e091      	b.n	800831c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081fc:	f003 031f 	and.w	r3, r3, #31
 8008200:	2208      	movs	r2, #8
 8008202:	409a      	lsls	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	4013      	ands	r3, r2
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 8088 	beq.w	800831e <HAL_DMA_IRQHandler+0xe0e>
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f003 0308 	and.w	r3, r3, #8
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8082 	beq.w	800831e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a41      	ldr	r2, [pc, #260]	; (8008324 <HAL_DMA_IRQHandler+0xe14>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d04a      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a3f      	ldr	r2, [pc, #252]	; (8008328 <HAL_DMA_IRQHandler+0xe18>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d045      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a3e      	ldr	r2, [pc, #248]	; (800832c <HAL_DMA_IRQHandler+0xe1c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d040      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a3c      	ldr	r2, [pc, #240]	; (8008330 <HAL_DMA_IRQHandler+0xe20>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d03b      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a3b      	ldr	r2, [pc, #236]	; (8008334 <HAL_DMA_IRQHandler+0xe24>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d036      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a39      	ldr	r2, [pc, #228]	; (8008338 <HAL_DMA_IRQHandler+0xe28>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d031      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a38      	ldr	r2, [pc, #224]	; (800833c <HAL_DMA_IRQHandler+0xe2c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d02c      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a36      	ldr	r2, [pc, #216]	; (8008340 <HAL_DMA_IRQHandler+0xe30>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d027      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a35      	ldr	r2, [pc, #212]	; (8008344 <HAL_DMA_IRQHandler+0xe34>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d022      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a33      	ldr	r2, [pc, #204]	; (8008348 <HAL_DMA_IRQHandler+0xe38>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d01d      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a32      	ldr	r2, [pc, #200]	; (800834c <HAL_DMA_IRQHandler+0xe3c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d018      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a30      	ldr	r2, [pc, #192]	; (8008350 <HAL_DMA_IRQHandler+0xe40>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d013      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a2f      	ldr	r2, [pc, #188]	; (8008354 <HAL_DMA_IRQHandler+0xe44>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d00e      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a2d      	ldr	r2, [pc, #180]	; (8008358 <HAL_DMA_IRQHandler+0xe48>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d009      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a2c      	ldr	r2, [pc, #176]	; (800835c <HAL_DMA_IRQHandler+0xe4c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d004      	beq.n	80082ba <HAL_DMA_IRQHandler+0xdaa>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a2a      	ldr	r2, [pc, #168]	; (8008360 <HAL_DMA_IRQHandler+0xe50>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d108      	bne.n	80082cc <HAL_DMA_IRQHandler+0xdbc>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 021c 	bic.w	r2, r2, #28
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	e007      	b.n	80082dc <HAL_DMA_IRQHandler+0xdcc>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 020e 	bic.w	r2, r2, #14
 80082da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e0:	f003 031f 	and.w	r3, r3, #31
 80082e4:	2201      	movs	r2, #1
 80082e6:	409a      	lsls	r2, r3
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
 8008312:	e004      	b.n	800831e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008314:	bf00      	nop
 8008316:	e002      	b.n	800831e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008318:	bf00      	nop
 800831a:	e000      	b.n	800831e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800831c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800831e:	3728      	adds	r7, #40	; 0x28
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40020010 	.word	0x40020010
 8008328:	40020028 	.word	0x40020028
 800832c:	40020040 	.word	0x40020040
 8008330:	40020058 	.word	0x40020058
 8008334:	40020070 	.word	0x40020070
 8008338:	40020088 	.word	0x40020088
 800833c:	400200a0 	.word	0x400200a0
 8008340:	400200b8 	.word	0x400200b8
 8008344:	40020410 	.word	0x40020410
 8008348:	40020428 	.word	0x40020428
 800834c:	40020440 	.word	0x40020440
 8008350:	40020458 	.word	0x40020458
 8008354:	40020470 	.word	0x40020470
 8008358:	40020488 	.word	0x40020488
 800835c:	400204a0 	.word	0x400204a0
 8008360:	400204b8 	.word	0x400204b8

08008364 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008376:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a7f      	ldr	r2, [pc, #508]	; (8008580 <DMA_SetConfig+0x21c>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d072      	beq.n	800846e <DMA_SetConfig+0x10a>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a7d      	ldr	r2, [pc, #500]	; (8008584 <DMA_SetConfig+0x220>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d06d      	beq.n	800846e <DMA_SetConfig+0x10a>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a7c      	ldr	r2, [pc, #496]	; (8008588 <DMA_SetConfig+0x224>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d068      	beq.n	800846e <DMA_SetConfig+0x10a>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a7a      	ldr	r2, [pc, #488]	; (800858c <DMA_SetConfig+0x228>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d063      	beq.n	800846e <DMA_SetConfig+0x10a>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a79      	ldr	r2, [pc, #484]	; (8008590 <DMA_SetConfig+0x22c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d05e      	beq.n	800846e <DMA_SetConfig+0x10a>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a77      	ldr	r2, [pc, #476]	; (8008594 <DMA_SetConfig+0x230>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d059      	beq.n	800846e <DMA_SetConfig+0x10a>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a76      	ldr	r2, [pc, #472]	; (8008598 <DMA_SetConfig+0x234>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d054      	beq.n	800846e <DMA_SetConfig+0x10a>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a74      	ldr	r2, [pc, #464]	; (800859c <DMA_SetConfig+0x238>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d04f      	beq.n	800846e <DMA_SetConfig+0x10a>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a73      	ldr	r2, [pc, #460]	; (80085a0 <DMA_SetConfig+0x23c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d04a      	beq.n	800846e <DMA_SetConfig+0x10a>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a71      	ldr	r2, [pc, #452]	; (80085a4 <DMA_SetConfig+0x240>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d045      	beq.n	800846e <DMA_SetConfig+0x10a>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a70      	ldr	r2, [pc, #448]	; (80085a8 <DMA_SetConfig+0x244>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d040      	beq.n	800846e <DMA_SetConfig+0x10a>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a6e      	ldr	r2, [pc, #440]	; (80085ac <DMA_SetConfig+0x248>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d03b      	beq.n	800846e <DMA_SetConfig+0x10a>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a6d      	ldr	r2, [pc, #436]	; (80085b0 <DMA_SetConfig+0x24c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d036      	beq.n	800846e <DMA_SetConfig+0x10a>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a6b      	ldr	r2, [pc, #428]	; (80085b4 <DMA_SetConfig+0x250>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d031      	beq.n	800846e <DMA_SetConfig+0x10a>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a6a      	ldr	r2, [pc, #424]	; (80085b8 <DMA_SetConfig+0x254>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d02c      	beq.n	800846e <DMA_SetConfig+0x10a>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a68      	ldr	r2, [pc, #416]	; (80085bc <DMA_SetConfig+0x258>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d027      	beq.n	800846e <DMA_SetConfig+0x10a>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a67      	ldr	r2, [pc, #412]	; (80085c0 <DMA_SetConfig+0x25c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d022      	beq.n	800846e <DMA_SetConfig+0x10a>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a65      	ldr	r2, [pc, #404]	; (80085c4 <DMA_SetConfig+0x260>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d01d      	beq.n	800846e <DMA_SetConfig+0x10a>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a64      	ldr	r2, [pc, #400]	; (80085c8 <DMA_SetConfig+0x264>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d018      	beq.n	800846e <DMA_SetConfig+0x10a>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a62      	ldr	r2, [pc, #392]	; (80085cc <DMA_SetConfig+0x268>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d013      	beq.n	800846e <DMA_SetConfig+0x10a>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a61      	ldr	r2, [pc, #388]	; (80085d0 <DMA_SetConfig+0x26c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00e      	beq.n	800846e <DMA_SetConfig+0x10a>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a5f      	ldr	r2, [pc, #380]	; (80085d4 <DMA_SetConfig+0x270>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d009      	beq.n	800846e <DMA_SetConfig+0x10a>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a5e      	ldr	r2, [pc, #376]	; (80085d8 <DMA_SetConfig+0x274>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d004      	beq.n	800846e <DMA_SetConfig+0x10a>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a5c      	ldr	r2, [pc, #368]	; (80085dc <DMA_SetConfig+0x278>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d101      	bne.n	8008472 <DMA_SetConfig+0x10e>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <DMA_SetConfig+0x110>
 8008472:	2300      	movs	r3, #0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00d      	beq.n	8008494 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008480:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d004      	beq.n	8008494 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008492:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a39      	ldr	r2, [pc, #228]	; (8008580 <DMA_SetConfig+0x21c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d04a      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a38      	ldr	r2, [pc, #224]	; (8008584 <DMA_SetConfig+0x220>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d045      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a36      	ldr	r2, [pc, #216]	; (8008588 <DMA_SetConfig+0x224>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d040      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a35      	ldr	r2, [pc, #212]	; (800858c <DMA_SetConfig+0x228>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d03b      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a33      	ldr	r2, [pc, #204]	; (8008590 <DMA_SetConfig+0x22c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d036      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a32      	ldr	r2, [pc, #200]	; (8008594 <DMA_SetConfig+0x230>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d031      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a30      	ldr	r2, [pc, #192]	; (8008598 <DMA_SetConfig+0x234>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d02c      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a2f      	ldr	r2, [pc, #188]	; (800859c <DMA_SetConfig+0x238>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d027      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a2d      	ldr	r2, [pc, #180]	; (80085a0 <DMA_SetConfig+0x23c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d022      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a2c      	ldr	r2, [pc, #176]	; (80085a4 <DMA_SetConfig+0x240>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d01d      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a2a      	ldr	r2, [pc, #168]	; (80085a8 <DMA_SetConfig+0x244>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d018      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a29      	ldr	r2, [pc, #164]	; (80085ac <DMA_SetConfig+0x248>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d013      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a27      	ldr	r2, [pc, #156]	; (80085b0 <DMA_SetConfig+0x24c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00e      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a26      	ldr	r2, [pc, #152]	; (80085b4 <DMA_SetConfig+0x250>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d009      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a24      	ldr	r2, [pc, #144]	; (80085b8 <DMA_SetConfig+0x254>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d004      	beq.n	8008534 <DMA_SetConfig+0x1d0>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a23      	ldr	r2, [pc, #140]	; (80085bc <DMA_SetConfig+0x258>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d101      	bne.n	8008538 <DMA_SetConfig+0x1d4>
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <DMA_SetConfig+0x1d6>
 8008538:	2300      	movs	r3, #0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d059      	beq.n	80085f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008542:	f003 031f 	and.w	r3, r3, #31
 8008546:	223f      	movs	r2, #63	; 0x3f
 8008548:	409a      	lsls	r2, r3
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800855c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	2b40      	cmp	r3, #64	; 0x40
 800856c:	d138      	bne.n	80085e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800857e:	e086      	b.n	800868e <DMA_SetConfig+0x32a>
 8008580:	40020010 	.word	0x40020010
 8008584:	40020028 	.word	0x40020028
 8008588:	40020040 	.word	0x40020040
 800858c:	40020058 	.word	0x40020058
 8008590:	40020070 	.word	0x40020070
 8008594:	40020088 	.word	0x40020088
 8008598:	400200a0 	.word	0x400200a0
 800859c:	400200b8 	.word	0x400200b8
 80085a0:	40020410 	.word	0x40020410
 80085a4:	40020428 	.word	0x40020428
 80085a8:	40020440 	.word	0x40020440
 80085ac:	40020458 	.word	0x40020458
 80085b0:	40020470 	.word	0x40020470
 80085b4:	40020488 	.word	0x40020488
 80085b8:	400204a0 	.word	0x400204a0
 80085bc:	400204b8 	.word	0x400204b8
 80085c0:	58025408 	.word	0x58025408
 80085c4:	5802541c 	.word	0x5802541c
 80085c8:	58025430 	.word	0x58025430
 80085cc:	58025444 	.word	0x58025444
 80085d0:	58025458 	.word	0x58025458
 80085d4:	5802546c 	.word	0x5802546c
 80085d8:	58025480 	.word	0x58025480
 80085dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	60da      	str	r2, [r3, #12]
}
 80085f0:	e04d      	b.n	800868e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a29      	ldr	r2, [pc, #164]	; (800869c <DMA_SetConfig+0x338>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d022      	beq.n	8008642 <DMA_SetConfig+0x2de>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a27      	ldr	r2, [pc, #156]	; (80086a0 <DMA_SetConfig+0x33c>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d01d      	beq.n	8008642 <DMA_SetConfig+0x2de>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a26      	ldr	r2, [pc, #152]	; (80086a4 <DMA_SetConfig+0x340>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d018      	beq.n	8008642 <DMA_SetConfig+0x2de>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a24      	ldr	r2, [pc, #144]	; (80086a8 <DMA_SetConfig+0x344>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d013      	beq.n	8008642 <DMA_SetConfig+0x2de>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a23      	ldr	r2, [pc, #140]	; (80086ac <DMA_SetConfig+0x348>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d00e      	beq.n	8008642 <DMA_SetConfig+0x2de>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a21      	ldr	r2, [pc, #132]	; (80086b0 <DMA_SetConfig+0x34c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d009      	beq.n	8008642 <DMA_SetConfig+0x2de>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a20      	ldr	r2, [pc, #128]	; (80086b4 <DMA_SetConfig+0x350>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d004      	beq.n	8008642 <DMA_SetConfig+0x2de>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1e      	ldr	r2, [pc, #120]	; (80086b8 <DMA_SetConfig+0x354>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d101      	bne.n	8008646 <DMA_SetConfig+0x2e2>
 8008642:	2301      	movs	r3, #1
 8008644:	e000      	b.n	8008648 <DMA_SetConfig+0x2e4>
 8008646:	2300      	movs	r3, #0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d020      	beq.n	800868e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008650:	f003 031f 	and.w	r3, r3, #31
 8008654:	2201      	movs	r2, #1
 8008656:	409a      	lsls	r2, r3
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	2b40      	cmp	r3, #64	; 0x40
 800866a:	d108      	bne.n	800867e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	60da      	str	r2, [r3, #12]
}
 800867c:	e007      	b.n	800868e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	60da      	str	r2, [r3, #12]
}
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	58025408 	.word	0x58025408
 80086a0:	5802541c 	.word	0x5802541c
 80086a4:	58025430 	.word	0x58025430
 80086a8:	58025444 	.word	0x58025444
 80086ac:	58025458 	.word	0x58025458
 80086b0:	5802546c 	.word	0x5802546c
 80086b4:	58025480 	.word	0x58025480
 80086b8:	58025494 	.word	0x58025494

080086bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a42      	ldr	r2, [pc, #264]	; (80087d4 <DMA_CalcBaseAndBitshift+0x118>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d04a      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a41      	ldr	r2, [pc, #260]	; (80087d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d045      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a3f      	ldr	r2, [pc, #252]	; (80087dc <DMA_CalcBaseAndBitshift+0x120>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d040      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a3e      	ldr	r2, [pc, #248]	; (80087e0 <DMA_CalcBaseAndBitshift+0x124>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d03b      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a3c      	ldr	r2, [pc, #240]	; (80087e4 <DMA_CalcBaseAndBitshift+0x128>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d036      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a3b      	ldr	r2, [pc, #236]	; (80087e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d031      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a39      	ldr	r2, [pc, #228]	; (80087ec <DMA_CalcBaseAndBitshift+0x130>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d02c      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a38      	ldr	r2, [pc, #224]	; (80087f0 <DMA_CalcBaseAndBitshift+0x134>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d027      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a36      	ldr	r2, [pc, #216]	; (80087f4 <DMA_CalcBaseAndBitshift+0x138>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d022      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a35      	ldr	r2, [pc, #212]	; (80087f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d01d      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a33      	ldr	r2, [pc, #204]	; (80087fc <DMA_CalcBaseAndBitshift+0x140>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d018      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a32      	ldr	r2, [pc, #200]	; (8008800 <DMA_CalcBaseAndBitshift+0x144>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d013      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a30      	ldr	r2, [pc, #192]	; (8008804 <DMA_CalcBaseAndBitshift+0x148>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00e      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a2f      	ldr	r2, [pc, #188]	; (8008808 <DMA_CalcBaseAndBitshift+0x14c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d009      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a2d      	ldr	r2, [pc, #180]	; (800880c <DMA_CalcBaseAndBitshift+0x150>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d004      	beq.n	8008764 <DMA_CalcBaseAndBitshift+0xa8>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a2c      	ldr	r2, [pc, #176]	; (8008810 <DMA_CalcBaseAndBitshift+0x154>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d101      	bne.n	8008768 <DMA_CalcBaseAndBitshift+0xac>
 8008764:	2301      	movs	r3, #1
 8008766:	e000      	b.n	800876a <DMA_CalcBaseAndBitshift+0xae>
 8008768:	2300      	movs	r3, #0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d024      	beq.n	80087b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	b2db      	uxtb	r3, r3
 8008774:	3b10      	subs	r3, #16
 8008776:	4a27      	ldr	r2, [pc, #156]	; (8008814 <DMA_CalcBaseAndBitshift+0x158>)
 8008778:	fba2 2303 	umull	r2, r3, r2, r3
 800877c:	091b      	lsrs	r3, r3, #4
 800877e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	4a24      	ldr	r2, [pc, #144]	; (8008818 <DMA_CalcBaseAndBitshift+0x15c>)
 8008788:	5cd3      	ldrb	r3, [r2, r3]
 800878a:	461a      	mov	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b03      	cmp	r3, #3
 8008794:	d908      	bls.n	80087a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	4b1f      	ldr	r3, [pc, #124]	; (800881c <DMA_CalcBaseAndBitshift+0x160>)
 800879e:	4013      	ands	r3, r2
 80087a0:	1d1a      	adds	r2, r3, #4
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	659a      	str	r2, [r3, #88]	; 0x58
 80087a6:	e00d      	b.n	80087c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	461a      	mov	r2, r3
 80087ae:	4b1b      	ldr	r3, [pc, #108]	; (800881c <DMA_CalcBaseAndBitshift+0x160>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6593      	str	r3, [r2, #88]	; 0x58
 80087b6:	e005      	b.n	80087c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	40020010 	.word	0x40020010
 80087d8:	40020028 	.word	0x40020028
 80087dc:	40020040 	.word	0x40020040
 80087e0:	40020058 	.word	0x40020058
 80087e4:	40020070 	.word	0x40020070
 80087e8:	40020088 	.word	0x40020088
 80087ec:	400200a0 	.word	0x400200a0
 80087f0:	400200b8 	.word	0x400200b8
 80087f4:	40020410 	.word	0x40020410
 80087f8:	40020428 	.word	0x40020428
 80087fc:	40020440 	.word	0x40020440
 8008800:	40020458 	.word	0x40020458
 8008804:	40020470 	.word	0x40020470
 8008808:	40020488 	.word	0x40020488
 800880c:	400204a0 	.word	0x400204a0
 8008810:	400204b8 	.word	0x400204b8
 8008814:	aaaaaaab 	.word	0xaaaaaaab
 8008818:	080170f4 	.word	0x080170f4
 800881c:	fffffc00 	.word	0xfffffc00

08008820 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d120      	bne.n	8008876 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008838:	2b03      	cmp	r3, #3
 800883a:	d858      	bhi.n	80088ee <DMA_CheckFifoParam+0xce>
 800883c:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <DMA_CheckFifoParam+0x24>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	08008855 	.word	0x08008855
 8008848:	08008867 	.word	0x08008867
 800884c:	08008855 	.word	0x08008855
 8008850:	080088ef 	.word	0x080088ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d048      	beq.n	80088f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008864:	e045      	b.n	80088f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800886e:	d142      	bne.n	80088f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008874:	e03f      	b.n	80088f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887e:	d123      	bne.n	80088c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	2b03      	cmp	r3, #3
 8008886:	d838      	bhi.n	80088fa <DMA_CheckFifoParam+0xda>
 8008888:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <DMA_CheckFifoParam+0x70>)
 800888a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888e:	bf00      	nop
 8008890:	080088a1 	.word	0x080088a1
 8008894:	080088a7 	.word	0x080088a7
 8008898:	080088a1 	.word	0x080088a1
 800889c:	080088b9 	.word	0x080088b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
        break;
 80088a4:	e030      	b.n	8008908 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d025      	beq.n	80088fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088b6:	e022      	b.n	80088fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088c0:	d11f      	bne.n	8008902 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088c6:	e01c      	b.n	8008902 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d902      	bls.n	80088d6 <DMA_CheckFifoParam+0xb6>
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d003      	beq.n	80088dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80088d4:	e018      	b.n	8008908 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	73fb      	strb	r3, [r7, #15]
        break;
 80088da:	e015      	b.n	8008908 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00e      	beq.n	8008906 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	73fb      	strb	r3, [r7, #15]
    break;
 80088ec:	e00b      	b.n	8008906 <DMA_CheckFifoParam+0xe6>
        break;
 80088ee:	bf00      	nop
 80088f0:	e00a      	b.n	8008908 <DMA_CheckFifoParam+0xe8>
        break;
 80088f2:	bf00      	nop
 80088f4:	e008      	b.n	8008908 <DMA_CheckFifoParam+0xe8>
        break;
 80088f6:	bf00      	nop
 80088f8:	e006      	b.n	8008908 <DMA_CheckFifoParam+0xe8>
        break;
 80088fa:	bf00      	nop
 80088fc:	e004      	b.n	8008908 <DMA_CheckFifoParam+0xe8>
        break;
 80088fe:	bf00      	nop
 8008900:	e002      	b.n	8008908 <DMA_CheckFifoParam+0xe8>
        break;
 8008902:	bf00      	nop
 8008904:	e000      	b.n	8008908 <DMA_CheckFifoParam+0xe8>
    break;
 8008906:	bf00      	nop
    }
  }

  return status;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a38      	ldr	r2, [pc, #224]	; (8008a0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d022      	beq.n	8008976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a36      	ldr	r2, [pc, #216]	; (8008a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d01d      	beq.n	8008976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a35      	ldr	r2, [pc, #212]	; (8008a14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d018      	beq.n	8008976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a33      	ldr	r2, [pc, #204]	; (8008a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d013      	beq.n	8008976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a32      	ldr	r2, [pc, #200]	; (8008a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d00e      	beq.n	8008976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a30      	ldr	r2, [pc, #192]	; (8008a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d009      	beq.n	8008976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a2f      	ldr	r2, [pc, #188]	; (8008a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d004      	beq.n	8008976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a2d      	ldr	r2, [pc, #180]	; (8008a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d101      	bne.n	800897a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01a      	beq.n	80089b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	3b08      	subs	r3, #8
 8008988:	4a28      	ldr	r2, [pc, #160]	; (8008a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800898a:	fba2 2303 	umull	r2, r3, r2, r3
 800898e:	091b      	lsrs	r3, r3, #4
 8008990:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4b26      	ldr	r3, [pc, #152]	; (8008a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	461a      	mov	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a24      	ldr	r2, [pc, #144]	; (8008a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80089a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f003 031f 	and.w	r3, r3, #31
 80089ac:	2201      	movs	r2, #1
 80089ae:	409a      	lsls	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80089b4:	e024      	b.n	8008a00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	3b10      	subs	r3, #16
 80089be:	4a1e      	ldr	r2, [pc, #120]	; (8008a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80089c0:	fba2 2303 	umull	r2, r3, r2, r3
 80089c4:	091b      	lsrs	r3, r3, #4
 80089c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4a1c      	ldr	r2, [pc, #112]	; (8008a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d806      	bhi.n	80089de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d902      	bls.n	80089de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3308      	adds	r3, #8
 80089dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4b18      	ldr	r3, [pc, #96]	; (8008a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	461a      	mov	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a16      	ldr	r2, [pc, #88]	; (8008a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80089f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f003 031f 	and.w	r3, r3, #31
 80089f8:	2201      	movs	r2, #1
 80089fa:	409a      	lsls	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a00:	bf00      	nop
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	58025408 	.word	0x58025408
 8008a10:	5802541c 	.word	0x5802541c
 8008a14:	58025430 	.word	0x58025430
 8008a18:	58025444 	.word	0x58025444
 8008a1c:	58025458 	.word	0x58025458
 8008a20:	5802546c 	.word	0x5802546c
 8008a24:	58025480 	.word	0x58025480
 8008a28:	58025494 	.word	0x58025494
 8008a2c:	cccccccd 	.word	0xcccccccd
 8008a30:	16009600 	.word	0x16009600
 8008a34:	58025880 	.word	0x58025880
 8008a38:	aaaaaaab 	.word	0xaaaaaaab
 8008a3c:	400204b8 	.word	0x400204b8
 8008a40:	4002040f 	.word	0x4002040f
 8008a44:	10008200 	.word	0x10008200
 8008a48:	40020880 	.word	0x40020880

08008a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d04a      	beq.n	8008af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d847      	bhi.n	8008af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a25      	ldr	r2, [pc, #148]	; (8008b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d022      	beq.n	8008ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a24      	ldr	r2, [pc, #144]	; (8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d01d      	beq.n	8008ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a22      	ldr	r2, [pc, #136]	; (8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d018      	beq.n	8008ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a21      	ldr	r2, [pc, #132]	; (8008b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d013      	beq.n	8008ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1f      	ldr	r2, [pc, #124]	; (8008b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00e      	beq.n	8008ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a1e      	ldr	r2, [pc, #120]	; (8008b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d009      	beq.n	8008ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a1c      	ldr	r2, [pc, #112]	; (8008b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d004      	beq.n	8008ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a1b      	ldr	r2, [pc, #108]	; (8008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d101      	bne.n	8008abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008abc:	2300      	movs	r3, #0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	4b17      	ldr	r3, [pc, #92]	; (8008b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	461a      	mov	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a15      	ldr	r2, [pc, #84]	; (8008b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008ad4:	671a      	str	r2, [r3, #112]	; 0x70
 8008ad6:	e009      	b.n	8008aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4b14      	ldr	r3, [pc, #80]	; (8008b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008adc:	4413      	add	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a11      	ldr	r2, [pc, #68]	; (8008b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008aea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	2201      	movs	r2, #1
 8008af2:	409a      	lsls	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008af8:	bf00      	nop
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	58025408 	.word	0x58025408
 8008b08:	5802541c 	.word	0x5802541c
 8008b0c:	58025430 	.word	0x58025430
 8008b10:	58025444 	.word	0x58025444
 8008b14:	58025458 	.word	0x58025458
 8008b18:	5802546c 	.word	0x5802546c
 8008b1c:	58025480 	.word	0x58025480
 8008b20:	58025494 	.word	0x58025494
 8008b24:	1600963f 	.word	0x1600963f
 8008b28:	58025940 	.word	0x58025940
 8008b2c:	1000823f 	.word	0x1000823f
 8008b30:	40020940 	.word	0x40020940

08008b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b089      	sub	sp, #36	; 0x24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b42:	4b89      	ldr	r3, [pc, #548]	; (8008d68 <HAL_GPIO_Init+0x234>)
 8008b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b46:	e194      	b.n	8008e72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	fa01 f303 	lsl.w	r3, r1, r3
 8008b54:	4013      	ands	r3, r2
 8008b56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 8186 	beq.w	8008e6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f003 0303 	and.w	r3, r3, #3
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d005      	beq.n	8008b78 <HAL_GPIO_Init+0x44>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 0303 	and.w	r3, r3, #3
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d130      	bne.n	8008bda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	2203      	movs	r2, #3
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	43db      	mvns	r3, r3
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bae:	2201      	movs	r2, #1
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	43db      	mvns	r3, r3
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	091b      	lsrs	r3, r3, #4
 8008bc4:	f003 0201 	and.w	r2, r3, #1
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	fa02 f303 	lsl.w	r3, r2, r3
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d017      	beq.n	8008c16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	43db      	mvns	r3, r3
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f003 0303 	and.w	r3, r3, #3
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d123      	bne.n	8008c6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	08da      	lsrs	r2, r3, #3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3208      	adds	r2, #8
 8008c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	220f      	movs	r2, #15
 8008c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3e:	43db      	mvns	r3, r3
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	4013      	ands	r3, r2
 8008c44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	691a      	ldr	r2, [r3, #16]
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	08da      	lsrs	r2, r3, #3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3208      	adds	r2, #8
 8008c64:	69b9      	ldr	r1, [r7, #24]
 8008c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	2203      	movs	r2, #3
 8008c76:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7a:	43db      	mvns	r3, r3
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f003 0203 	and.w	r2, r3, #3
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 80e0 	beq.w	8008e6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cac:	4b2f      	ldr	r3, [pc, #188]	; (8008d6c <HAL_GPIO_Init+0x238>)
 8008cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008cb2:	4a2e      	ldr	r2, [pc, #184]	; (8008d6c <HAL_GPIO_Init+0x238>)
 8008cb4:	f043 0302 	orr.w	r3, r3, #2
 8008cb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008cbc:	4b2b      	ldr	r3, [pc, #172]	; (8008d6c <HAL_GPIO_Init+0x238>)
 8008cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cca:	4a29      	ldr	r2, [pc, #164]	; (8008d70 <HAL_GPIO_Init+0x23c>)
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	089b      	lsrs	r3, r3, #2
 8008cd0:	3302      	adds	r3, #2
 8008cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	f003 0303 	and.w	r3, r3, #3
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	220f      	movs	r2, #15
 8008ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce6:	43db      	mvns	r3, r3
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	4013      	ands	r3, r2
 8008cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a20      	ldr	r2, [pc, #128]	; (8008d74 <HAL_GPIO_Init+0x240>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d052      	beq.n	8008d9c <HAL_GPIO_Init+0x268>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a1f      	ldr	r2, [pc, #124]	; (8008d78 <HAL_GPIO_Init+0x244>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d031      	beq.n	8008d62 <HAL_GPIO_Init+0x22e>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a1e      	ldr	r2, [pc, #120]	; (8008d7c <HAL_GPIO_Init+0x248>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d02b      	beq.n	8008d5e <HAL_GPIO_Init+0x22a>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a1d      	ldr	r2, [pc, #116]	; (8008d80 <HAL_GPIO_Init+0x24c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d025      	beq.n	8008d5a <HAL_GPIO_Init+0x226>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a1c      	ldr	r2, [pc, #112]	; (8008d84 <HAL_GPIO_Init+0x250>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d01f      	beq.n	8008d56 <HAL_GPIO_Init+0x222>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a1b      	ldr	r2, [pc, #108]	; (8008d88 <HAL_GPIO_Init+0x254>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d019      	beq.n	8008d52 <HAL_GPIO_Init+0x21e>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a1a      	ldr	r2, [pc, #104]	; (8008d8c <HAL_GPIO_Init+0x258>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d013      	beq.n	8008d4e <HAL_GPIO_Init+0x21a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a19      	ldr	r2, [pc, #100]	; (8008d90 <HAL_GPIO_Init+0x25c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00d      	beq.n	8008d4a <HAL_GPIO_Init+0x216>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a18      	ldr	r2, [pc, #96]	; (8008d94 <HAL_GPIO_Init+0x260>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d007      	beq.n	8008d46 <HAL_GPIO_Init+0x212>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a17      	ldr	r2, [pc, #92]	; (8008d98 <HAL_GPIO_Init+0x264>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d101      	bne.n	8008d42 <HAL_GPIO_Init+0x20e>
 8008d3e:	2309      	movs	r3, #9
 8008d40:	e02d      	b.n	8008d9e <HAL_GPIO_Init+0x26a>
 8008d42:	230a      	movs	r3, #10
 8008d44:	e02b      	b.n	8008d9e <HAL_GPIO_Init+0x26a>
 8008d46:	2308      	movs	r3, #8
 8008d48:	e029      	b.n	8008d9e <HAL_GPIO_Init+0x26a>
 8008d4a:	2307      	movs	r3, #7
 8008d4c:	e027      	b.n	8008d9e <HAL_GPIO_Init+0x26a>
 8008d4e:	2306      	movs	r3, #6
 8008d50:	e025      	b.n	8008d9e <HAL_GPIO_Init+0x26a>
 8008d52:	2305      	movs	r3, #5
 8008d54:	e023      	b.n	8008d9e <HAL_GPIO_Init+0x26a>
 8008d56:	2304      	movs	r3, #4
 8008d58:	e021      	b.n	8008d9e <HAL_GPIO_Init+0x26a>
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e01f      	b.n	8008d9e <HAL_GPIO_Init+0x26a>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e01d      	b.n	8008d9e <HAL_GPIO_Init+0x26a>
 8008d62:	2301      	movs	r3, #1
 8008d64:	e01b      	b.n	8008d9e <HAL_GPIO_Init+0x26a>
 8008d66:	bf00      	nop
 8008d68:	58000080 	.word	0x58000080
 8008d6c:	58024400 	.word	0x58024400
 8008d70:	58000400 	.word	0x58000400
 8008d74:	58020000 	.word	0x58020000
 8008d78:	58020400 	.word	0x58020400
 8008d7c:	58020800 	.word	0x58020800
 8008d80:	58020c00 	.word	0x58020c00
 8008d84:	58021000 	.word	0x58021000
 8008d88:	58021400 	.word	0x58021400
 8008d8c:	58021800 	.word	0x58021800
 8008d90:	58021c00 	.word	0x58021c00
 8008d94:	58022000 	.word	0x58022000
 8008d98:	58022400 	.word	0x58022400
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	f002 0203 	and.w	r2, r2, #3
 8008da4:	0092      	lsls	r2, r2, #2
 8008da6:	4093      	lsls	r3, r2
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008dae:	4938      	ldr	r1, [pc, #224]	; (8008e90 <HAL_GPIO_Init+0x35c>)
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	089b      	lsrs	r3, r3, #2
 8008db4:	3302      	adds	r3, #2
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	43db      	mvns	r3, r3
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008de2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	43db      	mvns	r3, r3
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	43db      	mvns	r3, r3
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	4013      	ands	r3, r2
 8008e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	43db      	mvns	r3, r3
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	4013      	ands	r3, r2
 8008e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f47f ae63 	bne.w	8008b48 <HAL_GPIO_Init+0x14>
  }
}
 8008e82:	bf00      	nop
 8008e84:	bf00      	nop
 8008e86:	3724      	adds	r7, #36	; 0x24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	58000400 	.word	0x58000400

08008e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	691a      	ldr	r2, [r3, #16]
 8008ea4:	887b      	ldrh	r3, [r7, #2]
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008eac:	2301      	movs	r3, #1
 8008eae:	73fb      	strb	r3, [r7, #15]
 8008eb0:	e001      	b.n	8008eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	807b      	strh	r3, [r7, #2]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ed4:	787b      	ldrb	r3, [r7, #1]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008eda:	887a      	ldrh	r2, [r7, #2]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008ee0:	e003      	b.n	8008eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ee2:	887b      	ldrh	r3, [r7, #2]
 8008ee4:	041a      	lsls	r2, r3, #16
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	619a      	str	r2, [r3, #24]
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
	...

08008ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e08b      	b.n	8009022 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7fa f8d2 	bl	80030c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2224      	movs	r2, #36	; 0x24
 8008f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0201 	bic.w	r2, r2, #1
 8008f3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d107      	bne.n	8008f72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f6e:	609a      	str	r2, [r3, #8]
 8008f70:	e006      	b.n	8008f80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	689a      	ldr	r2, [r3, #8]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008f7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d108      	bne.n	8008f9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f96:	605a      	str	r2, [r3, #4]
 8008f98:	e007      	b.n	8008faa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fa8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6859      	ldr	r1, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	4b1d      	ldr	r3, [pc, #116]	; (800902c <HAL_I2C_Init+0x134>)
 8008fb6:	430b      	orrs	r3, r1
 8008fb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691a      	ldr	r2, [r3, #16]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69d9      	ldr	r1, [r3, #28]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a1a      	ldr	r2, [r3, #32]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0201 	orr.w	r2, r2, #1
 8009002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2220      	movs	r2, #32
 800900e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	02008000 	.word	0x02008000

08009030 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	607a      	str	r2, [r7, #4]
 800903a:	461a      	mov	r2, r3
 800903c:	460b      	mov	r3, r1
 800903e:	817b      	strh	r3, [r7, #10]
 8009040:	4613      	mov	r3, r2
 8009042:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b20      	cmp	r3, #32
 800904e:	f040 80fd 	bne.w	800924c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_I2C_Master_Transmit+0x30>
 800905c:	2302      	movs	r3, #2
 800905e:	e0f6      	b.n	800924e <HAL_I2C_Master_Transmit+0x21e>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009068:	f7fa fe00 	bl	8003c6c <HAL_GetTick>
 800906c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	2319      	movs	r3, #25
 8009074:	2201      	movs	r2, #1
 8009076:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 fa0a 	bl	8009494 <I2C_WaitOnFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e0e1      	b.n	800924e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2221      	movs	r2, #33	; 0x21
 800908e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2210      	movs	r2, #16
 8009096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	893a      	ldrh	r2, [r7, #8]
 80090aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2bff      	cmp	r3, #255	; 0xff
 80090ba:	d906      	bls.n	80090ca <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	22ff      	movs	r2, #255	; 0xff
 80090c0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80090c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e007      	b.n	80090da <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80090d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d024      	beq.n	800912c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	b29a      	uxth	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910a:	3b01      	subs	r3, #1
 800910c:	b29a      	uxth	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009116:	b2db      	uxtb	r3, r3
 8009118:	3301      	adds	r3, #1
 800911a:	b2da      	uxtb	r2, r3
 800911c:	8979      	ldrh	r1, [r7, #10]
 800911e:	4b4e      	ldr	r3, [pc, #312]	; (8009258 <HAL_I2C_Master_Transmit+0x228>)
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 fc05 	bl	8009934 <I2C_TransferConfig>
 800912a:	e066      	b.n	80091fa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009130:	b2da      	uxtb	r2, r3
 8009132:	8979      	ldrh	r1, [r7, #10]
 8009134:	4b48      	ldr	r3, [pc, #288]	; (8009258 <HAL_I2C_Master_Transmit+0x228>)
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 fbfa 	bl	8009934 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009140:	e05b      	b.n	80091fa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	6a39      	ldr	r1, [r7, #32]
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 f9fd 	bl	8009546 <I2C_WaitOnTXISFlagUntilTimeout>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e07b      	b.n	800924e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	781a      	ldrb	r2, [r3, #0]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009170:	b29b      	uxth	r3, r3
 8009172:	3b01      	subs	r3, #1
 8009174:	b29a      	uxth	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917e:	3b01      	subs	r3, #1
 8009180:	b29a      	uxth	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d034      	beq.n	80091fa <HAL_I2C_Master_Transmit+0x1ca>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009194:	2b00      	cmp	r3, #0
 8009196:	d130      	bne.n	80091fa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	2200      	movs	r2, #0
 80091a0:	2180      	movs	r1, #128	; 0x80
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 f976 	bl	8009494 <I2C_WaitOnFlagUntilTimeout>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e04d      	b.n	800924e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	2bff      	cmp	r3, #255	; 0xff
 80091ba:	d90e      	bls.n	80091da <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	22ff      	movs	r2, #255	; 0xff
 80091c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	8979      	ldrh	r1, [r7, #10]
 80091ca:	2300      	movs	r3, #0
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 fbae 	bl	8009934 <I2C_TransferConfig>
 80091d8:	e00f      	b.n	80091fa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091de:	b29a      	uxth	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	8979      	ldrh	r1, [r7, #10]
 80091ec:	2300      	movs	r3, #0
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 fb9d 	bl	8009934 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fe:	b29b      	uxth	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d19e      	bne.n	8009142 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	6a39      	ldr	r1, [r7, #32]
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f9e3 	bl	80095d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e01a      	b.n	800924e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2220      	movs	r2, #32
 800921e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6859      	ldr	r1, [r3, #4]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	4b0c      	ldr	r3, [pc, #48]	; (800925c <HAL_I2C_Master_Transmit+0x22c>)
 800922c:	400b      	ands	r3, r1
 800922e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2220      	movs	r2, #32
 8009234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	e000      	b.n	800924e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800924c:	2302      	movs	r3, #2
  }
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	80002000 	.word	0x80002000
 800925c:	fe00e800 	.word	0xfe00e800

08009260 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b088      	sub	sp, #32
 8009264:	af02      	add	r7, sp, #8
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	607a      	str	r2, [r7, #4]
 800926a:	461a      	mov	r2, r3
 800926c:	460b      	mov	r3, r1
 800926e:	817b      	strh	r3, [r7, #10]
 8009270:	4613      	mov	r3, r2
 8009272:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b20      	cmp	r3, #32
 800927e:	f040 80db 	bne.w	8009438 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_I2C_Master_Receive+0x30>
 800928c:	2302      	movs	r3, #2
 800928e:	e0d4      	b.n	800943a <HAL_I2C_Master_Receive+0x1da>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009298:	f7fa fce8 	bl	8003c6c <HAL_GetTick>
 800929c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	2319      	movs	r3, #25
 80092a4:	2201      	movs	r2, #1
 80092a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 f8f2 	bl	8009494 <I2C_WaitOnFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e0bf      	b.n	800943a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2222      	movs	r2, #34	; 0x22
 80092be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2210      	movs	r2, #16
 80092c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	893a      	ldrh	r2, [r7, #8]
 80092da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	2bff      	cmp	r3, #255	; 0xff
 80092ea:	d90e      	bls.n	800930a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	22ff      	movs	r2, #255	; 0xff
 80092f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	8979      	ldrh	r1, [r7, #10]
 80092fa:	4b52      	ldr	r3, [pc, #328]	; (8009444 <HAL_I2C_Master_Receive+0x1e4>)
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 fb16 	bl	8009934 <I2C_TransferConfig>
 8009308:	e06d      	b.n	80093e6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800930e:	b29a      	uxth	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009318:	b2da      	uxtb	r2, r3
 800931a:	8979      	ldrh	r1, [r7, #10]
 800931c:	4b49      	ldr	r3, [pc, #292]	; (8009444 <HAL_I2C_Master_Receive+0x1e4>)
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fb05 	bl	8009934 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800932a:	e05c      	b.n	80093e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	6a39      	ldr	r1, [r7, #32]
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 f993 	bl	800965c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e07c      	b.n	800943a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934a:	b2d2      	uxtb	r2, r2
 800934c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800935c:	3b01      	subs	r3, #1
 800935e:	b29a      	uxth	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009368:	b29b      	uxth	r3, r3
 800936a:	3b01      	subs	r3, #1
 800936c:	b29a      	uxth	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009376:	b29b      	uxth	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d034      	beq.n	80093e6 <HAL_I2C_Master_Receive+0x186>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009380:	2b00      	cmp	r3, #0
 8009382:	d130      	bne.n	80093e6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	2200      	movs	r2, #0
 800938c:	2180      	movs	r1, #128	; 0x80
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 f880 	bl	8009494 <I2C_WaitOnFlagUntilTimeout>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e04d      	b.n	800943a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	2bff      	cmp	r3, #255	; 0xff
 80093a6:	d90e      	bls.n	80093c6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	22ff      	movs	r2, #255	; 0xff
 80093ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	8979      	ldrh	r1, [r7, #10]
 80093b6:	2300      	movs	r3, #0
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 fab8 	bl	8009934 <I2C_TransferConfig>
 80093c4:	e00f      	b.n	80093e6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	8979      	ldrh	r1, [r7, #10]
 80093d8:	2300      	movs	r3, #0
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 faa7 	bl	8009934 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d19d      	bne.n	800932c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	6a39      	ldr	r1, [r7, #32]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f8ed 	bl	80095d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e01a      	b.n	800943a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2220      	movs	r2, #32
 800940a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6859      	ldr	r1, [r3, #4]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	4b0c      	ldr	r3, [pc, #48]	; (8009448 <HAL_I2C_Master_Receive+0x1e8>)
 8009418:	400b      	ands	r3, r1
 800941a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2220      	movs	r2, #32
 8009420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	e000      	b.n	800943a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009438:	2302      	movs	r3, #2
  }
}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	80002400 	.word	0x80002400
 8009448:	fe00e800 	.word	0xfe00e800

0800944c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	f003 0302 	and.w	r3, r3, #2
 800945e:	2b02      	cmp	r3, #2
 8009460:	d103      	bne.n	800946a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2200      	movs	r2, #0
 8009468:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b01      	cmp	r3, #1
 8009476:	d007      	beq.n	8009488 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	699a      	ldr	r2, [r3, #24]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0201 	orr.w	r2, r2, #1
 8009486:	619a      	str	r2, [r3, #24]
  }
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	603b      	str	r3, [r7, #0]
 80094a0:	4613      	mov	r3, r2
 80094a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094a4:	e03b      	b.n	800951e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 f962 	bl	8009774 <I2C_IsErrorOccurred>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e041      	b.n	800953e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094c0:	d02d      	beq.n	800951e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094c2:	f7fa fbd3 	bl	8003c6c <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d302      	bcc.n	80094d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d122      	bne.n	800951e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	699a      	ldr	r2, [r3, #24]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	4013      	ands	r3, r2
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	bf0c      	ite	eq
 80094e8:	2301      	moveq	r3, #1
 80094ea:	2300      	movne	r3, #0
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	461a      	mov	r2, r3
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d113      	bne.n	800951e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fa:	f043 0220 	orr.w	r2, r3, #32
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2220      	movs	r2, #32
 8009506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e00f      	b.n	800953e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	699a      	ldr	r2, [r3, #24]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4013      	ands	r3, r2
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	429a      	cmp	r2, r3
 800952c:	bf0c      	ite	eq
 800952e:	2301      	moveq	r3, #1
 8009530:	2300      	movne	r3, #0
 8009532:	b2db      	uxtb	r3, r3
 8009534:	461a      	mov	r2, r3
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	429a      	cmp	r2, r3
 800953a:	d0b4      	beq.n	80094a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009552:	e033      	b.n	80095bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	68b9      	ldr	r1, [r7, #8]
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 f90b 	bl	8009774 <I2C_IsErrorOccurred>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e031      	b.n	80095cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800956e:	d025      	beq.n	80095bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009570:	f7fa fb7c 	bl	8003c6c <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	429a      	cmp	r2, r3
 800957e:	d302      	bcc.n	8009586 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d11a      	bne.n	80095bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b02      	cmp	r3, #2
 8009592:	d013      	beq.n	80095bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009598:	f043 0220 	orr.w	r2, r3, #32
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2220      	movs	r2, #32
 80095a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e007      	b.n	80095cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d1c4      	bne.n	8009554 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095e0:	e02f      	b.n	8009642 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	68b9      	ldr	r1, [r7, #8]
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 f8c4 	bl	8009774 <I2C_IsErrorOccurred>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e02d      	b.n	8009652 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095f6:	f7fa fb39 	bl	8003c6c <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	429a      	cmp	r2, r3
 8009604:	d302      	bcc.n	800960c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d11a      	bne.n	8009642 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b20      	cmp	r3, #32
 8009618:	d013      	beq.n	8009642 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961e:	f043 0220 	orr.w	r2, r3, #32
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2220      	movs	r2, #32
 800962a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e007      	b.n	8009652 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	f003 0320 	and.w	r3, r3, #32
 800964c:	2b20      	cmp	r3, #32
 800964e:	d1c8      	bne.n	80095e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800966c:	e071      	b.n	8009752 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	68b9      	ldr	r1, [r7, #8]
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 f87e 	bl	8009774 <I2C_IsErrorOccurred>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	f003 0320 	and.w	r3, r3, #32
 800968c:	2b20      	cmp	r3, #32
 800968e:	d13b      	bne.n	8009708 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d138      	bne.n	8009708 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	d105      	bne.n	80096b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	f003 0310 	and.w	r3, r3, #16
 80096ba:	2b10      	cmp	r3, #16
 80096bc:	d121      	bne.n	8009702 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2210      	movs	r2, #16
 80096c4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2204      	movs	r2, #4
 80096ca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2220      	movs	r2, #32
 80096d2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6859      	ldr	r1, [r3, #4]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	4b24      	ldr	r3, [pc, #144]	; (8009770 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80096e0:	400b      	ands	r3, r1
 80096e2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2220      	movs	r2, #32
 80096e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	75fb      	strb	r3, [r7, #23]
 8009700:	e002      	b.n	8009708 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009708:	f7fa fab0 	bl	8003c6c <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	429a      	cmp	r2, r3
 8009716:	d302      	bcc.n	800971e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d119      	bne.n	8009752 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d116      	bne.n	8009752 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	f003 0304 	and.w	r3, r3, #4
 800972e:	2b04      	cmp	r3, #4
 8009730:	d00f      	beq.n	8009752 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009736:	f043 0220 	orr.w	r2, r3, #32
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2220      	movs	r2, #32
 8009742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b04      	cmp	r3, #4
 800975e:	d002      	beq.n	8009766 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d083      	beq.n	800966e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	fe00e800 	.word	0xfe00e800

08009774 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08a      	sub	sp, #40	; 0x28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800978e:	2300      	movs	r3, #0
 8009790:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	f003 0310 	and.w	r3, r3, #16
 800979c:	2b00      	cmp	r3, #0
 800979e:	d068      	beq.n	8009872 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2210      	movs	r2, #16
 80097a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80097a8:	e049      	b.n	800983e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097b0:	d045      	beq.n	800983e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80097b2:	f7fa fa5b 	bl	8003c6c <HAL_GetTick>
 80097b6:	4602      	mov	r2, r0
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d302      	bcc.n	80097c8 <I2C_IsErrorOccurred+0x54>
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d13a      	bne.n	800983e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ea:	d121      	bne.n	8009830 <I2C_IsErrorOccurred+0xbc>
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097f2:	d01d      	beq.n	8009830 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80097f4:	7cfb      	ldrb	r3, [r7, #19]
 80097f6:	2b20      	cmp	r3, #32
 80097f8:	d01a      	beq.n	8009830 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009808:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800980a:	f7fa fa2f 	bl	8003c6c <HAL_GetTick>
 800980e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009810:	e00e      	b.n	8009830 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009812:	f7fa fa2b 	bl	8003c6c <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	2b19      	cmp	r3, #25
 800981e:	d907      	bls.n	8009830 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	f043 0320 	orr.w	r3, r3, #32
 8009826:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800982e:	e006      	b.n	800983e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	f003 0320 	and.w	r3, r3, #32
 800983a:	2b20      	cmp	r3, #32
 800983c:	d1e9      	bne.n	8009812 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	f003 0320 	and.w	r3, r3, #32
 8009848:	2b20      	cmp	r3, #32
 800984a:	d003      	beq.n	8009854 <I2C_IsErrorOccurred+0xe0>
 800984c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0aa      	beq.n	80097aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009858:	2b00      	cmp	r3, #0
 800985a:	d103      	bne.n	8009864 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2220      	movs	r2, #32
 8009862:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	f043 0304 	orr.w	r3, r3, #4
 800986a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00b      	beq.n	800989c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	f043 0301 	orr.w	r3, r3, #1
 800988a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009894:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00b      	beq.n	80098be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	f043 0308 	orr.w	r3, r3, #8
 80098ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	f043 0302 	orr.w	r3, r3, #2
 80098ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80098e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01c      	beq.n	8009922 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7ff fdaf 	bl	800944c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6859      	ldr	r1, [r3, #4]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	4b0d      	ldr	r3, [pc, #52]	; (8009930 <I2C_IsErrorOccurred+0x1bc>)
 80098fa:	400b      	ands	r3, r1
 80098fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	431a      	orrs	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2220      	movs	r2, #32
 800990e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009926:	4618      	mov	r0, r3
 8009928:	3728      	adds	r7, #40	; 0x28
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	fe00e800 	.word	0xfe00e800

08009934 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	607b      	str	r3, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	817b      	strh	r3, [r7, #10]
 8009942:	4613      	mov	r3, r2
 8009944:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009946:	897b      	ldrh	r3, [r7, #10]
 8009948:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800994c:	7a7b      	ldrb	r3, [r7, #9]
 800994e:	041b      	lsls	r3, r3, #16
 8009950:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009954:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	4313      	orrs	r3, r2
 800995e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009962:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685a      	ldr	r2, [r3, #4]
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	0d5b      	lsrs	r3, r3, #21
 800996e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009972:	4b08      	ldr	r3, [pc, #32]	; (8009994 <I2C_TransferConfig+0x60>)
 8009974:	430b      	orrs	r3, r1
 8009976:	43db      	mvns	r3, r3
 8009978:	ea02 0103 	and.w	r1, r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	430a      	orrs	r2, r1
 8009984:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009986:	bf00      	nop
 8009988:	371c      	adds	r7, #28
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	03ff63ff 	.word	0x03ff63ff

08009998 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	d138      	bne.n	8009a20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d101      	bne.n	80099bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80099b8:	2302      	movs	r3, #2
 80099ba:	e032      	b.n	8009a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2224      	movs	r2, #36	; 0x24
 80099c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 0201 	bic.w	r2, r2, #1
 80099da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80099ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6819      	ldr	r1, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f042 0201 	orr.w	r2, r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2220      	movs	r2, #32
 8009a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	e000      	b.n	8009a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a20:	2302      	movs	r3, #2
  }
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b085      	sub	sp, #20
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b20      	cmp	r3, #32
 8009a42:	d139      	bne.n	8009ab8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d101      	bne.n	8009a52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009a4e:	2302      	movs	r3, #2
 8009a50:	e033      	b.n	8009aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2224      	movs	r2, #36	; 0x24
 8009a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 0201 	bic.w	r2, r2, #1
 8009a70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009a80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	021b      	lsls	r3, r3, #8
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f042 0201 	orr.w	r2, r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2220      	movs	r2, #32
 8009aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	e000      	b.n	8009aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ab8:	2302      	movs	r3, #2
  }
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
	...

08009ac8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ad0:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ad6:	4a0c      	ldr	r2, [pc, #48]	; (8009b08 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009ad8:	f043 0302 	orr.w	r3, r3, #2
 8009adc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009ae0:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ae6:	f003 0302 	and.w	r3, r3, #2
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009aee:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	4906      	ldr	r1, [pc, #24]	; (8009b0c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	604b      	str	r3, [r1, #4]
}
 8009afa:	bf00      	nop
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	58000400 	.word	0x58000400

08009b10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009b18:	4b19      	ldr	r3, [pc, #100]	; (8009b80 <HAL_PWREx_ConfigSupply+0x70>)
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d00a      	beq.n	8009b3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009b24:	4b16      	ldr	r3, [pc, #88]	; (8009b80 <HAL_PWREx_ConfigSupply+0x70>)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d001      	beq.n	8009b36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e01f      	b.n	8009b76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	e01d      	b.n	8009b76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009b3a:	4b11      	ldr	r3, [pc, #68]	; (8009b80 <HAL_PWREx_ConfigSupply+0x70>)
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f023 0207 	bic.w	r2, r3, #7
 8009b42:	490f      	ldr	r1, [pc, #60]	; (8009b80 <HAL_PWREx_ConfigSupply+0x70>)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009b4a:	f7fa f88f 	bl	8003c6c <HAL_GetTick>
 8009b4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b50:	e009      	b.n	8009b66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009b52:	f7fa f88b 	bl	8003c6c <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b60:	d901      	bls.n	8009b66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e007      	b.n	8009b76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b66:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <HAL_PWREx_ConfigSupply+0x70>)
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b72:	d1ee      	bne.n	8009b52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	58024800 	.word	0x58024800

08009b84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08c      	sub	sp, #48	; 0x30
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d102      	bne.n	8009b98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	f000 bc48 	b.w	800a428 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 8088 	beq.w	8009cb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ba6:	4b99      	ldr	r3, [pc, #612]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bb0:	4b96      	ldr	r3, [pc, #600]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	2b10      	cmp	r3, #16
 8009bba:	d007      	beq.n	8009bcc <HAL_RCC_OscConfig+0x48>
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	2b18      	cmp	r3, #24
 8009bc0:	d111      	bne.n	8009be6 <HAL_RCC_OscConfig+0x62>
 8009bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc4:	f003 0303 	and.w	r3, r3, #3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d10c      	bne.n	8009be6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bcc:	4b8f      	ldr	r3, [pc, #572]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d06d      	beq.n	8009cb4 <HAL_RCC_OscConfig+0x130>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d169      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	f000 bc21 	b.w	800a428 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bee:	d106      	bne.n	8009bfe <HAL_RCC_OscConfig+0x7a>
 8009bf0:	4b86      	ldr	r3, [pc, #536]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a85      	ldr	r2, [pc, #532]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	e02e      	b.n	8009c5c <HAL_RCC_OscConfig+0xd8>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10c      	bne.n	8009c20 <HAL_RCC_OscConfig+0x9c>
 8009c06:	4b81      	ldr	r3, [pc, #516]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a80      	ldr	r2, [pc, #512]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c10:	6013      	str	r3, [r2, #0]
 8009c12:	4b7e      	ldr	r3, [pc, #504]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a7d      	ldr	r2, [pc, #500]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	e01d      	b.n	8009c5c <HAL_RCC_OscConfig+0xd8>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c28:	d10c      	bne.n	8009c44 <HAL_RCC_OscConfig+0xc0>
 8009c2a:	4b78      	ldr	r3, [pc, #480]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a77      	ldr	r2, [pc, #476]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	4b75      	ldr	r3, [pc, #468]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a74      	ldr	r2, [pc, #464]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	e00b      	b.n	8009c5c <HAL_RCC_OscConfig+0xd8>
 8009c44:	4b71      	ldr	r3, [pc, #452]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a70      	ldr	r2, [pc, #448]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	4b6e      	ldr	r3, [pc, #440]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a6d      	ldr	r2, [pc, #436]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d013      	beq.n	8009c8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c64:	f7fa f802 	bl	8003c6c <HAL_GetTick>
 8009c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c6a:	e008      	b.n	8009c7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c6c:	f7f9 fffe 	bl	8003c6c <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	2b64      	cmp	r3, #100	; 0x64
 8009c78:	d901      	bls.n	8009c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e3d4      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c7e:	4b63      	ldr	r3, [pc, #396]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d0f0      	beq.n	8009c6c <HAL_RCC_OscConfig+0xe8>
 8009c8a:	e014      	b.n	8009cb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c8c:	f7f9 ffee 	bl	8003c6c <HAL_GetTick>
 8009c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009c92:	e008      	b.n	8009ca6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c94:	f7f9 ffea 	bl	8003c6c <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	2b64      	cmp	r3, #100	; 0x64
 8009ca0:	d901      	bls.n	8009ca6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e3c0      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ca6:	4b59      	ldr	r3, [pc, #356]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1f0      	bne.n	8009c94 <HAL_RCC_OscConfig+0x110>
 8009cb2:	e000      	b.n	8009cb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0302 	and.w	r3, r3, #2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 80ca 	beq.w	8009e58 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cc4:	4b51      	ldr	r3, [pc, #324]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ccc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009cce:	4b4f      	ldr	r3, [pc, #316]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d007      	beq.n	8009cea <HAL_RCC_OscConfig+0x166>
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	2b18      	cmp	r3, #24
 8009cde:	d156      	bne.n	8009d8e <HAL_RCC_OscConfig+0x20a>
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d151      	bne.n	8009d8e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cea:	4b48      	ldr	r3, [pc, #288]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0304 	and.w	r3, r3, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <HAL_RCC_OscConfig+0x17e>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e392      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009d02:	4b42      	ldr	r3, [pc, #264]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f023 0219 	bic.w	r2, r3, #25
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	493f      	ldr	r1, [pc, #252]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d14:	f7f9 ffaa 	bl	8003c6c <HAL_GetTick>
 8009d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d1a:	e008      	b.n	8009d2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d1c:	f7f9 ffa6 	bl	8003c6c <HAL_GetTick>
 8009d20:	4602      	mov	r2, r0
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d901      	bls.n	8009d2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e37c      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d2e:	4b37      	ldr	r3, [pc, #220]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0f0      	beq.n	8009d1c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d3a:	f7f9 ffa3 	bl	8003c84 <HAL_GetREVID>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d817      	bhi.n	8009d78 <HAL_RCC_OscConfig+0x1f4>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	2b40      	cmp	r3, #64	; 0x40
 8009d4e:	d108      	bne.n	8009d62 <HAL_RCC_OscConfig+0x1de>
 8009d50:	4b2e      	ldr	r3, [pc, #184]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009d58:	4a2c      	ldr	r2, [pc, #176]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d5e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d60:	e07a      	b.n	8009e58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d62:	4b2a      	ldr	r3, [pc, #168]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	031b      	lsls	r3, r3, #12
 8009d70:	4926      	ldr	r1, [pc, #152]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d76:	e06f      	b.n	8009e58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d78:	4b24      	ldr	r3, [pc, #144]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	061b      	lsls	r3, r3, #24
 8009d86:	4921      	ldr	r1, [pc, #132]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d8c:	e064      	b.n	8009e58 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d047      	beq.n	8009e26 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009d96:	4b1d      	ldr	r3, [pc, #116]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f023 0219 	bic.w	r2, r3, #25
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	491a      	ldr	r1, [pc, #104]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da8:	f7f9 ff60 	bl	8003c6c <HAL_GetTick>
 8009dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dae:	e008      	b.n	8009dc2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009db0:	f7f9 ff5c 	bl	8003c6c <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d901      	bls.n	8009dc2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e332      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dc2:	4b12      	ldr	r3, [pc, #72]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0304 	and.w	r3, r3, #4
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0f0      	beq.n	8009db0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dce:	f7f9 ff59 	bl	8003c84 <HAL_GetREVID>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d819      	bhi.n	8009e10 <HAL_RCC_OscConfig+0x28c>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	2b40      	cmp	r3, #64	; 0x40
 8009de2:	d108      	bne.n	8009df6 <HAL_RCC_OscConfig+0x272>
 8009de4:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009dec:	4a07      	ldr	r2, [pc, #28]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009df2:	6053      	str	r3, [r2, #4]
 8009df4:	e030      	b.n	8009e58 <HAL_RCC_OscConfig+0x2d4>
 8009df6:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	031b      	lsls	r3, r3, #12
 8009e04:	4901      	ldr	r1, [pc, #4]	; (8009e0c <HAL_RCC_OscConfig+0x288>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	604b      	str	r3, [r1, #4]
 8009e0a:	e025      	b.n	8009e58 <HAL_RCC_OscConfig+0x2d4>
 8009e0c:	58024400 	.word	0x58024400
 8009e10:	4b9a      	ldr	r3, [pc, #616]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	061b      	lsls	r3, r3, #24
 8009e1e:	4997      	ldr	r1, [pc, #604]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	604b      	str	r3, [r1, #4]
 8009e24:	e018      	b.n	8009e58 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e26:	4b95      	ldr	r3, [pc, #596]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a94      	ldr	r2, [pc, #592]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009e2c:	f023 0301 	bic.w	r3, r3, #1
 8009e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e32:	f7f9 ff1b 	bl	8003c6c <HAL_GetTick>
 8009e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009e38:	e008      	b.n	8009e4c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e3a:	f7f9 ff17 	bl	8003c6c <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d901      	bls.n	8009e4c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e2ed      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009e4c:	4b8b      	ldr	r3, [pc, #556]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1f0      	bne.n	8009e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0310 	and.w	r3, r3, #16
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 80a9 	beq.w	8009fb8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e66:	4b85      	ldr	r3, [pc, #532]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e70:	4b82      	ldr	r3, [pc, #520]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e74:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d007      	beq.n	8009e8c <HAL_RCC_OscConfig+0x308>
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2b18      	cmp	r3, #24
 8009e80:	d13a      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x374>
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f003 0303 	and.w	r3, r3, #3
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d135      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e8c:	4b7b      	ldr	r3, [pc, #492]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d005      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x320>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	2b80      	cmp	r3, #128	; 0x80
 8009e9e:	d001      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e2c1      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ea4:	f7f9 feee 	bl	8003c84 <HAL_GetREVID>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	f241 0203 	movw	r2, #4099	; 0x1003
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d817      	bhi.n	8009ee2 <HAL_RCC_OscConfig+0x35e>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	d108      	bne.n	8009ecc <HAL_RCC_OscConfig+0x348>
 8009eba:	4b70      	ldr	r3, [pc, #448]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009ec2:	4a6e      	ldr	r2, [pc, #440]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ec8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009eca:	e075      	b.n	8009fb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ecc:	4b6b      	ldr	r3, [pc, #428]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a1b      	ldr	r3, [r3, #32]
 8009ed8:	069b      	lsls	r3, r3, #26
 8009eda:	4968      	ldr	r1, [pc, #416]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009edc:	4313      	orrs	r3, r2
 8009ede:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ee0:	e06a      	b.n	8009fb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ee2:	4b66      	ldr	r3, [pc, #408]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	061b      	lsls	r3, r3, #24
 8009ef0:	4962      	ldr	r1, [pc, #392]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ef6:	e05f      	b.n	8009fb8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d042      	beq.n	8009f86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009f00:	4b5e      	ldr	r3, [pc, #376]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a5d      	ldr	r2, [pc, #372]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f0c:	f7f9 feae 	bl	8003c6c <HAL_GetTick>
 8009f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f12:	e008      	b.n	8009f26 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009f14:	f7f9 feaa 	bl	8003c6c <HAL_GetTick>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d901      	bls.n	8009f26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e280      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f26:	4b55      	ldr	r3, [pc, #340]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d0f0      	beq.n	8009f14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f32:	f7f9 fea7 	bl	8003c84 <HAL_GetREVID>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d817      	bhi.n	8009f70 <HAL_RCC_OscConfig+0x3ec>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a1b      	ldr	r3, [r3, #32]
 8009f44:	2b20      	cmp	r3, #32
 8009f46:	d108      	bne.n	8009f5a <HAL_RCC_OscConfig+0x3d6>
 8009f48:	4b4c      	ldr	r3, [pc, #304]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009f50:	4a4a      	ldr	r2, [pc, #296]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f56:	6053      	str	r3, [r2, #4]
 8009f58:	e02e      	b.n	8009fb8 <HAL_RCC_OscConfig+0x434>
 8009f5a:	4b48      	ldr	r3, [pc, #288]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	069b      	lsls	r3, r3, #26
 8009f68:	4944      	ldr	r1, [pc, #272]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	604b      	str	r3, [r1, #4]
 8009f6e:	e023      	b.n	8009fb8 <HAL_RCC_OscConfig+0x434>
 8009f70:	4b42      	ldr	r3, [pc, #264]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	061b      	lsls	r3, r3, #24
 8009f7e:	493f      	ldr	r1, [pc, #252]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60cb      	str	r3, [r1, #12]
 8009f84:	e018      	b.n	8009fb8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009f86:	4b3d      	ldr	r3, [pc, #244]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a3c      	ldr	r2, [pc, #240]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f92:	f7f9 fe6b 	bl	8003c6c <HAL_GetTick>
 8009f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009f98:	e008      	b.n	8009fac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009f9a:	f7f9 fe67 	bl	8003c6c <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d901      	bls.n	8009fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e23d      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fac:	4b33      	ldr	r3, [pc, #204]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1f0      	bne.n	8009f9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0308 	and.w	r3, r3, #8
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d036      	beq.n	800a032 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d019      	beq.n	800a000 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fcc:	4b2b      	ldr	r3, [pc, #172]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd0:	4a2a      	ldr	r2, [pc, #168]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009fd2:	f043 0301 	orr.w	r3, r3, #1
 8009fd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fd8:	f7f9 fe48 	bl	8003c6c <HAL_GetTick>
 8009fdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009fde:	e008      	b.n	8009ff2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fe0:	f7f9 fe44 	bl	8003c6c <HAL_GetTick>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d901      	bls.n	8009ff2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e21a      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ff2:	4b22      	ldr	r3, [pc, #136]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 8009ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ff6:	f003 0302 	and.w	r3, r3, #2
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0f0      	beq.n	8009fe0 <HAL_RCC_OscConfig+0x45c>
 8009ffe:	e018      	b.n	800a032 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a000:	4b1e      	ldr	r3, [pc, #120]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 800a002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a004:	4a1d      	ldr	r2, [pc, #116]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 800a006:	f023 0301 	bic.w	r3, r3, #1
 800a00a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a00c:	f7f9 fe2e 	bl	8003c6c <HAL_GetTick>
 800a010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a012:	e008      	b.n	800a026 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a014:	f7f9 fe2a 	bl	8003c6c <HAL_GetTick>
 800a018:	4602      	mov	r2, r0
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d901      	bls.n	800a026 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e200      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a026:	4b15      	ldr	r3, [pc, #84]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 800a028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a02a:	f003 0302 	and.w	r3, r3, #2
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1f0      	bne.n	800a014 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d039      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d01c      	beq.n	800a080 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a046:	4b0d      	ldr	r3, [pc, #52]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a0c      	ldr	r2, [pc, #48]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 800a04c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a050:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a052:	f7f9 fe0b 	bl	8003c6c <HAL_GetTick>
 800a056:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a058:	e008      	b.n	800a06c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a05a:	f7f9 fe07 	bl	8003c6c <HAL_GetTick>
 800a05e:	4602      	mov	r2, r0
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	2b02      	cmp	r3, #2
 800a066:	d901      	bls.n	800a06c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a068:	2303      	movs	r3, #3
 800a06a:	e1dd      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a06c:	4b03      	ldr	r3, [pc, #12]	; (800a07c <HAL_RCC_OscConfig+0x4f8>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d0f0      	beq.n	800a05a <HAL_RCC_OscConfig+0x4d6>
 800a078:	e01b      	b.n	800a0b2 <HAL_RCC_OscConfig+0x52e>
 800a07a:	bf00      	nop
 800a07c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a080:	4b9b      	ldr	r3, [pc, #620]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a9a      	ldr	r2, [pc, #616]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a08a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a08c:	f7f9 fdee 	bl	8003c6c <HAL_GetTick>
 800a090:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a092:	e008      	b.n	800a0a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a094:	f7f9 fdea 	bl	8003c6c <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e1c0      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0a6:	4b92      	ldr	r3, [pc, #584]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f0      	bne.n	800a094 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0304 	and.w	r3, r3, #4
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 8081 	beq.w	800a1c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a0c0:	4b8c      	ldr	r3, [pc, #560]	; (800a2f4 <HAL_RCC_OscConfig+0x770>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a8b      	ldr	r2, [pc, #556]	; (800a2f4 <HAL_RCC_OscConfig+0x770>)
 800a0c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0cc:	f7f9 fdce 	bl	8003c6c <HAL_GetTick>
 800a0d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0d2:	e008      	b.n	800a0e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0d4:	f7f9 fdca 	bl	8003c6c <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	2b64      	cmp	r3, #100	; 0x64
 800a0e0:	d901      	bls.n	800a0e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e1a0      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0e6:	4b83      	ldr	r3, [pc, #524]	; (800a2f4 <HAL_RCC_OscConfig+0x770>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d0f0      	beq.n	800a0d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d106      	bne.n	800a108 <HAL_RCC_OscConfig+0x584>
 800a0fa:	4b7d      	ldr	r3, [pc, #500]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fe:	4a7c      	ldr	r2, [pc, #496]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a100:	f043 0301 	orr.w	r3, r3, #1
 800a104:	6713      	str	r3, [r2, #112]	; 0x70
 800a106:	e02d      	b.n	800a164 <HAL_RCC_OscConfig+0x5e0>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10c      	bne.n	800a12a <HAL_RCC_OscConfig+0x5a6>
 800a110:	4b77      	ldr	r3, [pc, #476]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a114:	4a76      	ldr	r2, [pc, #472]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a116:	f023 0301 	bic.w	r3, r3, #1
 800a11a:	6713      	str	r3, [r2, #112]	; 0x70
 800a11c:	4b74      	ldr	r3, [pc, #464]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a120:	4a73      	ldr	r2, [pc, #460]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a122:	f023 0304 	bic.w	r3, r3, #4
 800a126:	6713      	str	r3, [r2, #112]	; 0x70
 800a128:	e01c      	b.n	800a164 <HAL_RCC_OscConfig+0x5e0>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	2b05      	cmp	r3, #5
 800a130:	d10c      	bne.n	800a14c <HAL_RCC_OscConfig+0x5c8>
 800a132:	4b6f      	ldr	r3, [pc, #444]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a136:	4a6e      	ldr	r2, [pc, #440]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a138:	f043 0304 	orr.w	r3, r3, #4
 800a13c:	6713      	str	r3, [r2, #112]	; 0x70
 800a13e:	4b6c      	ldr	r3, [pc, #432]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a142:	4a6b      	ldr	r2, [pc, #428]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a144:	f043 0301 	orr.w	r3, r3, #1
 800a148:	6713      	str	r3, [r2, #112]	; 0x70
 800a14a:	e00b      	b.n	800a164 <HAL_RCC_OscConfig+0x5e0>
 800a14c:	4b68      	ldr	r3, [pc, #416]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a150:	4a67      	ldr	r2, [pc, #412]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a152:	f023 0301 	bic.w	r3, r3, #1
 800a156:	6713      	str	r3, [r2, #112]	; 0x70
 800a158:	4b65      	ldr	r3, [pc, #404]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15c:	4a64      	ldr	r2, [pc, #400]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a15e:	f023 0304 	bic.w	r3, r3, #4
 800a162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d015      	beq.n	800a198 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a16c:	f7f9 fd7e 	bl	8003c6c <HAL_GetTick>
 800a170:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a172:	e00a      	b.n	800a18a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a174:	f7f9 fd7a 	bl	8003c6c <HAL_GetTick>
 800a178:	4602      	mov	r2, r0
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a182:	4293      	cmp	r3, r2
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e14e      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a18a:	4b59      	ldr	r3, [pc, #356]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18e:	f003 0302 	and.w	r3, r3, #2
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0ee      	beq.n	800a174 <HAL_RCC_OscConfig+0x5f0>
 800a196:	e014      	b.n	800a1c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a198:	f7f9 fd68 	bl	8003c6c <HAL_GetTick>
 800a19c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a19e:	e00a      	b.n	800a1b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1a0:	f7f9 fd64 	bl	8003c6c <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d901      	bls.n	800a1b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	e138      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a1b6:	4b4e      	ldr	r3, [pc, #312]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ba:	f003 0302 	and.w	r3, r3, #2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1ee      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 812d 	beq.w	800a426 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a1cc:	4b48      	ldr	r3, [pc, #288]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1d4:	2b18      	cmp	r3, #24
 800a1d6:	f000 80bd 	beq.w	800a354 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	f040 809e 	bne.w	800a320 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1e4:	4b42      	ldr	r3, [pc, #264]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a41      	ldr	r2, [pc, #260]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a1ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f0:	f7f9 fd3c 	bl	8003c6c <HAL_GetTick>
 800a1f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1f6:	e008      	b.n	800a20a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1f8:	f7f9 fd38 	bl	8003c6c <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d901      	bls.n	800a20a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e10e      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a20a:	4b39      	ldr	r3, [pc, #228]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1f0      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a216:	4b36      	ldr	r3, [pc, #216]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a21a:	4b37      	ldr	r3, [pc, #220]	; (800a2f8 <HAL_RCC_OscConfig+0x774>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a226:	0112      	lsls	r2, r2, #4
 800a228:	430a      	orrs	r2, r1
 800a22a:	4931      	ldr	r1, [pc, #196]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	628b      	str	r3, [r1, #40]	; 0x28
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a234:	3b01      	subs	r3, #1
 800a236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23e:	3b01      	subs	r3, #1
 800a240:	025b      	lsls	r3, r3, #9
 800a242:	b29b      	uxth	r3, r3
 800a244:	431a      	orrs	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24a:	3b01      	subs	r3, #1
 800a24c:	041b      	lsls	r3, r3, #16
 800a24e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a252:	431a      	orrs	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a258:	3b01      	subs	r3, #1
 800a25a:	061b      	lsls	r3, r3, #24
 800a25c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a260:	4923      	ldr	r1, [pc, #140]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a262:	4313      	orrs	r3, r2
 800a264:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a266:	4b22      	ldr	r3, [pc, #136]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26a:	4a21      	ldr	r2, [pc, #132]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a26c:	f023 0301 	bic.w	r3, r3, #1
 800a270:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a272:	4b1f      	ldr	r3, [pc, #124]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a276:	4b21      	ldr	r3, [pc, #132]	; (800a2fc <HAL_RCC_OscConfig+0x778>)
 800a278:	4013      	ands	r3, r2
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a27e:	00d2      	lsls	r2, r2, #3
 800a280:	491b      	ldr	r1, [pc, #108]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a282:	4313      	orrs	r3, r2
 800a284:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a286:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28a:	f023 020c 	bic.w	r2, r3, #12
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a292:	4917      	ldr	r1, [pc, #92]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a294:	4313      	orrs	r3, r2
 800a296:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a298:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	f023 0202 	bic.w	r2, r3, #2
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a4:	4912      	ldr	r1, [pc, #72]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a2aa:	4b11      	ldr	r3, [pc, #68]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	4a10      	ldr	r2, [pc, #64]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2b6:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ba:	4a0d      	ldr	r2, [pc, #52]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a2c2:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c6:	4a0a      	ldr	r2, [pc, #40]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a2ce:	4b08      	ldr	r3, [pc, #32]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d2:	4a07      	ldr	r2, [pc, #28]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2d4:	f043 0301 	orr.w	r3, r3, #1
 800a2d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2da:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a04      	ldr	r2, [pc, #16]	; (800a2f0 <HAL_RCC_OscConfig+0x76c>)
 800a2e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2e6:	f7f9 fcc1 	bl	8003c6c <HAL_GetTick>
 800a2ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a2ec:	e011      	b.n	800a312 <HAL_RCC_OscConfig+0x78e>
 800a2ee:	bf00      	nop
 800a2f0:	58024400 	.word	0x58024400
 800a2f4:	58024800 	.word	0x58024800
 800a2f8:	fffffc0c 	.word	0xfffffc0c
 800a2fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a300:	f7f9 fcb4 	bl	8003c6c <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d901      	bls.n	800a312 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e08a      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a312:	4b47      	ldr	r3, [pc, #284]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0f0      	beq.n	800a300 <HAL_RCC_OscConfig+0x77c>
 800a31e:	e082      	b.n	800a426 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a320:	4b43      	ldr	r3, [pc, #268]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a42      	ldr	r2, [pc, #264]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a32a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a32c:	f7f9 fc9e 	bl	8003c6c <HAL_GetTick>
 800a330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a332:	e008      	b.n	800a346 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a334:	f7f9 fc9a 	bl	8003c6c <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d901      	bls.n	800a346 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e070      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a346:	4b3a      	ldr	r3, [pc, #232]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1f0      	bne.n	800a334 <HAL_RCC_OscConfig+0x7b0>
 800a352:	e068      	b.n	800a426 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a354:	4b36      	ldr	r3, [pc, #216]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a358:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a35a:	4b35      	ldr	r3, [pc, #212]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	2b01      	cmp	r3, #1
 800a366:	d031      	beq.n	800a3cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f003 0203 	and.w	r2, r3, #3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a372:	429a      	cmp	r2, r3
 800a374:	d12a      	bne.n	800a3cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	091b      	lsrs	r3, r3, #4
 800a37a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a382:	429a      	cmp	r2, r3
 800a384:	d122      	bne.n	800a3cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a390:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a392:	429a      	cmp	r2, r3
 800a394:	d11a      	bne.n	800a3cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	0a5b      	lsrs	r3, r3, #9
 800a39a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d111      	bne.n	800a3cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	0c1b      	lsrs	r3, r3, #16
 800a3ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d108      	bne.n	800a3cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	0e1b      	lsrs	r3, r3, #24
 800a3be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d001      	beq.n	800a3d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e02b      	b.n	800a428 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a3d0:	4b17      	ldr	r3, [pc, #92]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d4:	08db      	lsrs	r3, r3, #3
 800a3d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d01f      	beq.n	800a426 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a3e6:	4b12      	ldr	r3, [pc, #72]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	4a11      	ldr	r2, [pc, #68]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a3ec:	f023 0301 	bic.w	r3, r3, #1
 800a3f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a3f2:	f7f9 fc3b 	bl	8003c6c <HAL_GetTick>
 800a3f6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a3f8:	bf00      	nop
 800a3fa:	f7f9 fc37 	bl	8003c6c <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	4293      	cmp	r3, r2
 800a404:	d0f9      	beq.n	800a3fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a406:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a40a:	4b0a      	ldr	r3, [pc, #40]	; (800a434 <HAL_RCC_OscConfig+0x8b0>)
 800a40c:	4013      	ands	r3, r2
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a412:	00d2      	lsls	r2, r2, #3
 800a414:	4906      	ldr	r1, [pc, #24]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a416:	4313      	orrs	r3, r2
 800a418:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a41a:	4b05      	ldr	r3, [pc, #20]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41e:	4a04      	ldr	r2, [pc, #16]	; (800a430 <HAL_RCC_OscConfig+0x8ac>)
 800a420:	f043 0301 	orr.w	r3, r3, #1
 800a424:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3730      	adds	r7, #48	; 0x30
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	58024400 	.word	0x58024400
 800a434:	ffff0007 	.word	0xffff0007

0800a438 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e19c      	b.n	800a786 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a44c:	4b8a      	ldr	r3, [pc, #552]	; (800a678 <HAL_RCC_ClockConfig+0x240>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 030f 	and.w	r3, r3, #15
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	429a      	cmp	r2, r3
 800a458:	d910      	bls.n	800a47c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a45a:	4b87      	ldr	r3, [pc, #540]	; (800a678 <HAL_RCC_ClockConfig+0x240>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f023 020f 	bic.w	r2, r3, #15
 800a462:	4985      	ldr	r1, [pc, #532]	; (800a678 <HAL_RCC_ClockConfig+0x240>)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	4313      	orrs	r3, r2
 800a468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a46a:	4b83      	ldr	r3, [pc, #524]	; (800a678 <HAL_RCC_ClockConfig+0x240>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 030f 	and.w	r3, r3, #15
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	429a      	cmp	r2, r3
 800a476:	d001      	beq.n	800a47c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e184      	b.n	800a786 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0304 	and.w	r3, r3, #4
 800a484:	2b00      	cmp	r3, #0
 800a486:	d010      	beq.n	800a4aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	691a      	ldr	r2, [r3, #16]
 800a48c:	4b7b      	ldr	r3, [pc, #492]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a494:	429a      	cmp	r2, r3
 800a496:	d908      	bls.n	800a4aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a498:	4b78      	ldr	r3, [pc, #480]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	4975      	ldr	r1, [pc, #468]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0308 	and.w	r3, r3, #8
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d010      	beq.n	800a4d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	695a      	ldr	r2, [r3, #20]
 800a4ba:	4b70      	ldr	r3, [pc, #448]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a4bc:	69db      	ldr	r3, [r3, #28]
 800a4be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d908      	bls.n	800a4d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a4c6:	4b6d      	ldr	r3, [pc, #436]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	496a      	ldr	r1, [pc, #424]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0310 	and.w	r3, r3, #16
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d010      	beq.n	800a506 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	699a      	ldr	r2, [r3, #24]
 800a4e8:	4b64      	ldr	r3, [pc, #400]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a4ea:	69db      	ldr	r3, [r3, #28]
 800a4ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d908      	bls.n	800a506 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a4f4:	4b61      	ldr	r3, [pc, #388]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	495e      	ldr	r1, [pc, #376]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a502:	4313      	orrs	r3, r2
 800a504:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 0320 	and.w	r3, r3, #32
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d010      	beq.n	800a534 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	69da      	ldr	r2, [r3, #28]
 800a516:	4b59      	ldr	r3, [pc, #356]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a51e:	429a      	cmp	r2, r3
 800a520:	d908      	bls.n	800a534 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a522:	4b56      	ldr	r3, [pc, #344]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	69db      	ldr	r3, [r3, #28]
 800a52e:	4953      	ldr	r1, [pc, #332]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a530:	4313      	orrs	r3, r2
 800a532:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0302 	and.w	r3, r3, #2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d010      	beq.n	800a562 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68da      	ldr	r2, [r3, #12]
 800a544:	4b4d      	ldr	r3, [pc, #308]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	f003 030f 	and.w	r3, r3, #15
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d908      	bls.n	800a562 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a550:	4b4a      	ldr	r3, [pc, #296]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	f023 020f 	bic.w	r2, r3, #15
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	4947      	ldr	r1, [pc, #284]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d055      	beq.n	800a61a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a56e:	4b43      	ldr	r3, [pc, #268]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	4940      	ldr	r1, [pc, #256]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a57c:	4313      	orrs	r3, r2
 800a57e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	2b02      	cmp	r3, #2
 800a586:	d107      	bne.n	800a598 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a588:	4b3c      	ldr	r3, [pc, #240]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d121      	bne.n	800a5d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e0f6      	b.n	800a786 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d107      	bne.n	800a5b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5a0:	4b36      	ldr	r3, [pc, #216]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d115      	bne.n	800a5d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e0ea      	b.n	800a786 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d107      	bne.n	800a5c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5b8:	4b30      	ldr	r3, [pc, #192]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d109      	bne.n	800a5d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e0de      	b.n	800a786 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5c8:	4b2c      	ldr	r3, [pc, #176]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e0d6      	b.n	800a786 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a5d8:	4b28      	ldr	r3, [pc, #160]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	f023 0207 	bic.w	r2, r3, #7
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	4925      	ldr	r1, [pc, #148]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5ea:	f7f9 fb3f 	bl	8003c6c <HAL_GetTick>
 800a5ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5f0:	e00a      	b.n	800a608 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5f2:	f7f9 fb3b 	bl	8003c6c <HAL_GetTick>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a600:	4293      	cmp	r3, r2
 800a602:	d901      	bls.n	800a608 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a604:	2303      	movs	r3, #3
 800a606:	e0be      	b.n	800a786 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a608:	4b1c      	ldr	r3, [pc, #112]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	00db      	lsls	r3, r3, #3
 800a616:	429a      	cmp	r2, r3
 800a618:	d1eb      	bne.n	800a5f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b00      	cmp	r3, #0
 800a624:	d010      	beq.n	800a648 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	4b14      	ldr	r3, [pc, #80]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	f003 030f 	and.w	r3, r3, #15
 800a632:	429a      	cmp	r2, r3
 800a634:	d208      	bcs.n	800a648 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a636:	4b11      	ldr	r3, [pc, #68]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	f023 020f 	bic.w	r2, r3, #15
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	490e      	ldr	r1, [pc, #56]	; (800a67c <HAL_RCC_ClockConfig+0x244>)
 800a644:	4313      	orrs	r3, r2
 800a646:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a648:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <HAL_RCC_ClockConfig+0x240>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 030f 	and.w	r3, r3, #15
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d214      	bcs.n	800a680 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a656:	4b08      	ldr	r3, [pc, #32]	; (800a678 <HAL_RCC_ClockConfig+0x240>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f023 020f 	bic.w	r2, r3, #15
 800a65e:	4906      	ldr	r1, [pc, #24]	; (800a678 <HAL_RCC_ClockConfig+0x240>)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	4313      	orrs	r3, r2
 800a664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a666:	4b04      	ldr	r3, [pc, #16]	; (800a678 <HAL_RCC_ClockConfig+0x240>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 030f 	and.w	r3, r3, #15
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	429a      	cmp	r2, r3
 800a672:	d005      	beq.n	800a680 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e086      	b.n	800a786 <HAL_RCC_ClockConfig+0x34e>
 800a678:	52002000 	.word	0x52002000
 800a67c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0304 	and.w	r3, r3, #4
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d010      	beq.n	800a6ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691a      	ldr	r2, [r3, #16]
 800a690:	4b3f      	ldr	r3, [pc, #252]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a698:	429a      	cmp	r2, r3
 800a69a:	d208      	bcs.n	800a6ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a69c:	4b3c      	ldr	r3, [pc, #240]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	4939      	ldr	r1, [pc, #228]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0308 	and.w	r3, r3, #8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d010      	beq.n	800a6dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	695a      	ldr	r2, [r3, #20]
 800a6be:	4b34      	ldr	r3, [pc, #208]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d208      	bcs.n	800a6dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a6ca:	4b31      	ldr	r3, [pc, #196]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	492e      	ldr	r1, [pc, #184]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d010      	beq.n	800a70a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	699a      	ldr	r2, [r3, #24]
 800a6ec:	4b28      	ldr	r3, [pc, #160]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a6ee:	69db      	ldr	r3, [r3, #28]
 800a6f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d208      	bcs.n	800a70a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a6f8:	4b25      	ldr	r3, [pc, #148]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a6fa:	69db      	ldr	r3, [r3, #28]
 800a6fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	4922      	ldr	r1, [pc, #136]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a706:	4313      	orrs	r3, r2
 800a708:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b00      	cmp	r3, #0
 800a714:	d010      	beq.n	800a738 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	69da      	ldr	r2, [r3, #28]
 800a71a:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a722:	429a      	cmp	r2, r3
 800a724:	d208      	bcs.n	800a738 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a726:	4b1a      	ldr	r3, [pc, #104]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	4917      	ldr	r1, [pc, #92]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a734:	4313      	orrs	r3, r2
 800a736:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a738:	f000 f834 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 800a73c:	4602      	mov	r2, r0
 800a73e:	4b14      	ldr	r3, [pc, #80]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	0a1b      	lsrs	r3, r3, #8
 800a744:	f003 030f 	and.w	r3, r3, #15
 800a748:	4912      	ldr	r1, [pc, #72]	; (800a794 <HAL_RCC_ClockConfig+0x35c>)
 800a74a:	5ccb      	ldrb	r3, [r1, r3]
 800a74c:	f003 031f 	and.w	r3, r3, #31
 800a750:	fa22 f303 	lsr.w	r3, r2, r3
 800a754:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a756:	4b0e      	ldr	r3, [pc, #56]	; (800a790 <HAL_RCC_ClockConfig+0x358>)
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	f003 030f 	and.w	r3, r3, #15
 800a75e:	4a0d      	ldr	r2, [pc, #52]	; (800a794 <HAL_RCC_ClockConfig+0x35c>)
 800a760:	5cd3      	ldrb	r3, [r2, r3]
 800a762:	f003 031f 	and.w	r3, r3, #31
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	fa22 f303 	lsr.w	r3, r2, r3
 800a76c:	4a0a      	ldr	r2, [pc, #40]	; (800a798 <HAL_RCC_ClockConfig+0x360>)
 800a76e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a770:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <HAL_RCC_ClockConfig+0x364>)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a776:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <HAL_RCC_ClockConfig+0x368>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7f8 ff9a 	bl	80036b4 <HAL_InitTick>
 800a780:	4603      	mov	r3, r0
 800a782:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a784:	7bfb      	ldrb	r3, [r7, #15]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	58024400 	.word	0x58024400
 800a794:	080170e4 	.word	0x080170e4
 800a798:	24000094 	.word	0x24000094
 800a79c:	24000090 	.word	0x24000090
 800a7a0:	24000098 	.word	0x24000098

0800a7a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b089      	sub	sp, #36	; 0x24
 800a7a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7aa:	4bb3      	ldr	r3, [pc, #716]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7b2:	2b18      	cmp	r3, #24
 800a7b4:	f200 8155 	bhi.w	800aa62 <HAL_RCC_GetSysClockFreq+0x2be>
 800a7b8:	a201      	add	r2, pc, #4	; (adr r2, 800a7c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7be:	bf00      	nop
 800a7c0:	0800a825 	.word	0x0800a825
 800a7c4:	0800aa63 	.word	0x0800aa63
 800a7c8:	0800aa63 	.word	0x0800aa63
 800a7cc:	0800aa63 	.word	0x0800aa63
 800a7d0:	0800aa63 	.word	0x0800aa63
 800a7d4:	0800aa63 	.word	0x0800aa63
 800a7d8:	0800aa63 	.word	0x0800aa63
 800a7dc:	0800aa63 	.word	0x0800aa63
 800a7e0:	0800a84b 	.word	0x0800a84b
 800a7e4:	0800aa63 	.word	0x0800aa63
 800a7e8:	0800aa63 	.word	0x0800aa63
 800a7ec:	0800aa63 	.word	0x0800aa63
 800a7f0:	0800aa63 	.word	0x0800aa63
 800a7f4:	0800aa63 	.word	0x0800aa63
 800a7f8:	0800aa63 	.word	0x0800aa63
 800a7fc:	0800aa63 	.word	0x0800aa63
 800a800:	0800a851 	.word	0x0800a851
 800a804:	0800aa63 	.word	0x0800aa63
 800a808:	0800aa63 	.word	0x0800aa63
 800a80c:	0800aa63 	.word	0x0800aa63
 800a810:	0800aa63 	.word	0x0800aa63
 800a814:	0800aa63 	.word	0x0800aa63
 800a818:	0800aa63 	.word	0x0800aa63
 800a81c:	0800aa63 	.word	0x0800aa63
 800a820:	0800a857 	.word	0x0800a857
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a824:	4b94      	ldr	r3, [pc, #592]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d009      	beq.n	800a844 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a830:	4b91      	ldr	r3, [pc, #580]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	08db      	lsrs	r3, r3, #3
 800a836:	f003 0303 	and.w	r3, r3, #3
 800a83a:	4a90      	ldr	r2, [pc, #576]	; (800aa7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a83c:	fa22 f303 	lsr.w	r3, r2, r3
 800a840:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a842:	e111      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a844:	4b8d      	ldr	r3, [pc, #564]	; (800aa7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a846:	61bb      	str	r3, [r7, #24]
      break;
 800a848:	e10e      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a84a:	4b8d      	ldr	r3, [pc, #564]	; (800aa80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a84c:	61bb      	str	r3, [r7, #24]
      break;
 800a84e:	e10b      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a850:	4b8c      	ldr	r3, [pc, #560]	; (800aa84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a852:	61bb      	str	r3, [r7, #24]
      break;
 800a854:	e108      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a856:	4b88      	ldr	r3, [pc, #544]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85a:	f003 0303 	and.w	r3, r3, #3
 800a85e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a860:	4b85      	ldr	r3, [pc, #532]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a864:	091b      	lsrs	r3, r3, #4
 800a866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a86a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a86c:	4b82      	ldr	r3, [pc, #520]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a876:	4b80      	ldr	r3, [pc, #512]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87a:	08db      	lsrs	r3, r3, #3
 800a87c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	fb02 f303 	mul.w	r3, r2, r3
 800a886:	ee07 3a90 	vmov	s15, r3
 800a88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	f000 80e1 	beq.w	800aa5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	f000 8083 	beq.w	800a9a8 <HAL_RCC_GetSysClockFreq+0x204>
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	f200 80a1 	bhi.w	800a9ec <HAL_RCC_GetSysClockFreq+0x248>
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d003      	beq.n	800a8b8 <HAL_RCC_GetSysClockFreq+0x114>
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d056      	beq.n	800a964 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a8b6:	e099      	b.n	800a9ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8b8:	4b6f      	ldr	r3, [pc, #444]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0320 	and.w	r3, r3, #32
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d02d      	beq.n	800a920 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8c4:	4b6c      	ldr	r3, [pc, #432]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	08db      	lsrs	r3, r3, #3
 800a8ca:	f003 0303 	and.w	r3, r3, #3
 800a8ce:	4a6b      	ldr	r2, [pc, #428]	; (800aa7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ee:	4b62      	ldr	r3, [pc, #392]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800a902:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aa88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a91a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a91e:	e087      	b.n	800aa30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	ee07 3a90 	vmov	s15, r3
 800a926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aa8c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a932:	4b51      	ldr	r3, [pc, #324]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a942:	ed97 6a02 	vldr	s12, [r7, #8]
 800a946:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aa88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a962:	e065      	b.n	800aa30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aa90 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a976:	4b40      	ldr	r3, [pc, #256]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97e:	ee07 3a90 	vmov	s15, r3
 800a982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a986:	ed97 6a02 	vldr	s12, [r7, #8]
 800a98a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aa88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9a6:	e043      	b.n	800aa30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aa94 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ba:	4b2f      	ldr	r3, [pc, #188]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aa88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9ea:	e021      	b.n	800aa30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aa90 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fe:	4b1e      	ldr	r3, [pc, #120]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aa88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800aa30:	4b11      	ldr	r3, [pc, #68]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa34:	0a5b      	lsrs	r3, r3, #9
 800aa36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	ee07 3a90 	vmov	s15, r3
 800aa44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa48:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa54:	ee17 3a90 	vmov	r3, s15
 800aa58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aa5a:	e005      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	61bb      	str	r3, [r7, #24]
      break;
 800aa60:	e002      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aa62:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa64:	61bb      	str	r3, [r7, #24]
      break;
 800aa66:	bf00      	nop
  }

  return sysclockfreq;
 800aa68:	69bb      	ldr	r3, [r7, #24]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3724      	adds	r7, #36	; 0x24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	58024400 	.word	0x58024400
 800aa7c:	03d09000 	.word	0x03d09000
 800aa80:	003d0900 	.word	0x003d0900
 800aa84:	017d7840 	.word	0x017d7840
 800aa88:	46000000 	.word	0x46000000
 800aa8c:	4c742400 	.word	0x4c742400
 800aa90:	4a742400 	.word	0x4a742400
 800aa94:	4bbebc20 	.word	0x4bbebc20

0800aa98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aa9e:	f7ff fe81 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	4b10      	ldr	r3, [pc, #64]	; (800aae8 <HAL_RCC_GetHCLKFreq+0x50>)
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	0a1b      	lsrs	r3, r3, #8
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	490f      	ldr	r1, [pc, #60]	; (800aaec <HAL_RCC_GetHCLKFreq+0x54>)
 800aab0:	5ccb      	ldrb	r3, [r1, r3]
 800aab2:	f003 031f 	and.w	r3, r3, #31
 800aab6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aabc:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <HAL_RCC_GetHCLKFreq+0x50>)
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	f003 030f 	and.w	r3, r3, #15
 800aac4:	4a09      	ldr	r2, [pc, #36]	; (800aaec <HAL_RCC_GetHCLKFreq+0x54>)
 800aac6:	5cd3      	ldrb	r3, [r2, r3]
 800aac8:	f003 031f 	and.w	r3, r3, #31
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	fa22 f303 	lsr.w	r3, r2, r3
 800aad2:	4a07      	ldr	r2, [pc, #28]	; (800aaf0 <HAL_RCC_GetHCLKFreq+0x58>)
 800aad4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aad6:	4a07      	ldr	r2, [pc, #28]	; (800aaf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aadc:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <HAL_RCC_GetHCLKFreq+0x58>)
 800aade:	681b      	ldr	r3, [r3, #0]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	58024400 	.word	0x58024400
 800aaec:	080170e4 	.word	0x080170e4
 800aaf0:	24000094 	.word	0x24000094
 800aaf4:	24000090 	.word	0x24000090

0800aaf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aafc:	f7ff ffcc 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 800ab00:	4602      	mov	r2, r0
 800ab02:	4b06      	ldr	r3, [pc, #24]	; (800ab1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	091b      	lsrs	r3, r3, #4
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	4904      	ldr	r1, [pc, #16]	; (800ab20 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab0e:	5ccb      	ldrb	r3, [r1, r3]
 800ab10:	f003 031f 	and.w	r3, r3, #31
 800ab14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	58024400 	.word	0x58024400
 800ab20:	080170e4 	.word	0x080170e4

0800ab24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ab28:	f7ff ffb6 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	0a1b      	lsrs	r3, r3, #8
 800ab34:	f003 0307 	and.w	r3, r3, #7
 800ab38:	4904      	ldr	r1, [pc, #16]	; (800ab4c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab3a:	5ccb      	ldrb	r3, [r1, r3]
 800ab3c:	f003 031f 	and.w	r3, r3, #31
 800ab40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	58024400 	.word	0x58024400
 800ab4c:	080170e4 	.word	0x080170e4

0800ab50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	223f      	movs	r2, #63	; 0x3f
 800ab5e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ab60:	4b1a      	ldr	r3, [pc, #104]	; (800abcc <HAL_RCC_GetClockConfig+0x7c>)
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	f003 0207 	and.w	r2, r3, #7
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ab6c:	4b17      	ldr	r3, [pc, #92]	; (800abcc <HAL_RCC_GetClockConfig+0x7c>)
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ab78:	4b14      	ldr	r3, [pc, #80]	; (800abcc <HAL_RCC_GetClockConfig+0x7c>)
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	f003 020f 	and.w	r2, r3, #15
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ab84:	4b11      	ldr	r3, [pc, #68]	; (800abcc <HAL_RCC_GetClockConfig+0x7c>)
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ab90:	4b0e      	ldr	r3, [pc, #56]	; (800abcc <HAL_RCC_GetClockConfig+0x7c>)
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ab9c:	4b0b      	ldr	r3, [pc, #44]	; (800abcc <HAL_RCC_GetClockConfig+0x7c>)
 800ab9e:	69db      	ldr	r3, [r3, #28]
 800aba0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800aba8:	4b08      	ldr	r3, [pc, #32]	; (800abcc <HAL_RCC_GetClockConfig+0x7c>)
 800abaa:	6a1b      	ldr	r3, [r3, #32]
 800abac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <HAL_RCC_GetClockConfig+0x80>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 020f 	and.w	r2, r3, #15
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	601a      	str	r2, [r3, #0]
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	58024400 	.word	0x58024400
 800abd0:	52002000 	.word	0x52002000

0800abd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800abd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abd8:	b0ca      	sub	sp, #296	; 0x128
 800abda:	af00      	add	r7, sp, #0
 800abdc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800abe0:	2300      	movs	r3, #0
 800abe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800abe6:	2300      	movs	r3, #0
 800abe8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800abec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800abf8:	2500      	movs	r5, #0
 800abfa:	ea54 0305 	orrs.w	r3, r4, r5
 800abfe:	d049      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ac00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac0a:	d02f      	beq.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ac0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac10:	d828      	bhi.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ac12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac16:	d01a      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ac18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac1c:	d822      	bhi.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ac22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac26:	d007      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ac28:	e01c      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac2a:	4bb8      	ldr	r3, [pc, #736]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2e:	4ab7      	ldr	r2, [pc, #732]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ac36:	e01a      	b.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac3c:	3308      	adds	r3, #8
 800ac3e:	2102      	movs	r1, #2
 800ac40:	4618      	mov	r0, r3
 800ac42:	f002 fb61 	bl	800d308 <RCCEx_PLL2_Config>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ac4c:	e00f      	b.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac52:	3328      	adds	r3, #40	; 0x28
 800ac54:	2102      	movs	r1, #2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f002 fc08 	bl	800d46c <RCCEx_PLL3_Config>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ac62:	e004      	b.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac6a:	e000      	b.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ac6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ac76:	4ba5      	ldr	r3, [pc, #660]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ac7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac84:	4aa1      	ldr	r2, [pc, #644]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac86:	430b      	orrs	r3, r1
 800ac88:	6513      	str	r3, [r2, #80]	; 0x50
 800ac8a:	e003      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ac94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aca0:	f04f 0900 	mov.w	r9, #0
 800aca4:	ea58 0309 	orrs.w	r3, r8, r9
 800aca8:	d047      	beq.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800acaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acb0:	2b04      	cmp	r3, #4
 800acb2:	d82a      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800acb4:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800acb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acba:	bf00      	nop
 800acbc:	0800acd1 	.word	0x0800acd1
 800acc0:	0800acdf 	.word	0x0800acdf
 800acc4:	0800acf5 	.word	0x0800acf5
 800acc8:	0800ad13 	.word	0x0800ad13
 800accc:	0800ad13 	.word	0x0800ad13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acd0:	4b8e      	ldr	r3, [pc, #568]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	4a8d      	ldr	r2, [pc, #564]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acdc:	e01a      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace2:	3308      	adds	r3, #8
 800ace4:	2100      	movs	r1, #0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f002 fb0e 	bl	800d308 <RCCEx_PLL2_Config>
 800acec:	4603      	mov	r3, r0
 800acee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acf2:	e00f      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf8:	3328      	adds	r3, #40	; 0x28
 800acfa:	2100      	movs	r1, #0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f002 fbb5 	bl	800d46c <RCCEx_PLL3_Config>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad08:	e004      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad10:	e000      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ad12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10a      	bne.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad1c:	4b7b      	ldr	r3, [pc, #492]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad20:	f023 0107 	bic.w	r1, r3, #7
 800ad24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2a:	4a78      	ldr	r2, [pc, #480]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad2c:	430b      	orrs	r3, r1
 800ad2e:	6513      	str	r3, [r2, #80]	; 0x50
 800ad30:	e003      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ad3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ad46:	f04f 0b00 	mov.w	fp, #0
 800ad4a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ad4e:	d04c      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ad50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad5a:	d030      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ad5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad60:	d829      	bhi.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ad62:	2bc0      	cmp	r3, #192	; 0xc0
 800ad64:	d02d      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ad66:	2bc0      	cmp	r3, #192	; 0xc0
 800ad68:	d825      	bhi.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ad6a:	2b80      	cmp	r3, #128	; 0x80
 800ad6c:	d018      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ad6e:	2b80      	cmp	r3, #128	; 0x80
 800ad70:	d821      	bhi.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ad76:	2b40      	cmp	r3, #64	; 0x40
 800ad78:	d007      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ad7a:	e01c      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad7c:	4b63      	ldr	r3, [pc, #396]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	4a62      	ldr	r2, [pc, #392]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ad88:	e01c      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad8e:	3308      	adds	r3, #8
 800ad90:	2100      	movs	r1, #0
 800ad92:	4618      	mov	r0, r3
 800ad94:	f002 fab8 	bl	800d308 <RCCEx_PLL2_Config>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ad9e:	e011      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ada0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada4:	3328      	adds	r3, #40	; 0x28
 800ada6:	2100      	movs	r1, #0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f002 fb5f 	bl	800d46c <RCCEx_PLL3_Config>
 800adae:	4603      	mov	r3, r0
 800adb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800adb4:	e006      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800adbc:	e002      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800adbe:	bf00      	nop
 800adc0:	e000      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800adc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800adcc:	4b4f      	ldr	r3, [pc, #316]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800add4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adda:	4a4c      	ldr	r2, [pc, #304]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800addc:	430b      	orrs	r3, r1
 800adde:	6513      	str	r3, [r2, #80]	; 0x50
 800ade0:	e003      	b.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ade6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800adea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800adf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800adfa:	2300      	movs	r3, #0
 800adfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ae00:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ae04:	460b      	mov	r3, r1
 800ae06:	4313      	orrs	r3, r2
 800ae08:	d053      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ae0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae16:	d035      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ae18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae1c:	d82e      	bhi.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ae1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae22:	d031      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ae24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae28:	d828      	bhi.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ae2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae2e:	d01a      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ae30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae34:	d822      	bhi.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d003      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ae3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae3e:	d007      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ae40:	e01c      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae42:	4b32      	ldr	r3, [pc, #200]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae46:	4a31      	ldr	r2, [pc, #196]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae4e:	e01c      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae54:	3308      	adds	r3, #8
 800ae56:	2100      	movs	r1, #0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f002 fa55 	bl	800d308 <RCCEx_PLL2_Config>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae64:	e011      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6a:	3328      	adds	r3, #40	; 0x28
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f002 fafc 	bl	800d46c <RCCEx_PLL3_Config>
 800ae74:	4603      	mov	r3, r0
 800ae76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae7a:	e006      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae82:	e002      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ae84:	bf00      	nop
 800ae86:	e000      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ae88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10b      	bne.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ae92:	4b1e      	ldr	r3, [pc, #120]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae96:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aea2:	4a1a      	ldr	r2, [pc, #104]	; (800af0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aea4:	430b      	orrs	r3, r1
 800aea6:	6593      	str	r3, [r2, #88]	; 0x58
 800aea8:	e003      	b.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aeb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aebe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aec2:	2300      	movs	r3, #0
 800aec4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aec8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800aecc:	460b      	mov	r3, r1
 800aece:	4313      	orrs	r3, r2
 800aed0:	d056      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aeda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aede:	d038      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aee0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aee4:	d831      	bhi.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aee6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aeea:	d034      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800aeec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aef0:	d82b      	bhi.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aef6:	d01d      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800aef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aefc:	d825      	bhi.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d006      	beq.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800af02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af06:	d00a      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800af08:	e01f      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800af0a:	bf00      	nop
 800af0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af10:	4ba2      	ldr	r3, [pc, #648]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af14:	4aa1      	ldr	r2, [pc, #644]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af1c:	e01c      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af22:	3308      	adds	r3, #8
 800af24:	2100      	movs	r1, #0
 800af26:	4618      	mov	r0, r3
 800af28:	f002 f9ee 	bl	800d308 <RCCEx_PLL2_Config>
 800af2c:	4603      	mov	r3, r0
 800af2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af32:	e011      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af38:	3328      	adds	r3, #40	; 0x28
 800af3a:	2100      	movs	r1, #0
 800af3c:	4618      	mov	r0, r3
 800af3e:	f002 fa95 	bl	800d46c <RCCEx_PLL3_Config>
 800af42:	4603      	mov	r3, r0
 800af44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af48:	e006      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af50:	e002      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800af52:	bf00      	nop
 800af54:	e000      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800af56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10b      	bne.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af60:	4b8e      	ldr	r3, [pc, #568]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af64:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800af68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af70:	4a8a      	ldr	r2, [pc, #552]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af72:	430b      	orrs	r3, r1
 800af74:	6593      	str	r3, [r2, #88]	; 0x58
 800af76:	e003      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800af80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800af8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af90:	2300      	movs	r3, #0
 800af92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800af96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800af9a:	460b      	mov	r3, r1
 800af9c:	4313      	orrs	r3, r2
 800af9e:	d03a      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800afa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afa6:	2b30      	cmp	r3, #48	; 0x30
 800afa8:	d01f      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x416>
 800afaa:	2b30      	cmp	r3, #48	; 0x30
 800afac:	d819      	bhi.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800afae:	2b20      	cmp	r3, #32
 800afb0:	d00c      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800afb2:	2b20      	cmp	r3, #32
 800afb4:	d815      	bhi.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d019      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800afba:	2b10      	cmp	r3, #16
 800afbc:	d111      	bne.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afbe:	4b77      	ldr	r3, [pc, #476]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc2:	4a76      	ldr	r2, [pc, #472]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800afca:	e011      	b.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd0:	3308      	adds	r3, #8
 800afd2:	2102      	movs	r1, #2
 800afd4:	4618      	mov	r0, r3
 800afd6:	f002 f997 	bl	800d308 <RCCEx_PLL2_Config>
 800afda:	4603      	mov	r3, r0
 800afdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800afe0:	e006      	b.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afe8:	e002      	b.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800afea:	bf00      	nop
 800afec:	e000      	b.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800afee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10a      	bne.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aff8:	4b68      	ldr	r3, [pc, #416]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800affa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800affc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b006:	4a65      	ldr	r2, [pc, #404]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b008:	430b      	orrs	r3, r1
 800b00a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b00c:	e003      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b00e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b022:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b026:	2300      	movs	r3, #0
 800b028:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b02c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b030:	460b      	mov	r3, r1
 800b032:	4313      	orrs	r3, r2
 800b034:	d051      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b03a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b03c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b040:	d035      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b046:	d82e      	bhi.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b048:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b04c:	d031      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b04e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b052:	d828      	bhi.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b058:	d01a      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b05a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b05e:	d822      	bhi.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b060:	2b00      	cmp	r3, #0
 800b062:	d003      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b068:	d007      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b06a:	e01c      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b06c:	4b4b      	ldr	r3, [pc, #300]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	4a4a      	ldr	r2, [pc, #296]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b078:	e01c      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b07e:	3308      	adds	r3, #8
 800b080:	2100      	movs	r1, #0
 800b082:	4618      	mov	r0, r3
 800b084:	f002 f940 	bl	800d308 <RCCEx_PLL2_Config>
 800b088:	4603      	mov	r3, r0
 800b08a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b08e:	e011      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b094:	3328      	adds	r3, #40	; 0x28
 800b096:	2100      	movs	r1, #0
 800b098:	4618      	mov	r0, r3
 800b09a:	f002 f9e7 	bl	800d46c <RCCEx_PLL3_Config>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0a4:	e006      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0ac:	e002      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b0ae:	bf00      	nop
 800b0b0:	e000      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b0b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10a      	bne.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b0bc:	4b37      	ldr	r3, [pc, #220]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0ca:	4a34      	ldr	r2, [pc, #208]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0cc:	430b      	orrs	r3, r1
 800b0ce:	6513      	str	r3, [r2, #80]	; 0x50
 800b0d0:	e003      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b0e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b0f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	d056      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b104:	d033      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b106:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b10a:	d82c      	bhi.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b10c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b110:	d02f      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b112:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b116:	d826      	bhi.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b118:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b11c:	d02b      	beq.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b11e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b122:	d820      	bhi.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b128:	d012      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b12a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b12e:	d81a      	bhi.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b130:	2b00      	cmp	r3, #0
 800b132:	d022      	beq.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b138:	d115      	bne.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b13e:	3308      	adds	r3, #8
 800b140:	2101      	movs	r1, #1
 800b142:	4618      	mov	r0, r3
 800b144:	f002 f8e0 	bl	800d308 <RCCEx_PLL2_Config>
 800b148:	4603      	mov	r3, r0
 800b14a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b14e:	e015      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b154:	3328      	adds	r3, #40	; 0x28
 800b156:	2101      	movs	r1, #1
 800b158:	4618      	mov	r0, r3
 800b15a:	f002 f987 	bl	800d46c <RCCEx_PLL3_Config>
 800b15e:	4603      	mov	r3, r0
 800b160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b164:	e00a      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b16c:	e006      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b16e:	bf00      	nop
 800b170:	e004      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b172:	bf00      	nop
 800b174:	e002      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b176:	bf00      	nop
 800b178:	e000      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b17a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b17c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10d      	bne.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b184:	4b05      	ldr	r3, [pc, #20]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b188:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b192:	4a02      	ldr	r2, [pc, #8]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b194:	430b      	orrs	r3, r1
 800b196:	6513      	str	r3, [r2, #80]	; 0x50
 800b198:	e006      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b19a:	bf00      	nop
 800b19c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b1b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b1be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	d055      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1d4:	d033      	beq.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b1d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1da:	d82c      	bhi.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b1dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1e0:	d02f      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1e6:	d826      	bhi.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b1e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1ec:	d02b      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b1ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1f2:	d820      	bhi.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b1f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1f8:	d012      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b1fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1fe:	d81a      	bhi.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b200:	2b00      	cmp	r3, #0
 800b202:	d022      	beq.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b208:	d115      	bne.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20e:	3308      	adds	r3, #8
 800b210:	2101      	movs	r1, #1
 800b212:	4618      	mov	r0, r3
 800b214:	f002 f878 	bl	800d308 <RCCEx_PLL2_Config>
 800b218:	4603      	mov	r3, r0
 800b21a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b21e:	e015      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b224:	3328      	adds	r3, #40	; 0x28
 800b226:	2101      	movs	r1, #1
 800b228:	4618      	mov	r0, r3
 800b22a:	f002 f91f 	bl	800d46c <RCCEx_PLL3_Config>
 800b22e:	4603      	mov	r3, r0
 800b230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b234:	e00a      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b23c:	e006      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b23e:	bf00      	nop
 800b240:	e004      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b242:	bf00      	nop
 800b244:	e002      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b246:	bf00      	nop
 800b248:	e000      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b24a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b24c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10b      	bne.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b254:	4ba3      	ldr	r3, [pc, #652]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b258:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b264:	4a9f      	ldr	r2, [pc, #636]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b266:	430b      	orrs	r3, r1
 800b268:	6593      	str	r3, [r2, #88]	; 0x58
 800b26a:	e003      	b.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b26c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b270:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b284:	2300      	movs	r3, #0
 800b286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b28a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b28e:	460b      	mov	r3, r1
 800b290:	4313      	orrs	r3, r2
 800b292:	d037      	beq.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b29e:	d00e      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b2a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2a4:	d816      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d018      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b2aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2ae:	d111      	bne.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2b0:	4b8c      	ldr	r3, [pc, #560]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	4a8b      	ldr	r2, [pc, #556]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2bc:	e00f      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c2:	3308      	adds	r3, #8
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f002 f81e 	bl	800d308 <RCCEx_PLL2_Config>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2d2:	e004      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2da:	e000      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b2dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10a      	bne.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b2e6:	4b7f      	ldr	r3, [pc, #508]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f4:	4a7b      	ldr	r2, [pc, #492]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2f6:	430b      	orrs	r3, r1
 800b2f8:	6513      	str	r3, [r2, #80]	; 0x50
 800b2fa:	e003      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b300:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b314:	2300      	movs	r3, #0
 800b316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b31a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b31e:	460b      	mov	r3, r1
 800b320:	4313      	orrs	r3, r2
 800b322:	d039      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d81c      	bhi.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b32e:	a201      	add	r2, pc, #4	; (adr r2, 800b334 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b334:	0800b371 	.word	0x0800b371
 800b338:	0800b345 	.word	0x0800b345
 800b33c:	0800b353 	.word	0x0800b353
 800b340:	0800b371 	.word	0x0800b371
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b344:	4b67      	ldr	r3, [pc, #412]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b348:	4a66      	ldr	r2, [pc, #408]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b34a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b34e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b350:	e00f      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b356:	3308      	adds	r3, #8
 800b358:	2102      	movs	r1, #2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f001 ffd4 	bl	800d308 <RCCEx_PLL2_Config>
 800b360:	4603      	mov	r3, r0
 800b362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b366:	e004      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b36e:	e000      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b370:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10a      	bne.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b37a:	4b5a      	ldr	r3, [pc, #360]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b37c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37e:	f023 0103 	bic.w	r1, r3, #3
 800b382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b388:	4a56      	ldr	r2, [pc, #344]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b38a:	430b      	orrs	r3, r1
 800b38c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b38e:	e003      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b394:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b3a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b3ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	f000 809f 	beq.w	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3ba:	4b4b      	ldr	r3, [pc, #300]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a4a      	ldr	r2, [pc, #296]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3c6:	f7f8 fc51 	bl	8003c6c <HAL_GetTick>
 800b3ca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3ce:	e00b      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3d0:	f7f8 fc4c 	bl	8003c6c <HAL_GetTick>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	2b64      	cmp	r3, #100	; 0x64
 800b3de:	d903      	bls.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3e6:	e005      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3e8:	4b3f      	ldr	r3, [pc, #252]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d0ed      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b3f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d179      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b3fc:	4b39      	ldr	r3, [pc, #228]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b404:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b408:	4053      	eors	r3, r2
 800b40a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d015      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b412:	4b34      	ldr	r3, [pc, #208]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b41a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b41e:	4b31      	ldr	r3, [pc, #196]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b422:	4a30      	ldr	r2, [pc, #192]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b428:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b42a:	4b2e      	ldr	r3, [pc, #184]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b42e:	4a2d      	ldr	r2, [pc, #180]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b434:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b436:	4a2b      	ldr	r2, [pc, #172]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b438:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b43c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b442:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b44a:	d118      	bne.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b44c:	f7f8 fc0e 	bl	8003c6c <HAL_GetTick>
 800b450:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b454:	e00d      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b456:	f7f8 fc09 	bl	8003c6c <HAL_GetTick>
 800b45a:	4602      	mov	r2, r0
 800b45c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b460:	1ad2      	subs	r2, r2, r3
 800b462:	f241 3388 	movw	r3, #5000	; 0x1388
 800b466:	429a      	cmp	r2, r3
 800b468:	d903      	bls.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b46a:	2303      	movs	r3, #3
 800b46c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b470:	e005      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b472:	4b1c      	ldr	r3, [pc, #112]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b476:	f003 0302 	and.w	r3, r3, #2
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d0eb      	beq.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b47e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b482:	2b00      	cmp	r3, #0
 800b484:	d129      	bne.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b48e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b496:	d10e      	bne.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b498:	4b12      	ldr	r3, [pc, #72]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b4a8:	091a      	lsrs	r2, r3, #4
 800b4aa:	4b10      	ldr	r3, [pc, #64]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	4a0d      	ldr	r2, [pc, #52]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4b0:	430b      	orrs	r3, r1
 800b4b2:	6113      	str	r3, [r2, #16]
 800b4b4:	e005      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b4b6:	4b0b      	ldr	r3, [pc, #44]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	4a0a      	ldr	r2, [pc, #40]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b4c0:	6113      	str	r3, [r2, #16]
 800b4c2:	4b08      	ldr	r3, [pc, #32]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b4ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4d2:	4a04      	ldr	r2, [pc, #16]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4d4:	430b      	orrs	r3, r1
 800b4d6:	6713      	str	r3, [r2, #112]	; 0x70
 800b4d8:	e00e      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b4da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b4e2:	e009      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b4e4:	58024400 	.word	0x58024400
 800b4e8:	58024800 	.word	0x58024800
 800b4ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f002 0301 	and.w	r3, r2, #1
 800b504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b508:	2300      	movs	r3, #0
 800b50a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b50e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b512:	460b      	mov	r3, r1
 800b514:	4313      	orrs	r3, r2
 800b516:	f000 8089 	beq.w	800b62c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b520:	2b28      	cmp	r3, #40	; 0x28
 800b522:	d86b      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b524:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52a:	bf00      	nop
 800b52c:	0800b605 	.word	0x0800b605
 800b530:	0800b5fd 	.word	0x0800b5fd
 800b534:	0800b5fd 	.word	0x0800b5fd
 800b538:	0800b5fd 	.word	0x0800b5fd
 800b53c:	0800b5fd 	.word	0x0800b5fd
 800b540:	0800b5fd 	.word	0x0800b5fd
 800b544:	0800b5fd 	.word	0x0800b5fd
 800b548:	0800b5fd 	.word	0x0800b5fd
 800b54c:	0800b5d1 	.word	0x0800b5d1
 800b550:	0800b5fd 	.word	0x0800b5fd
 800b554:	0800b5fd 	.word	0x0800b5fd
 800b558:	0800b5fd 	.word	0x0800b5fd
 800b55c:	0800b5fd 	.word	0x0800b5fd
 800b560:	0800b5fd 	.word	0x0800b5fd
 800b564:	0800b5fd 	.word	0x0800b5fd
 800b568:	0800b5fd 	.word	0x0800b5fd
 800b56c:	0800b5e7 	.word	0x0800b5e7
 800b570:	0800b5fd 	.word	0x0800b5fd
 800b574:	0800b5fd 	.word	0x0800b5fd
 800b578:	0800b5fd 	.word	0x0800b5fd
 800b57c:	0800b5fd 	.word	0x0800b5fd
 800b580:	0800b5fd 	.word	0x0800b5fd
 800b584:	0800b5fd 	.word	0x0800b5fd
 800b588:	0800b5fd 	.word	0x0800b5fd
 800b58c:	0800b605 	.word	0x0800b605
 800b590:	0800b5fd 	.word	0x0800b5fd
 800b594:	0800b5fd 	.word	0x0800b5fd
 800b598:	0800b5fd 	.word	0x0800b5fd
 800b59c:	0800b5fd 	.word	0x0800b5fd
 800b5a0:	0800b5fd 	.word	0x0800b5fd
 800b5a4:	0800b5fd 	.word	0x0800b5fd
 800b5a8:	0800b5fd 	.word	0x0800b5fd
 800b5ac:	0800b605 	.word	0x0800b605
 800b5b0:	0800b5fd 	.word	0x0800b5fd
 800b5b4:	0800b5fd 	.word	0x0800b5fd
 800b5b8:	0800b5fd 	.word	0x0800b5fd
 800b5bc:	0800b5fd 	.word	0x0800b5fd
 800b5c0:	0800b5fd 	.word	0x0800b5fd
 800b5c4:	0800b5fd 	.word	0x0800b5fd
 800b5c8:	0800b5fd 	.word	0x0800b5fd
 800b5cc:	0800b605 	.word	0x0800b605
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 fe95 	bl	800d308 <RCCEx_PLL2_Config>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b5e4:	e00f      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ea:	3328      	adds	r3, #40	; 0x28
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f001 ff3c 	bl	800d46c <RCCEx_PLL3_Config>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b5fa:	e004      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b602:	e000      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b604:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10a      	bne.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b60e:	4bbf      	ldr	r3, [pc, #764]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b612:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b61c:	4abb      	ldr	r2, [pc, #748]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b61e:	430b      	orrs	r3, r1
 800b620:	6553      	str	r3, [r2, #84]	; 0x54
 800b622:	e003      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b624:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b628:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	f002 0302 	and.w	r3, r2, #2
 800b638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b63c:	2300      	movs	r3, #0
 800b63e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b642:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b646:	460b      	mov	r3, r1
 800b648:	4313      	orrs	r3, r2
 800b64a:	d041      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b652:	2b05      	cmp	r3, #5
 800b654:	d824      	bhi.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b656:	a201      	add	r2, pc, #4	; (adr r2, 800b65c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65c:	0800b6a9 	.word	0x0800b6a9
 800b660:	0800b675 	.word	0x0800b675
 800b664:	0800b68b 	.word	0x0800b68b
 800b668:	0800b6a9 	.word	0x0800b6a9
 800b66c:	0800b6a9 	.word	0x0800b6a9
 800b670:	0800b6a9 	.word	0x0800b6a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b678:	3308      	adds	r3, #8
 800b67a:	2101      	movs	r1, #1
 800b67c:	4618      	mov	r0, r3
 800b67e:	f001 fe43 	bl	800d308 <RCCEx_PLL2_Config>
 800b682:	4603      	mov	r3, r0
 800b684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b688:	e00f      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b68e:	3328      	adds	r3, #40	; 0x28
 800b690:	2101      	movs	r1, #1
 800b692:	4618      	mov	r0, r3
 800b694:	f001 feea 	bl	800d46c <RCCEx_PLL3_Config>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b69e:	e004      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6a6:	e000      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b6b2:	4b96      	ldr	r3, [pc, #600]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b6:	f023 0107 	bic.w	r1, r3, #7
 800b6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6c0:	4a92      	ldr	r2, [pc, #584]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6c2:	430b      	orrs	r3, r1
 800b6c4:	6553      	str	r3, [r2, #84]	; 0x54
 800b6c6:	e003      	b.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f002 0304 	and.w	r3, r2, #4
 800b6dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b6e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	d044      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6f8:	2b05      	cmp	r3, #5
 800b6fa:	d825      	bhi.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b6fc:	a201      	add	r2, pc, #4	; (adr r2, 800b704 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b702:	bf00      	nop
 800b704:	0800b751 	.word	0x0800b751
 800b708:	0800b71d 	.word	0x0800b71d
 800b70c:	0800b733 	.word	0x0800b733
 800b710:	0800b751 	.word	0x0800b751
 800b714:	0800b751 	.word	0x0800b751
 800b718:	0800b751 	.word	0x0800b751
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b720:	3308      	adds	r3, #8
 800b722:	2101      	movs	r1, #1
 800b724:	4618      	mov	r0, r3
 800b726:	f001 fdef 	bl	800d308 <RCCEx_PLL2_Config>
 800b72a:	4603      	mov	r3, r0
 800b72c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b730:	e00f      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b736:	3328      	adds	r3, #40	; 0x28
 800b738:	2101      	movs	r1, #1
 800b73a:	4618      	mov	r0, r3
 800b73c:	f001 fe96 	bl	800d46c <RCCEx_PLL3_Config>
 800b740:	4603      	mov	r3, r0
 800b742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b746:	e004      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b74e:	e000      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b750:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10b      	bne.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b75a:	4b6c      	ldr	r3, [pc, #432]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b75c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b75e:	f023 0107 	bic.w	r1, r3, #7
 800b762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b76a:	4a68      	ldr	r2, [pc, #416]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b76c:	430b      	orrs	r3, r1
 800b76e:	6593      	str	r3, [r2, #88]	; 0x58
 800b770:	e003      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b776:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f002 0320 	and.w	r3, r2, #32
 800b786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b78a:	2300      	movs	r3, #0
 800b78c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b794:	460b      	mov	r3, r1
 800b796:	4313      	orrs	r3, r2
 800b798:	d055      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b79e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7a6:	d033      	beq.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b7a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7ac:	d82c      	bhi.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7b2:	d02f      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b7b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7b8:	d826      	bhi.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b7ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7be:	d02b      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b7c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7c4:	d820      	bhi.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b7c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7ca:	d012      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b7cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7d0:	d81a      	bhi.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d022      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b7d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7da:	d115      	bne.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 fd8f 	bl	800d308 <RCCEx_PLL2_Config>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b7f0:	e015      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f6:	3328      	adds	r3, #40	; 0x28
 800b7f8:	2102      	movs	r1, #2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f001 fe36 	bl	800d46c <RCCEx_PLL3_Config>
 800b800:	4603      	mov	r3, r0
 800b802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b806:	e00a      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b80e:	e006      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b810:	bf00      	nop
 800b812:	e004      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b814:	bf00      	nop
 800b816:	e002      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b818:	bf00      	nop
 800b81a:	e000      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b81c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b81e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b822:	2b00      	cmp	r3, #0
 800b824:	d10b      	bne.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b826:	4b39      	ldr	r3, [pc, #228]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b82a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b836:	4a35      	ldr	r2, [pc, #212]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b838:	430b      	orrs	r3, r1
 800b83a:	6553      	str	r3, [r2, #84]	; 0x54
 800b83c:	e003      	b.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b83e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b856:	2300      	movs	r3, #0
 800b858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b85c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b860:	460b      	mov	r3, r1
 800b862:	4313      	orrs	r3, r2
 800b864:	d058      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b86e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b872:	d033      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b874:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b878:	d82c      	bhi.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b87e:	d02f      	beq.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b884:	d826      	bhi.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b886:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b88a:	d02b      	beq.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b88c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b890:	d820      	bhi.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b896:	d012      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b89c:	d81a      	bhi.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d022      	beq.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b8a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8a6:	d115      	bne.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f001 fd29 	bl	800d308 <RCCEx_PLL2_Config>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8bc:	e015      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c2:	3328      	adds	r3, #40	; 0x28
 800b8c4:	2102      	movs	r1, #2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f001 fdd0 	bl	800d46c <RCCEx_PLL3_Config>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8d2:	e00a      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8da:	e006      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b8dc:	bf00      	nop
 800b8de:	e004      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b8e0:	bf00      	nop
 800b8e2:	e002      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b8e4:	bf00      	nop
 800b8e6:	e000      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b8e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10e      	bne.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b8f2:	4b06      	ldr	r3, [pc, #24]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b902:	4a02      	ldr	r2, [pc, #8]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b904:	430b      	orrs	r3, r1
 800b906:	6593      	str	r3, [r2, #88]	; 0x58
 800b908:	e006      	b.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b90a:	bf00      	nop
 800b90c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b914:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b928:	2300      	movs	r3, #0
 800b92a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b92e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b932:	460b      	mov	r3, r1
 800b934:	4313      	orrs	r3, r2
 800b936:	d055      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b940:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b944:	d033      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b946:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b94a:	d82c      	bhi.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b94c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b950:	d02f      	beq.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b956:	d826      	bhi.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b958:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b95c:	d02b      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b95e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b962:	d820      	bhi.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b968:	d012      	beq.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b96a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b96e:	d81a      	bhi.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b970:	2b00      	cmp	r3, #0
 800b972:	d022      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b978:	d115      	bne.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97e:	3308      	adds	r3, #8
 800b980:	2100      	movs	r1, #0
 800b982:	4618      	mov	r0, r3
 800b984:	f001 fcc0 	bl	800d308 <RCCEx_PLL2_Config>
 800b988:	4603      	mov	r3, r0
 800b98a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b98e:	e015      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b994:	3328      	adds	r3, #40	; 0x28
 800b996:	2102      	movs	r1, #2
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 fd67 	bl	800d46c <RCCEx_PLL3_Config>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9a4:	e00a      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9ac:	e006      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b9ae:	bf00      	nop
 800b9b0:	e004      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b9b2:	bf00      	nop
 800b9b4:	e002      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b9b6:	bf00      	nop
 800b9b8:	e000      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b9ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10b      	bne.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b9c4:	4ba1      	ldr	r3, [pc, #644]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b9d4:	4a9d      	ldr	r2, [pc, #628]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9d6:	430b      	orrs	r3, r1
 800b9d8:	6593      	str	r3, [r2, #88]	; 0x58
 800b9da:	e003      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	f002 0308 	and.w	r3, r2, #8
 800b9f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b9fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4313      	orrs	r3, r2
 800ba02:	d01e      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ba04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba10:	d10c      	bne.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba16:	3328      	adds	r3, #40	; 0x28
 800ba18:	2102      	movs	r1, #2
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f001 fd26 	bl	800d46c <RCCEx_PLL3_Config>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ba2c:	4b87      	ldr	r3, [pc, #540]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba3c:	4a83      	ldr	r2, [pc, #524]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba3e:	430b      	orrs	r3, r1
 800ba40:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	f002 0310 	and.w	r3, r2, #16
 800ba4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba52:	2300      	movs	r3, #0
 800ba54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	d01e      	beq.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ba62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba6e:	d10c      	bne.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba74:	3328      	adds	r3, #40	; 0x28
 800ba76:	2102      	movs	r1, #2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f001 fcf7 	bl	800d46c <RCCEx_PLL3_Config>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ba8a:	4b70      	ldr	r3, [pc, #448]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ba92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba9a:	4a6c      	ldr	r2, [pc, #432]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba9c:	430b      	orrs	r3, r1
 800ba9e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800baa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800baac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bab0:	2300      	movs	r3, #0
 800bab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bab6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800baba:	460b      	mov	r3, r1
 800babc:	4313      	orrs	r3, r2
 800babe:	d03e      	beq.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bacc:	d022      	beq.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bad2:	d81b      	bhi.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d003      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800badc:	d00b      	beq.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bade:	e015      	b.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae4:	3308      	adds	r3, #8
 800bae6:	2100      	movs	r1, #0
 800bae8:	4618      	mov	r0, r3
 800baea:	f001 fc0d 	bl	800d308 <RCCEx_PLL2_Config>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800baf4:	e00f      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800baf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bafa:	3328      	adds	r3, #40	; 0x28
 800bafc:	2102      	movs	r1, #2
 800bafe:	4618      	mov	r0, r3
 800bb00:	f001 fcb4 	bl	800d46c <RCCEx_PLL3_Config>
 800bb04:	4603      	mov	r3, r0
 800bb06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb0a:	e004      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb12:	e000      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bb14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10b      	bne.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb1e:	4b4b      	ldr	r3, [pc, #300]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb22:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb2e:	4a47      	ldr	r2, [pc, #284]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb30:	430b      	orrs	r3, r1
 800bb32:	6593      	str	r3, [r2, #88]	; 0x58
 800bb34:	e003      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bb4a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bb50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bb54:	460b      	mov	r3, r1
 800bb56:	4313      	orrs	r3, r2
 800bb58:	d03b      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bb5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb66:	d01f      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bb68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb6c:	d818      	bhi.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bb6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb72:	d003      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bb74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb78:	d007      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bb7a:	e011      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb7c:	4b33      	ldr	r3, [pc, #204]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	4a32      	ldr	r2, [pc, #200]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bb88:	e00f      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb8e:	3328      	adds	r3, #40	; 0x28
 800bb90:	2101      	movs	r1, #1
 800bb92:	4618      	mov	r0, r3
 800bb94:	f001 fc6a 	bl	800d46c <RCCEx_PLL3_Config>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bb9e:	e004      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bba6:	e000      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10b      	bne.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bbb2:	4b26      	ldr	r3, [pc, #152]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bbba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbc2:	4a22      	ldr	r2, [pc, #136]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbc4:	430b      	orrs	r3, r1
 800bbc6:	6553      	str	r3, [r2, #84]	; 0x54
 800bbc8:	e003      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bbd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bbde:	673b      	str	r3, [r7, #112]	; 0x70
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	677b      	str	r3, [r7, #116]	; 0x74
 800bbe4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4313      	orrs	r3, r2
 800bbec:	d034      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d003      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bbf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbfc:	d007      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bbfe:	e011      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc00:	4b12      	ldr	r3, [pc, #72]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc04:	4a11      	ldr	r2, [pc, #68]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc0c:	e00e      	b.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc12:	3308      	adds	r3, #8
 800bc14:	2102      	movs	r1, #2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f001 fb76 	bl	800d308 <RCCEx_PLL2_Config>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc22:	e003      	b.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10d      	bne.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc34:	4b05      	ldr	r3, [pc, #20]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc42:	4a02      	ldr	r2, [pc, #8]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc44:	430b      	orrs	r3, r1
 800bc46:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc48:	e006      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bc4a:	bf00      	nop
 800bc4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bc64:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc66:	2300      	movs	r3, #0
 800bc68:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc6a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4313      	orrs	r3, r2
 800bc72:	d00c      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc78:	3328      	adds	r3, #40	; 0x28
 800bc7a:	2102      	movs	r1, #2
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f001 fbf5 	bl	800d46c <RCCEx_PLL3_Config>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d002      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bc9a:	663b      	str	r3, [r7, #96]	; 0x60
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	667b      	str	r3, [r7, #100]	; 0x64
 800bca0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bca4:	460b      	mov	r3, r1
 800bca6:	4313      	orrs	r3, r2
 800bca8:	d038      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bcaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcb6:	d018      	beq.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bcb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcbc:	d811      	bhi.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bcbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcc2:	d014      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bcc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcc8:	d80b      	bhi.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d011      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bcce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd2:	d106      	bne.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcd4:	4bc3      	ldr	r3, [pc, #780]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd8:	4ac2      	ldr	r2, [pc, #776]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bce0:	e008      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bce8:	e004      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bcea:	bf00      	nop
 800bcec:	e002      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bcee:	bf00      	nop
 800bcf0:	e000      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bcf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10b      	bne.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bcfc:	4bb9      	ldr	r3, [pc, #740]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bd04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd0c:	4ab5      	ldr	r2, [pc, #724]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd0e:	430b      	orrs	r3, r1
 800bd10:	6553      	str	r3, [r2, #84]	; 0x54
 800bd12:	e003      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bd28:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bd32:	460b      	mov	r3, r1
 800bd34:	4313      	orrs	r3, r2
 800bd36:	d009      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd38:	4baa      	ldr	r3, [pc, #680]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd46:	4aa7      	ldr	r2, [pc, #668]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd48:	430b      	orrs	r3, r1
 800bd4a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bd4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bd58:	653b      	str	r3, [r7, #80]	; 0x50
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	657b      	str	r3, [r7, #84]	; 0x54
 800bd5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bd62:	460b      	mov	r3, r1
 800bd64:	4313      	orrs	r3, r2
 800bd66:	d00a      	beq.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bd68:	4b9e      	ldr	r3, [pc, #632]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bd78:	4a9a      	ldr	r2, [pc, #616]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd7a:	430b      	orrs	r3, r1
 800bd7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bd8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bd94:	460b      	mov	r3, r1
 800bd96:	4313      	orrs	r3, r2
 800bd98:	d009      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bd9a:	4b92      	ldr	r3, [pc, #584]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd9e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bda8:	4a8e      	ldr	r2, [pc, #568]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdaa:	430b      	orrs	r3, r1
 800bdac:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bdae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bdba:	643b      	str	r3, [r7, #64]	; 0x40
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	647b      	str	r3, [r7, #68]	; 0x44
 800bdc0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	d00e      	beq.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bdca:	4b86      	ldr	r3, [pc, #536]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	4a85      	ldr	r2, [pc, #532]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bdd4:	6113      	str	r3, [r2, #16]
 800bdd6:	4b83      	ldr	r3, [pc, #524]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdd8:	6919      	ldr	r1, [r3, #16]
 800bdda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bde2:	4a80      	ldr	r2, [pc, #512]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bde4:	430b      	orrs	r3, r1
 800bde6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bde8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bdf4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdfa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bdfe:	460b      	mov	r3, r1
 800be00:	4313      	orrs	r3, r2
 800be02:	d009      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800be04:	4b77      	ldr	r3, [pc, #476]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be08:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800be0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be12:	4a74      	ldr	r2, [pc, #464]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be14:	430b      	orrs	r3, r1
 800be16:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800be18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800be24:	633b      	str	r3, [r7, #48]	; 0x30
 800be26:	2300      	movs	r3, #0
 800be28:	637b      	str	r3, [r7, #52]	; 0x34
 800be2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800be2e:	460b      	mov	r3, r1
 800be30:	4313      	orrs	r3, r2
 800be32:	d00a      	beq.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be34:	4b6b      	ldr	r3, [pc, #428]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be38:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800be3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be44:	4a67      	ldr	r2, [pc, #412]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be46:	430b      	orrs	r3, r1
 800be48:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800be4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	2100      	movs	r1, #0
 800be54:	62b9      	str	r1, [r7, #40]	; 0x28
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800be60:	460b      	mov	r3, r1
 800be62:	4313      	orrs	r3, r2
 800be64:	d011      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6a:	3308      	adds	r3, #8
 800be6c:	2100      	movs	r1, #0
 800be6e:	4618      	mov	r0, r3
 800be70:	f001 fa4a 	bl	800d308 <RCCEx_PLL2_Config>
 800be74:	4603      	mov	r3, r0
 800be76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800be7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800be8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be92:	2100      	movs	r1, #0
 800be94:	6239      	str	r1, [r7, #32]
 800be96:	f003 0302 	and.w	r3, r3, #2
 800be9a:	627b      	str	r3, [r7, #36]	; 0x24
 800be9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bea0:	460b      	mov	r3, r1
 800bea2:	4313      	orrs	r3, r2
 800bea4:	d011      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beaa:	3308      	adds	r3, #8
 800beac:	2101      	movs	r1, #1
 800beae:	4618      	mov	r0, r3
 800beb0:	f001 fa2a 	bl	800d308 <RCCEx_PLL2_Config>
 800beb4:	4603      	mov	r3, r0
 800beb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800beba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d003      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bec6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800beca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed2:	2100      	movs	r1, #0
 800bed4:	61b9      	str	r1, [r7, #24]
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	61fb      	str	r3, [r7, #28]
 800bedc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bee0:	460b      	mov	r3, r1
 800bee2:	4313      	orrs	r3, r2
 800bee4:	d011      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beea:	3308      	adds	r3, #8
 800beec:	2102      	movs	r1, #2
 800beee:	4618      	mov	r0, r3
 800bef0:	f001 fa0a 	bl	800d308 <RCCEx_PLL2_Config>
 800bef4:	4603      	mov	r3, r0
 800bef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800befa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d003      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bf0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	2100      	movs	r1, #0
 800bf14:	6139      	str	r1, [r7, #16]
 800bf16:	f003 0308 	and.w	r3, r3, #8
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf20:	460b      	mov	r3, r1
 800bf22:	4313      	orrs	r3, r2
 800bf24:	d011      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf2a:	3328      	adds	r3, #40	; 0x28
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f001 fa9c 	bl	800d46c <RCCEx_PLL3_Config>
 800bf34:	4603      	mov	r3, r0
 800bf36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bf3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bf4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	2100      	movs	r1, #0
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	f003 0310 	and.w	r3, r3, #16
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf60:	460b      	mov	r3, r1
 800bf62:	4313      	orrs	r3, r2
 800bf64:	d011      	beq.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf6a:	3328      	adds	r3, #40	; 0x28
 800bf6c:	2101      	movs	r1, #1
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f001 fa7c 	bl	800d46c <RCCEx_PLL3_Config>
 800bf74:	4603      	mov	r3, r0
 800bf76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bf7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d003      	beq.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bf8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	2100      	movs	r1, #0
 800bf94:	6039      	str	r1, [r7, #0]
 800bf96:	f003 0320 	and.w	r3, r3, #32
 800bf9a:	607b      	str	r3, [r7, #4]
 800bf9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	d011      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfaa:	3328      	adds	r3, #40	; 0x28
 800bfac:	2102      	movs	r1, #2
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f001 fa5c 	bl	800d46c <RCCEx_PLL3_Config>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bfba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d003      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bfca:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	e000      	b.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfe4:	58024400 	.word	0x58024400

0800bfe8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b090      	sub	sp, #64	; 0x40
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bff6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bffa:	430b      	orrs	r3, r1
 800bffc:	f040 8094 	bne.w	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c000:	4b9e      	ldr	r3, [pc, #632]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c004:	f003 0307 	and.w	r3, r3, #7
 800c008:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	2b04      	cmp	r3, #4
 800c00e:	f200 8087 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c012:	a201      	add	r2, pc, #4	; (adr r2, 800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c018:	0800c02d 	.word	0x0800c02d
 800c01c:	0800c055 	.word	0x0800c055
 800c020:	0800c07d 	.word	0x0800c07d
 800c024:	0800c119 	.word	0x0800c119
 800c028:	0800c0a5 	.word	0x0800c0a5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c02c:	4b93      	ldr	r3, [pc, #588]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c034:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c038:	d108      	bne.n	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c03a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c03e:	4618      	mov	r0, r3
 800c040:	f001 f810 	bl	800d064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c048:	f000 bd45 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c04c:	2300      	movs	r3, #0
 800c04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c050:	f000 bd41 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c054:	4b89      	ldr	r3, [pc, #548]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c05c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c060:	d108      	bne.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c062:	f107 0318 	add.w	r3, r7, #24
 800c066:	4618      	mov	r0, r3
 800c068:	f000 fd54 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c070:	f000 bd31 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c078:	f000 bd2d 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c07c:	4b7f      	ldr	r3, [pc, #508]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c088:	d108      	bne.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c08a:	f107 030c 	add.w	r3, r7, #12
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 fe94 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c098:	f000 bd1d 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a0:	f000 bd19 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0a4:	4b75      	ldr	r3, [pc, #468]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0ac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0ae:	4b73      	ldr	r3, [pc, #460]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f003 0304 	and.w	r3, r3, #4
 800c0b6:	2b04      	cmp	r3, #4
 800c0b8:	d10c      	bne.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d109      	bne.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0c0:	4b6e      	ldr	r3, [pc, #440]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	08db      	lsrs	r3, r3, #3
 800c0c6:	f003 0303 	and.w	r3, r3, #3
 800c0ca:	4a6d      	ldr	r2, [pc, #436]	; (800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c0cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0d2:	e01f      	b.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0d4:	4b69      	ldr	r3, [pc, #420]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0e0:	d106      	bne.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0e8:	d102      	bne.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0ea:	4b66      	ldr	r3, [pc, #408]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0ee:	e011      	b.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0f0:	4b62      	ldr	r3, [pc, #392]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0fc:	d106      	bne.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c104:	d102      	bne.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c106:	4b60      	ldr	r3, [pc, #384]	; (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c10a:	e003      	b.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c110:	f000 bce1 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c114:	f000 bcdf 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c118:	4b5c      	ldr	r3, [pc, #368]	; (800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c11c:	f000 bcdb 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c120:	2300      	movs	r3, #0
 800c122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c124:	f000 bcd7 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c12c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c130:	430b      	orrs	r3, r1
 800c132:	f040 80ad 	bne.w	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c136:	4b51      	ldr	r3, [pc, #324]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c13a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c13e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c146:	d056      	beq.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c14e:	f200 8090 	bhi.w	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	2bc0      	cmp	r3, #192	; 0xc0
 800c156:	f000 8088 	beq.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	2bc0      	cmp	r3, #192	; 0xc0
 800c15e:	f200 8088 	bhi.w	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	2b80      	cmp	r3, #128	; 0x80
 800c166:	d032      	beq.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	2b80      	cmp	r3, #128	; 0x80
 800c16c:	f200 8081 	bhi.w	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	2b00      	cmp	r3, #0
 800c174:	d003      	beq.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c178:	2b40      	cmp	r3, #64	; 0x40
 800c17a:	d014      	beq.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c17c:	e079      	b.n	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c17e:	4b3f      	ldr	r3, [pc, #252]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c18a:	d108      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c18c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c190:	4618      	mov	r0, r3
 800c192:	f000 ff67 	bl	800d064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c198:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c19a:	f000 bc9c 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1a2:	f000 bc98 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1a6:	4b35      	ldr	r3, [pc, #212]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1b2:	d108      	bne.n	800c1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1b4:	f107 0318 	add.w	r3, r7, #24
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 fcab 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1c2:	f000 bc88 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ca:	f000 bc84 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1ce:	4b2b      	ldr	r3, [pc, #172]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1da:	d108      	bne.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1dc:	f107 030c 	add.w	r3, r7, #12
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 fdeb 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ea:	f000 bc74 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f2:	f000 bc70 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1f6:	4b21      	ldr	r3, [pc, #132]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c200:	4b1e      	ldr	r3, [pc, #120]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 0304 	and.w	r3, r3, #4
 800c208:	2b04      	cmp	r3, #4
 800c20a:	d10c      	bne.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d109      	bne.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c212:	4b1a      	ldr	r3, [pc, #104]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	08db      	lsrs	r3, r3, #3
 800c218:	f003 0303 	and.w	r3, r3, #3
 800c21c:	4a18      	ldr	r2, [pc, #96]	; (800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c21e:	fa22 f303 	lsr.w	r3, r2, r3
 800c222:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c224:	e01f      	b.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c226:	4b15      	ldr	r3, [pc, #84]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c232:	d106      	bne.n	800c242 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c23a:	d102      	bne.n	800c242 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c23c:	4b11      	ldr	r3, [pc, #68]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c23e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c240:	e011      	b.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c242:	4b0e      	ldr	r3, [pc, #56]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c24a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c24e:	d106      	bne.n	800c25e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c256:	d102      	bne.n	800c25e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c258:	4b0b      	ldr	r3, [pc, #44]	; (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c25c:	e003      	b.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c262:	f000 bc38 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c266:	f000 bc36 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c26a:	4b08      	ldr	r3, [pc, #32]	; (800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c26e:	f000 bc32 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c276:	f000 bc2e 	b.w	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c27a:	bf00      	nop
 800c27c:	58024400 	.word	0x58024400
 800c280:	03d09000 	.word	0x03d09000
 800c284:	003d0900 	.word	0x003d0900
 800c288:	017d7840 	.word	0x017d7840
 800c28c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c290:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c294:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c298:	430b      	orrs	r3, r1
 800c29a:	f040 809c 	bne.w	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c29e:	4b9e      	ldr	r3, [pc, #632]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c2a6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c2ae:	d054      	beq.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c2b6:	f200 808b 	bhi.w	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c2c0:	f000 8083 	beq.w	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c2ca:	f200 8081 	bhi.w	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2d4:	d02f      	beq.n	800c336 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2dc:	d878      	bhi.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d004      	beq.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2ea:	d012      	beq.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c2ec:	e070      	b.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2ee:	4b8a      	ldr	r3, [pc, #552]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2fa:	d107      	bne.n	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c300:	4618      	mov	r0, r3
 800c302:	f000 feaf 	bl	800d064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c308:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c30a:	e3e4      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c30c:	2300      	movs	r3, #0
 800c30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c310:	e3e1      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c312:	4b81      	ldr	r3, [pc, #516]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c31a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c31e:	d107      	bne.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c320:	f107 0318 	add.w	r3, r7, #24
 800c324:	4618      	mov	r0, r3
 800c326:	f000 fbf5 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c32e:	e3d2      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c334:	e3cf      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c336:	4b78      	ldr	r3, [pc, #480]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c33e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c342:	d107      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c344:	f107 030c 	add.w	r3, r7, #12
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 fd37 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c352:	e3c0      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c354:	2300      	movs	r3, #0
 800c356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c358:	e3bd      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c35a:	4b6f      	ldr	r3, [pc, #444]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c35e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c362:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c364:	4b6c      	ldr	r3, [pc, #432]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f003 0304 	and.w	r3, r3, #4
 800c36c:	2b04      	cmp	r3, #4
 800c36e:	d10c      	bne.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c372:	2b00      	cmp	r3, #0
 800c374:	d109      	bne.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c376:	4b68      	ldr	r3, [pc, #416]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	08db      	lsrs	r3, r3, #3
 800c37c:	f003 0303 	and.w	r3, r3, #3
 800c380:	4a66      	ldr	r2, [pc, #408]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c382:	fa22 f303 	lsr.w	r3, r2, r3
 800c386:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c388:	e01e      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c38a:	4b63      	ldr	r3, [pc, #396]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c396:	d106      	bne.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c39e:	d102      	bne.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3a0:	4b5f      	ldr	r3, [pc, #380]	; (800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a4:	e010      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3a6:	4b5c      	ldr	r3, [pc, #368]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3b2:	d106      	bne.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3ba:	d102      	bne.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c3bc:	4b59      	ldr	r3, [pc, #356]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3c0:	e002      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3c6:	e386      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3c8:	e385      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3ca:	4b57      	ldr	r3, [pc, #348]	; (800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ce:	e382      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3d4:	e37f      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c3d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3da:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c3de:	430b      	orrs	r3, r1
 800c3e0:	f040 80a7 	bne.w	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c3e4:	4b4c      	ldr	r3, [pc, #304]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c3ec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c3f4:	d055      	beq.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c3fc:	f200 8096 	bhi.w	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c402:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c406:	f000 8084 	beq.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c410:	f200 808c 	bhi.w	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c41a:	d030      	beq.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c422:	f200 8083 	bhi.w	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d004      	beq.n	800c436 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c432:	d012      	beq.n	800c45a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c434:	e07a      	b.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c436:	4b38      	ldr	r3, [pc, #224]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c43e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c442:	d107      	bne.n	800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 fe0b 	bl	800d064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c452:	e340      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c454:	2300      	movs	r3, #0
 800c456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c458:	e33d      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c45a:	4b2f      	ldr	r3, [pc, #188]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c466:	d107      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c468:	f107 0318 	add.w	r3, r7, #24
 800c46c:	4618      	mov	r0, r3
 800c46e:	f000 fb51 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c476:	e32e      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47c:	e32b      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c47e:	4b26      	ldr	r3, [pc, #152]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c48a:	d107      	bne.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c48c:	f107 030c 	add.w	r3, r7, #12
 800c490:	4618      	mov	r0, r3
 800c492:	f000 fc93 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c49a:	e31c      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a0:	e319      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4a2:	4b1d      	ldr	r3, [pc, #116]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4ac:	4b1a      	ldr	r3, [pc, #104]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f003 0304 	and.w	r3, r3, #4
 800c4b4:	2b04      	cmp	r3, #4
 800c4b6:	d10c      	bne.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d109      	bne.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4be:	4b16      	ldr	r3, [pc, #88]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	08db      	lsrs	r3, r3, #3
 800c4c4:	f003 0303 	and.w	r3, r3, #3
 800c4c8:	4a14      	ldr	r2, [pc, #80]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c4ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4d0:	e01e      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4d2:	4b11      	ldr	r3, [pc, #68]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4de:	d106      	bne.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4e6:	d102      	bne.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4e8:	4b0d      	ldr	r3, [pc, #52]	; (800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ec:	e010      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4ee:	4b0a      	ldr	r3, [pc, #40]	; (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4fa:	d106      	bne.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c502:	d102      	bne.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c504:	4b07      	ldr	r3, [pc, #28]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c506:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c508:	e002      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c50e:	e2e2      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c510:	e2e1      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c512:	4b05      	ldr	r3, [pc, #20]	; (800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c516:	e2de      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c518:	58024400 	.word	0x58024400
 800c51c:	03d09000 	.word	0x03d09000
 800c520:	003d0900 	.word	0x003d0900
 800c524:	017d7840 	.word	0x017d7840
 800c528:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c530:	e2d1      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c532:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c536:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c53a:	430b      	orrs	r3, r1
 800c53c:	f040 809c 	bne.w	800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c540:	4b93      	ldr	r3, [pc, #588]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c544:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c548:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c550:	d054      	beq.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c558:	f200 808b 	bhi.w	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c562:	f000 8083 	beq.w	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c56c:	f200 8081 	bhi.w	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c576:	d02f      	beq.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c57e:	d878      	bhi.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c582:	2b00      	cmp	r3, #0
 800c584:	d004      	beq.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c58c:	d012      	beq.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c58e:	e070      	b.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c590:	4b7f      	ldr	r3, [pc, #508]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c59c:	d107      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c59e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 fd5e 	bl	800d064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ac:	e293      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5b2:	e290      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5b4:	4b76      	ldr	r3, [pc, #472]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5c0:	d107      	bne.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5c2:	f107 0318 	add.w	r3, r7, #24
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 faa4 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5d0:	e281      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d6:	e27e      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5d8:	4b6d      	ldr	r3, [pc, #436]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5e4:	d107      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5e6:	f107 030c 	add.w	r3, r7, #12
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 fbe6 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f4:	e26f      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fa:	e26c      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5fc:	4b64      	ldr	r3, [pc, #400]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c604:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c606:	4b62      	ldr	r3, [pc, #392]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 0304 	and.w	r3, r3, #4
 800c60e:	2b04      	cmp	r3, #4
 800c610:	d10c      	bne.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c614:	2b00      	cmp	r3, #0
 800c616:	d109      	bne.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c618:	4b5d      	ldr	r3, [pc, #372]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	08db      	lsrs	r3, r3, #3
 800c61e:	f003 0303 	and.w	r3, r3, #3
 800c622:	4a5c      	ldr	r2, [pc, #368]	; (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c624:	fa22 f303 	lsr.w	r3, r2, r3
 800c628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c62a:	e01e      	b.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c62c:	4b58      	ldr	r3, [pc, #352]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c638:	d106      	bne.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c640:	d102      	bne.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c642:	4b55      	ldr	r3, [pc, #340]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c644:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c646:	e010      	b.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c648:	4b51      	ldr	r3, [pc, #324]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c654:	d106      	bne.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c65c:	d102      	bne.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c65e:	4b4f      	ldr	r3, [pc, #316]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c660:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c662:	e002      	b.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c664:	2300      	movs	r3, #0
 800c666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c668:	e235      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c66a:	e234      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c66c:	4b4c      	ldr	r3, [pc, #304]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c670:	e231      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c676:	e22e      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c67c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c680:	430b      	orrs	r3, r1
 800c682:	f040 808f 	bne.w	800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c686:	4b42      	ldr	r3, [pc, #264]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c68a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c68e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c696:	d06b      	beq.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c69e:	d874      	bhi.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6a6:	d056      	beq.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6ae:	d86c      	bhi.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c6b6:	d03b      	beq.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c6be:	d864      	bhi.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6c6:	d021      	beq.n	800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6ce:	d85c      	bhi.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d004      	beq.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6dc:	d004      	beq.n	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c6de:	e054      	b.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c6e0:	f7fe fa0a 	bl	800aaf8 <HAL_RCC_GetPCLK1Freq>
 800c6e4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6e6:	e1f6      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6e8:	4b29      	ldr	r3, [pc, #164]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6f4:	d107      	bne.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f6:	f107 0318 	add.w	r3, r7, #24
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 fa0a 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c704:	e1e7      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c706:	2300      	movs	r3, #0
 800c708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c70a:	e1e4      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c70c:	4b20      	ldr	r3, [pc, #128]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c718:	d107      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c71a:	f107 030c 	add.w	r3, r7, #12
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fb4c 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c728:	e1d5      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c72e:	e1d2      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c730:	4b17      	ldr	r3, [pc, #92]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 0304 	and.w	r3, r3, #4
 800c738:	2b04      	cmp	r3, #4
 800c73a:	d109      	bne.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c73c:	4b14      	ldr	r3, [pc, #80]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	08db      	lsrs	r3, r3, #3
 800c742:	f003 0303 	and.w	r3, r3, #3
 800c746:	4a13      	ldr	r2, [pc, #76]	; (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c748:	fa22 f303 	lsr.w	r3, r2, r3
 800c74c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c74e:	e1c2      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c754:	e1bf      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c756:	4b0e      	ldr	r3, [pc, #56]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c75e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c762:	d102      	bne.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c764:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c768:	e1b5      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c76e:	e1b2      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c770:	4b07      	ldr	r3, [pc, #28]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c77c:	d102      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c77e:	4b07      	ldr	r3, [pc, #28]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c782:	e1a8      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c784:	2300      	movs	r3, #0
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c788:	e1a5      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c78e:	e1a2      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c790:	58024400 	.word	0x58024400
 800c794:	03d09000 	.word	0x03d09000
 800c798:	003d0900 	.word	0x003d0900
 800c79c:	017d7840 	.word	0x017d7840
 800c7a0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c7a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7a8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c7ac:	430b      	orrs	r3, r1
 800c7ae:	d173      	bne.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c7b0:	4b9c      	ldr	r3, [pc, #624]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c7b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7c0:	d02f      	beq.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7c8:	d863      	bhi.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d004      	beq.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7d6:	d012      	beq.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c7d8:	e05b      	b.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7da:	4b92      	ldr	r3, [pc, #584]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7e6:	d107      	bne.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7e8:	f107 0318 	add.w	r3, r7, #24
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 f991 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7f6:	e16e      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7fc:	e16b      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7fe:	4b89      	ldr	r3, [pc, #548]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c80a:	d107      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c80c:	f107 030c 	add.w	r3, r7, #12
 800c810:	4618      	mov	r0, r3
 800c812:	f000 fad3 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c81a:	e15c      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c820:	e159      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c822:	4b80      	ldr	r3, [pc, #512]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c826:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c82a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c82c:	4b7d      	ldr	r3, [pc, #500]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0304 	and.w	r3, r3, #4
 800c834:	2b04      	cmp	r3, #4
 800c836:	d10c      	bne.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d109      	bne.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c83e:	4b79      	ldr	r3, [pc, #484]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	08db      	lsrs	r3, r3, #3
 800c844:	f003 0303 	and.w	r3, r3, #3
 800c848:	4a77      	ldr	r2, [pc, #476]	; (800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c84a:	fa22 f303 	lsr.w	r3, r2, r3
 800c84e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c850:	e01e      	b.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c852:	4b74      	ldr	r3, [pc, #464]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c85a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c85e:	d106      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c866:	d102      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c868:	4b70      	ldr	r3, [pc, #448]	; (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c86a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c86c:	e010      	b.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c86e:	4b6d      	ldr	r3, [pc, #436]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c87a:	d106      	bne.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c87e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c882:	d102      	bne.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c884:	4b6a      	ldr	r3, [pc, #424]	; (800ca30 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c888:	e002      	b.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c88a:	2300      	movs	r3, #0
 800c88c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c88e:	e122      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c890:	e121      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c892:	2300      	movs	r3, #0
 800c894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c896:	e11e      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c89c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c8a0:	430b      	orrs	r3, r1
 800c8a2:	d133      	bne.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c8a4:	4b5f      	ldr	r3, [pc, #380]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d004      	beq.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8ba:	d012      	beq.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c8bc:	e023      	b.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8be:	4b59      	ldr	r3, [pc, #356]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8ca:	d107      	bne.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 fbc7 	bl	800d064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8da:	e0fc      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8e0:	e0f9      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8e2:	4b50      	ldr	r3, [pc, #320]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8ee:	d107      	bne.n	800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8f0:	f107 0318 	add.w	r3, r7, #24
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 f90d 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8fe:	e0ea      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c900:	2300      	movs	r3, #0
 800c902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c904:	e0e7      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c90a:	e0e4      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c90c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c910:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c914:	430b      	orrs	r3, r1
 800c916:	f040 808d 	bne.w	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c91a:	4b42      	ldr	r3, [pc, #264]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c91c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c91e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c922:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c92a:	d06b      	beq.n	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c932:	d874      	bhi.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c93a:	d056      	beq.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c942:	d86c      	bhi.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c946:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c94a:	d03b      	beq.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c952:	d864      	bhi.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c95a:	d021      	beq.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c962:	d85c      	bhi.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c966:	2b00      	cmp	r3, #0
 800c968:	d004      	beq.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c970:	d004      	beq.n	800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c972:	e054      	b.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c974:	f000 f8b8 	bl	800cae8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c978:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c97a:	e0ac      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c97c:	4b29      	ldr	r3, [pc, #164]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c988:	d107      	bne.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c98a:	f107 0318 	add.w	r3, r7, #24
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 f8c0 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c998:	e09d      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c99e:	e09a      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9a0:	4b20      	ldr	r3, [pc, #128]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9ac:	d107      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9ae:	f107 030c 	add.w	r3, r7, #12
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 fa02 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9bc:	e08b      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c2:	e088      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9c4:	4b17      	ldr	r3, [pc, #92]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 0304 	and.w	r3, r3, #4
 800c9cc:	2b04      	cmp	r3, #4
 800c9ce:	d109      	bne.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9d0:	4b14      	ldr	r3, [pc, #80]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	08db      	lsrs	r3, r3, #3
 800c9d6:	f003 0303 	and.w	r3, r3, #3
 800c9da:	4a13      	ldr	r2, [pc, #76]	; (800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9e2:	e078      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e8:	e075      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c9ea:	4b0e      	ldr	r3, [pc, #56]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9f6:	d102      	bne.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9fc:	e06b      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca02:	e068      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ca04:	4b07      	ldr	r3, [pc, #28]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca10:	d102      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ca12:	4b07      	ldr	r3, [pc, #28]	; (800ca30 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ca14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca16:	e05e      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca1c:	e05b      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca22:	e058      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca24:	58024400 	.word	0x58024400
 800ca28:	03d09000 	.word	0x03d09000
 800ca2c:	003d0900 	.word	0x003d0900
 800ca30:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ca34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca38:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ca3c:	430b      	orrs	r3, r1
 800ca3e:	d148      	bne.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ca40:	4b27      	ldr	r3, [pc, #156]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ca42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca48:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca50:	d02a      	beq.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ca52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca58:	d838      	bhi.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d004      	beq.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca66:	d00d      	beq.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ca68:	e030      	b.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ca6a:	4b1d      	ldr	r3, [pc, #116]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca76:	d102      	bne.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ca78:	4b1a      	ldr	r3, [pc, #104]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ca7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca7c:	e02b      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca82:	e028      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca84:	4b16      	ldr	r3, [pc, #88]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca90:	d107      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 fae4 	bl	800d064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa0:	e019      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa6:	e016      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800caa8:	4b0d      	ldr	r3, [pc, #52]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cab4:	d107      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cab6:	f107 0318 	add.w	r3, r7, #24
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 f82a 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cac4:	e007      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caca:	e004      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cacc:	2300      	movs	r3, #0
 800cace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad0:	e001      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3740      	adds	r7, #64	; 0x40
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	58024400 	.word	0x58024400
 800cae4:	017d7840 	.word	0x017d7840

0800cae8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800caec:	f7fd ffd4 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 800caf0:	4602      	mov	r2, r0
 800caf2:	4b06      	ldr	r3, [pc, #24]	; (800cb0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800caf4:	6a1b      	ldr	r3, [r3, #32]
 800caf6:	091b      	lsrs	r3, r3, #4
 800caf8:	f003 0307 	and.w	r3, r3, #7
 800cafc:	4904      	ldr	r1, [pc, #16]	; (800cb10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cafe:	5ccb      	ldrb	r3, [r1, r3]
 800cb00:	f003 031f 	and.w	r3, r3, #31
 800cb04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	58024400 	.word	0x58024400
 800cb10:	080170e4 	.word	0x080170e4

0800cb14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b089      	sub	sp, #36	; 0x24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb1c:	4ba1      	ldr	r3, [pc, #644]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb20:	f003 0303 	and.w	r3, r3, #3
 800cb24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cb26:	4b9f      	ldr	r3, [pc, #636]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2a:	0b1b      	lsrs	r3, r3, #12
 800cb2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cb32:	4b9c      	ldr	r3, [pc, #624]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb36:	091b      	lsrs	r3, r3, #4
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cb3e:	4b99      	ldr	r3, [pc, #612]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb42:	08db      	lsrs	r3, r3, #3
 800cb44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb48:	693a      	ldr	r2, [r7, #16]
 800cb4a:	fb02 f303 	mul.w	r3, r2, r3
 800cb4e:	ee07 3a90 	vmov	s15, r3
 800cb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f000 8111 	beq.w	800cd84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	f000 8083 	beq.w	800cc70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	f200 80a1 	bhi.w	800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d003      	beq.n	800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d056      	beq.n	800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cb7e:	e099      	b.n	800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb80:	4b88      	ldr	r3, [pc, #544]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f003 0320 	and.w	r3, r3, #32
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d02d      	beq.n	800cbe8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb8c:	4b85      	ldr	r3, [pc, #532]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	08db      	lsrs	r3, r3, #3
 800cb92:	f003 0303 	and.w	r3, r3, #3
 800cb96:	4a84      	ldr	r2, [pc, #528]	; (800cda8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cb98:	fa22 f303 	lsr.w	r3, r2, r3
 800cb9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	ee07 3a90 	vmov	s15, r3
 800cba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbb6:	4b7b      	ldr	r3, [pc, #492]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbbe:	ee07 3a90 	vmov	s15, r3
 800cbc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cdac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbe2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cbe6:	e087      	b.n	800ccf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	ee07 3a90 	vmov	s15, r3
 800cbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbf2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cdb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cbf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbfa:	4b6a      	ldr	r3, [pc, #424]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc02:	ee07 3a90 	vmov	s15, r3
 800cc06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cdac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc2a:	e065      	b.n	800ccf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	ee07 3a90 	vmov	s15, r3
 800cc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cc3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc3e:	4b59      	ldr	r3, [pc, #356]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc46:	ee07 3a90 	vmov	s15, r3
 800cc4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc52:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cdac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc6e:	e043      	b.n	800ccf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	ee07 3a90 	vmov	s15, r3
 800cc76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cc7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc82:	4b48      	ldr	r3, [pc, #288]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc8a:	ee07 3a90 	vmov	s15, r3
 800cc8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc92:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc96:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cdac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccb2:	e021      	b.n	800ccf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	ee07 3a90 	vmov	s15, r3
 800ccba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ccc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccc6:	4b37      	ldr	r3, [pc, #220]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccce:	ee07 3a90 	vmov	s15, r3
 800ccd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccda:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cdac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ccf8:	4b2a      	ldr	r3, [pc, #168]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfc:	0a5b      	lsrs	r3, r3, #9
 800ccfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd02:	ee07 3a90 	vmov	s15, r3
 800cd06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd12:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd1e:	ee17 2a90 	vmov	r2, s15
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cd26:	4b1f      	ldr	r3, [pc, #124]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2a:	0c1b      	lsrs	r3, r3, #16
 800cd2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd30:	ee07 3a90 	vmov	s15, r3
 800cd34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd40:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd4c:	ee17 2a90 	vmov	r2, s15
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cd54:	4b13      	ldr	r3, [pc, #76]	; (800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd58:	0e1b      	lsrs	r3, r3, #24
 800cd5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd5e:	ee07 3a90 	vmov	s15, r3
 800cd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd7a:	ee17 2a90 	vmov	r2, s15
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cd82:	e008      	b.n	800cd96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	609a      	str	r2, [r3, #8]
}
 800cd96:	bf00      	nop
 800cd98:	3724      	adds	r7, #36	; 0x24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	58024400 	.word	0x58024400
 800cda8:	03d09000 	.word	0x03d09000
 800cdac:	46000000 	.word	0x46000000
 800cdb0:	4c742400 	.word	0x4c742400
 800cdb4:	4a742400 	.word	0x4a742400
 800cdb8:	4bbebc20 	.word	0x4bbebc20

0800cdbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b089      	sub	sp, #36	; 0x24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cdc4:	4ba1      	ldr	r3, [pc, #644]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc8:	f003 0303 	and.w	r3, r3, #3
 800cdcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cdce:	4b9f      	ldr	r3, [pc, #636]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd2:	0d1b      	lsrs	r3, r3, #20
 800cdd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cdda:	4b9c      	ldr	r3, [pc, #624]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	0a1b      	lsrs	r3, r3, #8
 800cde0:	f003 0301 	and.w	r3, r3, #1
 800cde4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cde6:	4b99      	ldr	r3, [pc, #612]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdea:	08db      	lsrs	r3, r3, #3
 800cdec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	fb02 f303 	mul.w	r3, r2, r3
 800cdf6:	ee07 3a90 	vmov	s15, r3
 800cdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f000 8111 	beq.w	800d02c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	f000 8083 	beq.w	800cf18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	f200 80a1 	bhi.w	800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d003      	beq.n	800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d056      	beq.n	800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ce26:	e099      	b.n	800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce28:	4b88      	ldr	r3, [pc, #544]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f003 0320 	and.w	r3, r3, #32
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d02d      	beq.n	800ce90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce34:	4b85      	ldr	r3, [pc, #532]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	08db      	lsrs	r3, r3, #3
 800ce3a:	f003 0303 	and.w	r3, r3, #3
 800ce3e:	4a84      	ldr	r2, [pc, #528]	; (800d050 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ce40:	fa22 f303 	lsr.w	r3, r2, r3
 800ce44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	ee07 3a90 	vmov	s15, r3
 800ce4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	ee07 3a90 	vmov	s15, r3
 800ce56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce5e:	4b7b      	ldr	r3, [pc, #492]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce66:	ee07 3a90 	vmov	s15, r3
 800ce6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce8e:	e087      	b.n	800cfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	ee07 3a90 	vmov	s15, r3
 800ce96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d058 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ce9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cea2:	4b6a      	ldr	r3, [pc, #424]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceaa:	ee07 3a90 	vmov	s15, r3
 800ceae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ceba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ced2:	e065      	b.n	800cfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	ee07 3a90 	vmov	s15, r3
 800ceda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cede:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d05c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cee6:	4b59      	ldr	r3, [pc, #356]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceee:	ee07 3a90 	vmov	s15, r3
 800cef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cefa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf16:	e043      	b.n	800cfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	ee07 3a90 	vmov	s15, r3
 800cf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cf26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf2a:	4b48      	ldr	r3, [pc, #288]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf32:	ee07 3a90 	vmov	s15, r3
 800cf36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf5a:	e021      	b.n	800cfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	ee07 3a90 	vmov	s15, r3
 800cf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d05c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cf6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf6e:	4b37      	ldr	r3, [pc, #220]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf76:	ee07 3a90 	vmov	s15, r3
 800cf7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cfa0:	4b2a      	ldr	r3, [pc, #168]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa4:	0a5b      	lsrs	r3, r3, #9
 800cfa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfaa:	ee07 3a90 	vmov	s15, r3
 800cfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfba:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfc6:	ee17 2a90 	vmov	r2, s15
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cfce:	4b1f      	ldr	r3, [pc, #124]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd2:	0c1b      	lsrs	r3, r3, #16
 800cfd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfd8:	ee07 3a90 	vmov	s15, r3
 800cfdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cff4:	ee17 2a90 	vmov	r2, s15
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cffc:	4b13      	ldr	r3, [pc, #76]	; (800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d000:	0e1b      	lsrs	r3, r3, #24
 800d002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d006:	ee07 3a90 	vmov	s15, r3
 800d00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d016:	edd7 6a07 	vldr	s13, [r7, #28]
 800d01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d022:	ee17 2a90 	vmov	r2, s15
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d02a:	e008      	b.n	800d03e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2200      	movs	r2, #0
 800d036:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	609a      	str	r2, [r3, #8]
}
 800d03e:	bf00      	nop
 800d040:	3724      	adds	r7, #36	; 0x24
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	58024400 	.word	0x58024400
 800d050:	03d09000 	.word	0x03d09000
 800d054:	46000000 	.word	0x46000000
 800d058:	4c742400 	.word	0x4c742400
 800d05c:	4a742400 	.word	0x4a742400
 800d060:	4bbebc20 	.word	0x4bbebc20

0800d064 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d064:	b480      	push	{r7}
 800d066:	b089      	sub	sp, #36	; 0x24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d06c:	4ba0      	ldr	r3, [pc, #640]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d070:	f003 0303 	and.w	r3, r3, #3
 800d074:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d076:	4b9e      	ldr	r3, [pc, #632]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d07a:	091b      	lsrs	r3, r3, #4
 800d07c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d080:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d082:	4b9b      	ldr	r3, [pc, #620]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d086:	f003 0301 	and.w	r3, r3, #1
 800d08a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d08c:	4b98      	ldr	r3, [pc, #608]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d090:	08db      	lsrs	r3, r3, #3
 800d092:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	fb02 f303 	mul.w	r3, r2, r3
 800d09c:	ee07 3a90 	vmov	s15, r3
 800d0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f000 8111 	beq.w	800d2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	f000 8083 	beq.w	800d1be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	f200 80a1 	bhi.w	800d202 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d003      	beq.n	800d0ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d056      	beq.n	800d17a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d0cc:	e099      	b.n	800d202 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0ce:	4b88      	ldr	r3, [pc, #544]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0320 	and.w	r3, r3, #32
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d02d      	beq.n	800d136 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0da:	4b85      	ldr	r3, [pc, #532]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	08db      	lsrs	r3, r3, #3
 800d0e0:	f003 0303 	and.w	r3, r3, #3
 800d0e4:	4a83      	ldr	r2, [pc, #524]	; (800d2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	ee07 3a90 	vmov	s15, r3
 800d0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	ee07 3a90 	vmov	s15, r3
 800d0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d104:	4b7a      	ldr	r3, [pc, #488]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d10c:	ee07 3a90 	vmov	s15, r3
 800d110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d114:	ed97 6a03 	vldr	s12, [r7, #12]
 800d118:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d11c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d12c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d130:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d134:	e087      	b.n	800d246 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	ee07 3a90 	vmov	s15, r3
 800d13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d140:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d2fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d148:	4b69      	ldr	r3, [pc, #420]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d150:	ee07 3a90 	vmov	s15, r3
 800d154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d158:	ed97 6a03 	vldr	s12, [r7, #12]
 800d15c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d16c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d170:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d174:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d178:	e065      	b.n	800d246 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	ee07 3a90 	vmov	s15, r3
 800d180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d184:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d300 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d18c:	4b58      	ldr	r3, [pc, #352]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d194:	ee07 3a90 	vmov	s15, r3
 800d198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d19c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1bc:	e043      	b.n	800d246 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	ee07 3a90 	vmov	s15, r3
 800d1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d304 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d1cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1d0:	4b47      	ldr	r3, [pc, #284]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d8:	ee07 3a90 	vmov	s15, r3
 800d1dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d200:	e021      	b.n	800d246 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	ee07 3a90 	vmov	s15, r3
 800d208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d20c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d2fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d214:	4b36      	ldr	r3, [pc, #216]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d21c:	ee07 3a90 	vmov	s15, r3
 800d220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d224:	ed97 6a03 	vldr	s12, [r7, #12]
 800d228:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d22c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d23c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d240:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d244:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d246:	4b2a      	ldr	r3, [pc, #168]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24a:	0a5b      	lsrs	r3, r3, #9
 800d24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d250:	ee07 3a90 	vmov	s15, r3
 800d254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d25c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d260:	edd7 6a07 	vldr	s13, [r7, #28]
 800d264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d26c:	ee17 2a90 	vmov	r2, s15
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d274:	4b1e      	ldr	r3, [pc, #120]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d278:	0c1b      	lsrs	r3, r3, #16
 800d27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d27e:	ee07 3a90 	vmov	s15, r3
 800d282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d28a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d28e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d29a:	ee17 2a90 	vmov	r2, s15
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d2a2:	4b13      	ldr	r3, [pc, #76]	; (800d2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a6:	0e1b      	lsrs	r3, r3, #24
 800d2a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ac:	ee07 3a90 	vmov	s15, r3
 800d2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2c8:	ee17 2a90 	vmov	r2, s15
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d2d0:	e008      	b.n	800d2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	609a      	str	r2, [r3, #8]
}
 800d2e4:	bf00      	nop
 800d2e6:	3724      	adds	r7, #36	; 0x24
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	58024400 	.word	0x58024400
 800d2f4:	03d09000 	.word	0x03d09000
 800d2f8:	46000000 	.word	0x46000000
 800d2fc:	4c742400 	.word	0x4c742400
 800d300:	4a742400 	.word	0x4a742400
 800d304:	4bbebc20 	.word	0x4bbebc20

0800d308 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d316:	4b53      	ldr	r3, [pc, #332]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d31a:	f003 0303 	and.w	r3, r3, #3
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d101      	bne.n	800d326 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	e099      	b.n	800d45a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d326:	4b4f      	ldr	r3, [pc, #316]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a4e      	ldr	r2, [pc, #312]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d32c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d332:	f7f6 fc9b 	bl	8003c6c <HAL_GetTick>
 800d336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d338:	e008      	b.n	800d34c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d33a:	f7f6 fc97 	bl	8003c6c <HAL_GetTick>
 800d33e:	4602      	mov	r2, r0
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	2b02      	cmp	r3, #2
 800d346:	d901      	bls.n	800d34c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d348:	2303      	movs	r3, #3
 800d34a:	e086      	b.n	800d45a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d34c:	4b45      	ldr	r3, [pc, #276]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1f0      	bne.n	800d33a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d358:	4b42      	ldr	r3, [pc, #264]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d35c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	031b      	lsls	r3, r3, #12
 800d366:	493f      	ldr	r1, [pc, #252]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d368:	4313      	orrs	r3, r2
 800d36a:	628b      	str	r3, [r1, #40]	; 0x28
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	3b01      	subs	r3, #1
 800d372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	025b      	lsls	r3, r3, #9
 800d37e:	b29b      	uxth	r3, r3
 800d380:	431a      	orrs	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	3b01      	subs	r3, #1
 800d388:	041b      	lsls	r3, r3, #16
 800d38a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d38e:	431a      	orrs	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	3b01      	subs	r3, #1
 800d396:	061b      	lsls	r3, r3, #24
 800d398:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d39c:	4931      	ldr	r1, [pc, #196]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d3a2:	4b30      	ldr	r3, [pc, #192]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	492d      	ldr	r1, [pc, #180]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d3b4:	4b2b      	ldr	r3, [pc, #172]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b8:	f023 0220 	bic.w	r2, r3, #32
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	4928      	ldr	r1, [pc, #160]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d3c6:	4b27      	ldr	r3, [pc, #156]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ca:	4a26      	ldr	r2, [pc, #152]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3cc:	f023 0310 	bic.w	r3, r3, #16
 800d3d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d3d2:	4b24      	ldr	r3, [pc, #144]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3d6:	4b24      	ldr	r3, [pc, #144]	; (800d468 <RCCEx_PLL2_Config+0x160>)
 800d3d8:	4013      	ands	r3, r2
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	69d2      	ldr	r2, [r2, #28]
 800d3de:	00d2      	lsls	r2, r2, #3
 800d3e0:	4920      	ldr	r1, [pc, #128]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d3e6:	4b1f      	ldr	r3, [pc, #124]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ea:	4a1e      	ldr	r2, [pc, #120]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3ec:	f043 0310 	orr.w	r3, r3, #16
 800d3f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d106      	bne.n	800d406 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d3f8:	4b1a      	ldr	r3, [pc, #104]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	4a19      	ldr	r2, [pc, #100]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d3fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d402:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d404:	e00f      	b.n	800d426 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d106      	bne.n	800d41a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d40c:	4b15      	ldr	r3, [pc, #84]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d410:	4a14      	ldr	r2, [pc, #80]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d416:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d418:	e005      	b.n	800d426 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d41a:	4b12      	ldr	r3, [pc, #72]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41e:	4a11      	ldr	r2, [pc, #68]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d424:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d426:	4b0f      	ldr	r3, [pc, #60]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a0e      	ldr	r2, [pc, #56]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d42c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d432:	f7f6 fc1b 	bl	8003c6c <HAL_GetTick>
 800d436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d438:	e008      	b.n	800d44c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d43a:	f7f6 fc17 	bl	8003c6c <HAL_GetTick>
 800d43e:	4602      	mov	r2, r0
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	2b02      	cmp	r3, #2
 800d446:	d901      	bls.n	800d44c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d448:	2303      	movs	r3, #3
 800d44a:	e006      	b.n	800d45a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d44c:	4b05      	ldr	r3, [pc, #20]	; (800d464 <RCCEx_PLL2_Config+0x15c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d454:	2b00      	cmp	r3, #0
 800d456:	d0f0      	beq.n	800d43a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d458:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	58024400 	.word	0x58024400
 800d468:	ffff0007 	.word	0xffff0007

0800d46c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d476:	2300      	movs	r3, #0
 800d478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d47a:	4b53      	ldr	r3, [pc, #332]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d47e:	f003 0303 	and.w	r3, r3, #3
 800d482:	2b03      	cmp	r3, #3
 800d484:	d101      	bne.n	800d48a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	e099      	b.n	800d5be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d48a:	4b4f      	ldr	r3, [pc, #316]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a4e      	ldr	r2, [pc, #312]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d496:	f7f6 fbe9 	bl	8003c6c <HAL_GetTick>
 800d49a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d49c:	e008      	b.n	800d4b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d49e:	f7f6 fbe5 	bl	8003c6c <HAL_GetTick>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	1ad3      	subs	r3, r2, r3
 800d4a8:	2b02      	cmp	r3, #2
 800d4aa:	d901      	bls.n	800d4b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d4ac:	2303      	movs	r3, #3
 800d4ae:	e086      	b.n	800d5be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d4b0:	4b45      	ldr	r3, [pc, #276]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1f0      	bne.n	800d49e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d4bc:	4b42      	ldr	r3, [pc, #264]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	051b      	lsls	r3, r3, #20
 800d4ca:	493f      	ldr	r1, [pc, #252]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	628b      	str	r3, [r1, #40]	; 0x28
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	025b      	lsls	r3, r3, #9
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	431a      	orrs	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	041b      	lsls	r3, r3, #16
 800d4ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	061b      	lsls	r3, r3, #24
 800d4fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d500:	4931      	ldr	r1, [pc, #196]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d502:	4313      	orrs	r3, r2
 800d504:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d506:	4b30      	ldr	r3, [pc, #192]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	492d      	ldr	r1, [pc, #180]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d514:	4313      	orrs	r3, r2
 800d516:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d518:	4b2b      	ldr	r3, [pc, #172]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	699b      	ldr	r3, [r3, #24]
 800d524:	4928      	ldr	r1, [pc, #160]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d526:	4313      	orrs	r3, r2
 800d528:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d52a:	4b27      	ldr	r3, [pc, #156]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52e:	4a26      	ldr	r2, [pc, #152]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d534:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d536:	4b24      	ldr	r3, [pc, #144]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d53a:	4b24      	ldr	r3, [pc, #144]	; (800d5cc <RCCEx_PLL3_Config+0x160>)
 800d53c:	4013      	ands	r3, r2
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	69d2      	ldr	r2, [r2, #28]
 800d542:	00d2      	lsls	r2, r2, #3
 800d544:	4920      	ldr	r1, [pc, #128]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d546:	4313      	orrs	r3, r2
 800d548:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d54a:	4b1f      	ldr	r3, [pc, #124]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54e:	4a1e      	ldr	r2, [pc, #120]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d554:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d106      	bne.n	800d56a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d55c:	4b1a      	ldr	r3, [pc, #104]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d560:	4a19      	ldr	r2, [pc, #100]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d566:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d568:	e00f      	b.n	800d58a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d106      	bne.n	800d57e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d570:	4b15      	ldr	r3, [pc, #84]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d574:	4a14      	ldr	r2, [pc, #80]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d576:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d57a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d57c:	e005      	b.n	800d58a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d57e:	4b12      	ldr	r3, [pc, #72]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d582:	4a11      	ldr	r2, [pc, #68]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d588:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d58a:	4b0f      	ldr	r3, [pc, #60]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4a0e      	ldr	r2, [pc, #56]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d596:	f7f6 fb69 	bl	8003c6c <HAL_GetTick>
 800d59a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d59c:	e008      	b.n	800d5b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d59e:	f7f6 fb65 	bl	8003c6c <HAL_GetTick>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d901      	bls.n	800d5b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	e006      	b.n	800d5be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d5b0:	4b05      	ldr	r3, [pc, #20]	; (800d5c8 <RCCEx_PLL3_Config+0x15c>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d0f0      	beq.n	800d59e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	58024400 	.word	0x58024400
 800d5cc:	ffff0007 	.word	0xffff0007

0800d5d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d071      	beq.n	800d6c6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d106      	bne.n	800d5fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7f5 fdd0 	bl	800319c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2202      	movs	r2, #2
 800d600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	f003 0310 	and.w	r3, r3, #16
 800d60e:	2b10      	cmp	r3, #16
 800d610:	d050      	beq.n	800d6b4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	22ca      	movs	r2, #202	; 0xca
 800d618:	625a      	str	r2, [r3, #36]	; 0x24
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2253      	movs	r2, #83	; 0x53
 800d620:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 fa4a 	bl	800dabc <RTC_EnterInitMode>
 800d628:	4603      	mov	r3, r0
 800d62a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d62c:	7bfb      	ldrb	r3, [r7, #15]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d124      	bne.n	800d67c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	6899      	ldr	r1, [r3, #8]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	4b24      	ldr	r3, [pc, #144]	; (800d6d0 <HAL_RTC_Init+0x100>)
 800d63e:	400b      	ands	r3, r1
 800d640:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	6899      	ldr	r1, [r3, #8]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	685a      	ldr	r2, [r3, #4]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	691b      	ldr	r3, [r3, #16]
 800d650:	431a      	orrs	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	699b      	ldr	r3, [r3, #24]
 800d656:	431a      	orrs	r2, r3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	430a      	orrs	r2, r1
 800d65e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	0419      	lsls	r1, r3, #16
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	68da      	ldr	r2, [r3, #12]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	430a      	orrs	r2, r1
 800d670:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fa56 	bl	800db24 <RTC_ExitInitMode>
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d113      	bne.n	800d6aa <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f022 0203 	bic.w	r2, r2, #3
 800d690:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	69da      	ldr	r2, [r3, #28]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	695b      	ldr	r3, [r3, #20]
 800d6a0:	431a      	orrs	r2, r3
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	430a      	orrs	r2, r1
 800d6a8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	22ff      	movs	r2, #255	; 0xff
 800d6b0:	625a      	str	r2, [r3, #36]	; 0x24
 800d6b2:	e001      	b.n	800d6b8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d103      	bne.n	800d6c6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	ff8fffbf 	.word	0xff8fffbf

0800d6d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d6d4:	b590      	push	{r4, r7, lr}
 800d6d6:	b087      	sub	sp, #28
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d101      	bne.n	800d6ee <HAL_RTC_SetTime+0x1a>
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	e089      	b.n	800d802 <HAL_RTC_SetTime+0x12e>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	22ca      	movs	r2, #202	; 0xca
 800d704:	625a      	str	r2, [r3, #36]	; 0x24
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2253      	movs	r2, #83	; 0x53
 800d70c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f000 f9d4 	bl	800dabc <RTC_EnterInitMode>
 800d714:	4603      	mov	r3, r0
 800d716:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d718:	7cfb      	ldrb	r3, [r7, #19]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d161      	bne.n	800d7e2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d126      	bne.n	800d772 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d102      	bne.n	800d738 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2200      	movs	r2, #0
 800d736:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	4618      	mov	r0, r3
 800d73e:	f000 fa2f 	bl	800dba0 <RTC_ByteToBcd2>
 800d742:	4603      	mov	r3, r0
 800d744:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	785b      	ldrb	r3, [r3, #1]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f000 fa28 	bl	800dba0 <RTC_ByteToBcd2>
 800d750:	4603      	mov	r3, r0
 800d752:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d754:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	789b      	ldrb	r3, [r3, #2]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 fa20 	bl	800dba0 <RTC_ByteToBcd2>
 800d760:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d762:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	78db      	ldrb	r3, [r3, #3]
 800d76a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d76c:	4313      	orrs	r3, r2
 800d76e:	617b      	str	r3, [r7, #20]
 800d770:	e018      	b.n	800d7a4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	689b      	ldr	r3, [r3, #8]
 800d778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d102      	bne.n	800d786 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2200      	movs	r2, #0
 800d784:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	785b      	ldrb	r3, [r3, #1]
 800d790:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d792:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d798:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	78db      	ldrb	r3, [r3, #3]
 800d79e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	6979      	ldr	r1, [r7, #20]
 800d7aa:	4b18      	ldr	r3, [pc, #96]	; (800d80c <HAL_RTC_SetTime+0x138>)
 800d7ac:	400b      	ands	r3, r1
 800d7ae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	689a      	ldr	r2, [r3, #8]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d7be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	6899      	ldr	r1, [r3, #8]
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	68da      	ldr	r2, [r3, #12]
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	431a      	orrs	r2, r3
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	430a      	orrs	r2, r1
 800d7d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 f9a3 	bl	800db24 <RTC_ExitInitMode>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	22ff      	movs	r2, #255	; 0xff
 800d7e8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d7ea:	7cfb      	ldrb	r3, [r7, #19]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d103      	bne.n	800d7f8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d800:	7cfb      	ldrb	r3, [r7, #19]
}
 800d802:	4618      	mov	r0, r3
 800d804:	371c      	adds	r7, #28
 800d806:	46bd      	mov	sp, r7
 800d808:	bd90      	pop	{r4, r7, pc}
 800d80a:	bf00      	nop
 800d80c:	007f7f7f 	.word	0x007f7f7f

0800d810 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	4b22      	ldr	r3, [pc, #136]	; (800d8c4 <HAL_RTC_GetTime+0xb4>)
 800d83c:	4013      	ands	r3, r2
 800d83e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	0c1b      	lsrs	r3, r3, #16
 800d844:	b2db      	uxtb	r3, r3
 800d846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	0a1b      	lsrs	r3, r3, #8
 800d854:	b2db      	uxtb	r3, r3
 800d856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	b2db      	uxtb	r3, r3
 800d864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	0d9b      	lsrs	r3, r3, #22
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 0301 	and.w	r3, r3, #1
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d11a      	bne.n	800d8ba <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	4618      	mov	r0, r3
 800d88a:	f000 f9a9 	bl	800dbe0 <RTC_Bcd2ToByte>
 800d88e:	4603      	mov	r3, r0
 800d890:	461a      	mov	r2, r3
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	785b      	ldrb	r3, [r3, #1]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 f9a0 	bl	800dbe0 <RTC_Bcd2ToByte>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	789b      	ldrb	r3, [r3, #2]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 f997 	bl	800dbe0 <RTC_Bcd2ToByte>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3718      	adds	r7, #24
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	007f7f7f 	.word	0x007f7f7f

0800d8c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d8c8:	b590      	push	{r4, r7, lr}
 800d8ca:	b087      	sub	sp, #28
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d101      	bne.n	800d8e2 <HAL_RTC_SetDate+0x1a>
 800d8de:	2302      	movs	r3, #2
 800d8e0:	e073      	b.n	800d9ca <HAL_RTC_SetDate+0x102>
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2202      	movs	r2, #2
 800d8ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10e      	bne.n	800d916 <HAL_RTC_SetDate+0x4e>
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	785b      	ldrb	r3, [r3, #1]
 800d8fc:	f003 0310 	and.w	r3, r3, #16
 800d900:	2b00      	cmp	r3, #0
 800d902:	d008      	beq.n	800d916 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	785b      	ldrb	r3, [r3, #1]
 800d908:	f023 0310 	bic.w	r3, r3, #16
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	330a      	adds	r3, #10
 800d910:	b2da      	uxtb	r2, r3
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d11c      	bne.n	800d956 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	78db      	ldrb	r3, [r3, #3]
 800d920:	4618      	mov	r0, r3
 800d922:	f000 f93d 	bl	800dba0 <RTC_ByteToBcd2>
 800d926:	4603      	mov	r3, r0
 800d928:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	785b      	ldrb	r3, [r3, #1]
 800d92e:	4618      	mov	r0, r3
 800d930:	f000 f936 	bl	800dba0 <RTC_ByteToBcd2>
 800d934:	4603      	mov	r3, r0
 800d936:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d938:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	789b      	ldrb	r3, [r3, #2]
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 f92e 	bl	800dba0 <RTC_ByteToBcd2>
 800d944:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d946:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d950:	4313      	orrs	r3, r2
 800d952:	617b      	str	r3, [r7, #20]
 800d954:	e00e      	b.n	800d974 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	78db      	ldrb	r3, [r3, #3]
 800d95a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	785b      	ldrb	r3, [r3, #1]
 800d960:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d962:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d968:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d970:	4313      	orrs	r3, r2
 800d972:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	22ca      	movs	r2, #202	; 0xca
 800d97a:	625a      	str	r2, [r3, #36]	; 0x24
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2253      	movs	r2, #83	; 0x53
 800d982:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f000 f899 	bl	800dabc <RTC_EnterInitMode>
 800d98a:	4603      	mov	r3, r0
 800d98c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d98e:	7cfb      	ldrb	r3, [r7, #19]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10a      	bne.n	800d9aa <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	6979      	ldr	r1, [r7, #20]
 800d99a:	4b0e      	ldr	r3, [pc, #56]	; (800d9d4 <HAL_RTC_SetDate+0x10c>)
 800d99c:	400b      	ands	r3, r1
 800d99e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f000 f8bf 	bl	800db24 <RTC_ExitInitMode>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	22ff      	movs	r2, #255	; 0xff
 800d9b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d9b2:	7cfb      	ldrb	r3, [r7, #19]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d103      	bne.n	800d9c0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d9c8:	7cfb      	ldrb	r3, [r7, #19]


}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	371c      	adds	r7, #28
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd90      	pop	{r4, r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	00ffff3f 	.word	0x00ffff3f

0800d9d8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	685a      	ldr	r2, [r3, #4]
 800d9ea:	4b21      	ldr	r3, [pc, #132]	; (800da70 <HAL_RTC_GetDate+0x98>)
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	0c1b      	lsrs	r3, r3, #16
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	0a1b      	lsrs	r3, r3, #8
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	f003 031f 	and.w	r3, r3, #31
 800da04:	b2da      	uxtb	r2, r3
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da12:	b2da      	uxtb	r2, r3
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	0b5b      	lsrs	r3, r3, #13
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 0307 	and.w	r3, r3, #7
 800da22:	b2da      	uxtb	r2, r3
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d11a      	bne.n	800da64 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	78db      	ldrb	r3, [r3, #3]
 800da32:	4618      	mov	r0, r3
 800da34:	f000 f8d4 	bl	800dbe0 <RTC_Bcd2ToByte>
 800da38:	4603      	mov	r3, r0
 800da3a:	461a      	mov	r2, r3
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	785b      	ldrb	r3, [r3, #1]
 800da44:	4618      	mov	r0, r3
 800da46:	f000 f8cb 	bl	800dbe0 <RTC_Bcd2ToByte>
 800da4a:	4603      	mov	r3, r0
 800da4c:	461a      	mov	r2, r3
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	789b      	ldrb	r3, [r3, #2]
 800da56:	4618      	mov	r0, r3
 800da58:	f000 f8c2 	bl	800dbe0 <RTC_Bcd2ToByte>
 800da5c:	4603      	mov	r3, r0
 800da5e:	461a      	mov	r2, r3
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	3718      	adds	r7, #24
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	00ffff3f 	.word	0x00ffff3f

0800da74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a0d      	ldr	r2, [pc, #52]	; (800dab8 <HAL_RTC_WaitForSynchro+0x44>)
 800da82:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800da84:	f7f6 f8f2 	bl	8003c6c <HAL_GetTick>
 800da88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800da8a:	e009      	b.n	800daa0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800da8c:	f7f6 f8ee 	bl	8003c6c <HAL_GetTick>
 800da90:	4602      	mov	r2, r0
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da9a:	d901      	bls.n	800daa0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800da9c:	2303      	movs	r3, #3
 800da9e:	e007      	b.n	800dab0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	f003 0320 	and.w	r3, r3, #32
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d0ee      	beq.n	800da8c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	0003ff5f 	.word	0x0003ff5f

0800dabc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d120      	bne.n	800db18 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dade:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dae0:	f7f6 f8c4 	bl	8003c6c <HAL_GetTick>
 800dae4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dae6:	e00d      	b.n	800db04 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dae8:	f7f6 f8c0 	bl	8003c6c <HAL_GetTick>
 800daec:	4602      	mov	r2, r0
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800daf6:	d905      	bls.n	800db04 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800daf8:	2303      	movs	r3, #3
 800dafa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2203      	movs	r2, #3
 800db00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d102      	bne.n	800db18 <RTC_EnterInitMode+0x5c>
 800db12:	7bfb      	ldrb	r3, [r7, #15]
 800db14:	2b03      	cmp	r3, #3
 800db16:	d1e7      	bne.n	800dae8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800db18:	7bfb      	ldrb	r3, [r7, #15]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
	...

0800db24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db2c:	2300      	movs	r3, #0
 800db2e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800db30:	4b1a      	ldr	r3, [pc, #104]	; (800db9c <RTC_ExitInitMode+0x78>)
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	4a19      	ldr	r2, [pc, #100]	; (800db9c <RTC_ExitInitMode+0x78>)
 800db36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db3a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800db3c:	4b17      	ldr	r3, [pc, #92]	; (800db9c <RTC_ExitInitMode+0x78>)
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	f003 0320 	and.w	r3, r3, #32
 800db44:	2b00      	cmp	r3, #0
 800db46:	d10c      	bne.n	800db62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7ff ff93 	bl	800da74 <HAL_RTC_WaitForSynchro>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d01e      	beq.n	800db92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2203      	movs	r2, #3
 800db58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800db5c:	2303      	movs	r3, #3
 800db5e:	73fb      	strb	r3, [r7, #15]
 800db60:	e017      	b.n	800db92 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800db62:	4b0e      	ldr	r3, [pc, #56]	; (800db9c <RTC_ExitInitMode+0x78>)
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	4a0d      	ldr	r2, [pc, #52]	; (800db9c <RTC_ExitInitMode+0x78>)
 800db68:	f023 0320 	bic.w	r3, r3, #32
 800db6c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff ff80 	bl	800da74 <HAL_RTC_WaitForSynchro>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d005      	beq.n	800db86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2203      	movs	r2, #3
 800db7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800db82:	2303      	movs	r3, #3
 800db84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800db86:	4b05      	ldr	r3, [pc, #20]	; (800db9c <RTC_ExitInitMode+0x78>)
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	4a04      	ldr	r2, [pc, #16]	; (800db9c <RTC_ExitInitMode+0x78>)
 800db8c:	f043 0320 	orr.w	r3, r3, #32
 800db90:	6093      	str	r3, [r2, #8]
  }

  return status;
 800db92:	7bfb      	ldrb	r3, [r7, #15]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	58004000 	.word	0x58004000

0800dba0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	4603      	mov	r3, r0
 800dba8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800dbae:	79fb      	ldrb	r3, [r7, #7]
 800dbb0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800dbb2:	e005      	b.n	800dbc0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800dbba:	7afb      	ldrb	r3, [r7, #11]
 800dbbc:	3b0a      	subs	r3, #10
 800dbbe:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800dbc0:	7afb      	ldrb	r3, [r7, #11]
 800dbc2:	2b09      	cmp	r3, #9
 800dbc4:	d8f6      	bhi.n	800dbb4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	011b      	lsls	r3, r3, #4
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	7afb      	ldrb	r3, [r7, #11]
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	b2db      	uxtb	r3, r3
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3714      	adds	r7, #20
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr

0800dbe0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dbea:	79fb      	ldrb	r3, [r7, #7]
 800dbec:	091b      	lsrs	r3, r3, #4
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	0092      	lsls	r2, r2, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dbfa:	79fb      	ldrb	r3, [r7, #7]
 800dbfc:	f003 030f 	and.w	r3, r3, #15
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	7bfb      	ldrb	r3, [r7, #15]
 800dc04:	4413      	add	r3, r2
 800dc06:	b2db      	uxtb	r3, r3
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3714      	adds	r7, #20
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d101      	bne.n	800dc26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	e10f      	b.n	800de46 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a87      	ldr	r2, [pc, #540]	; (800de50 <HAL_SPI_Init+0x23c>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d00f      	beq.n	800dc56 <HAL_SPI_Init+0x42>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a86      	ldr	r2, [pc, #536]	; (800de54 <HAL_SPI_Init+0x240>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d00a      	beq.n	800dc56 <HAL_SPI_Init+0x42>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a84      	ldr	r2, [pc, #528]	; (800de58 <HAL_SPI_Init+0x244>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d005      	beq.n	800dc56 <HAL_SPI_Init+0x42>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	2b0f      	cmp	r3, #15
 800dc50:	d901      	bls.n	800dc56 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dc52:	2301      	movs	r3, #1
 800dc54:	e0f7      	b.n	800de46 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 fc12 	bl	800e480 <SPI_GetPacketSize>
 800dc5c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a7b      	ldr	r2, [pc, #492]	; (800de50 <HAL_SPI_Init+0x23c>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d00c      	beq.n	800dc82 <HAL_SPI_Init+0x6e>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a79      	ldr	r2, [pc, #484]	; (800de54 <HAL_SPI_Init+0x240>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d007      	beq.n	800dc82 <HAL_SPI_Init+0x6e>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a78      	ldr	r2, [pc, #480]	; (800de58 <HAL_SPI_Init+0x244>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d002      	beq.n	800dc82 <HAL_SPI_Init+0x6e>
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2b08      	cmp	r3, #8
 800dc80:	d811      	bhi.n	800dca6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dc86:	4a72      	ldr	r2, [pc, #456]	; (800de50 <HAL_SPI_Init+0x23c>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d009      	beq.n	800dca0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a70      	ldr	r2, [pc, #448]	; (800de54 <HAL_SPI_Init+0x240>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d004      	beq.n	800dca0 <HAL_SPI_Init+0x8c>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a6f      	ldr	r2, [pc, #444]	; (800de58 <HAL_SPI_Init+0x244>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d104      	bne.n	800dcaa <HAL_SPI_Init+0x96>
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2b10      	cmp	r3, #16
 800dca4:	d901      	bls.n	800dcaa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e0cd      	b.n	800de46 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d106      	bne.n	800dcc4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7f5 faa0 	bl	8003204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f022 0201 	bic.w	r2, r2, #1
 800dcda:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800dce6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	699b      	ldr	r3, [r3, #24]
 800dcec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dcf0:	d119      	bne.n	800dd26 <HAL_SPI_Init+0x112>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dcfa:	d103      	bne.n	800dd04 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d008      	beq.n	800dd16 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10c      	bne.n	800dd26 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dd10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd14:	d107      	bne.n	800dd26 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00f      	beq.n	800dd52 <HAL_SPI_Init+0x13e>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	2b06      	cmp	r3, #6
 800dd38:	d90b      	bls.n	800dd52 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	430a      	orrs	r2, r1
 800dd4e:	601a      	str	r2, [r3, #0]
 800dd50:	e007      	b.n	800dd62 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dd60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	69da      	ldr	r2, [r3, #28]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6a:	431a      	orrs	r2, r3
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd74:	ea42 0103 	orr.w	r1, r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	68da      	ldr	r2, [r3, #12]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	430a      	orrs	r2, r1
 800dd82:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8c:	431a      	orrs	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd92:	431a      	orrs	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	699b      	ldr	r3, [r3, #24]
 800dd98:	431a      	orrs	r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	431a      	orrs	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	431a      	orrs	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a1b      	ldr	r3, [r3, #32]
 800ddaa:	431a      	orrs	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	431a      	orrs	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddb6:	431a      	orrs	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	431a      	orrs	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddc2:	ea42 0103 	orr.w	r1, r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	430a      	orrs	r2, r1
 800ddd0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d113      	bne.n	800de02 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ddec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de00:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f022 0201 	bic.w	r2, r2, #1
 800de10:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00a      	beq.n	800de34 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	430a      	orrs	r2, r1
 800de32:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2200      	movs	r2, #0
 800de38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800de44:	2300      	movs	r3, #0
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	40013000 	.word	0x40013000
 800de54:	40003800 	.word	0x40003800
 800de58:	40003c00 	.word	0x40003c00

0800de5c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b088      	sub	sp, #32
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	603b      	str	r3, [r7, #0]
 800de68:	4613      	mov	r3, r2
 800de6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de70:	095b      	lsrs	r3, r3, #5
 800de72:	b29b      	uxth	r3, r3
 800de74:	3301      	adds	r3, #1
 800de76:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	3330      	adds	r3, #48	; 0x30
 800de7e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de80:	f7f5 fef4 	bl	8003c6c <HAL_GetTick>
 800de84:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d001      	beq.n	800de96 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800de92:	2302      	movs	r3, #2
 800de94:	e250      	b.n	800e338 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d002      	beq.n	800dea2 <HAL_SPI_Receive+0x46>
 800de9c:	88fb      	ldrh	r3, [r7, #6]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	e248      	b.n	800e338 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800deac:	2b01      	cmp	r3, #1
 800deae:	d101      	bne.n	800deb4 <HAL_SPI_Receive+0x58>
 800deb0:	2302      	movs	r3, #2
 800deb2:	e241      	b.n	800e338 <HAL_SPI_Receive+0x4dc>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2204      	movs	r2, #4
 800dec0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	68ba      	ldr	r2, [r7, #8]
 800ded0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	88fa      	ldrh	r2, [r7, #6]
 800ded6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	88fa      	ldrh	r2, [r7, #6]
 800dede:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2200      	movs	r2, #0
 800dee6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2200      	movs	r2, #0
 800deec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2200      	movs	r2, #0
 800def4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2200      	movs	r2, #0
 800defc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2200      	movs	r2, #0
 800df02:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800df0c:	d108      	bne.n	800df20 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df1c:	601a      	str	r2, [r3, #0]
 800df1e:	e009      	b.n	800df34 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800df32:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	685a      	ldr	r2, [r3, #4]
 800df3a:	4b95      	ldr	r3, [pc, #596]	; (800e190 <HAL_SPI_Receive+0x334>)
 800df3c:	4013      	ands	r3, r2
 800df3e:	88f9      	ldrh	r1, [r7, #6]
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	6812      	ldr	r2, [r2, #0]
 800df44:	430b      	orrs	r3, r1
 800df46:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f042 0201 	orr.w	r2, r2, #1
 800df56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df60:	d107      	bne.n	800df72 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	2b0f      	cmp	r3, #15
 800df78:	d96c      	bls.n	800e054 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800df7a:	e064      	b.n	800e046 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	695b      	ldr	r3, [r3, #20]
 800df82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	695b      	ldr	r3, [r3, #20]
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d114      	bne.n	800dfbc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800df9c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfa2:	1d1a      	adds	r2, r3, #4
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	3b01      	subs	r3, #1
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfba:	e044      	b.n	800e046 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	8bfa      	ldrh	r2, [r7, #30]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d919      	bls.n	800dffe <HAL_SPI_Receive+0x1a2>
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d014      	beq.n	800dffe <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dfde:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfe4:	1d1a      	adds	r2, r3, #4
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	3b01      	subs	r3, #1
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dffc:	e023      	b.n	800e046 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dffe:	f7f5 fe35 	bl	8003c6c <HAL_GetTick>
 800e002:	4602      	mov	r2, r0
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	1ad3      	subs	r3, r2, r3
 800e008:	683a      	ldr	r2, [r7, #0]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d803      	bhi.n	800e016 <HAL_SPI_Receive+0x1ba>
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e014:	d102      	bne.n	800e01c <HAL_SPI_Receive+0x1c0>
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d114      	bne.n	800e046 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f000 f98f 	bl	800e340 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e028:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2201      	movs	r2, #1
 800e036:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e042:	2303      	movs	r3, #3
 800e044:	e178      	b.n	800e338 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d194      	bne.n	800df7c <HAL_SPI_Receive+0x120>
 800e052:	e15e      	b.n	800e312 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	2b07      	cmp	r3, #7
 800e05a:	f240 8153 	bls.w	800e304 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e05e:	e08f      	b.n	800e180 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	695b      	ldr	r3, [r3, #20]
 800e066:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	695b      	ldr	r3, [r3, #20]
 800e06e:	f003 0301 	and.w	r3, r3, #1
 800e072:	2b01      	cmp	r3, #1
 800e074:	d114      	bne.n	800e0a0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e07a:	69ba      	ldr	r2, [r7, #24]
 800e07c:	8812      	ldrh	r2, [r2, #0]
 800e07e:	b292      	uxth	r2, r2
 800e080:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e086:	1c9a      	adds	r2, r3, #2
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e092:	b29b      	uxth	r3, r3
 800e094:	3b01      	subs	r3, #1
 800e096:	b29a      	uxth	r2, r3
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e09e:	e06f      	b.n	800e180 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	8bfa      	ldrh	r2, [r7, #30]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d924      	bls.n	800e0f8 <HAL_SPI_Receive+0x29c>
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d01f      	beq.n	800e0f8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0bc:	69ba      	ldr	r2, [r7, #24]
 800e0be:	8812      	ldrh	r2, [r2, #0]
 800e0c0:	b292      	uxth	r2, r2
 800e0c2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0c8:	1c9a      	adds	r2, r3, #2
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0d2:	69ba      	ldr	r2, [r7, #24]
 800e0d4:	8812      	ldrh	r2, [r2, #0]
 800e0d6:	b292      	uxth	r2, r2
 800e0d8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0de:	1c9a      	adds	r2, r3, #2
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	3b02      	subs	r3, #2
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0f6:	e043      	b.n	800e180 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	2b01      	cmp	r3, #1
 800e102:	d119      	bne.n	800e138 <HAL_SPI_Receive+0x2dc>
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d014      	beq.n	800e138 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e112:	69ba      	ldr	r2, [r7, #24]
 800e114:	8812      	ldrh	r2, [r2, #0]
 800e116:	b292      	uxth	r2, r2
 800e118:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e11e:	1c9a      	adds	r2, r3, #2
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	3b01      	subs	r3, #1
 800e12e:	b29a      	uxth	r2, r3
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e136:	e023      	b.n	800e180 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e138:	f7f5 fd98 	bl	8003c6c <HAL_GetTick>
 800e13c:	4602      	mov	r2, r0
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	429a      	cmp	r2, r3
 800e146:	d803      	bhi.n	800e150 <HAL_SPI_Receive+0x2f4>
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e14e:	d102      	bne.n	800e156 <HAL_SPI_Receive+0x2fa>
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d114      	bne.n	800e180 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e156:	68f8      	ldr	r0, [r7, #12]
 800e158:	f000 f8f2 	bl	800e340 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e162:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2200      	movs	r2, #0
 800e178:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e17c:	2303      	movs	r3, #3
 800e17e:	e0db      	b.n	800e338 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e186:	b29b      	uxth	r3, r3
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f47f af69 	bne.w	800e060 <HAL_SPI_Receive+0x204>
 800e18e:	e0c0      	b.n	800e312 <HAL_SPI_Receive+0x4b6>
 800e190:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	695b      	ldr	r3, [r3, #20]
 800e19a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	695b      	ldr	r3, [r3, #20]
 800e1a2:	f003 0301 	and.w	r3, r3, #1
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d117      	bne.n	800e1da <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1b6:	7812      	ldrb	r2, [r2, #0]
 800e1b8:	b2d2      	uxtb	r2, r2
 800e1ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1c0:	1c5a      	adds	r2, r3, #1
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	b29a      	uxth	r2, r3
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1d8:	e094      	b.n	800e304 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	8bfa      	ldrh	r2, [r7, #30]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d946      	bls.n	800e276 <HAL_SPI_Receive+0x41a>
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d041      	beq.n	800e276 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1fe:	7812      	ldrb	r2, [r2, #0]
 800e200:	b2d2      	uxtb	r2, r2
 800e202:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e208:	1c5a      	adds	r2, r3, #1
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e21a:	7812      	ldrb	r2, [r2, #0]
 800e21c:	b2d2      	uxtb	r2, r2
 800e21e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e224:	1c5a      	adds	r2, r3, #1
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e236:	7812      	ldrb	r2, [r2, #0]
 800e238:	b2d2      	uxtb	r2, r2
 800e23a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e240:	1c5a      	adds	r2, r3, #1
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e252:	7812      	ldrb	r2, [r2, #0]
 800e254:	b2d2      	uxtb	r2, r2
 800e256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e268:	b29b      	uxth	r3, r3
 800e26a:	3b04      	subs	r3, #4
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e274:	e046      	b.n	800e304 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	2b03      	cmp	r3, #3
 800e280:	d81c      	bhi.n	800e2bc <HAL_SPI_Receive+0x460>
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d017      	beq.n	800e2bc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e298:	7812      	ldrb	r2, [r2, #0]
 800e29a:	b2d2      	uxtb	r2, r2
 800e29c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2ba:	e023      	b.n	800e304 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2bc:	f7f5 fcd6 	bl	8003c6c <HAL_GetTick>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d803      	bhi.n	800e2d4 <HAL_SPI_Receive+0x478>
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2d2:	d102      	bne.n	800e2da <HAL_SPI_Receive+0x47e>
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d114      	bne.n	800e304 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f000 f830 	bl	800e340 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e300:	2303      	movs	r3, #3
 800e302:	e019      	b.n	800e338 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f47f af41 	bne.w	800e194 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f000 f814 	bl	800e340 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2200      	movs	r2, #0
 800e324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d001      	beq.n	800e336 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e332:	2301      	movs	r3, #1
 800e334:	e000      	b.n	800e338 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e336:	2300      	movs	r3, #0
  }
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3720      	adds	r7, #32
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	695b      	ldr	r3, [r3, #20]
 800e34e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	699a      	ldr	r2, [r3, #24]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f042 0208 	orr.w	r2, r2, #8
 800e35e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	699a      	ldr	r2, [r3, #24]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f042 0210 	orr.w	r2, r2, #16
 800e36e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f022 0201 	bic.w	r2, r2, #1
 800e37e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	6919      	ldr	r1, [r3, #16]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	4b3c      	ldr	r3, [pc, #240]	; (800e47c <SPI_CloseTransfer+0x13c>)
 800e38c:	400b      	ands	r3, r1
 800e38e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	689a      	ldr	r2, [r3, #8]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e39e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b04      	cmp	r3, #4
 800e3aa:	d014      	beq.n	800e3d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f003 0320 	and.w	r3, r3, #32
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00f      	beq.n	800e3d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	699a      	ldr	r2, [r3, #24]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f042 0220 	orr.w	r2, r2, #32
 800e3d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b03      	cmp	r3, #3
 800e3e0:	d014      	beq.n	800e40c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d00f      	beq.n	800e40c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3f2:	f043 0204 	orr.w	r2, r3, #4
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	699a      	ldr	r2, [r3, #24]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e40a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00f      	beq.n	800e436 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e41c:	f043 0201 	orr.w	r2, r3, #1
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	699a      	ldr	r2, [r3, #24]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e434:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00f      	beq.n	800e460 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e446:	f043 0208 	orr.w	r2, r3, #8
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	699a      	ldr	r2, [r3, #24]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e45e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e470:	bf00      	nop
 800e472:	3714      	adds	r7, #20
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr
 800e47c:	fffffc90 	.word	0xfffffc90

0800e480 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e48c:	095b      	lsrs	r3, r3, #5
 800e48e:	3301      	adds	r3, #1
 800e490:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	3301      	adds	r3, #1
 800e498:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	3307      	adds	r3, #7
 800e49e:	08db      	lsrs	r3, r3, #3
 800e4a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	fb02 f303 	mul.w	r3, r2, r3
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3714      	adds	r7, #20
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b082      	sub	sp, #8
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d101      	bne.n	800e4c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e049      	b.n	800e55c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d106      	bne.n	800e4e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7f4 ff47 	bl	8003370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	3304      	adds	r3, #4
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	f000 fe7d 	bl	800f1f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2201      	movs	r2, #1
 800e506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2201      	movs	r2, #1
 800e50e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2201      	movs	r2, #1
 800e516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2201      	movs	r2, #1
 800e526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2201      	movs	r2, #1
 800e52e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2201      	movs	r2, #1
 800e536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2201      	movs	r2, #1
 800e53e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2201      	movs	r2, #1
 800e546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2201      	movs	r2, #1
 800e54e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e55a:	2300      	movs	r3, #0
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b01      	cmp	r3, #1
 800e576:	d001      	beq.n	800e57c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	e054      	b.n	800e626 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2202      	movs	r2, #2
 800e580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	68da      	ldr	r2, [r3, #12]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f042 0201 	orr.w	r2, r2, #1
 800e592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a26      	ldr	r2, [pc, #152]	; (800e634 <HAL_TIM_Base_Start_IT+0xd0>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d022      	beq.n	800e5e4 <HAL_TIM_Base_Start_IT+0x80>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5a6:	d01d      	beq.n	800e5e4 <HAL_TIM_Base_Start_IT+0x80>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a22      	ldr	r2, [pc, #136]	; (800e638 <HAL_TIM_Base_Start_IT+0xd4>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d018      	beq.n	800e5e4 <HAL_TIM_Base_Start_IT+0x80>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4a21      	ldr	r2, [pc, #132]	; (800e63c <HAL_TIM_Base_Start_IT+0xd8>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d013      	beq.n	800e5e4 <HAL_TIM_Base_Start_IT+0x80>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a1f      	ldr	r2, [pc, #124]	; (800e640 <HAL_TIM_Base_Start_IT+0xdc>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d00e      	beq.n	800e5e4 <HAL_TIM_Base_Start_IT+0x80>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4a1e      	ldr	r2, [pc, #120]	; (800e644 <HAL_TIM_Base_Start_IT+0xe0>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d009      	beq.n	800e5e4 <HAL_TIM_Base_Start_IT+0x80>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4a1c      	ldr	r2, [pc, #112]	; (800e648 <HAL_TIM_Base_Start_IT+0xe4>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d004      	beq.n	800e5e4 <HAL_TIM_Base_Start_IT+0x80>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4a1b      	ldr	r2, [pc, #108]	; (800e64c <HAL_TIM_Base_Start_IT+0xe8>)
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d115      	bne.n	800e610 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	689a      	ldr	r2, [r3, #8]
 800e5ea:	4b19      	ldr	r3, [pc, #100]	; (800e650 <HAL_TIM_Base_Start_IT+0xec>)
 800e5ec:	4013      	ands	r3, r2
 800e5ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2b06      	cmp	r3, #6
 800e5f4:	d015      	beq.n	800e622 <HAL_TIM_Base_Start_IT+0xbe>
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5fc:	d011      	beq.n	800e622 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f042 0201 	orr.w	r2, r2, #1
 800e60c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e60e:	e008      	b.n	800e622 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f042 0201 	orr.w	r2, r2, #1
 800e61e:	601a      	str	r2, [r3, #0]
 800e620:	e000      	b.n	800e624 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e622:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3714      	adds	r7, #20
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop
 800e634:	40010000 	.word	0x40010000
 800e638:	40000400 	.word	0x40000400
 800e63c:	40000800 	.word	0x40000800
 800e640:	40000c00 	.word	0x40000c00
 800e644:	40010400 	.word	0x40010400
 800e648:	40001800 	.word	0x40001800
 800e64c:	40014000 	.word	0x40014000
 800e650:	00010007 	.word	0x00010007

0800e654 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d109      	bne.n	800e67c <HAL_TIM_OC_Start_IT+0x28>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	2b01      	cmp	r3, #1
 800e672:	bf14      	ite	ne
 800e674:	2301      	movne	r3, #1
 800e676:	2300      	moveq	r3, #0
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	e03c      	b.n	800e6f6 <HAL_TIM_OC_Start_IT+0xa2>
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	2b04      	cmp	r3, #4
 800e680:	d109      	bne.n	800e696 <HAL_TIM_OC_Start_IT+0x42>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	bf14      	ite	ne
 800e68e:	2301      	movne	r3, #1
 800e690:	2300      	moveq	r3, #0
 800e692:	b2db      	uxtb	r3, r3
 800e694:	e02f      	b.n	800e6f6 <HAL_TIM_OC_Start_IT+0xa2>
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	2b08      	cmp	r3, #8
 800e69a:	d109      	bne.n	800e6b0 <HAL_TIM_OC_Start_IT+0x5c>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	bf14      	ite	ne
 800e6a8:	2301      	movne	r3, #1
 800e6aa:	2300      	moveq	r3, #0
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	e022      	b.n	800e6f6 <HAL_TIM_OC_Start_IT+0xa2>
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2b0c      	cmp	r3, #12
 800e6b4:	d109      	bne.n	800e6ca <HAL_TIM_OC_Start_IT+0x76>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	bf14      	ite	ne
 800e6c2:	2301      	movne	r3, #1
 800e6c4:	2300      	moveq	r3, #0
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	e015      	b.n	800e6f6 <HAL_TIM_OC_Start_IT+0xa2>
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	2b10      	cmp	r3, #16
 800e6ce:	d109      	bne.n	800e6e4 <HAL_TIM_OC_Start_IT+0x90>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	bf14      	ite	ne
 800e6dc:	2301      	movne	r3, #1
 800e6de:	2300      	moveq	r3, #0
 800e6e0:	b2db      	uxtb	r3, r3
 800e6e2:	e008      	b.n	800e6f6 <HAL_TIM_OC_Start_IT+0xa2>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	bf14      	ite	ne
 800e6f0:	2301      	movne	r3, #1
 800e6f2:	2300      	moveq	r3, #0
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d001      	beq.n	800e6fe <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e0ec      	b.n	800e8d8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d104      	bne.n	800e70e <HAL_TIM_OC_Start_IT+0xba>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2202      	movs	r2, #2
 800e708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e70c:	e023      	b.n	800e756 <HAL_TIM_OC_Start_IT+0x102>
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	2b04      	cmp	r3, #4
 800e712:	d104      	bne.n	800e71e <HAL_TIM_OC_Start_IT+0xca>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2202      	movs	r2, #2
 800e718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e71c:	e01b      	b.n	800e756 <HAL_TIM_OC_Start_IT+0x102>
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	2b08      	cmp	r3, #8
 800e722:	d104      	bne.n	800e72e <HAL_TIM_OC_Start_IT+0xda>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2202      	movs	r2, #2
 800e728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e72c:	e013      	b.n	800e756 <HAL_TIM_OC_Start_IT+0x102>
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	2b0c      	cmp	r3, #12
 800e732:	d104      	bne.n	800e73e <HAL_TIM_OC_Start_IT+0xea>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2202      	movs	r2, #2
 800e738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e73c:	e00b      	b.n	800e756 <HAL_TIM_OC_Start_IT+0x102>
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	2b10      	cmp	r3, #16
 800e742:	d104      	bne.n	800e74e <HAL_TIM_OC_Start_IT+0xfa>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2202      	movs	r2, #2
 800e748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e74c:	e003      	b.n	800e756 <HAL_TIM_OC_Start_IT+0x102>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2202      	movs	r2, #2
 800e752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	2b0c      	cmp	r3, #12
 800e75a:	d841      	bhi.n	800e7e0 <HAL_TIM_OC_Start_IT+0x18c>
 800e75c:	a201      	add	r2, pc, #4	; (adr r2, 800e764 <HAL_TIM_OC_Start_IT+0x110>)
 800e75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e762:	bf00      	nop
 800e764:	0800e799 	.word	0x0800e799
 800e768:	0800e7e1 	.word	0x0800e7e1
 800e76c:	0800e7e1 	.word	0x0800e7e1
 800e770:	0800e7e1 	.word	0x0800e7e1
 800e774:	0800e7ab 	.word	0x0800e7ab
 800e778:	0800e7e1 	.word	0x0800e7e1
 800e77c:	0800e7e1 	.word	0x0800e7e1
 800e780:	0800e7e1 	.word	0x0800e7e1
 800e784:	0800e7bd 	.word	0x0800e7bd
 800e788:	0800e7e1 	.word	0x0800e7e1
 800e78c:	0800e7e1 	.word	0x0800e7e1
 800e790:	0800e7e1 	.word	0x0800e7e1
 800e794:	0800e7cf 	.word	0x0800e7cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68da      	ldr	r2, [r3, #12]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f042 0202 	orr.w	r2, r2, #2
 800e7a6:	60da      	str	r2, [r3, #12]
      break;
 800e7a8:	e01d      	b.n	800e7e6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	68da      	ldr	r2, [r3, #12]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f042 0204 	orr.w	r2, r2, #4
 800e7b8:	60da      	str	r2, [r3, #12]
      break;
 800e7ba:	e014      	b.n	800e7e6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	68da      	ldr	r2, [r3, #12]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f042 0208 	orr.w	r2, r2, #8
 800e7ca:	60da      	str	r2, [r3, #12]
      break;
 800e7cc:	e00b      	b.n	800e7e6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	68da      	ldr	r2, [r3, #12]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f042 0210 	orr.w	r2, r2, #16
 800e7dc:	60da      	str	r2, [r3, #12]
      break;
 800e7de:	e002      	b.n	800e7e6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	73fb      	strb	r3, [r7, #15]
      break;
 800e7e4:	bf00      	nop
  }

  if (status == HAL_OK)
 800e7e6:	7bfb      	ldrb	r3, [r7, #15]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d174      	bne.n	800e8d6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	6839      	ldr	r1, [r7, #0]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f001 f917 	bl	800fa28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4a38      	ldr	r2, [pc, #224]	; (800e8e0 <HAL_TIM_OC_Start_IT+0x28c>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d013      	beq.n	800e82c <HAL_TIM_OC_Start_IT+0x1d8>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4a36      	ldr	r2, [pc, #216]	; (800e8e4 <HAL_TIM_OC_Start_IT+0x290>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d00e      	beq.n	800e82c <HAL_TIM_OC_Start_IT+0x1d8>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4a35      	ldr	r2, [pc, #212]	; (800e8e8 <HAL_TIM_OC_Start_IT+0x294>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d009      	beq.n	800e82c <HAL_TIM_OC_Start_IT+0x1d8>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a33      	ldr	r2, [pc, #204]	; (800e8ec <HAL_TIM_OC_Start_IT+0x298>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d004      	beq.n	800e82c <HAL_TIM_OC_Start_IT+0x1d8>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4a32      	ldr	r2, [pc, #200]	; (800e8f0 <HAL_TIM_OC_Start_IT+0x29c>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d101      	bne.n	800e830 <HAL_TIM_OC_Start_IT+0x1dc>
 800e82c:	2301      	movs	r3, #1
 800e82e:	e000      	b.n	800e832 <HAL_TIM_OC_Start_IT+0x1de>
 800e830:	2300      	movs	r3, #0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d007      	beq.n	800e846 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e844:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4a25      	ldr	r2, [pc, #148]	; (800e8e0 <HAL_TIM_OC_Start_IT+0x28c>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d022      	beq.n	800e896 <HAL_TIM_OC_Start_IT+0x242>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e858:	d01d      	beq.n	800e896 <HAL_TIM_OC_Start_IT+0x242>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4a25      	ldr	r2, [pc, #148]	; (800e8f4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d018      	beq.n	800e896 <HAL_TIM_OC_Start_IT+0x242>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4a23      	ldr	r2, [pc, #140]	; (800e8f8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d013      	beq.n	800e896 <HAL_TIM_OC_Start_IT+0x242>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	4a22      	ldr	r2, [pc, #136]	; (800e8fc <HAL_TIM_OC_Start_IT+0x2a8>)
 800e874:	4293      	cmp	r3, r2
 800e876:	d00e      	beq.n	800e896 <HAL_TIM_OC_Start_IT+0x242>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a19      	ldr	r2, [pc, #100]	; (800e8e4 <HAL_TIM_OC_Start_IT+0x290>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d009      	beq.n	800e896 <HAL_TIM_OC_Start_IT+0x242>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a1e      	ldr	r2, [pc, #120]	; (800e900 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d004      	beq.n	800e896 <HAL_TIM_OC_Start_IT+0x242>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a15      	ldr	r2, [pc, #84]	; (800e8e8 <HAL_TIM_OC_Start_IT+0x294>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d115      	bne.n	800e8c2 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	689a      	ldr	r2, [r3, #8]
 800e89c:	4b19      	ldr	r3, [pc, #100]	; (800e904 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e89e:	4013      	ands	r3, r2
 800e8a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	2b06      	cmp	r3, #6
 800e8a6:	d015      	beq.n	800e8d4 <HAL_TIM_OC_Start_IT+0x280>
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8ae:	d011      	beq.n	800e8d4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f042 0201 	orr.w	r2, r2, #1
 800e8be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8c0:	e008      	b.n	800e8d4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f042 0201 	orr.w	r2, r2, #1
 800e8d0:	601a      	str	r2, [r3, #0]
 800e8d2:	e000      	b.n	800e8d6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8d4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	40010000 	.word	0x40010000
 800e8e4:	40010400 	.word	0x40010400
 800e8e8:	40014000 	.word	0x40014000
 800e8ec:	40014400 	.word	0x40014400
 800e8f0:	40014800 	.word	0x40014800
 800e8f4:	40000400 	.word	0x40000400
 800e8f8:	40000800 	.word	0x40000800
 800e8fc:	40000c00 	.word	0x40000c00
 800e900:	40001800 	.word	0x40001800
 800e904:	00010007 	.word	0x00010007

0800e908 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e912:	2300      	movs	r3, #0
 800e914:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2b0c      	cmp	r3, #12
 800e91a:	d841      	bhi.n	800e9a0 <HAL_TIM_OC_Stop_IT+0x98>
 800e91c:	a201      	add	r2, pc, #4	; (adr r2, 800e924 <HAL_TIM_OC_Stop_IT+0x1c>)
 800e91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e922:	bf00      	nop
 800e924:	0800e959 	.word	0x0800e959
 800e928:	0800e9a1 	.word	0x0800e9a1
 800e92c:	0800e9a1 	.word	0x0800e9a1
 800e930:	0800e9a1 	.word	0x0800e9a1
 800e934:	0800e96b 	.word	0x0800e96b
 800e938:	0800e9a1 	.word	0x0800e9a1
 800e93c:	0800e9a1 	.word	0x0800e9a1
 800e940:	0800e9a1 	.word	0x0800e9a1
 800e944:	0800e97d 	.word	0x0800e97d
 800e948:	0800e9a1 	.word	0x0800e9a1
 800e94c:	0800e9a1 	.word	0x0800e9a1
 800e950:	0800e9a1 	.word	0x0800e9a1
 800e954:	0800e98f 	.word	0x0800e98f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	68da      	ldr	r2, [r3, #12]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f022 0202 	bic.w	r2, r2, #2
 800e966:	60da      	str	r2, [r3, #12]
      break;
 800e968:	e01d      	b.n	800e9a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	68da      	ldr	r2, [r3, #12]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f022 0204 	bic.w	r2, r2, #4
 800e978:	60da      	str	r2, [r3, #12]
      break;
 800e97a:	e014      	b.n	800e9a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68da      	ldr	r2, [r3, #12]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f022 0208 	bic.w	r2, r2, #8
 800e98a:	60da      	str	r2, [r3, #12]
      break;
 800e98c:	e00b      	b.n	800e9a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	68da      	ldr	r2, [r3, #12]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f022 0210 	bic.w	r2, r2, #16
 800e99c:	60da      	str	r2, [r3, #12]
      break;
 800e99e:	e002      	b.n	800e9a6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e9a4:	bf00      	nop
  }

  if (status == HAL_OK)
 800e9a6:	7bfb      	ldrb	r3, [r7, #15]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f040 8081 	bne.w	800eab0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	6839      	ldr	r1, [r7, #0]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f001 f836 	bl	800fa28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a3e      	ldr	r2, [pc, #248]	; (800eabc <HAL_TIM_OC_Stop_IT+0x1b4>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d013      	beq.n	800e9ee <HAL_TIM_OC_Stop_IT+0xe6>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a3d      	ldr	r2, [pc, #244]	; (800eac0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d00e      	beq.n	800e9ee <HAL_TIM_OC_Stop_IT+0xe6>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a3b      	ldr	r2, [pc, #236]	; (800eac4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d009      	beq.n	800e9ee <HAL_TIM_OC_Stop_IT+0xe6>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4a3a      	ldr	r2, [pc, #232]	; (800eac8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d004      	beq.n	800e9ee <HAL_TIM_OC_Stop_IT+0xe6>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a38      	ldr	r2, [pc, #224]	; (800eacc <HAL_TIM_OC_Stop_IT+0x1c4>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d101      	bne.n	800e9f2 <HAL_TIM_OC_Stop_IT+0xea>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e000      	b.n	800e9f4 <HAL_TIM_OC_Stop_IT+0xec>
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d017      	beq.n	800ea28 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6a1a      	ldr	r2, [r3, #32]
 800e9fe:	f241 1311 	movw	r3, #4369	; 0x1111
 800ea02:	4013      	ands	r3, r2
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10f      	bne.n	800ea28 <HAL_TIM_OC_Stop_IT+0x120>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	6a1a      	ldr	r2, [r3, #32]
 800ea0e:	f240 4344 	movw	r3, #1092	; 0x444
 800ea12:	4013      	ands	r3, r2
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d107      	bne.n	800ea28 <HAL_TIM_OC_Stop_IT+0x120>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ea26:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6a1a      	ldr	r2, [r3, #32]
 800ea2e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ea32:	4013      	ands	r3, r2
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d10f      	bne.n	800ea58 <HAL_TIM_OC_Stop_IT+0x150>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6a1a      	ldr	r2, [r3, #32]
 800ea3e:	f240 4344 	movw	r3, #1092	; 0x444
 800ea42:	4013      	ands	r3, r2
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d107      	bne.n	800ea58 <HAL_TIM_OC_Stop_IT+0x150>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f022 0201 	bic.w	r2, r2, #1
 800ea56:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d104      	bne.n	800ea68 <HAL_TIM_OC_Stop_IT+0x160>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2201      	movs	r2, #1
 800ea62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea66:	e023      	b.n	800eab0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	2b04      	cmp	r3, #4
 800ea6c:	d104      	bne.n	800ea78 <HAL_TIM_OC_Stop_IT+0x170>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2201      	movs	r2, #1
 800ea72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ea76:	e01b      	b.n	800eab0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	2b08      	cmp	r3, #8
 800ea7c:	d104      	bne.n	800ea88 <HAL_TIM_OC_Stop_IT+0x180>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea86:	e013      	b.n	800eab0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	2b0c      	cmp	r3, #12
 800ea8c:	d104      	bne.n	800ea98 <HAL_TIM_OC_Stop_IT+0x190>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2201      	movs	r2, #1
 800ea92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea96:	e00b      	b.n	800eab0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2b10      	cmp	r3, #16
 800ea9c:	d104      	bne.n	800eaa8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eaa6:	e003      	b.n	800eab0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800eab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	40010000 	.word	0x40010000
 800eac0:	40010400 	.word	0x40010400
 800eac4:	40014000 	.word	0x40014000
 800eac8:	40014400 	.word	0x40014400
 800eacc:	40014800 	.word	0x40014800

0800ead0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d101      	bne.n	800eae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	e049      	b.n	800eb76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d106      	bne.n	800eafc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 f841 	bl	800eb7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2202      	movs	r2, #2
 800eb00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	3304      	adds	r3, #4
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	4610      	mov	r0, r2
 800eb10:	f000 fb70 	bl	800f1f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2201      	movs	r2, #1
 800eb28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2201      	movs	r2, #1
 800eb48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2201      	movs	r2, #1
 800eb58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2201      	movs	r2, #1
 800eb68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800eb7e:	b480      	push	{r7}
 800eb80:	b083      	sub	sp, #12
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800eb86:	bf00      	nop
 800eb88:	370c      	adds	r7, #12
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b084      	sub	sp, #16
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	691b      	ldr	r3, [r3, #16]
 800eba8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	f003 0302 	and.w	r3, r3, #2
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d020      	beq.n	800ebf6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f003 0302 	and.w	r3, r3, #2
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d01b      	beq.n	800ebf6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f06f 0202 	mvn.w	r2, #2
 800ebc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	699b      	ldr	r3, [r3, #24]
 800ebd4:	f003 0303 	and.w	r3, r3, #3
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d003      	beq.n	800ebe4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 faeb 	bl	800f1b8 <HAL_TIM_IC_CaptureCallback>
 800ebe2:	e005      	b.n	800ebf0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7f1 fd0b 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 faee 	bl	800f1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	f003 0304 	and.w	r3, r3, #4
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d020      	beq.n	800ec42 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f003 0304 	and.w	r3, r3, #4
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d01b      	beq.n	800ec42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f06f 0204 	mvn.w	r2, #4
 800ec12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2202      	movs	r2, #2
 800ec18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	699b      	ldr	r3, [r3, #24]
 800ec20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d003      	beq.n	800ec30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 fac5 	bl	800f1b8 <HAL_TIM_IC_CaptureCallback>
 800ec2e:	e005      	b.n	800ec3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f7f1 fce5 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 fac8 	bl	800f1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	f003 0308 	and.w	r3, r3, #8
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d020      	beq.n	800ec8e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f003 0308 	and.w	r3, r3, #8
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d01b      	beq.n	800ec8e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f06f 0208 	mvn.w	r2, #8
 800ec5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2204      	movs	r2, #4
 800ec64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	69db      	ldr	r3, [r3, #28]
 800ec6c:	f003 0303 	and.w	r3, r3, #3
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d003      	beq.n	800ec7c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 fa9f 	bl	800f1b8 <HAL_TIM_IC_CaptureCallback>
 800ec7a:	e005      	b.n	800ec88 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f7f1 fcbf 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 faa2 	bl	800f1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	f003 0310 	and.w	r3, r3, #16
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d020      	beq.n	800ecda <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f003 0310 	and.w	r3, r3, #16
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d01b      	beq.n	800ecda <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f06f 0210 	mvn.w	r2, #16
 800ecaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2208      	movs	r2, #8
 800ecb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	69db      	ldr	r3, [r3, #28]
 800ecb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d003      	beq.n	800ecc8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 fa79 	bl	800f1b8 <HAL_TIM_IC_CaptureCallback>
 800ecc6:	e005      	b.n	800ecd4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f7f1 fc99 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 fa7c 	bl	800f1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	f003 0301 	and.w	r3, r3, #1
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00c      	beq.n	800ecfe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f003 0301 	and.w	r3, r3, #1
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d007      	beq.n	800ecfe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f06f 0201 	mvn.w	r2, #1
 800ecf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7f4 f813 	bl	8002d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d104      	bne.n	800ed12 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d00c      	beq.n	800ed2c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d007      	beq.n	800ed2c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ed24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 ffba 	bl	800fca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d00c      	beq.n	800ed50 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d007      	beq.n	800ed50 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ed48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f000 ffb2 	bl	800fcb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00c      	beq.n	800ed74 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d007      	beq.n	800ed74 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 fa36 	bl	800f1e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	f003 0320 	and.w	r3, r3, #32
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00c      	beq.n	800ed98 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f003 0320 	and.w	r3, r3, #32
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d007      	beq.n	800ed98 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f06f 0220 	mvn.w	r2, #32
 800ed90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 ff7a 	bl	800fc8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed98:	bf00      	nop
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b086      	sub	sp, #24
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800edac:	2300      	movs	r3, #0
 800edae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d101      	bne.n	800edbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800edba:	2302      	movs	r3, #2
 800edbc:	e0ff      	b.n	800efbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2201      	movs	r2, #1
 800edc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b14      	cmp	r3, #20
 800edca:	f200 80f0 	bhi.w	800efae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800edce:	a201      	add	r2, pc, #4	; (adr r2, 800edd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800edd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd4:	0800ee29 	.word	0x0800ee29
 800edd8:	0800efaf 	.word	0x0800efaf
 800eddc:	0800efaf 	.word	0x0800efaf
 800ede0:	0800efaf 	.word	0x0800efaf
 800ede4:	0800ee69 	.word	0x0800ee69
 800ede8:	0800efaf 	.word	0x0800efaf
 800edec:	0800efaf 	.word	0x0800efaf
 800edf0:	0800efaf 	.word	0x0800efaf
 800edf4:	0800eeab 	.word	0x0800eeab
 800edf8:	0800efaf 	.word	0x0800efaf
 800edfc:	0800efaf 	.word	0x0800efaf
 800ee00:	0800efaf 	.word	0x0800efaf
 800ee04:	0800eeeb 	.word	0x0800eeeb
 800ee08:	0800efaf 	.word	0x0800efaf
 800ee0c:	0800efaf 	.word	0x0800efaf
 800ee10:	0800efaf 	.word	0x0800efaf
 800ee14:	0800ef2d 	.word	0x0800ef2d
 800ee18:	0800efaf 	.word	0x0800efaf
 800ee1c:	0800efaf 	.word	0x0800efaf
 800ee20:	0800efaf 	.word	0x0800efaf
 800ee24:	0800ef6d 	.word	0x0800ef6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	68b9      	ldr	r1, [r7, #8]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f000 fa86 	bl	800f340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	699a      	ldr	r2, [r3, #24]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f042 0208 	orr.w	r2, r2, #8
 800ee42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	699a      	ldr	r2, [r3, #24]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f022 0204 	bic.w	r2, r2, #4
 800ee52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6999      	ldr	r1, [r3, #24]
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	691a      	ldr	r2, [r3, #16]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	430a      	orrs	r2, r1
 800ee64:	619a      	str	r2, [r3, #24]
      break;
 800ee66:	e0a5      	b.n	800efb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	68b9      	ldr	r1, [r7, #8]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f000 faf6 	bl	800f460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	699a      	ldr	r2, [r3, #24]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	699a      	ldr	r2, [r3, #24]
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	6999      	ldr	r1, [r3, #24]
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	691b      	ldr	r3, [r3, #16]
 800ee9e:	021a      	lsls	r2, r3, #8
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	430a      	orrs	r2, r1
 800eea6:	619a      	str	r2, [r3, #24]
      break;
 800eea8:	e084      	b.n	800efb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	68b9      	ldr	r1, [r7, #8]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f000 fb5f 	bl	800f574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	69da      	ldr	r2, [r3, #28]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f042 0208 	orr.w	r2, r2, #8
 800eec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	69da      	ldr	r2, [r3, #28]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f022 0204 	bic.w	r2, r2, #4
 800eed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	69d9      	ldr	r1, [r3, #28]
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	691a      	ldr	r2, [r3, #16]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	430a      	orrs	r2, r1
 800eee6:	61da      	str	r2, [r3, #28]
      break;
 800eee8:	e064      	b.n	800efb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	68b9      	ldr	r1, [r7, #8]
 800eef0:	4618      	mov	r0, r3
 800eef2:	f000 fbc7 	bl	800f684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	69da      	ldr	r2, [r3, #28]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	69da      	ldr	r2, [r3, #28]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	69d9      	ldr	r1, [r3, #28]
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	691b      	ldr	r3, [r3, #16]
 800ef20:	021a      	lsls	r2, r3, #8
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	430a      	orrs	r2, r1
 800ef28:	61da      	str	r2, [r3, #28]
      break;
 800ef2a:	e043      	b.n	800efb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68b9      	ldr	r1, [r7, #8]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f000 fc10 	bl	800f758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f042 0208 	orr.w	r2, r2, #8
 800ef46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f022 0204 	bic.w	r2, r2, #4
 800ef56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	691a      	ldr	r2, [r3, #16]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	430a      	orrs	r2, r1
 800ef68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ef6a:	e023      	b.n	800efb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68b9      	ldr	r1, [r7, #8]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f000 fc54 	bl	800f820 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	691b      	ldr	r3, [r3, #16]
 800efa2:	021a      	lsls	r2, r3, #8
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	430a      	orrs	r2, r1
 800efaa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800efac:	e002      	b.n	800efb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800efae:	2301      	movs	r3, #1
 800efb0:	75fb      	strb	r3, [r7, #23]
      break;
 800efb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2200      	movs	r2, #0
 800efb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800efbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3718      	adds	r7, #24
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
 800efc6:	bf00      	nop

0800efc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800efd2:	2300      	movs	r3, #0
 800efd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d101      	bne.n	800efe4 <HAL_TIM_ConfigClockSource+0x1c>
 800efe0:	2302      	movs	r3, #2
 800efe2:	e0dc      	b.n	800f19e <HAL_TIM_ConfigClockSource+0x1d6>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2201      	movs	r2, #1
 800efe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2202      	movs	r2, #2
 800eff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	689b      	ldr	r3, [r3, #8]
 800effa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800effc:	68ba      	ldr	r2, [r7, #8]
 800effe:	4b6a      	ldr	r3, [pc, #424]	; (800f1a8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f000:	4013      	ands	r3, r2
 800f002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f00a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	68ba      	ldr	r2, [r7, #8]
 800f012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a64      	ldr	r2, [pc, #400]	; (800f1ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	f000 80a9 	beq.w	800f172 <HAL_TIM_ConfigClockSource+0x1aa>
 800f020:	4a62      	ldr	r2, [pc, #392]	; (800f1ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800f022:	4293      	cmp	r3, r2
 800f024:	f200 80ae 	bhi.w	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f028:	4a61      	ldr	r2, [pc, #388]	; (800f1b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	f000 80a1 	beq.w	800f172 <HAL_TIM_ConfigClockSource+0x1aa>
 800f030:	4a5f      	ldr	r2, [pc, #380]	; (800f1b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f032:	4293      	cmp	r3, r2
 800f034:	f200 80a6 	bhi.w	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f038:	4a5e      	ldr	r2, [pc, #376]	; (800f1b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	f000 8099 	beq.w	800f172 <HAL_TIM_ConfigClockSource+0x1aa>
 800f040:	4a5c      	ldr	r2, [pc, #368]	; (800f1b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f042:	4293      	cmp	r3, r2
 800f044:	f200 809e 	bhi.w	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f048:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f04c:	f000 8091 	beq.w	800f172 <HAL_TIM_ConfigClockSource+0x1aa>
 800f050:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f054:	f200 8096 	bhi.w	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f05c:	f000 8089 	beq.w	800f172 <HAL_TIM_ConfigClockSource+0x1aa>
 800f060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f064:	f200 808e 	bhi.w	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f06c:	d03e      	beq.n	800f0ec <HAL_TIM_ConfigClockSource+0x124>
 800f06e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f072:	f200 8087 	bhi.w	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f07a:	f000 8086 	beq.w	800f18a <HAL_TIM_ConfigClockSource+0x1c2>
 800f07e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f082:	d87f      	bhi.n	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f084:	2b70      	cmp	r3, #112	; 0x70
 800f086:	d01a      	beq.n	800f0be <HAL_TIM_ConfigClockSource+0xf6>
 800f088:	2b70      	cmp	r3, #112	; 0x70
 800f08a:	d87b      	bhi.n	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f08c:	2b60      	cmp	r3, #96	; 0x60
 800f08e:	d050      	beq.n	800f132 <HAL_TIM_ConfigClockSource+0x16a>
 800f090:	2b60      	cmp	r3, #96	; 0x60
 800f092:	d877      	bhi.n	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f094:	2b50      	cmp	r3, #80	; 0x50
 800f096:	d03c      	beq.n	800f112 <HAL_TIM_ConfigClockSource+0x14a>
 800f098:	2b50      	cmp	r3, #80	; 0x50
 800f09a:	d873      	bhi.n	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f09c:	2b40      	cmp	r3, #64	; 0x40
 800f09e:	d058      	beq.n	800f152 <HAL_TIM_ConfigClockSource+0x18a>
 800f0a0:	2b40      	cmp	r3, #64	; 0x40
 800f0a2:	d86f      	bhi.n	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0a4:	2b30      	cmp	r3, #48	; 0x30
 800f0a6:	d064      	beq.n	800f172 <HAL_TIM_ConfigClockSource+0x1aa>
 800f0a8:	2b30      	cmp	r3, #48	; 0x30
 800f0aa:	d86b      	bhi.n	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0ac:	2b20      	cmp	r3, #32
 800f0ae:	d060      	beq.n	800f172 <HAL_TIM_ConfigClockSource+0x1aa>
 800f0b0:	2b20      	cmp	r3, #32
 800f0b2:	d867      	bhi.n	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d05c      	beq.n	800f172 <HAL_TIM_ConfigClockSource+0x1aa>
 800f0b8:	2b10      	cmp	r3, #16
 800f0ba:	d05a      	beq.n	800f172 <HAL_TIM_ConfigClockSource+0x1aa>
 800f0bc:	e062      	b.n	800f184 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6818      	ldr	r0, [r3, #0]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	6899      	ldr	r1, [r3, #8]
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	685a      	ldr	r2, [r3, #4]
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	f000 fc8b 	bl	800f9e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f0e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	68ba      	ldr	r2, [r7, #8]
 800f0e8:	609a      	str	r2, [r3, #8]
      break;
 800f0ea:	e04f      	b.n	800f18c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6818      	ldr	r0, [r3, #0]
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	6899      	ldr	r1, [r3, #8]
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	685a      	ldr	r2, [r3, #4]
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	f000 fc74 	bl	800f9e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	689a      	ldr	r2, [r3, #8]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f10e:	609a      	str	r2, [r3, #8]
      break;
 800f110:	e03c      	b.n	800f18c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6818      	ldr	r0, [r3, #0]
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	6859      	ldr	r1, [r3, #4]
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	461a      	mov	r2, r3
 800f120:	f000 fbe4 	bl	800f8ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2150      	movs	r1, #80	; 0x50
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 fc3e 	bl	800f9ac <TIM_ITRx_SetConfig>
      break;
 800f130:	e02c      	b.n	800f18c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6818      	ldr	r0, [r3, #0]
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	6859      	ldr	r1, [r3, #4]
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	461a      	mov	r2, r3
 800f140:	f000 fc03 	bl	800f94a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2160      	movs	r1, #96	; 0x60
 800f14a:	4618      	mov	r0, r3
 800f14c:	f000 fc2e 	bl	800f9ac <TIM_ITRx_SetConfig>
      break;
 800f150:	e01c      	b.n	800f18c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6818      	ldr	r0, [r3, #0]
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	6859      	ldr	r1, [r3, #4]
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	461a      	mov	r2, r3
 800f160:	f000 fbc4 	bl	800f8ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2140      	movs	r1, #64	; 0x40
 800f16a:	4618      	mov	r0, r3
 800f16c:	f000 fc1e 	bl	800f9ac <TIM_ITRx_SetConfig>
      break;
 800f170:	e00c      	b.n	800f18c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4619      	mov	r1, r3
 800f17c:	4610      	mov	r0, r2
 800f17e:	f000 fc15 	bl	800f9ac <TIM_ITRx_SetConfig>
      break;
 800f182:	e003      	b.n	800f18c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f184:	2301      	movs	r3, #1
 800f186:	73fb      	strb	r3, [r7, #15]
      break;
 800f188:	e000      	b.n	800f18c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f18a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2201      	movs	r2, #1
 800f190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	ffceff88 	.word	0xffceff88
 800f1ac:	00100040 	.word	0x00100040
 800f1b0:	00100030 	.word	0x00100030
 800f1b4:	00100020 	.word	0x00100020

0800f1b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f1c0:	bf00      	nop
 800f1c2:	370c      	adds	r7, #12
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ca:	4770      	bx	lr

0800f1cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f1d4:	bf00      	nop
 800f1d6:	370c      	adds	r7, #12
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr

0800f1e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f1e8:	bf00      	nop
 800f1ea:	370c      	adds	r7, #12
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4a46      	ldr	r2, [pc, #280]	; (800f320 <TIM_Base_SetConfig+0x12c>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d013      	beq.n	800f234 <TIM_Base_SetConfig+0x40>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f212:	d00f      	beq.n	800f234 <TIM_Base_SetConfig+0x40>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a43      	ldr	r2, [pc, #268]	; (800f324 <TIM_Base_SetConfig+0x130>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d00b      	beq.n	800f234 <TIM_Base_SetConfig+0x40>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4a42      	ldr	r2, [pc, #264]	; (800f328 <TIM_Base_SetConfig+0x134>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d007      	beq.n	800f234 <TIM_Base_SetConfig+0x40>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4a41      	ldr	r2, [pc, #260]	; (800f32c <TIM_Base_SetConfig+0x138>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d003      	beq.n	800f234 <TIM_Base_SetConfig+0x40>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4a40      	ldr	r2, [pc, #256]	; (800f330 <TIM_Base_SetConfig+0x13c>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d108      	bne.n	800f246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f23a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	4313      	orrs	r3, r2
 800f244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4a35      	ldr	r2, [pc, #212]	; (800f320 <TIM_Base_SetConfig+0x12c>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d01f      	beq.n	800f28e <TIM_Base_SetConfig+0x9a>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f254:	d01b      	beq.n	800f28e <TIM_Base_SetConfig+0x9a>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	4a32      	ldr	r2, [pc, #200]	; (800f324 <TIM_Base_SetConfig+0x130>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d017      	beq.n	800f28e <TIM_Base_SetConfig+0x9a>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4a31      	ldr	r2, [pc, #196]	; (800f328 <TIM_Base_SetConfig+0x134>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d013      	beq.n	800f28e <TIM_Base_SetConfig+0x9a>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4a30      	ldr	r2, [pc, #192]	; (800f32c <TIM_Base_SetConfig+0x138>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d00f      	beq.n	800f28e <TIM_Base_SetConfig+0x9a>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4a2f      	ldr	r2, [pc, #188]	; (800f330 <TIM_Base_SetConfig+0x13c>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d00b      	beq.n	800f28e <TIM_Base_SetConfig+0x9a>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4a2e      	ldr	r2, [pc, #184]	; (800f334 <TIM_Base_SetConfig+0x140>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d007      	beq.n	800f28e <TIM_Base_SetConfig+0x9a>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	4a2d      	ldr	r2, [pc, #180]	; (800f338 <TIM_Base_SetConfig+0x144>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d003      	beq.n	800f28e <TIM_Base_SetConfig+0x9a>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	4a2c      	ldr	r2, [pc, #176]	; (800f33c <TIM_Base_SetConfig+0x148>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d108      	bne.n	800f2a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	68fa      	ldr	r2, [r7, #12]
 800f29c:	4313      	orrs	r3, r2
 800f29e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	695b      	ldr	r3, [r3, #20]
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68fa      	ldr	r2, [r7, #12]
 800f2b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	689a      	ldr	r2, [r3, #8]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a16      	ldr	r2, [pc, #88]	; (800f320 <TIM_Base_SetConfig+0x12c>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d00f      	beq.n	800f2ec <TIM_Base_SetConfig+0xf8>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4a18      	ldr	r2, [pc, #96]	; (800f330 <TIM_Base_SetConfig+0x13c>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d00b      	beq.n	800f2ec <TIM_Base_SetConfig+0xf8>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a17      	ldr	r2, [pc, #92]	; (800f334 <TIM_Base_SetConfig+0x140>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d007      	beq.n	800f2ec <TIM_Base_SetConfig+0xf8>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	4a16      	ldr	r2, [pc, #88]	; (800f338 <TIM_Base_SetConfig+0x144>)
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d003      	beq.n	800f2ec <TIM_Base_SetConfig+0xf8>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4a15      	ldr	r2, [pc, #84]	; (800f33c <TIM_Base_SetConfig+0x148>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d103      	bne.n	800f2f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	691a      	ldr	r2, [r3, #16]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	691b      	ldr	r3, [r3, #16]
 800f2fe:	f003 0301 	and.w	r3, r3, #1
 800f302:	2b01      	cmp	r3, #1
 800f304:	d105      	bne.n	800f312 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	691b      	ldr	r3, [r3, #16]
 800f30a:	f023 0201 	bic.w	r2, r3, #1
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	611a      	str	r2, [r3, #16]
  }
}
 800f312:	bf00      	nop
 800f314:	3714      	adds	r7, #20
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop
 800f320:	40010000 	.word	0x40010000
 800f324:	40000400 	.word	0x40000400
 800f328:	40000800 	.word	0x40000800
 800f32c:	40000c00 	.word	0x40000c00
 800f330:	40010400 	.word	0x40010400
 800f334:	40014000 	.word	0x40014000
 800f338:	40014400 	.word	0x40014400
 800f33c:	40014800 	.word	0x40014800

0800f340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f340:	b480      	push	{r7}
 800f342:	b087      	sub	sp, #28
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6a1b      	ldr	r3, [r3, #32]
 800f34e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6a1b      	ldr	r3, [r3, #32]
 800f354:	f023 0201 	bic.w	r2, r3, #1
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	699b      	ldr	r3, [r3, #24]
 800f366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	4b37      	ldr	r3, [pc, #220]	; (800f448 <TIM_OC1_SetConfig+0x108>)
 800f36c:	4013      	ands	r3, r2
 800f36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f023 0303 	bic.w	r3, r3, #3
 800f376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	4313      	orrs	r3, r2
 800f380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	f023 0302 	bic.w	r3, r3, #2
 800f388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	697a      	ldr	r2, [r7, #20]
 800f390:	4313      	orrs	r3, r2
 800f392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4a2d      	ldr	r2, [pc, #180]	; (800f44c <TIM_OC1_SetConfig+0x10c>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d00f      	beq.n	800f3bc <TIM_OC1_SetConfig+0x7c>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a2c      	ldr	r2, [pc, #176]	; (800f450 <TIM_OC1_SetConfig+0x110>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d00b      	beq.n	800f3bc <TIM_OC1_SetConfig+0x7c>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a2b      	ldr	r2, [pc, #172]	; (800f454 <TIM_OC1_SetConfig+0x114>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d007      	beq.n	800f3bc <TIM_OC1_SetConfig+0x7c>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	4a2a      	ldr	r2, [pc, #168]	; (800f458 <TIM_OC1_SetConfig+0x118>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d003      	beq.n	800f3bc <TIM_OC1_SetConfig+0x7c>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	4a29      	ldr	r2, [pc, #164]	; (800f45c <TIM_OC1_SetConfig+0x11c>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d10c      	bne.n	800f3d6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	f023 0308 	bic.w	r3, r3, #8
 800f3c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	697a      	ldr	r2, [r7, #20]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	f023 0304 	bic.w	r3, r3, #4
 800f3d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a1c      	ldr	r2, [pc, #112]	; (800f44c <TIM_OC1_SetConfig+0x10c>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d00f      	beq.n	800f3fe <TIM_OC1_SetConfig+0xbe>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4a1b      	ldr	r2, [pc, #108]	; (800f450 <TIM_OC1_SetConfig+0x110>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d00b      	beq.n	800f3fe <TIM_OC1_SetConfig+0xbe>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4a1a      	ldr	r2, [pc, #104]	; (800f454 <TIM_OC1_SetConfig+0x114>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d007      	beq.n	800f3fe <TIM_OC1_SetConfig+0xbe>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4a19      	ldr	r2, [pc, #100]	; (800f458 <TIM_OC1_SetConfig+0x118>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d003      	beq.n	800f3fe <TIM_OC1_SetConfig+0xbe>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	4a18      	ldr	r2, [pc, #96]	; (800f45c <TIM_OC1_SetConfig+0x11c>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d111      	bne.n	800f422 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f40c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	693a      	ldr	r2, [r7, #16]
 800f414:	4313      	orrs	r3, r2
 800f416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	699b      	ldr	r3, [r3, #24]
 800f41c:	693a      	ldr	r2, [r7, #16]
 800f41e:	4313      	orrs	r3, r2
 800f420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	693a      	ldr	r2, [r7, #16]
 800f426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	685a      	ldr	r2, [r3, #4]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	697a      	ldr	r2, [r7, #20]
 800f43a:	621a      	str	r2, [r3, #32]
}
 800f43c:	bf00      	nop
 800f43e:	371c      	adds	r7, #28
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr
 800f448:	fffeff8f 	.word	0xfffeff8f
 800f44c:	40010000 	.word	0x40010000
 800f450:	40010400 	.word	0x40010400
 800f454:	40014000 	.word	0x40014000
 800f458:	40014400 	.word	0x40014400
 800f45c:	40014800 	.word	0x40014800

0800f460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f460:	b480      	push	{r7}
 800f462:	b087      	sub	sp, #28
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a1b      	ldr	r3, [r3, #32]
 800f46e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6a1b      	ldr	r3, [r3, #32]
 800f474:	f023 0210 	bic.w	r2, r3, #16
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	699b      	ldr	r3, [r3, #24]
 800f486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	4b34      	ldr	r3, [pc, #208]	; (800f55c <TIM_OC2_SetConfig+0xfc>)
 800f48c:	4013      	ands	r3, r2
 800f48e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	021b      	lsls	r3, r3, #8
 800f49e:	68fa      	ldr	r2, [r7, #12]
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	f023 0320 	bic.w	r3, r3, #32
 800f4aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	011b      	lsls	r3, r3, #4
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a29      	ldr	r2, [pc, #164]	; (800f560 <TIM_OC2_SetConfig+0x100>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d003      	beq.n	800f4c8 <TIM_OC2_SetConfig+0x68>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a28      	ldr	r2, [pc, #160]	; (800f564 <TIM_OC2_SetConfig+0x104>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d10d      	bne.n	800f4e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	011b      	lsls	r3, r3, #4
 800f4d6:	697a      	ldr	r2, [r7, #20]
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	4a1e      	ldr	r2, [pc, #120]	; (800f560 <TIM_OC2_SetConfig+0x100>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d00f      	beq.n	800f50c <TIM_OC2_SetConfig+0xac>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a1d      	ldr	r2, [pc, #116]	; (800f564 <TIM_OC2_SetConfig+0x104>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d00b      	beq.n	800f50c <TIM_OC2_SetConfig+0xac>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4a1c      	ldr	r2, [pc, #112]	; (800f568 <TIM_OC2_SetConfig+0x108>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d007      	beq.n	800f50c <TIM_OC2_SetConfig+0xac>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a1b      	ldr	r2, [pc, #108]	; (800f56c <TIM_OC2_SetConfig+0x10c>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d003      	beq.n	800f50c <TIM_OC2_SetConfig+0xac>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a1a      	ldr	r2, [pc, #104]	; (800f570 <TIM_OC2_SetConfig+0x110>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d113      	bne.n	800f534 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f51a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	695b      	ldr	r3, [r3, #20]
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	693a      	ldr	r2, [r7, #16]
 800f524:	4313      	orrs	r3, r2
 800f526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	699b      	ldr	r3, [r3, #24]
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	693a      	ldr	r2, [r7, #16]
 800f530:	4313      	orrs	r3, r2
 800f532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	693a      	ldr	r2, [r7, #16]
 800f538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	685a      	ldr	r2, [r3, #4]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	697a      	ldr	r2, [r7, #20]
 800f54c:	621a      	str	r2, [r3, #32]
}
 800f54e:	bf00      	nop
 800f550:	371c      	adds	r7, #28
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	feff8fff 	.word	0xfeff8fff
 800f560:	40010000 	.word	0x40010000
 800f564:	40010400 	.word	0x40010400
 800f568:	40014000 	.word	0x40014000
 800f56c:	40014400 	.word	0x40014400
 800f570:	40014800 	.word	0x40014800

0800f574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f574:	b480      	push	{r7}
 800f576:	b087      	sub	sp, #28
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6a1b      	ldr	r3, [r3, #32]
 800f582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6a1b      	ldr	r3, [r3, #32]
 800f588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	685b      	ldr	r3, [r3, #4]
 800f594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	69db      	ldr	r3, [r3, #28]
 800f59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	4b33      	ldr	r3, [pc, #204]	; (800f66c <TIM_OC3_SetConfig+0xf8>)
 800f5a0:	4013      	ands	r3, r2
 800f5a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f023 0303 	bic.w	r3, r3, #3
 800f5aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	68fa      	ldr	r2, [r7, #12]
 800f5b2:	4313      	orrs	r3, r2
 800f5b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f5bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	021b      	lsls	r3, r3, #8
 800f5c4:	697a      	ldr	r2, [r7, #20]
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4a28      	ldr	r2, [pc, #160]	; (800f670 <TIM_OC3_SetConfig+0xfc>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d003      	beq.n	800f5da <TIM_OC3_SetConfig+0x66>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4a27      	ldr	r2, [pc, #156]	; (800f674 <TIM_OC3_SetConfig+0x100>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d10d      	bne.n	800f5f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f5e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	021b      	lsls	r3, r3, #8
 800f5e8:	697a      	ldr	r2, [r7, #20]
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f5f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a1d      	ldr	r2, [pc, #116]	; (800f670 <TIM_OC3_SetConfig+0xfc>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d00f      	beq.n	800f61e <TIM_OC3_SetConfig+0xaa>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4a1c      	ldr	r2, [pc, #112]	; (800f674 <TIM_OC3_SetConfig+0x100>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d00b      	beq.n	800f61e <TIM_OC3_SetConfig+0xaa>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4a1b      	ldr	r2, [pc, #108]	; (800f678 <TIM_OC3_SetConfig+0x104>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d007      	beq.n	800f61e <TIM_OC3_SetConfig+0xaa>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	4a1a      	ldr	r2, [pc, #104]	; (800f67c <TIM_OC3_SetConfig+0x108>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d003      	beq.n	800f61e <TIM_OC3_SetConfig+0xaa>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4a19      	ldr	r2, [pc, #100]	; (800f680 <TIM_OC3_SetConfig+0x10c>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d113      	bne.n	800f646 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f62c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	695b      	ldr	r3, [r3, #20]
 800f632:	011b      	lsls	r3, r3, #4
 800f634:	693a      	ldr	r2, [r7, #16]
 800f636:	4313      	orrs	r3, r2
 800f638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	699b      	ldr	r3, [r3, #24]
 800f63e:	011b      	lsls	r3, r3, #4
 800f640:	693a      	ldr	r2, [r7, #16]
 800f642:	4313      	orrs	r3, r2
 800f644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	693a      	ldr	r2, [r7, #16]
 800f64a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	685a      	ldr	r2, [r3, #4]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	697a      	ldr	r2, [r7, #20]
 800f65e:	621a      	str	r2, [r3, #32]
}
 800f660:	bf00      	nop
 800f662:	371c      	adds	r7, #28
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr
 800f66c:	fffeff8f 	.word	0xfffeff8f
 800f670:	40010000 	.word	0x40010000
 800f674:	40010400 	.word	0x40010400
 800f678:	40014000 	.word	0x40014000
 800f67c:	40014400 	.word	0x40014400
 800f680:	40014800 	.word	0x40014800

0800f684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f684:	b480      	push	{r7}
 800f686:	b087      	sub	sp, #28
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6a1b      	ldr	r3, [r3, #32]
 800f692:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a1b      	ldr	r3, [r3, #32]
 800f698:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	69db      	ldr	r3, [r3, #28]
 800f6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	4b24      	ldr	r3, [pc, #144]	; (800f740 <TIM_OC4_SetConfig+0xbc>)
 800f6b0:	4013      	ands	r3, r2
 800f6b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	021b      	lsls	r3, r3, #8
 800f6c2:	68fa      	ldr	r2, [r7, #12]
 800f6c4:	4313      	orrs	r3, r2
 800f6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f6ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	031b      	lsls	r3, r3, #12
 800f6d6:	693a      	ldr	r2, [r7, #16]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a19      	ldr	r2, [pc, #100]	; (800f744 <TIM_OC4_SetConfig+0xc0>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d00f      	beq.n	800f704 <TIM_OC4_SetConfig+0x80>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4a18      	ldr	r2, [pc, #96]	; (800f748 <TIM_OC4_SetConfig+0xc4>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d00b      	beq.n	800f704 <TIM_OC4_SetConfig+0x80>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a17      	ldr	r2, [pc, #92]	; (800f74c <TIM_OC4_SetConfig+0xc8>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d007      	beq.n	800f704 <TIM_OC4_SetConfig+0x80>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a16      	ldr	r2, [pc, #88]	; (800f750 <TIM_OC4_SetConfig+0xcc>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d003      	beq.n	800f704 <TIM_OC4_SetConfig+0x80>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a15      	ldr	r2, [pc, #84]	; (800f754 <TIM_OC4_SetConfig+0xd0>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d109      	bne.n	800f718 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f70a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	695b      	ldr	r3, [r3, #20]
 800f710:	019b      	lsls	r3, r3, #6
 800f712:	697a      	ldr	r2, [r7, #20]
 800f714:	4313      	orrs	r3, r2
 800f716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	68fa      	ldr	r2, [r7, #12]
 800f722:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	685a      	ldr	r2, [r3, #4]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	693a      	ldr	r2, [r7, #16]
 800f730:	621a      	str	r2, [r3, #32]
}
 800f732:	bf00      	nop
 800f734:	371c      	adds	r7, #28
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	feff8fff 	.word	0xfeff8fff
 800f744:	40010000 	.word	0x40010000
 800f748:	40010400 	.word	0x40010400
 800f74c:	40014000 	.word	0x40014000
 800f750:	40014400 	.word	0x40014400
 800f754:	40014800 	.word	0x40014800

0800f758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f758:	b480      	push	{r7}
 800f75a:	b087      	sub	sp, #28
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6a1b      	ldr	r3, [r3, #32]
 800f766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a1b      	ldr	r3, [r3, #32]
 800f76c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	4b21      	ldr	r3, [pc, #132]	; (800f808 <TIM_OC5_SetConfig+0xb0>)
 800f784:	4013      	ands	r3, r2
 800f786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	68fa      	ldr	r2, [r7, #12]
 800f78e:	4313      	orrs	r3, r2
 800f790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f798:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	689b      	ldr	r3, [r3, #8]
 800f79e:	041b      	lsls	r3, r3, #16
 800f7a0:	693a      	ldr	r2, [r7, #16]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4a18      	ldr	r2, [pc, #96]	; (800f80c <TIM_OC5_SetConfig+0xb4>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d00f      	beq.n	800f7ce <TIM_OC5_SetConfig+0x76>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	4a17      	ldr	r2, [pc, #92]	; (800f810 <TIM_OC5_SetConfig+0xb8>)
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d00b      	beq.n	800f7ce <TIM_OC5_SetConfig+0x76>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4a16      	ldr	r2, [pc, #88]	; (800f814 <TIM_OC5_SetConfig+0xbc>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d007      	beq.n	800f7ce <TIM_OC5_SetConfig+0x76>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	4a15      	ldr	r2, [pc, #84]	; (800f818 <TIM_OC5_SetConfig+0xc0>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d003      	beq.n	800f7ce <TIM_OC5_SetConfig+0x76>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	4a14      	ldr	r2, [pc, #80]	; (800f81c <TIM_OC5_SetConfig+0xc4>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d109      	bne.n	800f7e2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f7d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	695b      	ldr	r3, [r3, #20]
 800f7da:	021b      	lsls	r3, r3, #8
 800f7dc:	697a      	ldr	r2, [r7, #20]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	697a      	ldr	r2, [r7, #20]
 800f7e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	685a      	ldr	r2, [r3, #4]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	693a      	ldr	r2, [r7, #16]
 800f7fa:	621a      	str	r2, [r3, #32]
}
 800f7fc:	bf00      	nop
 800f7fe:	371c      	adds	r7, #28
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	fffeff8f 	.word	0xfffeff8f
 800f80c:	40010000 	.word	0x40010000
 800f810:	40010400 	.word	0x40010400
 800f814:	40014000 	.word	0x40014000
 800f818:	40014400 	.word	0x40014400
 800f81c:	40014800 	.word	0x40014800

0800f820 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f820:	b480      	push	{r7}
 800f822:	b087      	sub	sp, #28
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6a1b      	ldr	r3, [r3, #32]
 800f82e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6a1b      	ldr	r3, [r3, #32]
 800f834:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	4b22      	ldr	r3, [pc, #136]	; (800f8d4 <TIM_OC6_SetConfig+0xb4>)
 800f84c:	4013      	ands	r3, r2
 800f84e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	021b      	lsls	r3, r3, #8
 800f856:	68fa      	ldr	r2, [r7, #12]
 800f858:	4313      	orrs	r3, r2
 800f85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	051b      	lsls	r3, r3, #20
 800f86a:	693a      	ldr	r2, [r7, #16]
 800f86c:	4313      	orrs	r3, r2
 800f86e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4a19      	ldr	r2, [pc, #100]	; (800f8d8 <TIM_OC6_SetConfig+0xb8>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d00f      	beq.n	800f898 <TIM_OC6_SetConfig+0x78>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4a18      	ldr	r2, [pc, #96]	; (800f8dc <TIM_OC6_SetConfig+0xbc>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d00b      	beq.n	800f898 <TIM_OC6_SetConfig+0x78>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4a17      	ldr	r2, [pc, #92]	; (800f8e0 <TIM_OC6_SetConfig+0xc0>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d007      	beq.n	800f898 <TIM_OC6_SetConfig+0x78>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4a16      	ldr	r2, [pc, #88]	; (800f8e4 <TIM_OC6_SetConfig+0xc4>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d003      	beq.n	800f898 <TIM_OC6_SetConfig+0x78>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4a15      	ldr	r2, [pc, #84]	; (800f8e8 <TIM_OC6_SetConfig+0xc8>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d109      	bne.n	800f8ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f89e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	695b      	ldr	r3, [r3, #20]
 800f8a4:	029b      	lsls	r3, r3, #10
 800f8a6:	697a      	ldr	r2, [r7, #20]
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	697a      	ldr	r2, [r7, #20]
 800f8b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	685a      	ldr	r2, [r3, #4]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	693a      	ldr	r2, [r7, #16]
 800f8c4:	621a      	str	r2, [r3, #32]
}
 800f8c6:	bf00      	nop
 800f8c8:	371c      	adds	r7, #28
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	feff8fff 	.word	0xfeff8fff
 800f8d8:	40010000 	.word	0x40010000
 800f8dc:	40010400 	.word	0x40010400
 800f8e0:	40014000 	.word	0x40014000
 800f8e4:	40014400 	.word	0x40014400
 800f8e8:	40014800 	.word	0x40014800

0800f8ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b087      	sub	sp, #28
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	6a1b      	ldr	r3, [r3, #32]
 800f8fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6a1b      	ldr	r3, [r3, #32]
 800f902:	f023 0201 	bic.w	r2, r3, #1
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	699b      	ldr	r3, [r3, #24]
 800f90e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	011b      	lsls	r3, r3, #4
 800f91c:	693a      	ldr	r2, [r7, #16]
 800f91e:	4313      	orrs	r3, r2
 800f920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	f023 030a 	bic.w	r3, r3, #10
 800f928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f92a:	697a      	ldr	r2, [r7, #20]
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	4313      	orrs	r3, r2
 800f930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	693a      	ldr	r2, [r7, #16]
 800f936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	697a      	ldr	r2, [r7, #20]
 800f93c:	621a      	str	r2, [r3, #32]
}
 800f93e:	bf00      	nop
 800f940:	371c      	adds	r7, #28
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr

0800f94a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f94a:	b480      	push	{r7}
 800f94c:	b087      	sub	sp, #28
 800f94e:	af00      	add	r7, sp, #0
 800f950:	60f8      	str	r0, [r7, #12]
 800f952:	60b9      	str	r1, [r7, #8]
 800f954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6a1b      	ldr	r3, [r3, #32]
 800f95a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6a1b      	ldr	r3, [r3, #32]
 800f960:	f023 0210 	bic.w	r2, r3, #16
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	699b      	ldr	r3, [r3, #24]
 800f96c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	031b      	lsls	r3, r3, #12
 800f97a:	693a      	ldr	r2, [r7, #16]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f986:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	011b      	lsls	r3, r3, #4
 800f98c:	697a      	ldr	r2, [r7, #20]
 800f98e:	4313      	orrs	r3, r2
 800f990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	693a      	ldr	r2, [r7, #16]
 800f996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	621a      	str	r2, [r3, #32]
}
 800f99e:	bf00      	nop
 800f9a0:	371c      	adds	r7, #28
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
	...

0800f9ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b085      	sub	sp, #20
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	689b      	ldr	r3, [r3, #8]
 800f9ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f9bc:	68fa      	ldr	r2, [r7, #12]
 800f9be:	4b09      	ldr	r3, [pc, #36]	; (800f9e4 <TIM_ITRx_SetConfig+0x38>)
 800f9c0:	4013      	ands	r3, r2
 800f9c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	f043 0307 	orr.w	r3, r3, #7
 800f9ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	68fa      	ldr	r2, [r7, #12]
 800f9d4:	609a      	str	r2, [r3, #8]
}
 800f9d6:	bf00      	nop
 800f9d8:	3714      	adds	r7, #20
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr
 800f9e2:	bf00      	nop
 800f9e4:	ffcfff8f 	.word	0xffcfff8f

0800f9e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b087      	sub	sp, #28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]
 800f9f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fa02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	021a      	lsls	r2, r3, #8
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	431a      	orrs	r2, r3
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	697a      	ldr	r2, [r7, #20]
 800fa12:	4313      	orrs	r3, r2
 800fa14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	697a      	ldr	r2, [r7, #20]
 800fa1a:	609a      	str	r2, [r3, #8]
}
 800fa1c:	bf00      	nop
 800fa1e:	371c      	adds	r7, #28
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b087      	sub	sp, #28
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	f003 031f 	and.w	r3, r3, #31
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	fa02 f303 	lsl.w	r3, r2, r3
 800fa40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	6a1a      	ldr	r2, [r3, #32]
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	43db      	mvns	r3, r3
 800fa4a:	401a      	ands	r2, r3
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6a1a      	ldr	r2, [r3, #32]
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	f003 031f 	and.w	r3, r3, #31
 800fa5a:	6879      	ldr	r1, [r7, #4]
 800fa5c:	fa01 f303 	lsl.w	r3, r1, r3
 800fa60:	431a      	orrs	r2, r3
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	621a      	str	r2, [r3, #32]
}
 800fa66:	bf00      	nop
 800fa68:	371c      	adds	r7, #28
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr
	...

0800fa74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d101      	bne.n	800fa8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fa88:	2302      	movs	r3, #2
 800fa8a:	e06d      	b.n	800fb68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2201      	movs	r2, #1
 800fa90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2202      	movs	r2, #2
 800fa98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a30      	ldr	r2, [pc, #192]	; (800fb74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d004      	beq.n	800fac0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4a2f      	ldr	r2, [pc, #188]	; (800fb78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d108      	bne.n	800fad2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fac6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	68fa      	ldr	r2, [r7, #12]
 800face:	4313      	orrs	r3, r2
 800fad0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fad8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	4313      	orrs	r3, r2
 800fae2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	68fa      	ldr	r2, [r7, #12]
 800faea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4a20      	ldr	r2, [pc, #128]	; (800fb74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d022      	beq.n	800fb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fafe:	d01d      	beq.n	800fb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a1d      	ldr	r2, [pc, #116]	; (800fb7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d018      	beq.n	800fb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4a1c      	ldr	r2, [pc, #112]	; (800fb80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d013      	beq.n	800fb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a1a      	ldr	r2, [pc, #104]	; (800fb84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d00e      	beq.n	800fb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	4a15      	ldr	r2, [pc, #84]	; (800fb78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d009      	beq.n	800fb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4a16      	ldr	r2, [pc, #88]	; (800fb88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d004      	beq.n	800fb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	4a15      	ldr	r2, [pc, #84]	; (800fb8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d10c      	bne.n	800fb56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	68ba      	ldr	r2, [r7, #8]
 800fb54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2201      	movs	r2, #1
 800fb5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb66:	2300      	movs	r3, #0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3714      	adds	r7, #20
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr
 800fb74:	40010000 	.word	0x40010000
 800fb78:	40010400 	.word	0x40010400
 800fb7c:	40000400 	.word	0x40000400
 800fb80:	40000800 	.word	0x40000800
 800fb84:	40000c00 	.word	0x40000c00
 800fb88:	40001800 	.word	0x40001800
 800fb8c:	40014000 	.word	0x40014000

0800fb90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b085      	sub	sp, #20
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d101      	bne.n	800fbac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fba8:	2302      	movs	r3, #2
 800fbaa:	e065      	b.n	800fc78 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	691b      	ldr	r3, [r3, #16]
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	695b      	ldr	r3, [r3, #20]
 800fc04:	4313      	orrs	r3, r2
 800fc06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc12:	4313      	orrs	r3, r2
 800fc14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	699b      	ldr	r3, [r3, #24]
 800fc20:	041b      	lsls	r3, r3, #16
 800fc22:	4313      	orrs	r3, r2
 800fc24:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4a16      	ldr	r2, [pc, #88]	; (800fc84 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d004      	beq.n	800fc3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4a14      	ldr	r2, [pc, #80]	; (800fc88 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d115      	bne.n	800fc66 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc44:	051b      	lsls	r3, r3, #20
 800fc46:	4313      	orrs	r3, r2
 800fc48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	69db      	ldr	r3, [r3, #28]
 800fc54:	4313      	orrs	r3, r2
 800fc56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	6a1b      	ldr	r3, [r3, #32]
 800fc62:	4313      	orrs	r3, r2
 800fc64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2200      	movs	r2, #0
 800fc72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc76:	2300      	movs	r3, #0
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3714      	adds	r7, #20
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	40010000 	.word	0x40010000
 800fc88:	40010400 	.word	0x40010400

0800fc8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc94:	bf00      	nop
 800fc96:	370c      	adds	r7, #12
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr

0800fca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fca8:	bf00      	nop
 800fcaa:	370c      	adds	r7, #12
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr

0800fcb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fcbc:	bf00      	nop
 800fcbe:	370c      	adds	r7, #12
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d101      	bne.n	800fcda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e042      	b.n	800fd60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d106      	bne.n	800fcf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7f3 fc3f 	bl	8003570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2224      	movs	r2, #36	; 0x24
 800fcf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f022 0201 	bic.w	r2, r2, #1
 800fd08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d002      	beq.n	800fd18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f001 fb8c 	bl	8011430 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fe21 	bl	8010960 <UART_SetConfig>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d101      	bne.n	800fd28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fd24:	2301      	movs	r3, #1
 800fd26:	e01b      	b.n	800fd60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	685a      	ldr	r2, [r3, #4]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	689a      	ldr	r2, [r3, #8]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fd46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f042 0201 	orr.w	r2, r2, #1
 800fd56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f001 fc0b 	bl	8011574 <UART_CheckIdleState>
 800fd5e:	4603      	mov	r3, r0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b08a      	sub	sp, #40	; 0x28
 800fd6c:	af02      	add	r7, sp, #8
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	603b      	str	r3, [r7, #0]
 800fd74:	4613      	mov	r3, r2
 800fd76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd7e:	2b20      	cmp	r3, #32
 800fd80:	d17b      	bne.n	800fe7a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d002      	beq.n	800fd8e <HAL_UART_Transmit+0x26>
 800fd88:	88fb      	ldrh	r3, [r7, #6]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d101      	bne.n	800fd92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e074      	b.n	800fe7c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2200      	movs	r2, #0
 800fd96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2221      	movs	r2, #33	; 0x21
 800fd9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fda2:	f7f3 ff63 	bl	8003c6c <HAL_GetTick>
 800fda6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	88fa      	ldrh	r2, [r7, #6]
 800fdac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	88fa      	ldrh	r2, [r7, #6]
 800fdb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdc0:	d108      	bne.n	800fdd4 <HAL_UART_Transmit+0x6c>
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d104      	bne.n	800fdd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	61bb      	str	r3, [r7, #24]
 800fdd2:	e003      	b.n	800fddc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fddc:	e030      	b.n	800fe40 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	2200      	movs	r2, #0
 800fde6:	2180      	movs	r1, #128	; 0x80
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f001 fc6d 	bl	80116c8 <UART_WaitOnFlagUntilTimeout>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d005      	beq.n	800fe00 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2220      	movs	r2, #32
 800fdf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fdfc:	2303      	movs	r3, #3
 800fdfe:	e03d      	b.n	800fe7c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10b      	bne.n	800fe1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	881b      	ldrh	r3, [r3, #0]
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	3302      	adds	r3, #2
 800fe1a:	61bb      	str	r3, [r7, #24]
 800fe1c:	e007      	b.n	800fe2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	781a      	ldrb	r2, [r3, #0]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	3b01      	subs	r3, #1
 800fe38:	b29a      	uxth	r2, r3
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d1c8      	bne.n	800fdde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	9300      	str	r3, [sp, #0]
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	2200      	movs	r2, #0
 800fe54:	2140      	movs	r1, #64	; 0x40
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f001 fc36 	bl	80116c8 <UART_WaitOnFlagUntilTimeout>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d005      	beq.n	800fe6e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	2220      	movs	r2, #32
 800fe66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fe6a:	2303      	movs	r3, #3
 800fe6c:	e006      	b.n	800fe7c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2220      	movs	r2, #32
 800fe72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fe76:	2300      	movs	r3, #0
 800fe78:	e000      	b.n	800fe7c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fe7a:	2302      	movs	r3, #2
  }
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3720      	adds	r7, #32
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b08a      	sub	sp, #40	; 0x28
 800fe88:	af02      	add	r7, sp, #8
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	603b      	str	r3, [r7, #0]
 800fe90:	4613      	mov	r3, r2
 800fe92:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe9a:	2b20      	cmp	r3, #32
 800fe9c:	f040 80b5 	bne.w	801000a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d002      	beq.n	800feac <HAL_UART_Receive+0x28>
 800fea6:	88fb      	ldrh	r3, [r7, #6]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d101      	bne.n	800feb0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800feac:	2301      	movs	r3, #1
 800feae:	e0ad      	b.n	801000c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2200      	movs	r2, #0
 800feb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2222      	movs	r2, #34	; 0x22
 800febc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2200      	movs	r2, #0
 800fec4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fec6:	f7f3 fed1 	bl	8003c6c <HAL_GetTick>
 800feca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	88fa      	ldrh	r2, [r7, #6]
 800fed0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	88fa      	ldrh	r2, [r7, #6]
 800fed8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fee4:	d10e      	bne.n	800ff04 <HAL_UART_Receive+0x80>
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	691b      	ldr	r3, [r3, #16]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d105      	bne.n	800fefa <HAL_UART_Receive+0x76>
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fef8:	e02d      	b.n	800ff56 <HAL_UART_Receive+0xd2>
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	22ff      	movs	r2, #255	; 0xff
 800fefe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff02:	e028      	b.n	800ff56 <HAL_UART_Receive+0xd2>
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d10d      	bne.n	800ff28 <HAL_UART_Receive+0xa4>
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	691b      	ldr	r3, [r3, #16]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d104      	bne.n	800ff1e <HAL_UART_Receive+0x9a>
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	22ff      	movs	r2, #255	; 0xff
 800ff18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff1c:	e01b      	b.n	800ff56 <HAL_UART_Receive+0xd2>
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	227f      	movs	r2, #127	; 0x7f
 800ff22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff26:	e016      	b.n	800ff56 <HAL_UART_Receive+0xd2>
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ff30:	d10d      	bne.n	800ff4e <HAL_UART_Receive+0xca>
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	691b      	ldr	r3, [r3, #16]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d104      	bne.n	800ff44 <HAL_UART_Receive+0xc0>
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	227f      	movs	r2, #127	; 0x7f
 800ff3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff42:	e008      	b.n	800ff56 <HAL_UART_Receive+0xd2>
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	223f      	movs	r2, #63	; 0x3f
 800ff48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff4c:	e003      	b.n	800ff56 <HAL_UART_Receive+0xd2>
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff5c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	689b      	ldr	r3, [r3, #8]
 800ff62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff66:	d108      	bne.n	800ff7a <HAL_UART_Receive+0xf6>
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	691b      	ldr	r3, [r3, #16]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d104      	bne.n	800ff7a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ff70:	2300      	movs	r3, #0
 800ff72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	61bb      	str	r3, [r7, #24]
 800ff78:	e003      	b.n	800ff82 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ff82:	e036      	b.n	800fff2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	2120      	movs	r1, #32
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	f001 fb9a 	bl	80116c8 <UART_WaitOnFlagUntilTimeout>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d005      	beq.n	800ffa6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2220      	movs	r2, #32
 800ff9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800ffa2:	2303      	movs	r3, #3
 800ffa4:	e032      	b.n	801000c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d10c      	bne.n	800ffc6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	8a7b      	ldrh	r3, [r7, #18]
 800ffb6:	4013      	ands	r3, r2
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	69bb      	ldr	r3, [r7, #24]
 800ffbc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	3302      	adds	r3, #2
 800ffc2:	61bb      	str	r3, [r7, #24]
 800ffc4:	e00c      	b.n	800ffe0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	8a7b      	ldrh	r3, [r7, #18]
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	4013      	ands	r3, r2
 800ffd4:	b2da      	uxtb	r2, r3
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d1c2      	bne.n	800ff84 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2220      	movs	r2, #32
 8010002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010006:	2300      	movs	r3, #0
 8010008:	e000      	b.n	801000c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801000a:	2302      	movs	r3, #2
  }
}
 801000c:	4618      	mov	r0, r3
 801000e:	3720      	adds	r7, #32
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b08a      	sub	sp, #40	; 0x28
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	4613      	mov	r3, r2
 8010020:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010028:	2b20      	cmp	r3, #32
 801002a:	d137      	bne.n	801009c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d002      	beq.n	8010038 <HAL_UART_Receive_IT+0x24>
 8010032:	88fb      	ldrh	r3, [r7, #6]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d101      	bne.n	801003c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010038:	2301      	movs	r3, #1
 801003a:	e030      	b.n	801009e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2200      	movs	r2, #0
 8010040:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a18      	ldr	r2, [pc, #96]	; (80100a8 <HAL_UART_Receive_IT+0x94>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d01f      	beq.n	801008c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010056:	2b00      	cmp	r3, #0
 8010058:	d018      	beq.n	801008c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	e853 3f00 	ldrex	r3, [r3]
 8010066:	613b      	str	r3, [r7, #16]
   return(result);
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801006e:	627b      	str	r3, [r7, #36]	; 0x24
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	461a      	mov	r2, r3
 8010076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010078:	623b      	str	r3, [r7, #32]
 801007a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801007c:	69f9      	ldr	r1, [r7, #28]
 801007e:	6a3a      	ldr	r2, [r7, #32]
 8010080:	e841 2300 	strex	r3, r2, [r1]
 8010084:	61bb      	str	r3, [r7, #24]
   return(result);
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d1e6      	bne.n	801005a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801008c:	88fb      	ldrh	r3, [r7, #6]
 801008e:	461a      	mov	r2, r3
 8010090:	68b9      	ldr	r1, [r7, #8]
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f001 fb86 	bl	80117a4 <UART_Start_Receive_IT>
 8010098:	4603      	mov	r3, r0
 801009a:	e000      	b.n	801009e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801009c:	2302      	movs	r3, #2
  }
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3728      	adds	r7, #40	; 0x28
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	58000c00 	.word	0x58000c00

080100ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b08a      	sub	sp, #40	; 0x28
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	60f8      	str	r0, [r7, #12]
 80100b4:	60b9      	str	r1, [r7, #8]
 80100b6:	4613      	mov	r3, r2
 80100b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100c0:	2b20      	cmp	r3, #32
 80100c2:	d167      	bne.n	8010194 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d002      	beq.n	80100d0 <HAL_UART_Transmit_DMA+0x24>
 80100ca:	88fb      	ldrh	r3, [r7, #6]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d101      	bne.n	80100d4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80100d0:	2301      	movs	r3, #1
 80100d2:	e060      	b.n	8010196 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	68ba      	ldr	r2, [r7, #8]
 80100d8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	88fa      	ldrh	r2, [r7, #6]
 80100de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	88fa      	ldrh	r2, [r7, #6]
 80100e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2200      	movs	r2, #0
 80100ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	2221      	movs	r2, #33	; 0x21
 80100f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d028      	beq.n	8010154 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010106:	4a26      	ldr	r2, [pc, #152]	; (80101a0 <HAL_UART_Transmit_DMA+0xf4>)
 8010108:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801010e:	4a25      	ldr	r2, [pc, #148]	; (80101a4 <HAL_UART_Transmit_DMA+0xf8>)
 8010110:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010116:	4a24      	ldr	r2, [pc, #144]	; (80101a8 <HAL_UART_Transmit_DMA+0xfc>)
 8010118:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801011e:	2200      	movs	r2, #0
 8010120:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801012a:	4619      	mov	r1, r3
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	3328      	adds	r3, #40	; 0x28
 8010132:	461a      	mov	r2, r3
 8010134:	88fb      	ldrh	r3, [r7, #6]
 8010136:	f7f6 fa1d 	bl	8006574 <HAL_DMA_Start_IT>
 801013a:	4603      	mov	r3, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d009      	beq.n	8010154 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2210      	movs	r2, #16
 8010144:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2220      	movs	r2, #32
 801014c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010150:	2301      	movs	r3, #1
 8010152:	e020      	b.n	8010196 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	2240      	movs	r2, #64	; 0x40
 801015a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	3308      	adds	r3, #8
 8010162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	e853 3f00 	ldrex	r3, [r3]
 801016a:	613b      	str	r3, [r7, #16]
   return(result);
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010172:	627b      	str	r3, [r7, #36]	; 0x24
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3308      	adds	r3, #8
 801017a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801017c:	623a      	str	r2, [r7, #32]
 801017e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010180:	69f9      	ldr	r1, [r7, #28]
 8010182:	6a3a      	ldr	r2, [r7, #32]
 8010184:	e841 2300 	strex	r3, r2, [r1]
 8010188:	61bb      	str	r3, [r7, #24]
   return(result);
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d1e5      	bne.n	801015c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010190:	2300      	movs	r3, #0
 8010192:	e000      	b.n	8010196 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010194:	2302      	movs	r3, #2
  }
}
 8010196:	4618      	mov	r0, r3
 8010198:	3728      	adds	r7, #40	; 0x28
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	08011b39 	.word	0x08011b39
 80101a4:	08011bcf 	.word	0x08011bcf
 80101a8:	08011beb 	.word	0x08011beb

080101ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b0ba      	sub	sp, #232	; 0xe8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	69db      	ldr	r3, [r3, #28]
 80101ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	689b      	ldr	r3, [r3, #8]
 80101ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80101d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80101d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80101da:	4013      	ands	r3, r2
 80101dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80101e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d11b      	bne.n	8010220 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80101e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101ec:	f003 0320 	and.w	r3, r3, #32
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d015      	beq.n	8010220 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80101f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101f8:	f003 0320 	and.w	r3, r3, #32
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d105      	bne.n	801020c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010208:	2b00      	cmp	r3, #0
 801020a:	d009      	beq.n	8010220 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010210:	2b00      	cmp	r3, #0
 8010212:	f000 8377 	beq.w	8010904 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	4798      	blx	r3
      }
      return;
 801021e:	e371      	b.n	8010904 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010224:	2b00      	cmp	r3, #0
 8010226:	f000 8123 	beq.w	8010470 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801022a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801022e:	4b8d      	ldr	r3, [pc, #564]	; (8010464 <HAL_UART_IRQHandler+0x2b8>)
 8010230:	4013      	ands	r3, r2
 8010232:	2b00      	cmp	r3, #0
 8010234:	d106      	bne.n	8010244 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010236:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801023a:	4b8b      	ldr	r3, [pc, #556]	; (8010468 <HAL_UART_IRQHandler+0x2bc>)
 801023c:	4013      	ands	r3, r2
 801023e:	2b00      	cmp	r3, #0
 8010240:	f000 8116 	beq.w	8010470 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010248:	f003 0301 	and.w	r3, r3, #1
 801024c:	2b00      	cmp	r3, #0
 801024e:	d011      	beq.n	8010274 <HAL_UART_IRQHandler+0xc8>
 8010250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010258:	2b00      	cmp	r3, #0
 801025a:	d00b      	beq.n	8010274 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2201      	movs	r2, #1
 8010262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801026a:	f043 0201 	orr.w	r2, r3, #1
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010278:	f003 0302 	and.w	r3, r3, #2
 801027c:	2b00      	cmp	r3, #0
 801027e:	d011      	beq.n	80102a4 <HAL_UART_IRQHandler+0xf8>
 8010280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010284:	f003 0301 	and.w	r3, r3, #1
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00b      	beq.n	80102a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	2202      	movs	r2, #2
 8010292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801029a:	f043 0204 	orr.w	r2, r3, #4
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102a8:	f003 0304 	and.w	r3, r3, #4
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d011      	beq.n	80102d4 <HAL_UART_IRQHandler+0x128>
 80102b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102b4:	f003 0301 	and.w	r3, r3, #1
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d00b      	beq.n	80102d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2204      	movs	r2, #4
 80102c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102ca:	f043 0202 	orr.w	r2, r3, #2
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80102d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102d8:	f003 0308 	and.w	r3, r3, #8
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d017      	beq.n	8010310 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80102e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102e4:	f003 0320 	and.w	r3, r3, #32
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d105      	bne.n	80102f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80102ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80102f0:	4b5c      	ldr	r3, [pc, #368]	; (8010464 <HAL_UART_IRQHandler+0x2b8>)
 80102f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d00b      	beq.n	8010310 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2208      	movs	r2, #8
 80102fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010306:	f043 0208 	orr.w	r2, r3, #8
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010318:	2b00      	cmp	r3, #0
 801031a:	d012      	beq.n	8010342 <HAL_UART_IRQHandler+0x196>
 801031c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010324:	2b00      	cmp	r3, #0
 8010326:	d00c      	beq.n	8010342 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010330:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010338:	f043 0220 	orr.w	r2, r3, #32
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010348:	2b00      	cmp	r3, #0
 801034a:	f000 82dd 	beq.w	8010908 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801034e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010352:	f003 0320 	and.w	r3, r3, #32
 8010356:	2b00      	cmp	r3, #0
 8010358:	d013      	beq.n	8010382 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801035a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801035e:	f003 0320 	and.w	r3, r3, #32
 8010362:	2b00      	cmp	r3, #0
 8010364:	d105      	bne.n	8010372 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801036a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801036e:	2b00      	cmp	r3, #0
 8010370:	d007      	beq.n	8010382 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010376:	2b00      	cmp	r3, #0
 8010378:	d003      	beq.n	8010382 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010396:	2b40      	cmp	r3, #64	; 0x40
 8010398:	d005      	beq.n	80103a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801039a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801039e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d054      	beq.n	8010450 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f001 fb60 	bl	8011a6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103b6:	2b40      	cmp	r3, #64	; 0x40
 80103b8:	d146      	bne.n	8010448 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	3308      	adds	r3, #8
 80103c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80103c8:	e853 3f00 	ldrex	r3, [r3]
 80103cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80103d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80103d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	3308      	adds	r3, #8
 80103e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80103e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80103ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80103f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80103f6:	e841 2300 	strex	r3, r2, [r1]
 80103fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80103fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d1d9      	bne.n	80103ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801040c:	2b00      	cmp	r3, #0
 801040e:	d017      	beq.n	8010440 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010416:	4a15      	ldr	r2, [pc, #84]	; (801046c <HAL_UART_IRQHandler+0x2c0>)
 8010418:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010420:	4618      	mov	r0, r3
 8010422:	f7f6 fe2f 	bl	8007084 <HAL_DMA_Abort_IT>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d019      	beq.n	8010460 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010434:	687a      	ldr	r2, [r7, #4]
 8010436:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801043a:	4610      	mov	r0, r2
 801043c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801043e:	e00f      	b.n	8010460 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f000 fa77 	bl	8010934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010446:	e00b      	b.n	8010460 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 fa73 	bl	8010934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801044e:	e007      	b.n	8010460 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f000 fa6f 	bl	8010934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2200      	movs	r2, #0
 801045a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801045e:	e253      	b.n	8010908 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010460:	bf00      	nop
    return;
 8010462:	e251      	b.n	8010908 <HAL_UART_IRQHandler+0x75c>
 8010464:	10000001 	.word	0x10000001
 8010468:	04000120 	.word	0x04000120
 801046c:	08011c6b 	.word	0x08011c6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010474:	2b01      	cmp	r3, #1
 8010476:	f040 81e7 	bne.w	8010848 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801047a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801047e:	f003 0310 	and.w	r3, r3, #16
 8010482:	2b00      	cmp	r3, #0
 8010484:	f000 81e0 	beq.w	8010848 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801048c:	f003 0310 	and.w	r3, r3, #16
 8010490:	2b00      	cmp	r3, #0
 8010492:	f000 81d9 	beq.w	8010848 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	2210      	movs	r2, #16
 801049c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	689b      	ldr	r3, [r3, #8]
 80104a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a8:	2b40      	cmp	r3, #64	; 0x40
 80104aa:	f040 8151 	bne.w	8010750 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a96      	ldr	r2, [pc, #600]	; (8010710 <HAL_UART_IRQHandler+0x564>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d068      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4a93      	ldr	r2, [pc, #588]	; (8010714 <HAL_UART_IRQHandler+0x568>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d061      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	4a91      	ldr	r2, [pc, #580]	; (8010718 <HAL_UART_IRQHandler+0x56c>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d05a      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4a8e      	ldr	r2, [pc, #568]	; (801071c <HAL_UART_IRQHandler+0x570>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d053      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4a8c      	ldr	r2, [pc, #560]	; (8010720 <HAL_UART_IRQHandler+0x574>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d04c      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4a89      	ldr	r2, [pc, #548]	; (8010724 <HAL_UART_IRQHandler+0x578>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d045      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a87      	ldr	r2, [pc, #540]	; (8010728 <HAL_UART_IRQHandler+0x57c>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d03e      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	4a84      	ldr	r2, [pc, #528]	; (801072c <HAL_UART_IRQHandler+0x580>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d037      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	4a82      	ldr	r2, [pc, #520]	; (8010730 <HAL_UART_IRQHandler+0x584>)
 8010528:	4293      	cmp	r3, r2
 801052a:	d030      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4a7f      	ldr	r2, [pc, #508]	; (8010734 <HAL_UART_IRQHandler+0x588>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d029      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4a7d      	ldr	r2, [pc, #500]	; (8010738 <HAL_UART_IRQHandler+0x58c>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d022      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4a7a      	ldr	r2, [pc, #488]	; (801073c <HAL_UART_IRQHandler+0x590>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d01b      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	4a78      	ldr	r2, [pc, #480]	; (8010740 <HAL_UART_IRQHandler+0x594>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d014      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	4a75      	ldr	r2, [pc, #468]	; (8010744 <HAL_UART_IRQHandler+0x598>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d00d      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	4a73      	ldr	r2, [pc, #460]	; (8010748 <HAL_UART_IRQHandler+0x59c>)
 801057c:	4293      	cmp	r3, r2
 801057e:	d006      	beq.n	801058e <HAL_UART_IRQHandler+0x3e2>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4a70      	ldr	r2, [pc, #448]	; (801074c <HAL_UART_IRQHandler+0x5a0>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d106      	bne.n	801059c <HAL_UART_IRQHandler+0x3f0>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	b29b      	uxth	r3, r3
 801059a:	e005      	b.n	80105a8 <HAL_UART_IRQHandler+0x3fc>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80105ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	f000 81ab 	beq.w	801090c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80105bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80105c0:	429a      	cmp	r2, r3
 80105c2:	f080 81a3 	bcs.w	801090c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80105cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105d6:	69db      	ldr	r3, [r3, #28]
 80105d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105dc:	f000 8087 	beq.w	80106ee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105ec:	e853 3f00 	ldrex	r3, [r3]
 80105f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80105f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80105f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	461a      	mov	r2, r3
 8010606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801060a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801060e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801061a:	e841 2300 	strex	r3, r2, [r1]
 801061e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1da      	bne.n	80105e0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	3308      	adds	r3, #8
 8010630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010634:	e853 3f00 	ldrex	r3, [r3]
 8010638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801063a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801063c:	f023 0301 	bic.w	r3, r3, #1
 8010640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	3308      	adds	r3, #8
 801064a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801064e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801065a:	e841 2300 	strex	r3, r2, [r1]
 801065e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010662:	2b00      	cmp	r3, #0
 8010664:	d1e1      	bne.n	801062a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	3308      	adds	r3, #8
 801066c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801066e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010670:	e853 3f00 	ldrex	r3, [r3]
 8010674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801067c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	3308      	adds	r3, #8
 8010686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801068a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801068c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010692:	e841 2300 	strex	r3, r2, [r1]
 8010696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801069a:	2b00      	cmp	r3, #0
 801069c:	d1e3      	bne.n	8010666 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2220      	movs	r2, #32
 80106a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b4:	e853 3f00 	ldrex	r3, [r3]
 80106b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80106ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106bc:	f023 0310 	bic.w	r3, r3, #16
 80106c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	461a      	mov	r2, r3
 80106ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80106d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80106d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106d6:	e841 2300 	strex	r3, r2, [r1]
 80106da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80106dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d1e4      	bne.n	80106ac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7f6 f9ad 	bl	8006a48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2202      	movs	r2, #2
 80106f2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010700:	b29b      	uxth	r3, r3
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	b29b      	uxth	r3, r3
 8010706:	4619      	mov	r1, r3
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f000 f91d 	bl	8010948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801070e:	e0fd      	b.n	801090c <HAL_UART_IRQHandler+0x760>
 8010710:	40020010 	.word	0x40020010
 8010714:	40020028 	.word	0x40020028
 8010718:	40020040 	.word	0x40020040
 801071c:	40020058 	.word	0x40020058
 8010720:	40020070 	.word	0x40020070
 8010724:	40020088 	.word	0x40020088
 8010728:	400200a0 	.word	0x400200a0
 801072c:	400200b8 	.word	0x400200b8
 8010730:	40020410 	.word	0x40020410
 8010734:	40020428 	.word	0x40020428
 8010738:	40020440 	.word	0x40020440
 801073c:	40020458 	.word	0x40020458
 8010740:	40020470 	.word	0x40020470
 8010744:	40020488 	.word	0x40020488
 8010748:	400204a0 	.word	0x400204a0
 801074c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801075c:	b29b      	uxth	r3, r3
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801076a:	b29b      	uxth	r3, r3
 801076c:	2b00      	cmp	r3, #0
 801076e:	f000 80cf 	beq.w	8010910 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010772:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 80ca 	beq.w	8010910 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010784:	e853 3f00 	ldrex	r3, [r3]
 8010788:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	461a      	mov	r2, r3
 801079a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801079e:	647b      	str	r3, [r7, #68]	; 0x44
 80107a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80107a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107a6:	e841 2300 	strex	r3, r2, [r1]
 80107aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80107ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1e4      	bne.n	801077c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	3308      	adds	r3, #8
 80107b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107bc:	e853 3f00 	ldrex	r3, [r3]
 80107c0:	623b      	str	r3, [r7, #32]
   return(result);
 80107c2:	6a3a      	ldr	r2, [r7, #32]
 80107c4:	4b55      	ldr	r3, [pc, #340]	; (801091c <HAL_UART_IRQHandler+0x770>)
 80107c6:	4013      	ands	r3, r2
 80107c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	3308      	adds	r3, #8
 80107d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80107d6:	633a      	str	r2, [r7, #48]	; 0x30
 80107d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107de:	e841 2300 	strex	r3, r2, [r1]
 80107e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80107e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d1e3      	bne.n	80107b2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2220      	movs	r2, #32
 80107ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2200      	movs	r2, #0
 80107fc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	e853 3f00 	ldrex	r3, [r3]
 801080a:	60fb      	str	r3, [r7, #12]
   return(result);
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f023 0310 	bic.w	r3, r3, #16
 8010812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	461a      	mov	r2, r3
 801081c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010820:	61fb      	str	r3, [r7, #28]
 8010822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010824:	69b9      	ldr	r1, [r7, #24]
 8010826:	69fa      	ldr	r2, [r7, #28]
 8010828:	e841 2300 	strex	r3, r2, [r1]
 801082c:	617b      	str	r3, [r7, #20]
   return(result);
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d1e4      	bne.n	80107fe <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2202      	movs	r2, #2
 8010838:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801083a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801083e:	4619      	mov	r1, r3
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 f881 	bl	8010948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010846:	e063      	b.n	8010910 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801084c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00e      	beq.n	8010872 <HAL_UART_IRQHandler+0x6c6>
 8010854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801085c:	2b00      	cmp	r3, #0
 801085e:	d008      	beq.n	8010872 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f001 ff5a 	bl	8012724 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010870:	e051      	b.n	8010916 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801087a:	2b00      	cmp	r3, #0
 801087c:	d014      	beq.n	80108a8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801087e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010886:	2b00      	cmp	r3, #0
 8010888:	d105      	bne.n	8010896 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801088a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801088e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010892:	2b00      	cmp	r3, #0
 8010894:	d008      	beq.n	80108a8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801089a:	2b00      	cmp	r3, #0
 801089c:	d03a      	beq.n	8010914 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	4798      	blx	r3
    }
    return;
 80108a6:	e035      	b.n	8010914 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80108a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d009      	beq.n	80108c8 <HAL_UART_IRQHandler+0x71c>
 80108b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d003      	beq.n	80108c8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f001 f9e8 	bl	8011c96 <UART_EndTransmit_IT>
    return;
 80108c6:	e026      	b.n	8010916 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80108c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d009      	beq.n	80108e8 <HAL_UART_IRQHandler+0x73c>
 80108d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d003      	beq.n	80108e8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f001 ff33 	bl	801274c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108e6:	e016      	b.n	8010916 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80108e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d010      	beq.n	8010916 <HAL_UART_IRQHandler+0x76a>
 80108f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	da0c      	bge.n	8010916 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f001 ff1b 	bl	8012738 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010902:	e008      	b.n	8010916 <HAL_UART_IRQHandler+0x76a>
      return;
 8010904:	bf00      	nop
 8010906:	e006      	b.n	8010916 <HAL_UART_IRQHandler+0x76a>
    return;
 8010908:	bf00      	nop
 801090a:	e004      	b.n	8010916 <HAL_UART_IRQHandler+0x76a>
      return;
 801090c:	bf00      	nop
 801090e:	e002      	b.n	8010916 <HAL_UART_IRQHandler+0x76a>
      return;
 8010910:	bf00      	nop
 8010912:	e000      	b.n	8010916 <HAL_UART_IRQHandler+0x76a>
    return;
 8010914:	bf00      	nop
  }
}
 8010916:	37e8      	adds	r7, #232	; 0xe8
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	effffffe 	.word	0xeffffffe

08010920 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010928:	bf00      	nop
 801092a:	370c      	adds	r7, #12
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010934:	b480      	push	{r7}
 8010936:	b083      	sub	sp, #12
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801093c:	bf00      	nop
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010948:	b480      	push	{r7}
 801094a:	b083      	sub	sp, #12
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	460b      	mov	r3, r1
 8010952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010954:	bf00      	nop
 8010956:	370c      	adds	r7, #12
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr

08010960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010964:	b092      	sub	sp, #72	; 0x48
 8010966:	af00      	add	r7, sp, #0
 8010968:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801096a:	2300      	movs	r3, #0
 801096c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	689a      	ldr	r2, [r3, #8]
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	691b      	ldr	r3, [r3, #16]
 8010978:	431a      	orrs	r2, r3
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	695b      	ldr	r3, [r3, #20]
 801097e:	431a      	orrs	r2, r3
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	69db      	ldr	r3, [r3, #28]
 8010984:	4313      	orrs	r3, r2
 8010986:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	4bbe      	ldr	r3, [pc, #760]	; (8010c88 <UART_SetConfig+0x328>)
 8010990:	4013      	ands	r3, r2
 8010992:	697a      	ldr	r2, [r7, #20]
 8010994:	6812      	ldr	r2, [r2, #0]
 8010996:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010998:	430b      	orrs	r3, r1
 801099a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	68da      	ldr	r2, [r3, #12]
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	430a      	orrs	r2, r1
 80109b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	699b      	ldr	r3, [r3, #24]
 80109b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4ab3      	ldr	r2, [pc, #716]	; (8010c8c <UART_SetConfig+0x32c>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d004      	beq.n	80109cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	6a1b      	ldr	r3, [r3, #32]
 80109c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109c8:	4313      	orrs	r3, r2
 80109ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	689a      	ldr	r2, [r3, #8]
 80109d2:	4baf      	ldr	r3, [pc, #700]	; (8010c90 <UART_SetConfig+0x330>)
 80109d4:	4013      	ands	r3, r2
 80109d6:	697a      	ldr	r2, [r7, #20]
 80109d8:	6812      	ldr	r2, [r2, #0]
 80109da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109dc:	430b      	orrs	r3, r1
 80109de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109e6:	f023 010f 	bic.w	r1, r3, #15
 80109ea:	697b      	ldr	r3, [r7, #20]
 80109ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	430a      	orrs	r2, r1
 80109f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4aa6      	ldr	r2, [pc, #664]	; (8010c94 <UART_SetConfig+0x334>)
 80109fc:	4293      	cmp	r3, r2
 80109fe:	d177      	bne.n	8010af0 <UART_SetConfig+0x190>
 8010a00:	4ba5      	ldr	r3, [pc, #660]	; (8010c98 <UART_SetConfig+0x338>)
 8010a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a08:	2b28      	cmp	r3, #40	; 0x28
 8010a0a:	d86d      	bhi.n	8010ae8 <UART_SetConfig+0x188>
 8010a0c:	a201      	add	r2, pc, #4	; (adr r2, 8010a14 <UART_SetConfig+0xb4>)
 8010a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a12:	bf00      	nop
 8010a14:	08010ab9 	.word	0x08010ab9
 8010a18:	08010ae9 	.word	0x08010ae9
 8010a1c:	08010ae9 	.word	0x08010ae9
 8010a20:	08010ae9 	.word	0x08010ae9
 8010a24:	08010ae9 	.word	0x08010ae9
 8010a28:	08010ae9 	.word	0x08010ae9
 8010a2c:	08010ae9 	.word	0x08010ae9
 8010a30:	08010ae9 	.word	0x08010ae9
 8010a34:	08010ac1 	.word	0x08010ac1
 8010a38:	08010ae9 	.word	0x08010ae9
 8010a3c:	08010ae9 	.word	0x08010ae9
 8010a40:	08010ae9 	.word	0x08010ae9
 8010a44:	08010ae9 	.word	0x08010ae9
 8010a48:	08010ae9 	.word	0x08010ae9
 8010a4c:	08010ae9 	.word	0x08010ae9
 8010a50:	08010ae9 	.word	0x08010ae9
 8010a54:	08010ac9 	.word	0x08010ac9
 8010a58:	08010ae9 	.word	0x08010ae9
 8010a5c:	08010ae9 	.word	0x08010ae9
 8010a60:	08010ae9 	.word	0x08010ae9
 8010a64:	08010ae9 	.word	0x08010ae9
 8010a68:	08010ae9 	.word	0x08010ae9
 8010a6c:	08010ae9 	.word	0x08010ae9
 8010a70:	08010ae9 	.word	0x08010ae9
 8010a74:	08010ad1 	.word	0x08010ad1
 8010a78:	08010ae9 	.word	0x08010ae9
 8010a7c:	08010ae9 	.word	0x08010ae9
 8010a80:	08010ae9 	.word	0x08010ae9
 8010a84:	08010ae9 	.word	0x08010ae9
 8010a88:	08010ae9 	.word	0x08010ae9
 8010a8c:	08010ae9 	.word	0x08010ae9
 8010a90:	08010ae9 	.word	0x08010ae9
 8010a94:	08010ad9 	.word	0x08010ad9
 8010a98:	08010ae9 	.word	0x08010ae9
 8010a9c:	08010ae9 	.word	0x08010ae9
 8010aa0:	08010ae9 	.word	0x08010ae9
 8010aa4:	08010ae9 	.word	0x08010ae9
 8010aa8:	08010ae9 	.word	0x08010ae9
 8010aac:	08010ae9 	.word	0x08010ae9
 8010ab0:	08010ae9 	.word	0x08010ae9
 8010ab4:	08010ae1 	.word	0x08010ae1
 8010ab8:	2301      	movs	r3, #1
 8010aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010abe:	e222      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ac0:	2304      	movs	r3, #4
 8010ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ac6:	e21e      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ac8:	2308      	movs	r3, #8
 8010aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ace:	e21a      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ad0:	2310      	movs	r3, #16
 8010ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ad6:	e216      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ad8:	2320      	movs	r3, #32
 8010ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ade:	e212      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ae0:	2340      	movs	r3, #64	; 0x40
 8010ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ae6:	e20e      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ae8:	2380      	movs	r3, #128	; 0x80
 8010aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aee:	e20a      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4a69      	ldr	r2, [pc, #420]	; (8010c9c <UART_SetConfig+0x33c>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d130      	bne.n	8010b5c <UART_SetConfig+0x1fc>
 8010afa:	4b67      	ldr	r3, [pc, #412]	; (8010c98 <UART_SetConfig+0x338>)
 8010afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010afe:	f003 0307 	and.w	r3, r3, #7
 8010b02:	2b05      	cmp	r3, #5
 8010b04:	d826      	bhi.n	8010b54 <UART_SetConfig+0x1f4>
 8010b06:	a201      	add	r2, pc, #4	; (adr r2, 8010b0c <UART_SetConfig+0x1ac>)
 8010b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b0c:	08010b25 	.word	0x08010b25
 8010b10:	08010b2d 	.word	0x08010b2d
 8010b14:	08010b35 	.word	0x08010b35
 8010b18:	08010b3d 	.word	0x08010b3d
 8010b1c:	08010b45 	.word	0x08010b45
 8010b20:	08010b4d 	.word	0x08010b4d
 8010b24:	2300      	movs	r3, #0
 8010b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b2a:	e1ec      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010b2c:	2304      	movs	r3, #4
 8010b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b32:	e1e8      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010b34:	2308      	movs	r3, #8
 8010b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b3a:	e1e4      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010b3c:	2310      	movs	r3, #16
 8010b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b42:	e1e0      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010b44:	2320      	movs	r3, #32
 8010b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4a:	e1dc      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010b4c:	2340      	movs	r3, #64	; 0x40
 8010b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b52:	e1d8      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010b54:	2380      	movs	r3, #128	; 0x80
 8010b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5a:	e1d4      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a4f      	ldr	r2, [pc, #316]	; (8010ca0 <UART_SetConfig+0x340>)
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d130      	bne.n	8010bc8 <UART_SetConfig+0x268>
 8010b66:	4b4c      	ldr	r3, [pc, #304]	; (8010c98 <UART_SetConfig+0x338>)
 8010b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b6a:	f003 0307 	and.w	r3, r3, #7
 8010b6e:	2b05      	cmp	r3, #5
 8010b70:	d826      	bhi.n	8010bc0 <UART_SetConfig+0x260>
 8010b72:	a201      	add	r2, pc, #4	; (adr r2, 8010b78 <UART_SetConfig+0x218>)
 8010b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b78:	08010b91 	.word	0x08010b91
 8010b7c:	08010b99 	.word	0x08010b99
 8010b80:	08010ba1 	.word	0x08010ba1
 8010b84:	08010ba9 	.word	0x08010ba9
 8010b88:	08010bb1 	.word	0x08010bb1
 8010b8c:	08010bb9 	.word	0x08010bb9
 8010b90:	2300      	movs	r3, #0
 8010b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b96:	e1b6      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010b98:	2304      	movs	r3, #4
 8010b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9e:	e1b2      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ba0:	2308      	movs	r3, #8
 8010ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba6:	e1ae      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ba8:	2310      	movs	r3, #16
 8010baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bae:	e1aa      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010bb0:	2320      	movs	r3, #32
 8010bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb6:	e1a6      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010bb8:	2340      	movs	r3, #64	; 0x40
 8010bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bbe:	e1a2      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010bc0:	2380      	movs	r3, #128	; 0x80
 8010bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc6:	e19e      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4a35      	ldr	r2, [pc, #212]	; (8010ca4 <UART_SetConfig+0x344>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d130      	bne.n	8010c34 <UART_SetConfig+0x2d4>
 8010bd2:	4b31      	ldr	r3, [pc, #196]	; (8010c98 <UART_SetConfig+0x338>)
 8010bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bd6:	f003 0307 	and.w	r3, r3, #7
 8010bda:	2b05      	cmp	r3, #5
 8010bdc:	d826      	bhi.n	8010c2c <UART_SetConfig+0x2cc>
 8010bde:	a201      	add	r2, pc, #4	; (adr r2, 8010be4 <UART_SetConfig+0x284>)
 8010be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be4:	08010bfd 	.word	0x08010bfd
 8010be8:	08010c05 	.word	0x08010c05
 8010bec:	08010c0d 	.word	0x08010c0d
 8010bf0:	08010c15 	.word	0x08010c15
 8010bf4:	08010c1d 	.word	0x08010c1d
 8010bf8:	08010c25 	.word	0x08010c25
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c02:	e180      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c04:	2304      	movs	r3, #4
 8010c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0a:	e17c      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c0c:	2308      	movs	r3, #8
 8010c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c12:	e178      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c14:	2310      	movs	r3, #16
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1a:	e174      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c1c:	2320      	movs	r3, #32
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c22:	e170      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c24:	2340      	movs	r3, #64	; 0x40
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2a:	e16c      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c2c:	2380      	movs	r3, #128	; 0x80
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c32:	e168      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4a1b      	ldr	r2, [pc, #108]	; (8010ca8 <UART_SetConfig+0x348>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d142      	bne.n	8010cc4 <UART_SetConfig+0x364>
 8010c3e:	4b16      	ldr	r3, [pc, #88]	; (8010c98 <UART_SetConfig+0x338>)
 8010c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c42:	f003 0307 	and.w	r3, r3, #7
 8010c46:	2b05      	cmp	r3, #5
 8010c48:	d838      	bhi.n	8010cbc <UART_SetConfig+0x35c>
 8010c4a:	a201      	add	r2, pc, #4	; (adr r2, 8010c50 <UART_SetConfig+0x2f0>)
 8010c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c50:	08010c69 	.word	0x08010c69
 8010c54:	08010c71 	.word	0x08010c71
 8010c58:	08010c79 	.word	0x08010c79
 8010c5c:	08010c81 	.word	0x08010c81
 8010c60:	08010cad 	.word	0x08010cad
 8010c64:	08010cb5 	.word	0x08010cb5
 8010c68:	2300      	movs	r3, #0
 8010c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6e:	e14a      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c70:	2304      	movs	r3, #4
 8010c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c76:	e146      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c78:	2308      	movs	r3, #8
 8010c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7e:	e142      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c80:	2310      	movs	r3, #16
 8010c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c86:	e13e      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010c88:	cfff69f3 	.word	0xcfff69f3
 8010c8c:	58000c00 	.word	0x58000c00
 8010c90:	11fff4ff 	.word	0x11fff4ff
 8010c94:	40011000 	.word	0x40011000
 8010c98:	58024400 	.word	0x58024400
 8010c9c:	40004400 	.word	0x40004400
 8010ca0:	40004800 	.word	0x40004800
 8010ca4:	40004c00 	.word	0x40004c00
 8010ca8:	40005000 	.word	0x40005000
 8010cac:	2320      	movs	r3, #32
 8010cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb2:	e128      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010cb4:	2340      	movs	r3, #64	; 0x40
 8010cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cba:	e124      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010cbc:	2380      	movs	r3, #128	; 0x80
 8010cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc2:	e120      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4acb      	ldr	r2, [pc, #812]	; (8010ff8 <UART_SetConfig+0x698>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d176      	bne.n	8010dbc <UART_SetConfig+0x45c>
 8010cce:	4bcb      	ldr	r3, [pc, #812]	; (8010ffc <UART_SetConfig+0x69c>)
 8010cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cd6:	2b28      	cmp	r3, #40	; 0x28
 8010cd8:	d86c      	bhi.n	8010db4 <UART_SetConfig+0x454>
 8010cda:	a201      	add	r2, pc, #4	; (adr r2, 8010ce0 <UART_SetConfig+0x380>)
 8010cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce0:	08010d85 	.word	0x08010d85
 8010ce4:	08010db5 	.word	0x08010db5
 8010ce8:	08010db5 	.word	0x08010db5
 8010cec:	08010db5 	.word	0x08010db5
 8010cf0:	08010db5 	.word	0x08010db5
 8010cf4:	08010db5 	.word	0x08010db5
 8010cf8:	08010db5 	.word	0x08010db5
 8010cfc:	08010db5 	.word	0x08010db5
 8010d00:	08010d8d 	.word	0x08010d8d
 8010d04:	08010db5 	.word	0x08010db5
 8010d08:	08010db5 	.word	0x08010db5
 8010d0c:	08010db5 	.word	0x08010db5
 8010d10:	08010db5 	.word	0x08010db5
 8010d14:	08010db5 	.word	0x08010db5
 8010d18:	08010db5 	.word	0x08010db5
 8010d1c:	08010db5 	.word	0x08010db5
 8010d20:	08010d95 	.word	0x08010d95
 8010d24:	08010db5 	.word	0x08010db5
 8010d28:	08010db5 	.word	0x08010db5
 8010d2c:	08010db5 	.word	0x08010db5
 8010d30:	08010db5 	.word	0x08010db5
 8010d34:	08010db5 	.word	0x08010db5
 8010d38:	08010db5 	.word	0x08010db5
 8010d3c:	08010db5 	.word	0x08010db5
 8010d40:	08010d9d 	.word	0x08010d9d
 8010d44:	08010db5 	.word	0x08010db5
 8010d48:	08010db5 	.word	0x08010db5
 8010d4c:	08010db5 	.word	0x08010db5
 8010d50:	08010db5 	.word	0x08010db5
 8010d54:	08010db5 	.word	0x08010db5
 8010d58:	08010db5 	.word	0x08010db5
 8010d5c:	08010db5 	.word	0x08010db5
 8010d60:	08010da5 	.word	0x08010da5
 8010d64:	08010db5 	.word	0x08010db5
 8010d68:	08010db5 	.word	0x08010db5
 8010d6c:	08010db5 	.word	0x08010db5
 8010d70:	08010db5 	.word	0x08010db5
 8010d74:	08010db5 	.word	0x08010db5
 8010d78:	08010db5 	.word	0x08010db5
 8010d7c:	08010db5 	.word	0x08010db5
 8010d80:	08010dad 	.word	0x08010dad
 8010d84:	2301      	movs	r3, #1
 8010d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8a:	e0bc      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010d8c:	2304      	movs	r3, #4
 8010d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d92:	e0b8      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010d94:	2308      	movs	r3, #8
 8010d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9a:	e0b4      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010d9c:	2310      	movs	r3, #16
 8010d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da2:	e0b0      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010da4:	2320      	movs	r3, #32
 8010da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010daa:	e0ac      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010dac:	2340      	movs	r3, #64	; 0x40
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db2:	e0a8      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010db4:	2380      	movs	r3, #128	; 0x80
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dba:	e0a4      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a8f      	ldr	r2, [pc, #572]	; (8011000 <UART_SetConfig+0x6a0>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d130      	bne.n	8010e28 <UART_SetConfig+0x4c8>
 8010dc6:	4b8d      	ldr	r3, [pc, #564]	; (8010ffc <UART_SetConfig+0x69c>)
 8010dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dca:	f003 0307 	and.w	r3, r3, #7
 8010dce:	2b05      	cmp	r3, #5
 8010dd0:	d826      	bhi.n	8010e20 <UART_SetConfig+0x4c0>
 8010dd2:	a201      	add	r2, pc, #4	; (adr r2, 8010dd8 <UART_SetConfig+0x478>)
 8010dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dd8:	08010df1 	.word	0x08010df1
 8010ddc:	08010df9 	.word	0x08010df9
 8010de0:	08010e01 	.word	0x08010e01
 8010de4:	08010e09 	.word	0x08010e09
 8010de8:	08010e11 	.word	0x08010e11
 8010dec:	08010e19 	.word	0x08010e19
 8010df0:	2300      	movs	r3, #0
 8010df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df6:	e086      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010df8:	2304      	movs	r3, #4
 8010dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfe:	e082      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e00:	2308      	movs	r3, #8
 8010e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e06:	e07e      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e08:	2310      	movs	r3, #16
 8010e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0e:	e07a      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e10:	2320      	movs	r3, #32
 8010e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e16:	e076      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e18:	2340      	movs	r3, #64	; 0x40
 8010e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1e:	e072      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e20:	2380      	movs	r3, #128	; 0x80
 8010e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e26:	e06e      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	4a75      	ldr	r2, [pc, #468]	; (8011004 <UART_SetConfig+0x6a4>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d130      	bne.n	8010e94 <UART_SetConfig+0x534>
 8010e32:	4b72      	ldr	r3, [pc, #456]	; (8010ffc <UART_SetConfig+0x69c>)
 8010e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e36:	f003 0307 	and.w	r3, r3, #7
 8010e3a:	2b05      	cmp	r3, #5
 8010e3c:	d826      	bhi.n	8010e8c <UART_SetConfig+0x52c>
 8010e3e:	a201      	add	r2, pc, #4	; (adr r2, 8010e44 <UART_SetConfig+0x4e4>)
 8010e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e44:	08010e5d 	.word	0x08010e5d
 8010e48:	08010e65 	.word	0x08010e65
 8010e4c:	08010e6d 	.word	0x08010e6d
 8010e50:	08010e75 	.word	0x08010e75
 8010e54:	08010e7d 	.word	0x08010e7d
 8010e58:	08010e85 	.word	0x08010e85
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e62:	e050      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e64:	2304      	movs	r3, #4
 8010e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6a:	e04c      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e6c:	2308      	movs	r3, #8
 8010e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e72:	e048      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e74:	2310      	movs	r3, #16
 8010e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7a:	e044      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e7c:	2320      	movs	r3, #32
 8010e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e82:	e040      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e84:	2340      	movs	r3, #64	; 0x40
 8010e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8a:	e03c      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e8c:	2380      	movs	r3, #128	; 0x80
 8010e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e92:	e038      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	4a5b      	ldr	r2, [pc, #364]	; (8011008 <UART_SetConfig+0x6a8>)
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d130      	bne.n	8010f00 <UART_SetConfig+0x5a0>
 8010e9e:	4b57      	ldr	r3, [pc, #348]	; (8010ffc <UART_SetConfig+0x69c>)
 8010ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ea2:	f003 0307 	and.w	r3, r3, #7
 8010ea6:	2b05      	cmp	r3, #5
 8010ea8:	d826      	bhi.n	8010ef8 <UART_SetConfig+0x598>
 8010eaa:	a201      	add	r2, pc, #4	; (adr r2, 8010eb0 <UART_SetConfig+0x550>)
 8010eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb0:	08010ec9 	.word	0x08010ec9
 8010eb4:	08010ed1 	.word	0x08010ed1
 8010eb8:	08010ed9 	.word	0x08010ed9
 8010ebc:	08010ee1 	.word	0x08010ee1
 8010ec0:	08010ee9 	.word	0x08010ee9
 8010ec4:	08010ef1 	.word	0x08010ef1
 8010ec8:	2302      	movs	r3, #2
 8010eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ece:	e01a      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ed0:	2304      	movs	r3, #4
 8010ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed6:	e016      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ed8:	2308      	movs	r3, #8
 8010eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ede:	e012      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ee0:	2310      	movs	r3, #16
 8010ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee6:	e00e      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ee8:	2320      	movs	r3, #32
 8010eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eee:	e00a      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ef0:	2340      	movs	r3, #64	; 0x40
 8010ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef6:	e006      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010ef8:	2380      	movs	r3, #128	; 0x80
 8010efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efe:	e002      	b.n	8010f06 <UART_SetConfig+0x5a6>
 8010f00:	2380      	movs	r3, #128	; 0x80
 8010f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a3f      	ldr	r2, [pc, #252]	; (8011008 <UART_SetConfig+0x6a8>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	f040 80f8 	bne.w	8011102 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f16:	2b20      	cmp	r3, #32
 8010f18:	dc46      	bgt.n	8010fa8 <UART_SetConfig+0x648>
 8010f1a:	2b02      	cmp	r3, #2
 8010f1c:	f2c0 8082 	blt.w	8011024 <UART_SetConfig+0x6c4>
 8010f20:	3b02      	subs	r3, #2
 8010f22:	2b1e      	cmp	r3, #30
 8010f24:	d87e      	bhi.n	8011024 <UART_SetConfig+0x6c4>
 8010f26:	a201      	add	r2, pc, #4	; (adr r2, 8010f2c <UART_SetConfig+0x5cc>)
 8010f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f2c:	08010faf 	.word	0x08010faf
 8010f30:	08011025 	.word	0x08011025
 8010f34:	08010fb7 	.word	0x08010fb7
 8010f38:	08011025 	.word	0x08011025
 8010f3c:	08011025 	.word	0x08011025
 8010f40:	08011025 	.word	0x08011025
 8010f44:	08010fc7 	.word	0x08010fc7
 8010f48:	08011025 	.word	0x08011025
 8010f4c:	08011025 	.word	0x08011025
 8010f50:	08011025 	.word	0x08011025
 8010f54:	08011025 	.word	0x08011025
 8010f58:	08011025 	.word	0x08011025
 8010f5c:	08011025 	.word	0x08011025
 8010f60:	08011025 	.word	0x08011025
 8010f64:	08010fd7 	.word	0x08010fd7
 8010f68:	08011025 	.word	0x08011025
 8010f6c:	08011025 	.word	0x08011025
 8010f70:	08011025 	.word	0x08011025
 8010f74:	08011025 	.word	0x08011025
 8010f78:	08011025 	.word	0x08011025
 8010f7c:	08011025 	.word	0x08011025
 8010f80:	08011025 	.word	0x08011025
 8010f84:	08011025 	.word	0x08011025
 8010f88:	08011025 	.word	0x08011025
 8010f8c:	08011025 	.word	0x08011025
 8010f90:	08011025 	.word	0x08011025
 8010f94:	08011025 	.word	0x08011025
 8010f98:	08011025 	.word	0x08011025
 8010f9c:	08011025 	.word	0x08011025
 8010fa0:	08011025 	.word	0x08011025
 8010fa4:	08011017 	.word	0x08011017
 8010fa8:	2b40      	cmp	r3, #64	; 0x40
 8010faa:	d037      	beq.n	801101c <UART_SetConfig+0x6bc>
 8010fac:	e03a      	b.n	8011024 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010fae:	f7fb fd9b 	bl	800cae8 <HAL_RCCEx_GetD3PCLK1Freq>
 8010fb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010fb4:	e03c      	b.n	8011030 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fb fdaa 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fc4:	e034      	b.n	8011030 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010fc6:	f107 0318 	add.w	r3, r7, #24
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fb fef6 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fd4:	e02c      	b.n	8011030 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fd6:	4b09      	ldr	r3, [pc, #36]	; (8010ffc <UART_SetConfig+0x69c>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	f003 0320 	and.w	r3, r3, #32
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d016      	beq.n	8011010 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010fe2:	4b06      	ldr	r3, [pc, #24]	; (8010ffc <UART_SetConfig+0x69c>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	08db      	lsrs	r3, r3, #3
 8010fe8:	f003 0303 	and.w	r3, r3, #3
 8010fec:	4a07      	ldr	r2, [pc, #28]	; (801100c <UART_SetConfig+0x6ac>)
 8010fee:	fa22 f303 	lsr.w	r3, r2, r3
 8010ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ff4:	e01c      	b.n	8011030 <UART_SetConfig+0x6d0>
 8010ff6:	bf00      	nop
 8010ff8:	40011400 	.word	0x40011400
 8010ffc:	58024400 	.word	0x58024400
 8011000:	40007800 	.word	0x40007800
 8011004:	40007c00 	.word	0x40007c00
 8011008:	58000c00 	.word	0x58000c00
 801100c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011010:	4b9d      	ldr	r3, [pc, #628]	; (8011288 <UART_SetConfig+0x928>)
 8011012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011014:	e00c      	b.n	8011030 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011016:	4b9d      	ldr	r3, [pc, #628]	; (801128c <UART_SetConfig+0x92c>)
 8011018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801101a:	e009      	b.n	8011030 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801101c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011020:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011022:	e005      	b.n	8011030 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011024:	2300      	movs	r3, #0
 8011026:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011028:	2301      	movs	r3, #1
 801102a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801102e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011032:	2b00      	cmp	r3, #0
 8011034:	f000 81de 	beq.w	80113f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801103c:	4a94      	ldr	r2, [pc, #592]	; (8011290 <UART_SetConfig+0x930>)
 801103e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011042:	461a      	mov	r2, r3
 8011044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011046:	fbb3 f3f2 	udiv	r3, r3, r2
 801104a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	685a      	ldr	r2, [r3, #4]
 8011050:	4613      	mov	r3, r2
 8011052:	005b      	lsls	r3, r3, #1
 8011054:	4413      	add	r3, r2
 8011056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011058:	429a      	cmp	r2, r3
 801105a:	d305      	bcc.n	8011068 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801105c:	697b      	ldr	r3, [r7, #20]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011064:	429a      	cmp	r2, r3
 8011066:	d903      	bls.n	8011070 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011068:	2301      	movs	r3, #1
 801106a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801106e:	e1c1      	b.n	80113f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011072:	2200      	movs	r2, #0
 8011074:	60bb      	str	r3, [r7, #8]
 8011076:	60fa      	str	r2, [r7, #12]
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801107c:	4a84      	ldr	r2, [pc, #528]	; (8011290 <UART_SetConfig+0x930>)
 801107e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011082:	b29b      	uxth	r3, r3
 8011084:	2200      	movs	r2, #0
 8011086:	603b      	str	r3, [r7, #0]
 8011088:	607a      	str	r2, [r7, #4]
 801108a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801108e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011092:	f7ef f925 	bl	80002e0 <__aeabi_uldivmod>
 8011096:	4602      	mov	r2, r0
 8011098:	460b      	mov	r3, r1
 801109a:	4610      	mov	r0, r2
 801109c:	4619      	mov	r1, r3
 801109e:	f04f 0200 	mov.w	r2, #0
 80110a2:	f04f 0300 	mov.w	r3, #0
 80110a6:	020b      	lsls	r3, r1, #8
 80110a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80110ac:	0202      	lsls	r2, r0, #8
 80110ae:	6979      	ldr	r1, [r7, #20]
 80110b0:	6849      	ldr	r1, [r1, #4]
 80110b2:	0849      	lsrs	r1, r1, #1
 80110b4:	2000      	movs	r0, #0
 80110b6:	460c      	mov	r4, r1
 80110b8:	4605      	mov	r5, r0
 80110ba:	eb12 0804 	adds.w	r8, r2, r4
 80110be:	eb43 0905 	adc.w	r9, r3, r5
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	2200      	movs	r2, #0
 80110c8:	469a      	mov	sl, r3
 80110ca:	4693      	mov	fp, r2
 80110cc:	4652      	mov	r2, sl
 80110ce:	465b      	mov	r3, fp
 80110d0:	4640      	mov	r0, r8
 80110d2:	4649      	mov	r1, r9
 80110d4:	f7ef f904 	bl	80002e0 <__aeabi_uldivmod>
 80110d8:	4602      	mov	r2, r0
 80110da:	460b      	mov	r3, r1
 80110dc:	4613      	mov	r3, r2
 80110de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80110e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110e6:	d308      	bcc.n	80110fa <UART_SetConfig+0x79a>
 80110e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110ee:	d204      	bcs.n	80110fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110f6:	60da      	str	r2, [r3, #12]
 80110f8:	e17c      	b.n	80113f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80110fa:	2301      	movs	r3, #1
 80110fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011100:	e178      	b.n	80113f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	69db      	ldr	r3, [r3, #28]
 8011106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801110a:	f040 80c5 	bne.w	8011298 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801110e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011112:	2b20      	cmp	r3, #32
 8011114:	dc48      	bgt.n	80111a8 <UART_SetConfig+0x848>
 8011116:	2b00      	cmp	r3, #0
 8011118:	db7b      	blt.n	8011212 <UART_SetConfig+0x8b2>
 801111a:	2b20      	cmp	r3, #32
 801111c:	d879      	bhi.n	8011212 <UART_SetConfig+0x8b2>
 801111e:	a201      	add	r2, pc, #4	; (adr r2, 8011124 <UART_SetConfig+0x7c4>)
 8011120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011124:	080111af 	.word	0x080111af
 8011128:	080111b7 	.word	0x080111b7
 801112c:	08011213 	.word	0x08011213
 8011130:	08011213 	.word	0x08011213
 8011134:	080111bf 	.word	0x080111bf
 8011138:	08011213 	.word	0x08011213
 801113c:	08011213 	.word	0x08011213
 8011140:	08011213 	.word	0x08011213
 8011144:	080111cf 	.word	0x080111cf
 8011148:	08011213 	.word	0x08011213
 801114c:	08011213 	.word	0x08011213
 8011150:	08011213 	.word	0x08011213
 8011154:	08011213 	.word	0x08011213
 8011158:	08011213 	.word	0x08011213
 801115c:	08011213 	.word	0x08011213
 8011160:	08011213 	.word	0x08011213
 8011164:	080111df 	.word	0x080111df
 8011168:	08011213 	.word	0x08011213
 801116c:	08011213 	.word	0x08011213
 8011170:	08011213 	.word	0x08011213
 8011174:	08011213 	.word	0x08011213
 8011178:	08011213 	.word	0x08011213
 801117c:	08011213 	.word	0x08011213
 8011180:	08011213 	.word	0x08011213
 8011184:	08011213 	.word	0x08011213
 8011188:	08011213 	.word	0x08011213
 801118c:	08011213 	.word	0x08011213
 8011190:	08011213 	.word	0x08011213
 8011194:	08011213 	.word	0x08011213
 8011198:	08011213 	.word	0x08011213
 801119c:	08011213 	.word	0x08011213
 80111a0:	08011213 	.word	0x08011213
 80111a4:	08011205 	.word	0x08011205
 80111a8:	2b40      	cmp	r3, #64	; 0x40
 80111aa:	d02e      	beq.n	801120a <UART_SetConfig+0x8aa>
 80111ac:	e031      	b.n	8011212 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80111ae:	f7f9 fca3 	bl	800aaf8 <HAL_RCC_GetPCLK1Freq>
 80111b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80111b4:	e033      	b.n	801121e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80111b6:	f7f9 fcb5 	bl	800ab24 <HAL_RCC_GetPCLK2Freq>
 80111ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80111bc:	e02f      	b.n	801121e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80111be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7fb fca6 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80111c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111cc:	e027      	b.n	801121e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80111ce:	f107 0318 	add.w	r3, r7, #24
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fb fdf2 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80111d8:	69fb      	ldr	r3, [r7, #28]
 80111da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111dc:	e01f      	b.n	801121e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80111de:	4b2d      	ldr	r3, [pc, #180]	; (8011294 <UART_SetConfig+0x934>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f003 0320 	and.w	r3, r3, #32
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d009      	beq.n	80111fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80111ea:	4b2a      	ldr	r3, [pc, #168]	; (8011294 <UART_SetConfig+0x934>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	08db      	lsrs	r3, r3, #3
 80111f0:	f003 0303 	and.w	r3, r3, #3
 80111f4:	4a24      	ldr	r2, [pc, #144]	; (8011288 <UART_SetConfig+0x928>)
 80111f6:	fa22 f303 	lsr.w	r3, r2, r3
 80111fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80111fc:	e00f      	b.n	801121e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80111fe:	4b22      	ldr	r3, [pc, #136]	; (8011288 <UART_SetConfig+0x928>)
 8011200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011202:	e00c      	b.n	801121e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011204:	4b21      	ldr	r3, [pc, #132]	; (801128c <UART_SetConfig+0x92c>)
 8011206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011208:	e009      	b.n	801121e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801120a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801120e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011210:	e005      	b.n	801121e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011212:	2300      	movs	r3, #0
 8011214:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011216:	2301      	movs	r3, #1
 8011218:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801121c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801121e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011220:	2b00      	cmp	r3, #0
 8011222:	f000 80e7 	beq.w	80113f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801122a:	4a19      	ldr	r2, [pc, #100]	; (8011290 <UART_SetConfig+0x930>)
 801122c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011230:	461a      	mov	r2, r3
 8011232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011234:	fbb3 f3f2 	udiv	r3, r3, r2
 8011238:	005a      	lsls	r2, r3, #1
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	085b      	lsrs	r3, r3, #1
 8011240:	441a      	add	r2, r3
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	fbb2 f3f3 	udiv	r3, r2, r3
 801124a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124e:	2b0f      	cmp	r3, #15
 8011250:	d916      	bls.n	8011280 <UART_SetConfig+0x920>
 8011252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011258:	d212      	bcs.n	8011280 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801125a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125c:	b29b      	uxth	r3, r3
 801125e:	f023 030f 	bic.w	r3, r3, #15
 8011262:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011266:	085b      	lsrs	r3, r3, #1
 8011268:	b29b      	uxth	r3, r3
 801126a:	f003 0307 	and.w	r3, r3, #7
 801126e:	b29a      	uxth	r2, r3
 8011270:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011272:	4313      	orrs	r3, r2
 8011274:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801127c:	60da      	str	r2, [r3, #12]
 801127e:	e0b9      	b.n	80113f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011280:	2301      	movs	r3, #1
 8011282:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011286:	e0b5      	b.n	80113f4 <UART_SetConfig+0xa94>
 8011288:	03d09000 	.word	0x03d09000
 801128c:	003d0900 	.word	0x003d0900
 8011290:	080170fc 	.word	0x080170fc
 8011294:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011298:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801129c:	2b20      	cmp	r3, #32
 801129e:	dc49      	bgt.n	8011334 <UART_SetConfig+0x9d4>
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	db7c      	blt.n	801139e <UART_SetConfig+0xa3e>
 80112a4:	2b20      	cmp	r3, #32
 80112a6:	d87a      	bhi.n	801139e <UART_SetConfig+0xa3e>
 80112a8:	a201      	add	r2, pc, #4	; (adr r2, 80112b0 <UART_SetConfig+0x950>)
 80112aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ae:	bf00      	nop
 80112b0:	0801133b 	.word	0x0801133b
 80112b4:	08011343 	.word	0x08011343
 80112b8:	0801139f 	.word	0x0801139f
 80112bc:	0801139f 	.word	0x0801139f
 80112c0:	0801134b 	.word	0x0801134b
 80112c4:	0801139f 	.word	0x0801139f
 80112c8:	0801139f 	.word	0x0801139f
 80112cc:	0801139f 	.word	0x0801139f
 80112d0:	0801135b 	.word	0x0801135b
 80112d4:	0801139f 	.word	0x0801139f
 80112d8:	0801139f 	.word	0x0801139f
 80112dc:	0801139f 	.word	0x0801139f
 80112e0:	0801139f 	.word	0x0801139f
 80112e4:	0801139f 	.word	0x0801139f
 80112e8:	0801139f 	.word	0x0801139f
 80112ec:	0801139f 	.word	0x0801139f
 80112f0:	0801136b 	.word	0x0801136b
 80112f4:	0801139f 	.word	0x0801139f
 80112f8:	0801139f 	.word	0x0801139f
 80112fc:	0801139f 	.word	0x0801139f
 8011300:	0801139f 	.word	0x0801139f
 8011304:	0801139f 	.word	0x0801139f
 8011308:	0801139f 	.word	0x0801139f
 801130c:	0801139f 	.word	0x0801139f
 8011310:	0801139f 	.word	0x0801139f
 8011314:	0801139f 	.word	0x0801139f
 8011318:	0801139f 	.word	0x0801139f
 801131c:	0801139f 	.word	0x0801139f
 8011320:	0801139f 	.word	0x0801139f
 8011324:	0801139f 	.word	0x0801139f
 8011328:	0801139f 	.word	0x0801139f
 801132c:	0801139f 	.word	0x0801139f
 8011330:	08011391 	.word	0x08011391
 8011334:	2b40      	cmp	r3, #64	; 0x40
 8011336:	d02e      	beq.n	8011396 <UART_SetConfig+0xa36>
 8011338:	e031      	b.n	801139e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801133a:	f7f9 fbdd 	bl	800aaf8 <HAL_RCC_GetPCLK1Freq>
 801133e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011340:	e033      	b.n	80113aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011342:	f7f9 fbef 	bl	800ab24 <HAL_RCC_GetPCLK2Freq>
 8011346:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011348:	e02f      	b.n	80113aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801134e:	4618      	mov	r0, r3
 8011350:	f7fb fbe0 	bl	800cb14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011358:	e027      	b.n	80113aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801135a:	f107 0318 	add.w	r3, r7, #24
 801135e:	4618      	mov	r0, r3
 8011360:	f7fb fd2c 	bl	800cdbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011364:	69fb      	ldr	r3, [r7, #28]
 8011366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011368:	e01f      	b.n	80113aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801136a:	4b2d      	ldr	r3, [pc, #180]	; (8011420 <UART_SetConfig+0xac0>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f003 0320 	and.w	r3, r3, #32
 8011372:	2b00      	cmp	r3, #0
 8011374:	d009      	beq.n	801138a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011376:	4b2a      	ldr	r3, [pc, #168]	; (8011420 <UART_SetConfig+0xac0>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	08db      	lsrs	r3, r3, #3
 801137c:	f003 0303 	and.w	r3, r3, #3
 8011380:	4a28      	ldr	r2, [pc, #160]	; (8011424 <UART_SetConfig+0xac4>)
 8011382:	fa22 f303 	lsr.w	r3, r2, r3
 8011386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011388:	e00f      	b.n	80113aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801138a:	4b26      	ldr	r3, [pc, #152]	; (8011424 <UART_SetConfig+0xac4>)
 801138c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801138e:	e00c      	b.n	80113aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011390:	4b25      	ldr	r3, [pc, #148]	; (8011428 <UART_SetConfig+0xac8>)
 8011392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011394:	e009      	b.n	80113aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801139a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801139c:	e005      	b.n	80113aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801139e:	2300      	movs	r3, #0
 80113a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80113a2:	2301      	movs	r3, #1
 80113a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80113a8:	bf00      	nop
    }

    if (pclk != 0U)
 80113aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d021      	beq.n	80113f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b4:	4a1d      	ldr	r2, [pc, #116]	; (801142c <UART_SetConfig+0xacc>)
 80113b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113ba:	461a      	mov	r2, r3
 80113bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113be:	fbb3 f2f2 	udiv	r2, r3, r2
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	085b      	lsrs	r3, r3, #1
 80113c8:	441a      	add	r2, r3
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80113d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80113d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d6:	2b0f      	cmp	r3, #15
 80113d8:	d909      	bls.n	80113ee <UART_SetConfig+0xa8e>
 80113da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113e0:	d205      	bcs.n	80113ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80113e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e4:	b29a      	uxth	r2, r3
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	60da      	str	r2, [r3, #12]
 80113ec:	e002      	b.n	80113f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80113ee:	2301      	movs	r3, #1
 80113f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	2201      	movs	r2, #1
 80113f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	2201      	movs	r2, #1
 8011400:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	2200      	movs	r2, #0
 8011408:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	2200      	movs	r2, #0
 801140e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011410:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011414:	4618      	mov	r0, r3
 8011416:	3748      	adds	r7, #72	; 0x48
 8011418:	46bd      	mov	sp, r7
 801141a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801141e:	bf00      	nop
 8011420:	58024400 	.word	0x58024400
 8011424:	03d09000 	.word	0x03d09000
 8011428:	003d0900 	.word	0x003d0900
 801142c:	080170fc 	.word	0x080170fc

08011430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801143c:	f003 0308 	and.w	r3, r3, #8
 8011440:	2b00      	cmp	r3, #0
 8011442:	d00a      	beq.n	801145a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	430a      	orrs	r2, r1
 8011458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801145e:	f003 0301 	and.w	r3, r3, #1
 8011462:	2b00      	cmp	r3, #0
 8011464:	d00a      	beq.n	801147c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	430a      	orrs	r2, r1
 801147a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011480:	f003 0302 	and.w	r3, r3, #2
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00a      	beq.n	801149e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	430a      	orrs	r2, r1
 801149c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a2:	f003 0304 	and.w	r3, r3, #4
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d00a      	beq.n	80114c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	430a      	orrs	r2, r1
 80114be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c4:	f003 0310 	and.w	r3, r3, #16
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d00a      	beq.n	80114e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	689b      	ldr	r3, [r3, #8]
 80114d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	430a      	orrs	r2, r1
 80114e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114e6:	f003 0320 	and.w	r3, r3, #32
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d00a      	beq.n	8011504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	689b      	ldr	r3, [r3, #8]
 80114f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	430a      	orrs	r2, r1
 8011502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801150c:	2b00      	cmp	r3, #0
 801150e:	d01a      	beq.n	8011546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	430a      	orrs	r2, r1
 8011524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801152a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801152e:	d10a      	bne.n	8011546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	430a      	orrs	r2, r1
 8011544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801154a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801154e:	2b00      	cmp	r3, #0
 8011550:	d00a      	beq.n	8011568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	430a      	orrs	r2, r1
 8011566:	605a      	str	r2, [r3, #4]
  }
}
 8011568:	bf00      	nop
 801156a:	370c      	adds	r7, #12
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b098      	sub	sp, #96	; 0x60
 8011578:	af02      	add	r7, sp, #8
 801157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2200      	movs	r2, #0
 8011580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011584:	f7f2 fb72 	bl	8003c6c <HAL_GetTick>
 8011588:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f003 0308 	and.w	r3, r3, #8
 8011594:	2b08      	cmp	r3, #8
 8011596:	d12f      	bne.n	80115f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801159c:	9300      	str	r3, [sp, #0]
 801159e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115a0:	2200      	movs	r2, #0
 80115a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f000 f88e 	bl	80116c8 <UART_WaitOnFlagUntilTimeout>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d022      	beq.n	80115f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ba:	e853 3f00 	ldrex	r3, [r3]
 80115be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80115c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115c6:	653b      	str	r3, [r7, #80]	; 0x50
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	461a      	mov	r2, r3
 80115ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115d0:	647b      	str	r3, [r7, #68]	; 0x44
 80115d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80115d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80115d8:	e841 2300 	strex	r3, r2, [r1]
 80115dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80115de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d1e6      	bne.n	80115b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2220      	movs	r2, #32
 80115e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2200      	movs	r2, #0
 80115f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80115f4:	2303      	movs	r3, #3
 80115f6:	e063      	b.n	80116c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f003 0304 	and.w	r3, r3, #4
 8011602:	2b04      	cmp	r3, #4
 8011604:	d149      	bne.n	801169a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011606:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801160e:	2200      	movs	r2, #0
 8011610:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f000 f857 	bl	80116c8 <UART_WaitOnFlagUntilTimeout>
 801161a:	4603      	mov	r3, r0
 801161c:	2b00      	cmp	r3, #0
 801161e:	d03c      	beq.n	801169a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011628:	e853 3f00 	ldrex	r3, [r3]
 801162c:	623b      	str	r3, [r7, #32]
   return(result);
 801162e:	6a3b      	ldr	r3, [r7, #32]
 8011630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011634:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	461a      	mov	r2, r3
 801163c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801163e:	633b      	str	r3, [r7, #48]	; 0x30
 8011640:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011646:	e841 2300 	strex	r3, r2, [r1]
 801164a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164e:	2b00      	cmp	r3, #0
 8011650:	d1e6      	bne.n	8011620 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	3308      	adds	r3, #8
 8011658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	e853 3f00 	ldrex	r3, [r3]
 8011660:	60fb      	str	r3, [r7, #12]
   return(result);
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f023 0301 	bic.w	r3, r3, #1
 8011668:	64bb      	str	r3, [r7, #72]	; 0x48
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	3308      	adds	r3, #8
 8011670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011672:	61fa      	str	r2, [r7, #28]
 8011674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011676:	69b9      	ldr	r1, [r7, #24]
 8011678:	69fa      	ldr	r2, [r7, #28]
 801167a:	e841 2300 	strex	r3, r2, [r1]
 801167e:	617b      	str	r3, [r7, #20]
   return(result);
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d1e5      	bne.n	8011652 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2220      	movs	r2, #32
 801168a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2200      	movs	r2, #0
 8011692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011696:	2303      	movs	r3, #3
 8011698:	e012      	b.n	80116c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2220      	movs	r2, #32
 801169e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2220      	movs	r2, #32
 80116a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2200      	movs	r2, #0
 80116ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2200      	movs	r2, #0
 80116b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2200      	movs	r2, #0
 80116ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80116be:	2300      	movs	r3, #0
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3758      	adds	r7, #88	; 0x58
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b084      	sub	sp, #16
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	603b      	str	r3, [r7, #0]
 80116d4:	4613      	mov	r3, r2
 80116d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116d8:	e04f      	b.n	801177a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116e0:	d04b      	beq.n	801177a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80116e2:	f7f2 fac3 	bl	8003c6c <HAL_GetTick>
 80116e6:	4602      	mov	r2, r0
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	1ad3      	subs	r3, r2, r3
 80116ec:	69ba      	ldr	r2, [r7, #24]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d302      	bcc.n	80116f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d101      	bne.n	80116fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80116f8:	2303      	movs	r3, #3
 80116fa:	e04e      	b.n	801179a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	f003 0304 	and.w	r3, r3, #4
 8011706:	2b00      	cmp	r3, #0
 8011708:	d037      	beq.n	801177a <UART_WaitOnFlagUntilTimeout+0xb2>
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	2b80      	cmp	r3, #128	; 0x80
 801170e:	d034      	beq.n	801177a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	2b40      	cmp	r3, #64	; 0x40
 8011714:	d031      	beq.n	801177a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	69db      	ldr	r3, [r3, #28]
 801171c:	f003 0308 	and.w	r3, r3, #8
 8011720:	2b08      	cmp	r3, #8
 8011722:	d110      	bne.n	8011746 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	2208      	movs	r2, #8
 801172a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801172c:	68f8      	ldr	r0, [r7, #12]
 801172e:	f000 f99d 	bl	8011a6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	2208      	movs	r2, #8
 8011736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	2200      	movs	r2, #0
 801173e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011742:	2301      	movs	r3, #1
 8011744:	e029      	b.n	801179a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	69db      	ldr	r3, [r3, #28]
 801174c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011754:	d111      	bne.n	801177a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801175e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011760:	68f8      	ldr	r0, [r7, #12]
 8011762:	f000 f983 	bl	8011a6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2220      	movs	r2, #32
 801176a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2200      	movs	r2, #0
 8011772:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011776:	2303      	movs	r3, #3
 8011778:	e00f      	b.n	801179a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	69da      	ldr	r2, [r3, #28]
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	4013      	ands	r3, r2
 8011784:	68ba      	ldr	r2, [r7, #8]
 8011786:	429a      	cmp	r2, r3
 8011788:	bf0c      	ite	eq
 801178a:	2301      	moveq	r3, #1
 801178c:	2300      	movne	r3, #0
 801178e:	b2db      	uxtb	r3, r3
 8011790:	461a      	mov	r2, r3
 8011792:	79fb      	ldrb	r3, [r7, #7]
 8011794:	429a      	cmp	r2, r3
 8011796:	d0a0      	beq.n	80116da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011798:	2300      	movs	r3, #0
}
 801179a:	4618      	mov	r0, r3
 801179c:	3710      	adds	r7, #16
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
	...

080117a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b0a3      	sub	sp, #140	; 0x8c
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	4613      	mov	r3, r2
 80117b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	68ba      	ldr	r2, [r7, #8]
 80117b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	88fa      	ldrh	r2, [r7, #6]
 80117bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	88fa      	ldrh	r2, [r7, #6]
 80117c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	2200      	movs	r2, #0
 80117cc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	689b      	ldr	r3, [r3, #8]
 80117d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117d6:	d10e      	bne.n	80117f6 <UART_Start_Receive_IT+0x52>
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	691b      	ldr	r3, [r3, #16]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d105      	bne.n	80117ec <UART_Start_Receive_IT+0x48>
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80117e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80117ea:	e02d      	b.n	8011848 <UART_Start_Receive_IT+0xa4>
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	22ff      	movs	r2, #255	; 0xff
 80117f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80117f4:	e028      	b.n	8011848 <UART_Start_Receive_IT+0xa4>
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	689b      	ldr	r3, [r3, #8]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d10d      	bne.n	801181a <UART_Start_Receive_IT+0x76>
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	691b      	ldr	r3, [r3, #16]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d104      	bne.n	8011810 <UART_Start_Receive_IT+0x6c>
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	22ff      	movs	r2, #255	; 0xff
 801180a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801180e:	e01b      	b.n	8011848 <UART_Start_Receive_IT+0xa4>
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	227f      	movs	r2, #127	; 0x7f
 8011814:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011818:	e016      	b.n	8011848 <UART_Start_Receive_IT+0xa4>
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	689b      	ldr	r3, [r3, #8]
 801181e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011822:	d10d      	bne.n	8011840 <UART_Start_Receive_IT+0x9c>
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	691b      	ldr	r3, [r3, #16]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d104      	bne.n	8011836 <UART_Start_Receive_IT+0x92>
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	227f      	movs	r2, #127	; 0x7f
 8011830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011834:	e008      	b.n	8011848 <UART_Start_Receive_IT+0xa4>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	223f      	movs	r2, #63	; 0x3f
 801183a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801183e:	e003      	b.n	8011848 <UART_Start_Receive_IT+0xa4>
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2200      	movs	r2, #0
 8011844:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	2200      	movs	r2, #0
 801184c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2222      	movs	r2, #34	; 0x22
 8011854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	3308      	adds	r3, #8
 801185e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011862:	e853 3f00 	ldrex	r3, [r3]
 8011866:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801186a:	f043 0301 	orr.w	r3, r3, #1
 801186e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	3308      	adds	r3, #8
 8011878:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801187c:	673a      	str	r2, [r7, #112]	; 0x70
 801187e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011880:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011882:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011884:	e841 2300 	strex	r3, r2, [r1]
 8011888:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801188a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801188c:	2b00      	cmp	r3, #0
 801188e:	d1e3      	bne.n	8011858 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011898:	d14f      	bne.n	801193a <UART_Start_Receive_IT+0x196>
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80118a0:	88fa      	ldrh	r2, [r7, #6]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d349      	bcc.n	801193a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	689b      	ldr	r3, [r3, #8]
 80118aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118ae:	d107      	bne.n	80118c0 <UART_Start_Receive_IT+0x11c>
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	691b      	ldr	r3, [r3, #16]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d103      	bne.n	80118c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	4a47      	ldr	r2, [pc, #284]	; (80119d8 <UART_Start_Receive_IT+0x234>)
 80118bc:	675a      	str	r2, [r3, #116]	; 0x74
 80118be:	e002      	b.n	80118c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	4a46      	ldr	r2, [pc, #280]	; (80119dc <UART_Start_Receive_IT+0x238>)
 80118c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	691b      	ldr	r3, [r3, #16]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d01a      	beq.n	8011904 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118d6:	e853 3f00 	ldrex	r3, [r3]
 80118da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80118dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80118e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	461a      	mov	r2, r3
 80118ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80118f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118f2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80118f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80118f8:	e841 2300 	strex	r3, r2, [r1]
 80118fc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80118fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011900:	2b00      	cmp	r3, #0
 8011902:	d1e4      	bne.n	80118ce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	3308      	adds	r3, #8
 801190a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801190c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801190e:	e853 3f00 	ldrex	r3, [r3]
 8011912:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801191a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	3308      	adds	r3, #8
 8011922:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011924:	64ba      	str	r2, [r7, #72]	; 0x48
 8011926:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011928:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801192a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801192c:	e841 2300 	strex	r3, r2, [r1]
 8011930:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011934:	2b00      	cmp	r3, #0
 8011936:	d1e5      	bne.n	8011904 <UART_Start_Receive_IT+0x160>
 8011938:	e046      	b.n	80119c8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	689b      	ldr	r3, [r3, #8]
 801193e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011942:	d107      	bne.n	8011954 <UART_Start_Receive_IT+0x1b0>
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	691b      	ldr	r3, [r3, #16]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d103      	bne.n	8011954 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	4a24      	ldr	r2, [pc, #144]	; (80119e0 <UART_Start_Receive_IT+0x23c>)
 8011950:	675a      	str	r2, [r3, #116]	; 0x74
 8011952:	e002      	b.n	801195a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	4a23      	ldr	r2, [pc, #140]	; (80119e4 <UART_Start_Receive_IT+0x240>)
 8011958:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	691b      	ldr	r3, [r3, #16]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d019      	beq.n	8011996 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196a:	e853 3f00 	ldrex	r3, [r3]
 801196e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011972:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011976:	677b      	str	r3, [r7, #116]	; 0x74
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	461a      	mov	r2, r3
 801197e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011980:	637b      	str	r3, [r7, #52]	; 0x34
 8011982:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011988:	e841 2300 	strex	r3, r2, [r1]
 801198c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011990:	2b00      	cmp	r3, #0
 8011992:	d1e6      	bne.n	8011962 <UART_Start_Receive_IT+0x1be>
 8011994:	e018      	b.n	80119c8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	e853 3f00 	ldrex	r3, [r3]
 80119a2:	613b      	str	r3, [r7, #16]
   return(result);
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	f043 0320 	orr.w	r3, r3, #32
 80119aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	461a      	mov	r2, r3
 80119b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80119b4:	623b      	str	r3, [r7, #32]
 80119b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b8:	69f9      	ldr	r1, [r7, #28]
 80119ba:	6a3a      	ldr	r2, [r7, #32]
 80119bc:	e841 2300 	strex	r3, r2, [r1]
 80119c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80119c2:	69bb      	ldr	r3, [r7, #24]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d1e6      	bne.n	8011996 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80119c8:	2300      	movs	r3, #0
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	378c      	adds	r7, #140	; 0x8c
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr
 80119d6:	bf00      	nop
 80119d8:	080123bd 	.word	0x080123bd
 80119dc:	0801205d 	.word	0x0801205d
 80119e0:	08011ea5 	.word	0x08011ea5
 80119e4:	08011ced 	.word	0x08011ced

080119e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80119e8:	b480      	push	{r7}
 80119ea:	b08f      	sub	sp, #60	; 0x3c
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119f6:	6a3b      	ldr	r3, [r7, #32]
 80119f8:	e853 3f00 	ldrex	r3, [r3]
 80119fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011a04:	637b      	str	r3, [r7, #52]	; 0x34
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a10:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a16:	e841 2300 	strex	r3, r2, [r1]
 8011a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d1e6      	bne.n	80119f0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	3308      	adds	r3, #8
 8011a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	e853 3f00 	ldrex	r3, [r3]
 8011a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011a38:	633b      	str	r3, [r7, #48]	; 0x30
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	3308      	adds	r3, #8
 8011a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a42:	61ba      	str	r2, [r7, #24]
 8011a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a46:	6979      	ldr	r1, [r7, #20]
 8011a48:	69ba      	ldr	r2, [r7, #24]
 8011a4a:	e841 2300 	strex	r3, r2, [r1]
 8011a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d1e5      	bne.n	8011a22 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2220      	movs	r2, #32
 8011a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011a5e:	bf00      	nop
 8011a60:	373c      	adds	r7, #60	; 0x3c
 8011a62:	46bd      	mov	sp, r7
 8011a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a68:	4770      	bx	lr
	...

08011a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b095      	sub	sp, #84	; 0x54
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a7c:	e853 3f00 	ldrex	r3, [r3]
 8011a80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	461a      	mov	r2, r3
 8011a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a92:	643b      	str	r3, [r7, #64]	; 0x40
 8011a94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a9a:	e841 2300 	strex	r3, r2, [r1]
 8011a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d1e6      	bne.n	8011a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	3308      	adds	r3, #8
 8011aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aae:	6a3b      	ldr	r3, [r7, #32]
 8011ab0:	e853 3f00 	ldrex	r3, [r3]
 8011ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ab6:	69fa      	ldr	r2, [r7, #28]
 8011ab8:	4b1e      	ldr	r3, [pc, #120]	; (8011b34 <UART_EndRxTransfer+0xc8>)
 8011aba:	4013      	ands	r3, r2
 8011abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	3308      	adds	r3, #8
 8011ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ace:	e841 2300 	strex	r3, r2, [r1]
 8011ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d1e5      	bne.n	8011aa6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d118      	bne.n	8011b14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	e853 3f00 	ldrex	r3, [r3]
 8011aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	f023 0310 	bic.w	r3, r3, #16
 8011af6:	647b      	str	r3, [r7, #68]	; 0x44
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	461a      	mov	r2, r3
 8011afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b00:	61bb      	str	r3, [r7, #24]
 8011b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b04:	6979      	ldr	r1, [r7, #20]
 8011b06:	69ba      	ldr	r2, [r7, #24]
 8011b08:	e841 2300 	strex	r3, r2, [r1]
 8011b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d1e6      	bne.n	8011ae2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2220      	movs	r2, #32
 8011b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2200      	movs	r2, #0
 8011b26:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011b28:	bf00      	nop
 8011b2a:	3754      	adds	r7, #84	; 0x54
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr
 8011b34:	effffffe 	.word	0xeffffffe

08011b38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b090      	sub	sp, #64	; 0x40
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b44:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	69db      	ldr	r3, [r3, #28]
 8011b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b4e:	d037      	beq.n	8011bc0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b52:	2200      	movs	r2, #0
 8011b54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	3308      	adds	r3, #8
 8011b5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b62:	e853 3f00 	ldrex	r3, [r3]
 8011b66:	623b      	str	r3, [r7, #32]
   return(result);
 8011b68:	6a3b      	ldr	r3, [r7, #32]
 8011b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	3308      	adds	r3, #8
 8011b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b78:	633a      	str	r2, [r7, #48]	; 0x30
 8011b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b80:	e841 2300 	strex	r3, r2, [r1]
 8011b84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d1e5      	bne.n	8011b58 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	e853 3f00 	ldrex	r3, [r3]
 8011b98:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8011ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011baa:	61fb      	str	r3, [r7, #28]
 8011bac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bae:	69b9      	ldr	r1, [r7, #24]
 8011bb0:	69fa      	ldr	r2, [r7, #28]
 8011bb2:	e841 2300 	strex	r3, r2, [r1]
 8011bb6:	617b      	str	r3, [r7, #20]
   return(result);
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d1e6      	bne.n	8011b8c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011bbe:	e002      	b.n	8011bc6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011bc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011bc2:	f7f0 fa1f 	bl	8002004 <HAL_UART_TxCpltCallback>
}
 8011bc6:	bf00      	nop
 8011bc8:	3740      	adds	r7, #64	; 0x40
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b084      	sub	sp, #16
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bda:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011bdc:	68f8      	ldr	r0, [r7, #12]
 8011bde:	f7fe fe9f 	bl	8010920 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011be2:	bf00      	nop
 8011be4:	3710      	adds	r7, #16
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b086      	sub	sp, #24
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bf6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bfe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c06:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	689b      	ldr	r3, [r3, #8]
 8011c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c12:	2b80      	cmp	r3, #128	; 0x80
 8011c14:	d109      	bne.n	8011c2a <UART_DMAError+0x40>
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	2b21      	cmp	r3, #33	; 0x21
 8011c1a:	d106      	bne.n	8011c2a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011c24:	6978      	ldr	r0, [r7, #20]
 8011c26:	f7ff fedf 	bl	80119e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	689b      	ldr	r3, [r3, #8]
 8011c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c34:	2b40      	cmp	r3, #64	; 0x40
 8011c36:	d109      	bne.n	8011c4c <UART_DMAError+0x62>
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	2b22      	cmp	r3, #34	; 0x22
 8011c3c:	d106      	bne.n	8011c4c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	2200      	movs	r2, #0
 8011c42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011c46:	6978      	ldr	r0, [r7, #20]
 8011c48:	f7ff ff10 	bl	8011a6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c52:	f043 0210 	orr.w	r2, r3, #16
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011c5c:	6978      	ldr	r0, [r7, #20]
 8011c5e:	f7fe fe69 	bl	8010934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c62:	bf00      	nop
 8011c64:	3718      	adds	r7, #24
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}

08011c6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b084      	sub	sp, #16
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	2200      	movs	r2, #0
 8011c84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011c88:	68f8      	ldr	r0, [r7, #12]
 8011c8a:	f7fe fe53 	bl	8010934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c8e:	bf00      	nop
 8011c90:	3710      	adds	r7, #16
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}

08011c96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011c96:	b580      	push	{r7, lr}
 8011c98:	b088      	sub	sp, #32
 8011c9a:	af00      	add	r7, sp, #0
 8011c9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	e853 3f00 	ldrex	r3, [r3]
 8011caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cb2:	61fb      	str	r3, [r7, #28]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	461a      	mov	r2, r3
 8011cba:	69fb      	ldr	r3, [r7, #28]
 8011cbc:	61bb      	str	r3, [r7, #24]
 8011cbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc0:	6979      	ldr	r1, [r7, #20]
 8011cc2:	69ba      	ldr	r2, [r7, #24]
 8011cc4:	e841 2300 	strex	r3, r2, [r1]
 8011cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d1e6      	bne.n	8011c9e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2220      	movs	r2, #32
 8011cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f7f0 f990 	bl	8002004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ce4:	bf00      	nop
 8011ce6:	3720      	adds	r7, #32
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}

08011cec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b09c      	sub	sp, #112	; 0x70
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011cfa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d04:	2b22      	cmp	r3, #34	; 0x22
 8011d06:	f040 80be 	bne.w	8011e86 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011d14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011d18:	b2d9      	uxtb	r1, r3
 8011d1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011d1e:	b2da      	uxtb	r2, r3
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d24:	400a      	ands	r2, r1
 8011d26:	b2d2      	uxtb	r2, r2
 8011d28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d2e:	1c5a      	adds	r2, r3, #1
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	3b01      	subs	r3, #1
 8011d3e:	b29a      	uxth	r2, r3
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	f040 80a1 	bne.w	8011e96 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d5c:	e853 3f00 	ldrex	r3, [r3]
 8011d60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d68:	66bb      	str	r3, [r7, #104]	; 0x68
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d72:	65bb      	str	r3, [r7, #88]	; 0x58
 8011d74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011d7a:	e841 2300 	strex	r3, r2, [r1]
 8011d7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d1e6      	bne.n	8011d54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	3308      	adds	r3, #8
 8011d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d90:	e853 3f00 	ldrex	r3, [r3]
 8011d94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d98:	f023 0301 	bic.w	r3, r3, #1
 8011d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	3308      	adds	r3, #8
 8011da4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011da6:	647a      	str	r2, [r7, #68]	; 0x44
 8011da8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011daa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011dae:	e841 2300 	strex	r3, r2, [r1]
 8011db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d1e5      	bne.n	8011d86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2220      	movs	r2, #32
 8011dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4a33      	ldr	r2, [pc, #204]	; (8011ea0 <UART_RxISR_8BIT+0x1b4>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d01f      	beq.n	8011e18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d018      	beq.n	8011e18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dee:	e853 3f00 	ldrex	r3, [r3]
 8011df2:	623b      	str	r3, [r7, #32]
   return(result);
 8011df4:	6a3b      	ldr	r3, [r7, #32]
 8011df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011dfa:	663b      	str	r3, [r7, #96]	; 0x60
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	461a      	mov	r2, r3
 8011e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e04:	633b      	str	r3, [r7, #48]	; 0x30
 8011e06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e0c:	e841 2300 	strex	r3, r2, [r1]
 8011e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d1e6      	bne.n	8011de6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d12e      	bne.n	8011e7e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	e853 3f00 	ldrex	r3, [r3]
 8011e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	f023 0310 	bic.w	r3, r3, #16
 8011e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	461a      	mov	r2, r3
 8011e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e44:	61fb      	str	r3, [r7, #28]
 8011e46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e48:	69b9      	ldr	r1, [r7, #24]
 8011e4a:	69fa      	ldr	r2, [r7, #28]
 8011e4c:	e841 2300 	strex	r3, r2, [r1]
 8011e50:	617b      	str	r3, [r7, #20]
   return(result);
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d1e6      	bne.n	8011e26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	69db      	ldr	r3, [r3, #28]
 8011e5e:	f003 0310 	and.w	r3, r3, #16
 8011e62:	2b10      	cmp	r3, #16
 8011e64:	d103      	bne.n	8011e6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2210      	movs	r2, #16
 8011e6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011e74:	4619      	mov	r1, r3
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f7fe fd66 	bl	8010948 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011e7c:	e00b      	b.n	8011e96 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f7ee fc02 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8011e84:	e007      	b.n	8011e96 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	699a      	ldr	r2, [r3, #24]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f042 0208 	orr.w	r2, r2, #8
 8011e94:	619a      	str	r2, [r3, #24]
}
 8011e96:	bf00      	nop
 8011e98:	3770      	adds	r7, #112	; 0x70
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	58000c00 	.word	0x58000c00

08011ea4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b09c      	sub	sp, #112	; 0x70
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011eb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ebc:	2b22      	cmp	r3, #34	; 0x22
 8011ebe:	f040 80be 	bne.w	801203e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ed0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011ed2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011ed6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011eda:	4013      	ands	r3, r2
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ee0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ee6:	1c9a      	adds	r2, r3, #2
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	3b01      	subs	r3, #1
 8011ef6:	b29a      	uxth	r2, r3
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	f040 80a1 	bne.w	801204e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f14:	e853 3f00 	ldrex	r3, [r3]
 8011f18:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f20:	667b      	str	r3, [r7, #100]	; 0x64
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	461a      	mov	r2, r3
 8011f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8011f2c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011f32:	e841 2300 	strex	r3, r2, [r1]
 8011f36:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d1e6      	bne.n	8011f0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	3308      	adds	r3, #8
 8011f44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f48:	e853 3f00 	ldrex	r3, [r3]
 8011f4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f50:	f023 0301 	bic.w	r3, r3, #1
 8011f54:	663b      	str	r3, [r7, #96]	; 0x60
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	3308      	adds	r3, #8
 8011f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011f5e:	643a      	str	r2, [r7, #64]	; 0x40
 8011f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f66:	e841 2300 	strex	r3, r2, [r1]
 8011f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d1e5      	bne.n	8011f3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2220      	movs	r2, #32
 8011f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2200      	movs	r2, #0
 8011f84:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4a33      	ldr	r2, [pc, #204]	; (8012058 <UART_RxISR_16BIT+0x1b4>)
 8011f8c:	4293      	cmp	r3, r2
 8011f8e:	d01f      	beq.n	8011fd0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d018      	beq.n	8011fd0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa4:	6a3b      	ldr	r3, [r7, #32]
 8011fa6:	e853 3f00 	ldrex	r3, [r3]
 8011faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	461a      	mov	r2, r3
 8011fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fbe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fc4:	e841 2300 	strex	r3, r2, [r1]
 8011fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d1e6      	bne.n	8011f9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fd4:	2b01      	cmp	r3, #1
 8011fd6:	d12e      	bne.n	8012036 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	e853 3f00 	ldrex	r3, [r3]
 8011fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	f023 0310 	bic.w	r3, r3, #16
 8011ff2:	65bb      	str	r3, [r7, #88]	; 0x58
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ffc:	61bb      	str	r3, [r7, #24]
 8011ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012000:	6979      	ldr	r1, [r7, #20]
 8012002:	69ba      	ldr	r2, [r7, #24]
 8012004:	e841 2300 	strex	r3, r2, [r1]
 8012008:	613b      	str	r3, [r7, #16]
   return(result);
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d1e6      	bne.n	8011fde <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	69db      	ldr	r3, [r3, #28]
 8012016:	f003 0310 	and.w	r3, r3, #16
 801201a:	2b10      	cmp	r3, #16
 801201c:	d103      	bne.n	8012026 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2210      	movs	r2, #16
 8012024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801202c:	4619      	mov	r1, r3
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f7fe fc8a 	bl	8010948 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012034:	e00b      	b.n	801204e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f7ee fb26 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 801203c:	e007      	b.n	801204e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	699a      	ldr	r2, [r3, #24]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	f042 0208 	orr.w	r2, r2, #8
 801204c:	619a      	str	r2, [r3, #24]
}
 801204e:	bf00      	nop
 8012050:	3770      	adds	r7, #112	; 0x70
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	58000c00 	.word	0x58000c00

0801205c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b0ac      	sub	sp, #176	; 0xb0
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801206a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	69db      	ldr	r3, [r3, #28]
 8012074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	689b      	ldr	r3, [r3, #8]
 8012088:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012092:	2b22      	cmp	r3, #34	; 0x22
 8012094:	f040 8180 	bne.w	8012398 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801209e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80120a2:	e123      	b.n	80122ec <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120aa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80120ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80120b2:	b2d9      	uxtb	r1, r3
 80120b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80120b8:	b2da      	uxtb	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120be:	400a      	ands	r2, r1
 80120c0:	b2d2      	uxtb	r2, r2
 80120c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120c8:	1c5a      	adds	r2, r3, #1
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	3b01      	subs	r3, #1
 80120d8:	b29a      	uxth	r2, r3
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	69db      	ldr	r3, [r3, #28]
 80120e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80120ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80120ee:	f003 0307 	and.w	r3, r3, #7
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d053      	beq.n	801219e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80120f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80120fa:	f003 0301 	and.w	r3, r3, #1
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d011      	beq.n	8012126 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801210a:	2b00      	cmp	r3, #0
 801210c:	d00b      	beq.n	8012126 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2201      	movs	r2, #1
 8012114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801211c:	f043 0201 	orr.w	r2, r3, #1
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801212a:	f003 0302 	and.w	r3, r3, #2
 801212e:	2b00      	cmp	r3, #0
 8012130:	d011      	beq.n	8012156 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012136:	f003 0301 	and.w	r3, r3, #1
 801213a:	2b00      	cmp	r3, #0
 801213c:	d00b      	beq.n	8012156 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2202      	movs	r2, #2
 8012144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801214c:	f043 0204 	orr.w	r2, r3, #4
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801215a:	f003 0304 	and.w	r3, r3, #4
 801215e:	2b00      	cmp	r3, #0
 8012160:	d011      	beq.n	8012186 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012166:	f003 0301 	and.w	r3, r3, #1
 801216a:	2b00      	cmp	r3, #0
 801216c:	d00b      	beq.n	8012186 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	2204      	movs	r2, #4
 8012174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801217c:	f043 0202 	orr.w	r2, r3, #2
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801218c:	2b00      	cmp	r3, #0
 801218e:	d006      	beq.n	801219e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f7fe fbcf 	bl	8010934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2200      	movs	r2, #0
 801219a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	f040 80a0 	bne.w	80122ec <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80121b4:	e853 3f00 	ldrex	r3, [r3]
 80121b8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80121ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80121c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	461a      	mov	r2, r3
 80121ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80121ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80121d0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80121d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80121d6:	e841 2300 	strex	r3, r2, [r1]
 80121da:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80121dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d1e4      	bne.n	80121ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	3308      	adds	r3, #8
 80121e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121ec:	e853 3f00 	ldrex	r3, [r3]
 80121f0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80121f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80121f4:	4b6e      	ldr	r3, [pc, #440]	; (80123b0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80121f6:	4013      	ands	r3, r2
 80121f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	3308      	adds	r3, #8
 8012202:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012206:	66ba      	str	r2, [r7, #104]	; 0x68
 8012208:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801220a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801220c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801220e:	e841 2300 	strex	r3, r2, [r1]
 8012212:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012216:	2b00      	cmp	r3, #0
 8012218:	d1e3      	bne.n	80121e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2220      	movs	r2, #32
 801221e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2200      	movs	r2, #0
 8012226:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2200      	movs	r2, #0
 801222c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	4a60      	ldr	r2, [pc, #384]	; (80123b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012234:	4293      	cmp	r3, r2
 8012236:	d021      	beq.n	801227c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012242:	2b00      	cmp	r3, #0
 8012244:	d01a      	beq.n	801227c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801224c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801224e:	e853 3f00 	ldrex	r3, [r3]
 8012252:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012256:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801225a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	461a      	mov	r2, r3
 8012264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012268:	657b      	str	r3, [r7, #84]	; 0x54
 801226a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801226c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801226e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012270:	e841 2300 	strex	r3, r2, [r1]
 8012274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012278:	2b00      	cmp	r3, #0
 801227a:	d1e4      	bne.n	8012246 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012280:	2b01      	cmp	r3, #1
 8012282:	d130      	bne.n	80122e6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2200      	movs	r2, #0
 8012288:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012292:	e853 3f00 	ldrex	r3, [r3]
 8012296:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229a:	f023 0310 	bic.w	r3, r3, #16
 801229e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	461a      	mov	r2, r3
 80122a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80122ac:	643b      	str	r3, [r7, #64]	; 0x40
 80122ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122b4:	e841 2300 	strex	r3, r2, [r1]
 80122b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1e4      	bne.n	801228a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	69db      	ldr	r3, [r3, #28]
 80122c6:	f003 0310 	and.w	r3, r3, #16
 80122ca:	2b10      	cmp	r3, #16
 80122cc:	d103      	bne.n	80122d6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2210      	movs	r2, #16
 80122d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80122dc:	4619      	mov	r1, r3
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f7fe fb32 	bl	8010948 <HAL_UARTEx_RxEventCallback>
 80122e4:	e002      	b.n	80122ec <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7ee f9ce 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80122ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d006      	beq.n	8012302 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80122f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80122f8:	f003 0320 	and.w	r3, r3, #32
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f47f aed1 	bne.w	80120a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012308:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801230c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012310:	2b00      	cmp	r3, #0
 8012312:	d049      	beq.n	80123a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801231a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801231e:	429a      	cmp	r2, r3
 8012320:	d242      	bcs.n	80123a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	3308      	adds	r3, #8
 8012328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801232a:	6a3b      	ldr	r3, [r7, #32]
 801232c:	e853 3f00 	ldrex	r3, [r3]
 8012330:	61fb      	str	r3, [r7, #28]
   return(result);
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	3308      	adds	r3, #8
 8012342:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801234a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801234c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801234e:	e841 2300 	strex	r3, r2, [r1]
 8012352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012356:	2b00      	cmp	r3, #0
 8012358:	d1e3      	bne.n	8012322 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	4a16      	ldr	r2, [pc, #88]	; (80123b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801235e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	e853 3f00 	ldrex	r3, [r3]
 801236c:	60bb      	str	r3, [r7, #8]
   return(result);
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	f043 0320 	orr.w	r3, r3, #32
 8012374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	461a      	mov	r2, r3
 801237e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012382:	61bb      	str	r3, [r7, #24]
 8012384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012386:	6979      	ldr	r1, [r7, #20]
 8012388:	69ba      	ldr	r2, [r7, #24]
 801238a:	e841 2300 	strex	r3, r2, [r1]
 801238e:	613b      	str	r3, [r7, #16]
   return(result);
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d1e4      	bne.n	8012360 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012396:	e007      	b.n	80123a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	699a      	ldr	r2, [r3, #24]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f042 0208 	orr.w	r2, r2, #8
 80123a6:	619a      	str	r2, [r3, #24]
}
 80123a8:	bf00      	nop
 80123aa:	37b0      	adds	r7, #176	; 0xb0
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	effffffe 	.word	0xeffffffe
 80123b4:	58000c00 	.word	0x58000c00
 80123b8:	08011ced 	.word	0x08011ced

080123bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b0ae      	sub	sp, #184	; 0xb8
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	69db      	ldr	r3, [r3, #28]
 80123d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	689b      	ldr	r3, [r3, #8]
 80123e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123f2:	2b22      	cmp	r3, #34	; 0x22
 80123f4:	f040 8184 	bne.w	8012700 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80123fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012402:	e127      	b.n	8012654 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801240a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012416:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801241a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801241e:	4013      	ands	r3, r2
 8012420:	b29a      	uxth	r2, r3
 8012422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012426:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801242c:	1c9a      	adds	r2, r3, #2
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012438:	b29b      	uxth	r3, r3
 801243a:	3b01      	subs	r3, #1
 801243c:	b29a      	uxth	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	69db      	ldr	r3, [r3, #28]
 801244a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801244e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012452:	f003 0307 	and.w	r3, r3, #7
 8012456:	2b00      	cmp	r3, #0
 8012458:	d053      	beq.n	8012502 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801245a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801245e:	f003 0301 	and.w	r3, r3, #1
 8012462:	2b00      	cmp	r3, #0
 8012464:	d011      	beq.n	801248a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801246e:	2b00      	cmp	r3, #0
 8012470:	d00b      	beq.n	801248a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	2201      	movs	r2, #1
 8012478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012480:	f043 0201 	orr.w	r2, r3, #1
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801248a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801248e:	f003 0302 	and.w	r3, r3, #2
 8012492:	2b00      	cmp	r3, #0
 8012494:	d011      	beq.n	80124ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801249a:	f003 0301 	and.w	r3, r3, #1
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d00b      	beq.n	80124ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2202      	movs	r2, #2
 80124a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124b0:	f043 0204 	orr.w	r2, r3, #4
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80124be:	f003 0304 	and.w	r3, r3, #4
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d011      	beq.n	80124ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80124c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80124ca:	f003 0301 	and.w	r3, r3, #1
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d00b      	beq.n	80124ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	2204      	movs	r2, #4
 80124d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124e0:	f043 0202 	orr.w	r2, r3, #2
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d006      	beq.n	8012502 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7fe fa1d 	bl	8010934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2200      	movs	r2, #0
 80124fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012508:	b29b      	uxth	r3, r3
 801250a:	2b00      	cmp	r3, #0
 801250c:	f040 80a2 	bne.w	8012654 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012518:	e853 3f00 	ldrex	r3, [r3]
 801251c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801251e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	461a      	mov	r2, r3
 801252e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012536:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012538:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801253a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801253e:	e841 2300 	strex	r3, r2, [r1]
 8012542:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012546:	2b00      	cmp	r3, #0
 8012548:	d1e2      	bne.n	8012510 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	3308      	adds	r3, #8
 8012550:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012554:	e853 3f00 	ldrex	r3, [r3]
 8012558:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801255a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801255c:	4b6e      	ldr	r3, [pc, #440]	; (8012718 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801255e:	4013      	ands	r3, r2
 8012560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	3308      	adds	r3, #8
 801256a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801256e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012570:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012572:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012576:	e841 2300 	strex	r3, r2, [r1]
 801257a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801257c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801257e:	2b00      	cmp	r3, #0
 8012580:	d1e3      	bne.n	801254a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2220      	movs	r2, #32
 8012586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2200      	movs	r2, #0
 801258e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2200      	movs	r2, #0
 8012594:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4a60      	ldr	r2, [pc, #384]	; (801271c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d021      	beq.n	80125e4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d01a      	beq.n	80125e4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125b6:	e853 3f00 	ldrex	r3, [r3]
 80125ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80125bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80125c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	461a      	mov	r2, r3
 80125cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80125d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80125d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80125d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80125d8:	e841 2300 	strex	r3, r2, [r1]
 80125dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80125de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d1e4      	bne.n	80125ae <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125e8:	2b01      	cmp	r3, #1
 80125ea:	d130      	bne.n	801264e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fa:	e853 3f00 	ldrex	r3, [r3]
 80125fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012602:	f023 0310 	bic.w	r3, r3, #16
 8012606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	461a      	mov	r2, r3
 8012610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012614:	647b      	str	r3, [r7, #68]	; 0x44
 8012616:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801261a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801261c:	e841 2300 	strex	r3, r2, [r1]
 8012620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012624:	2b00      	cmp	r3, #0
 8012626:	d1e4      	bne.n	80125f2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	69db      	ldr	r3, [r3, #28]
 801262e:	f003 0310 	and.w	r3, r3, #16
 8012632:	2b10      	cmp	r3, #16
 8012634:	d103      	bne.n	801263e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	2210      	movs	r2, #16
 801263c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012644:	4619      	mov	r1, r3
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f7fe f97e 	bl	8010948 <HAL_UARTEx_RxEventCallback>
 801264c:	e002      	b.n	8012654 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801264e:	6878      	ldr	r0, [r7, #4]
 8012650:	f7ee f81a 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012654:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012658:	2b00      	cmp	r3, #0
 801265a:	d006      	beq.n	801266a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801265c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012660:	f003 0320 	and.w	r3, r3, #32
 8012664:	2b00      	cmp	r3, #0
 8012666:	f47f aecd 	bne.w	8012404 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012670:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012674:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012678:	2b00      	cmp	r3, #0
 801267a:	d049      	beq.n	8012710 <UART_RxISR_16BIT_FIFOEN+0x354>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012682:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012686:	429a      	cmp	r2, r3
 8012688:	d242      	bcs.n	8012710 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	3308      	adds	r3, #8
 8012690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012694:	e853 3f00 	ldrex	r3, [r3]
 8012698:	623b      	str	r3, [r7, #32]
   return(result);
 801269a:	6a3b      	ldr	r3, [r7, #32]
 801269c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80126a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	3308      	adds	r3, #8
 80126aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80126ae:	633a      	str	r2, [r7, #48]	; 0x30
 80126b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80126b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126b6:	e841 2300 	strex	r3, r2, [r1]
 80126ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80126bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d1e3      	bne.n	801268a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	4a16      	ldr	r2, [pc, #88]	; (8012720 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80126c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	e853 3f00 	ldrex	r3, [r3]
 80126d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	f043 0320 	orr.w	r3, r3, #32
 80126dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	461a      	mov	r2, r3
 80126e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80126ea:	61fb      	str	r3, [r7, #28]
 80126ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126ee:	69b9      	ldr	r1, [r7, #24]
 80126f0:	69fa      	ldr	r2, [r7, #28]
 80126f2:	e841 2300 	strex	r3, r2, [r1]
 80126f6:	617b      	str	r3, [r7, #20]
   return(result);
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d1e4      	bne.n	80126c8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80126fe:	e007      	b.n	8012710 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	699a      	ldr	r2, [r3, #24]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	f042 0208 	orr.w	r2, r2, #8
 801270e:	619a      	str	r2, [r3, #24]
}
 8012710:	bf00      	nop
 8012712:	37b8      	adds	r7, #184	; 0xb8
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	effffffe 	.word	0xeffffffe
 801271c:	58000c00 	.word	0x58000c00
 8012720:	08011ea5 	.word	0x08011ea5

08012724 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012724:	b480      	push	{r7}
 8012726:	b083      	sub	sp, #12
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801272c:	bf00      	nop
 801272e:	370c      	adds	r7, #12
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr

08012738 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012740:	bf00      	nop
 8012742:	370c      	adds	r7, #12
 8012744:	46bd      	mov	sp, r7
 8012746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274a:	4770      	bx	lr

0801274c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012754:	bf00      	nop
 8012756:	370c      	adds	r7, #12
 8012758:	46bd      	mov	sp, r7
 801275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275e:	4770      	bx	lr

08012760 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012760:	b480      	push	{r7}
 8012762:	b085      	sub	sp, #20
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801276e:	2b01      	cmp	r3, #1
 8012770:	d101      	bne.n	8012776 <HAL_UARTEx_DisableFifoMode+0x16>
 8012772:	2302      	movs	r3, #2
 8012774:	e027      	b.n	80127c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2201      	movs	r2, #1
 801277a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2224      	movs	r2, #36	; 0x24
 8012782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	f022 0201 	bic.w	r2, r2, #1
 801279c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80127a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2200      	movs	r2, #0
 80127aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	68fa      	ldr	r2, [r7, #12]
 80127b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2220      	movs	r2, #32
 80127b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2200      	movs	r2, #0
 80127c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80127c4:	2300      	movs	r3, #0
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3714      	adds	r7, #20
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr

080127d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80127d2:	b580      	push	{r7, lr}
 80127d4:	b084      	sub	sp, #16
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	6078      	str	r0, [r7, #4]
 80127da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d101      	bne.n	80127ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80127e6:	2302      	movs	r3, #2
 80127e8:	e02d      	b.n	8012846 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2201      	movs	r2, #1
 80127ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2224      	movs	r2, #36	; 0x24
 80127f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	681a      	ldr	r2, [r3, #0]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f022 0201 	bic.w	r2, r2, #1
 8012810:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	689b      	ldr	r3, [r3, #8]
 8012818:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	683a      	ldr	r2, [r7, #0]
 8012822:	430a      	orrs	r2, r1
 8012824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f000 f850 	bl	80128cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2220      	movs	r2, #32
 8012838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2200      	movs	r2, #0
 8012840:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012844:	2300      	movs	r3, #0
}
 8012846:	4618      	mov	r0, r3
 8012848:	3710      	adds	r7, #16
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801284e:	b580      	push	{r7, lr}
 8012850:	b084      	sub	sp, #16
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
 8012856:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801285e:	2b01      	cmp	r3, #1
 8012860:	d101      	bne.n	8012866 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012862:	2302      	movs	r3, #2
 8012864:	e02d      	b.n	80128c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2201      	movs	r2, #1
 801286a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2224      	movs	r2, #36	; 0x24
 8012872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	f022 0201 	bic.w	r2, r2, #1
 801288c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	689b      	ldr	r3, [r3, #8]
 8012894:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	683a      	ldr	r2, [r7, #0]
 801289e:	430a      	orrs	r2, r1
 80128a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 f812 	bl	80128cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2220      	movs	r2, #32
 80128b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2200      	movs	r2, #0
 80128bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80128c0:	2300      	movs	r3, #0
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3710      	adds	r7, #16
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
	...

080128cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b085      	sub	sp, #20
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d108      	bne.n	80128ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2201      	movs	r2, #1
 80128e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2201      	movs	r2, #1
 80128e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80128ec:	e031      	b.n	8012952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80128ee:	2310      	movs	r3, #16
 80128f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80128f2:	2310      	movs	r3, #16
 80128f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	689b      	ldr	r3, [r3, #8]
 80128fc:	0e5b      	lsrs	r3, r3, #25
 80128fe:	b2db      	uxtb	r3, r3
 8012900:	f003 0307 	and.w	r3, r3, #7
 8012904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	689b      	ldr	r3, [r3, #8]
 801290c:	0f5b      	lsrs	r3, r3, #29
 801290e:	b2db      	uxtb	r3, r3
 8012910:	f003 0307 	and.w	r3, r3, #7
 8012914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012916:	7bbb      	ldrb	r3, [r7, #14]
 8012918:	7b3a      	ldrb	r2, [r7, #12]
 801291a:	4911      	ldr	r1, [pc, #68]	; (8012960 <UARTEx_SetNbDataToProcess+0x94>)
 801291c:	5c8a      	ldrb	r2, [r1, r2]
 801291e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012922:	7b3a      	ldrb	r2, [r7, #12]
 8012924:	490f      	ldr	r1, [pc, #60]	; (8012964 <UARTEx_SetNbDataToProcess+0x98>)
 8012926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012928:	fb93 f3f2 	sdiv	r3, r3, r2
 801292c:	b29a      	uxth	r2, r3
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012934:	7bfb      	ldrb	r3, [r7, #15]
 8012936:	7b7a      	ldrb	r2, [r7, #13]
 8012938:	4909      	ldr	r1, [pc, #36]	; (8012960 <UARTEx_SetNbDataToProcess+0x94>)
 801293a:	5c8a      	ldrb	r2, [r1, r2]
 801293c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012940:	7b7a      	ldrb	r2, [r7, #13]
 8012942:	4908      	ldr	r1, [pc, #32]	; (8012964 <UARTEx_SetNbDataToProcess+0x98>)
 8012944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012946:	fb93 f3f2 	sdiv	r3, r3, r2
 801294a:	b29a      	uxth	r2, r3
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012952:	bf00      	nop
 8012954:	3714      	adds	r7, #20
 8012956:	46bd      	mov	sp, r7
 8012958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295c:	4770      	bx	lr
 801295e:	bf00      	nop
 8012960:	08017114 	.word	0x08017114
 8012964:	0801711c 	.word	0x0801711c

08012968 <__NVIC_SetPriority>:
{
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	4603      	mov	r3, r0
 8012970:	6039      	str	r1, [r7, #0]
 8012972:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012974:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012978:	2b00      	cmp	r3, #0
 801297a:	db0a      	blt.n	8012992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	b2da      	uxtb	r2, r3
 8012980:	490c      	ldr	r1, [pc, #48]	; (80129b4 <__NVIC_SetPriority+0x4c>)
 8012982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012986:	0112      	lsls	r2, r2, #4
 8012988:	b2d2      	uxtb	r2, r2
 801298a:	440b      	add	r3, r1
 801298c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012990:	e00a      	b.n	80129a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	b2da      	uxtb	r2, r3
 8012996:	4908      	ldr	r1, [pc, #32]	; (80129b8 <__NVIC_SetPriority+0x50>)
 8012998:	88fb      	ldrh	r3, [r7, #6]
 801299a:	f003 030f 	and.w	r3, r3, #15
 801299e:	3b04      	subs	r3, #4
 80129a0:	0112      	lsls	r2, r2, #4
 80129a2:	b2d2      	uxtb	r2, r2
 80129a4:	440b      	add	r3, r1
 80129a6:	761a      	strb	r2, [r3, #24]
}
 80129a8:	bf00      	nop
 80129aa:	370c      	adds	r7, #12
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr
 80129b4:	e000e100 	.word	0xe000e100
 80129b8:	e000ed00 	.word	0xe000ed00

080129bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80129bc:	b580      	push	{r7, lr}
 80129be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80129c0:	4b05      	ldr	r3, [pc, #20]	; (80129d8 <SysTick_Handler+0x1c>)
 80129c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80129c4:	f002 fbc2 	bl	801514c <xTaskGetSchedulerState>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d001      	beq.n	80129d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80129ce:	f003 f9e3 	bl	8015d98 <xPortSysTickHandler>
  }
}
 80129d2:	bf00      	nop
 80129d4:	bd80      	pop	{r7, pc}
 80129d6:	bf00      	nop
 80129d8:	e000e010 	.word	0xe000e010

080129dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80129dc:	b580      	push	{r7, lr}
 80129de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80129e0:	2100      	movs	r1, #0
 80129e2:	f06f 0004 	mvn.w	r0, #4
 80129e6:	f7ff ffbf 	bl	8012968 <__NVIC_SetPriority>
#endif
}
 80129ea:	bf00      	nop
 80129ec:	bd80      	pop	{r7, pc}
	...

080129f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80129f0:	b480      	push	{r7}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129f6:	f3ef 8305 	mrs	r3, IPSR
 80129fa:	603b      	str	r3, [r7, #0]
  return(result);
 80129fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d003      	beq.n	8012a0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012a02:	f06f 0305 	mvn.w	r3, #5
 8012a06:	607b      	str	r3, [r7, #4]
 8012a08:	e00c      	b.n	8012a24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012a0a:	4b0a      	ldr	r3, [pc, #40]	; (8012a34 <osKernelInitialize+0x44>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d105      	bne.n	8012a1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012a12:	4b08      	ldr	r3, [pc, #32]	; (8012a34 <osKernelInitialize+0x44>)
 8012a14:	2201      	movs	r2, #1
 8012a16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	607b      	str	r3, [r7, #4]
 8012a1c:	e002      	b.n	8012a24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012a24:	687b      	ldr	r3, [r7, #4]
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	370c      	adds	r7, #12
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop
 8012a34:	2400110c 	.word	0x2400110c

08012a38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a3e:	f3ef 8305 	mrs	r3, IPSR
 8012a42:	603b      	str	r3, [r7, #0]
  return(result);
 8012a44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d003      	beq.n	8012a52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8012a4a:	f06f 0305 	mvn.w	r3, #5
 8012a4e:	607b      	str	r3, [r7, #4]
 8012a50:	e010      	b.n	8012a74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012a52:	4b0b      	ldr	r3, [pc, #44]	; (8012a80 <osKernelStart+0x48>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d109      	bne.n	8012a6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012a5a:	f7ff ffbf 	bl	80129dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012a5e:	4b08      	ldr	r3, [pc, #32]	; (8012a80 <osKernelStart+0x48>)
 8012a60:	2202      	movs	r2, #2
 8012a62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012a64:	f001 fe84 	bl	8014770 <vTaskStartScheduler>
      stat = osOK;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	607b      	str	r3, [r7, #4]
 8012a6c:	e002      	b.n	8012a74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012a74:	687b      	ldr	r3, [r7, #4]
}
 8012a76:	4618      	mov	r0, r3
 8012a78:	3708      	adds	r7, #8
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	2400110c 	.word	0x2400110c

08012a84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b08e      	sub	sp, #56	; 0x38
 8012a88:	af04      	add	r7, sp, #16
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012a90:	2300      	movs	r3, #0
 8012a92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a94:	f3ef 8305 	mrs	r3, IPSR
 8012a98:	617b      	str	r3, [r7, #20]
  return(result);
 8012a9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d17e      	bne.n	8012b9e <osThreadNew+0x11a>
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d07b      	beq.n	8012b9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012aa6:	2380      	movs	r3, #128	; 0x80
 8012aa8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012aaa:	2318      	movs	r3, #24
 8012aac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ab6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d045      	beq.n	8012b4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d002      	beq.n	8012acc <osThreadNew+0x48>
        name = attr->name;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	699b      	ldr	r3, [r3, #24]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d002      	beq.n	8012ada <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	699b      	ldr	r3, [r3, #24]
 8012ad8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012ada:	69fb      	ldr	r3, [r7, #28]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d008      	beq.n	8012af2 <osThreadNew+0x6e>
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	2b38      	cmp	r3, #56	; 0x38
 8012ae4:	d805      	bhi.n	8012af2 <osThreadNew+0x6e>
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	f003 0301 	and.w	r3, r3, #1
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d001      	beq.n	8012af6 <osThreadNew+0x72>
        return (NULL);
 8012af2:	2300      	movs	r3, #0
 8012af4:	e054      	b.n	8012ba0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	695b      	ldr	r3, [r3, #20]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d003      	beq.n	8012b06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	695b      	ldr	r3, [r3, #20]
 8012b02:	089b      	lsrs	r3, r3, #2
 8012b04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	689b      	ldr	r3, [r3, #8]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d00e      	beq.n	8012b2c <osThreadNew+0xa8>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	68db      	ldr	r3, [r3, #12]
 8012b12:	2b5b      	cmp	r3, #91	; 0x5b
 8012b14:	d90a      	bls.n	8012b2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d006      	beq.n	8012b2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	695b      	ldr	r3, [r3, #20]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d002      	beq.n	8012b2c <osThreadNew+0xa8>
        mem = 1;
 8012b26:	2301      	movs	r3, #1
 8012b28:	61bb      	str	r3, [r7, #24]
 8012b2a:	e010      	b.n	8012b4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	689b      	ldr	r3, [r3, #8]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d10c      	bne.n	8012b4e <osThreadNew+0xca>
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	68db      	ldr	r3, [r3, #12]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d108      	bne.n	8012b4e <osThreadNew+0xca>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	691b      	ldr	r3, [r3, #16]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d104      	bne.n	8012b4e <osThreadNew+0xca>
          mem = 0;
 8012b44:	2300      	movs	r3, #0
 8012b46:	61bb      	str	r3, [r7, #24]
 8012b48:	e001      	b.n	8012b4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012b4e:	69bb      	ldr	r3, [r7, #24]
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d110      	bne.n	8012b76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012b58:	687a      	ldr	r2, [r7, #4]
 8012b5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012b5c:	9202      	str	r2, [sp, #8]
 8012b5e:	9301      	str	r3, [sp, #4]
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	9300      	str	r3, [sp, #0]
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	6a3a      	ldr	r2, [r7, #32]
 8012b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b6a:	68f8      	ldr	r0, [r7, #12]
 8012b6c:	f001 fb10 	bl	8014190 <xTaskCreateStatic>
 8012b70:	4603      	mov	r3, r0
 8012b72:	613b      	str	r3, [r7, #16]
 8012b74:	e013      	b.n	8012b9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012b76:	69bb      	ldr	r3, [r7, #24]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d110      	bne.n	8012b9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012b7c:	6a3b      	ldr	r3, [r7, #32]
 8012b7e:	b29a      	uxth	r2, r3
 8012b80:	f107 0310 	add.w	r3, r7, #16
 8012b84:	9301      	str	r3, [sp, #4]
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	9300      	str	r3, [sp, #0]
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b8e:	68f8      	ldr	r0, [r7, #12]
 8012b90:	f001 fb5b 	bl	801424a <xTaskCreate>
 8012b94:	4603      	mov	r3, r0
 8012b96:	2b01      	cmp	r3, #1
 8012b98:	d001      	beq.n	8012b9e <osThreadNew+0x11a>
            hTask = NULL;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012b9e:	693b      	ldr	r3, [r7, #16]
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3728      	adds	r7, #40	; 0x28
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}

08012ba8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012ba8:	b480      	push	{r7}
 8012baa:	b083      	sub	sp, #12
 8012bac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bae:	f3ef 8305 	mrs	r3, IPSR
 8012bb2:	603b      	str	r3, [r7, #0]
  return(result);
 8012bb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d003      	beq.n	8012bc2 <osThreadYield+0x1a>
    stat = osErrorISR;
 8012bba:	f06f 0305 	mvn.w	r3, #5
 8012bbe:	607b      	str	r3, [r7, #4]
 8012bc0:	e009      	b.n	8012bd6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012bc6:	4b07      	ldr	r3, [pc, #28]	; (8012be4 <osThreadYield+0x3c>)
 8012bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bcc:	601a      	str	r2, [r3, #0]
 8012bce:	f3bf 8f4f 	dsb	sy
 8012bd2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012bd6:	687b      	ldr	r3, [r7, #4]
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	370c      	adds	r7, #12
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be2:	4770      	bx	lr
 8012be4:	e000ed04 	.word	0xe000ed04

08012be8 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b086      	sub	sp, #24
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bf4:	f3ef 8305 	mrs	r3, IPSR
 8012bf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8012bfa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d003      	beq.n	8012c08 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012c00:	f06f 0305 	mvn.w	r3, #5
 8012c04:	617b      	str	r3, [r7, #20]
 8012c06:	e00b      	b.n	8012c20 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d103      	bne.n	8012c16 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012c0e:	f06f 0303 	mvn.w	r3, #3
 8012c12:	617b      	str	r3, [r7, #20]
 8012c14:	e004      	b.n	8012c20 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012c16:	2300      	movs	r3, #0
 8012c18:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012c1a:	6938      	ldr	r0, [r7, #16]
 8012c1c:	f001 fc8e 	bl	801453c <vTaskSuspend>
  }

  return (stat);
 8012c20:	697b      	ldr	r3, [r7, #20]
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3718      	adds	r7, #24
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}

08012c2a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012c2a:	b580      	push	{r7, lr}
 8012c2c:	b084      	sub	sp, #16
 8012c2e:	af00      	add	r7, sp, #0
 8012c30:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c32:	f3ef 8305 	mrs	r3, IPSR
 8012c36:	60bb      	str	r3, [r7, #8]
  return(result);
 8012c38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d003      	beq.n	8012c46 <osDelay+0x1c>
    stat = osErrorISR;
 8012c3e:	f06f 0305 	mvn.w	r3, #5
 8012c42:	60fb      	str	r3, [r7, #12]
 8012c44:	e007      	b.n	8012c56 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012c46:	2300      	movs	r3, #0
 8012c48:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d002      	beq.n	8012c56 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f001 fc3f 	bl	80144d4 <vTaskDelay>
    }
  }

  return (stat);
 8012c56:	68fb      	ldr	r3, [r7, #12]
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3710      	adds	r7, #16
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}

08012c60 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b086      	sub	sp, #24
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c6c:	f3ef 8305 	mrs	r3, IPSR
 8012c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c72:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d12d      	bne.n	8012cd4 <osEventFlagsNew+0x74>
    mem = -1;
 8012c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c7c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d015      	beq.n	8012cb0 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	689b      	ldr	r3, [r3, #8]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d006      	beq.n	8012c9a <osEventFlagsNew+0x3a>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	2b1f      	cmp	r3, #31
 8012c92:	d902      	bls.n	8012c9a <osEventFlagsNew+0x3a>
        mem = 1;
 8012c94:	2301      	movs	r3, #1
 8012c96:	613b      	str	r3, [r7, #16]
 8012c98:	e00c      	b.n	8012cb4 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d108      	bne.n	8012cb4 <osEventFlagsNew+0x54>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	68db      	ldr	r3, [r3, #12]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d104      	bne.n	8012cb4 <osEventFlagsNew+0x54>
          mem = 0;
 8012caa:	2300      	movs	r3, #0
 8012cac:	613b      	str	r3, [r7, #16]
 8012cae:	e001      	b.n	8012cb4 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	2b01      	cmp	r3, #1
 8012cb8:	d106      	bne.n	8012cc8 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	689b      	ldr	r3, [r3, #8]
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f000 fa1e 	bl	8013100 <xEventGroupCreateStatic>
 8012cc4:	6178      	str	r0, [r7, #20]
 8012cc6:	e005      	b.n	8012cd4 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d102      	bne.n	8012cd4 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012cce:	f000 fa4e 	bl	801316e <xEventGroupCreate>
 8012cd2:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012cd4:	697b      	ldr	r3, [r7, #20]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3718      	adds	r7, #24
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}
	...

08012ce0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b086      	sub	sp, #24
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d004      	beq.n	8012cfe <osEventFlagsSet+0x1e>
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d003      	beq.n	8012d06 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012cfe:	f06f 0303 	mvn.w	r3, #3
 8012d02:	617b      	str	r3, [r7, #20]
 8012d04:	e028      	b.n	8012d58 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d06:	f3ef 8305 	mrs	r3, IPSR
 8012d0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d01d      	beq.n	8012d4e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012d12:	2300      	movs	r3, #0
 8012d14:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012d16:	f107 0308 	add.w	r3, r7, #8
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	6839      	ldr	r1, [r7, #0]
 8012d1e:	6938      	ldr	r0, [r7, #16]
 8012d20:	f000 fbc8 	bl	80134b4 <xEventGroupSetBitsFromISR>
 8012d24:	4603      	mov	r3, r0
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d103      	bne.n	8012d32 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012d2a:	f06f 0302 	mvn.w	r3, #2
 8012d2e:	617b      	str	r3, [r7, #20]
 8012d30:	e012      	b.n	8012d58 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00d      	beq.n	8012d58 <osEventFlagsSet+0x78>
 8012d3c:	4b09      	ldr	r3, [pc, #36]	; (8012d64 <osEventFlagsSet+0x84>)
 8012d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d42:	601a      	str	r2, [r3, #0]
 8012d44:	f3bf 8f4f 	dsb	sy
 8012d48:	f3bf 8f6f 	isb	sy
 8012d4c:	e004      	b.n	8012d58 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012d4e:	6839      	ldr	r1, [r7, #0]
 8012d50:	6938      	ldr	r0, [r7, #16]
 8012d52:	f000 faf5 	bl	8013340 <xEventGroupSetBits>
 8012d56:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012d58:	697b      	ldr	r3, [r7, #20]
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3718      	adds	r7, #24
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	e000ed04 	.word	0xe000ed04

08012d68 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b08c      	sub	sp, #48	; 0x30
 8012d6c:	af02      	add	r7, sp, #8
 8012d6e:	60f8      	str	r0, [r7, #12]
 8012d70:	60b9      	str	r1, [r7, #8]
 8012d72:	607a      	str	r2, [r7, #4]
 8012d74:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012d7a:	69bb      	ldr	r3, [r7, #24]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d004      	beq.n	8012d8a <osEventFlagsWait+0x22>
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d003      	beq.n	8012d92 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012d8a:	f06f 0303 	mvn.w	r3, #3
 8012d8e:	61fb      	str	r3, [r7, #28]
 8012d90:	e04b      	b.n	8012e2a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d92:	f3ef 8305 	mrs	r3, IPSR
 8012d96:	617b      	str	r3, [r7, #20]
  return(result);
 8012d98:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d003      	beq.n	8012da6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012d9e:	f06f 0305 	mvn.w	r3, #5
 8012da2:	61fb      	str	r3, [r7, #28]
 8012da4:	e041      	b.n	8012e2a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f003 0301 	and.w	r3, r3, #1
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d002      	beq.n	8012db6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012db0:	2301      	movs	r3, #1
 8012db2:	627b      	str	r3, [r7, #36]	; 0x24
 8012db4:	e001      	b.n	8012dba <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012db6:	2300      	movs	r3, #0
 8012db8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f003 0302 	and.w	r3, r3, #2
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d002      	beq.n	8012dca <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	623b      	str	r3, [r7, #32]
 8012dc8:	e001      	b.n	8012dce <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012dca:	2301      	movs	r3, #1
 8012dcc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	9300      	str	r3, [sp, #0]
 8012dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd4:	6a3a      	ldr	r2, [r7, #32]
 8012dd6:	68b9      	ldr	r1, [r7, #8]
 8012dd8:	69b8      	ldr	r0, [r7, #24]
 8012dda:	f000 f9e3 	bl	80131a4 <xEventGroupWaitBits>
 8012dde:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f003 0301 	and.w	r3, r3, #1
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d010      	beq.n	8012e0c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012dea:	68ba      	ldr	r2, [r7, #8]
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	4013      	ands	r3, r2
 8012df0:	68ba      	ldr	r2, [r7, #8]
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d019      	beq.n	8012e2a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d003      	beq.n	8012e04 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012dfc:	f06f 0301 	mvn.w	r3, #1
 8012e00:	61fb      	str	r3, [r7, #28]
 8012e02:	e012      	b.n	8012e2a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012e04:	f06f 0302 	mvn.w	r3, #2
 8012e08:	61fb      	str	r3, [r7, #28]
 8012e0a:	e00e      	b.n	8012e2a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012e0c:	68ba      	ldr	r2, [r7, #8]
 8012e0e:	69fb      	ldr	r3, [r7, #28]
 8012e10:	4013      	ands	r3, r2
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d109      	bne.n	8012e2a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d003      	beq.n	8012e24 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012e1c:	f06f 0301 	mvn.w	r3, #1
 8012e20:	61fb      	str	r3, [r7, #28]
 8012e22:	e002      	b.n	8012e2a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012e24:	f06f 0302 	mvn.w	r3, #2
 8012e28:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012e2a:	69fb      	ldr	r3, [r7, #28]
}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3728      	adds	r7, #40	; 0x28
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b08a      	sub	sp, #40	; 0x28
 8012e38:	af02      	add	r7, sp, #8
 8012e3a:	60f8      	str	r0, [r7, #12]
 8012e3c:	60b9      	str	r1, [r7, #8]
 8012e3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012e40:	2300      	movs	r3, #0
 8012e42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e44:	f3ef 8305 	mrs	r3, IPSR
 8012e48:	613b      	str	r3, [r7, #16]
  return(result);
 8012e4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d15f      	bne.n	8012f10 <osMessageQueueNew+0xdc>
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d05c      	beq.n	8012f10 <osMessageQueueNew+0xdc>
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d059      	beq.n	8012f10 <osMessageQueueNew+0xdc>
    mem = -1;
 8012e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d029      	beq.n	8012ebc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	689b      	ldr	r3, [r3, #8]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d012      	beq.n	8012e96 <osMessageQueueNew+0x62>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	2b4f      	cmp	r3, #79	; 0x4f
 8012e76:	d90e      	bls.n	8012e96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d00a      	beq.n	8012e96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	695a      	ldr	r2, [r3, #20]
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	68b9      	ldr	r1, [r7, #8]
 8012e88:	fb01 f303 	mul.w	r3, r1, r3
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d302      	bcc.n	8012e96 <osMessageQueueNew+0x62>
        mem = 1;
 8012e90:	2301      	movs	r3, #1
 8012e92:	61bb      	str	r3, [r7, #24]
 8012e94:	e014      	b.n	8012ec0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	689b      	ldr	r3, [r3, #8]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d110      	bne.n	8012ec0 <osMessageQueueNew+0x8c>
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d10c      	bne.n	8012ec0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d108      	bne.n	8012ec0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	695b      	ldr	r3, [r3, #20]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d104      	bne.n	8012ec0 <osMessageQueueNew+0x8c>
          mem = 0;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	61bb      	str	r3, [r7, #24]
 8012eba:	e001      	b.n	8012ec0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	2b01      	cmp	r3, #1
 8012ec4:	d10b      	bne.n	8012ede <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	691a      	ldr	r2, [r3, #16]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	689b      	ldr	r3, [r3, #8]
 8012ece:	2100      	movs	r1, #0
 8012ed0:	9100      	str	r1, [sp, #0]
 8012ed2:	68b9      	ldr	r1, [r7, #8]
 8012ed4:	68f8      	ldr	r0, [r7, #12]
 8012ed6:	f000 fc1d 	bl	8013714 <xQueueGenericCreateStatic>
 8012eda:	61f8      	str	r0, [r7, #28]
 8012edc:	e008      	b.n	8012ef0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012ede:	69bb      	ldr	r3, [r7, #24]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d105      	bne.n	8012ef0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	68b9      	ldr	r1, [r7, #8]
 8012ee8:	68f8      	ldr	r0, [r7, #12]
 8012eea:	f000 fc8b 	bl	8013804 <xQueueGenericCreate>
 8012eee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d00c      	beq.n	8012f10 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d003      	beq.n	8012f04 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	617b      	str	r3, [r7, #20]
 8012f02:	e001      	b.n	8012f08 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012f04:	2300      	movs	r3, #0
 8012f06:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012f08:	6979      	ldr	r1, [r7, #20]
 8012f0a:	69f8      	ldr	r0, [r7, #28]
 8012f0c:	f001 f8e2 	bl	80140d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012f10:	69fb      	ldr	r3, [r7, #28]
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3720      	adds	r7, #32
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
	...

08012f1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b088      	sub	sp, #32
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	603b      	str	r3, [r7, #0]
 8012f28:	4613      	mov	r3, r2
 8012f2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012f30:	2300      	movs	r3, #0
 8012f32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f34:	f3ef 8305 	mrs	r3, IPSR
 8012f38:	617b      	str	r3, [r7, #20]
  return(result);
 8012f3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d028      	beq.n	8012f92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d005      	beq.n	8012f52 <osMessageQueuePut+0x36>
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d002      	beq.n	8012f52 <osMessageQueuePut+0x36>
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d003      	beq.n	8012f5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012f52:	f06f 0303 	mvn.w	r3, #3
 8012f56:	61fb      	str	r3, [r7, #28]
 8012f58:	e038      	b.n	8012fcc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012f5e:	f107 0210 	add.w	r2, r7, #16
 8012f62:	2300      	movs	r3, #0
 8012f64:	68b9      	ldr	r1, [r7, #8]
 8012f66:	69b8      	ldr	r0, [r7, #24]
 8012f68:	f000 fda8 	bl	8013abc <xQueueGenericSendFromISR>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b01      	cmp	r3, #1
 8012f70:	d003      	beq.n	8012f7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012f72:	f06f 0302 	mvn.w	r3, #2
 8012f76:	61fb      	str	r3, [r7, #28]
 8012f78:	e028      	b.n	8012fcc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d025      	beq.n	8012fcc <osMessageQueuePut+0xb0>
 8012f80:	4b15      	ldr	r3, [pc, #84]	; (8012fd8 <osMessageQueuePut+0xbc>)
 8012f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f86:	601a      	str	r2, [r3, #0]
 8012f88:	f3bf 8f4f 	dsb	sy
 8012f8c:	f3bf 8f6f 	isb	sy
 8012f90:	e01c      	b.n	8012fcc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012f92:	69bb      	ldr	r3, [r7, #24]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d002      	beq.n	8012f9e <osMessageQueuePut+0x82>
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d103      	bne.n	8012fa6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012f9e:	f06f 0303 	mvn.w	r3, #3
 8012fa2:	61fb      	str	r3, [r7, #28]
 8012fa4:	e012      	b.n	8012fcc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	683a      	ldr	r2, [r7, #0]
 8012faa:	68b9      	ldr	r1, [r7, #8]
 8012fac:	69b8      	ldr	r0, [r7, #24]
 8012fae:	f000 fc87 	bl	80138c0 <xQueueGenericSend>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d009      	beq.n	8012fcc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d003      	beq.n	8012fc6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012fbe:	f06f 0301 	mvn.w	r3, #1
 8012fc2:	61fb      	str	r3, [r7, #28]
 8012fc4:	e002      	b.n	8012fcc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012fc6:	f06f 0302 	mvn.w	r3, #2
 8012fca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012fcc:	69fb      	ldr	r3, [r7, #28]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3720      	adds	r7, #32
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	e000ed04 	.word	0xe000ed04

08012fdc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b088      	sub	sp, #32
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	607a      	str	r2, [r7, #4]
 8012fe8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ff2:	f3ef 8305 	mrs	r3, IPSR
 8012ff6:	617b      	str	r3, [r7, #20]
  return(result);
 8012ff8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d028      	beq.n	8013050 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012ffe:	69bb      	ldr	r3, [r7, #24]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d005      	beq.n	8013010 <osMessageQueueGet+0x34>
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d002      	beq.n	8013010 <osMessageQueueGet+0x34>
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d003      	beq.n	8013018 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013010:	f06f 0303 	mvn.w	r3, #3
 8013014:	61fb      	str	r3, [r7, #28]
 8013016:	e037      	b.n	8013088 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013018:	2300      	movs	r3, #0
 801301a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801301c:	f107 0310 	add.w	r3, r7, #16
 8013020:	461a      	mov	r2, r3
 8013022:	68b9      	ldr	r1, [r7, #8]
 8013024:	69b8      	ldr	r0, [r7, #24]
 8013026:	f000 fec5 	bl	8013db4 <xQueueReceiveFromISR>
 801302a:	4603      	mov	r3, r0
 801302c:	2b01      	cmp	r3, #1
 801302e:	d003      	beq.n	8013038 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013030:	f06f 0302 	mvn.w	r3, #2
 8013034:	61fb      	str	r3, [r7, #28]
 8013036:	e027      	b.n	8013088 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013038:	693b      	ldr	r3, [r7, #16]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d024      	beq.n	8013088 <osMessageQueueGet+0xac>
 801303e:	4b15      	ldr	r3, [pc, #84]	; (8013094 <osMessageQueueGet+0xb8>)
 8013040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013044:	601a      	str	r2, [r3, #0]
 8013046:	f3bf 8f4f 	dsb	sy
 801304a:	f3bf 8f6f 	isb	sy
 801304e:	e01b      	b.n	8013088 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013050:	69bb      	ldr	r3, [r7, #24]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d002      	beq.n	801305c <osMessageQueueGet+0x80>
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d103      	bne.n	8013064 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801305c:	f06f 0303 	mvn.w	r3, #3
 8013060:	61fb      	str	r3, [r7, #28]
 8013062:	e011      	b.n	8013088 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013064:	683a      	ldr	r2, [r7, #0]
 8013066:	68b9      	ldr	r1, [r7, #8]
 8013068:	69b8      	ldr	r0, [r7, #24]
 801306a:	f000 fdc3 	bl	8013bf4 <xQueueReceive>
 801306e:	4603      	mov	r3, r0
 8013070:	2b01      	cmp	r3, #1
 8013072:	d009      	beq.n	8013088 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d003      	beq.n	8013082 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801307a:	f06f 0301 	mvn.w	r3, #1
 801307e:	61fb      	str	r3, [r7, #28]
 8013080:	e002      	b.n	8013088 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8013082:	f06f 0302 	mvn.w	r3, #2
 8013086:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013088:	69fb      	ldr	r3, [r7, #28]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3720      	adds	r7, #32
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	e000ed04 	.word	0xe000ed04

08013098 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013098:	b480      	push	{r7}
 801309a:	b085      	sub	sp, #20
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	4a07      	ldr	r2, [pc, #28]	; (80130c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80130a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	4a06      	ldr	r2, [pc, #24]	; (80130c8 <vApplicationGetIdleTaskMemory+0x30>)
 80130ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2280      	movs	r2, #128	; 0x80
 80130b4:	601a      	str	r2, [r3, #0]
}
 80130b6:	bf00      	nop
 80130b8:	3714      	adds	r7, #20
 80130ba:	46bd      	mov	sp, r7
 80130bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c0:	4770      	bx	lr
 80130c2:	bf00      	nop
 80130c4:	24001110 	.word	0x24001110
 80130c8:	2400116c 	.word	0x2400116c

080130cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80130cc:	b480      	push	{r7}
 80130ce:	b085      	sub	sp, #20
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	4a07      	ldr	r2, [pc, #28]	; (80130f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80130dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	4a06      	ldr	r2, [pc, #24]	; (80130fc <vApplicationGetTimerTaskMemory+0x30>)
 80130e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80130ea:	601a      	str	r2, [r3, #0]
}
 80130ec:	bf00      	nop
 80130ee:	3714      	adds	r7, #20
 80130f0:	46bd      	mov	sp, r7
 80130f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f6:	4770      	bx	lr
 80130f8:	2400136c 	.word	0x2400136c
 80130fc:	240013c8 	.word	0x240013c8

08013100 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013100:	b580      	push	{r7, lr}
 8013102:	b086      	sub	sp, #24
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d10a      	bne.n	8013124 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013112:	f383 8811 	msr	BASEPRI, r3
 8013116:	f3bf 8f6f 	isb	sy
 801311a:	f3bf 8f4f 	dsb	sy
 801311e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013120:	bf00      	nop
 8013122:	e7fe      	b.n	8013122 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013124:	2320      	movs	r3, #32
 8013126:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	2b20      	cmp	r3, #32
 801312c:	d00a      	beq.n	8013144 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013132:	f383 8811 	msr	BASEPRI, r3
 8013136:	f3bf 8f6f 	isb	sy
 801313a:	f3bf 8f4f 	dsb	sy
 801313e:	60fb      	str	r3, [r7, #12]
}
 8013140:	bf00      	nop
 8013142:	e7fe      	b.n	8013142 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d00a      	beq.n	8013164 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	2200      	movs	r2, #0
 8013152:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	3304      	adds	r3, #4
 8013158:	4618      	mov	r0, r3
 801315a:	f000 f9bf 	bl	80134dc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	2201      	movs	r2, #1
 8013162:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013164:	697b      	ldr	r3, [r7, #20]
	}
 8013166:	4618      	mov	r0, r3
 8013168:	3718      	adds	r7, #24
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}

0801316e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801316e:	b580      	push	{r7, lr}
 8013170:	b082      	sub	sp, #8
 8013172:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013174:	2020      	movs	r0, #32
 8013176:	f002 fe9f 	bl	8015eb8 <pvPortMalloc>
 801317a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d00a      	beq.n	8013198 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2200      	movs	r2, #0
 8013186:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	3304      	adds	r3, #4
 801318c:	4618      	mov	r0, r3
 801318e:	f000 f9a5 	bl	80134dc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2200      	movs	r2, #0
 8013196:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013198:	687b      	ldr	r3, [r7, #4]
	}
 801319a:	4618      	mov	r0, r3
 801319c:	3708      	adds	r7, #8
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}
	...

080131a4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b090      	sub	sp, #64	; 0x40
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	60f8      	str	r0, [r7, #12]
 80131ac:	60b9      	str	r1, [r7, #8]
 80131ae:	607a      	str	r2, [r7, #4]
 80131b0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80131b6:	2300      	movs	r3, #0
 80131b8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80131ba:	2300      	movs	r3, #0
 80131bc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d10a      	bne.n	80131da <xEventGroupWaitBits+0x36>
	__asm volatile
 80131c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131c8:	f383 8811 	msr	BASEPRI, r3
 80131cc:	f3bf 8f6f 	isb	sy
 80131d0:	f3bf 8f4f 	dsb	sy
 80131d4:	623b      	str	r3, [r7, #32]
}
 80131d6:	bf00      	nop
 80131d8:	e7fe      	b.n	80131d8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d00a      	beq.n	80131fa <xEventGroupWaitBits+0x56>
	__asm volatile
 80131e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e8:	f383 8811 	msr	BASEPRI, r3
 80131ec:	f3bf 8f6f 	isb	sy
 80131f0:	f3bf 8f4f 	dsb	sy
 80131f4:	61fb      	str	r3, [r7, #28]
}
 80131f6:	bf00      	nop
 80131f8:	e7fe      	b.n	80131f8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d10a      	bne.n	8013216 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013204:	f383 8811 	msr	BASEPRI, r3
 8013208:	f3bf 8f6f 	isb	sy
 801320c:	f3bf 8f4f 	dsb	sy
 8013210:	61bb      	str	r3, [r7, #24]
}
 8013212:	bf00      	nop
 8013214:	e7fe      	b.n	8013214 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013216:	f001 ff99 	bl	801514c <xTaskGetSchedulerState>
 801321a:	4603      	mov	r3, r0
 801321c:	2b00      	cmp	r3, #0
 801321e:	d102      	bne.n	8013226 <xEventGroupWaitBits+0x82>
 8013220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013222:	2b00      	cmp	r3, #0
 8013224:	d101      	bne.n	801322a <xEventGroupWaitBits+0x86>
 8013226:	2301      	movs	r3, #1
 8013228:	e000      	b.n	801322c <xEventGroupWaitBits+0x88>
 801322a:	2300      	movs	r3, #0
 801322c:	2b00      	cmp	r3, #0
 801322e:	d10a      	bne.n	8013246 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013234:	f383 8811 	msr	BASEPRI, r3
 8013238:	f3bf 8f6f 	isb	sy
 801323c:	f3bf 8f4f 	dsb	sy
 8013240:	617b      	str	r3, [r7, #20]
}
 8013242:	bf00      	nop
 8013244:	e7fe      	b.n	8013244 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013246:	f001 faf9 	bl	801483c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013250:	683a      	ldr	r2, [r7, #0]
 8013252:	68b9      	ldr	r1, [r7, #8]
 8013254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013256:	f000 f90b 	bl	8013470 <prvTestWaitCondition>
 801325a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801325e:	2b00      	cmp	r3, #0
 8013260:	d00e      	beq.n	8013280 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013264:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013266:	2300      	movs	r3, #0
 8013268:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d028      	beq.n	80132c2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013272:	681a      	ldr	r2, [r3, #0]
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	43db      	mvns	r3, r3
 8013278:	401a      	ands	r2, r3
 801327a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801327c:	601a      	str	r2, [r3, #0]
 801327e:	e020      	b.n	80132c2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013282:	2b00      	cmp	r3, #0
 8013284:	d104      	bne.n	8013290 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013288:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801328a:	2301      	movs	r3, #1
 801328c:	633b      	str	r3, [r7, #48]	; 0x30
 801328e:	e018      	b.n	80132c2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d003      	beq.n	801329e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801329c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d003      	beq.n	80132ac <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80132a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80132aa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80132ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ae:	1d18      	adds	r0, r3, #4
 80132b0:	68ba      	ldr	r2, [r7, #8]
 80132b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b4:	4313      	orrs	r3, r2
 80132b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80132b8:	4619      	mov	r1, r3
 80132ba:	f001 fcbf 	bl	8014c3c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80132be:	2300      	movs	r3, #0
 80132c0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80132c2:	f001 fac9 	bl	8014858 <xTaskResumeAll>
 80132c6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80132c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d031      	beq.n	8013332 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80132ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d107      	bne.n	80132e4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80132d4:	4b19      	ldr	r3, [pc, #100]	; (801333c <xEventGroupWaitBits+0x198>)
 80132d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132da:	601a      	str	r2, [r3, #0]
 80132dc:	f3bf 8f4f 	dsb	sy
 80132e0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80132e4:	f001 ffbe 	bl	8015264 <uxTaskResetEventItemValue>
 80132e8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80132ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d11a      	bne.n	801332a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80132f4:	f002 fcbe 	bl	8015c74 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80132f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80132fe:	683a      	ldr	r2, [r7, #0]
 8013300:	68b9      	ldr	r1, [r7, #8]
 8013302:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013304:	f000 f8b4 	bl	8013470 <prvTestWaitCondition>
 8013308:	4603      	mov	r3, r0
 801330a:	2b00      	cmp	r3, #0
 801330c:	d009      	beq.n	8013322 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d006      	beq.n	8013322 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	43db      	mvns	r3, r3
 801331c:	401a      	ands	r2, r3
 801331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013320:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013322:	2301      	movs	r3, #1
 8013324:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013326:	f002 fcd5 	bl	8015cd4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801332c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013330:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013334:	4618      	mov	r0, r3
 8013336:	3740      	adds	r7, #64	; 0x40
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	e000ed04 	.word	0xe000ed04

08013340 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b08e      	sub	sp, #56	; 0x38
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801334a:	2300      	movs	r3, #0
 801334c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013352:	2300      	movs	r3, #0
 8013354:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d10a      	bne.n	8013372 <xEventGroupSetBits+0x32>
	__asm volatile
 801335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013360:	f383 8811 	msr	BASEPRI, r3
 8013364:	f3bf 8f6f 	isb	sy
 8013368:	f3bf 8f4f 	dsb	sy
 801336c:	613b      	str	r3, [r7, #16]
}
 801336e:	bf00      	nop
 8013370:	e7fe      	b.n	8013370 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013378:	2b00      	cmp	r3, #0
 801337a:	d00a      	beq.n	8013392 <xEventGroupSetBits+0x52>
	__asm volatile
 801337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	60fb      	str	r3, [r7, #12]
}
 801338e:	bf00      	nop
 8013390:	e7fe      	b.n	8013390 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013394:	3304      	adds	r3, #4
 8013396:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339a:	3308      	adds	r3, #8
 801339c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801339e:	f001 fa4d 	bl	801483c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80133a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a4:	68db      	ldr	r3, [r3, #12]
 80133a6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80133a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133aa:	681a      	ldr	r2, [r3, #0]
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	431a      	orrs	r2, r3
 80133b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80133b4:	e03c      	b.n	8013430 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80133b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80133bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80133c2:	2300      	movs	r3, #0
 80133c4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80133c6:	69bb      	ldr	r3, [r7, #24]
 80133c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80133cc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80133ce:	69bb      	ldr	r3, [r7, #24]
 80133d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80133d4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d108      	bne.n	80133f2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80133e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e2:	681a      	ldr	r2, [r3, #0]
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	4013      	ands	r3, r2
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d00b      	beq.n	8013404 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80133ec:	2301      	movs	r3, #1
 80133ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80133f0:	e008      	b.n	8013404 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80133f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	4013      	ands	r3, r2
 80133fa:	69ba      	ldr	r2, [r7, #24]
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d101      	bne.n	8013404 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013400:	2301      	movs	r3, #1
 8013402:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013406:	2b00      	cmp	r3, #0
 8013408:	d010      	beq.n	801342c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013410:	2b00      	cmp	r3, #0
 8013412:	d003      	beq.n	801341c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013416:	69bb      	ldr	r3, [r7, #24]
 8013418:	4313      	orrs	r3, r2
 801341a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013424:	4619      	mov	r1, r3
 8013426:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013428:	f001 fcd4 	bl	8014dd4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801342c:	69fb      	ldr	r3, [r7, #28]
 801342e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013432:	6a3b      	ldr	r3, [r7, #32]
 8013434:	429a      	cmp	r2, r3
 8013436:	d1be      	bne.n	80133b6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343a:	681a      	ldr	r2, [r3, #0]
 801343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801343e:	43db      	mvns	r3, r3
 8013440:	401a      	ands	r2, r3
 8013442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013444:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013446:	f001 fa07 	bl	8014858 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344c:	681b      	ldr	r3, [r3, #0]
}
 801344e:	4618      	mov	r0, r3
 8013450:	3738      	adds	r7, #56	; 0x38
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}

08013456 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013456:	b580      	push	{r7, lr}
 8013458:	b082      	sub	sp, #8
 801345a:	af00      	add	r7, sp, #0
 801345c:	6078      	str	r0, [r7, #4]
 801345e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013460:	6839      	ldr	r1, [r7, #0]
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f7ff ff6c 	bl	8013340 <xEventGroupSetBits>
}
 8013468:	bf00      	nop
 801346a:	3708      	adds	r7, #8
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}

08013470 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013470:	b480      	push	{r7}
 8013472:	b087      	sub	sp, #28
 8013474:	af00      	add	r7, sp, #0
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801347c:	2300      	movs	r3, #0
 801347e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d107      	bne.n	8013496 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013486:	68fa      	ldr	r2, [r7, #12]
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	4013      	ands	r3, r2
 801348c:	2b00      	cmp	r3, #0
 801348e:	d00a      	beq.n	80134a6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013490:	2301      	movs	r3, #1
 8013492:	617b      	str	r3, [r7, #20]
 8013494:	e007      	b.n	80134a6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013496:	68fa      	ldr	r2, [r7, #12]
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	4013      	ands	r3, r2
 801349c:	68ba      	ldr	r2, [r7, #8]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d101      	bne.n	80134a6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80134a2:	2301      	movs	r3, #1
 80134a4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80134a6:	697b      	ldr	r3, [r7, #20]
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	371c      	adds	r7, #28
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr

080134b4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b086      	sub	sp, #24
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	60b9      	str	r1, [r7, #8]
 80134be:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	68ba      	ldr	r2, [r7, #8]
 80134c4:	68f9      	ldr	r1, [r7, #12]
 80134c6:	4804      	ldr	r0, [pc, #16]	; (80134d8 <xEventGroupSetBitsFromISR+0x24>)
 80134c8:	f002 fa86 	bl	80159d8 <xTimerPendFunctionCallFromISR>
 80134cc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80134ce:	697b      	ldr	r3, [r7, #20]
	}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3718      	adds	r7, #24
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	08013457 	.word	0x08013457

080134dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80134dc:	b480      	push	{r7}
 80134de:	b083      	sub	sp, #12
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f103 0208 	add.w	r2, r3, #8
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f103 0208 	add.w	r2, r3, #8
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f103 0208 	add.w	r2, r3, #8
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	2200      	movs	r2, #0
 801350e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013510:	bf00      	nop
 8013512:	370c      	adds	r7, #12
 8013514:	46bd      	mov	sp, r7
 8013516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351a:	4770      	bx	lr

0801351c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801351c:	b480      	push	{r7}
 801351e:	b083      	sub	sp, #12
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2200      	movs	r2, #0
 8013528:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801352a:	bf00      	nop
 801352c:	370c      	adds	r7, #12
 801352e:	46bd      	mov	sp, r7
 8013530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013534:	4770      	bx	lr

08013536 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013536:	b480      	push	{r7}
 8013538:	b085      	sub	sp, #20
 801353a:	af00      	add	r7, sp, #0
 801353c:	6078      	str	r0, [r7, #4]
 801353e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	689a      	ldr	r2, [r3, #8]
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	689b      	ldr	r3, [r3, #8]
 8013558:	683a      	ldr	r2, [r7, #0]
 801355a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	683a      	ldr	r2, [r7, #0]
 8013560:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	1c5a      	adds	r2, r3, #1
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	601a      	str	r2, [r3, #0]
}
 8013572:	bf00      	nop
 8013574:	3714      	adds	r7, #20
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr

0801357e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801357e:	b480      	push	{r7}
 8013580:	b085      	sub	sp, #20
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
 8013586:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013594:	d103      	bne.n	801359e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	691b      	ldr	r3, [r3, #16]
 801359a:	60fb      	str	r3, [r7, #12]
 801359c:	e00c      	b.n	80135b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	3308      	adds	r3, #8
 80135a2:	60fb      	str	r3, [r7, #12]
 80135a4:	e002      	b.n	80135ac <vListInsert+0x2e>
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	60fb      	str	r3, [r7, #12]
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	68ba      	ldr	r2, [r7, #8]
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d2f6      	bcs.n	80135a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	685a      	ldr	r2, [r3, #4]
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	685b      	ldr	r3, [r3, #4]
 80135c4:	683a      	ldr	r2, [r7, #0]
 80135c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	68fa      	ldr	r2, [r7, #12]
 80135cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	683a      	ldr	r2, [r7, #0]
 80135d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	687a      	ldr	r2, [r7, #4]
 80135d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	1c5a      	adds	r2, r3, #1
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	601a      	str	r2, [r3, #0]
}
 80135e4:	bf00      	nop
 80135e6:	3714      	adds	r7, #20
 80135e8:	46bd      	mov	sp, r7
 80135ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ee:	4770      	bx	lr

080135f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80135f0:	b480      	push	{r7}
 80135f2:	b085      	sub	sp, #20
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	691b      	ldr	r3, [r3, #16]
 80135fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	685b      	ldr	r3, [r3, #4]
 8013602:	687a      	ldr	r2, [r7, #4]
 8013604:	6892      	ldr	r2, [r2, #8]
 8013606:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	689b      	ldr	r3, [r3, #8]
 801360c:	687a      	ldr	r2, [r7, #4]
 801360e:	6852      	ldr	r2, [r2, #4]
 8013610:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	429a      	cmp	r2, r3
 801361a:	d103      	bne.n	8013624 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	689a      	ldr	r2, [r3, #8]
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2200      	movs	r2, #0
 8013628:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	1e5a      	subs	r2, r3, #1
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	681b      	ldr	r3, [r3, #0]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3714      	adds	r7, #20
 801363c:	46bd      	mov	sp, r7
 801363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013642:	4770      	bx	lr

08013644 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b084      	sub	sp, #16
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
 801364c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d10a      	bne.n	801366e <xQueueGenericReset+0x2a>
	__asm volatile
 8013658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365c:	f383 8811 	msr	BASEPRI, r3
 8013660:	f3bf 8f6f 	isb	sy
 8013664:	f3bf 8f4f 	dsb	sy
 8013668:	60bb      	str	r3, [r7, #8]
}
 801366a:	bf00      	nop
 801366c:	e7fe      	b.n	801366c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801366e:	f002 fb01 	bl	8015c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	681a      	ldr	r2, [r3, #0]
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801367a:	68f9      	ldr	r1, [r7, #12]
 801367c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801367e:	fb01 f303 	mul.w	r3, r1, r3
 8013682:	441a      	add	r2, r3
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2200      	movs	r2, #0
 801368c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	681a      	ldr	r2, [r3, #0]
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	681a      	ldr	r2, [r3, #0]
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801369e:	3b01      	subs	r3, #1
 80136a0:	68f9      	ldr	r1, [r7, #12]
 80136a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80136a4:	fb01 f303 	mul.w	r3, r1, r3
 80136a8:	441a      	add	r2, r3
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	22ff      	movs	r2, #255	; 0xff
 80136b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	22ff      	movs	r2, #255	; 0xff
 80136ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d114      	bne.n	80136ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	691b      	ldr	r3, [r3, #16]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d01a      	beq.n	8013702 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	3310      	adds	r3, #16
 80136d0:	4618      	mov	r0, r3
 80136d2:	f001 fb1b 	bl	8014d0c <xTaskRemoveFromEventList>
 80136d6:	4603      	mov	r3, r0
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d012      	beq.n	8013702 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80136dc:	4b0c      	ldr	r3, [pc, #48]	; (8013710 <xQueueGenericReset+0xcc>)
 80136de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136e2:	601a      	str	r2, [r3, #0]
 80136e4:	f3bf 8f4f 	dsb	sy
 80136e8:	f3bf 8f6f 	isb	sy
 80136ec:	e009      	b.n	8013702 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	3310      	adds	r3, #16
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7ff fef2 	bl	80134dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	3324      	adds	r3, #36	; 0x24
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7ff feed 	bl	80134dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013702:	f002 fae7 	bl	8015cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013706:	2301      	movs	r3, #1
}
 8013708:	4618      	mov	r0, r3
 801370a:	3710      	adds	r7, #16
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	e000ed04 	.word	0xe000ed04

08013714 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013714:	b580      	push	{r7, lr}
 8013716:	b08e      	sub	sp, #56	; 0x38
 8013718:	af02      	add	r7, sp, #8
 801371a:	60f8      	str	r0, [r7, #12]
 801371c:	60b9      	str	r1, [r7, #8]
 801371e:	607a      	str	r2, [r7, #4]
 8013720:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d10a      	bne.n	801373e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801372c:	f383 8811 	msr	BASEPRI, r3
 8013730:	f3bf 8f6f 	isb	sy
 8013734:	f3bf 8f4f 	dsb	sy
 8013738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801373a:	bf00      	nop
 801373c:	e7fe      	b.n	801373c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d10a      	bne.n	801375a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013748:	f383 8811 	msr	BASEPRI, r3
 801374c:	f3bf 8f6f 	isb	sy
 8013750:	f3bf 8f4f 	dsb	sy
 8013754:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013756:	bf00      	nop
 8013758:	e7fe      	b.n	8013758 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d002      	beq.n	8013766 <xQueueGenericCreateStatic+0x52>
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d001      	beq.n	801376a <xQueueGenericCreateStatic+0x56>
 8013766:	2301      	movs	r3, #1
 8013768:	e000      	b.n	801376c <xQueueGenericCreateStatic+0x58>
 801376a:	2300      	movs	r3, #0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d10a      	bne.n	8013786 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013774:	f383 8811 	msr	BASEPRI, r3
 8013778:	f3bf 8f6f 	isb	sy
 801377c:	f3bf 8f4f 	dsb	sy
 8013780:	623b      	str	r3, [r7, #32]
}
 8013782:	bf00      	nop
 8013784:	e7fe      	b.n	8013784 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d102      	bne.n	8013792 <xQueueGenericCreateStatic+0x7e>
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d101      	bne.n	8013796 <xQueueGenericCreateStatic+0x82>
 8013792:	2301      	movs	r3, #1
 8013794:	e000      	b.n	8013798 <xQueueGenericCreateStatic+0x84>
 8013796:	2300      	movs	r3, #0
 8013798:	2b00      	cmp	r3, #0
 801379a:	d10a      	bne.n	80137b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a0:	f383 8811 	msr	BASEPRI, r3
 80137a4:	f3bf 8f6f 	isb	sy
 80137a8:	f3bf 8f4f 	dsb	sy
 80137ac:	61fb      	str	r3, [r7, #28]
}
 80137ae:	bf00      	nop
 80137b0:	e7fe      	b.n	80137b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80137b2:	2350      	movs	r3, #80	; 0x50
 80137b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	2b50      	cmp	r3, #80	; 0x50
 80137ba:	d00a      	beq.n	80137d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80137bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c0:	f383 8811 	msr	BASEPRI, r3
 80137c4:	f3bf 8f6f 	isb	sy
 80137c8:	f3bf 8f4f 	dsb	sy
 80137cc:	61bb      	str	r3, [r7, #24]
}
 80137ce:	bf00      	nop
 80137d0:	e7fe      	b.n	80137d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80137d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80137d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d00d      	beq.n	80137fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80137de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e0:	2201      	movs	r2, #1
 80137e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80137e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80137ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ec:	9300      	str	r3, [sp, #0]
 80137ee:	4613      	mov	r3, r2
 80137f0:	687a      	ldr	r2, [r7, #4]
 80137f2:	68b9      	ldr	r1, [r7, #8]
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f000 f83f 	bl	8013878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80137fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3730      	adds	r7, #48	; 0x30
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}

08013804 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013804:	b580      	push	{r7, lr}
 8013806:	b08a      	sub	sp, #40	; 0x28
 8013808:	af02      	add	r7, sp, #8
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	4613      	mov	r3, r2
 8013810:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d10a      	bne.n	801382e <xQueueGenericCreate+0x2a>
	__asm volatile
 8013818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381c:	f383 8811 	msr	BASEPRI, r3
 8013820:	f3bf 8f6f 	isb	sy
 8013824:	f3bf 8f4f 	dsb	sy
 8013828:	613b      	str	r3, [r7, #16]
}
 801382a:	bf00      	nop
 801382c:	e7fe      	b.n	801382c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	68ba      	ldr	r2, [r7, #8]
 8013832:	fb02 f303 	mul.w	r3, r2, r3
 8013836:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013838:	69fb      	ldr	r3, [r7, #28]
 801383a:	3350      	adds	r3, #80	; 0x50
 801383c:	4618      	mov	r0, r3
 801383e:	f002 fb3b 	bl	8015eb8 <pvPortMalloc>
 8013842:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d011      	beq.n	801386e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801384a:	69bb      	ldr	r3, [r7, #24]
 801384c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	3350      	adds	r3, #80	; 0x50
 8013852:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013854:	69bb      	ldr	r3, [r7, #24]
 8013856:	2200      	movs	r2, #0
 8013858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801385c:	79fa      	ldrb	r2, [r7, #7]
 801385e:	69bb      	ldr	r3, [r7, #24]
 8013860:	9300      	str	r3, [sp, #0]
 8013862:	4613      	mov	r3, r2
 8013864:	697a      	ldr	r2, [r7, #20]
 8013866:	68b9      	ldr	r1, [r7, #8]
 8013868:	68f8      	ldr	r0, [r7, #12]
 801386a:	f000 f805 	bl	8013878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801386e:	69bb      	ldr	r3, [r7, #24]
	}
 8013870:	4618      	mov	r0, r3
 8013872:	3720      	adds	r7, #32
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	60f8      	str	r0, [r7, #12]
 8013880:	60b9      	str	r1, [r7, #8]
 8013882:	607a      	str	r2, [r7, #4]
 8013884:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d103      	bne.n	8013894 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	69ba      	ldr	r2, [r7, #24]
 8013890:	601a      	str	r2, [r3, #0]
 8013892:	e002      	b.n	801389a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013894:	69bb      	ldr	r3, [r7, #24]
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	68fa      	ldr	r2, [r7, #12]
 801389e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80138a0:	69bb      	ldr	r3, [r7, #24]
 80138a2:	68ba      	ldr	r2, [r7, #8]
 80138a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80138a6:	2101      	movs	r1, #1
 80138a8:	69b8      	ldr	r0, [r7, #24]
 80138aa:	f7ff fecb 	bl	8013644 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	78fa      	ldrb	r2, [r7, #3]
 80138b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80138b6:	bf00      	nop
 80138b8:	3710      	adds	r7, #16
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}
	...

080138c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b08e      	sub	sp, #56	; 0x38
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	607a      	str	r2, [r7, #4]
 80138cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80138ce:	2300      	movs	r3, #0
 80138d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80138d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d10a      	bne.n	80138f2 <xQueueGenericSend+0x32>
	__asm volatile
 80138dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e0:	f383 8811 	msr	BASEPRI, r3
 80138e4:	f3bf 8f6f 	isb	sy
 80138e8:	f3bf 8f4f 	dsb	sy
 80138ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80138ee:	bf00      	nop
 80138f0:	e7fe      	b.n	80138f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d103      	bne.n	8013900 <xQueueGenericSend+0x40>
 80138f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d101      	bne.n	8013904 <xQueueGenericSend+0x44>
 8013900:	2301      	movs	r3, #1
 8013902:	e000      	b.n	8013906 <xQueueGenericSend+0x46>
 8013904:	2300      	movs	r3, #0
 8013906:	2b00      	cmp	r3, #0
 8013908:	d10a      	bne.n	8013920 <xQueueGenericSend+0x60>
	__asm volatile
 801390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801390e:	f383 8811 	msr	BASEPRI, r3
 8013912:	f3bf 8f6f 	isb	sy
 8013916:	f3bf 8f4f 	dsb	sy
 801391a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801391c:	bf00      	nop
 801391e:	e7fe      	b.n	801391e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	2b02      	cmp	r3, #2
 8013924:	d103      	bne.n	801392e <xQueueGenericSend+0x6e>
 8013926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801392a:	2b01      	cmp	r3, #1
 801392c:	d101      	bne.n	8013932 <xQueueGenericSend+0x72>
 801392e:	2301      	movs	r3, #1
 8013930:	e000      	b.n	8013934 <xQueueGenericSend+0x74>
 8013932:	2300      	movs	r3, #0
 8013934:	2b00      	cmp	r3, #0
 8013936:	d10a      	bne.n	801394e <xQueueGenericSend+0x8e>
	__asm volatile
 8013938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801393c:	f383 8811 	msr	BASEPRI, r3
 8013940:	f3bf 8f6f 	isb	sy
 8013944:	f3bf 8f4f 	dsb	sy
 8013948:	623b      	str	r3, [r7, #32]
}
 801394a:	bf00      	nop
 801394c:	e7fe      	b.n	801394c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801394e:	f001 fbfd 	bl	801514c <xTaskGetSchedulerState>
 8013952:	4603      	mov	r3, r0
 8013954:	2b00      	cmp	r3, #0
 8013956:	d102      	bne.n	801395e <xQueueGenericSend+0x9e>
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d101      	bne.n	8013962 <xQueueGenericSend+0xa2>
 801395e:	2301      	movs	r3, #1
 8013960:	e000      	b.n	8013964 <xQueueGenericSend+0xa4>
 8013962:	2300      	movs	r3, #0
 8013964:	2b00      	cmp	r3, #0
 8013966:	d10a      	bne.n	801397e <xQueueGenericSend+0xbe>
	__asm volatile
 8013968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801396c:	f383 8811 	msr	BASEPRI, r3
 8013970:	f3bf 8f6f 	isb	sy
 8013974:	f3bf 8f4f 	dsb	sy
 8013978:	61fb      	str	r3, [r7, #28]
}
 801397a:	bf00      	nop
 801397c:	e7fe      	b.n	801397c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801397e:	f002 f979 	bl	8015c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801398a:	429a      	cmp	r2, r3
 801398c:	d302      	bcc.n	8013994 <xQueueGenericSend+0xd4>
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	2b02      	cmp	r3, #2
 8013992:	d129      	bne.n	80139e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013994:	683a      	ldr	r2, [r7, #0]
 8013996:	68b9      	ldr	r1, [r7, #8]
 8013998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801399a:	f000 fa8b 	bl	8013eb4 <prvCopyDataToQueue>
 801399e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d010      	beq.n	80139ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139aa:	3324      	adds	r3, #36	; 0x24
 80139ac:	4618      	mov	r0, r3
 80139ae:	f001 f9ad 	bl	8014d0c <xTaskRemoveFromEventList>
 80139b2:	4603      	mov	r3, r0
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d013      	beq.n	80139e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80139b8:	4b3f      	ldr	r3, [pc, #252]	; (8013ab8 <xQueueGenericSend+0x1f8>)
 80139ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139be:	601a      	str	r2, [r3, #0]
 80139c0:	f3bf 8f4f 	dsb	sy
 80139c4:	f3bf 8f6f 	isb	sy
 80139c8:	e00a      	b.n	80139e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80139ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d007      	beq.n	80139e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80139d0:	4b39      	ldr	r3, [pc, #228]	; (8013ab8 <xQueueGenericSend+0x1f8>)
 80139d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139d6:	601a      	str	r2, [r3, #0]
 80139d8:	f3bf 8f4f 	dsb	sy
 80139dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80139e0:	f002 f978 	bl	8015cd4 <vPortExitCritical>
				return pdPASS;
 80139e4:	2301      	movs	r3, #1
 80139e6:	e063      	b.n	8013ab0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d103      	bne.n	80139f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80139ee:	f002 f971 	bl	8015cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80139f2:	2300      	movs	r3, #0
 80139f4:	e05c      	b.n	8013ab0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80139f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d106      	bne.n	8013a0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139fc:	f107 0314 	add.w	r3, r7, #20
 8013a00:	4618      	mov	r0, r3
 8013a02:	f001 fa49 	bl	8014e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a06:	2301      	movs	r3, #1
 8013a08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a0a:	f002 f963 	bl	8015cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013a0e:	f000 ff15 	bl	801483c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a12:	f002 f92f 	bl	8015c74 <vPortEnterCritical>
 8013a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a1c:	b25b      	sxtb	r3, r3
 8013a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a22:	d103      	bne.n	8013a2c <xQueueGenericSend+0x16c>
 8013a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a26:	2200      	movs	r2, #0
 8013a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a32:	b25b      	sxtb	r3, r3
 8013a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a38:	d103      	bne.n	8013a42 <xQueueGenericSend+0x182>
 8013a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013a42:	f002 f947 	bl	8015cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a46:	1d3a      	adds	r2, r7, #4
 8013a48:	f107 0314 	add.w	r3, r7, #20
 8013a4c:	4611      	mov	r1, r2
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f001 fa38 	bl	8014ec4 <xTaskCheckForTimeOut>
 8013a54:	4603      	mov	r3, r0
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d124      	bne.n	8013aa4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a5c:	f000 fb22 	bl	80140a4 <prvIsQueueFull>
 8013a60:	4603      	mov	r3, r0
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d018      	beq.n	8013a98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a68:	3310      	adds	r3, #16
 8013a6a:	687a      	ldr	r2, [r7, #4]
 8013a6c:	4611      	mov	r1, r2
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f001 f8c0 	bl	8014bf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a76:	f000 faad 	bl	8013fd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013a7a:	f000 feed 	bl	8014858 <xTaskResumeAll>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f47f af7c 	bne.w	801397e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013a86:	4b0c      	ldr	r3, [pc, #48]	; (8013ab8 <xQueueGenericSend+0x1f8>)
 8013a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a8c:	601a      	str	r2, [r3, #0]
 8013a8e:	f3bf 8f4f 	dsb	sy
 8013a92:	f3bf 8f6f 	isb	sy
 8013a96:	e772      	b.n	801397e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a9a:	f000 fa9b 	bl	8013fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a9e:	f000 fedb 	bl	8014858 <xTaskResumeAll>
 8013aa2:	e76c      	b.n	801397e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013aa6:	f000 fa95 	bl	8013fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013aaa:	f000 fed5 	bl	8014858 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013aae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	3738      	adds	r7, #56	; 0x38
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}
 8013ab8:	e000ed04 	.word	0xe000ed04

08013abc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b090      	sub	sp, #64	; 0x40
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	60f8      	str	r0, [r7, #12]
 8013ac4:	60b9      	str	r1, [r7, #8]
 8013ac6:	607a      	str	r2, [r7, #4]
 8013ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d10a      	bne.n	8013aea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad8:	f383 8811 	msr	BASEPRI, r3
 8013adc:	f3bf 8f6f 	isb	sy
 8013ae0:	f3bf 8f4f 	dsb	sy
 8013ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013ae6:	bf00      	nop
 8013ae8:	e7fe      	b.n	8013ae8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d103      	bne.n	8013af8 <xQueueGenericSendFromISR+0x3c>
 8013af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d101      	bne.n	8013afc <xQueueGenericSendFromISR+0x40>
 8013af8:	2301      	movs	r3, #1
 8013afa:	e000      	b.n	8013afe <xQueueGenericSendFromISR+0x42>
 8013afc:	2300      	movs	r3, #0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d10a      	bne.n	8013b18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b06:	f383 8811 	msr	BASEPRI, r3
 8013b0a:	f3bf 8f6f 	isb	sy
 8013b0e:	f3bf 8f4f 	dsb	sy
 8013b12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013b14:	bf00      	nop
 8013b16:	e7fe      	b.n	8013b16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	2b02      	cmp	r3, #2
 8013b1c:	d103      	bne.n	8013b26 <xQueueGenericSendFromISR+0x6a>
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b22:	2b01      	cmp	r3, #1
 8013b24:	d101      	bne.n	8013b2a <xQueueGenericSendFromISR+0x6e>
 8013b26:	2301      	movs	r3, #1
 8013b28:	e000      	b.n	8013b2c <xQueueGenericSendFromISR+0x70>
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10a      	bne.n	8013b46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b34:	f383 8811 	msr	BASEPRI, r3
 8013b38:	f3bf 8f6f 	isb	sy
 8013b3c:	f3bf 8f4f 	dsb	sy
 8013b40:	623b      	str	r3, [r7, #32]
}
 8013b42:	bf00      	nop
 8013b44:	e7fe      	b.n	8013b44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b46:	f002 f977 	bl	8015e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013b4a:	f3ef 8211 	mrs	r2, BASEPRI
 8013b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b52:	f383 8811 	msr	BASEPRI, r3
 8013b56:	f3bf 8f6f 	isb	sy
 8013b5a:	f3bf 8f4f 	dsb	sy
 8013b5e:	61fa      	str	r2, [r7, #28]
 8013b60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013b62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d302      	bcc.n	8013b78 <xQueueGenericSendFromISR+0xbc>
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	2b02      	cmp	r3, #2
 8013b76:	d12f      	bne.n	8013bd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013b88:	683a      	ldr	r2, [r7, #0]
 8013b8a:	68b9      	ldr	r1, [r7, #8]
 8013b8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b8e:	f000 f991 	bl	8013eb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b9a:	d112      	bne.n	8013bc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d016      	beq.n	8013bd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba6:	3324      	adds	r3, #36	; 0x24
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f001 f8af 	bl	8014d0c <xTaskRemoveFromEventList>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d00e      	beq.n	8013bd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d00b      	beq.n	8013bd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	601a      	str	r2, [r3, #0]
 8013bc0:	e007      	b.n	8013bd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	b2db      	uxtb	r3, r3
 8013bca:	b25a      	sxtb	r2, r3
 8013bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013bd6:	e001      	b.n	8013bdc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013be6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3740      	adds	r7, #64	; 0x40
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
	...

08013bf4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b08c      	sub	sp, #48	; 0x30
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	60f8      	str	r0, [r7, #12]
 8013bfc:	60b9      	str	r1, [r7, #8]
 8013bfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013c00:	2300      	movs	r3, #0
 8013c02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d10a      	bne.n	8013c24 <xQueueReceive+0x30>
	__asm volatile
 8013c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c12:	f383 8811 	msr	BASEPRI, r3
 8013c16:	f3bf 8f6f 	isb	sy
 8013c1a:	f3bf 8f4f 	dsb	sy
 8013c1e:	623b      	str	r3, [r7, #32]
}
 8013c20:	bf00      	nop
 8013c22:	e7fe      	b.n	8013c22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d103      	bne.n	8013c32 <xQueueReceive+0x3e>
 8013c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d101      	bne.n	8013c36 <xQueueReceive+0x42>
 8013c32:	2301      	movs	r3, #1
 8013c34:	e000      	b.n	8013c38 <xQueueReceive+0x44>
 8013c36:	2300      	movs	r3, #0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d10a      	bne.n	8013c52 <xQueueReceive+0x5e>
	__asm volatile
 8013c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c40:	f383 8811 	msr	BASEPRI, r3
 8013c44:	f3bf 8f6f 	isb	sy
 8013c48:	f3bf 8f4f 	dsb	sy
 8013c4c:	61fb      	str	r3, [r7, #28]
}
 8013c4e:	bf00      	nop
 8013c50:	e7fe      	b.n	8013c50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c52:	f001 fa7b 	bl	801514c <xTaskGetSchedulerState>
 8013c56:	4603      	mov	r3, r0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d102      	bne.n	8013c62 <xQueueReceive+0x6e>
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d101      	bne.n	8013c66 <xQueueReceive+0x72>
 8013c62:	2301      	movs	r3, #1
 8013c64:	e000      	b.n	8013c68 <xQueueReceive+0x74>
 8013c66:	2300      	movs	r3, #0
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d10a      	bne.n	8013c82 <xQueueReceive+0x8e>
	__asm volatile
 8013c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c70:	f383 8811 	msr	BASEPRI, r3
 8013c74:	f3bf 8f6f 	isb	sy
 8013c78:	f3bf 8f4f 	dsb	sy
 8013c7c:	61bb      	str	r3, [r7, #24]
}
 8013c7e:	bf00      	nop
 8013c80:	e7fe      	b.n	8013c80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c82:	f001 fff7 	bl	8015c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d01f      	beq.n	8013cd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c92:	68b9      	ldr	r1, [r7, #8]
 8013c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c96:	f000 f977 	bl	8013f88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9c:	1e5a      	subs	r2, r3, #1
 8013c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca4:	691b      	ldr	r3, [r3, #16]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d00f      	beq.n	8013cca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cac:	3310      	adds	r3, #16
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f001 f82c 	bl	8014d0c <xTaskRemoveFromEventList>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d007      	beq.n	8013cca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013cba:	4b3d      	ldr	r3, [pc, #244]	; (8013db0 <xQueueReceive+0x1bc>)
 8013cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cc0:	601a      	str	r2, [r3, #0]
 8013cc2:	f3bf 8f4f 	dsb	sy
 8013cc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013cca:	f002 f803 	bl	8015cd4 <vPortExitCritical>
				return pdPASS;
 8013cce:	2301      	movs	r3, #1
 8013cd0:	e069      	b.n	8013da6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d103      	bne.n	8013ce0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013cd8:	f001 fffc 	bl	8015cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	e062      	b.n	8013da6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d106      	bne.n	8013cf4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013ce6:	f107 0310 	add.w	r3, r7, #16
 8013cea:	4618      	mov	r0, r3
 8013cec:	f001 f8d4 	bl	8014e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013cf4:	f001 ffee 	bl	8015cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013cf8:	f000 fda0 	bl	801483c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cfc:	f001 ffba 	bl	8015c74 <vPortEnterCritical>
 8013d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d06:	b25b      	sxtb	r3, r3
 8013d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d0c:	d103      	bne.n	8013d16 <xQueueReceive+0x122>
 8013d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d10:	2200      	movs	r2, #0
 8013d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d1c:	b25b      	sxtb	r3, r3
 8013d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d22:	d103      	bne.n	8013d2c <xQueueReceive+0x138>
 8013d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d26:	2200      	movs	r2, #0
 8013d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d2c:	f001 ffd2 	bl	8015cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d30:	1d3a      	adds	r2, r7, #4
 8013d32:	f107 0310 	add.w	r3, r7, #16
 8013d36:	4611      	mov	r1, r2
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f001 f8c3 	bl	8014ec4 <xTaskCheckForTimeOut>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d123      	bne.n	8013d8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d46:	f000 f997 	bl	8014078 <prvIsQueueEmpty>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d017      	beq.n	8013d80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d52:	3324      	adds	r3, #36	; 0x24
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	4611      	mov	r1, r2
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f000 ff4b 	bl	8014bf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d60:	f000 f938 	bl	8013fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d64:	f000 fd78 	bl	8014858 <xTaskResumeAll>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d189      	bne.n	8013c82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013d6e:	4b10      	ldr	r3, [pc, #64]	; (8013db0 <xQueueReceive+0x1bc>)
 8013d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d74:	601a      	str	r2, [r3, #0]
 8013d76:	f3bf 8f4f 	dsb	sy
 8013d7a:	f3bf 8f6f 	isb	sy
 8013d7e:	e780      	b.n	8013c82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d82:	f000 f927 	bl	8013fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d86:	f000 fd67 	bl	8014858 <xTaskResumeAll>
 8013d8a:	e77a      	b.n	8013c82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d8e:	f000 f921 	bl	8013fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d92:	f000 fd61 	bl	8014858 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d98:	f000 f96e 	bl	8014078 <prvIsQueueEmpty>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	f43f af6f 	beq.w	8013c82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013da4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3730      	adds	r7, #48	; 0x30
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	e000ed04 	.word	0xe000ed04

08013db4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b08e      	sub	sp, #56	; 0x38
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	60f8      	str	r0, [r7, #12]
 8013dbc:	60b9      	str	r1, [r7, #8]
 8013dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d10a      	bne.n	8013de0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dce:	f383 8811 	msr	BASEPRI, r3
 8013dd2:	f3bf 8f6f 	isb	sy
 8013dd6:	f3bf 8f4f 	dsb	sy
 8013dda:	623b      	str	r3, [r7, #32]
}
 8013ddc:	bf00      	nop
 8013dde:	e7fe      	b.n	8013dde <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d103      	bne.n	8013dee <xQueueReceiveFromISR+0x3a>
 8013de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d101      	bne.n	8013df2 <xQueueReceiveFromISR+0x3e>
 8013dee:	2301      	movs	r3, #1
 8013df0:	e000      	b.n	8013df4 <xQueueReceiveFromISR+0x40>
 8013df2:	2300      	movs	r3, #0
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d10a      	bne.n	8013e0e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dfc:	f383 8811 	msr	BASEPRI, r3
 8013e00:	f3bf 8f6f 	isb	sy
 8013e04:	f3bf 8f4f 	dsb	sy
 8013e08:	61fb      	str	r3, [r7, #28]
}
 8013e0a:	bf00      	nop
 8013e0c:	e7fe      	b.n	8013e0c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e0e:	f002 f813 	bl	8015e38 <vPortValidateInterruptPriority>
	__asm volatile
 8013e12:	f3ef 8211 	mrs	r2, BASEPRI
 8013e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1a:	f383 8811 	msr	BASEPRI, r3
 8013e1e:	f3bf 8f6f 	isb	sy
 8013e22:	f3bf 8f4f 	dsb	sy
 8013e26:	61ba      	str	r2, [r7, #24]
 8013e28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013e2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d02f      	beq.n	8013e9a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013e44:	68b9      	ldr	r1, [r7, #8]
 8013e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e48:	f000 f89e 	bl	8013f88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e4e:	1e5a      	subs	r2, r3, #1
 8013e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013e54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e5c:	d112      	bne.n	8013e84 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e60:	691b      	ldr	r3, [r3, #16]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d016      	beq.n	8013e94 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	3310      	adds	r3, #16
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f000 ff4e 	bl	8014d0c <xTaskRemoveFromEventList>
 8013e70:	4603      	mov	r3, r0
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d00e      	beq.n	8013e94 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d00b      	beq.n	8013e94 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2201      	movs	r2, #1
 8013e80:	601a      	str	r2, [r3, #0]
 8013e82:	e007      	b.n	8013e94 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e88:	3301      	adds	r3, #1
 8013e8a:	b2db      	uxtb	r3, r3
 8013e8c:	b25a      	sxtb	r2, r3
 8013e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013e94:	2301      	movs	r3, #1
 8013e96:	637b      	str	r3, [r7, #52]	; 0x34
 8013e98:	e001      	b.n	8013e9e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8013e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	f383 8811 	msr	BASEPRI, r3
}
 8013ea8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3738      	adds	r7, #56	; 0x38
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b086      	sub	sp, #24
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	60f8      	str	r0, [r7, #12]
 8013ebc:	60b9      	str	r1, [r7, #8]
 8013ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d10d      	bne.n	8013eee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d14d      	bne.n	8013f76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	689b      	ldr	r3, [r3, #8]
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f001 f952 	bl	8015188 <xTaskPriorityDisinherit>
 8013ee4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	2200      	movs	r2, #0
 8013eea:	609a      	str	r2, [r3, #8]
 8013eec:	e043      	b.n	8013f76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d119      	bne.n	8013f28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	6858      	ldr	r0, [r3, #4]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013efc:	461a      	mov	r2, r3
 8013efe:	68b9      	ldr	r1, [r7, #8]
 8013f00:	f002 f9fe 	bl	8016300 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	685a      	ldr	r2, [r3, #4]
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f0c:	441a      	add	r2, r3
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	685a      	ldr	r2, [r3, #4]
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	689b      	ldr	r3, [r3, #8]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d32b      	bcc.n	8013f76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	681a      	ldr	r2, [r3, #0]
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	605a      	str	r2, [r3, #4]
 8013f26:	e026      	b.n	8013f76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	68d8      	ldr	r0, [r3, #12]
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f30:	461a      	mov	r2, r3
 8013f32:	68b9      	ldr	r1, [r7, #8]
 8013f34:	f002 f9e4 	bl	8016300 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	68da      	ldr	r2, [r3, #12]
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f40:	425b      	negs	r3, r3
 8013f42:	441a      	add	r2, r3
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	68da      	ldr	r2, [r3, #12]
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d207      	bcs.n	8013f64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	689a      	ldr	r2, [r3, #8]
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f5c:	425b      	negs	r3, r3
 8013f5e:	441a      	add	r2, r3
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2b02      	cmp	r3, #2
 8013f68:	d105      	bne.n	8013f76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d002      	beq.n	8013f76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	3b01      	subs	r3, #1
 8013f74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	1c5a      	adds	r2, r3, #1
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013f7e:	697b      	ldr	r3, [r7, #20]
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3718      	adds	r7, #24
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d018      	beq.n	8013fcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	68da      	ldr	r2, [r3, #12]
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fa2:	441a      	add	r2, r3
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	68da      	ldr	r2, [r3, #12]
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	689b      	ldr	r3, [r3, #8]
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d303      	bcc.n	8013fbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681a      	ldr	r2, [r3, #0]
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	68d9      	ldr	r1, [r3, #12]
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fc4:	461a      	mov	r2, r3
 8013fc6:	6838      	ldr	r0, [r7, #0]
 8013fc8:	f002 f99a 	bl	8016300 <memcpy>
	}
}
 8013fcc:	bf00      	nop
 8013fce:	3708      	adds	r7, #8
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}

08013fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b084      	sub	sp, #16
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013fdc:	f001 fe4a 	bl	8015c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013fe8:	e011      	b.n	801400e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d012      	beq.n	8014018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	3324      	adds	r3, #36	; 0x24
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f000 fe88 	bl	8014d0c <xTaskRemoveFromEventList>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014002:	f000 ffc1 	bl	8014f88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014006:	7bfb      	ldrb	r3, [r7, #15]
 8014008:	3b01      	subs	r3, #1
 801400a:	b2db      	uxtb	r3, r3
 801400c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801400e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014012:	2b00      	cmp	r3, #0
 8014014:	dce9      	bgt.n	8013fea <prvUnlockQueue+0x16>
 8014016:	e000      	b.n	801401a <prvUnlockQueue+0x46>
					break;
 8014018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	22ff      	movs	r2, #255	; 0xff
 801401e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014022:	f001 fe57 	bl	8015cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014026:	f001 fe25 	bl	8015c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014032:	e011      	b.n	8014058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	691b      	ldr	r3, [r3, #16]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d012      	beq.n	8014062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	3310      	adds	r3, #16
 8014040:	4618      	mov	r0, r3
 8014042:	f000 fe63 	bl	8014d0c <xTaskRemoveFromEventList>
 8014046:	4603      	mov	r3, r0
 8014048:	2b00      	cmp	r3, #0
 801404a:	d001      	beq.n	8014050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801404c:	f000 ff9c 	bl	8014f88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014050:	7bbb      	ldrb	r3, [r7, #14]
 8014052:	3b01      	subs	r3, #1
 8014054:	b2db      	uxtb	r3, r3
 8014056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801405c:	2b00      	cmp	r3, #0
 801405e:	dce9      	bgt.n	8014034 <prvUnlockQueue+0x60>
 8014060:	e000      	b.n	8014064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	22ff      	movs	r2, #255	; 0xff
 8014068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801406c:	f001 fe32 	bl	8015cd4 <vPortExitCritical>
}
 8014070:	bf00      	nop
 8014072:	3710      	adds	r7, #16
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014080:	f001 fdf8 	bl	8015c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014088:	2b00      	cmp	r3, #0
 801408a:	d102      	bne.n	8014092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801408c:	2301      	movs	r3, #1
 801408e:	60fb      	str	r3, [r7, #12]
 8014090:	e001      	b.n	8014096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014092:	2300      	movs	r3, #0
 8014094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014096:	f001 fe1d 	bl	8015cd4 <vPortExitCritical>

	return xReturn;
 801409a:	68fb      	ldr	r3, [r7, #12]
}
 801409c:	4618      	mov	r0, r3
 801409e:	3710      	adds	r7, #16
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b084      	sub	sp, #16
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80140ac:	f001 fde2 	bl	8015c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d102      	bne.n	80140c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80140bc:	2301      	movs	r3, #1
 80140be:	60fb      	str	r3, [r7, #12]
 80140c0:	e001      	b.n	80140c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80140c2:	2300      	movs	r3, #0
 80140c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80140c6:	f001 fe05 	bl	8015cd4 <vPortExitCritical>

	return xReturn;
 80140ca:	68fb      	ldr	r3, [r7, #12]
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	3710      	adds	r7, #16
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80140d4:	b480      	push	{r7}
 80140d6:	b085      	sub	sp, #20
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80140de:	2300      	movs	r3, #0
 80140e0:	60fb      	str	r3, [r7, #12]
 80140e2:	e014      	b.n	801410e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80140e4:	4a0f      	ldr	r2, [pc, #60]	; (8014124 <vQueueAddToRegistry+0x50>)
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d10b      	bne.n	8014108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80140f0:	490c      	ldr	r1, [pc, #48]	; (8014124 <vQueueAddToRegistry+0x50>)
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	683a      	ldr	r2, [r7, #0]
 80140f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80140fa:	4a0a      	ldr	r2, [pc, #40]	; (8014124 <vQueueAddToRegistry+0x50>)
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	00db      	lsls	r3, r3, #3
 8014100:	4413      	add	r3, r2
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014106:	e006      	b.n	8014116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	3301      	adds	r3, #1
 801410c:	60fb      	str	r3, [r7, #12]
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2b07      	cmp	r3, #7
 8014112:	d9e7      	bls.n	80140e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014114:	bf00      	nop
 8014116:	bf00      	nop
 8014118:	3714      	adds	r7, #20
 801411a:	46bd      	mov	sp, r7
 801411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014120:	4770      	bx	lr
 8014122:	bf00      	nop
 8014124:	240017c8 	.word	0x240017c8

08014128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014128:	b580      	push	{r7, lr}
 801412a:	b086      	sub	sp, #24
 801412c:	af00      	add	r7, sp, #0
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014138:	f001 fd9c 	bl	8015c74 <vPortEnterCritical>
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014142:	b25b      	sxtb	r3, r3
 8014144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014148:	d103      	bne.n	8014152 <vQueueWaitForMessageRestricted+0x2a>
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	2200      	movs	r2, #0
 801414e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014158:	b25b      	sxtb	r3, r3
 801415a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801415e:	d103      	bne.n	8014168 <vQueueWaitForMessageRestricted+0x40>
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	2200      	movs	r2, #0
 8014164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014168:	f001 fdb4 	bl	8015cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014170:	2b00      	cmp	r3, #0
 8014172:	d106      	bne.n	8014182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	3324      	adds	r3, #36	; 0x24
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	68b9      	ldr	r1, [r7, #8]
 801417c:	4618      	mov	r0, r3
 801417e:	f000 fd99 	bl	8014cb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014182:	6978      	ldr	r0, [r7, #20]
 8014184:	f7ff ff26 	bl	8013fd4 <prvUnlockQueue>
	}
 8014188:	bf00      	nop
 801418a:	3718      	adds	r7, #24
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}

08014190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014190:	b580      	push	{r7, lr}
 8014192:	b08e      	sub	sp, #56	; 0x38
 8014194:	af04      	add	r7, sp, #16
 8014196:	60f8      	str	r0, [r7, #12]
 8014198:	60b9      	str	r1, [r7, #8]
 801419a:	607a      	str	r2, [r7, #4]
 801419c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801419e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d10a      	bne.n	80141ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80141a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a8:	f383 8811 	msr	BASEPRI, r3
 80141ac:	f3bf 8f6f 	isb	sy
 80141b0:	f3bf 8f4f 	dsb	sy
 80141b4:	623b      	str	r3, [r7, #32]
}
 80141b6:	bf00      	nop
 80141b8:	e7fe      	b.n	80141b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80141ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d10a      	bne.n	80141d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80141c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c4:	f383 8811 	msr	BASEPRI, r3
 80141c8:	f3bf 8f6f 	isb	sy
 80141cc:	f3bf 8f4f 	dsb	sy
 80141d0:	61fb      	str	r3, [r7, #28]
}
 80141d2:	bf00      	nop
 80141d4:	e7fe      	b.n	80141d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80141d6:	235c      	movs	r3, #92	; 0x5c
 80141d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	2b5c      	cmp	r3, #92	; 0x5c
 80141de:	d00a      	beq.n	80141f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80141e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e4:	f383 8811 	msr	BASEPRI, r3
 80141e8:	f3bf 8f6f 	isb	sy
 80141ec:	f3bf 8f4f 	dsb	sy
 80141f0:	61bb      	str	r3, [r7, #24]
}
 80141f2:	bf00      	nop
 80141f4:	e7fe      	b.n	80141f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80141f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80141f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d01e      	beq.n	801423c <xTaskCreateStatic+0xac>
 80141fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014200:	2b00      	cmp	r3, #0
 8014202:	d01b      	beq.n	801423c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801420c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014210:	2202      	movs	r2, #2
 8014212:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014216:	2300      	movs	r3, #0
 8014218:	9303      	str	r3, [sp, #12]
 801421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421c:	9302      	str	r3, [sp, #8]
 801421e:	f107 0314 	add.w	r3, r7, #20
 8014222:	9301      	str	r3, [sp, #4]
 8014224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014226:	9300      	str	r3, [sp, #0]
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	687a      	ldr	r2, [r7, #4]
 801422c:	68b9      	ldr	r1, [r7, #8]
 801422e:	68f8      	ldr	r0, [r7, #12]
 8014230:	f000 f850 	bl	80142d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014236:	f000 f8dd 	bl	80143f4 <prvAddNewTaskToReadyList>
 801423a:	e001      	b.n	8014240 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801423c:	2300      	movs	r3, #0
 801423e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014240:	697b      	ldr	r3, [r7, #20]
	}
 8014242:	4618      	mov	r0, r3
 8014244:	3728      	adds	r7, #40	; 0x28
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}

0801424a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801424a:	b580      	push	{r7, lr}
 801424c:	b08c      	sub	sp, #48	; 0x30
 801424e:	af04      	add	r7, sp, #16
 8014250:	60f8      	str	r0, [r7, #12]
 8014252:	60b9      	str	r1, [r7, #8]
 8014254:	603b      	str	r3, [r7, #0]
 8014256:	4613      	mov	r3, r2
 8014258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801425a:	88fb      	ldrh	r3, [r7, #6]
 801425c:	009b      	lsls	r3, r3, #2
 801425e:	4618      	mov	r0, r3
 8014260:	f001 fe2a 	bl	8015eb8 <pvPortMalloc>
 8014264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d00e      	beq.n	801428a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801426c:	205c      	movs	r0, #92	; 0x5c
 801426e:	f001 fe23 	bl	8015eb8 <pvPortMalloc>
 8014272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014274:	69fb      	ldr	r3, [r7, #28]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d003      	beq.n	8014282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801427a:	69fb      	ldr	r3, [r7, #28]
 801427c:	697a      	ldr	r2, [r7, #20]
 801427e:	631a      	str	r2, [r3, #48]	; 0x30
 8014280:	e005      	b.n	801428e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014282:	6978      	ldr	r0, [r7, #20]
 8014284:	f001 fee4 	bl	8016050 <vPortFree>
 8014288:	e001      	b.n	801428e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801428a:	2300      	movs	r3, #0
 801428c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d017      	beq.n	80142c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014294:	69fb      	ldr	r3, [r7, #28]
 8014296:	2200      	movs	r2, #0
 8014298:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801429c:	88fa      	ldrh	r2, [r7, #6]
 801429e:	2300      	movs	r3, #0
 80142a0:	9303      	str	r3, [sp, #12]
 80142a2:	69fb      	ldr	r3, [r7, #28]
 80142a4:	9302      	str	r3, [sp, #8]
 80142a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a8:	9301      	str	r3, [sp, #4]
 80142aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ac:	9300      	str	r3, [sp, #0]
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	68b9      	ldr	r1, [r7, #8]
 80142b2:	68f8      	ldr	r0, [r7, #12]
 80142b4:	f000 f80e 	bl	80142d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80142b8:	69f8      	ldr	r0, [r7, #28]
 80142ba:	f000 f89b 	bl	80143f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80142be:	2301      	movs	r3, #1
 80142c0:	61bb      	str	r3, [r7, #24]
 80142c2:	e002      	b.n	80142ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80142c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80142ca:	69bb      	ldr	r3, [r7, #24]
	}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3720      	adds	r7, #32
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}

080142d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b088      	sub	sp, #32
 80142d8:	af00      	add	r7, sp, #0
 80142da:	60f8      	str	r0, [r7, #12]
 80142dc:	60b9      	str	r1, [r7, #8]
 80142de:	607a      	str	r2, [r7, #4]
 80142e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80142e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	009b      	lsls	r3, r3, #2
 80142ea:	461a      	mov	r2, r3
 80142ec:	21a5      	movs	r1, #165	; 0xa5
 80142ee:	f002 f815 	bl	801631c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80142f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142f6:	6879      	ldr	r1, [r7, #4]
 80142f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80142fc:	440b      	add	r3, r1
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	4413      	add	r3, r2
 8014302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014304:	69bb      	ldr	r3, [r7, #24]
 8014306:	f023 0307 	bic.w	r3, r3, #7
 801430a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	f003 0307 	and.w	r3, r3, #7
 8014312:	2b00      	cmp	r3, #0
 8014314:	d00a      	beq.n	801432c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801431a:	f383 8811 	msr	BASEPRI, r3
 801431e:	f3bf 8f6f 	isb	sy
 8014322:	f3bf 8f4f 	dsb	sy
 8014326:	617b      	str	r3, [r7, #20]
}
 8014328:	bf00      	nop
 801432a:	e7fe      	b.n	801432a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d01f      	beq.n	8014372 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014332:	2300      	movs	r3, #0
 8014334:	61fb      	str	r3, [r7, #28]
 8014336:	e012      	b.n	801435e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014338:	68ba      	ldr	r2, [r7, #8]
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	4413      	add	r3, r2
 801433e:	7819      	ldrb	r1, [r3, #0]
 8014340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	4413      	add	r3, r2
 8014346:	3334      	adds	r3, #52	; 0x34
 8014348:	460a      	mov	r2, r1
 801434a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801434c:	68ba      	ldr	r2, [r7, #8]
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	4413      	add	r3, r2
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d006      	beq.n	8014366 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	3301      	adds	r3, #1
 801435c:	61fb      	str	r3, [r7, #28]
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	2b0f      	cmp	r3, #15
 8014362:	d9e9      	bls.n	8014338 <prvInitialiseNewTask+0x64>
 8014364:	e000      	b.n	8014368 <prvInitialiseNewTask+0x94>
			{
				break;
 8014366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436a:	2200      	movs	r2, #0
 801436c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014370:	e003      	b.n	801437a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014374:	2200      	movs	r2, #0
 8014376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801437c:	2b37      	cmp	r3, #55	; 0x37
 801437e:	d901      	bls.n	8014384 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014380:	2337      	movs	r3, #55	; 0x37
 8014382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801438c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801438e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014392:	2200      	movs	r2, #0
 8014394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014398:	3304      	adds	r3, #4
 801439a:	4618      	mov	r0, r3
 801439c:	f7ff f8be 	bl	801351c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80143a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a2:	3318      	adds	r3, #24
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7ff f8b9 	bl	801351c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80143aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80143b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80143ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80143c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c2:	2200      	movs	r2, #0
 80143c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80143c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c8:	2200      	movs	r2, #0
 80143ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80143ce:	683a      	ldr	r2, [r7, #0]
 80143d0:	68f9      	ldr	r1, [r7, #12]
 80143d2:	69b8      	ldr	r0, [r7, #24]
 80143d4:	f001 fb20 	bl	8015a18 <pxPortInitialiseStack>
 80143d8:	4602      	mov	r2, r0
 80143da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80143de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d002      	beq.n	80143ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80143e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80143ea:	bf00      	nop
 80143ec:	3720      	adds	r7, #32
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
	...

080143f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80143fc:	f001 fc3a 	bl	8015c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014400:	4b2d      	ldr	r3, [pc, #180]	; (80144b8 <prvAddNewTaskToReadyList+0xc4>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	3301      	adds	r3, #1
 8014406:	4a2c      	ldr	r2, [pc, #176]	; (80144b8 <prvAddNewTaskToReadyList+0xc4>)
 8014408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801440a:	4b2c      	ldr	r3, [pc, #176]	; (80144bc <prvAddNewTaskToReadyList+0xc8>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d109      	bne.n	8014426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014412:	4a2a      	ldr	r2, [pc, #168]	; (80144bc <prvAddNewTaskToReadyList+0xc8>)
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014418:	4b27      	ldr	r3, [pc, #156]	; (80144b8 <prvAddNewTaskToReadyList+0xc4>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b01      	cmp	r3, #1
 801441e:	d110      	bne.n	8014442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014420:	f000 fdd6 	bl	8014fd0 <prvInitialiseTaskLists>
 8014424:	e00d      	b.n	8014442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014426:	4b26      	ldr	r3, [pc, #152]	; (80144c0 <prvAddNewTaskToReadyList+0xcc>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d109      	bne.n	8014442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801442e:	4b23      	ldr	r3, [pc, #140]	; (80144bc <prvAddNewTaskToReadyList+0xc8>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014438:	429a      	cmp	r2, r3
 801443a:	d802      	bhi.n	8014442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801443c:	4a1f      	ldr	r2, [pc, #124]	; (80144bc <prvAddNewTaskToReadyList+0xc8>)
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014442:	4b20      	ldr	r3, [pc, #128]	; (80144c4 <prvAddNewTaskToReadyList+0xd0>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	3301      	adds	r3, #1
 8014448:	4a1e      	ldr	r2, [pc, #120]	; (80144c4 <prvAddNewTaskToReadyList+0xd0>)
 801444a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801444c:	4b1d      	ldr	r3, [pc, #116]	; (80144c4 <prvAddNewTaskToReadyList+0xd0>)
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014458:	4b1b      	ldr	r3, [pc, #108]	; (80144c8 <prvAddNewTaskToReadyList+0xd4>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	429a      	cmp	r2, r3
 801445e:	d903      	bls.n	8014468 <prvAddNewTaskToReadyList+0x74>
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014464:	4a18      	ldr	r2, [pc, #96]	; (80144c8 <prvAddNewTaskToReadyList+0xd4>)
 8014466:	6013      	str	r3, [r2, #0]
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801446c:	4613      	mov	r3, r2
 801446e:	009b      	lsls	r3, r3, #2
 8014470:	4413      	add	r3, r2
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	4a15      	ldr	r2, [pc, #84]	; (80144cc <prvAddNewTaskToReadyList+0xd8>)
 8014476:	441a      	add	r2, r3
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	3304      	adds	r3, #4
 801447c:	4619      	mov	r1, r3
 801447e:	4610      	mov	r0, r2
 8014480:	f7ff f859 	bl	8013536 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014484:	f001 fc26 	bl	8015cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014488:	4b0d      	ldr	r3, [pc, #52]	; (80144c0 <prvAddNewTaskToReadyList+0xcc>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d00e      	beq.n	80144ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014490:	4b0a      	ldr	r3, [pc, #40]	; (80144bc <prvAddNewTaskToReadyList+0xc8>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801449a:	429a      	cmp	r2, r3
 801449c:	d207      	bcs.n	80144ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801449e:	4b0c      	ldr	r3, [pc, #48]	; (80144d0 <prvAddNewTaskToReadyList+0xdc>)
 80144a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144a4:	601a      	str	r2, [r3, #0]
 80144a6:	f3bf 8f4f 	dsb	sy
 80144aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80144ae:	bf00      	nop
 80144b0:	3708      	adds	r7, #8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
 80144b6:	bf00      	nop
 80144b8:	24001cdc 	.word	0x24001cdc
 80144bc:	24001808 	.word	0x24001808
 80144c0:	24001ce8 	.word	0x24001ce8
 80144c4:	24001cf8 	.word	0x24001cf8
 80144c8:	24001ce4 	.word	0x24001ce4
 80144cc:	2400180c 	.word	0x2400180c
 80144d0:	e000ed04 	.word	0xe000ed04

080144d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b084      	sub	sp, #16
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80144dc:	2300      	movs	r3, #0
 80144de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d017      	beq.n	8014516 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80144e6:	4b13      	ldr	r3, [pc, #76]	; (8014534 <vTaskDelay+0x60>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d00a      	beq.n	8014504 <vTaskDelay+0x30>
	__asm volatile
 80144ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f2:	f383 8811 	msr	BASEPRI, r3
 80144f6:	f3bf 8f6f 	isb	sy
 80144fa:	f3bf 8f4f 	dsb	sy
 80144fe:	60bb      	str	r3, [r7, #8]
}
 8014500:	bf00      	nop
 8014502:	e7fe      	b.n	8014502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014504:	f000 f99a 	bl	801483c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014508:	2100      	movs	r1, #0
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f000 fec2 	bl	8015294 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014510:	f000 f9a2 	bl	8014858 <xTaskResumeAll>
 8014514:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d107      	bne.n	801452c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801451c:	4b06      	ldr	r3, [pc, #24]	; (8014538 <vTaskDelay+0x64>)
 801451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014522:	601a      	str	r2, [r3, #0]
 8014524:	f3bf 8f4f 	dsb	sy
 8014528:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801452c:	bf00      	nop
 801452e:	3710      	adds	r7, #16
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	24001d04 	.word	0x24001d04
 8014538:	e000ed04 	.word	0xe000ed04

0801453c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801453c:	b580      	push	{r7, lr}
 801453e:	b084      	sub	sp, #16
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014544:	f001 fb96 	bl	8015c74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d102      	bne.n	8014554 <vTaskSuspend+0x18>
 801454e:	4b30      	ldr	r3, [pc, #192]	; (8014610 <vTaskSuspend+0xd4>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	e000      	b.n	8014556 <vTaskSuspend+0x1a>
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	3304      	adds	r3, #4
 801455c:	4618      	mov	r0, r3
 801455e:	f7ff f847 	bl	80135f0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014566:	2b00      	cmp	r3, #0
 8014568:	d004      	beq.n	8014574 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	3318      	adds	r3, #24
 801456e:	4618      	mov	r0, r3
 8014570:	f7ff f83e 	bl	80135f0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	3304      	adds	r3, #4
 8014578:	4619      	mov	r1, r3
 801457a:	4826      	ldr	r0, [pc, #152]	; (8014614 <vTaskSuspend+0xd8>)
 801457c:	f7fe ffdb 	bl	8013536 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014586:	b2db      	uxtb	r3, r3
 8014588:	2b01      	cmp	r3, #1
 801458a:	d103      	bne.n	8014594 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	2200      	movs	r2, #0
 8014590:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014594:	f001 fb9e 	bl	8015cd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014598:	4b1f      	ldr	r3, [pc, #124]	; (8014618 <vTaskSuspend+0xdc>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d005      	beq.n	80145ac <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80145a0:	f001 fb68 	bl	8015c74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80145a4:	f000 fdb2 	bl	801510c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80145a8:	f001 fb94 	bl	8015cd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80145ac:	4b18      	ldr	r3, [pc, #96]	; (8014610 <vTaskSuspend+0xd4>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	68fa      	ldr	r2, [r7, #12]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d127      	bne.n	8014606 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80145b6:	4b18      	ldr	r3, [pc, #96]	; (8014618 <vTaskSuspend+0xdc>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d017      	beq.n	80145ee <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80145be:	4b17      	ldr	r3, [pc, #92]	; (801461c <vTaskSuspend+0xe0>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d00a      	beq.n	80145dc <vTaskSuspend+0xa0>
	__asm volatile
 80145c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ca:	f383 8811 	msr	BASEPRI, r3
 80145ce:	f3bf 8f6f 	isb	sy
 80145d2:	f3bf 8f4f 	dsb	sy
 80145d6:	60bb      	str	r3, [r7, #8]
}
 80145d8:	bf00      	nop
 80145da:	e7fe      	b.n	80145da <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80145dc:	4b10      	ldr	r3, [pc, #64]	; (8014620 <vTaskSuspend+0xe4>)
 80145de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145e2:	601a      	str	r2, [r3, #0]
 80145e4:	f3bf 8f4f 	dsb	sy
 80145e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80145ec:	e00b      	b.n	8014606 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80145ee:	4b09      	ldr	r3, [pc, #36]	; (8014614 <vTaskSuspend+0xd8>)
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	4b0c      	ldr	r3, [pc, #48]	; (8014624 <vTaskSuspend+0xe8>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d103      	bne.n	8014602 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80145fa:	4b05      	ldr	r3, [pc, #20]	; (8014610 <vTaskSuspend+0xd4>)
 80145fc:	2200      	movs	r2, #0
 80145fe:	601a      	str	r2, [r3, #0]
	}
 8014600:	e001      	b.n	8014606 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014602:	f000 fa99 	bl	8014b38 <vTaskSwitchContext>
	}
 8014606:	bf00      	nop
 8014608:	3710      	adds	r7, #16
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	24001808 	.word	0x24001808
 8014614:	24001cc8 	.word	0x24001cc8
 8014618:	24001ce8 	.word	0x24001ce8
 801461c:	24001d04 	.word	0x24001d04
 8014620:	e000ed04 	.word	0xe000ed04
 8014624:	24001cdc 	.word	0x24001cdc

08014628 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014628:	b480      	push	{r7}
 801462a:	b087      	sub	sp, #28
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014630:	2300      	movs	r3, #0
 8014632:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d10a      	bne.n	8014654 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014642:	f383 8811 	msr	BASEPRI, r3
 8014646:	f3bf 8f6f 	isb	sy
 801464a:	f3bf 8f4f 	dsb	sy
 801464e:	60fb      	str	r3, [r7, #12]
}
 8014650:	bf00      	nop
 8014652:	e7fe      	b.n	8014652 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	695b      	ldr	r3, [r3, #20]
 8014658:	4a0a      	ldr	r2, [pc, #40]	; (8014684 <prvTaskIsTaskSuspended+0x5c>)
 801465a:	4293      	cmp	r3, r2
 801465c:	d10a      	bne.n	8014674 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014662:	4a09      	ldr	r2, [pc, #36]	; (8014688 <prvTaskIsTaskSuspended+0x60>)
 8014664:	4293      	cmp	r3, r2
 8014666:	d005      	beq.n	8014674 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801466c:	2b00      	cmp	r3, #0
 801466e:	d101      	bne.n	8014674 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014670:	2301      	movs	r3, #1
 8014672:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014674:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014676:	4618      	mov	r0, r3
 8014678:	371c      	adds	r7, #28
 801467a:	46bd      	mov	sp, r7
 801467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014680:	4770      	bx	lr
 8014682:	bf00      	nop
 8014684:	24001cc8 	.word	0x24001cc8
 8014688:	24001c9c 	.word	0x24001c9c

0801468c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 801468c:	b580      	push	{r7, lr}
 801468e:	b08a      	sub	sp, #40	; 0x28
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014694:	2300      	movs	r3, #0
 8014696:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d10a      	bne.n	80146b8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80146a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a6:	f383 8811 	msr	BASEPRI, r3
 80146aa:	f3bf 8f6f 	isb	sy
 80146ae:	f3bf 8f4f 	dsb	sy
 80146b2:	61bb      	str	r3, [r7, #24]
}
 80146b4:	bf00      	nop
 80146b6:	e7fe      	b.n	80146b6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80146b8:	f001 fbbe 	bl	8015e38 <vPortValidateInterruptPriority>
	__asm volatile
 80146bc:	f3ef 8211 	mrs	r2, BASEPRI
 80146c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c4:	f383 8811 	msr	BASEPRI, r3
 80146c8:	f3bf 8f6f 	isb	sy
 80146cc:	f3bf 8f4f 	dsb	sy
 80146d0:	617a      	str	r2, [r7, #20]
 80146d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80146d4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80146d6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80146d8:	6a38      	ldr	r0, [r7, #32]
 80146da:	f7ff ffa5 	bl	8014628 <prvTaskIsTaskSuspended>
 80146de:	4603      	mov	r3, r0
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d030      	beq.n	8014746 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80146e4:	4b1d      	ldr	r3, [pc, #116]	; (801475c <xTaskResumeFromISR+0xd0>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d126      	bne.n	801473a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80146ec:	6a3b      	ldr	r3, [r7, #32]
 80146ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146f0:	4b1b      	ldr	r3, [pc, #108]	; (8014760 <xTaskResumeFromISR+0xd4>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d301      	bcc.n	80146fe <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80146fa:	2301      	movs	r3, #1
 80146fc:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80146fe:	6a3b      	ldr	r3, [r7, #32]
 8014700:	3304      	adds	r3, #4
 8014702:	4618      	mov	r0, r3
 8014704:	f7fe ff74 	bl	80135f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014708:	6a3b      	ldr	r3, [r7, #32]
 801470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801470c:	4b15      	ldr	r3, [pc, #84]	; (8014764 <xTaskResumeFromISR+0xd8>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	429a      	cmp	r2, r3
 8014712:	d903      	bls.n	801471c <xTaskResumeFromISR+0x90>
 8014714:	6a3b      	ldr	r3, [r7, #32]
 8014716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014718:	4a12      	ldr	r2, [pc, #72]	; (8014764 <xTaskResumeFromISR+0xd8>)
 801471a:	6013      	str	r3, [r2, #0]
 801471c:	6a3b      	ldr	r3, [r7, #32]
 801471e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014720:	4613      	mov	r3, r2
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	4413      	add	r3, r2
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	4a0f      	ldr	r2, [pc, #60]	; (8014768 <xTaskResumeFromISR+0xdc>)
 801472a:	441a      	add	r2, r3
 801472c:	6a3b      	ldr	r3, [r7, #32]
 801472e:	3304      	adds	r3, #4
 8014730:	4619      	mov	r1, r3
 8014732:	4610      	mov	r0, r2
 8014734:	f7fe feff 	bl	8013536 <vListInsertEnd>
 8014738:	e005      	b.n	8014746 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801473a:	6a3b      	ldr	r3, [r7, #32]
 801473c:	3318      	adds	r3, #24
 801473e:	4619      	mov	r1, r3
 8014740:	480a      	ldr	r0, [pc, #40]	; (801476c <xTaskResumeFromISR+0xe0>)
 8014742:	f7fe fef8 	bl	8013536 <vListInsertEnd>
 8014746:	69fb      	ldr	r3, [r7, #28]
 8014748:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f383 8811 	msr	BASEPRI, r3
}
 8014750:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014754:	4618      	mov	r0, r3
 8014756:	3728      	adds	r7, #40	; 0x28
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}
 801475c:	24001d04 	.word	0x24001d04
 8014760:	24001808 	.word	0x24001808
 8014764:	24001ce4 	.word	0x24001ce4
 8014768:	2400180c 	.word	0x2400180c
 801476c:	24001c9c 	.word	0x24001c9c

08014770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b08a      	sub	sp, #40	; 0x28
 8014774:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014776:	2300      	movs	r3, #0
 8014778:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801477a:	2300      	movs	r3, #0
 801477c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801477e:	463a      	mov	r2, r7
 8014780:	1d39      	adds	r1, r7, #4
 8014782:	f107 0308 	add.w	r3, r7, #8
 8014786:	4618      	mov	r0, r3
 8014788:	f7fe fc86 	bl	8013098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801478c:	6839      	ldr	r1, [r7, #0]
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	68ba      	ldr	r2, [r7, #8]
 8014792:	9202      	str	r2, [sp, #8]
 8014794:	9301      	str	r3, [sp, #4]
 8014796:	2300      	movs	r3, #0
 8014798:	9300      	str	r3, [sp, #0]
 801479a:	2300      	movs	r3, #0
 801479c:	460a      	mov	r2, r1
 801479e:	4921      	ldr	r1, [pc, #132]	; (8014824 <vTaskStartScheduler+0xb4>)
 80147a0:	4821      	ldr	r0, [pc, #132]	; (8014828 <vTaskStartScheduler+0xb8>)
 80147a2:	f7ff fcf5 	bl	8014190 <xTaskCreateStatic>
 80147a6:	4603      	mov	r3, r0
 80147a8:	4a20      	ldr	r2, [pc, #128]	; (801482c <vTaskStartScheduler+0xbc>)
 80147aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80147ac:	4b1f      	ldr	r3, [pc, #124]	; (801482c <vTaskStartScheduler+0xbc>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d002      	beq.n	80147ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80147b4:	2301      	movs	r3, #1
 80147b6:	617b      	str	r3, [r7, #20]
 80147b8:	e001      	b.n	80147be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80147ba:	2300      	movs	r3, #0
 80147bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	2b01      	cmp	r3, #1
 80147c2:	d102      	bne.n	80147ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80147c4:	f000 fdba 	bl	801533c <xTimerCreateTimerTask>
 80147c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	2b01      	cmp	r3, #1
 80147ce:	d116      	bne.n	80147fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80147d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d4:	f383 8811 	msr	BASEPRI, r3
 80147d8:	f3bf 8f6f 	isb	sy
 80147dc:	f3bf 8f4f 	dsb	sy
 80147e0:	613b      	str	r3, [r7, #16]
}
 80147e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80147e4:	4b12      	ldr	r3, [pc, #72]	; (8014830 <vTaskStartScheduler+0xc0>)
 80147e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80147ec:	4b11      	ldr	r3, [pc, #68]	; (8014834 <vTaskStartScheduler+0xc4>)
 80147ee:	2201      	movs	r2, #1
 80147f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80147f2:	4b11      	ldr	r3, [pc, #68]	; (8014838 <vTaskStartScheduler+0xc8>)
 80147f4:	2200      	movs	r2, #0
 80147f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80147f8:	f001 f99a 	bl	8015b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80147fc:	e00e      	b.n	801481c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014804:	d10a      	bne.n	801481c <vTaskStartScheduler+0xac>
	__asm volatile
 8014806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801480a:	f383 8811 	msr	BASEPRI, r3
 801480e:	f3bf 8f6f 	isb	sy
 8014812:	f3bf 8f4f 	dsb	sy
 8014816:	60fb      	str	r3, [r7, #12]
}
 8014818:	bf00      	nop
 801481a:	e7fe      	b.n	801481a <vTaskStartScheduler+0xaa>
}
 801481c:	bf00      	nop
 801481e:	3718      	adds	r7, #24
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	08016fac 	.word	0x08016fac
 8014828:	08014fa1 	.word	0x08014fa1
 801482c:	24001d00 	.word	0x24001d00
 8014830:	24001cfc 	.word	0x24001cfc
 8014834:	24001ce8 	.word	0x24001ce8
 8014838:	24001ce0 	.word	0x24001ce0

0801483c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801483c:	b480      	push	{r7}
 801483e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014840:	4b04      	ldr	r3, [pc, #16]	; (8014854 <vTaskSuspendAll+0x18>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	3301      	adds	r3, #1
 8014846:	4a03      	ldr	r2, [pc, #12]	; (8014854 <vTaskSuspendAll+0x18>)
 8014848:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801484a:	bf00      	nop
 801484c:	46bd      	mov	sp, r7
 801484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014852:	4770      	bx	lr
 8014854:	24001d04 	.word	0x24001d04

08014858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b084      	sub	sp, #16
 801485c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801485e:	2300      	movs	r3, #0
 8014860:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014862:	2300      	movs	r3, #0
 8014864:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014866:	4b42      	ldr	r3, [pc, #264]	; (8014970 <xTaskResumeAll+0x118>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d10a      	bne.n	8014884 <xTaskResumeAll+0x2c>
	__asm volatile
 801486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014872:	f383 8811 	msr	BASEPRI, r3
 8014876:	f3bf 8f6f 	isb	sy
 801487a:	f3bf 8f4f 	dsb	sy
 801487e:	603b      	str	r3, [r7, #0]
}
 8014880:	bf00      	nop
 8014882:	e7fe      	b.n	8014882 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014884:	f001 f9f6 	bl	8015c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014888:	4b39      	ldr	r3, [pc, #228]	; (8014970 <xTaskResumeAll+0x118>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	3b01      	subs	r3, #1
 801488e:	4a38      	ldr	r2, [pc, #224]	; (8014970 <xTaskResumeAll+0x118>)
 8014890:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014892:	4b37      	ldr	r3, [pc, #220]	; (8014970 <xTaskResumeAll+0x118>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d162      	bne.n	8014960 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801489a:	4b36      	ldr	r3, [pc, #216]	; (8014974 <xTaskResumeAll+0x11c>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d05e      	beq.n	8014960 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80148a2:	e02f      	b.n	8014904 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148a4:	4b34      	ldr	r3, [pc, #208]	; (8014978 <xTaskResumeAll+0x120>)
 80148a6:	68db      	ldr	r3, [r3, #12]
 80148a8:	68db      	ldr	r3, [r3, #12]
 80148aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	3318      	adds	r3, #24
 80148b0:	4618      	mov	r0, r3
 80148b2:	f7fe fe9d 	bl	80135f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	3304      	adds	r3, #4
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7fe fe98 	bl	80135f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148c4:	4b2d      	ldr	r3, [pc, #180]	; (801497c <xTaskResumeAll+0x124>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d903      	bls.n	80148d4 <xTaskResumeAll+0x7c>
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148d0:	4a2a      	ldr	r2, [pc, #168]	; (801497c <xTaskResumeAll+0x124>)
 80148d2:	6013      	str	r3, [r2, #0]
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148d8:	4613      	mov	r3, r2
 80148da:	009b      	lsls	r3, r3, #2
 80148dc:	4413      	add	r3, r2
 80148de:	009b      	lsls	r3, r3, #2
 80148e0:	4a27      	ldr	r2, [pc, #156]	; (8014980 <xTaskResumeAll+0x128>)
 80148e2:	441a      	add	r2, r3
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	3304      	adds	r3, #4
 80148e8:	4619      	mov	r1, r3
 80148ea:	4610      	mov	r0, r2
 80148ec:	f7fe fe23 	bl	8013536 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148f4:	4b23      	ldr	r3, [pc, #140]	; (8014984 <xTaskResumeAll+0x12c>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d302      	bcc.n	8014904 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80148fe:	4b22      	ldr	r3, [pc, #136]	; (8014988 <xTaskResumeAll+0x130>)
 8014900:	2201      	movs	r2, #1
 8014902:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014904:	4b1c      	ldr	r3, [pc, #112]	; (8014978 <xTaskResumeAll+0x120>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d1cb      	bne.n	80148a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d001      	beq.n	8014916 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014912:	f000 fbfb 	bl	801510c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014916:	4b1d      	ldr	r3, [pc, #116]	; (801498c <xTaskResumeAll+0x134>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d010      	beq.n	8014944 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014922:	f000 f847 	bl	80149b4 <xTaskIncrementTick>
 8014926:	4603      	mov	r3, r0
 8014928:	2b00      	cmp	r3, #0
 801492a:	d002      	beq.n	8014932 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801492c:	4b16      	ldr	r3, [pc, #88]	; (8014988 <xTaskResumeAll+0x130>)
 801492e:	2201      	movs	r2, #1
 8014930:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	3b01      	subs	r3, #1
 8014936:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d1f1      	bne.n	8014922 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801493e:	4b13      	ldr	r3, [pc, #76]	; (801498c <xTaskResumeAll+0x134>)
 8014940:	2200      	movs	r2, #0
 8014942:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014944:	4b10      	ldr	r3, [pc, #64]	; (8014988 <xTaskResumeAll+0x130>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d009      	beq.n	8014960 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801494c:	2301      	movs	r3, #1
 801494e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014950:	4b0f      	ldr	r3, [pc, #60]	; (8014990 <xTaskResumeAll+0x138>)
 8014952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014956:	601a      	str	r2, [r3, #0]
 8014958:	f3bf 8f4f 	dsb	sy
 801495c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014960:	f001 f9b8 	bl	8015cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8014964:	68bb      	ldr	r3, [r7, #8]
}
 8014966:	4618      	mov	r0, r3
 8014968:	3710      	adds	r7, #16
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}
 801496e:	bf00      	nop
 8014970:	24001d04 	.word	0x24001d04
 8014974:	24001cdc 	.word	0x24001cdc
 8014978:	24001c9c 	.word	0x24001c9c
 801497c:	24001ce4 	.word	0x24001ce4
 8014980:	2400180c 	.word	0x2400180c
 8014984:	24001808 	.word	0x24001808
 8014988:	24001cf0 	.word	0x24001cf0
 801498c:	24001cec 	.word	0x24001cec
 8014990:	e000ed04 	.word	0xe000ed04

08014994 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014994:	b480      	push	{r7}
 8014996:	b083      	sub	sp, #12
 8014998:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801499a:	4b05      	ldr	r3, [pc, #20]	; (80149b0 <xTaskGetTickCount+0x1c>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80149a0:	687b      	ldr	r3, [r7, #4]
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	370c      	adds	r7, #12
 80149a6:	46bd      	mov	sp, r7
 80149a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ac:	4770      	bx	lr
 80149ae:	bf00      	nop
 80149b0:	24001ce0 	.word	0x24001ce0

080149b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b086      	sub	sp, #24
 80149b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80149ba:	2300      	movs	r3, #0
 80149bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149be:	4b53      	ldr	r3, [pc, #332]	; (8014b0c <xTaskIncrementTick+0x158>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	f040 8095 	bne.w	8014af2 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80149c8:	4b51      	ldr	r3, [pc, #324]	; (8014b10 <xTaskIncrementTick+0x15c>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	3301      	adds	r3, #1
 80149ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80149d0:	4a4f      	ldr	r2, [pc, #316]	; (8014b10 <xTaskIncrementTick+0x15c>)
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d120      	bne.n	8014a1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80149dc:	4b4d      	ldr	r3, [pc, #308]	; (8014b14 <xTaskIncrementTick+0x160>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d00a      	beq.n	80149fc <xTaskIncrementTick+0x48>
	__asm volatile
 80149e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ea:	f383 8811 	msr	BASEPRI, r3
 80149ee:	f3bf 8f6f 	isb	sy
 80149f2:	f3bf 8f4f 	dsb	sy
 80149f6:	603b      	str	r3, [r7, #0]
}
 80149f8:	bf00      	nop
 80149fa:	e7fe      	b.n	80149fa <xTaskIncrementTick+0x46>
 80149fc:	4b45      	ldr	r3, [pc, #276]	; (8014b14 <xTaskIncrementTick+0x160>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	60fb      	str	r3, [r7, #12]
 8014a02:	4b45      	ldr	r3, [pc, #276]	; (8014b18 <xTaskIncrementTick+0x164>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	4a43      	ldr	r2, [pc, #268]	; (8014b14 <xTaskIncrementTick+0x160>)
 8014a08:	6013      	str	r3, [r2, #0]
 8014a0a:	4a43      	ldr	r2, [pc, #268]	; (8014b18 <xTaskIncrementTick+0x164>)
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	6013      	str	r3, [r2, #0]
 8014a10:	4b42      	ldr	r3, [pc, #264]	; (8014b1c <xTaskIncrementTick+0x168>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	3301      	adds	r3, #1
 8014a16:	4a41      	ldr	r2, [pc, #260]	; (8014b1c <xTaskIncrementTick+0x168>)
 8014a18:	6013      	str	r3, [r2, #0]
 8014a1a:	f000 fb77 	bl	801510c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014a1e:	4b40      	ldr	r3, [pc, #256]	; (8014b20 <xTaskIncrementTick+0x16c>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	693a      	ldr	r2, [r7, #16]
 8014a24:	429a      	cmp	r2, r3
 8014a26:	d349      	bcc.n	8014abc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a28:	4b3a      	ldr	r3, [pc, #232]	; (8014b14 <xTaskIncrementTick+0x160>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d104      	bne.n	8014a3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a32:	4b3b      	ldr	r3, [pc, #236]	; (8014b20 <xTaskIncrementTick+0x16c>)
 8014a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a38:	601a      	str	r2, [r3, #0]
					break;
 8014a3a:	e03f      	b.n	8014abc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a3c:	4b35      	ldr	r3, [pc, #212]	; (8014b14 <xTaskIncrementTick+0x160>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	68db      	ldr	r3, [r3, #12]
 8014a42:	68db      	ldr	r3, [r3, #12]
 8014a44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014a46:	68bb      	ldr	r3, [r7, #8]
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014a4c:	693a      	ldr	r2, [r7, #16]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	429a      	cmp	r2, r3
 8014a52:	d203      	bcs.n	8014a5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014a54:	4a32      	ldr	r2, [pc, #200]	; (8014b20 <xTaskIncrementTick+0x16c>)
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014a5a:	e02f      	b.n	8014abc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	3304      	adds	r3, #4
 8014a60:	4618      	mov	r0, r3
 8014a62:	f7fe fdc5 	bl	80135f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d004      	beq.n	8014a78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	3318      	adds	r3, #24
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7fe fdbc 	bl	80135f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a7c:	4b29      	ldr	r3, [pc, #164]	; (8014b24 <xTaskIncrementTick+0x170>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d903      	bls.n	8014a8c <xTaskIncrementTick+0xd8>
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a88:	4a26      	ldr	r2, [pc, #152]	; (8014b24 <xTaskIncrementTick+0x170>)
 8014a8a:	6013      	str	r3, [r2, #0]
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a90:	4613      	mov	r3, r2
 8014a92:	009b      	lsls	r3, r3, #2
 8014a94:	4413      	add	r3, r2
 8014a96:	009b      	lsls	r3, r3, #2
 8014a98:	4a23      	ldr	r2, [pc, #140]	; (8014b28 <xTaskIncrementTick+0x174>)
 8014a9a:	441a      	add	r2, r3
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	3304      	adds	r3, #4
 8014aa0:	4619      	mov	r1, r3
 8014aa2:	4610      	mov	r0, r2
 8014aa4:	f7fe fd47 	bl	8013536 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aac:	4b1f      	ldr	r3, [pc, #124]	; (8014b2c <xTaskIncrementTick+0x178>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d3b8      	bcc.n	8014a28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014aba:	e7b5      	b.n	8014a28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014abc:	4b1b      	ldr	r3, [pc, #108]	; (8014b2c <xTaskIncrementTick+0x178>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ac2:	4919      	ldr	r1, [pc, #100]	; (8014b28 <xTaskIncrementTick+0x174>)
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	009b      	lsls	r3, r3, #2
 8014ac8:	4413      	add	r3, r2
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	440b      	add	r3, r1
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	2b01      	cmp	r3, #1
 8014ad2:	d901      	bls.n	8014ad8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014ad4:	2301      	movs	r3, #1
 8014ad6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014ad8:	4b15      	ldr	r3, [pc, #84]	; (8014b30 <xTaskIncrementTick+0x17c>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d101      	bne.n	8014ae4 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014ae0:	f7eb fd80 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014ae4:	4b13      	ldr	r3, [pc, #76]	; (8014b34 <xTaskIncrementTick+0x180>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d009      	beq.n	8014b00 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014aec:	2301      	movs	r3, #1
 8014aee:	617b      	str	r3, [r7, #20]
 8014af0:	e006      	b.n	8014b00 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014af2:	4b0f      	ldr	r3, [pc, #60]	; (8014b30 <xTaskIncrementTick+0x17c>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	3301      	adds	r3, #1
 8014af8:	4a0d      	ldr	r2, [pc, #52]	; (8014b30 <xTaskIncrementTick+0x17c>)
 8014afa:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014afc:	f7eb fd72 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014b00:	697b      	ldr	r3, [r7, #20]
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3718      	adds	r7, #24
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}
 8014b0a:	bf00      	nop
 8014b0c:	24001d04 	.word	0x24001d04
 8014b10:	24001ce0 	.word	0x24001ce0
 8014b14:	24001c94 	.word	0x24001c94
 8014b18:	24001c98 	.word	0x24001c98
 8014b1c:	24001cf4 	.word	0x24001cf4
 8014b20:	24001cfc 	.word	0x24001cfc
 8014b24:	24001ce4 	.word	0x24001ce4
 8014b28:	2400180c 	.word	0x2400180c
 8014b2c:	24001808 	.word	0x24001808
 8014b30:	24001cec 	.word	0x24001cec
 8014b34:	24001cf0 	.word	0x24001cf0

08014b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014b38:	b480      	push	{r7}
 8014b3a:	b085      	sub	sp, #20
 8014b3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014b3e:	4b28      	ldr	r3, [pc, #160]	; (8014be0 <vTaskSwitchContext+0xa8>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d003      	beq.n	8014b4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014b46:	4b27      	ldr	r3, [pc, #156]	; (8014be4 <vTaskSwitchContext+0xac>)
 8014b48:	2201      	movs	r2, #1
 8014b4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b4c:	e041      	b.n	8014bd2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014b4e:	4b25      	ldr	r3, [pc, #148]	; (8014be4 <vTaskSwitchContext+0xac>)
 8014b50:	2200      	movs	r2, #0
 8014b52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b54:	4b24      	ldr	r3, [pc, #144]	; (8014be8 <vTaskSwitchContext+0xb0>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	60fb      	str	r3, [r7, #12]
 8014b5a:	e010      	b.n	8014b7e <vTaskSwitchContext+0x46>
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d10a      	bne.n	8014b78 <vTaskSwitchContext+0x40>
	__asm volatile
 8014b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b66:	f383 8811 	msr	BASEPRI, r3
 8014b6a:	f3bf 8f6f 	isb	sy
 8014b6e:	f3bf 8f4f 	dsb	sy
 8014b72:	607b      	str	r3, [r7, #4]
}
 8014b74:	bf00      	nop
 8014b76:	e7fe      	b.n	8014b76 <vTaskSwitchContext+0x3e>
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	3b01      	subs	r3, #1
 8014b7c:	60fb      	str	r3, [r7, #12]
 8014b7e:	491b      	ldr	r1, [pc, #108]	; (8014bec <vTaskSwitchContext+0xb4>)
 8014b80:	68fa      	ldr	r2, [r7, #12]
 8014b82:	4613      	mov	r3, r2
 8014b84:	009b      	lsls	r3, r3, #2
 8014b86:	4413      	add	r3, r2
 8014b88:	009b      	lsls	r3, r3, #2
 8014b8a:	440b      	add	r3, r1
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d0e4      	beq.n	8014b5c <vTaskSwitchContext+0x24>
 8014b92:	68fa      	ldr	r2, [r7, #12]
 8014b94:	4613      	mov	r3, r2
 8014b96:	009b      	lsls	r3, r3, #2
 8014b98:	4413      	add	r3, r2
 8014b9a:	009b      	lsls	r3, r3, #2
 8014b9c:	4a13      	ldr	r2, [pc, #76]	; (8014bec <vTaskSwitchContext+0xb4>)
 8014b9e:	4413      	add	r3, r2
 8014ba0:	60bb      	str	r3, [r7, #8]
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	685a      	ldr	r2, [r3, #4]
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	605a      	str	r2, [r3, #4]
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	685a      	ldr	r2, [r3, #4]
 8014bb0:	68bb      	ldr	r3, [r7, #8]
 8014bb2:	3308      	adds	r3, #8
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	d104      	bne.n	8014bc2 <vTaskSwitchContext+0x8a>
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	685b      	ldr	r3, [r3, #4]
 8014bbc:	685a      	ldr	r2, [r3, #4]
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	605a      	str	r2, [r3, #4]
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	4a09      	ldr	r2, [pc, #36]	; (8014bf0 <vTaskSwitchContext+0xb8>)
 8014bca:	6013      	str	r3, [r2, #0]
 8014bcc:	4a06      	ldr	r2, [pc, #24]	; (8014be8 <vTaskSwitchContext+0xb0>)
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	6013      	str	r3, [r2, #0]
}
 8014bd2:	bf00      	nop
 8014bd4:	3714      	adds	r7, #20
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr
 8014bde:	bf00      	nop
 8014be0:	24001d04 	.word	0x24001d04
 8014be4:	24001cf0 	.word	0x24001cf0
 8014be8:	24001ce4 	.word	0x24001ce4
 8014bec:	2400180c 	.word	0x2400180c
 8014bf0:	24001808 	.word	0x24001808

08014bf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b084      	sub	sp, #16
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d10a      	bne.n	8014c1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c08:	f383 8811 	msr	BASEPRI, r3
 8014c0c:	f3bf 8f6f 	isb	sy
 8014c10:	f3bf 8f4f 	dsb	sy
 8014c14:	60fb      	str	r3, [r7, #12]
}
 8014c16:	bf00      	nop
 8014c18:	e7fe      	b.n	8014c18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c1a:	4b07      	ldr	r3, [pc, #28]	; (8014c38 <vTaskPlaceOnEventList+0x44>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	3318      	adds	r3, #24
 8014c20:	4619      	mov	r1, r3
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f7fe fcab 	bl	801357e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c28:	2101      	movs	r1, #1
 8014c2a:	6838      	ldr	r0, [r7, #0]
 8014c2c:	f000 fb32 	bl	8015294 <prvAddCurrentTaskToDelayedList>
}
 8014c30:	bf00      	nop
 8014c32:	3710      	adds	r7, #16
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}
 8014c38:	24001808 	.word	0x24001808

08014c3c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b086      	sub	sp, #24
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	60f8      	str	r0, [r7, #12]
 8014c44:	60b9      	str	r1, [r7, #8]
 8014c46:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d10a      	bne.n	8014c64 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c52:	f383 8811 	msr	BASEPRI, r3
 8014c56:	f3bf 8f6f 	isb	sy
 8014c5a:	f3bf 8f4f 	dsb	sy
 8014c5e:	617b      	str	r3, [r7, #20]
}
 8014c60:	bf00      	nop
 8014c62:	e7fe      	b.n	8014c62 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014c64:	4b11      	ldr	r3, [pc, #68]	; (8014cac <vTaskPlaceOnUnorderedEventList+0x70>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d10a      	bne.n	8014c82 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c70:	f383 8811 	msr	BASEPRI, r3
 8014c74:	f3bf 8f6f 	isb	sy
 8014c78:	f3bf 8f4f 	dsb	sy
 8014c7c:	613b      	str	r3, [r7, #16]
}
 8014c7e:	bf00      	nop
 8014c80:	e7fe      	b.n	8014c80 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014c82:	4b0b      	ldr	r3, [pc, #44]	; (8014cb0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	68ba      	ldr	r2, [r7, #8]
 8014c88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014c8c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c8e:	4b08      	ldr	r3, [pc, #32]	; (8014cb0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	3318      	adds	r3, #24
 8014c94:	4619      	mov	r1, r3
 8014c96:	68f8      	ldr	r0, [r7, #12]
 8014c98:	f7fe fc4d 	bl	8013536 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c9c:	2101      	movs	r1, #1
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f000 faf8 	bl	8015294 <prvAddCurrentTaskToDelayedList>
}
 8014ca4:	bf00      	nop
 8014ca6:	3718      	adds	r7, #24
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	24001d04 	.word	0x24001d04
 8014cb0:	24001808 	.word	0x24001808

08014cb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b086      	sub	sp, #24
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d10a      	bne.n	8014cdc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cca:	f383 8811 	msr	BASEPRI, r3
 8014cce:	f3bf 8f6f 	isb	sy
 8014cd2:	f3bf 8f4f 	dsb	sy
 8014cd6:	617b      	str	r3, [r7, #20]
}
 8014cd8:	bf00      	nop
 8014cda:	e7fe      	b.n	8014cda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014cdc:	4b0a      	ldr	r3, [pc, #40]	; (8014d08 <vTaskPlaceOnEventListRestricted+0x54>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	3318      	adds	r3, #24
 8014ce2:	4619      	mov	r1, r3
 8014ce4:	68f8      	ldr	r0, [r7, #12]
 8014ce6:	f7fe fc26 	bl	8013536 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d002      	beq.n	8014cf6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cf4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014cf6:	6879      	ldr	r1, [r7, #4]
 8014cf8:	68b8      	ldr	r0, [r7, #8]
 8014cfa:	f000 facb 	bl	8015294 <prvAddCurrentTaskToDelayedList>
	}
 8014cfe:	bf00      	nop
 8014d00:	3718      	adds	r7, #24
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	24001808 	.word	0x24001808

08014d0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b086      	sub	sp, #24
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	68db      	ldr	r3, [r3, #12]
 8014d18:	68db      	ldr	r3, [r3, #12]
 8014d1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d10a      	bne.n	8014d38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d26:	f383 8811 	msr	BASEPRI, r3
 8014d2a:	f3bf 8f6f 	isb	sy
 8014d2e:	f3bf 8f4f 	dsb	sy
 8014d32:	60fb      	str	r3, [r7, #12]
}
 8014d34:	bf00      	nop
 8014d36:	e7fe      	b.n	8014d36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	3318      	adds	r3, #24
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7fe fc57 	bl	80135f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d42:	4b1e      	ldr	r3, [pc, #120]	; (8014dbc <xTaskRemoveFromEventList+0xb0>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d11d      	bne.n	8014d86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	3304      	adds	r3, #4
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7fe fc4e 	bl	80135f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014d54:	693b      	ldr	r3, [r7, #16]
 8014d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d58:	4b19      	ldr	r3, [pc, #100]	; (8014dc0 <xTaskRemoveFromEventList+0xb4>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	429a      	cmp	r2, r3
 8014d5e:	d903      	bls.n	8014d68 <xTaskRemoveFromEventList+0x5c>
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d64:	4a16      	ldr	r2, [pc, #88]	; (8014dc0 <xTaskRemoveFromEventList+0xb4>)
 8014d66:	6013      	str	r3, [r2, #0]
 8014d68:	693b      	ldr	r3, [r7, #16]
 8014d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d6c:	4613      	mov	r3, r2
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	4413      	add	r3, r2
 8014d72:	009b      	lsls	r3, r3, #2
 8014d74:	4a13      	ldr	r2, [pc, #76]	; (8014dc4 <xTaskRemoveFromEventList+0xb8>)
 8014d76:	441a      	add	r2, r3
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	3304      	adds	r3, #4
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	4610      	mov	r0, r2
 8014d80:	f7fe fbd9 	bl	8013536 <vListInsertEnd>
 8014d84:	e005      	b.n	8014d92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	3318      	adds	r3, #24
 8014d8a:	4619      	mov	r1, r3
 8014d8c:	480e      	ldr	r0, [pc, #56]	; (8014dc8 <xTaskRemoveFromEventList+0xbc>)
 8014d8e:	f7fe fbd2 	bl	8013536 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d96:	4b0d      	ldr	r3, [pc, #52]	; (8014dcc <xTaskRemoveFromEventList+0xc0>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d905      	bls.n	8014dac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014da0:	2301      	movs	r3, #1
 8014da2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014da4:	4b0a      	ldr	r3, [pc, #40]	; (8014dd0 <xTaskRemoveFromEventList+0xc4>)
 8014da6:	2201      	movs	r2, #1
 8014da8:	601a      	str	r2, [r3, #0]
 8014daa:	e001      	b.n	8014db0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014dac:	2300      	movs	r3, #0
 8014dae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014db0:	697b      	ldr	r3, [r7, #20]
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3718      	adds	r7, #24
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}
 8014dba:	bf00      	nop
 8014dbc:	24001d04 	.word	0x24001d04
 8014dc0:	24001ce4 	.word	0x24001ce4
 8014dc4:	2400180c 	.word	0x2400180c
 8014dc8:	24001c9c 	.word	0x24001c9c
 8014dcc:	24001808 	.word	0x24001808
 8014dd0:	24001cf0 	.word	0x24001cf0

08014dd4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b086      	sub	sp, #24
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014dde:	4b29      	ldr	r3, [pc, #164]	; (8014e84 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d10a      	bne.n	8014dfc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dea:	f383 8811 	msr	BASEPRI, r3
 8014dee:	f3bf 8f6f 	isb	sy
 8014df2:	f3bf 8f4f 	dsb	sy
 8014df6:	613b      	str	r3, [r7, #16]
}
 8014df8:	bf00      	nop
 8014dfa:	e7fe      	b.n	8014dfa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	68db      	ldr	r3, [r3, #12]
 8014e0a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d10a      	bne.n	8014e28 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e16:	f383 8811 	msr	BASEPRI, r3
 8014e1a:	f3bf 8f6f 	isb	sy
 8014e1e:	f3bf 8f4f 	dsb	sy
 8014e22:	60fb      	str	r3, [r7, #12]
}
 8014e24:	bf00      	nop
 8014e26:	e7fe      	b.n	8014e26 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f7fe fbe1 	bl	80135f0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	3304      	adds	r3, #4
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7fe fbdc 	bl	80135f0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e3c:	4b12      	ldr	r3, [pc, #72]	; (8014e88 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d903      	bls.n	8014e4c <vTaskRemoveFromUnorderedEventList+0x78>
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e48:	4a0f      	ldr	r2, [pc, #60]	; (8014e88 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014e4a:	6013      	str	r3, [r2, #0]
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e50:	4613      	mov	r3, r2
 8014e52:	009b      	lsls	r3, r3, #2
 8014e54:	4413      	add	r3, r2
 8014e56:	009b      	lsls	r3, r3, #2
 8014e58:	4a0c      	ldr	r2, [pc, #48]	; (8014e8c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014e5a:	441a      	add	r2, r3
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	3304      	adds	r3, #4
 8014e60:	4619      	mov	r1, r3
 8014e62:	4610      	mov	r0, r2
 8014e64:	f7fe fb67 	bl	8013536 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e6c:	4b08      	ldr	r3, [pc, #32]	; (8014e90 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d902      	bls.n	8014e7c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014e76:	4b07      	ldr	r3, [pc, #28]	; (8014e94 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014e78:	2201      	movs	r2, #1
 8014e7a:	601a      	str	r2, [r3, #0]
	}
}
 8014e7c:	bf00      	nop
 8014e7e:	3718      	adds	r7, #24
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	24001d04 	.word	0x24001d04
 8014e88:	24001ce4 	.word	0x24001ce4
 8014e8c:	2400180c 	.word	0x2400180c
 8014e90:	24001808 	.word	0x24001808
 8014e94:	24001cf0 	.word	0x24001cf0

08014e98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b083      	sub	sp, #12
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014ea0:	4b06      	ldr	r3, [pc, #24]	; (8014ebc <vTaskInternalSetTimeOutState+0x24>)
 8014ea2:	681a      	ldr	r2, [r3, #0]
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014ea8:	4b05      	ldr	r3, [pc, #20]	; (8014ec0 <vTaskInternalSetTimeOutState+0x28>)
 8014eaa:	681a      	ldr	r2, [r3, #0]
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	605a      	str	r2, [r3, #4]
}
 8014eb0:	bf00      	nop
 8014eb2:	370c      	adds	r7, #12
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr
 8014ebc:	24001cf4 	.word	0x24001cf4
 8014ec0:	24001ce0 	.word	0x24001ce0

08014ec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b088      	sub	sp, #32
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
 8014ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d10a      	bne.n	8014eea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ed8:	f383 8811 	msr	BASEPRI, r3
 8014edc:	f3bf 8f6f 	isb	sy
 8014ee0:	f3bf 8f4f 	dsb	sy
 8014ee4:	613b      	str	r3, [r7, #16]
}
 8014ee6:	bf00      	nop
 8014ee8:	e7fe      	b.n	8014ee8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d10a      	bne.n	8014f06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef4:	f383 8811 	msr	BASEPRI, r3
 8014ef8:	f3bf 8f6f 	isb	sy
 8014efc:	f3bf 8f4f 	dsb	sy
 8014f00:	60fb      	str	r3, [r7, #12]
}
 8014f02:	bf00      	nop
 8014f04:	e7fe      	b.n	8014f04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014f06:	f000 feb5 	bl	8015c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014f0a:	4b1d      	ldr	r3, [pc, #116]	; (8014f80 <xTaskCheckForTimeOut+0xbc>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	685b      	ldr	r3, [r3, #4]
 8014f14:	69ba      	ldr	r2, [r7, #24]
 8014f16:	1ad3      	subs	r3, r2, r3
 8014f18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f22:	d102      	bne.n	8014f2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014f24:	2300      	movs	r3, #0
 8014f26:	61fb      	str	r3, [r7, #28]
 8014f28:	e023      	b.n	8014f72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	681a      	ldr	r2, [r3, #0]
 8014f2e:	4b15      	ldr	r3, [pc, #84]	; (8014f84 <xTaskCheckForTimeOut+0xc0>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	429a      	cmp	r2, r3
 8014f34:	d007      	beq.n	8014f46 <xTaskCheckForTimeOut+0x82>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	69ba      	ldr	r2, [r7, #24]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d302      	bcc.n	8014f46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014f40:	2301      	movs	r3, #1
 8014f42:	61fb      	str	r3, [r7, #28]
 8014f44:	e015      	b.n	8014f72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	697a      	ldr	r2, [r7, #20]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d20b      	bcs.n	8014f68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	1ad2      	subs	r2, r2, r3
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f7ff ff9b 	bl	8014e98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014f62:	2300      	movs	r3, #0
 8014f64:	61fb      	str	r3, [r7, #28]
 8014f66:	e004      	b.n	8014f72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014f6e:	2301      	movs	r3, #1
 8014f70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014f72:	f000 feaf 	bl	8015cd4 <vPortExitCritical>

	return xReturn;
 8014f76:	69fb      	ldr	r3, [r7, #28]
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3720      	adds	r7, #32
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}
 8014f80:	24001ce0 	.word	0x24001ce0
 8014f84:	24001cf4 	.word	0x24001cf4

08014f88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014f88:	b480      	push	{r7}
 8014f8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014f8c:	4b03      	ldr	r3, [pc, #12]	; (8014f9c <vTaskMissedYield+0x14>)
 8014f8e:	2201      	movs	r2, #1
 8014f90:	601a      	str	r2, [r3, #0]
}
 8014f92:	bf00      	nop
 8014f94:	46bd      	mov	sp, r7
 8014f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9a:	4770      	bx	lr
 8014f9c:	24001cf0 	.word	0x24001cf0

08014fa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014fa8:	f000 f852 	bl	8015050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014fac:	4b06      	ldr	r3, [pc, #24]	; (8014fc8 <prvIdleTask+0x28>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	d9f9      	bls.n	8014fa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014fb4:	4b05      	ldr	r3, [pc, #20]	; (8014fcc <prvIdleTask+0x2c>)
 8014fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fba:	601a      	str	r2, [r3, #0]
 8014fbc:	f3bf 8f4f 	dsb	sy
 8014fc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014fc4:	e7f0      	b.n	8014fa8 <prvIdleTask+0x8>
 8014fc6:	bf00      	nop
 8014fc8:	2400180c 	.word	0x2400180c
 8014fcc:	e000ed04 	.word	0xe000ed04

08014fd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	607b      	str	r3, [r7, #4]
 8014fda:	e00c      	b.n	8014ff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014fdc:	687a      	ldr	r2, [r7, #4]
 8014fde:	4613      	mov	r3, r2
 8014fe0:	009b      	lsls	r3, r3, #2
 8014fe2:	4413      	add	r3, r2
 8014fe4:	009b      	lsls	r3, r3, #2
 8014fe6:	4a12      	ldr	r2, [pc, #72]	; (8015030 <prvInitialiseTaskLists+0x60>)
 8014fe8:	4413      	add	r3, r2
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7fe fa76 	bl	80134dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	607b      	str	r3, [r7, #4]
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	2b37      	cmp	r3, #55	; 0x37
 8014ffa:	d9ef      	bls.n	8014fdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014ffc:	480d      	ldr	r0, [pc, #52]	; (8015034 <prvInitialiseTaskLists+0x64>)
 8014ffe:	f7fe fa6d 	bl	80134dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015002:	480d      	ldr	r0, [pc, #52]	; (8015038 <prvInitialiseTaskLists+0x68>)
 8015004:	f7fe fa6a 	bl	80134dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015008:	480c      	ldr	r0, [pc, #48]	; (801503c <prvInitialiseTaskLists+0x6c>)
 801500a:	f7fe fa67 	bl	80134dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801500e:	480c      	ldr	r0, [pc, #48]	; (8015040 <prvInitialiseTaskLists+0x70>)
 8015010:	f7fe fa64 	bl	80134dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015014:	480b      	ldr	r0, [pc, #44]	; (8015044 <prvInitialiseTaskLists+0x74>)
 8015016:	f7fe fa61 	bl	80134dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801501a:	4b0b      	ldr	r3, [pc, #44]	; (8015048 <prvInitialiseTaskLists+0x78>)
 801501c:	4a05      	ldr	r2, [pc, #20]	; (8015034 <prvInitialiseTaskLists+0x64>)
 801501e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015020:	4b0a      	ldr	r3, [pc, #40]	; (801504c <prvInitialiseTaskLists+0x7c>)
 8015022:	4a05      	ldr	r2, [pc, #20]	; (8015038 <prvInitialiseTaskLists+0x68>)
 8015024:	601a      	str	r2, [r3, #0]
}
 8015026:	bf00      	nop
 8015028:	3708      	adds	r7, #8
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	2400180c 	.word	0x2400180c
 8015034:	24001c6c 	.word	0x24001c6c
 8015038:	24001c80 	.word	0x24001c80
 801503c:	24001c9c 	.word	0x24001c9c
 8015040:	24001cb0 	.word	0x24001cb0
 8015044:	24001cc8 	.word	0x24001cc8
 8015048:	24001c94 	.word	0x24001c94
 801504c:	24001c98 	.word	0x24001c98

08015050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015056:	e019      	b.n	801508c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015058:	f000 fe0c 	bl	8015c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801505c:	4b10      	ldr	r3, [pc, #64]	; (80150a0 <prvCheckTasksWaitingTermination+0x50>)
 801505e:	68db      	ldr	r3, [r3, #12]
 8015060:	68db      	ldr	r3, [r3, #12]
 8015062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	3304      	adds	r3, #4
 8015068:	4618      	mov	r0, r3
 801506a:	f7fe fac1 	bl	80135f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801506e:	4b0d      	ldr	r3, [pc, #52]	; (80150a4 <prvCheckTasksWaitingTermination+0x54>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	3b01      	subs	r3, #1
 8015074:	4a0b      	ldr	r2, [pc, #44]	; (80150a4 <prvCheckTasksWaitingTermination+0x54>)
 8015076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015078:	4b0b      	ldr	r3, [pc, #44]	; (80150a8 <prvCheckTasksWaitingTermination+0x58>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	3b01      	subs	r3, #1
 801507e:	4a0a      	ldr	r2, [pc, #40]	; (80150a8 <prvCheckTasksWaitingTermination+0x58>)
 8015080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015082:	f000 fe27 	bl	8015cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f000 f810 	bl	80150ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801508c:	4b06      	ldr	r3, [pc, #24]	; (80150a8 <prvCheckTasksWaitingTermination+0x58>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d1e1      	bne.n	8015058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015094:	bf00      	nop
 8015096:	bf00      	nop
 8015098:	3708      	adds	r7, #8
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	24001cb0 	.word	0x24001cb0
 80150a4:	24001cdc 	.word	0x24001cdc
 80150a8:	24001cc4 	.word	0x24001cc4

080150ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d108      	bne.n	80150d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150c2:	4618      	mov	r0, r3
 80150c4:	f000 ffc4 	bl	8016050 <vPortFree>
				vPortFree( pxTCB );
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f000 ffc1 	bl	8016050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80150ce:	e018      	b.n	8015102 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150d6:	2b01      	cmp	r3, #1
 80150d8:	d103      	bne.n	80150e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80150da:	6878      	ldr	r0, [r7, #4]
 80150dc:	f000 ffb8 	bl	8016050 <vPortFree>
	}
 80150e0:	e00f      	b.n	8015102 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150e8:	2b02      	cmp	r3, #2
 80150ea:	d00a      	beq.n	8015102 <prvDeleteTCB+0x56>
	__asm volatile
 80150ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f0:	f383 8811 	msr	BASEPRI, r3
 80150f4:	f3bf 8f6f 	isb	sy
 80150f8:	f3bf 8f4f 	dsb	sy
 80150fc:	60fb      	str	r3, [r7, #12]
}
 80150fe:	bf00      	nop
 8015100:	e7fe      	b.n	8015100 <prvDeleteTCB+0x54>
	}
 8015102:	bf00      	nop
 8015104:	3710      	adds	r7, #16
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}
	...

0801510c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801510c:	b480      	push	{r7}
 801510e:	b083      	sub	sp, #12
 8015110:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015112:	4b0c      	ldr	r3, [pc, #48]	; (8015144 <prvResetNextTaskUnblockTime+0x38>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d104      	bne.n	8015126 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801511c:	4b0a      	ldr	r3, [pc, #40]	; (8015148 <prvResetNextTaskUnblockTime+0x3c>)
 801511e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015122:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015124:	e008      	b.n	8015138 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015126:	4b07      	ldr	r3, [pc, #28]	; (8015144 <prvResetNextTaskUnblockTime+0x38>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	68db      	ldr	r3, [r3, #12]
 801512c:	68db      	ldr	r3, [r3, #12]
 801512e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	4a04      	ldr	r2, [pc, #16]	; (8015148 <prvResetNextTaskUnblockTime+0x3c>)
 8015136:	6013      	str	r3, [r2, #0]
}
 8015138:	bf00      	nop
 801513a:	370c      	adds	r7, #12
 801513c:	46bd      	mov	sp, r7
 801513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015142:	4770      	bx	lr
 8015144:	24001c94 	.word	0x24001c94
 8015148:	24001cfc 	.word	0x24001cfc

0801514c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801514c:	b480      	push	{r7}
 801514e:	b083      	sub	sp, #12
 8015150:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015152:	4b0b      	ldr	r3, [pc, #44]	; (8015180 <xTaskGetSchedulerState+0x34>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d102      	bne.n	8015160 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801515a:	2301      	movs	r3, #1
 801515c:	607b      	str	r3, [r7, #4]
 801515e:	e008      	b.n	8015172 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015160:	4b08      	ldr	r3, [pc, #32]	; (8015184 <xTaskGetSchedulerState+0x38>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d102      	bne.n	801516e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015168:	2302      	movs	r3, #2
 801516a:	607b      	str	r3, [r7, #4]
 801516c:	e001      	b.n	8015172 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801516e:	2300      	movs	r3, #0
 8015170:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015172:	687b      	ldr	r3, [r7, #4]
	}
 8015174:	4618      	mov	r0, r3
 8015176:	370c      	adds	r7, #12
 8015178:	46bd      	mov	sp, r7
 801517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517e:	4770      	bx	lr
 8015180:	24001ce8 	.word	0x24001ce8
 8015184:	24001d04 	.word	0x24001d04

08015188 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015188:	b580      	push	{r7, lr}
 801518a:	b086      	sub	sp, #24
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015194:	2300      	movs	r3, #0
 8015196:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d056      	beq.n	801524c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801519e:	4b2e      	ldr	r3, [pc, #184]	; (8015258 <xTaskPriorityDisinherit+0xd0>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	693a      	ldr	r2, [r7, #16]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d00a      	beq.n	80151be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80151a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ac:	f383 8811 	msr	BASEPRI, r3
 80151b0:	f3bf 8f6f 	isb	sy
 80151b4:	f3bf 8f4f 	dsb	sy
 80151b8:	60fb      	str	r3, [r7, #12]
}
 80151ba:	bf00      	nop
 80151bc:	e7fe      	b.n	80151bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d10a      	bne.n	80151dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80151c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ca:	f383 8811 	msr	BASEPRI, r3
 80151ce:	f3bf 8f6f 	isb	sy
 80151d2:	f3bf 8f4f 	dsb	sy
 80151d6:	60bb      	str	r3, [r7, #8]
}
 80151d8:	bf00      	nop
 80151da:	e7fe      	b.n	80151da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151e0:	1e5a      	subs	r2, r3, #1
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d02c      	beq.n	801524c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d128      	bne.n	801524c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	3304      	adds	r3, #4
 80151fe:	4618      	mov	r0, r3
 8015200:	f7fe f9f6 	bl	80135f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015204:	693b      	ldr	r3, [r7, #16]
 8015206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015210:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801521c:	4b0f      	ldr	r3, [pc, #60]	; (801525c <xTaskPriorityDisinherit+0xd4>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	429a      	cmp	r2, r3
 8015222:	d903      	bls.n	801522c <xTaskPriorityDisinherit+0xa4>
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015228:	4a0c      	ldr	r2, [pc, #48]	; (801525c <xTaskPriorityDisinherit+0xd4>)
 801522a:	6013      	str	r3, [r2, #0]
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015230:	4613      	mov	r3, r2
 8015232:	009b      	lsls	r3, r3, #2
 8015234:	4413      	add	r3, r2
 8015236:	009b      	lsls	r3, r3, #2
 8015238:	4a09      	ldr	r2, [pc, #36]	; (8015260 <xTaskPriorityDisinherit+0xd8>)
 801523a:	441a      	add	r2, r3
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	3304      	adds	r3, #4
 8015240:	4619      	mov	r1, r3
 8015242:	4610      	mov	r0, r2
 8015244:	f7fe f977 	bl	8013536 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015248:	2301      	movs	r3, #1
 801524a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801524c:	697b      	ldr	r3, [r7, #20]
	}
 801524e:	4618      	mov	r0, r3
 8015250:	3718      	adds	r7, #24
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}
 8015256:	bf00      	nop
 8015258:	24001808 	.word	0x24001808
 801525c:	24001ce4 	.word	0x24001ce4
 8015260:	2400180c 	.word	0x2400180c

08015264 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015264:	b480      	push	{r7}
 8015266:	b083      	sub	sp, #12
 8015268:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801526a:	4b09      	ldr	r3, [pc, #36]	; (8015290 <uxTaskResetEventItemValue+0x2c>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	699b      	ldr	r3, [r3, #24]
 8015270:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015272:	4b07      	ldr	r3, [pc, #28]	; (8015290 <uxTaskResetEventItemValue+0x2c>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015278:	4b05      	ldr	r3, [pc, #20]	; (8015290 <uxTaskResetEventItemValue+0x2c>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015280:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015282:	687b      	ldr	r3, [r7, #4]
}
 8015284:	4618      	mov	r0, r3
 8015286:	370c      	adds	r7, #12
 8015288:	46bd      	mov	sp, r7
 801528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528e:	4770      	bx	lr
 8015290:	24001808 	.word	0x24001808

08015294 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b084      	sub	sp, #16
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801529e:	4b21      	ldr	r3, [pc, #132]	; (8015324 <prvAddCurrentTaskToDelayedList+0x90>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80152a4:	4b20      	ldr	r3, [pc, #128]	; (8015328 <prvAddCurrentTaskToDelayedList+0x94>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	3304      	adds	r3, #4
 80152aa:	4618      	mov	r0, r3
 80152ac:	f7fe f9a0 	bl	80135f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152b6:	d10a      	bne.n	80152ce <prvAddCurrentTaskToDelayedList+0x3a>
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d007      	beq.n	80152ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152be:	4b1a      	ldr	r3, [pc, #104]	; (8015328 <prvAddCurrentTaskToDelayedList+0x94>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	3304      	adds	r3, #4
 80152c4:	4619      	mov	r1, r3
 80152c6:	4819      	ldr	r0, [pc, #100]	; (801532c <prvAddCurrentTaskToDelayedList+0x98>)
 80152c8:	f7fe f935 	bl	8013536 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80152cc:	e026      	b.n	801531c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80152ce:	68fa      	ldr	r2, [r7, #12]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	4413      	add	r3, r2
 80152d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80152d6:	4b14      	ldr	r3, [pc, #80]	; (8015328 <prvAddCurrentTaskToDelayedList+0x94>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	68ba      	ldr	r2, [r7, #8]
 80152dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80152de:	68ba      	ldr	r2, [r7, #8]
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d209      	bcs.n	80152fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152e6:	4b12      	ldr	r3, [pc, #72]	; (8015330 <prvAddCurrentTaskToDelayedList+0x9c>)
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	4b0f      	ldr	r3, [pc, #60]	; (8015328 <prvAddCurrentTaskToDelayedList+0x94>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	3304      	adds	r3, #4
 80152f0:	4619      	mov	r1, r3
 80152f2:	4610      	mov	r0, r2
 80152f4:	f7fe f943 	bl	801357e <vListInsert>
}
 80152f8:	e010      	b.n	801531c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152fa:	4b0e      	ldr	r3, [pc, #56]	; (8015334 <prvAddCurrentTaskToDelayedList+0xa0>)
 80152fc:	681a      	ldr	r2, [r3, #0]
 80152fe:	4b0a      	ldr	r3, [pc, #40]	; (8015328 <prvAddCurrentTaskToDelayedList+0x94>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	3304      	adds	r3, #4
 8015304:	4619      	mov	r1, r3
 8015306:	4610      	mov	r0, r2
 8015308:	f7fe f939 	bl	801357e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801530c:	4b0a      	ldr	r3, [pc, #40]	; (8015338 <prvAddCurrentTaskToDelayedList+0xa4>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	68ba      	ldr	r2, [r7, #8]
 8015312:	429a      	cmp	r2, r3
 8015314:	d202      	bcs.n	801531c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015316:	4a08      	ldr	r2, [pc, #32]	; (8015338 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015318:	68bb      	ldr	r3, [r7, #8]
 801531a:	6013      	str	r3, [r2, #0]
}
 801531c:	bf00      	nop
 801531e:	3710      	adds	r7, #16
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	24001ce0 	.word	0x24001ce0
 8015328:	24001808 	.word	0x24001808
 801532c:	24001cc8 	.word	0x24001cc8
 8015330:	24001c98 	.word	0x24001c98
 8015334:	24001c94 	.word	0x24001c94
 8015338:	24001cfc 	.word	0x24001cfc

0801533c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b08a      	sub	sp, #40	; 0x28
 8015340:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015342:	2300      	movs	r3, #0
 8015344:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015346:	f000 fb07 	bl	8015958 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801534a:	4b1c      	ldr	r3, [pc, #112]	; (80153bc <xTimerCreateTimerTask+0x80>)
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d021      	beq.n	8015396 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015352:	2300      	movs	r3, #0
 8015354:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015356:	2300      	movs	r3, #0
 8015358:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801535a:	1d3a      	adds	r2, r7, #4
 801535c:	f107 0108 	add.w	r1, r7, #8
 8015360:	f107 030c 	add.w	r3, r7, #12
 8015364:	4618      	mov	r0, r3
 8015366:	f7fd feb1 	bl	80130cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801536a:	6879      	ldr	r1, [r7, #4]
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	68fa      	ldr	r2, [r7, #12]
 8015370:	9202      	str	r2, [sp, #8]
 8015372:	9301      	str	r3, [sp, #4]
 8015374:	2302      	movs	r3, #2
 8015376:	9300      	str	r3, [sp, #0]
 8015378:	2300      	movs	r3, #0
 801537a:	460a      	mov	r2, r1
 801537c:	4910      	ldr	r1, [pc, #64]	; (80153c0 <xTimerCreateTimerTask+0x84>)
 801537e:	4811      	ldr	r0, [pc, #68]	; (80153c4 <xTimerCreateTimerTask+0x88>)
 8015380:	f7fe ff06 	bl	8014190 <xTaskCreateStatic>
 8015384:	4603      	mov	r3, r0
 8015386:	4a10      	ldr	r2, [pc, #64]	; (80153c8 <xTimerCreateTimerTask+0x8c>)
 8015388:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801538a:	4b0f      	ldr	r3, [pc, #60]	; (80153c8 <xTimerCreateTimerTask+0x8c>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d001      	beq.n	8015396 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015392:	2301      	movs	r3, #1
 8015394:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d10a      	bne.n	80153b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a0:	f383 8811 	msr	BASEPRI, r3
 80153a4:	f3bf 8f6f 	isb	sy
 80153a8:	f3bf 8f4f 	dsb	sy
 80153ac:	613b      	str	r3, [r7, #16]
}
 80153ae:	bf00      	nop
 80153b0:	e7fe      	b.n	80153b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80153b2:	697b      	ldr	r3, [r7, #20]
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	3718      	adds	r7, #24
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	24001d38 	.word	0x24001d38
 80153c0:	08016fb4 	.word	0x08016fb4
 80153c4:	08015501 	.word	0x08015501
 80153c8:	24001d3c 	.word	0x24001d3c

080153cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b08a      	sub	sp, #40	; 0x28
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	60f8      	str	r0, [r7, #12]
 80153d4:	60b9      	str	r1, [r7, #8]
 80153d6:	607a      	str	r2, [r7, #4]
 80153d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80153da:	2300      	movs	r3, #0
 80153dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d10a      	bne.n	80153fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80153e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e8:	f383 8811 	msr	BASEPRI, r3
 80153ec:	f3bf 8f6f 	isb	sy
 80153f0:	f3bf 8f4f 	dsb	sy
 80153f4:	623b      	str	r3, [r7, #32]
}
 80153f6:	bf00      	nop
 80153f8:	e7fe      	b.n	80153f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80153fa:	4b1a      	ldr	r3, [pc, #104]	; (8015464 <xTimerGenericCommand+0x98>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d02a      	beq.n	8015458 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801540e:	68bb      	ldr	r3, [r7, #8]
 8015410:	2b05      	cmp	r3, #5
 8015412:	dc18      	bgt.n	8015446 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015414:	f7ff fe9a 	bl	801514c <xTaskGetSchedulerState>
 8015418:	4603      	mov	r3, r0
 801541a:	2b02      	cmp	r3, #2
 801541c:	d109      	bne.n	8015432 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801541e:	4b11      	ldr	r3, [pc, #68]	; (8015464 <xTimerGenericCommand+0x98>)
 8015420:	6818      	ldr	r0, [r3, #0]
 8015422:	f107 0110 	add.w	r1, r7, #16
 8015426:	2300      	movs	r3, #0
 8015428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801542a:	f7fe fa49 	bl	80138c0 <xQueueGenericSend>
 801542e:	6278      	str	r0, [r7, #36]	; 0x24
 8015430:	e012      	b.n	8015458 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015432:	4b0c      	ldr	r3, [pc, #48]	; (8015464 <xTimerGenericCommand+0x98>)
 8015434:	6818      	ldr	r0, [r3, #0]
 8015436:	f107 0110 	add.w	r1, r7, #16
 801543a:	2300      	movs	r3, #0
 801543c:	2200      	movs	r2, #0
 801543e:	f7fe fa3f 	bl	80138c0 <xQueueGenericSend>
 8015442:	6278      	str	r0, [r7, #36]	; 0x24
 8015444:	e008      	b.n	8015458 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015446:	4b07      	ldr	r3, [pc, #28]	; (8015464 <xTimerGenericCommand+0x98>)
 8015448:	6818      	ldr	r0, [r3, #0]
 801544a:	f107 0110 	add.w	r1, r7, #16
 801544e:	2300      	movs	r3, #0
 8015450:	683a      	ldr	r2, [r7, #0]
 8015452:	f7fe fb33 	bl	8013abc <xQueueGenericSendFromISR>
 8015456:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801545a:	4618      	mov	r0, r3
 801545c:	3728      	adds	r7, #40	; 0x28
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
 8015462:	bf00      	nop
 8015464:	24001d38 	.word	0x24001d38

08015468 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b088      	sub	sp, #32
 801546c:	af02      	add	r7, sp, #8
 801546e:	6078      	str	r0, [r7, #4]
 8015470:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015472:	4b22      	ldr	r3, [pc, #136]	; (80154fc <prvProcessExpiredTimer+0x94>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	68db      	ldr	r3, [r3, #12]
 801547a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	3304      	adds	r3, #4
 8015480:	4618      	mov	r0, r3
 8015482:	f7fe f8b5 	bl	80135f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801548c:	f003 0304 	and.w	r3, r3, #4
 8015490:	2b00      	cmp	r3, #0
 8015492:	d022      	beq.n	80154da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	699a      	ldr	r2, [r3, #24]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	18d1      	adds	r1, r2, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	683a      	ldr	r2, [r7, #0]
 80154a0:	6978      	ldr	r0, [r7, #20]
 80154a2:	f000 f8d1 	bl	8015648 <prvInsertTimerInActiveList>
 80154a6:	4603      	mov	r3, r0
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d01f      	beq.n	80154ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80154ac:	2300      	movs	r3, #0
 80154ae:	9300      	str	r3, [sp, #0]
 80154b0:	2300      	movs	r3, #0
 80154b2:	687a      	ldr	r2, [r7, #4]
 80154b4:	2100      	movs	r1, #0
 80154b6:	6978      	ldr	r0, [r7, #20]
 80154b8:	f7ff ff88 	bl	80153cc <xTimerGenericCommand>
 80154bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d113      	bne.n	80154ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80154c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154c8:	f383 8811 	msr	BASEPRI, r3
 80154cc:	f3bf 8f6f 	isb	sy
 80154d0:	f3bf 8f4f 	dsb	sy
 80154d4:	60fb      	str	r3, [r7, #12]
}
 80154d6:	bf00      	nop
 80154d8:	e7fe      	b.n	80154d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80154da:	697b      	ldr	r3, [r7, #20]
 80154dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154e0:	f023 0301 	bic.w	r3, r3, #1
 80154e4:	b2da      	uxtb	r2, r3
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	6a1b      	ldr	r3, [r3, #32]
 80154f0:	6978      	ldr	r0, [r7, #20]
 80154f2:	4798      	blx	r3
}
 80154f4:	bf00      	nop
 80154f6:	3718      	adds	r7, #24
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}
 80154fc:	24001d30 	.word	0x24001d30

08015500 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015508:	f107 0308 	add.w	r3, r7, #8
 801550c:	4618      	mov	r0, r3
 801550e:	f000 f857 	bl	80155c0 <prvGetNextExpireTime>
 8015512:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	4619      	mov	r1, r3
 8015518:	68f8      	ldr	r0, [r7, #12]
 801551a:	f000 f803 	bl	8015524 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801551e:	f000 f8d5 	bl	80156cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015522:	e7f1      	b.n	8015508 <prvTimerTask+0x8>

08015524 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b084      	sub	sp, #16
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801552e:	f7ff f985 	bl	801483c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015532:	f107 0308 	add.w	r3, r7, #8
 8015536:	4618      	mov	r0, r3
 8015538:	f000 f866 	bl	8015608 <prvSampleTimeNow>
 801553c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801553e:	68bb      	ldr	r3, [r7, #8]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d130      	bne.n	80155a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d10a      	bne.n	8015560 <prvProcessTimerOrBlockTask+0x3c>
 801554a:	687a      	ldr	r2, [r7, #4]
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	429a      	cmp	r2, r3
 8015550:	d806      	bhi.n	8015560 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015552:	f7ff f981 	bl	8014858 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015556:	68f9      	ldr	r1, [r7, #12]
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f7ff ff85 	bl	8015468 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801555e:	e024      	b.n	80155aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d008      	beq.n	8015578 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015566:	4b13      	ldr	r3, [pc, #76]	; (80155b4 <prvProcessTimerOrBlockTask+0x90>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d101      	bne.n	8015574 <prvProcessTimerOrBlockTask+0x50>
 8015570:	2301      	movs	r3, #1
 8015572:	e000      	b.n	8015576 <prvProcessTimerOrBlockTask+0x52>
 8015574:	2300      	movs	r3, #0
 8015576:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015578:	4b0f      	ldr	r3, [pc, #60]	; (80155b8 <prvProcessTimerOrBlockTask+0x94>)
 801557a:	6818      	ldr	r0, [r3, #0]
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	1ad3      	subs	r3, r2, r3
 8015582:	683a      	ldr	r2, [r7, #0]
 8015584:	4619      	mov	r1, r3
 8015586:	f7fe fdcf 	bl	8014128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801558a:	f7ff f965 	bl	8014858 <xTaskResumeAll>
 801558e:	4603      	mov	r3, r0
 8015590:	2b00      	cmp	r3, #0
 8015592:	d10a      	bne.n	80155aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015594:	4b09      	ldr	r3, [pc, #36]	; (80155bc <prvProcessTimerOrBlockTask+0x98>)
 8015596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801559a:	601a      	str	r2, [r3, #0]
 801559c:	f3bf 8f4f 	dsb	sy
 80155a0:	f3bf 8f6f 	isb	sy
}
 80155a4:	e001      	b.n	80155aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80155a6:	f7ff f957 	bl	8014858 <xTaskResumeAll>
}
 80155aa:	bf00      	nop
 80155ac:	3710      	adds	r7, #16
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}
 80155b2:	bf00      	nop
 80155b4:	24001d34 	.word	0x24001d34
 80155b8:	24001d38 	.word	0x24001d38
 80155bc:	e000ed04 	.word	0xe000ed04

080155c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80155c0:	b480      	push	{r7}
 80155c2:	b085      	sub	sp, #20
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80155c8:	4b0e      	ldr	r3, [pc, #56]	; (8015604 <prvGetNextExpireTime+0x44>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d101      	bne.n	80155d6 <prvGetNextExpireTime+0x16>
 80155d2:	2201      	movs	r2, #1
 80155d4:	e000      	b.n	80155d8 <prvGetNextExpireTime+0x18>
 80155d6:	2200      	movs	r2, #0
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d105      	bne.n	80155f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80155e4:	4b07      	ldr	r3, [pc, #28]	; (8015604 <prvGetNextExpireTime+0x44>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	60fb      	str	r3, [r7, #12]
 80155ee:	e001      	b.n	80155f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80155f0:	2300      	movs	r3, #0
 80155f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80155f4:	68fb      	ldr	r3, [r7, #12]
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3714      	adds	r7, #20
 80155fa:	46bd      	mov	sp, r7
 80155fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015600:	4770      	bx	lr
 8015602:	bf00      	nop
 8015604:	24001d30 	.word	0x24001d30

08015608 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b084      	sub	sp, #16
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015610:	f7ff f9c0 	bl	8014994 <xTaskGetTickCount>
 8015614:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015616:	4b0b      	ldr	r3, [pc, #44]	; (8015644 <prvSampleTimeNow+0x3c>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	68fa      	ldr	r2, [r7, #12]
 801561c:	429a      	cmp	r2, r3
 801561e:	d205      	bcs.n	801562c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015620:	f000 f936 	bl	8015890 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2201      	movs	r2, #1
 8015628:	601a      	str	r2, [r3, #0]
 801562a:	e002      	b.n	8015632 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2200      	movs	r2, #0
 8015630:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015632:	4a04      	ldr	r2, [pc, #16]	; (8015644 <prvSampleTimeNow+0x3c>)
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015638:	68fb      	ldr	r3, [r7, #12]
}
 801563a:	4618      	mov	r0, r3
 801563c:	3710      	adds	r7, #16
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
 8015642:	bf00      	nop
 8015644:	24001d40 	.word	0x24001d40

08015648 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b086      	sub	sp, #24
 801564c:	af00      	add	r7, sp, #0
 801564e:	60f8      	str	r0, [r7, #12]
 8015650:	60b9      	str	r1, [r7, #8]
 8015652:	607a      	str	r2, [r7, #4]
 8015654:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015656:	2300      	movs	r3, #0
 8015658:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	68ba      	ldr	r2, [r7, #8]
 801565e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	68fa      	ldr	r2, [r7, #12]
 8015664:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	429a      	cmp	r2, r3
 801566c:	d812      	bhi.n	8015694 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	1ad2      	subs	r2, r2, r3
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	699b      	ldr	r3, [r3, #24]
 8015678:	429a      	cmp	r2, r3
 801567a:	d302      	bcc.n	8015682 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801567c:	2301      	movs	r3, #1
 801567e:	617b      	str	r3, [r7, #20]
 8015680:	e01b      	b.n	80156ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015682:	4b10      	ldr	r3, [pc, #64]	; (80156c4 <prvInsertTimerInActiveList+0x7c>)
 8015684:	681a      	ldr	r2, [r3, #0]
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	3304      	adds	r3, #4
 801568a:	4619      	mov	r1, r3
 801568c:	4610      	mov	r0, r2
 801568e:	f7fd ff76 	bl	801357e <vListInsert>
 8015692:	e012      	b.n	80156ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015694:	687a      	ldr	r2, [r7, #4]
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	429a      	cmp	r2, r3
 801569a:	d206      	bcs.n	80156aa <prvInsertTimerInActiveList+0x62>
 801569c:	68ba      	ldr	r2, [r7, #8]
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d302      	bcc.n	80156aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80156a4:	2301      	movs	r3, #1
 80156a6:	617b      	str	r3, [r7, #20]
 80156a8:	e007      	b.n	80156ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80156aa:	4b07      	ldr	r3, [pc, #28]	; (80156c8 <prvInsertTimerInActiveList+0x80>)
 80156ac:	681a      	ldr	r2, [r3, #0]
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	3304      	adds	r3, #4
 80156b2:	4619      	mov	r1, r3
 80156b4:	4610      	mov	r0, r2
 80156b6:	f7fd ff62 	bl	801357e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80156ba:	697b      	ldr	r3, [r7, #20]
}
 80156bc:	4618      	mov	r0, r3
 80156be:	3718      	adds	r7, #24
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}
 80156c4:	24001d34 	.word	0x24001d34
 80156c8:	24001d30 	.word	0x24001d30

080156cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b08e      	sub	sp, #56	; 0x38
 80156d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80156d2:	e0ca      	b.n	801586a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	da18      	bge.n	801570c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80156da:	1d3b      	adds	r3, r7, #4
 80156dc:	3304      	adds	r3, #4
 80156de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80156e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d10a      	bne.n	80156fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80156e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ea:	f383 8811 	msr	BASEPRI, r3
 80156ee:	f3bf 8f6f 	isb	sy
 80156f2:	f3bf 8f4f 	dsb	sy
 80156f6:	61fb      	str	r3, [r7, #28]
}
 80156f8:	bf00      	nop
 80156fa:	e7fe      	b.n	80156fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80156fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015702:	6850      	ldr	r0, [r2, #4]
 8015704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015706:	6892      	ldr	r2, [r2, #8]
 8015708:	4611      	mov	r1, r2
 801570a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2b00      	cmp	r3, #0
 8015710:	f2c0 80aa 	blt.w	8015868 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801571a:	695b      	ldr	r3, [r3, #20]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d004      	beq.n	801572a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015722:	3304      	adds	r3, #4
 8015724:	4618      	mov	r0, r3
 8015726:	f7fd ff63 	bl	80135f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801572a:	463b      	mov	r3, r7
 801572c:	4618      	mov	r0, r3
 801572e:	f7ff ff6b 	bl	8015608 <prvSampleTimeNow>
 8015732:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2b09      	cmp	r3, #9
 8015738:	f200 8097 	bhi.w	801586a <prvProcessReceivedCommands+0x19e>
 801573c:	a201      	add	r2, pc, #4	; (adr r2, 8015744 <prvProcessReceivedCommands+0x78>)
 801573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015742:	bf00      	nop
 8015744:	0801576d 	.word	0x0801576d
 8015748:	0801576d 	.word	0x0801576d
 801574c:	0801576d 	.word	0x0801576d
 8015750:	080157e1 	.word	0x080157e1
 8015754:	080157f5 	.word	0x080157f5
 8015758:	0801583f 	.word	0x0801583f
 801575c:	0801576d 	.word	0x0801576d
 8015760:	0801576d 	.word	0x0801576d
 8015764:	080157e1 	.word	0x080157e1
 8015768:	080157f5 	.word	0x080157f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801576e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015772:	f043 0301 	orr.w	r3, r3, #1
 8015776:	b2da      	uxtb	r2, r3
 8015778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801577e:	68ba      	ldr	r2, [r7, #8]
 8015780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015782:	699b      	ldr	r3, [r3, #24]
 8015784:	18d1      	adds	r1, r2, r3
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801578a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801578c:	f7ff ff5c 	bl	8015648 <prvInsertTimerInActiveList>
 8015790:	4603      	mov	r3, r0
 8015792:	2b00      	cmp	r3, #0
 8015794:	d069      	beq.n	801586a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015798:	6a1b      	ldr	r3, [r3, #32]
 801579a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801579c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157a4:	f003 0304 	and.w	r3, r3, #4
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d05e      	beq.n	801586a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80157ac:	68ba      	ldr	r2, [r7, #8]
 80157ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b0:	699b      	ldr	r3, [r3, #24]
 80157b2:	441a      	add	r2, r3
 80157b4:	2300      	movs	r3, #0
 80157b6:	9300      	str	r3, [sp, #0]
 80157b8:	2300      	movs	r3, #0
 80157ba:	2100      	movs	r1, #0
 80157bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157be:	f7ff fe05 	bl	80153cc <xTimerGenericCommand>
 80157c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80157c4:	6a3b      	ldr	r3, [r7, #32]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d14f      	bne.n	801586a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80157ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ce:	f383 8811 	msr	BASEPRI, r3
 80157d2:	f3bf 8f6f 	isb	sy
 80157d6:	f3bf 8f4f 	dsb	sy
 80157da:	61bb      	str	r3, [r7, #24]
}
 80157dc:	bf00      	nop
 80157de:	e7fe      	b.n	80157de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80157e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157e6:	f023 0301 	bic.w	r3, r3, #1
 80157ea:	b2da      	uxtb	r2, r3
 80157ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80157f2:	e03a      	b.n	801586a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80157f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157fa:	f043 0301 	orr.w	r3, r3, #1
 80157fe:	b2da      	uxtb	r2, r3
 8015800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015806:	68ba      	ldr	r2, [r7, #8]
 8015808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580e:	699b      	ldr	r3, [r3, #24]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d10a      	bne.n	801582a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015818:	f383 8811 	msr	BASEPRI, r3
 801581c:	f3bf 8f6f 	isb	sy
 8015820:	f3bf 8f4f 	dsb	sy
 8015824:	617b      	str	r3, [r7, #20]
}
 8015826:	bf00      	nop
 8015828:	e7fe      	b.n	8015828 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801582c:	699a      	ldr	r2, [r3, #24]
 801582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015830:	18d1      	adds	r1, r2, r3
 8015832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015838:	f7ff ff06 	bl	8015648 <prvInsertTimerInActiveList>
					break;
 801583c:	e015      	b.n	801586a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015844:	f003 0302 	and.w	r3, r3, #2
 8015848:	2b00      	cmp	r3, #0
 801584a:	d103      	bne.n	8015854 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801584c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801584e:	f000 fbff 	bl	8016050 <vPortFree>
 8015852:	e00a      	b.n	801586a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801585a:	f023 0301 	bic.w	r3, r3, #1
 801585e:	b2da      	uxtb	r2, r3
 8015860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015866:	e000      	b.n	801586a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015868:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801586a:	4b08      	ldr	r3, [pc, #32]	; (801588c <prvProcessReceivedCommands+0x1c0>)
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	1d39      	adds	r1, r7, #4
 8015870:	2200      	movs	r2, #0
 8015872:	4618      	mov	r0, r3
 8015874:	f7fe f9be 	bl	8013bf4 <xQueueReceive>
 8015878:	4603      	mov	r3, r0
 801587a:	2b00      	cmp	r3, #0
 801587c:	f47f af2a 	bne.w	80156d4 <prvProcessReceivedCommands+0x8>
	}
}
 8015880:	bf00      	nop
 8015882:	bf00      	nop
 8015884:	3730      	adds	r7, #48	; 0x30
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
 801588a:	bf00      	nop
 801588c:	24001d38 	.word	0x24001d38

08015890 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b088      	sub	sp, #32
 8015894:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015896:	e048      	b.n	801592a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015898:	4b2d      	ldr	r3, [pc, #180]	; (8015950 <prvSwitchTimerLists+0xc0>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158a2:	4b2b      	ldr	r3, [pc, #172]	; (8015950 <prvSwitchTimerLists+0xc0>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	68db      	ldr	r3, [r3, #12]
 80158a8:	68db      	ldr	r3, [r3, #12]
 80158aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	3304      	adds	r3, #4
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fd fe9d 	bl	80135f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	6a1b      	ldr	r3, [r3, #32]
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158c4:	f003 0304 	and.w	r3, r3, #4
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d02e      	beq.n	801592a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	699b      	ldr	r3, [r3, #24]
 80158d0:	693a      	ldr	r2, [r7, #16]
 80158d2:	4413      	add	r3, r2
 80158d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80158d6:	68ba      	ldr	r2, [r7, #8]
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	429a      	cmp	r2, r3
 80158dc:	d90e      	bls.n	80158fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	68ba      	ldr	r2, [r7, #8]
 80158e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	68fa      	ldr	r2, [r7, #12]
 80158e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80158ea:	4b19      	ldr	r3, [pc, #100]	; (8015950 <prvSwitchTimerLists+0xc0>)
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	3304      	adds	r3, #4
 80158f2:	4619      	mov	r1, r3
 80158f4:	4610      	mov	r0, r2
 80158f6:	f7fd fe42 	bl	801357e <vListInsert>
 80158fa:	e016      	b.n	801592a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80158fc:	2300      	movs	r3, #0
 80158fe:	9300      	str	r3, [sp, #0]
 8015900:	2300      	movs	r3, #0
 8015902:	693a      	ldr	r2, [r7, #16]
 8015904:	2100      	movs	r1, #0
 8015906:	68f8      	ldr	r0, [r7, #12]
 8015908:	f7ff fd60 	bl	80153cc <xTimerGenericCommand>
 801590c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d10a      	bne.n	801592a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015918:	f383 8811 	msr	BASEPRI, r3
 801591c:	f3bf 8f6f 	isb	sy
 8015920:	f3bf 8f4f 	dsb	sy
 8015924:	603b      	str	r3, [r7, #0]
}
 8015926:	bf00      	nop
 8015928:	e7fe      	b.n	8015928 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801592a:	4b09      	ldr	r3, [pc, #36]	; (8015950 <prvSwitchTimerLists+0xc0>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d1b1      	bne.n	8015898 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015934:	4b06      	ldr	r3, [pc, #24]	; (8015950 <prvSwitchTimerLists+0xc0>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801593a:	4b06      	ldr	r3, [pc, #24]	; (8015954 <prvSwitchTimerLists+0xc4>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	4a04      	ldr	r2, [pc, #16]	; (8015950 <prvSwitchTimerLists+0xc0>)
 8015940:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015942:	4a04      	ldr	r2, [pc, #16]	; (8015954 <prvSwitchTimerLists+0xc4>)
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	6013      	str	r3, [r2, #0]
}
 8015948:	bf00      	nop
 801594a:	3718      	adds	r7, #24
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}
 8015950:	24001d30 	.word	0x24001d30
 8015954:	24001d34 	.word	0x24001d34

08015958 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b082      	sub	sp, #8
 801595c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801595e:	f000 f989 	bl	8015c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015962:	4b15      	ldr	r3, [pc, #84]	; (80159b8 <prvCheckForValidListAndQueue+0x60>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d120      	bne.n	80159ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801596a:	4814      	ldr	r0, [pc, #80]	; (80159bc <prvCheckForValidListAndQueue+0x64>)
 801596c:	f7fd fdb6 	bl	80134dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015970:	4813      	ldr	r0, [pc, #76]	; (80159c0 <prvCheckForValidListAndQueue+0x68>)
 8015972:	f7fd fdb3 	bl	80134dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015976:	4b13      	ldr	r3, [pc, #76]	; (80159c4 <prvCheckForValidListAndQueue+0x6c>)
 8015978:	4a10      	ldr	r2, [pc, #64]	; (80159bc <prvCheckForValidListAndQueue+0x64>)
 801597a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801597c:	4b12      	ldr	r3, [pc, #72]	; (80159c8 <prvCheckForValidListAndQueue+0x70>)
 801597e:	4a10      	ldr	r2, [pc, #64]	; (80159c0 <prvCheckForValidListAndQueue+0x68>)
 8015980:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015982:	2300      	movs	r3, #0
 8015984:	9300      	str	r3, [sp, #0]
 8015986:	4b11      	ldr	r3, [pc, #68]	; (80159cc <prvCheckForValidListAndQueue+0x74>)
 8015988:	4a11      	ldr	r2, [pc, #68]	; (80159d0 <prvCheckForValidListAndQueue+0x78>)
 801598a:	2110      	movs	r1, #16
 801598c:	200a      	movs	r0, #10
 801598e:	f7fd fec1 	bl	8013714 <xQueueGenericCreateStatic>
 8015992:	4603      	mov	r3, r0
 8015994:	4a08      	ldr	r2, [pc, #32]	; (80159b8 <prvCheckForValidListAndQueue+0x60>)
 8015996:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015998:	4b07      	ldr	r3, [pc, #28]	; (80159b8 <prvCheckForValidListAndQueue+0x60>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d005      	beq.n	80159ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80159a0:	4b05      	ldr	r3, [pc, #20]	; (80159b8 <prvCheckForValidListAndQueue+0x60>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	490b      	ldr	r1, [pc, #44]	; (80159d4 <prvCheckForValidListAndQueue+0x7c>)
 80159a6:	4618      	mov	r0, r3
 80159a8:	f7fe fb94 	bl	80140d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80159ac:	f000 f992 	bl	8015cd4 <vPortExitCritical>
}
 80159b0:	bf00      	nop
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}
 80159b6:	bf00      	nop
 80159b8:	24001d38 	.word	0x24001d38
 80159bc:	24001d08 	.word	0x24001d08
 80159c0:	24001d1c 	.word	0x24001d1c
 80159c4:	24001d30 	.word	0x24001d30
 80159c8:	24001d34 	.word	0x24001d34
 80159cc:	24001de4 	.word	0x24001de4
 80159d0:	24001d44 	.word	0x24001d44
 80159d4:	08016fbc 	.word	0x08016fbc

080159d8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b08a      	sub	sp, #40	; 0x28
 80159dc:	af00      	add	r7, sp, #0
 80159de:	60f8      	str	r0, [r7, #12]
 80159e0:	60b9      	str	r1, [r7, #8]
 80159e2:	607a      	str	r2, [r7, #4]
 80159e4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80159e6:	f06f 0301 	mvn.w	r3, #1
 80159ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80159f8:	4b06      	ldr	r3, [pc, #24]	; (8015a14 <xTimerPendFunctionCallFromISR+0x3c>)
 80159fa:	6818      	ldr	r0, [r3, #0]
 80159fc:	f107 0114 	add.w	r1, r7, #20
 8015a00:	2300      	movs	r3, #0
 8015a02:	683a      	ldr	r2, [r7, #0]
 8015a04:	f7fe f85a 	bl	8013abc <xQueueGenericSendFromISR>
 8015a08:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	3728      	adds	r7, #40	; 0x28
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}
 8015a14:	24001d38 	.word	0x24001d38

08015a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015a18:	b480      	push	{r7}
 8015a1a:	b085      	sub	sp, #20
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	60f8      	str	r0, [r7, #12]
 8015a20:	60b9      	str	r1, [r7, #8]
 8015a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	3b04      	subs	r3, #4
 8015a28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	3b04      	subs	r3, #4
 8015a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015a38:	68bb      	ldr	r3, [r7, #8]
 8015a3a:	f023 0201 	bic.w	r2, r3, #1
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	3b04      	subs	r3, #4
 8015a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015a48:	4a0c      	ldr	r2, [pc, #48]	; (8015a7c <pxPortInitialiseStack+0x64>)
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	3b14      	subs	r3, #20
 8015a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015a54:	687a      	ldr	r2, [r7, #4]
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	3b04      	subs	r3, #4
 8015a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f06f 0202 	mvn.w	r2, #2
 8015a66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	3b20      	subs	r3, #32
 8015a6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015a6e:	68fb      	ldr	r3, [r7, #12]
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3714      	adds	r7, #20
 8015a74:	46bd      	mov	sp, r7
 8015a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7a:	4770      	bx	lr
 8015a7c:	08015a81 	.word	0x08015a81

08015a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015a80:	b480      	push	{r7}
 8015a82:	b085      	sub	sp, #20
 8015a84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015a86:	2300      	movs	r3, #0
 8015a88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015a8a:	4b12      	ldr	r3, [pc, #72]	; (8015ad4 <prvTaskExitError+0x54>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a92:	d00a      	beq.n	8015aaa <prvTaskExitError+0x2a>
	__asm volatile
 8015a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a98:	f383 8811 	msr	BASEPRI, r3
 8015a9c:	f3bf 8f6f 	isb	sy
 8015aa0:	f3bf 8f4f 	dsb	sy
 8015aa4:	60fb      	str	r3, [r7, #12]
}
 8015aa6:	bf00      	nop
 8015aa8:	e7fe      	b.n	8015aa8 <prvTaskExitError+0x28>
	__asm volatile
 8015aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aae:	f383 8811 	msr	BASEPRI, r3
 8015ab2:	f3bf 8f6f 	isb	sy
 8015ab6:	f3bf 8f4f 	dsb	sy
 8015aba:	60bb      	str	r3, [r7, #8]
}
 8015abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015abe:	bf00      	nop
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d0fc      	beq.n	8015ac0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015ac6:	bf00      	nop
 8015ac8:	bf00      	nop
 8015aca:	3714      	adds	r7, #20
 8015acc:	46bd      	mov	sp, r7
 8015ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad2:	4770      	bx	lr
 8015ad4:	240000a0 	.word	0x240000a0
	...

08015ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015ae0:	4b07      	ldr	r3, [pc, #28]	; (8015b00 <pxCurrentTCBConst2>)
 8015ae2:	6819      	ldr	r1, [r3, #0]
 8015ae4:	6808      	ldr	r0, [r1, #0]
 8015ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aea:	f380 8809 	msr	PSP, r0
 8015aee:	f3bf 8f6f 	isb	sy
 8015af2:	f04f 0000 	mov.w	r0, #0
 8015af6:	f380 8811 	msr	BASEPRI, r0
 8015afa:	4770      	bx	lr
 8015afc:	f3af 8000 	nop.w

08015b00 <pxCurrentTCBConst2>:
 8015b00:	24001808 	.word	0x24001808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015b04:	bf00      	nop
 8015b06:	bf00      	nop

08015b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015b08:	4808      	ldr	r0, [pc, #32]	; (8015b2c <prvPortStartFirstTask+0x24>)
 8015b0a:	6800      	ldr	r0, [r0, #0]
 8015b0c:	6800      	ldr	r0, [r0, #0]
 8015b0e:	f380 8808 	msr	MSP, r0
 8015b12:	f04f 0000 	mov.w	r0, #0
 8015b16:	f380 8814 	msr	CONTROL, r0
 8015b1a:	b662      	cpsie	i
 8015b1c:	b661      	cpsie	f
 8015b1e:	f3bf 8f4f 	dsb	sy
 8015b22:	f3bf 8f6f 	isb	sy
 8015b26:	df00      	svc	0
 8015b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015b2a:	bf00      	nop
 8015b2c:	e000ed08 	.word	0xe000ed08

08015b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b086      	sub	sp, #24
 8015b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015b36:	4b46      	ldr	r3, [pc, #280]	; (8015c50 <xPortStartScheduler+0x120>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	4a46      	ldr	r2, [pc, #280]	; (8015c54 <xPortStartScheduler+0x124>)
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	d10a      	bne.n	8015b56 <xPortStartScheduler+0x26>
	__asm volatile
 8015b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b44:	f383 8811 	msr	BASEPRI, r3
 8015b48:	f3bf 8f6f 	isb	sy
 8015b4c:	f3bf 8f4f 	dsb	sy
 8015b50:	613b      	str	r3, [r7, #16]
}
 8015b52:	bf00      	nop
 8015b54:	e7fe      	b.n	8015b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015b56:	4b3e      	ldr	r3, [pc, #248]	; (8015c50 <xPortStartScheduler+0x120>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	4a3f      	ldr	r2, [pc, #252]	; (8015c58 <xPortStartScheduler+0x128>)
 8015b5c:	4293      	cmp	r3, r2
 8015b5e:	d10a      	bne.n	8015b76 <xPortStartScheduler+0x46>
	__asm volatile
 8015b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b64:	f383 8811 	msr	BASEPRI, r3
 8015b68:	f3bf 8f6f 	isb	sy
 8015b6c:	f3bf 8f4f 	dsb	sy
 8015b70:	60fb      	str	r3, [r7, #12]
}
 8015b72:	bf00      	nop
 8015b74:	e7fe      	b.n	8015b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015b76:	4b39      	ldr	r3, [pc, #228]	; (8015c5c <xPortStartScheduler+0x12c>)
 8015b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	781b      	ldrb	r3, [r3, #0]
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	22ff      	movs	r2, #255	; 0xff
 8015b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	b2db      	uxtb	r3, r3
 8015b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015b90:	78fb      	ldrb	r3, [r7, #3]
 8015b92:	b2db      	uxtb	r3, r3
 8015b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015b98:	b2da      	uxtb	r2, r3
 8015b9a:	4b31      	ldr	r3, [pc, #196]	; (8015c60 <xPortStartScheduler+0x130>)
 8015b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015b9e:	4b31      	ldr	r3, [pc, #196]	; (8015c64 <xPortStartScheduler+0x134>)
 8015ba0:	2207      	movs	r2, #7
 8015ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015ba4:	e009      	b.n	8015bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015ba6:	4b2f      	ldr	r3, [pc, #188]	; (8015c64 <xPortStartScheduler+0x134>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	3b01      	subs	r3, #1
 8015bac:	4a2d      	ldr	r2, [pc, #180]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015bb0:	78fb      	ldrb	r3, [r7, #3]
 8015bb2:	b2db      	uxtb	r3, r3
 8015bb4:	005b      	lsls	r3, r3, #1
 8015bb6:	b2db      	uxtb	r3, r3
 8015bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015bba:	78fb      	ldrb	r3, [r7, #3]
 8015bbc:	b2db      	uxtb	r3, r3
 8015bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015bc2:	2b80      	cmp	r3, #128	; 0x80
 8015bc4:	d0ef      	beq.n	8015ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015bc6:	4b27      	ldr	r3, [pc, #156]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	f1c3 0307 	rsb	r3, r3, #7
 8015bce:	2b04      	cmp	r3, #4
 8015bd0:	d00a      	beq.n	8015be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd6:	f383 8811 	msr	BASEPRI, r3
 8015bda:	f3bf 8f6f 	isb	sy
 8015bde:	f3bf 8f4f 	dsb	sy
 8015be2:	60bb      	str	r3, [r7, #8]
}
 8015be4:	bf00      	nop
 8015be6:	e7fe      	b.n	8015be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015be8:	4b1e      	ldr	r3, [pc, #120]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	021b      	lsls	r3, r3, #8
 8015bee:	4a1d      	ldr	r2, [pc, #116]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015bf2:	4b1c      	ldr	r3, [pc, #112]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015bfa:	4a1a      	ldr	r2, [pc, #104]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	b2da      	uxtb	r2, r3
 8015c02:	697b      	ldr	r3, [r7, #20]
 8015c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015c06:	4b18      	ldr	r3, [pc, #96]	; (8015c68 <xPortStartScheduler+0x138>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4a17      	ldr	r2, [pc, #92]	; (8015c68 <xPortStartScheduler+0x138>)
 8015c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015c12:	4b15      	ldr	r3, [pc, #84]	; (8015c68 <xPortStartScheduler+0x138>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	4a14      	ldr	r2, [pc, #80]	; (8015c68 <xPortStartScheduler+0x138>)
 8015c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015c1e:	f000 f8dd 	bl	8015ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015c22:	4b12      	ldr	r3, [pc, #72]	; (8015c6c <xPortStartScheduler+0x13c>)
 8015c24:	2200      	movs	r2, #0
 8015c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015c28:	f000 f8fc 	bl	8015e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015c2c:	4b10      	ldr	r3, [pc, #64]	; (8015c70 <xPortStartScheduler+0x140>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	4a0f      	ldr	r2, [pc, #60]	; (8015c70 <xPortStartScheduler+0x140>)
 8015c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015c38:	f7ff ff66 	bl	8015b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015c3c:	f7fe ff7c 	bl	8014b38 <vTaskSwitchContext>
	prvTaskExitError();
 8015c40:	f7ff ff1e 	bl	8015a80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015c44:	2300      	movs	r3, #0
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3718      	adds	r7, #24
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	e000ed00 	.word	0xe000ed00
 8015c54:	410fc271 	.word	0x410fc271
 8015c58:	410fc270 	.word	0x410fc270
 8015c5c:	e000e400 	.word	0xe000e400
 8015c60:	24001e34 	.word	0x24001e34
 8015c64:	24001e38 	.word	0x24001e38
 8015c68:	e000ed20 	.word	0xe000ed20
 8015c6c:	240000a0 	.word	0x240000a0
 8015c70:	e000ef34 	.word	0xe000ef34

08015c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015c74:	b480      	push	{r7}
 8015c76:	b083      	sub	sp, #12
 8015c78:	af00      	add	r7, sp, #0
	__asm volatile
 8015c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c7e:	f383 8811 	msr	BASEPRI, r3
 8015c82:	f3bf 8f6f 	isb	sy
 8015c86:	f3bf 8f4f 	dsb	sy
 8015c8a:	607b      	str	r3, [r7, #4]
}
 8015c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015c8e:	4b0f      	ldr	r3, [pc, #60]	; (8015ccc <vPortEnterCritical+0x58>)
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	3301      	adds	r3, #1
 8015c94:	4a0d      	ldr	r2, [pc, #52]	; (8015ccc <vPortEnterCritical+0x58>)
 8015c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015c98:	4b0c      	ldr	r3, [pc, #48]	; (8015ccc <vPortEnterCritical+0x58>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	2b01      	cmp	r3, #1
 8015c9e:	d10f      	bne.n	8015cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015ca0:	4b0b      	ldr	r3, [pc, #44]	; (8015cd0 <vPortEnterCritical+0x5c>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	b2db      	uxtb	r3, r3
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d00a      	beq.n	8015cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8015caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cae:	f383 8811 	msr	BASEPRI, r3
 8015cb2:	f3bf 8f6f 	isb	sy
 8015cb6:	f3bf 8f4f 	dsb	sy
 8015cba:	603b      	str	r3, [r7, #0]
}
 8015cbc:	bf00      	nop
 8015cbe:	e7fe      	b.n	8015cbe <vPortEnterCritical+0x4a>
	}
}
 8015cc0:	bf00      	nop
 8015cc2:	370c      	adds	r7, #12
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cca:	4770      	bx	lr
 8015ccc:	240000a0 	.word	0x240000a0
 8015cd0:	e000ed04 	.word	0xe000ed04

08015cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015cd4:	b480      	push	{r7}
 8015cd6:	b083      	sub	sp, #12
 8015cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015cda:	4b12      	ldr	r3, [pc, #72]	; (8015d24 <vPortExitCritical+0x50>)
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d10a      	bne.n	8015cf8 <vPortExitCritical+0x24>
	__asm volatile
 8015ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ce6:	f383 8811 	msr	BASEPRI, r3
 8015cea:	f3bf 8f6f 	isb	sy
 8015cee:	f3bf 8f4f 	dsb	sy
 8015cf2:	607b      	str	r3, [r7, #4]
}
 8015cf4:	bf00      	nop
 8015cf6:	e7fe      	b.n	8015cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015cf8:	4b0a      	ldr	r3, [pc, #40]	; (8015d24 <vPortExitCritical+0x50>)
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	3b01      	subs	r3, #1
 8015cfe:	4a09      	ldr	r2, [pc, #36]	; (8015d24 <vPortExitCritical+0x50>)
 8015d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015d02:	4b08      	ldr	r3, [pc, #32]	; (8015d24 <vPortExitCritical+0x50>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d105      	bne.n	8015d16 <vPortExitCritical+0x42>
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	f383 8811 	msr	BASEPRI, r3
}
 8015d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015d16:	bf00      	nop
 8015d18:	370c      	adds	r7, #12
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d20:	4770      	bx	lr
 8015d22:	bf00      	nop
 8015d24:	240000a0 	.word	0x240000a0
	...

08015d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015d30:	f3ef 8009 	mrs	r0, PSP
 8015d34:	f3bf 8f6f 	isb	sy
 8015d38:	4b15      	ldr	r3, [pc, #84]	; (8015d90 <pxCurrentTCBConst>)
 8015d3a:	681a      	ldr	r2, [r3, #0]
 8015d3c:	f01e 0f10 	tst.w	lr, #16
 8015d40:	bf08      	it	eq
 8015d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d4a:	6010      	str	r0, [r2, #0]
 8015d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015d54:	f380 8811 	msr	BASEPRI, r0
 8015d58:	f3bf 8f4f 	dsb	sy
 8015d5c:	f3bf 8f6f 	isb	sy
 8015d60:	f7fe feea 	bl	8014b38 <vTaskSwitchContext>
 8015d64:	f04f 0000 	mov.w	r0, #0
 8015d68:	f380 8811 	msr	BASEPRI, r0
 8015d6c:	bc09      	pop	{r0, r3}
 8015d6e:	6819      	ldr	r1, [r3, #0]
 8015d70:	6808      	ldr	r0, [r1, #0]
 8015d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d76:	f01e 0f10 	tst.w	lr, #16
 8015d7a:	bf08      	it	eq
 8015d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015d80:	f380 8809 	msr	PSP, r0
 8015d84:	f3bf 8f6f 	isb	sy
 8015d88:	4770      	bx	lr
 8015d8a:	bf00      	nop
 8015d8c:	f3af 8000 	nop.w

08015d90 <pxCurrentTCBConst>:
 8015d90:	24001808 	.word	0x24001808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d94:	bf00      	nop
 8015d96:	bf00      	nop

08015d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b082      	sub	sp, #8
 8015d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da2:	f383 8811 	msr	BASEPRI, r3
 8015da6:	f3bf 8f6f 	isb	sy
 8015daa:	f3bf 8f4f 	dsb	sy
 8015dae:	607b      	str	r3, [r7, #4]
}
 8015db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015db2:	f7fe fdff 	bl	80149b4 <xTaskIncrementTick>
 8015db6:	4603      	mov	r3, r0
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d003      	beq.n	8015dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015dbc:	4b06      	ldr	r3, [pc, #24]	; (8015dd8 <xPortSysTickHandler+0x40>)
 8015dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dc2:	601a      	str	r2, [r3, #0]
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	f383 8811 	msr	BASEPRI, r3
}
 8015dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015dd0:	bf00      	nop
 8015dd2:	3708      	adds	r7, #8
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	e000ed04 	.word	0xe000ed04

08015ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015ddc:	b480      	push	{r7}
 8015dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015de0:	4b0b      	ldr	r3, [pc, #44]	; (8015e10 <vPortSetupTimerInterrupt+0x34>)
 8015de2:	2200      	movs	r2, #0
 8015de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015de6:	4b0b      	ldr	r3, [pc, #44]	; (8015e14 <vPortSetupTimerInterrupt+0x38>)
 8015de8:	2200      	movs	r2, #0
 8015dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015dec:	4b0a      	ldr	r3, [pc, #40]	; (8015e18 <vPortSetupTimerInterrupt+0x3c>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	4a0a      	ldr	r2, [pc, #40]	; (8015e1c <vPortSetupTimerInterrupt+0x40>)
 8015df2:	fba2 2303 	umull	r2, r3, r2, r3
 8015df6:	099b      	lsrs	r3, r3, #6
 8015df8:	4a09      	ldr	r2, [pc, #36]	; (8015e20 <vPortSetupTimerInterrupt+0x44>)
 8015dfa:	3b01      	subs	r3, #1
 8015dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015dfe:	4b04      	ldr	r3, [pc, #16]	; (8015e10 <vPortSetupTimerInterrupt+0x34>)
 8015e00:	2207      	movs	r2, #7
 8015e02:	601a      	str	r2, [r3, #0]
}
 8015e04:	bf00      	nop
 8015e06:	46bd      	mov	sp, r7
 8015e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0c:	4770      	bx	lr
 8015e0e:	bf00      	nop
 8015e10:	e000e010 	.word	0xe000e010
 8015e14:	e000e018 	.word	0xe000e018
 8015e18:	24000090 	.word	0x24000090
 8015e1c:	10624dd3 	.word	0x10624dd3
 8015e20:	e000e014 	.word	0xe000e014

08015e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015e34 <vPortEnableVFP+0x10>
 8015e28:	6801      	ldr	r1, [r0, #0]
 8015e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015e2e:	6001      	str	r1, [r0, #0]
 8015e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015e32:	bf00      	nop
 8015e34:	e000ed88 	.word	0xe000ed88

08015e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015e38:	b480      	push	{r7}
 8015e3a:	b085      	sub	sp, #20
 8015e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015e3e:	f3ef 8305 	mrs	r3, IPSR
 8015e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	2b0f      	cmp	r3, #15
 8015e48:	d914      	bls.n	8015e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015e4a:	4a17      	ldr	r2, [pc, #92]	; (8015ea8 <vPortValidateInterruptPriority+0x70>)
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	4413      	add	r3, r2
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015e54:	4b15      	ldr	r3, [pc, #84]	; (8015eac <vPortValidateInterruptPriority+0x74>)
 8015e56:	781b      	ldrb	r3, [r3, #0]
 8015e58:	7afa      	ldrb	r2, [r7, #11]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d20a      	bcs.n	8015e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e62:	f383 8811 	msr	BASEPRI, r3
 8015e66:	f3bf 8f6f 	isb	sy
 8015e6a:	f3bf 8f4f 	dsb	sy
 8015e6e:	607b      	str	r3, [r7, #4]
}
 8015e70:	bf00      	nop
 8015e72:	e7fe      	b.n	8015e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015e74:	4b0e      	ldr	r3, [pc, #56]	; (8015eb0 <vPortValidateInterruptPriority+0x78>)
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015e7c:	4b0d      	ldr	r3, [pc, #52]	; (8015eb4 <vPortValidateInterruptPriority+0x7c>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	429a      	cmp	r2, r3
 8015e82:	d90a      	bls.n	8015e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e88:	f383 8811 	msr	BASEPRI, r3
 8015e8c:	f3bf 8f6f 	isb	sy
 8015e90:	f3bf 8f4f 	dsb	sy
 8015e94:	603b      	str	r3, [r7, #0]
}
 8015e96:	bf00      	nop
 8015e98:	e7fe      	b.n	8015e98 <vPortValidateInterruptPriority+0x60>
	}
 8015e9a:	bf00      	nop
 8015e9c:	3714      	adds	r7, #20
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea4:	4770      	bx	lr
 8015ea6:	bf00      	nop
 8015ea8:	e000e3f0 	.word	0xe000e3f0
 8015eac:	24001e34 	.word	0x24001e34
 8015eb0:	e000ed0c 	.word	0xe000ed0c
 8015eb4:	24001e38 	.word	0x24001e38

08015eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b08a      	sub	sp, #40	; 0x28
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015ec4:	f7fe fcba 	bl	801483c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015ec8:	4b5b      	ldr	r3, [pc, #364]	; (8016038 <pvPortMalloc+0x180>)
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d101      	bne.n	8015ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015ed0:	f000 f920 	bl	8016114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015ed4:	4b59      	ldr	r3, [pc, #356]	; (801603c <pvPortMalloc+0x184>)
 8015ed6:	681a      	ldr	r2, [r3, #0]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	4013      	ands	r3, r2
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	f040 8093 	bne.w	8016008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d01d      	beq.n	8015f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015ee8:	2208      	movs	r2, #8
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	4413      	add	r3, r2
 8015eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f003 0307 	and.w	r3, r3, #7
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d014      	beq.n	8015f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f023 0307 	bic.w	r3, r3, #7
 8015f00:	3308      	adds	r3, #8
 8015f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f003 0307 	and.w	r3, r3, #7
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d00a      	beq.n	8015f24 <pvPortMalloc+0x6c>
	__asm volatile
 8015f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f12:	f383 8811 	msr	BASEPRI, r3
 8015f16:	f3bf 8f6f 	isb	sy
 8015f1a:	f3bf 8f4f 	dsb	sy
 8015f1e:	617b      	str	r3, [r7, #20]
}
 8015f20:	bf00      	nop
 8015f22:	e7fe      	b.n	8015f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d06e      	beq.n	8016008 <pvPortMalloc+0x150>
 8015f2a:	4b45      	ldr	r3, [pc, #276]	; (8016040 <pvPortMalloc+0x188>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	687a      	ldr	r2, [r7, #4]
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d869      	bhi.n	8016008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f34:	4b43      	ldr	r3, [pc, #268]	; (8016044 <pvPortMalloc+0x18c>)
 8015f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015f38:	4b42      	ldr	r3, [pc, #264]	; (8016044 <pvPortMalloc+0x18c>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f3e:	e004      	b.n	8015f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	687a      	ldr	r2, [r7, #4]
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d903      	bls.n	8015f5c <pvPortMalloc+0xa4>
 8015f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d1f1      	bne.n	8015f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015f5c:	4b36      	ldr	r3, [pc, #216]	; (8016038 <pvPortMalloc+0x180>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d050      	beq.n	8016008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015f66:	6a3b      	ldr	r3, [r7, #32]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	2208      	movs	r2, #8
 8015f6c:	4413      	add	r3, r2
 8015f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f72:	681a      	ldr	r2, [r3, #0]
 8015f74:	6a3b      	ldr	r3, [r7, #32]
 8015f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f7a:	685a      	ldr	r2, [r3, #4]
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	1ad2      	subs	r2, r2, r3
 8015f80:	2308      	movs	r3, #8
 8015f82:	005b      	lsls	r3, r3, #1
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d91f      	bls.n	8015fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	4413      	add	r3, r2
 8015f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f90:	69bb      	ldr	r3, [r7, #24]
 8015f92:	f003 0307 	and.w	r3, r3, #7
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d00a      	beq.n	8015fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8015f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f9e:	f383 8811 	msr	BASEPRI, r3
 8015fa2:	f3bf 8f6f 	isb	sy
 8015fa6:	f3bf 8f4f 	dsb	sy
 8015faa:	613b      	str	r3, [r7, #16]
}
 8015fac:	bf00      	nop
 8015fae:	e7fe      	b.n	8015fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb2:	685a      	ldr	r2, [r3, #4]
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	1ad2      	subs	r2, r2, r3
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015fc2:	69b8      	ldr	r0, [r7, #24]
 8015fc4:	f000 f908 	bl	80161d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015fc8:	4b1d      	ldr	r3, [pc, #116]	; (8016040 <pvPortMalloc+0x188>)
 8015fca:	681a      	ldr	r2, [r3, #0]
 8015fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	1ad3      	subs	r3, r2, r3
 8015fd2:	4a1b      	ldr	r2, [pc, #108]	; (8016040 <pvPortMalloc+0x188>)
 8015fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015fd6:	4b1a      	ldr	r3, [pc, #104]	; (8016040 <pvPortMalloc+0x188>)
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	4b1b      	ldr	r3, [pc, #108]	; (8016048 <pvPortMalloc+0x190>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d203      	bcs.n	8015fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015fe2:	4b17      	ldr	r3, [pc, #92]	; (8016040 <pvPortMalloc+0x188>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	4a18      	ldr	r2, [pc, #96]	; (8016048 <pvPortMalloc+0x190>)
 8015fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fec:	685a      	ldr	r2, [r3, #4]
 8015fee:	4b13      	ldr	r3, [pc, #76]	; (801603c <pvPortMalloc+0x184>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	431a      	orrs	r2, r3
 8015ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015ffe:	4b13      	ldr	r3, [pc, #76]	; (801604c <pvPortMalloc+0x194>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	3301      	adds	r3, #1
 8016004:	4a11      	ldr	r2, [pc, #68]	; (801604c <pvPortMalloc+0x194>)
 8016006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016008:	f7fe fc26 	bl	8014858 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	f003 0307 	and.w	r3, r3, #7
 8016012:	2b00      	cmp	r3, #0
 8016014:	d00a      	beq.n	801602c <pvPortMalloc+0x174>
	__asm volatile
 8016016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801601a:	f383 8811 	msr	BASEPRI, r3
 801601e:	f3bf 8f6f 	isb	sy
 8016022:	f3bf 8f4f 	dsb	sy
 8016026:	60fb      	str	r3, [r7, #12]
}
 8016028:	bf00      	nop
 801602a:	e7fe      	b.n	801602a <pvPortMalloc+0x172>
	return pvReturn;
 801602c:	69fb      	ldr	r3, [r7, #28]
}
 801602e:	4618      	mov	r0, r3
 8016030:	3728      	adds	r7, #40	; 0x28
 8016032:	46bd      	mov	sp, r7
 8016034:	bd80      	pop	{r7, pc}
 8016036:	bf00      	nop
 8016038:	24005a44 	.word	0x24005a44
 801603c:	24005a58 	.word	0x24005a58
 8016040:	24005a48 	.word	0x24005a48
 8016044:	24005a3c 	.word	0x24005a3c
 8016048:	24005a4c 	.word	0x24005a4c
 801604c:	24005a50 	.word	0x24005a50

08016050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b086      	sub	sp, #24
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d04d      	beq.n	80160fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016062:	2308      	movs	r3, #8
 8016064:	425b      	negs	r3, r3
 8016066:	697a      	ldr	r2, [r7, #20]
 8016068:	4413      	add	r3, r2
 801606a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016070:	693b      	ldr	r3, [r7, #16]
 8016072:	685a      	ldr	r2, [r3, #4]
 8016074:	4b24      	ldr	r3, [pc, #144]	; (8016108 <vPortFree+0xb8>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	4013      	ands	r3, r2
 801607a:	2b00      	cmp	r3, #0
 801607c:	d10a      	bne.n	8016094 <vPortFree+0x44>
	__asm volatile
 801607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016082:	f383 8811 	msr	BASEPRI, r3
 8016086:	f3bf 8f6f 	isb	sy
 801608a:	f3bf 8f4f 	dsb	sy
 801608e:	60fb      	str	r3, [r7, #12]
}
 8016090:	bf00      	nop
 8016092:	e7fe      	b.n	8016092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016094:	693b      	ldr	r3, [r7, #16]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d00a      	beq.n	80160b2 <vPortFree+0x62>
	__asm volatile
 801609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a0:	f383 8811 	msr	BASEPRI, r3
 80160a4:	f3bf 8f6f 	isb	sy
 80160a8:	f3bf 8f4f 	dsb	sy
 80160ac:	60bb      	str	r3, [r7, #8]
}
 80160ae:	bf00      	nop
 80160b0:	e7fe      	b.n	80160b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	685a      	ldr	r2, [r3, #4]
 80160b6:	4b14      	ldr	r3, [pc, #80]	; (8016108 <vPortFree+0xb8>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	4013      	ands	r3, r2
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d01e      	beq.n	80160fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80160c0:	693b      	ldr	r3, [r7, #16]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d11a      	bne.n	80160fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	685a      	ldr	r2, [r3, #4]
 80160cc:	4b0e      	ldr	r3, [pc, #56]	; (8016108 <vPortFree+0xb8>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	43db      	mvns	r3, r3
 80160d2:	401a      	ands	r2, r3
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80160d8:	f7fe fbb0 	bl	801483c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80160dc:	693b      	ldr	r3, [r7, #16]
 80160de:	685a      	ldr	r2, [r3, #4]
 80160e0:	4b0a      	ldr	r3, [pc, #40]	; (801610c <vPortFree+0xbc>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	4413      	add	r3, r2
 80160e6:	4a09      	ldr	r2, [pc, #36]	; (801610c <vPortFree+0xbc>)
 80160e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80160ea:	6938      	ldr	r0, [r7, #16]
 80160ec:	f000 f874 	bl	80161d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80160f0:	4b07      	ldr	r3, [pc, #28]	; (8016110 <vPortFree+0xc0>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	3301      	adds	r3, #1
 80160f6:	4a06      	ldr	r2, [pc, #24]	; (8016110 <vPortFree+0xc0>)
 80160f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80160fa:	f7fe fbad 	bl	8014858 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80160fe:	bf00      	nop
 8016100:	3718      	adds	r7, #24
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
 8016106:	bf00      	nop
 8016108:	24005a58 	.word	0x24005a58
 801610c:	24005a48 	.word	0x24005a48
 8016110:	24005a54 	.word	0x24005a54

08016114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016114:	b480      	push	{r7}
 8016116:	b085      	sub	sp, #20
 8016118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801611a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801611e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016120:	4b27      	ldr	r3, [pc, #156]	; (80161c0 <prvHeapInit+0xac>)
 8016122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	f003 0307 	and.w	r3, r3, #7
 801612a:	2b00      	cmp	r3, #0
 801612c:	d00c      	beq.n	8016148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	3307      	adds	r3, #7
 8016132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	f023 0307 	bic.w	r3, r3, #7
 801613a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801613c:	68ba      	ldr	r2, [r7, #8]
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	1ad3      	subs	r3, r2, r3
 8016142:	4a1f      	ldr	r2, [pc, #124]	; (80161c0 <prvHeapInit+0xac>)
 8016144:	4413      	add	r3, r2
 8016146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801614c:	4a1d      	ldr	r2, [pc, #116]	; (80161c4 <prvHeapInit+0xb0>)
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016152:	4b1c      	ldr	r3, [pc, #112]	; (80161c4 <prvHeapInit+0xb0>)
 8016154:	2200      	movs	r2, #0
 8016156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	68ba      	ldr	r2, [r7, #8]
 801615c:	4413      	add	r3, r2
 801615e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016160:	2208      	movs	r2, #8
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	1a9b      	subs	r3, r3, r2
 8016166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	f023 0307 	bic.w	r3, r3, #7
 801616e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	4a15      	ldr	r2, [pc, #84]	; (80161c8 <prvHeapInit+0xb4>)
 8016174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016176:	4b14      	ldr	r3, [pc, #80]	; (80161c8 <prvHeapInit+0xb4>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	2200      	movs	r2, #0
 801617c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801617e:	4b12      	ldr	r3, [pc, #72]	; (80161c8 <prvHeapInit+0xb4>)
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	2200      	movs	r2, #0
 8016184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	68fa      	ldr	r2, [r7, #12]
 801618e:	1ad2      	subs	r2, r2, r3
 8016190:	683b      	ldr	r3, [r7, #0]
 8016192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016194:	4b0c      	ldr	r3, [pc, #48]	; (80161c8 <prvHeapInit+0xb4>)
 8016196:	681a      	ldr	r2, [r3, #0]
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801619c:	683b      	ldr	r3, [r7, #0]
 801619e:	685b      	ldr	r3, [r3, #4]
 80161a0:	4a0a      	ldr	r2, [pc, #40]	; (80161cc <prvHeapInit+0xb8>)
 80161a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	4a09      	ldr	r2, [pc, #36]	; (80161d0 <prvHeapInit+0xbc>)
 80161aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80161ac:	4b09      	ldr	r3, [pc, #36]	; (80161d4 <prvHeapInit+0xc0>)
 80161ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80161b2:	601a      	str	r2, [r3, #0]
}
 80161b4:	bf00      	nop
 80161b6:	3714      	adds	r7, #20
 80161b8:	46bd      	mov	sp, r7
 80161ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161be:	4770      	bx	lr
 80161c0:	24001e3c 	.word	0x24001e3c
 80161c4:	24005a3c 	.word	0x24005a3c
 80161c8:	24005a44 	.word	0x24005a44
 80161cc:	24005a4c 	.word	0x24005a4c
 80161d0:	24005a48 	.word	0x24005a48
 80161d4:	24005a58 	.word	0x24005a58

080161d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80161d8:	b480      	push	{r7}
 80161da:	b085      	sub	sp, #20
 80161dc:	af00      	add	r7, sp, #0
 80161de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80161e0:	4b28      	ldr	r3, [pc, #160]	; (8016284 <prvInsertBlockIntoFreeList+0xac>)
 80161e2:	60fb      	str	r3, [r7, #12]
 80161e4:	e002      	b.n	80161ec <prvInsertBlockIntoFreeList+0x14>
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	60fb      	str	r3, [r7, #12]
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	687a      	ldr	r2, [r7, #4]
 80161f2:	429a      	cmp	r2, r3
 80161f4:	d8f7      	bhi.n	80161e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	685b      	ldr	r3, [r3, #4]
 80161fe:	68ba      	ldr	r2, [r7, #8]
 8016200:	4413      	add	r3, r2
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	429a      	cmp	r2, r3
 8016206:	d108      	bne.n	801621a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	685a      	ldr	r2, [r3, #4]
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	685b      	ldr	r3, [r3, #4]
 8016210:	441a      	add	r2, r3
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	685b      	ldr	r3, [r3, #4]
 8016222:	68ba      	ldr	r2, [r7, #8]
 8016224:	441a      	add	r2, r3
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	429a      	cmp	r2, r3
 801622c:	d118      	bne.n	8016260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	681a      	ldr	r2, [r3, #0]
 8016232:	4b15      	ldr	r3, [pc, #84]	; (8016288 <prvInsertBlockIntoFreeList+0xb0>)
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	429a      	cmp	r2, r3
 8016238:	d00d      	beq.n	8016256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	685a      	ldr	r2, [r3, #4]
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	441a      	add	r2, r3
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	681a      	ldr	r2, [r3, #0]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	601a      	str	r2, [r3, #0]
 8016254:	e008      	b.n	8016268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016256:	4b0c      	ldr	r3, [pc, #48]	; (8016288 <prvInsertBlockIntoFreeList+0xb0>)
 8016258:	681a      	ldr	r2, [r3, #0]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	601a      	str	r2, [r3, #0]
 801625e:	e003      	b.n	8016268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	681a      	ldr	r2, [r3, #0]
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016268:	68fa      	ldr	r2, [r7, #12]
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	429a      	cmp	r2, r3
 801626e:	d002      	beq.n	8016276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	687a      	ldr	r2, [r7, #4]
 8016274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016276:	bf00      	nop
 8016278:	3714      	adds	r7, #20
 801627a:	46bd      	mov	sp, r7
 801627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016280:	4770      	bx	lr
 8016282:	bf00      	nop
 8016284:	24005a3c 	.word	0x24005a3c
 8016288:	24005a44 	.word	0x24005a44

0801628c <__errno>:
 801628c:	4b01      	ldr	r3, [pc, #4]	; (8016294 <__errno+0x8>)
 801628e:	6818      	ldr	r0, [r3, #0]
 8016290:	4770      	bx	lr
 8016292:	bf00      	nop
 8016294:	240000a4 	.word	0x240000a4

08016298 <__libc_init_array>:
 8016298:	b570      	push	{r4, r5, r6, lr}
 801629a:	4d0d      	ldr	r5, [pc, #52]	; (80162d0 <__libc_init_array+0x38>)
 801629c:	4c0d      	ldr	r4, [pc, #52]	; (80162d4 <__libc_init_array+0x3c>)
 801629e:	1b64      	subs	r4, r4, r5
 80162a0:	10a4      	asrs	r4, r4, #2
 80162a2:	2600      	movs	r6, #0
 80162a4:	42a6      	cmp	r6, r4
 80162a6:	d109      	bne.n	80162bc <__libc_init_array+0x24>
 80162a8:	4d0b      	ldr	r5, [pc, #44]	; (80162d8 <__libc_init_array+0x40>)
 80162aa:	4c0c      	ldr	r4, [pc, #48]	; (80162dc <__libc_init_array+0x44>)
 80162ac:	f000 fd3c 	bl	8016d28 <_init>
 80162b0:	1b64      	subs	r4, r4, r5
 80162b2:	10a4      	asrs	r4, r4, #2
 80162b4:	2600      	movs	r6, #0
 80162b6:	42a6      	cmp	r6, r4
 80162b8:	d105      	bne.n	80162c6 <__libc_init_array+0x2e>
 80162ba:	bd70      	pop	{r4, r5, r6, pc}
 80162bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80162c0:	4798      	blx	r3
 80162c2:	3601      	adds	r6, #1
 80162c4:	e7ee      	b.n	80162a4 <__libc_init_array+0xc>
 80162c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80162ca:	4798      	blx	r3
 80162cc:	3601      	adds	r6, #1
 80162ce:	e7f2      	b.n	80162b6 <__libc_init_array+0x1e>
 80162d0:	08017190 	.word	0x08017190
 80162d4:	08017190 	.word	0x08017190
 80162d8:	08017190 	.word	0x08017190
 80162dc:	08017194 	.word	0x08017194

080162e0 <malloc>:
 80162e0:	4b02      	ldr	r3, [pc, #8]	; (80162ec <malloc+0xc>)
 80162e2:	4601      	mov	r1, r0
 80162e4:	6818      	ldr	r0, [r3, #0]
 80162e6:	f000 b88d 	b.w	8016404 <_malloc_r>
 80162ea:	bf00      	nop
 80162ec:	240000a4 	.word	0x240000a4

080162f0 <free>:
 80162f0:	4b02      	ldr	r3, [pc, #8]	; (80162fc <free+0xc>)
 80162f2:	4601      	mov	r1, r0
 80162f4:	6818      	ldr	r0, [r3, #0]
 80162f6:	f000 b819 	b.w	801632c <_free_r>
 80162fa:	bf00      	nop
 80162fc:	240000a4 	.word	0x240000a4

08016300 <memcpy>:
 8016300:	440a      	add	r2, r1
 8016302:	4291      	cmp	r1, r2
 8016304:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016308:	d100      	bne.n	801630c <memcpy+0xc>
 801630a:	4770      	bx	lr
 801630c:	b510      	push	{r4, lr}
 801630e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016316:	4291      	cmp	r1, r2
 8016318:	d1f9      	bne.n	801630e <memcpy+0xe>
 801631a:	bd10      	pop	{r4, pc}

0801631c <memset>:
 801631c:	4402      	add	r2, r0
 801631e:	4603      	mov	r3, r0
 8016320:	4293      	cmp	r3, r2
 8016322:	d100      	bne.n	8016326 <memset+0xa>
 8016324:	4770      	bx	lr
 8016326:	f803 1b01 	strb.w	r1, [r3], #1
 801632a:	e7f9      	b.n	8016320 <memset+0x4>

0801632c <_free_r>:
 801632c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801632e:	2900      	cmp	r1, #0
 8016330:	d044      	beq.n	80163bc <_free_r+0x90>
 8016332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016336:	9001      	str	r0, [sp, #4]
 8016338:	2b00      	cmp	r3, #0
 801633a:	f1a1 0404 	sub.w	r4, r1, #4
 801633e:	bfb8      	it	lt
 8016340:	18e4      	addlt	r4, r4, r3
 8016342:	f000 fc39 	bl	8016bb8 <__malloc_lock>
 8016346:	4a1e      	ldr	r2, [pc, #120]	; (80163c0 <_free_r+0x94>)
 8016348:	9801      	ldr	r0, [sp, #4]
 801634a:	6813      	ldr	r3, [r2, #0]
 801634c:	b933      	cbnz	r3, 801635c <_free_r+0x30>
 801634e:	6063      	str	r3, [r4, #4]
 8016350:	6014      	str	r4, [r2, #0]
 8016352:	b003      	add	sp, #12
 8016354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016358:	f000 bc34 	b.w	8016bc4 <__malloc_unlock>
 801635c:	42a3      	cmp	r3, r4
 801635e:	d908      	bls.n	8016372 <_free_r+0x46>
 8016360:	6825      	ldr	r5, [r4, #0]
 8016362:	1961      	adds	r1, r4, r5
 8016364:	428b      	cmp	r3, r1
 8016366:	bf01      	itttt	eq
 8016368:	6819      	ldreq	r1, [r3, #0]
 801636a:	685b      	ldreq	r3, [r3, #4]
 801636c:	1949      	addeq	r1, r1, r5
 801636e:	6021      	streq	r1, [r4, #0]
 8016370:	e7ed      	b.n	801634e <_free_r+0x22>
 8016372:	461a      	mov	r2, r3
 8016374:	685b      	ldr	r3, [r3, #4]
 8016376:	b10b      	cbz	r3, 801637c <_free_r+0x50>
 8016378:	42a3      	cmp	r3, r4
 801637a:	d9fa      	bls.n	8016372 <_free_r+0x46>
 801637c:	6811      	ldr	r1, [r2, #0]
 801637e:	1855      	adds	r5, r2, r1
 8016380:	42a5      	cmp	r5, r4
 8016382:	d10b      	bne.n	801639c <_free_r+0x70>
 8016384:	6824      	ldr	r4, [r4, #0]
 8016386:	4421      	add	r1, r4
 8016388:	1854      	adds	r4, r2, r1
 801638a:	42a3      	cmp	r3, r4
 801638c:	6011      	str	r1, [r2, #0]
 801638e:	d1e0      	bne.n	8016352 <_free_r+0x26>
 8016390:	681c      	ldr	r4, [r3, #0]
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	6053      	str	r3, [r2, #4]
 8016396:	4421      	add	r1, r4
 8016398:	6011      	str	r1, [r2, #0]
 801639a:	e7da      	b.n	8016352 <_free_r+0x26>
 801639c:	d902      	bls.n	80163a4 <_free_r+0x78>
 801639e:	230c      	movs	r3, #12
 80163a0:	6003      	str	r3, [r0, #0]
 80163a2:	e7d6      	b.n	8016352 <_free_r+0x26>
 80163a4:	6825      	ldr	r5, [r4, #0]
 80163a6:	1961      	adds	r1, r4, r5
 80163a8:	428b      	cmp	r3, r1
 80163aa:	bf04      	itt	eq
 80163ac:	6819      	ldreq	r1, [r3, #0]
 80163ae:	685b      	ldreq	r3, [r3, #4]
 80163b0:	6063      	str	r3, [r4, #4]
 80163b2:	bf04      	itt	eq
 80163b4:	1949      	addeq	r1, r1, r5
 80163b6:	6021      	streq	r1, [r4, #0]
 80163b8:	6054      	str	r4, [r2, #4]
 80163ba:	e7ca      	b.n	8016352 <_free_r+0x26>
 80163bc:	b003      	add	sp, #12
 80163be:	bd30      	pop	{r4, r5, pc}
 80163c0:	24005a5c 	.word	0x24005a5c

080163c4 <sbrk_aligned>:
 80163c4:	b570      	push	{r4, r5, r6, lr}
 80163c6:	4e0e      	ldr	r6, [pc, #56]	; (8016400 <sbrk_aligned+0x3c>)
 80163c8:	460c      	mov	r4, r1
 80163ca:	6831      	ldr	r1, [r6, #0]
 80163cc:	4605      	mov	r5, r0
 80163ce:	b911      	cbnz	r1, 80163d6 <sbrk_aligned+0x12>
 80163d0:	f000 f902 	bl	80165d8 <_sbrk_r>
 80163d4:	6030      	str	r0, [r6, #0]
 80163d6:	4621      	mov	r1, r4
 80163d8:	4628      	mov	r0, r5
 80163da:	f000 f8fd 	bl	80165d8 <_sbrk_r>
 80163de:	1c43      	adds	r3, r0, #1
 80163e0:	d00a      	beq.n	80163f8 <sbrk_aligned+0x34>
 80163e2:	1cc4      	adds	r4, r0, #3
 80163e4:	f024 0403 	bic.w	r4, r4, #3
 80163e8:	42a0      	cmp	r0, r4
 80163ea:	d007      	beq.n	80163fc <sbrk_aligned+0x38>
 80163ec:	1a21      	subs	r1, r4, r0
 80163ee:	4628      	mov	r0, r5
 80163f0:	f000 f8f2 	bl	80165d8 <_sbrk_r>
 80163f4:	3001      	adds	r0, #1
 80163f6:	d101      	bne.n	80163fc <sbrk_aligned+0x38>
 80163f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80163fc:	4620      	mov	r0, r4
 80163fe:	bd70      	pop	{r4, r5, r6, pc}
 8016400:	24005a60 	.word	0x24005a60

08016404 <_malloc_r>:
 8016404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016408:	1ccd      	adds	r5, r1, #3
 801640a:	f025 0503 	bic.w	r5, r5, #3
 801640e:	3508      	adds	r5, #8
 8016410:	2d0c      	cmp	r5, #12
 8016412:	bf38      	it	cc
 8016414:	250c      	movcc	r5, #12
 8016416:	2d00      	cmp	r5, #0
 8016418:	4607      	mov	r7, r0
 801641a:	db01      	blt.n	8016420 <_malloc_r+0x1c>
 801641c:	42a9      	cmp	r1, r5
 801641e:	d905      	bls.n	801642c <_malloc_r+0x28>
 8016420:	230c      	movs	r3, #12
 8016422:	603b      	str	r3, [r7, #0]
 8016424:	2600      	movs	r6, #0
 8016426:	4630      	mov	r0, r6
 8016428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801642c:	4e2e      	ldr	r6, [pc, #184]	; (80164e8 <_malloc_r+0xe4>)
 801642e:	f000 fbc3 	bl	8016bb8 <__malloc_lock>
 8016432:	6833      	ldr	r3, [r6, #0]
 8016434:	461c      	mov	r4, r3
 8016436:	bb34      	cbnz	r4, 8016486 <_malloc_r+0x82>
 8016438:	4629      	mov	r1, r5
 801643a:	4638      	mov	r0, r7
 801643c:	f7ff ffc2 	bl	80163c4 <sbrk_aligned>
 8016440:	1c43      	adds	r3, r0, #1
 8016442:	4604      	mov	r4, r0
 8016444:	d14d      	bne.n	80164e2 <_malloc_r+0xde>
 8016446:	6834      	ldr	r4, [r6, #0]
 8016448:	4626      	mov	r6, r4
 801644a:	2e00      	cmp	r6, #0
 801644c:	d140      	bne.n	80164d0 <_malloc_r+0xcc>
 801644e:	6823      	ldr	r3, [r4, #0]
 8016450:	4631      	mov	r1, r6
 8016452:	4638      	mov	r0, r7
 8016454:	eb04 0803 	add.w	r8, r4, r3
 8016458:	f000 f8be 	bl	80165d8 <_sbrk_r>
 801645c:	4580      	cmp	r8, r0
 801645e:	d13a      	bne.n	80164d6 <_malloc_r+0xd2>
 8016460:	6821      	ldr	r1, [r4, #0]
 8016462:	3503      	adds	r5, #3
 8016464:	1a6d      	subs	r5, r5, r1
 8016466:	f025 0503 	bic.w	r5, r5, #3
 801646a:	3508      	adds	r5, #8
 801646c:	2d0c      	cmp	r5, #12
 801646e:	bf38      	it	cc
 8016470:	250c      	movcc	r5, #12
 8016472:	4629      	mov	r1, r5
 8016474:	4638      	mov	r0, r7
 8016476:	f7ff ffa5 	bl	80163c4 <sbrk_aligned>
 801647a:	3001      	adds	r0, #1
 801647c:	d02b      	beq.n	80164d6 <_malloc_r+0xd2>
 801647e:	6823      	ldr	r3, [r4, #0]
 8016480:	442b      	add	r3, r5
 8016482:	6023      	str	r3, [r4, #0]
 8016484:	e00e      	b.n	80164a4 <_malloc_r+0xa0>
 8016486:	6822      	ldr	r2, [r4, #0]
 8016488:	1b52      	subs	r2, r2, r5
 801648a:	d41e      	bmi.n	80164ca <_malloc_r+0xc6>
 801648c:	2a0b      	cmp	r2, #11
 801648e:	d916      	bls.n	80164be <_malloc_r+0xba>
 8016490:	1961      	adds	r1, r4, r5
 8016492:	42a3      	cmp	r3, r4
 8016494:	6025      	str	r5, [r4, #0]
 8016496:	bf18      	it	ne
 8016498:	6059      	strne	r1, [r3, #4]
 801649a:	6863      	ldr	r3, [r4, #4]
 801649c:	bf08      	it	eq
 801649e:	6031      	streq	r1, [r6, #0]
 80164a0:	5162      	str	r2, [r4, r5]
 80164a2:	604b      	str	r3, [r1, #4]
 80164a4:	4638      	mov	r0, r7
 80164a6:	f104 060b 	add.w	r6, r4, #11
 80164aa:	f000 fb8b 	bl	8016bc4 <__malloc_unlock>
 80164ae:	f026 0607 	bic.w	r6, r6, #7
 80164b2:	1d23      	adds	r3, r4, #4
 80164b4:	1af2      	subs	r2, r6, r3
 80164b6:	d0b6      	beq.n	8016426 <_malloc_r+0x22>
 80164b8:	1b9b      	subs	r3, r3, r6
 80164ba:	50a3      	str	r3, [r4, r2]
 80164bc:	e7b3      	b.n	8016426 <_malloc_r+0x22>
 80164be:	6862      	ldr	r2, [r4, #4]
 80164c0:	42a3      	cmp	r3, r4
 80164c2:	bf0c      	ite	eq
 80164c4:	6032      	streq	r2, [r6, #0]
 80164c6:	605a      	strne	r2, [r3, #4]
 80164c8:	e7ec      	b.n	80164a4 <_malloc_r+0xa0>
 80164ca:	4623      	mov	r3, r4
 80164cc:	6864      	ldr	r4, [r4, #4]
 80164ce:	e7b2      	b.n	8016436 <_malloc_r+0x32>
 80164d0:	4634      	mov	r4, r6
 80164d2:	6876      	ldr	r6, [r6, #4]
 80164d4:	e7b9      	b.n	801644a <_malloc_r+0x46>
 80164d6:	230c      	movs	r3, #12
 80164d8:	603b      	str	r3, [r7, #0]
 80164da:	4638      	mov	r0, r7
 80164dc:	f000 fb72 	bl	8016bc4 <__malloc_unlock>
 80164e0:	e7a1      	b.n	8016426 <_malloc_r+0x22>
 80164e2:	6025      	str	r5, [r4, #0]
 80164e4:	e7de      	b.n	80164a4 <_malloc_r+0xa0>
 80164e6:	bf00      	nop
 80164e8:	24005a5c 	.word	0x24005a5c

080164ec <_puts_r>:
 80164ec:	b570      	push	{r4, r5, r6, lr}
 80164ee:	460e      	mov	r6, r1
 80164f0:	4605      	mov	r5, r0
 80164f2:	b118      	cbz	r0, 80164fc <_puts_r+0x10>
 80164f4:	6983      	ldr	r3, [r0, #24]
 80164f6:	b90b      	cbnz	r3, 80164fc <_puts_r+0x10>
 80164f8:	f000 fa58 	bl	80169ac <__sinit>
 80164fc:	69ab      	ldr	r3, [r5, #24]
 80164fe:	68ac      	ldr	r4, [r5, #8]
 8016500:	b913      	cbnz	r3, 8016508 <_puts_r+0x1c>
 8016502:	4628      	mov	r0, r5
 8016504:	f000 fa52 	bl	80169ac <__sinit>
 8016508:	4b2c      	ldr	r3, [pc, #176]	; (80165bc <_puts_r+0xd0>)
 801650a:	429c      	cmp	r4, r3
 801650c:	d120      	bne.n	8016550 <_puts_r+0x64>
 801650e:	686c      	ldr	r4, [r5, #4]
 8016510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016512:	07db      	lsls	r3, r3, #31
 8016514:	d405      	bmi.n	8016522 <_puts_r+0x36>
 8016516:	89a3      	ldrh	r3, [r4, #12]
 8016518:	0598      	lsls	r0, r3, #22
 801651a:	d402      	bmi.n	8016522 <_puts_r+0x36>
 801651c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801651e:	f000 fae3 	bl	8016ae8 <__retarget_lock_acquire_recursive>
 8016522:	89a3      	ldrh	r3, [r4, #12]
 8016524:	0719      	lsls	r1, r3, #28
 8016526:	d51d      	bpl.n	8016564 <_puts_r+0x78>
 8016528:	6923      	ldr	r3, [r4, #16]
 801652a:	b1db      	cbz	r3, 8016564 <_puts_r+0x78>
 801652c:	3e01      	subs	r6, #1
 801652e:	68a3      	ldr	r3, [r4, #8]
 8016530:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016534:	3b01      	subs	r3, #1
 8016536:	60a3      	str	r3, [r4, #8]
 8016538:	bb39      	cbnz	r1, 801658a <_puts_r+0x9e>
 801653a:	2b00      	cmp	r3, #0
 801653c:	da38      	bge.n	80165b0 <_puts_r+0xc4>
 801653e:	4622      	mov	r2, r4
 8016540:	210a      	movs	r1, #10
 8016542:	4628      	mov	r0, r5
 8016544:	f000 f858 	bl	80165f8 <__swbuf_r>
 8016548:	3001      	adds	r0, #1
 801654a:	d011      	beq.n	8016570 <_puts_r+0x84>
 801654c:	250a      	movs	r5, #10
 801654e:	e011      	b.n	8016574 <_puts_r+0x88>
 8016550:	4b1b      	ldr	r3, [pc, #108]	; (80165c0 <_puts_r+0xd4>)
 8016552:	429c      	cmp	r4, r3
 8016554:	d101      	bne.n	801655a <_puts_r+0x6e>
 8016556:	68ac      	ldr	r4, [r5, #8]
 8016558:	e7da      	b.n	8016510 <_puts_r+0x24>
 801655a:	4b1a      	ldr	r3, [pc, #104]	; (80165c4 <_puts_r+0xd8>)
 801655c:	429c      	cmp	r4, r3
 801655e:	bf08      	it	eq
 8016560:	68ec      	ldreq	r4, [r5, #12]
 8016562:	e7d5      	b.n	8016510 <_puts_r+0x24>
 8016564:	4621      	mov	r1, r4
 8016566:	4628      	mov	r0, r5
 8016568:	f000 f898 	bl	801669c <__swsetup_r>
 801656c:	2800      	cmp	r0, #0
 801656e:	d0dd      	beq.n	801652c <_puts_r+0x40>
 8016570:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016574:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016576:	07da      	lsls	r2, r3, #31
 8016578:	d405      	bmi.n	8016586 <_puts_r+0x9a>
 801657a:	89a3      	ldrh	r3, [r4, #12]
 801657c:	059b      	lsls	r3, r3, #22
 801657e:	d402      	bmi.n	8016586 <_puts_r+0x9a>
 8016580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016582:	f000 fab2 	bl	8016aea <__retarget_lock_release_recursive>
 8016586:	4628      	mov	r0, r5
 8016588:	bd70      	pop	{r4, r5, r6, pc}
 801658a:	2b00      	cmp	r3, #0
 801658c:	da04      	bge.n	8016598 <_puts_r+0xac>
 801658e:	69a2      	ldr	r2, [r4, #24]
 8016590:	429a      	cmp	r2, r3
 8016592:	dc06      	bgt.n	80165a2 <_puts_r+0xb6>
 8016594:	290a      	cmp	r1, #10
 8016596:	d004      	beq.n	80165a2 <_puts_r+0xb6>
 8016598:	6823      	ldr	r3, [r4, #0]
 801659a:	1c5a      	adds	r2, r3, #1
 801659c:	6022      	str	r2, [r4, #0]
 801659e:	7019      	strb	r1, [r3, #0]
 80165a0:	e7c5      	b.n	801652e <_puts_r+0x42>
 80165a2:	4622      	mov	r2, r4
 80165a4:	4628      	mov	r0, r5
 80165a6:	f000 f827 	bl	80165f8 <__swbuf_r>
 80165aa:	3001      	adds	r0, #1
 80165ac:	d1bf      	bne.n	801652e <_puts_r+0x42>
 80165ae:	e7df      	b.n	8016570 <_puts_r+0x84>
 80165b0:	6823      	ldr	r3, [r4, #0]
 80165b2:	250a      	movs	r5, #10
 80165b4:	1c5a      	adds	r2, r3, #1
 80165b6:	6022      	str	r2, [r4, #0]
 80165b8:	701d      	strb	r5, [r3, #0]
 80165ba:	e7db      	b.n	8016574 <_puts_r+0x88>
 80165bc:	08017148 	.word	0x08017148
 80165c0:	08017168 	.word	0x08017168
 80165c4:	08017128 	.word	0x08017128

080165c8 <puts>:
 80165c8:	4b02      	ldr	r3, [pc, #8]	; (80165d4 <puts+0xc>)
 80165ca:	4601      	mov	r1, r0
 80165cc:	6818      	ldr	r0, [r3, #0]
 80165ce:	f7ff bf8d 	b.w	80164ec <_puts_r>
 80165d2:	bf00      	nop
 80165d4:	240000a4 	.word	0x240000a4

080165d8 <_sbrk_r>:
 80165d8:	b538      	push	{r3, r4, r5, lr}
 80165da:	4d06      	ldr	r5, [pc, #24]	; (80165f4 <_sbrk_r+0x1c>)
 80165dc:	2300      	movs	r3, #0
 80165de:	4604      	mov	r4, r0
 80165e0:	4608      	mov	r0, r1
 80165e2:	602b      	str	r3, [r5, #0]
 80165e4:	f7ed fa0a 	bl	80039fc <_sbrk>
 80165e8:	1c43      	adds	r3, r0, #1
 80165ea:	d102      	bne.n	80165f2 <_sbrk_r+0x1a>
 80165ec:	682b      	ldr	r3, [r5, #0]
 80165ee:	b103      	cbz	r3, 80165f2 <_sbrk_r+0x1a>
 80165f0:	6023      	str	r3, [r4, #0]
 80165f2:	bd38      	pop	{r3, r4, r5, pc}
 80165f4:	24005a68 	.word	0x24005a68

080165f8 <__swbuf_r>:
 80165f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165fa:	460e      	mov	r6, r1
 80165fc:	4614      	mov	r4, r2
 80165fe:	4605      	mov	r5, r0
 8016600:	b118      	cbz	r0, 801660a <__swbuf_r+0x12>
 8016602:	6983      	ldr	r3, [r0, #24]
 8016604:	b90b      	cbnz	r3, 801660a <__swbuf_r+0x12>
 8016606:	f000 f9d1 	bl	80169ac <__sinit>
 801660a:	4b21      	ldr	r3, [pc, #132]	; (8016690 <__swbuf_r+0x98>)
 801660c:	429c      	cmp	r4, r3
 801660e:	d12b      	bne.n	8016668 <__swbuf_r+0x70>
 8016610:	686c      	ldr	r4, [r5, #4]
 8016612:	69a3      	ldr	r3, [r4, #24]
 8016614:	60a3      	str	r3, [r4, #8]
 8016616:	89a3      	ldrh	r3, [r4, #12]
 8016618:	071a      	lsls	r2, r3, #28
 801661a:	d52f      	bpl.n	801667c <__swbuf_r+0x84>
 801661c:	6923      	ldr	r3, [r4, #16]
 801661e:	b36b      	cbz	r3, 801667c <__swbuf_r+0x84>
 8016620:	6923      	ldr	r3, [r4, #16]
 8016622:	6820      	ldr	r0, [r4, #0]
 8016624:	1ac0      	subs	r0, r0, r3
 8016626:	6963      	ldr	r3, [r4, #20]
 8016628:	b2f6      	uxtb	r6, r6
 801662a:	4283      	cmp	r3, r0
 801662c:	4637      	mov	r7, r6
 801662e:	dc04      	bgt.n	801663a <__swbuf_r+0x42>
 8016630:	4621      	mov	r1, r4
 8016632:	4628      	mov	r0, r5
 8016634:	f000 f926 	bl	8016884 <_fflush_r>
 8016638:	bb30      	cbnz	r0, 8016688 <__swbuf_r+0x90>
 801663a:	68a3      	ldr	r3, [r4, #8]
 801663c:	3b01      	subs	r3, #1
 801663e:	60a3      	str	r3, [r4, #8]
 8016640:	6823      	ldr	r3, [r4, #0]
 8016642:	1c5a      	adds	r2, r3, #1
 8016644:	6022      	str	r2, [r4, #0]
 8016646:	701e      	strb	r6, [r3, #0]
 8016648:	6963      	ldr	r3, [r4, #20]
 801664a:	3001      	adds	r0, #1
 801664c:	4283      	cmp	r3, r0
 801664e:	d004      	beq.n	801665a <__swbuf_r+0x62>
 8016650:	89a3      	ldrh	r3, [r4, #12]
 8016652:	07db      	lsls	r3, r3, #31
 8016654:	d506      	bpl.n	8016664 <__swbuf_r+0x6c>
 8016656:	2e0a      	cmp	r6, #10
 8016658:	d104      	bne.n	8016664 <__swbuf_r+0x6c>
 801665a:	4621      	mov	r1, r4
 801665c:	4628      	mov	r0, r5
 801665e:	f000 f911 	bl	8016884 <_fflush_r>
 8016662:	b988      	cbnz	r0, 8016688 <__swbuf_r+0x90>
 8016664:	4638      	mov	r0, r7
 8016666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016668:	4b0a      	ldr	r3, [pc, #40]	; (8016694 <__swbuf_r+0x9c>)
 801666a:	429c      	cmp	r4, r3
 801666c:	d101      	bne.n	8016672 <__swbuf_r+0x7a>
 801666e:	68ac      	ldr	r4, [r5, #8]
 8016670:	e7cf      	b.n	8016612 <__swbuf_r+0x1a>
 8016672:	4b09      	ldr	r3, [pc, #36]	; (8016698 <__swbuf_r+0xa0>)
 8016674:	429c      	cmp	r4, r3
 8016676:	bf08      	it	eq
 8016678:	68ec      	ldreq	r4, [r5, #12]
 801667a:	e7ca      	b.n	8016612 <__swbuf_r+0x1a>
 801667c:	4621      	mov	r1, r4
 801667e:	4628      	mov	r0, r5
 8016680:	f000 f80c 	bl	801669c <__swsetup_r>
 8016684:	2800      	cmp	r0, #0
 8016686:	d0cb      	beq.n	8016620 <__swbuf_r+0x28>
 8016688:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801668c:	e7ea      	b.n	8016664 <__swbuf_r+0x6c>
 801668e:	bf00      	nop
 8016690:	08017148 	.word	0x08017148
 8016694:	08017168 	.word	0x08017168
 8016698:	08017128 	.word	0x08017128

0801669c <__swsetup_r>:
 801669c:	4b32      	ldr	r3, [pc, #200]	; (8016768 <__swsetup_r+0xcc>)
 801669e:	b570      	push	{r4, r5, r6, lr}
 80166a0:	681d      	ldr	r5, [r3, #0]
 80166a2:	4606      	mov	r6, r0
 80166a4:	460c      	mov	r4, r1
 80166a6:	b125      	cbz	r5, 80166b2 <__swsetup_r+0x16>
 80166a8:	69ab      	ldr	r3, [r5, #24]
 80166aa:	b913      	cbnz	r3, 80166b2 <__swsetup_r+0x16>
 80166ac:	4628      	mov	r0, r5
 80166ae:	f000 f97d 	bl	80169ac <__sinit>
 80166b2:	4b2e      	ldr	r3, [pc, #184]	; (801676c <__swsetup_r+0xd0>)
 80166b4:	429c      	cmp	r4, r3
 80166b6:	d10f      	bne.n	80166d8 <__swsetup_r+0x3c>
 80166b8:	686c      	ldr	r4, [r5, #4]
 80166ba:	89a3      	ldrh	r3, [r4, #12]
 80166bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80166c0:	0719      	lsls	r1, r3, #28
 80166c2:	d42c      	bmi.n	801671e <__swsetup_r+0x82>
 80166c4:	06dd      	lsls	r5, r3, #27
 80166c6:	d411      	bmi.n	80166ec <__swsetup_r+0x50>
 80166c8:	2309      	movs	r3, #9
 80166ca:	6033      	str	r3, [r6, #0]
 80166cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80166d0:	81a3      	strh	r3, [r4, #12]
 80166d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80166d6:	e03e      	b.n	8016756 <__swsetup_r+0xba>
 80166d8:	4b25      	ldr	r3, [pc, #148]	; (8016770 <__swsetup_r+0xd4>)
 80166da:	429c      	cmp	r4, r3
 80166dc:	d101      	bne.n	80166e2 <__swsetup_r+0x46>
 80166de:	68ac      	ldr	r4, [r5, #8]
 80166e0:	e7eb      	b.n	80166ba <__swsetup_r+0x1e>
 80166e2:	4b24      	ldr	r3, [pc, #144]	; (8016774 <__swsetup_r+0xd8>)
 80166e4:	429c      	cmp	r4, r3
 80166e6:	bf08      	it	eq
 80166e8:	68ec      	ldreq	r4, [r5, #12]
 80166ea:	e7e6      	b.n	80166ba <__swsetup_r+0x1e>
 80166ec:	0758      	lsls	r0, r3, #29
 80166ee:	d512      	bpl.n	8016716 <__swsetup_r+0x7a>
 80166f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166f2:	b141      	cbz	r1, 8016706 <__swsetup_r+0x6a>
 80166f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166f8:	4299      	cmp	r1, r3
 80166fa:	d002      	beq.n	8016702 <__swsetup_r+0x66>
 80166fc:	4630      	mov	r0, r6
 80166fe:	f7ff fe15 	bl	801632c <_free_r>
 8016702:	2300      	movs	r3, #0
 8016704:	6363      	str	r3, [r4, #52]	; 0x34
 8016706:	89a3      	ldrh	r3, [r4, #12]
 8016708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801670c:	81a3      	strh	r3, [r4, #12]
 801670e:	2300      	movs	r3, #0
 8016710:	6063      	str	r3, [r4, #4]
 8016712:	6923      	ldr	r3, [r4, #16]
 8016714:	6023      	str	r3, [r4, #0]
 8016716:	89a3      	ldrh	r3, [r4, #12]
 8016718:	f043 0308 	orr.w	r3, r3, #8
 801671c:	81a3      	strh	r3, [r4, #12]
 801671e:	6923      	ldr	r3, [r4, #16]
 8016720:	b94b      	cbnz	r3, 8016736 <__swsetup_r+0x9a>
 8016722:	89a3      	ldrh	r3, [r4, #12]
 8016724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801672c:	d003      	beq.n	8016736 <__swsetup_r+0x9a>
 801672e:	4621      	mov	r1, r4
 8016730:	4630      	mov	r0, r6
 8016732:	f000 fa01 	bl	8016b38 <__smakebuf_r>
 8016736:	89a0      	ldrh	r0, [r4, #12]
 8016738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801673c:	f010 0301 	ands.w	r3, r0, #1
 8016740:	d00a      	beq.n	8016758 <__swsetup_r+0xbc>
 8016742:	2300      	movs	r3, #0
 8016744:	60a3      	str	r3, [r4, #8]
 8016746:	6963      	ldr	r3, [r4, #20]
 8016748:	425b      	negs	r3, r3
 801674a:	61a3      	str	r3, [r4, #24]
 801674c:	6923      	ldr	r3, [r4, #16]
 801674e:	b943      	cbnz	r3, 8016762 <__swsetup_r+0xc6>
 8016750:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016754:	d1ba      	bne.n	80166cc <__swsetup_r+0x30>
 8016756:	bd70      	pop	{r4, r5, r6, pc}
 8016758:	0781      	lsls	r1, r0, #30
 801675a:	bf58      	it	pl
 801675c:	6963      	ldrpl	r3, [r4, #20]
 801675e:	60a3      	str	r3, [r4, #8]
 8016760:	e7f4      	b.n	801674c <__swsetup_r+0xb0>
 8016762:	2000      	movs	r0, #0
 8016764:	e7f7      	b.n	8016756 <__swsetup_r+0xba>
 8016766:	bf00      	nop
 8016768:	240000a4 	.word	0x240000a4
 801676c:	08017148 	.word	0x08017148
 8016770:	08017168 	.word	0x08017168
 8016774:	08017128 	.word	0x08017128

08016778 <__sflush_r>:
 8016778:	898a      	ldrh	r2, [r1, #12]
 801677a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801677e:	4605      	mov	r5, r0
 8016780:	0710      	lsls	r0, r2, #28
 8016782:	460c      	mov	r4, r1
 8016784:	d458      	bmi.n	8016838 <__sflush_r+0xc0>
 8016786:	684b      	ldr	r3, [r1, #4]
 8016788:	2b00      	cmp	r3, #0
 801678a:	dc05      	bgt.n	8016798 <__sflush_r+0x20>
 801678c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801678e:	2b00      	cmp	r3, #0
 8016790:	dc02      	bgt.n	8016798 <__sflush_r+0x20>
 8016792:	2000      	movs	r0, #0
 8016794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801679a:	2e00      	cmp	r6, #0
 801679c:	d0f9      	beq.n	8016792 <__sflush_r+0x1a>
 801679e:	2300      	movs	r3, #0
 80167a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80167a4:	682f      	ldr	r7, [r5, #0]
 80167a6:	602b      	str	r3, [r5, #0]
 80167a8:	d032      	beq.n	8016810 <__sflush_r+0x98>
 80167aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80167ac:	89a3      	ldrh	r3, [r4, #12]
 80167ae:	075a      	lsls	r2, r3, #29
 80167b0:	d505      	bpl.n	80167be <__sflush_r+0x46>
 80167b2:	6863      	ldr	r3, [r4, #4]
 80167b4:	1ac0      	subs	r0, r0, r3
 80167b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80167b8:	b10b      	cbz	r3, 80167be <__sflush_r+0x46>
 80167ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80167bc:	1ac0      	subs	r0, r0, r3
 80167be:	2300      	movs	r3, #0
 80167c0:	4602      	mov	r2, r0
 80167c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167c4:	6a21      	ldr	r1, [r4, #32]
 80167c6:	4628      	mov	r0, r5
 80167c8:	47b0      	blx	r6
 80167ca:	1c43      	adds	r3, r0, #1
 80167cc:	89a3      	ldrh	r3, [r4, #12]
 80167ce:	d106      	bne.n	80167de <__sflush_r+0x66>
 80167d0:	6829      	ldr	r1, [r5, #0]
 80167d2:	291d      	cmp	r1, #29
 80167d4:	d82c      	bhi.n	8016830 <__sflush_r+0xb8>
 80167d6:	4a2a      	ldr	r2, [pc, #168]	; (8016880 <__sflush_r+0x108>)
 80167d8:	40ca      	lsrs	r2, r1
 80167da:	07d6      	lsls	r6, r2, #31
 80167dc:	d528      	bpl.n	8016830 <__sflush_r+0xb8>
 80167de:	2200      	movs	r2, #0
 80167e0:	6062      	str	r2, [r4, #4]
 80167e2:	04d9      	lsls	r1, r3, #19
 80167e4:	6922      	ldr	r2, [r4, #16]
 80167e6:	6022      	str	r2, [r4, #0]
 80167e8:	d504      	bpl.n	80167f4 <__sflush_r+0x7c>
 80167ea:	1c42      	adds	r2, r0, #1
 80167ec:	d101      	bne.n	80167f2 <__sflush_r+0x7a>
 80167ee:	682b      	ldr	r3, [r5, #0]
 80167f0:	b903      	cbnz	r3, 80167f4 <__sflush_r+0x7c>
 80167f2:	6560      	str	r0, [r4, #84]	; 0x54
 80167f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167f6:	602f      	str	r7, [r5, #0]
 80167f8:	2900      	cmp	r1, #0
 80167fa:	d0ca      	beq.n	8016792 <__sflush_r+0x1a>
 80167fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016800:	4299      	cmp	r1, r3
 8016802:	d002      	beq.n	801680a <__sflush_r+0x92>
 8016804:	4628      	mov	r0, r5
 8016806:	f7ff fd91 	bl	801632c <_free_r>
 801680a:	2000      	movs	r0, #0
 801680c:	6360      	str	r0, [r4, #52]	; 0x34
 801680e:	e7c1      	b.n	8016794 <__sflush_r+0x1c>
 8016810:	6a21      	ldr	r1, [r4, #32]
 8016812:	2301      	movs	r3, #1
 8016814:	4628      	mov	r0, r5
 8016816:	47b0      	blx	r6
 8016818:	1c41      	adds	r1, r0, #1
 801681a:	d1c7      	bne.n	80167ac <__sflush_r+0x34>
 801681c:	682b      	ldr	r3, [r5, #0]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d0c4      	beq.n	80167ac <__sflush_r+0x34>
 8016822:	2b1d      	cmp	r3, #29
 8016824:	d001      	beq.n	801682a <__sflush_r+0xb2>
 8016826:	2b16      	cmp	r3, #22
 8016828:	d101      	bne.n	801682e <__sflush_r+0xb6>
 801682a:	602f      	str	r7, [r5, #0]
 801682c:	e7b1      	b.n	8016792 <__sflush_r+0x1a>
 801682e:	89a3      	ldrh	r3, [r4, #12]
 8016830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016834:	81a3      	strh	r3, [r4, #12]
 8016836:	e7ad      	b.n	8016794 <__sflush_r+0x1c>
 8016838:	690f      	ldr	r7, [r1, #16]
 801683a:	2f00      	cmp	r7, #0
 801683c:	d0a9      	beq.n	8016792 <__sflush_r+0x1a>
 801683e:	0793      	lsls	r3, r2, #30
 8016840:	680e      	ldr	r6, [r1, #0]
 8016842:	bf08      	it	eq
 8016844:	694b      	ldreq	r3, [r1, #20]
 8016846:	600f      	str	r7, [r1, #0]
 8016848:	bf18      	it	ne
 801684a:	2300      	movne	r3, #0
 801684c:	eba6 0807 	sub.w	r8, r6, r7
 8016850:	608b      	str	r3, [r1, #8]
 8016852:	f1b8 0f00 	cmp.w	r8, #0
 8016856:	dd9c      	ble.n	8016792 <__sflush_r+0x1a>
 8016858:	6a21      	ldr	r1, [r4, #32]
 801685a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801685c:	4643      	mov	r3, r8
 801685e:	463a      	mov	r2, r7
 8016860:	4628      	mov	r0, r5
 8016862:	47b0      	blx	r6
 8016864:	2800      	cmp	r0, #0
 8016866:	dc06      	bgt.n	8016876 <__sflush_r+0xfe>
 8016868:	89a3      	ldrh	r3, [r4, #12]
 801686a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801686e:	81a3      	strh	r3, [r4, #12]
 8016870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016874:	e78e      	b.n	8016794 <__sflush_r+0x1c>
 8016876:	4407      	add	r7, r0
 8016878:	eba8 0800 	sub.w	r8, r8, r0
 801687c:	e7e9      	b.n	8016852 <__sflush_r+0xda>
 801687e:	bf00      	nop
 8016880:	20400001 	.word	0x20400001

08016884 <_fflush_r>:
 8016884:	b538      	push	{r3, r4, r5, lr}
 8016886:	690b      	ldr	r3, [r1, #16]
 8016888:	4605      	mov	r5, r0
 801688a:	460c      	mov	r4, r1
 801688c:	b913      	cbnz	r3, 8016894 <_fflush_r+0x10>
 801688e:	2500      	movs	r5, #0
 8016890:	4628      	mov	r0, r5
 8016892:	bd38      	pop	{r3, r4, r5, pc}
 8016894:	b118      	cbz	r0, 801689e <_fflush_r+0x1a>
 8016896:	6983      	ldr	r3, [r0, #24]
 8016898:	b90b      	cbnz	r3, 801689e <_fflush_r+0x1a>
 801689a:	f000 f887 	bl	80169ac <__sinit>
 801689e:	4b14      	ldr	r3, [pc, #80]	; (80168f0 <_fflush_r+0x6c>)
 80168a0:	429c      	cmp	r4, r3
 80168a2:	d11b      	bne.n	80168dc <_fflush_r+0x58>
 80168a4:	686c      	ldr	r4, [r5, #4]
 80168a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d0ef      	beq.n	801688e <_fflush_r+0xa>
 80168ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80168b0:	07d0      	lsls	r0, r2, #31
 80168b2:	d404      	bmi.n	80168be <_fflush_r+0x3a>
 80168b4:	0599      	lsls	r1, r3, #22
 80168b6:	d402      	bmi.n	80168be <_fflush_r+0x3a>
 80168b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168ba:	f000 f915 	bl	8016ae8 <__retarget_lock_acquire_recursive>
 80168be:	4628      	mov	r0, r5
 80168c0:	4621      	mov	r1, r4
 80168c2:	f7ff ff59 	bl	8016778 <__sflush_r>
 80168c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168c8:	07da      	lsls	r2, r3, #31
 80168ca:	4605      	mov	r5, r0
 80168cc:	d4e0      	bmi.n	8016890 <_fflush_r+0xc>
 80168ce:	89a3      	ldrh	r3, [r4, #12]
 80168d0:	059b      	lsls	r3, r3, #22
 80168d2:	d4dd      	bmi.n	8016890 <_fflush_r+0xc>
 80168d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168d6:	f000 f908 	bl	8016aea <__retarget_lock_release_recursive>
 80168da:	e7d9      	b.n	8016890 <_fflush_r+0xc>
 80168dc:	4b05      	ldr	r3, [pc, #20]	; (80168f4 <_fflush_r+0x70>)
 80168de:	429c      	cmp	r4, r3
 80168e0:	d101      	bne.n	80168e6 <_fflush_r+0x62>
 80168e2:	68ac      	ldr	r4, [r5, #8]
 80168e4:	e7df      	b.n	80168a6 <_fflush_r+0x22>
 80168e6:	4b04      	ldr	r3, [pc, #16]	; (80168f8 <_fflush_r+0x74>)
 80168e8:	429c      	cmp	r4, r3
 80168ea:	bf08      	it	eq
 80168ec:	68ec      	ldreq	r4, [r5, #12]
 80168ee:	e7da      	b.n	80168a6 <_fflush_r+0x22>
 80168f0:	08017148 	.word	0x08017148
 80168f4:	08017168 	.word	0x08017168
 80168f8:	08017128 	.word	0x08017128

080168fc <std>:
 80168fc:	2300      	movs	r3, #0
 80168fe:	b510      	push	{r4, lr}
 8016900:	4604      	mov	r4, r0
 8016902:	e9c0 3300 	strd	r3, r3, [r0]
 8016906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801690a:	6083      	str	r3, [r0, #8]
 801690c:	8181      	strh	r1, [r0, #12]
 801690e:	6643      	str	r3, [r0, #100]	; 0x64
 8016910:	81c2      	strh	r2, [r0, #14]
 8016912:	6183      	str	r3, [r0, #24]
 8016914:	4619      	mov	r1, r3
 8016916:	2208      	movs	r2, #8
 8016918:	305c      	adds	r0, #92	; 0x5c
 801691a:	f7ff fcff 	bl	801631c <memset>
 801691e:	4b05      	ldr	r3, [pc, #20]	; (8016934 <std+0x38>)
 8016920:	6263      	str	r3, [r4, #36]	; 0x24
 8016922:	4b05      	ldr	r3, [pc, #20]	; (8016938 <std+0x3c>)
 8016924:	62a3      	str	r3, [r4, #40]	; 0x28
 8016926:	4b05      	ldr	r3, [pc, #20]	; (801693c <std+0x40>)
 8016928:	62e3      	str	r3, [r4, #44]	; 0x2c
 801692a:	4b05      	ldr	r3, [pc, #20]	; (8016940 <std+0x44>)
 801692c:	6224      	str	r4, [r4, #32]
 801692e:	6323      	str	r3, [r4, #48]	; 0x30
 8016930:	bd10      	pop	{r4, pc}
 8016932:	bf00      	nop
 8016934:	08016bd1 	.word	0x08016bd1
 8016938:	08016bf3 	.word	0x08016bf3
 801693c:	08016c2b 	.word	0x08016c2b
 8016940:	08016c4f 	.word	0x08016c4f

08016944 <_cleanup_r>:
 8016944:	4901      	ldr	r1, [pc, #4]	; (801694c <_cleanup_r+0x8>)
 8016946:	f000 b8af 	b.w	8016aa8 <_fwalk_reent>
 801694a:	bf00      	nop
 801694c:	08016885 	.word	0x08016885

08016950 <__sfmoreglue>:
 8016950:	b570      	push	{r4, r5, r6, lr}
 8016952:	2268      	movs	r2, #104	; 0x68
 8016954:	1e4d      	subs	r5, r1, #1
 8016956:	4355      	muls	r5, r2
 8016958:	460e      	mov	r6, r1
 801695a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801695e:	f7ff fd51 	bl	8016404 <_malloc_r>
 8016962:	4604      	mov	r4, r0
 8016964:	b140      	cbz	r0, 8016978 <__sfmoreglue+0x28>
 8016966:	2100      	movs	r1, #0
 8016968:	e9c0 1600 	strd	r1, r6, [r0]
 801696c:	300c      	adds	r0, #12
 801696e:	60a0      	str	r0, [r4, #8]
 8016970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016974:	f7ff fcd2 	bl	801631c <memset>
 8016978:	4620      	mov	r0, r4
 801697a:	bd70      	pop	{r4, r5, r6, pc}

0801697c <__sfp_lock_acquire>:
 801697c:	4801      	ldr	r0, [pc, #4]	; (8016984 <__sfp_lock_acquire+0x8>)
 801697e:	f000 b8b3 	b.w	8016ae8 <__retarget_lock_acquire_recursive>
 8016982:	bf00      	nop
 8016984:	24005a65 	.word	0x24005a65

08016988 <__sfp_lock_release>:
 8016988:	4801      	ldr	r0, [pc, #4]	; (8016990 <__sfp_lock_release+0x8>)
 801698a:	f000 b8ae 	b.w	8016aea <__retarget_lock_release_recursive>
 801698e:	bf00      	nop
 8016990:	24005a65 	.word	0x24005a65

08016994 <__sinit_lock_acquire>:
 8016994:	4801      	ldr	r0, [pc, #4]	; (801699c <__sinit_lock_acquire+0x8>)
 8016996:	f000 b8a7 	b.w	8016ae8 <__retarget_lock_acquire_recursive>
 801699a:	bf00      	nop
 801699c:	24005a66 	.word	0x24005a66

080169a0 <__sinit_lock_release>:
 80169a0:	4801      	ldr	r0, [pc, #4]	; (80169a8 <__sinit_lock_release+0x8>)
 80169a2:	f000 b8a2 	b.w	8016aea <__retarget_lock_release_recursive>
 80169a6:	bf00      	nop
 80169a8:	24005a66 	.word	0x24005a66

080169ac <__sinit>:
 80169ac:	b510      	push	{r4, lr}
 80169ae:	4604      	mov	r4, r0
 80169b0:	f7ff fff0 	bl	8016994 <__sinit_lock_acquire>
 80169b4:	69a3      	ldr	r3, [r4, #24]
 80169b6:	b11b      	cbz	r3, 80169c0 <__sinit+0x14>
 80169b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169bc:	f7ff bff0 	b.w	80169a0 <__sinit_lock_release>
 80169c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80169c4:	6523      	str	r3, [r4, #80]	; 0x50
 80169c6:	4b13      	ldr	r3, [pc, #76]	; (8016a14 <__sinit+0x68>)
 80169c8:	4a13      	ldr	r2, [pc, #76]	; (8016a18 <__sinit+0x6c>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80169ce:	42a3      	cmp	r3, r4
 80169d0:	bf04      	itt	eq
 80169d2:	2301      	moveq	r3, #1
 80169d4:	61a3      	streq	r3, [r4, #24]
 80169d6:	4620      	mov	r0, r4
 80169d8:	f000 f820 	bl	8016a1c <__sfp>
 80169dc:	6060      	str	r0, [r4, #4]
 80169de:	4620      	mov	r0, r4
 80169e0:	f000 f81c 	bl	8016a1c <__sfp>
 80169e4:	60a0      	str	r0, [r4, #8]
 80169e6:	4620      	mov	r0, r4
 80169e8:	f000 f818 	bl	8016a1c <__sfp>
 80169ec:	2200      	movs	r2, #0
 80169ee:	60e0      	str	r0, [r4, #12]
 80169f0:	2104      	movs	r1, #4
 80169f2:	6860      	ldr	r0, [r4, #4]
 80169f4:	f7ff ff82 	bl	80168fc <std>
 80169f8:	68a0      	ldr	r0, [r4, #8]
 80169fa:	2201      	movs	r2, #1
 80169fc:	2109      	movs	r1, #9
 80169fe:	f7ff ff7d 	bl	80168fc <std>
 8016a02:	68e0      	ldr	r0, [r4, #12]
 8016a04:	2202      	movs	r2, #2
 8016a06:	2112      	movs	r1, #18
 8016a08:	f7ff ff78 	bl	80168fc <std>
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	61a3      	str	r3, [r4, #24]
 8016a10:	e7d2      	b.n	80169b8 <__sinit+0xc>
 8016a12:	bf00      	nop
 8016a14:	08017124 	.word	0x08017124
 8016a18:	08016945 	.word	0x08016945

08016a1c <__sfp>:
 8016a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a1e:	4607      	mov	r7, r0
 8016a20:	f7ff ffac 	bl	801697c <__sfp_lock_acquire>
 8016a24:	4b1e      	ldr	r3, [pc, #120]	; (8016aa0 <__sfp+0x84>)
 8016a26:	681e      	ldr	r6, [r3, #0]
 8016a28:	69b3      	ldr	r3, [r6, #24]
 8016a2a:	b913      	cbnz	r3, 8016a32 <__sfp+0x16>
 8016a2c:	4630      	mov	r0, r6
 8016a2e:	f7ff ffbd 	bl	80169ac <__sinit>
 8016a32:	3648      	adds	r6, #72	; 0x48
 8016a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016a38:	3b01      	subs	r3, #1
 8016a3a:	d503      	bpl.n	8016a44 <__sfp+0x28>
 8016a3c:	6833      	ldr	r3, [r6, #0]
 8016a3e:	b30b      	cbz	r3, 8016a84 <__sfp+0x68>
 8016a40:	6836      	ldr	r6, [r6, #0]
 8016a42:	e7f7      	b.n	8016a34 <__sfp+0x18>
 8016a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016a48:	b9d5      	cbnz	r5, 8016a80 <__sfp+0x64>
 8016a4a:	4b16      	ldr	r3, [pc, #88]	; (8016aa4 <__sfp+0x88>)
 8016a4c:	60e3      	str	r3, [r4, #12]
 8016a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016a52:	6665      	str	r5, [r4, #100]	; 0x64
 8016a54:	f000 f847 	bl	8016ae6 <__retarget_lock_init_recursive>
 8016a58:	f7ff ff96 	bl	8016988 <__sfp_lock_release>
 8016a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016a64:	6025      	str	r5, [r4, #0]
 8016a66:	61a5      	str	r5, [r4, #24]
 8016a68:	2208      	movs	r2, #8
 8016a6a:	4629      	mov	r1, r5
 8016a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016a70:	f7ff fc54 	bl	801631c <memset>
 8016a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a80:	3468      	adds	r4, #104	; 0x68
 8016a82:	e7d9      	b.n	8016a38 <__sfp+0x1c>
 8016a84:	2104      	movs	r1, #4
 8016a86:	4638      	mov	r0, r7
 8016a88:	f7ff ff62 	bl	8016950 <__sfmoreglue>
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	6030      	str	r0, [r6, #0]
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d1d5      	bne.n	8016a40 <__sfp+0x24>
 8016a94:	f7ff ff78 	bl	8016988 <__sfp_lock_release>
 8016a98:	230c      	movs	r3, #12
 8016a9a:	603b      	str	r3, [r7, #0]
 8016a9c:	e7ee      	b.n	8016a7c <__sfp+0x60>
 8016a9e:	bf00      	nop
 8016aa0:	08017124 	.word	0x08017124
 8016aa4:	ffff0001 	.word	0xffff0001

08016aa8 <_fwalk_reent>:
 8016aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016aac:	4606      	mov	r6, r0
 8016aae:	4688      	mov	r8, r1
 8016ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016ab4:	2700      	movs	r7, #0
 8016ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016aba:	f1b9 0901 	subs.w	r9, r9, #1
 8016abe:	d505      	bpl.n	8016acc <_fwalk_reent+0x24>
 8016ac0:	6824      	ldr	r4, [r4, #0]
 8016ac2:	2c00      	cmp	r4, #0
 8016ac4:	d1f7      	bne.n	8016ab6 <_fwalk_reent+0xe>
 8016ac6:	4638      	mov	r0, r7
 8016ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016acc:	89ab      	ldrh	r3, [r5, #12]
 8016ace:	2b01      	cmp	r3, #1
 8016ad0:	d907      	bls.n	8016ae2 <_fwalk_reent+0x3a>
 8016ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	d003      	beq.n	8016ae2 <_fwalk_reent+0x3a>
 8016ada:	4629      	mov	r1, r5
 8016adc:	4630      	mov	r0, r6
 8016ade:	47c0      	blx	r8
 8016ae0:	4307      	orrs	r7, r0
 8016ae2:	3568      	adds	r5, #104	; 0x68
 8016ae4:	e7e9      	b.n	8016aba <_fwalk_reent+0x12>

08016ae6 <__retarget_lock_init_recursive>:
 8016ae6:	4770      	bx	lr

08016ae8 <__retarget_lock_acquire_recursive>:
 8016ae8:	4770      	bx	lr

08016aea <__retarget_lock_release_recursive>:
 8016aea:	4770      	bx	lr

08016aec <__swhatbuf_r>:
 8016aec:	b570      	push	{r4, r5, r6, lr}
 8016aee:	460e      	mov	r6, r1
 8016af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016af4:	2900      	cmp	r1, #0
 8016af6:	b096      	sub	sp, #88	; 0x58
 8016af8:	4614      	mov	r4, r2
 8016afa:	461d      	mov	r5, r3
 8016afc:	da08      	bge.n	8016b10 <__swhatbuf_r+0x24>
 8016afe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016b02:	2200      	movs	r2, #0
 8016b04:	602a      	str	r2, [r5, #0]
 8016b06:	061a      	lsls	r2, r3, #24
 8016b08:	d410      	bmi.n	8016b2c <__swhatbuf_r+0x40>
 8016b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b0e:	e00e      	b.n	8016b2e <__swhatbuf_r+0x42>
 8016b10:	466a      	mov	r2, sp
 8016b12:	f000 f8c3 	bl	8016c9c <_fstat_r>
 8016b16:	2800      	cmp	r0, #0
 8016b18:	dbf1      	blt.n	8016afe <__swhatbuf_r+0x12>
 8016b1a:	9a01      	ldr	r2, [sp, #4]
 8016b1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b24:	425a      	negs	r2, r3
 8016b26:	415a      	adcs	r2, r3
 8016b28:	602a      	str	r2, [r5, #0]
 8016b2a:	e7ee      	b.n	8016b0a <__swhatbuf_r+0x1e>
 8016b2c:	2340      	movs	r3, #64	; 0x40
 8016b2e:	2000      	movs	r0, #0
 8016b30:	6023      	str	r3, [r4, #0]
 8016b32:	b016      	add	sp, #88	; 0x58
 8016b34:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b38 <__smakebuf_r>:
 8016b38:	898b      	ldrh	r3, [r1, #12]
 8016b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b3c:	079d      	lsls	r5, r3, #30
 8016b3e:	4606      	mov	r6, r0
 8016b40:	460c      	mov	r4, r1
 8016b42:	d507      	bpl.n	8016b54 <__smakebuf_r+0x1c>
 8016b44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b48:	6023      	str	r3, [r4, #0]
 8016b4a:	6123      	str	r3, [r4, #16]
 8016b4c:	2301      	movs	r3, #1
 8016b4e:	6163      	str	r3, [r4, #20]
 8016b50:	b002      	add	sp, #8
 8016b52:	bd70      	pop	{r4, r5, r6, pc}
 8016b54:	ab01      	add	r3, sp, #4
 8016b56:	466a      	mov	r2, sp
 8016b58:	f7ff ffc8 	bl	8016aec <__swhatbuf_r>
 8016b5c:	9900      	ldr	r1, [sp, #0]
 8016b5e:	4605      	mov	r5, r0
 8016b60:	4630      	mov	r0, r6
 8016b62:	f7ff fc4f 	bl	8016404 <_malloc_r>
 8016b66:	b948      	cbnz	r0, 8016b7c <__smakebuf_r+0x44>
 8016b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b6c:	059a      	lsls	r2, r3, #22
 8016b6e:	d4ef      	bmi.n	8016b50 <__smakebuf_r+0x18>
 8016b70:	f023 0303 	bic.w	r3, r3, #3
 8016b74:	f043 0302 	orr.w	r3, r3, #2
 8016b78:	81a3      	strh	r3, [r4, #12]
 8016b7a:	e7e3      	b.n	8016b44 <__smakebuf_r+0xc>
 8016b7c:	4b0d      	ldr	r3, [pc, #52]	; (8016bb4 <__smakebuf_r+0x7c>)
 8016b7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016b80:	89a3      	ldrh	r3, [r4, #12]
 8016b82:	6020      	str	r0, [r4, #0]
 8016b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b88:	81a3      	strh	r3, [r4, #12]
 8016b8a:	9b00      	ldr	r3, [sp, #0]
 8016b8c:	6163      	str	r3, [r4, #20]
 8016b8e:	9b01      	ldr	r3, [sp, #4]
 8016b90:	6120      	str	r0, [r4, #16]
 8016b92:	b15b      	cbz	r3, 8016bac <__smakebuf_r+0x74>
 8016b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b98:	4630      	mov	r0, r6
 8016b9a:	f000 f891 	bl	8016cc0 <_isatty_r>
 8016b9e:	b128      	cbz	r0, 8016bac <__smakebuf_r+0x74>
 8016ba0:	89a3      	ldrh	r3, [r4, #12]
 8016ba2:	f023 0303 	bic.w	r3, r3, #3
 8016ba6:	f043 0301 	orr.w	r3, r3, #1
 8016baa:	81a3      	strh	r3, [r4, #12]
 8016bac:	89a0      	ldrh	r0, [r4, #12]
 8016bae:	4305      	orrs	r5, r0
 8016bb0:	81a5      	strh	r5, [r4, #12]
 8016bb2:	e7cd      	b.n	8016b50 <__smakebuf_r+0x18>
 8016bb4:	08016945 	.word	0x08016945

08016bb8 <__malloc_lock>:
 8016bb8:	4801      	ldr	r0, [pc, #4]	; (8016bc0 <__malloc_lock+0x8>)
 8016bba:	f7ff bf95 	b.w	8016ae8 <__retarget_lock_acquire_recursive>
 8016bbe:	bf00      	nop
 8016bc0:	24005a64 	.word	0x24005a64

08016bc4 <__malloc_unlock>:
 8016bc4:	4801      	ldr	r0, [pc, #4]	; (8016bcc <__malloc_unlock+0x8>)
 8016bc6:	f7ff bf90 	b.w	8016aea <__retarget_lock_release_recursive>
 8016bca:	bf00      	nop
 8016bcc:	24005a64 	.word	0x24005a64

08016bd0 <__sread>:
 8016bd0:	b510      	push	{r4, lr}
 8016bd2:	460c      	mov	r4, r1
 8016bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bd8:	f000 f894 	bl	8016d04 <_read_r>
 8016bdc:	2800      	cmp	r0, #0
 8016bde:	bfab      	itete	ge
 8016be0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016be2:	89a3      	ldrhlt	r3, [r4, #12]
 8016be4:	181b      	addge	r3, r3, r0
 8016be6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016bea:	bfac      	ite	ge
 8016bec:	6563      	strge	r3, [r4, #84]	; 0x54
 8016bee:	81a3      	strhlt	r3, [r4, #12]
 8016bf0:	bd10      	pop	{r4, pc}

08016bf2 <__swrite>:
 8016bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf6:	461f      	mov	r7, r3
 8016bf8:	898b      	ldrh	r3, [r1, #12]
 8016bfa:	05db      	lsls	r3, r3, #23
 8016bfc:	4605      	mov	r5, r0
 8016bfe:	460c      	mov	r4, r1
 8016c00:	4616      	mov	r6, r2
 8016c02:	d505      	bpl.n	8016c10 <__swrite+0x1e>
 8016c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c08:	2302      	movs	r3, #2
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	f000 f868 	bl	8016ce0 <_lseek_r>
 8016c10:	89a3      	ldrh	r3, [r4, #12]
 8016c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c1a:	81a3      	strh	r3, [r4, #12]
 8016c1c:	4632      	mov	r2, r6
 8016c1e:	463b      	mov	r3, r7
 8016c20:	4628      	mov	r0, r5
 8016c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c26:	f000 b817 	b.w	8016c58 <_write_r>

08016c2a <__sseek>:
 8016c2a:	b510      	push	{r4, lr}
 8016c2c:	460c      	mov	r4, r1
 8016c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c32:	f000 f855 	bl	8016ce0 <_lseek_r>
 8016c36:	1c43      	adds	r3, r0, #1
 8016c38:	89a3      	ldrh	r3, [r4, #12]
 8016c3a:	bf15      	itete	ne
 8016c3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c46:	81a3      	strheq	r3, [r4, #12]
 8016c48:	bf18      	it	ne
 8016c4a:	81a3      	strhne	r3, [r4, #12]
 8016c4c:	bd10      	pop	{r4, pc}

08016c4e <__sclose>:
 8016c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c52:	f000 b813 	b.w	8016c7c <_close_r>
	...

08016c58 <_write_r>:
 8016c58:	b538      	push	{r3, r4, r5, lr}
 8016c5a:	4d07      	ldr	r5, [pc, #28]	; (8016c78 <_write_r+0x20>)
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	4608      	mov	r0, r1
 8016c60:	4611      	mov	r1, r2
 8016c62:	2200      	movs	r2, #0
 8016c64:	602a      	str	r2, [r5, #0]
 8016c66:	461a      	mov	r2, r3
 8016c68:	f7ec fe77 	bl	800395a <_write>
 8016c6c:	1c43      	adds	r3, r0, #1
 8016c6e:	d102      	bne.n	8016c76 <_write_r+0x1e>
 8016c70:	682b      	ldr	r3, [r5, #0]
 8016c72:	b103      	cbz	r3, 8016c76 <_write_r+0x1e>
 8016c74:	6023      	str	r3, [r4, #0]
 8016c76:	bd38      	pop	{r3, r4, r5, pc}
 8016c78:	24005a68 	.word	0x24005a68

08016c7c <_close_r>:
 8016c7c:	b538      	push	{r3, r4, r5, lr}
 8016c7e:	4d06      	ldr	r5, [pc, #24]	; (8016c98 <_close_r+0x1c>)
 8016c80:	2300      	movs	r3, #0
 8016c82:	4604      	mov	r4, r0
 8016c84:	4608      	mov	r0, r1
 8016c86:	602b      	str	r3, [r5, #0]
 8016c88:	f7ec fe83 	bl	8003992 <_close>
 8016c8c:	1c43      	adds	r3, r0, #1
 8016c8e:	d102      	bne.n	8016c96 <_close_r+0x1a>
 8016c90:	682b      	ldr	r3, [r5, #0]
 8016c92:	b103      	cbz	r3, 8016c96 <_close_r+0x1a>
 8016c94:	6023      	str	r3, [r4, #0]
 8016c96:	bd38      	pop	{r3, r4, r5, pc}
 8016c98:	24005a68 	.word	0x24005a68

08016c9c <_fstat_r>:
 8016c9c:	b538      	push	{r3, r4, r5, lr}
 8016c9e:	4d07      	ldr	r5, [pc, #28]	; (8016cbc <_fstat_r+0x20>)
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	4604      	mov	r4, r0
 8016ca4:	4608      	mov	r0, r1
 8016ca6:	4611      	mov	r1, r2
 8016ca8:	602b      	str	r3, [r5, #0]
 8016caa:	f7ec fe7e 	bl	80039aa <_fstat>
 8016cae:	1c43      	adds	r3, r0, #1
 8016cb0:	d102      	bne.n	8016cb8 <_fstat_r+0x1c>
 8016cb2:	682b      	ldr	r3, [r5, #0]
 8016cb4:	b103      	cbz	r3, 8016cb8 <_fstat_r+0x1c>
 8016cb6:	6023      	str	r3, [r4, #0]
 8016cb8:	bd38      	pop	{r3, r4, r5, pc}
 8016cba:	bf00      	nop
 8016cbc:	24005a68 	.word	0x24005a68

08016cc0 <_isatty_r>:
 8016cc0:	b538      	push	{r3, r4, r5, lr}
 8016cc2:	4d06      	ldr	r5, [pc, #24]	; (8016cdc <_isatty_r+0x1c>)
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	4604      	mov	r4, r0
 8016cc8:	4608      	mov	r0, r1
 8016cca:	602b      	str	r3, [r5, #0]
 8016ccc:	f7ec fe7d 	bl	80039ca <_isatty>
 8016cd0:	1c43      	adds	r3, r0, #1
 8016cd2:	d102      	bne.n	8016cda <_isatty_r+0x1a>
 8016cd4:	682b      	ldr	r3, [r5, #0]
 8016cd6:	b103      	cbz	r3, 8016cda <_isatty_r+0x1a>
 8016cd8:	6023      	str	r3, [r4, #0]
 8016cda:	bd38      	pop	{r3, r4, r5, pc}
 8016cdc:	24005a68 	.word	0x24005a68

08016ce0 <_lseek_r>:
 8016ce0:	b538      	push	{r3, r4, r5, lr}
 8016ce2:	4d07      	ldr	r5, [pc, #28]	; (8016d00 <_lseek_r+0x20>)
 8016ce4:	4604      	mov	r4, r0
 8016ce6:	4608      	mov	r0, r1
 8016ce8:	4611      	mov	r1, r2
 8016cea:	2200      	movs	r2, #0
 8016cec:	602a      	str	r2, [r5, #0]
 8016cee:	461a      	mov	r2, r3
 8016cf0:	f7ec fe76 	bl	80039e0 <_lseek>
 8016cf4:	1c43      	adds	r3, r0, #1
 8016cf6:	d102      	bne.n	8016cfe <_lseek_r+0x1e>
 8016cf8:	682b      	ldr	r3, [r5, #0]
 8016cfa:	b103      	cbz	r3, 8016cfe <_lseek_r+0x1e>
 8016cfc:	6023      	str	r3, [r4, #0]
 8016cfe:	bd38      	pop	{r3, r4, r5, pc}
 8016d00:	24005a68 	.word	0x24005a68

08016d04 <_read_r>:
 8016d04:	b538      	push	{r3, r4, r5, lr}
 8016d06:	4d07      	ldr	r5, [pc, #28]	; (8016d24 <_read_r+0x20>)
 8016d08:	4604      	mov	r4, r0
 8016d0a:	4608      	mov	r0, r1
 8016d0c:	4611      	mov	r1, r2
 8016d0e:	2200      	movs	r2, #0
 8016d10:	602a      	str	r2, [r5, #0]
 8016d12:	461a      	mov	r2, r3
 8016d14:	f7ec fe04 	bl	8003920 <_read>
 8016d18:	1c43      	adds	r3, r0, #1
 8016d1a:	d102      	bne.n	8016d22 <_read_r+0x1e>
 8016d1c:	682b      	ldr	r3, [r5, #0]
 8016d1e:	b103      	cbz	r3, 8016d22 <_read_r+0x1e>
 8016d20:	6023      	str	r3, [r4, #0]
 8016d22:	bd38      	pop	{r3, r4, r5, pc}
 8016d24:	24005a68 	.word	0x24005a68

08016d28 <_init>:
 8016d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d2a:	bf00      	nop
 8016d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d2e:	bc08      	pop	{r3}
 8016d30:	469e      	mov	lr, r3
 8016d32:	4770      	bx	lr

08016d34 <_fini>:
 8016d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d36:	bf00      	nop
 8016d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d3a:	bc08      	pop	{r3}
 8016d3c:	469e      	mov	lr, r3
 8016d3e:	4770      	bx	lr
