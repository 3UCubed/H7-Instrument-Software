
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001472c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080149cc  080149cc  000249cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014d7c  08014d7c  00024d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014d84  08014d84  00024d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014d88  08014d88  00024d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08014d8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004fbc  24000100  08014e8c  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240050bc  08014e8c  000350bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030c71  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005267  00000000  00000000  00060d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002540  00000000  00000000  00066008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002358  00000000  00000000  00068548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000074bb  00000000  00000000  0006a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ef44  00000000  00000000  00071d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d56b  00000000  00000000  000a0c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022e20a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a980  00000000  00000000  0022e25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080149b4 	.word	0x080149b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	080149b4 	.word	0x080149b4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f00f ff28 	bl	80104f0 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00f ff1d 	bl	80104f0 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00f ff12 	bl	80104f0 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f013 fad2 	bl	8013c78 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004c4 	.word	0x240004c4
 80006e0:	24000664 	.word	0x24000664
 80006e4:	24000510 	.word	0x24000510
 80006e8:	2400055c 	.word	0x2400055c
 80006ec:	08014a0c 	.word	0x08014a0c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49bf      	ldr	r1, [pc, #764]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 80006fc:	48bf      	ldr	r0, [pc, #764]	; (80009fc <HAL_UART_RxCpltCallback+0x30c>)
 80006fe:	f00d fa0d 	bl	800db1c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bbd      	ldr	r3, [pc, #756]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 8204 	bhi.w	8000b18 <HAL_UART_RxCpltCallback+0x428>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080008e7 	.word	0x080008e7
 800071c:	0800090f 	.word	0x0800090f
 8000720:	08000937 	.word	0x08000937
 8000724:	08000963 	.word	0x08000963
 8000728:	0800098f 	.word	0x0800098f
 800072c:	080009b7 	.word	0x080009b7
 8000730:	080009e3 	.word	0x080009e3
 8000734:	08000a87 	.word	0x08000a87
 8000738:	08000b19 	.word	0x08000b19
 800073c:	08000b19 	.word	0x08000b19
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000aaf 	.word	0x08000aaf
 800074c:	08000ab7 	.word	0x08000ab7
 8000750:	08000ad3 	.word	0x08000ad3
 8000754:	08000aef 	.word	0x08000aef
 8000758:	08000ac5 	.word	0x08000ac5
 800075c:	08000ae1 	.word	0x08000ae1
 8000760:	08000afd 	.word	0x08000afd
 8000764:	080008fb 	.word	0x080008fb
 8000768:	08000923 	.word	0x08000923
 800076c:	0800094d 	.word	0x0800094d
 8000770:	08000979 	.word	0x08000979
 8000774:	080009a3 	.word	0x080009a3
 8000778:	080009cd 	.word	0x080009cd
 800077c:	08000a71 	.word	0x08000a71
 8000780:	08000a9b 	.word	0x08000a9b
 8000784:	080007d9 	.word	0x080007d9
 8000788:	08000815 	.word	0x08000815
 800078c:	08000851 	.word	0x08000851
 8000790:	08000b19 	.word	0x08000b19
 8000794:	08000b19 	.word	0x08000b19
 8000798:	08000b19 	.word	0x08000b19
 800079c:	08000b19 	.word	0x08000b19
 80007a0:	08000b19 	.word	0x08000b19
 80007a4:	08000b19 	.word	0x08000b19
 80007a8:	08000893 	.word	0x08000893
 80007ac:	080008bd 	.word	0x080008bd
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4893      	ldr	r0, [pc, #588]	; (8000a00 <HAL_UART_RxCpltCallback+0x310>)
 80007b2:	f013 fa61 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fc15 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 80007c2:	e1a9      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007c4:	4890      	ldr	r0, [pc, #576]	; (8000a08 <HAL_UART_RxCpltCallback+0x318>)
 80007c6:	f013 fa57 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80007ca:	4b8e      	ldr	r3, [pc, #568]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fc0b 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 80007d6:	e19f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007d8:	488c      	ldr	r0, [pc, #560]	; (8000a0c <HAL_UART_RxCpltCallback+0x31c>)
 80007da:	f013 fa4d 	bl	8013c78 <puts>
		if (step < 17) {
 80007de:	4b8c      	ldr	r3, [pc, #560]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	f200 8191 	bhi.w	8000b0a <HAL_UART_RxCpltCallback+0x41a>
			step+=2;
 80007e8:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b86      	ldr	r3, [pc, #536]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4884      	ldr	r0, [pc, #528]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000806:	f004 f9c4 	bl	8004b92 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	4882      	ldr	r0, [pc, #520]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800080e:	f004 f805 	bl	800481c <HAL_DAC_Start>

		}
		break;
 8000812:	e17a      	b.n	8000b0a <HAL_UART_RxCpltCallback+0x41a>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <HAL_UART_RxCpltCallback+0x32c>)
 8000816:	f013 fa2f 	bl	8013c78 <puts>
		if (step > 3) {
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	f240 8175 	bls.w	8000b0e <HAL_UART_RxCpltCallback+0x41e>
			step-=2;
 8000824:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b02      	subs	r3, #2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800082e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000830:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	4875      	ldr	r0, [pc, #468]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000842:	f004 f9a6 	bl	8004b92 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4873      	ldr	r0, [pc, #460]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800084a:	f003 ffe7 	bl	800481c <HAL_DAC_Start>

		}
		break;
 800084e:	e15e      	b.n	8000b0e <HAL_UART_RxCpltCallback+0x41e>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000850:	4873      	ldr	r0, [pc, #460]	; (8000a20 <HAL_UART_RxCpltCallback+0x330>)
 8000852:	f013 fa11 	bl	8013c78 <puts>
		if (!auto_sweep) {
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10e      	bne.n	800087c <HAL_UART_RxCpltCallback+0x18c>
			auto_sweep = 1;
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000864:	4870      	ldr	r0, [pc, #448]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000866:	f00b fc05 	bl	800c074 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2320      	movs	r3, #32
 8000870:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000872:	2100      	movs	r1, #0
 8000874:	4868      	ldr	r0, [pc, #416]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000876:	f004 f829 	bl	80048cc <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 800087a:	e14d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
			auto_sweep = 0;
 800087c:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000882:	4869      	ldr	r0, [pc, #420]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000884:	f00b fc66 	bl	800c154 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000888:	2100      	movs	r1, #0
 800088a:	4863      	ldr	r0, [pc, #396]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800088c:	f004 f8de 	bl	8004a4c <HAL_DAC_Stop_DMA>
		break;
 8000890:	e142      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <HAL_UART_RxCpltCallback+0x33c>)
 8000894:	f013 f9f0 	bl	8013c78 <puts>
		if (cadence <= 50000){
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f200 8136 	bhi.w	8000b12 <HAL_UART_RxCpltCallback+0x422>
			cadence *= 2;
 80008a6:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008ae:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008ba:	e12a      	b.n	8000b12 <HAL_UART_RxCpltCallback+0x422>
	}
	case 0x25: {
		printf("Factor Down\n");
 80008bc:	485d      	ldr	r0, [pc, #372]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 80008be:	f013 f9db 	bl	8013c78 <puts>
		if (cadence >= 6250){
 80008c2:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f641 0269 	movw	r2, #6249	; 0x1869
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f240 8123 	bls.w	8000b16 <HAL_UART_RxCpltCallback+0x426>
			cadence /= 2;
 80008d0:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008e4:	e117      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x426>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80008e6:	4854      	ldr	r0, [pc, #336]	; (8000a38 <HAL_UART_RxCpltCallback+0x348>)
 80008e8:	f013 f9c6 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80008ee:	2120      	movs	r1, #32
 80008f0:	2201      	movs	r2, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fb7a 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 80008f8:	e10e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80008fa:	4850      	ldr	r0, [pc, #320]	; (8000a3c <HAL_UART_RxCpltCallback+0x34c>)
 80008fc:	f013 f9bc 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000902:	2120      	movs	r1, #32
 8000904:	2200      	movs	r2, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fb70 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 800090c:	e104      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 800090e:	484c      	ldr	r0, [pc, #304]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 8000910:	f013 f9b2 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	2201      	movs	r2, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fb66 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 8000920:	e0fa      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000922:	4848      	ldr	r0, [pc, #288]	; (8000a44 <HAL_UART_RxCpltCallback+0x354>)
 8000924:	f013 f9a8 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fb5c 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 8000934:	e0f0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000936:	4844      	ldr	r0, [pc, #272]	; (8000a48 <HAL_UART_RxCpltCallback+0x358>)
 8000938:	f013 f99e 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	2201      	movs	r2, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f007 fb51 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 800094a:	e0e5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 800094c:	4840      	ldr	r0, [pc, #256]	; (8000a50 <HAL_UART_RxCpltCallback+0x360>)
 800094e:	f013 f993 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fb46 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 8000960:	e0da      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000962:	483c      	ldr	r0, [pc, #240]	; (8000a54 <HAL_UART_RxCpltCallback+0x364>)
 8000964:	f013 f988 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	2201      	movs	r2, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f007 fb3b 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 8000976:	e0cf      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000978:	4837      	ldr	r0, [pc, #220]	; (8000a58 <HAL_UART_RxCpltCallback+0x368>)
 800097a:	f013 f97d 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000980:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000984:	2200      	movs	r2, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fb30 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 800098c:	e0c4      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <HAL_UART_RxCpltCallback+0x36c>)
 8000990:	f013 f972 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2201      	movs	r2, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fb26 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 80009a0:	e0ba      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_UART_RxCpltCallback+0x370>)
 80009a4:	f013 f968 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	2200      	movs	r2, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fb1c 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 80009b4:	e0b0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 80009b6:	482b      	ldr	r0, [pc, #172]	; (8000a64 <HAL_UART_RxCpltCallback+0x374>)
 80009b8:	f013 f95e 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	2201      	movs	r2, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f007 fb11 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 80009ca:	e0a5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <HAL_UART_RxCpltCallback+0x378>)
 80009ce:	f013 f953 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	2200      	movs	r2, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fb06 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 80009e0:	e09a      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <HAL_UART_RxCpltCallback+0x37c>)
 80009e4:	f013 f948 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fafb 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 80009f6:	e08f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
 80009f8:	24000668 	.word	0x24000668
 80009fc:	240005a8 	.word	0x240005a8
 8000a00:	08014a24 	.word	0x08014a24
 8000a04:	58020400 	.word	0x58020400
 8000a08:	08014a2c 	.word	0x08014a2c
 8000a0c:	08014a38 	.word	0x08014a38
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000008 	.word	0x24000008
 8000a18:	240002d4 	.word	0x240002d4
 8000a1c:	08014a40 	.word	0x08014a40
 8000a20:	08014a4c 	.word	0x08014a4c
 8000a24:	24000660 	.word	0x24000660
 8000a28:	24000510 	.word	0x24000510
 8000a2c:	08014a60 	.word	0x08014a60
 8000a30:	24000000 	.word	0x24000000
 8000a34:	08014a6c 	.word	0x08014a6c
 8000a38:	08014a78 	.word	0x08014a78
 8000a3c:	08014a84 	.word	0x08014a84
 8000a40:	08014a90 	.word	0x08014a90
 8000a44:	08014a9c 	.word	0x08014a9c
 8000a48:	08014aac 	.word	0x08014aac
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	08014ab8 	.word	0x08014ab8
 8000a54:	08014ac4 	.word	0x08014ac4
 8000a58:	08014ad4 	.word	0x08014ad4
 8000a5c:	08014ae4 	.word	0x08014ae4
 8000a60:	08014af0 	.word	0x08014af0
 8000a64:	08014afc 	.word	0x08014afc
 8000a68:	08014b08 	.word	0x08014b08
 8000a6c:	08014b14 	.word	0x08014b14
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000a70:	482b      	ldr	r0, [pc, #172]	; (8000b20 <HAL_UART_RxCpltCallback+0x430>)
 8000a72:	f013 f901 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 fab4 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 8000a84:	e048      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <HAL_UART_RxCpltCallback+0x438>)
 8000a88:	f013 f8f6 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2201      	movs	r2, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 faaa 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 8000a98:	e03e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <HAL_UART_RxCpltCallback+0x43c>)
 8000a9c:	f013 f8ec 	bl	8013c78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 faa0 	bl	8007fec <HAL_GPIO_WritePin>
		break;
 8000aac:	e034      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000aae:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_UART_RxCpltCallback+0x440>)
 8000ab0:	f013 f8e2 	bl	8013c78 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x444>)
 8000ab8:	f013 f8de 	bl	8013c78 <puts>
		PMT_ON = 1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		break;
 8000ac2:	e029      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <HAL_UART_RxCpltCallback+0x44c>)
 8000ac6:	f013 f8d7 	bl	8013c78 <puts>
		PMT_ON = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	e022      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000ad2:	481b      	ldr	r0, [pc, #108]	; (8000b40 <HAL_UART_RxCpltCallback+0x450>)
 8000ad4:	f013 f8d0 	bl	8013c78 <puts>
		ERPA_ON = 1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e01b      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x458>)
 8000ae2:	f013 f8c9 	bl	8013c78 <puts>
		ERPA_ON = 0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
		break;
 8000aec:	e014      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_UART_RxCpltCallback+0x45c>)
 8000af0:	f013 f8c2 	bl	8013c78 <puts>
		HK_ON = 1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		break;
 8000afa:	e00d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x464>)
 8000afe:	f013 f8bb 	bl	8013c78 <puts>
		HK_ON = 0;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		break;
 8000b08:	e006      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b16:	bf00      	nop
	}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08014b20 	.word	0x08014b20
 8000b24:	58020800 	.word	0x58020800
 8000b28:	08014b2c 	.word	0x08014b2c
 8000b2c:	08014b38 	.word	0x08014b38
 8000b30:	08014b48 	.word	0x08014b48
 8000b34:	08014b58 	.word	0x08014b58
 8000b38:	2400065a 	.word	0x2400065a
 8000b3c:	08014b60 	.word	0x08014b60
 8000b40:	08014b68 	.word	0x08014b68
 8000b44:	2400065b 	.word	0x2400065b
 8000b48:	08014b70 	.word	0x08014b70
 8000b4c:	08014b7c 	.word	0x08014b7c
 8000b50:	2400065c 	.word	0x2400065c
 8000b54:	08014b84 	.word	0x08014b84

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f002 f8ca 	bl	8002cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f890 	bl	8000c84 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f90c 	bl	8000d80 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 fe02 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 fdd0 	bl	8001710 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b70:	f000 fd34 	bl	80015dc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fd80 	bl	8001678 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b78:	f000 fb1c 	bl	80011b4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b7c:	f000 fbb2 	bl	80012e4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b80:	f000 fcb6 	bl	80014f0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b84:	f000 fc06 	bl	8001394 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b88:	f000 fa50 	bl	800102c <MX_ADC3_Init>
  MX_ADC1_Init();
 8000b8c:	f000 f928 	bl	8000de0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b90:	f000 fade 	bl	8001150 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000b94:	f000 fb4e 	bl	8001234 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <main+0xd8>)
 8000b9c:	f00b fb7a 	bl	800c294 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4824      	ldr	r0, [pc, #144]	; (8000c34 <main+0xdc>)
 8000ba4:	f00b fb76 	bl	800c294 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4823      	ldr	r0, [pc, #140]	; (8000c38 <main+0xe0>)
 8000bac:	f00b fb72 	bl	800c294 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bb0:	f00f fb48 	bl	8010244 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	2010      	movs	r0, #16
 8000bba:	f00f fd43 	bl	8010644 <osMessageQueueNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <main+0xe4>)
 8000bc2:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <main+0xe8>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	481e      	ldr	r0, [pc, #120]	; (8000c44 <main+0xec>)
 8000bca:	f00f fb85 	bl	80102d8 <osThreadNew>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <main+0xf0>)
 8000bd2:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <main+0xf4>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	481d      	ldr	r0, [pc, #116]	; (8000c50 <main+0xf8>)
 8000bda:	f00f fb7d 	bl	80102d8 <osThreadNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <main+0xfc>)
 8000be2:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000be4:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <main+0x100>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	481c      	ldr	r0, [pc, #112]	; (8000c5c <main+0x104>)
 8000bea:	f00f fb75 	bl	80102d8 <osThreadNew>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <main+0x108>)
 8000bf2:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <main+0x10c>)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	481b      	ldr	r0, [pc, #108]	; (8000c68 <main+0x110>)
 8000bfa:	f00f fb6d 	bl	80102d8 <osThreadNew>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <main+0x114>)
 8000c02:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000c04:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <main+0x118>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	481a      	ldr	r0, [pc, #104]	; (8000c74 <main+0x11c>)
 8000c0a:	f00f fb65 	bl	80102d8 <osThreadNew>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <main+0x120>)
 8000c12:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f00f fc2c 	bl	8010472 <osEventFlagsNew>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <main+0x124>)
 8000c1e:	6013      	str	r3, [r2, #0]
  system_setup();
 8000c20:	f000 fe20 	bl	8001864 <system_setup>
  printf("Starting kernal...\n");
 8000c24:	4816      	ldr	r0, [pc, #88]	; (8000c80 <main+0x128>)
 8000c26:	f013 f827 	bl	8013c78 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c2a:	f00f fb2f 	bl	801028c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c2e:	e7fe      	b.n	8000c2e <main+0xd6>
 8000c30:	240004c4 	.word	0x240004c4
 8000c34:	24000510 	.word	0x24000510
 8000c38:	2400055c 	.word	0x2400055c
 8000c3c:	24000650 	.word	0x24000650
 8000c40:	08014bf0 	.word	0x08014bf0
 8000c44:	08001e31 	.word	0x08001e31
 8000c48:	2400063c 	.word	0x2400063c
 8000c4c:	08014c14 	.word	0x08014c14
 8000c50:	08001e75 	.word	0x08001e75
 8000c54:	24000640 	.word	0x24000640
 8000c58:	08014c38 	.word	0x08014c38
 8000c5c:	08001eb9 	.word	0x08001eb9
 8000c60:	24000644 	.word	0x24000644
 8000c64:	08014c5c 	.word	0x08014c5c
 8000c68:	08001efd 	.word	0x08001efd
 8000c6c:	24000648 	.word	0x24000648
 8000c70:	08014c80 	.word	0x08014c80
 8000c74:	08001f21 	.word	0x08001f21
 8000c78:	2400064c 	.word	0x2400064c
 8000c7c:	24000664 	.word	0x24000664
 8000c80:	08014b8c 	.word	0x08014b8c

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09c      	sub	sp, #112	; 0x70
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	224c      	movs	r2, #76	; 0x4c
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f012 fe82 	bl	801399c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f012 fe7c 	bl	801399c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f007 faef 	bl	8008288 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <SystemClock_Config+0xf4>)
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	4a31      	ldr	r2, [pc, #196]	; (8000d78 <SystemClock_Config+0xf4>)
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <SystemClock_Config+0xf4>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <SystemClock_Config+0xf8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <SystemClock_Config+0xf8>)
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <SystemClock_Config+0xf8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce0:	bf00      	nop
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <SystemClock_Config+0xf8>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cee:	d1f8      	bne.n	8000ce2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d00:	2300      	movs	r3, #0
 8000d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f007 fae7 	bl	80082fc <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d34:	f001 f934 	bl	8001fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d38:	233f      	movs	r3, #63	; 0x3f
 8000d3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f007 ff26 	bl	8008bb0 <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d6a:	f001 f919 	bl	8001fa0 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3770      	adds	r7, #112	; 0x70
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58000400 	.word	0x58000400
 8000d7c:	58024800 	.word	0x58024800

08000d80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0b0      	sub	sp, #192	; 0xc0
 8000d84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	22c0      	movs	r2, #192	; 0xc0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f012 fe05 	bl	801399c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000da2:	2309      	movs	r3, #9
 8000da4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000da6:	2304      	movs	r3, #4
 8000da8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000db2:	23c0      	movs	r3, #192	; 0xc0
 8000db4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000db6:	2320      	movs	r3, #32
 8000db8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000dba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f008 fabf 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000dd4:	f001 f8e4 	bl	8001fa0 <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	37c0      	adds	r7, #192	; 0xc0
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e04:	4b7c      	ldr	r3, [pc, #496]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e06:	4a7d      	ldr	r2, [pc, #500]	; (8000ffc <MX_ADC1_Init+0x21c>)
 8000e08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e12:	4b79      	ldr	r3, [pc, #484]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e14:	2208      	movs	r2, #8
 8000e16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e18:	4b77      	ldr	r3, [pc, #476]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1e:	4b76      	ldr	r3, [pc, #472]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e2a:	4b73      	ldr	r3, [pc, #460]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000e30:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e32:	220b      	movs	r2, #11
 8000e34:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b70      	ldr	r3, [pc, #448]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b6e      	ldr	r3, [pc, #440]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e42:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e48:	4b6b      	ldr	r3, [pc, #428]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e4e:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e56:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e5c:	4b66      	ldr	r3, [pc, #408]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e64:	4864      	ldr	r0, [pc, #400]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e66:	f002 f9d1 	bl	800320c <HAL_ADC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e70:	f001 f896 	bl	8001fa0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	485e      	ldr	r0, [pc, #376]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e80:	f003 faec 	bl	800445c <HAL_ADCEx_MultiModeConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000e8a:	f001 f889 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e8e:	4b5c      	ldr	r3, [pc, #368]	; (8001000 <MX_ADC1_Init+0x220>)
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e92:	2306      	movs	r3, #6
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000e96:	2307      	movs	r3, #7
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4851      	ldr	r0, [pc, #324]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000eb2:	f002 fc2f 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ebc:	f001 f870 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ec0:	4b50      	ldr	r3, [pc, #320]	; (8001004 <MX_ADC1_Init+0x224>)
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4619      	mov	r1, r3
 8000ecc:	484a      	ldr	r0, [pc, #296]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000ece:	f002 fc21 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ed8:	f001 f862 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <MX_ADC1_Init+0x228>)
 8000ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ee0:	2312      	movs	r3, #18
 8000ee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4843      	ldr	r0, [pc, #268]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000eea:	f002 fc13 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000ef4:	f001 f854 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ef8:	4b44      	ldr	r3, [pc, #272]	; (800100c <MX_ADC1_Init+0x22c>)
 8000efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000efc:	2318      	movs	r3, #24
 8000efe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	483c      	ldr	r0, [pc, #240]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f06:	f002 fc05 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000f10:	f001 f846 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f14:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <MX_ADC1_Init+0x230>)
 8000f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4835      	ldr	r0, [pc, #212]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f24:	f002 fbf6 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000f2e:	f001 f837 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f32:	4b38      	ldr	r3, [pc, #224]	; (8001014 <MX_ADC1_Init+0x234>)
 8000f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f36:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	482d      	ldr	r0, [pc, #180]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f42:	f002 fbe7 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000f4c:	f001 f828 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <MX_ADC1_Init+0x238>)
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f54:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000f58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f60:	f002 fbd8 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000f6a:	f001 f819 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_ADC1_Init+0x23c>)
 8000f70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000f72:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481e      	ldr	r0, [pc, #120]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f7e:	f002 fbc9 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000f88:	f001 f80a 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_ADC1_Init+0x240>)
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000f90:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000f94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f9c:	f002 fbba 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000fa6:	f000 fffb 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_ADC1_Init+0x244>)
 8000fac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000fbe:	f002 fba9 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000fc8:	f000 ffea 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_ADC1_Init+0x248>)
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000fd0:	f240 2306 	movw	r3, #518	; 0x206
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000fe0:	f002 fb98 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000fea:	f000 ffd9 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2400011c 	.word	0x2400011c
 8000ffc:	40022000 	.word	0x40022000
 8001000:	0c900008 	.word	0x0c900008
 8001004:	10c00010 	.word	0x10c00010
 8001008:	14f00020 	.word	0x14f00020
 800100c:	1d500080 	.word	0x1d500080
 8001010:	21800100 	.word	0x21800100
 8001014:	25b00200 	.word	0x25b00200
 8001018:	2a000400 	.word	0x2a000400
 800101c:	2e300800 	.word	0x2e300800
 8001020:	3ac04000 	.word	0x3ac04000
 8001024:	3ef08000 	.word	0x3ef08000
 8001028:	47520000 	.word	0x47520000

0800102c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <MX_ADC3_Init+0x110>)
 8001046:	4a3e      	ldr	r2, [pc, #248]	; (8001140 <MX_ADC3_Init+0x114>)
 8001048:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800104a:	4b3c      	ldr	r3, [pc, #240]	; (800113c <MX_ADC3_Init+0x110>)
 800104c:	2208      	movs	r2, #8
 800104e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001050:	4b3a      	ldr	r3, [pc, #232]	; (800113c <MX_ADC3_Init+0x110>)
 8001052:	2201      	movs	r2, #1
 8001054:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001056:	4b39      	ldr	r3, [pc, #228]	; (800113c <MX_ADC3_Init+0x110>)
 8001058:	2204      	movs	r2, #4
 800105a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <MX_ADC3_Init+0x110>)
 800105e:	2200      	movs	r2, #0
 8001060:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <MX_ADC3_Init+0x110>)
 8001064:	2201      	movs	r2, #1
 8001066:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001068:	4b34      	ldr	r3, [pc, #208]	; (800113c <MX_ADC3_Init+0x110>)
 800106a:	2204      	movs	r2, #4
 800106c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <MX_ADC3_Init+0x110>)
 8001070:	2200      	movs	r2, #0
 8001072:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001074:	4b31      	ldr	r3, [pc, #196]	; (800113c <MX_ADC3_Init+0x110>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <MX_ADC3_Init+0x110>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <MX_ADC3_Init+0x110>)
 8001082:	2203      	movs	r2, #3
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <MX_ADC3_Init+0x110>)
 8001088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800108e:	4b2b      	ldr	r3, [pc, #172]	; (800113c <MX_ADC3_Init+0x110>)
 8001090:	2200      	movs	r2, #0
 8001092:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <MX_ADC3_Init+0x110>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800109c:	4827      	ldr	r0, [pc, #156]	; (800113c <MX_ADC3_Init+0x110>)
 800109e:	f002 f8b5 	bl	800320c <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80010a8:	f000 ff7a 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <MX_ADC3_Init+0x118>)
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b0:	2306      	movs	r3, #6
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80010b4:	2307      	movs	r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010be:	2304      	movs	r3, #4
 80010c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	481b      	ldr	r0, [pc, #108]	; (800113c <MX_ADC3_Init+0x110>)
 80010d0:	f002 fb20 	bl	8003714 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80010da:	f000 ff61 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_ADC3_Init+0x11c>)
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010e2:	230c      	movs	r3, #12
 80010e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4814      	ldr	r0, [pc, #80]	; (800113c <MX_ADC3_Init+0x110>)
 80010ec:	f002 fb12 	bl	8003714 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80010f6:	f000 ff53 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010fa:	2301      	movs	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010fe:	2312      	movs	r3, #18
 8001100:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_ADC3_Init+0x110>)
 8001108:	f002 fb04 	bl	8003714 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001112:	f000 ff45 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <MX_ADC3_Init+0x120>)
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800111a:	2318      	movs	r3, #24
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_ADC3_Init+0x110>)
 8001124:	f002 faf6 	bl	8003714 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800112e:	f000 ff37 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000180 	.word	0x24000180
 8001140:	58026000 	.word	0x58026000
 8001144:	cb840000 	.word	0xcb840000
 8001148:	cfb80000 	.word	0xcfb80000
 800114c:	04300002 	.word	0x04300002

08001150 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2224      	movs	r2, #36	; 0x24
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f012 fc1d 	bl	801399c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_DAC1_Init+0x5c>)
 8001164:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_DAC1_Init+0x60>)
 8001166:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001168:	4810      	ldr	r0, [pc, #64]	; (80011ac <MX_DAC1_Init+0x5c>)
 800116a:	f003 fb35 	bl	80047d8 <HAL_DAC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001174:	f000 ff14 	bl	8001fa0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800117c:	230a      	movs	r3, #10
 800117e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001184:	2301      	movs	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_DAC1_Init+0x5c>)
 8001194:	f003 fd50 	bl	8004c38 <HAL_DAC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800119e:	f000 feff 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240002d4 	.word	0x240002d4
 80011b0:	40007400 	.word	0x40007400

080011b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_I2C1_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <MX_I2C1_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_I2C1_Init+0x74>)
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <MX_I2C1_Init+0x7c>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_I2C1_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_I2C1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <MX_I2C1_Init+0x74>)
 80011f0:	f006 ff16 	bl	8008020 <HAL_I2C_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011fa:	f000 fed1 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <MX_I2C1_Init+0x74>)
 8001202:	f006 ffa9 	bl	8008158 <HAL_I2CEx_ConfigAnalogFilter>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800120c:	f000 fec8 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_I2C1_Init+0x74>)
 8001214:	f006 ffeb 	bl	80081ee <HAL_I2CEx_ConfigDigitalFilter>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 febf 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	24000360 	.word	0x24000360
 800122c:	40005400 	.word	0x40005400
 8001230:	00506682 	.word	0x00506682

08001234 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <MX_SPI1_Init+0xa8>)
 800123a:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <MX_SPI1_Init+0xac>)
 800123c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800123e:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001240:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001244:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001246:	4b25      	ldr	r3, [pc, #148]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001248:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800124c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001250:	220f      	movs	r2, #15
 8001252:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_SPI1_Init+0xa8>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001262:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001266:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_SPI1_Init+0xa8>)
 800126a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800126e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_SPI1_Init+0xa8>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001284:	2200      	movs	r2, #0
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_SPI1_Init+0xa8>)
 800128a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001292:	2200      	movs	r2, #0
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001298:	2200      	movs	r2, #0
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_SPI1_Init+0xa8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012c8:	f00a fd3e 	bl	800bd48 <HAL_SPI_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80012d2:	f000 fe65 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	240003b4 	.word	0x240003b4
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <MX_SPI2_Init+0xa8>)
 80012ea:	4a29      	ldr	r2, [pc, #164]	; (8001390 <MX_SPI2_Init+0xac>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <MX_SPI2_Init+0xa8>)
 80012f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_SPI2_Init+0xa8>)
 80012f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <MX_SPI2_Init+0xa8>)
 8001300:	220f      	movs	r2, #15
 8001302:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_SPI2_Init+0xa8>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <MX_SPI2_Init+0xa8>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MX_SPI2_Init+0xa8>)
 8001312:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001316:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_SPI2_Init+0xa8>)
 800131a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800131e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_SPI2_Init+0xa8>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <MX_SPI2_Init+0xa8>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_SPI2_Init+0xa8>)
 800132e:	2200      	movs	r2, #0
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_SPI2_Init+0xa8>)
 8001334:	2200      	movs	r2, #0
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_SPI2_Init+0xa8>)
 800133a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_SPI2_Init+0xa8>)
 8001342:	2200      	movs	r2, #0
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_SPI2_Init+0xa8>)
 8001348:	2200      	movs	r2, #0
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_SPI2_Init+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_SPI2_Init+0xa8>)
 8001354:	2200      	movs	r2, #0
 8001356:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_SPI2_Init+0xa8>)
 800135a:	2200      	movs	r2, #0
 800135c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_SPI2_Init+0xa8>)
 8001360:	2200      	movs	r2, #0
 8001362:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_SPI2_Init+0xa8>)
 8001366:	2200      	movs	r2, #0
 8001368:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_SPI2_Init+0xa8>)
 800136c:	2200      	movs	r2, #0
 800136e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_SPI2_Init+0xa8>)
 8001372:	2200      	movs	r2, #0
 8001374:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_SPI2_Init+0xa8>)
 8001378:	f00a fce6 	bl	800bd48 <HAL_SPI_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001382:	f000 fe0d 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2400043c 	.word	0x2400043c
 8001390:	40003800 	.word	0x40003800

08001394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b09a      	sub	sp, #104	; 0x68
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]
 80013c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	222c      	movs	r2, #44	; 0x2c
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f012 fae4 	bl	801399c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d4:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013d6:	4a45      	ldr	r2, [pc, #276]	; (80014ec <MX_TIM1_Init+0x158>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013dc:	225f      	movs	r2, #95	; 0x5f
 80013de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013e8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80013ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001400:	4839      	ldr	r0, [pc, #228]	; (80014e8 <MX_TIM1_Init+0x154>)
 8001402:	f00a fde0 	bl	800bfc6 <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 fdc8 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800141a:	4619      	mov	r1, r3
 800141c:	4832      	ldr	r0, [pc, #200]	; (80014e8 <MX_TIM1_Init+0x154>)
 800141e:	f00b fc1f 	bl	800cc60 <HAL_TIM_ConfigClockSource>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001428:	f000 fdba 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800142c:	482e      	ldr	r0, [pc, #184]	; (80014e8 <MX_TIM1_Init+0x154>)
 800142e:	f00b f88b 	bl	800c548 <HAL_TIM_PWM_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001438:	f000 fdb2 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001448:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800144c:	4619      	mov	r1, r3
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <MX_TIM1_Init+0x154>)
 8001450:	f00c f95c 	bl	800d70c <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800145a:	f000 fda1 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145e:	2360      	movs	r3, #96	; 0x60
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001462:	f240 13df 	movw	r3, #479	; 0x1df
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800146c:	2300      	movs	r3, #0
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4818      	ldr	r0, [pc, #96]	; (80014e8 <MX_TIM1_Init+0x154>)
 8001486:	f00b fad7 	bl	800ca38 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001490:	f000 fd86 	bl	8001fa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM1_Init+0x154>)
 80014ca:	f00c f9ad 	bl	800d828 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80014d4:	f000 fd64 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM1_Init+0x154>)
 80014da:	f001 f8bd 	bl	8002658 <HAL_TIM_MspPostInit>

}
 80014de:	bf00      	nop
 80014e0:	3768      	adds	r7, #104	; 0x68
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	240004c4 	.word	0x240004c4
 80014ec:	40010000 	.word	0x40010000

080014f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001528:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <MX_TIM2_Init+0xe8>)
 800152c:	222f      	movs	r2, #47	; 0x2f
 800152e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001538:	f640 4234 	movw	r2, #3124	; 0xc34
 800153c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800154a:	4823      	ldr	r0, [pc, #140]	; (80015d8 <MX_TIM2_Init+0xe8>)
 800154c:	f00a fd3b 	bl	800bfc6 <HAL_TIM_Base_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001556:	f000 fd23 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001560:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001564:	4619      	mov	r1, r3
 8001566:	481c      	ldr	r0, [pc, #112]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001568:	f00b fb7a 	bl	800cc60 <HAL_TIM_ConfigClockSource>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001572:	f000 fd15 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001578:	f00a ffe6 	bl	800c548 <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001582:	f000 fd0d 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001586:	2320      	movs	r3, #32
 8001588:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4810      	ldr	r0, [pc, #64]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001596:	f00c f8b9 	bl	800d70c <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015a0:	f000 fcfe 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a4:	2360      	movs	r3, #96	; 0x60
 80015a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	220c      	movs	r2, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <MX_TIM2_Init+0xe8>)
 80015bc:	f00b fa3c 	bl	800ca38 <HAL_TIM_PWM_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015c6:	f000 fceb 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <MX_TIM2_Init+0xe8>)
 80015cc:	f001 f844 	bl	8002658 <HAL_TIM_MspPostInit>

}
 80015d0:	bf00      	nop
 80015d2:	3738      	adds	r7, #56	; 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	24000510 	.word	0x24000510

080015dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_TIM3_Init+0x94>)
 80015fc:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <MX_TIM3_Init+0x98>)
 80015fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_TIM3_Init+0x94>)
 8001602:	222f      	movs	r2, #47	; 0x2f
 8001604:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM3_Init+0x94>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_TIM3_Init+0x94>)
 800160e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001612:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_TIM3_Init+0x94>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_TIM3_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <MX_TIM3_Init+0x94>)
 8001622:	f00a fcd0 	bl	800bfc6 <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800162c:	f000 fcb8 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001634:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_TIM3_Init+0x94>)
 800163e:	f00b fb0f 	bl	800cc60 <HAL_TIM_ConfigClockSource>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001648:	f000 fcaa 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_TIM3_Init+0x94>)
 800165a:	f00c f857 	bl	800d70c <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001664:	f000 fc9c 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2400055c 	.word	0x2400055c
 8001674:	40000400 	.word	0x40000400

08001678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <MX_USART1_UART_Init+0x90>)
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <MX_USART1_UART_Init+0x94>)
 8001680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_USART1_UART_Init+0x90>)
 8001684:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <MX_USART1_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_USART1_UART_Init+0x90>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c0:	4811      	ldr	r0, [pc, #68]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016c2:	f00c f94d 	bl	800d960 <HAL_UART_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016cc:	f000 fc68 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d0:	2100      	movs	r1, #0
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016d4:	f00e fca7 	bl	8010026 <HAL_UARTEx_SetTxFifoThreshold>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016de:	f000 fc5f 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016e6:	f00e fcdc 	bl	80100a2 <HAL_UARTEx_SetRxFifoThreshold>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016f0:	f000 fc56 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016f6:	f00e fc5d 	bl	800ffb4 <HAL_UARTEx_DisableFifoMode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001700:	f000 fc4e 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	240005a8 	.word	0x240005a8
 800170c:	40011000 	.word	0x40011000

08001710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_DMA_Init+0x5c>)
 8001718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800171c:	4a13      	ldr	r2, [pc, #76]	; (800176c <MX_DMA_Init+0x5c>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_DMA_Init+0x5c>)
 8001728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2105      	movs	r1, #5
 8001738:	200b      	movs	r0, #11
 800173a:	f003 f825 	bl	8004788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800173e:	200b      	movs	r0, #11
 8001740:	f003 f83c 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2105      	movs	r1, #5
 8001748:	200c      	movs	r0, #12
 800174a:	f003 f81d 	bl	8004788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800174e:	200c      	movs	r0, #12
 8001750:	f003 f834 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2105      	movs	r1, #5
 8001758:	2010      	movs	r0, #16
 800175a:	f003 f815 	bl	8004788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800175e:	2010      	movs	r0, #16
 8001760:	f003 f82c 	bl	80047bc <HAL_NVIC_EnableIRQ>

}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58024400 	.word	0x58024400

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <MX_GPIO_Init+0xe8>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	4a32      	ldr	r2, [pc, #200]	; (8001858 <MX_GPIO_Init+0xe8>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <MX_GPIO_Init+0xe8>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	4a2b      	ldr	r2, [pc, #172]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e6:	4a1c      	ldr	r2, [pc, #112]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001804:	4815      	ldr	r0, [pc, #84]	; (800185c <MX_GPIO_Init+0xec>)
 8001806:	f006 fbf1 	bl	8007fec <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2164      	movs	r1, #100	; 0x64
 800180e:	4814      	ldr	r0, [pc, #80]	; (8001860 <MX_GPIO_Init+0xf0>)
 8001810:	f006 fbec 	bl	8007fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001814:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001818:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <MX_GPIO_Init+0xec>)
 800182e:	f006 fa15 	bl	8007c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001832:	2364      	movs	r3, #100	; 0x64
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_GPIO_Init+0xf0>)
 800184a:	f006 fa07 	bl	8007c5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	58024400 	.word	0x58024400
 800185c:	58020800 	.word	0x58020800
 8001860:	58020400 	.word	0x58020400

08001864 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001872:	210c      	movs	r1, #12
 8001874:	4818      	ldr	r0, [pc, #96]	; (80018d8 <system_setup+0x74>)
 8001876:	f00a fec9 	bl	800c60c <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800187a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800187e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001882:	4816      	ldr	r0, [pc, #88]	; (80018dc <system_setup+0x78>)
 8001884:	f002 fd86 	bl	8004394 <HAL_ADCEx_Calibration_Start>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 800188e:	f000 fb87 	bl	8001fa0 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001892:	220b      	movs	r2, #11
 8001894:	4912      	ldr	r1, [pc, #72]	; (80018e0 <system_setup+0x7c>)
 8001896:	4811      	ldr	r0, [pc, #68]	; (80018dc <system_setup+0x78>)
 8001898:	f001 fe5a 	bl	8003550 <HAL_ADC_Start_DMA>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80018a2:	f000 fb7d 	bl	8001fa0 <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80018a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018ae:	480d      	ldr	r0, [pc, #52]	; (80018e4 <system_setup+0x80>)
 80018b0:	f002 fd70 	bl	8004394 <HAL_ADCEx_Calibration_Start>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80018ba:	f000 fb71 	bl	8001fa0 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80018be:	2204      	movs	r2, #4
 80018c0:	4909      	ldr	r1, [pc, #36]	; (80018e8 <system_setup+0x84>)
 80018c2:	4808      	ldr	r0, [pc, #32]	; (80018e4 <system_setup+0x80>)
 80018c4:	f001 fe44 	bl	8003550 <HAL_ADC_Start_DMA>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80018ce:	f000 fb67 	bl	8001fa0 <Error_Handler>
	  	}
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	24000510 	.word	0x24000510
 80018dc:	2400011c 	.word	0x2400011c
 80018e0:	240006e0 	.word	0x240006e0
 80018e4:	24000180 	.word	0x24000180
 80018e8:	24000700 	.word	0x24000700

080018ec <create_packet>:




packet_t create_packet(const uint8_t* data, uint16_t size) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	4613      	mov	r3, r2
 80018f8:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f012 f82f 	bl	8013960 <malloc>
 8001902:	4603      	mov	r3, r0
 8001904:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	88fa      	ldrh	r2, [r7, #6]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	4618      	mov	r0, r3
 800190e:	f012 f837 	bl	8013980 <memcpy>
    packet.size = size;
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	461a      	mov	r2, r3
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001922:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001936:	2006      	movs	r0, #6
 8001938:	f012 f812 	bl	8013960 <malloc>
 800193c:	4603      	mov	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001940:	2002      	movs	r0, #2
 8001942:	f012 f80d 	bl	8013960 <malloc>
 8001946:	4603      	mov	r3, r0
 8001948:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	220e      	movs	r2, #14
 800194e:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3301      	adds	r3, #1
 8001954:	220d      	movs	r2, #13
 8001956:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	22bb      	movs	r2, #187	; 0xbb
 800195c:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3301      	adds	r3, #1
 8001962:	22bb      	movs	r2, #187	; 0xbb
 8001964:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <sample_pmt+0x94>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3302      	adds	r3, #2
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <sample_pmt+0x94>)
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3303      	adds	r3, #3
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3304      	adds	r3, #4
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3305      	adds	r3, #5
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	7852      	ldrb	r2, [r2, #1]
 8001994:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8001996:	463b      	mov	r3, r7
 8001998:	2206      	movs	r2, #6
 800199a:	68f9      	ldr	r1, [r7, #12]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ffa5 	bl	80018ec <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <sample_pmt+0x98>)
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	4639      	mov	r1, r7
 80019a8:	2300      	movs	r3, #0
 80019aa:	2200      	movs	r2, #0
 80019ac:	f00e febe 	bl	801072c <osMessageQueuePut>
	free(buffer);
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f011 ffdd 	bl	8013970 <free>
	free(pmt_spi);
 80019b6:	68b8      	ldr	r0, [r7, #8]
 80019b8:	f011 ffda 	bl	8013970 <free>
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	24000654 	.word	0x24000654
 80019c8:	24000650 	.word	0x24000650

080019cc <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80019d2:	bf00      	nop
 80019d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d8:	4844      	ldr	r0, [pc, #272]	; (8001aec <sample_erpa+0x120>)
 80019da:	f006 faef 	bl	8007fbc <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f7      	bne.n	80019d4 <sample_erpa+0x8>
	}

    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80019e4:	200e      	movs	r0, #14
 80019e6:	f011 ffbb 	bl	8013960 <malloc>
 80019ea:	4603      	mov	r3, r0
 80019ec:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80019ee:	2002      	movs	r0, #2
 80019f0:	f011 ffb6 	bl	8013960 <malloc>
 80019f4:	4603      	mov	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 80019f8:	2004      	movs	r0, #4
 80019fa:	f011 ffb1 	bl	8013960 <malloc>
 80019fe:	4603      	mov	r3, r0
 8001a00:	60fb      	str	r3, [r7, #12]

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	220e      	movs	r2, #14
 8001a06:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	220d      	movs	r2, #13
 8001a0e:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	22ee      	movs	r2, #238	; 0xee
 8001a14:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	22dd      	movs	r2, #221	; 0xdd
 8001a1c:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	22aa      	movs	r2, #170	; 0xaa
 8001a22:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	22aa      	movs	r2, #170	; 0xaa
 8001a2a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8001a2c:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <sample_erpa+0x124>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3302      	adds	r3, #2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <sample_erpa+0x124>)
 8001a3e:	881a      	ldrh	r2, [r3, #0]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3303      	adds	r3, #3
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
	buffer[5] = (0 & 0xFF);               		// ENDmon LSB
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3305      	adds	r3, #5
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3306      	adds	r3, #6
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	881a      	ldrh	r2, [r3, #0]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3307      	adds	r3, #7
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3302      	adds	r3, #2
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3308      	adds	r3, #8
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]
	buffer[9] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3302      	adds	r3, #2
 8001a8a:	881a      	ldrh	r2, [r3, #0]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3309      	adds	r3, #9
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((0 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	330a      	adds	r3, #10
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
	buffer[11] = (0 & 0xFF);                    // TEMPURATURE 2 LSB
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	330b      	adds	r3, #11
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
	buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	330c      	adds	r3, #12
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	701a      	strb	r2, [r3, #0]
	buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	330d      	adds	r3, #13
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	7852      	ldrb	r2, [r2, #1]
 8001ab6:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	220e      	movs	r2, #14
 8001abc:	6979      	ldr	r1, [r7, #20]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff14 	bl	80018ec <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <sample_erpa+0x128>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	1d39      	adds	r1, r7, #4
 8001aca:	2300      	movs	r3, #0
 8001acc:	2200      	movs	r2, #0
 8001ace:	f00e fe2d 	bl	801072c <osMessageQueuePut>
	free(buffer);
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f011 ff4c 	bl	8013970 <free>
	free(erpa_spi);
 8001ad8:	6938      	ldr	r0, [r7, #16]
 8001ada:	f011 ff49 	bl	8013970 <free>
	free(erpa_adc);
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f011 ff46 	bl	8013970 <free>
}
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	58020400 	.word	0x58020400
 8001af0:	24000656 	.word	0x24000656
 8001af4:	24000650 	.word	0x24000650

08001af8 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001afe:	2026      	movs	r0, #38	; 0x26
 8001b00:	f011 ff2e 	bl	8013960 <malloc>
 8001b04:	4603      	mov	r3, r0
 8001b06:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8001b08:	2008      	movs	r0, #8
 8001b0a:	f011 ff29 	bl	8013960 <malloc>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001b12:	2012      	movs	r0, #18
 8001b14:	f011 ff24 	bl	8013960 <malloc>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001b1c:	2008      	movs	r0, #8
 8001b1e:	f011 ff1f 	bl	8013960 <malloc>
 8001b22:	4603      	mov	r3, r0
 8001b24:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2211      	movs	r2, #17
 8001b2a:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	3302      	adds	r3, #2
 8001b30:	2212      	movs	r2, #18
 8001b32:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	3304      	adds	r3, #4
 8001b38:	2213      	movs	r2, #19
 8001b3a:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	3306      	adds	r3, #6
 8001b40:	2214      	movs	r2, #20
 8001b42:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	22a0      	movs	r2, #160	; 0xa0
 8001b48:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	22a1      	movs	r2, #161	; 0xa1
 8001b50:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3304      	adds	r3, #4
 8001b56:	22a2      	movs	r2, #162	; 0xa2
 8001b58:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3306      	adds	r3, #6
 8001b5e:	22a3      	movs	r2, #163	; 0xa3
 8001b60:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3308      	adds	r3, #8
 8001b66:	22a4      	movs	r2, #164	; 0xa4
 8001b68:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	330a      	adds	r3, #10
 8001b6e:	22a5      	movs	r2, #165	; 0xa5
 8001b70:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	330c      	adds	r3, #12
 8001b76:	22a6      	movs	r2, #166	; 0xa6
 8001b78:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	330e      	adds	r3, #14
 8001b7e:	22a7      	movs	r2, #167	; 0xa7
 8001b80:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3310      	adds	r3, #16
 8001b86:	22a8      	movs	r2, #168	; 0xa8
 8001b88:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	22b0      	movs	r2, #176	; 0xb0
 8001b8e:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	3302      	adds	r3, #2
 8001b94:	22b1      	movs	r2, #177	; 0xb1
 8001b96:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	22b2      	movs	r2, #178	; 0xb2
 8001b9e:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3306      	adds	r3, #6
 8001ba4:	22b3      	movs	r2, #179	; 0xb3
 8001ba6:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	22cc      	movs	r2, #204	; 0xcc
 8001bac:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	22cc      	movs	r2, #204	; 0xcc
 8001bb4:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8001bb6:	4b9c      	ldr	r3, [pc, #624]	; (8001e28 <sample_hk+0x330>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001bc6:	4b98      	ldr	r3, [pc, #608]	; (8001e28 <sample_hk+0x330>)
 8001bc8:	881a      	ldrh	r2, [r3, #0]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3303      	adds	r3, #3
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3304      	adds	r3, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3302      	adds	r3, #2
 8001be8:	881a      	ldrh	r2, [r3, #0]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3305      	adds	r3, #5
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3306      	adds	r3, #6
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3307      	adds	r3, #7
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c14:	121a      	asrs	r2, r3, #8
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3308      	adds	r3, #8
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3309      	adds	r3, #9
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	3302      	adds	r3, #2
 8001c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c34:	121a      	asrs	r2, r3, #8
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	330a      	adds	r3, #10
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	3302      	adds	r3, #2
 8001c42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	330b      	adds	r3, #11
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	3304      	adds	r3, #4
 8001c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c56:	121a      	asrs	r2, r3, #8
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	330c      	adds	r3, #12
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3304      	adds	r3, #4
 8001c64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	330d      	adds	r3, #13
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	3306      	adds	r3, #6
 8001c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c78:	121a      	asrs	r2, r3, #8
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	330e      	adds	r3, #14
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	3306      	adds	r3, #6
 8001c86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	330f      	adds	r3, #15
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	881a      	ldrh	r2, [r3, #0]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3311      	adds	r3, #17
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3312      	adds	r3, #18
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	881a      	ldrh	r2, [r3, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3313      	adds	r3, #19
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3314      	adds	r3, #20
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	881a      	ldrh	r2, [r3, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3315      	adds	r3, #21
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3306      	adds	r3, #6
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3316      	adds	r3, #22
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3306      	adds	r3, #6
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3317      	adds	r3, #23
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	330c      	adds	r3, #12
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3318      	adds	r3, #24
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	330c      	adds	r3, #12
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3319      	adds	r3, #25
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3306      	adds	r3, #6
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	331a      	adds	r3, #26
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3306      	adds	r3, #6
 8001d44:	881a      	ldrh	r2, [r3, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	331b      	adds	r3, #27
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3304      	adds	r3, #4
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	331c      	adds	r3, #28
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3304      	adds	r3, #4
 8001d64:	881a      	ldrh	r2, [r3, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	331d      	adds	r3, #29
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	330e      	adds	r3, #14
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	331e      	adds	r3, #30
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	330e      	adds	r3, #14
 8001d84:	881a      	ldrh	r2, [r3, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	331f      	adds	r3, #31
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3310      	adds	r3, #16
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3320      	adds	r3, #32
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3310      	adds	r3, #16
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3321      	adds	r3, #33	; 0x21
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3308      	adds	r3, #8
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3322      	adds	r3, #34	; 0x22
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	881a      	ldrh	r2, [r3, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3323      	adds	r3, #35	; 0x23
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	330a      	adds	r3, #10
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3324      	adds	r3, #36	; 0x24
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	330a      	adds	r3, #10
 8001de4:	881a      	ldrh	r2, [r3, #0]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3325      	adds	r3, #37	; 0x25
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001dee:	463b      	mov	r3, r7
 8001df0:	2226      	movs	r2, #38	; 0x26
 8001df2:	6979      	ldr	r1, [r7, #20]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fd79 	bl	80018ec <create_packet>
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <sample_hk+0x334>)
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	4639      	mov	r1, r7
 8001e00:	2300      	movs	r3, #0
 8001e02:	2200      	movs	r2, #0
 8001e04:	f00e fc92 	bl	801072c <osMessageQueuePut>
	free(buffer);
 8001e08:	6978      	ldr	r0, [r7, #20]
 8001e0a:	f011 fdb1 	bl	8013970 <free>
	free(hk_i2c);
 8001e0e:	6938      	ldr	r0, [r7, #16]
 8001e10:	f011 fdae 	bl	8013970 <free>
	free(hk_adc1);
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f011 fdab 	bl	8013970 <free>
	free(hk_adc3);
 8001e1a:	68b8      	ldr	r0, [r7, #8]
 8001e1c:	f011 fda8 	bl	8013970 <free>
}
 8001e20:	bf00      	nop
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	24000658 	.word	0x24000658
 8001e2c:	24000650 	.word	0x24000650

08001e30 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <PMT_init+0x38>)
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e40:	2200      	movs	r2, #0
 8001e42:	2101      	movs	r1, #1
 8001e44:	f00e fb98 	bl	8010578 <osEventFlagsWait>
		if(PMT_ON){
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <PMT_init+0x3c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <PMT_init+0x30>
	    sample_pmt();
 8001e50:	f7ff fd6e 	bl	8001930 <sample_pmt>
		pmt_seq++;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <PMT_init+0x40>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <PMT_init+0x40>)
 8001e5e:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8001e60:	f00e facc 	bl	80103fc <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001e64:	e7e8      	b.n	8001e38 <PMT_init+0x8>
 8001e66:	bf00      	nop
 8001e68:	24000664 	.word	0x24000664
 8001e6c:	2400065a 	.word	0x2400065a
 8001e70:	24000654 	.word	0x24000654

08001e74 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <ERPA_init+0x38>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e84:	2200      	movs	r2, #0
 8001e86:	2102      	movs	r1, #2
 8001e88:	f00e fb76 	bl	8010578 <osEventFlagsWait>
	  if (ERPA_ON)
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <ERPA_init+0x3c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8001e94:	f7ff fd9a 	bl	80019cc <sample_erpa>
		erpa_seq++;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <ERPA_init+0x40>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <ERPA_init+0x40>)
 8001ea2:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8001ea4:	f00e faaa 	bl	80103fc <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001ea8:	e7e8      	b.n	8001e7c <ERPA_init+0x8>
 8001eaa:	bf00      	nop
 8001eac:	24000664 	.word	0x24000664
 8001eb0:	2400065b 	.word	0x2400065b
 8001eb4:	24000656 	.word	0x24000656

08001eb8 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HK_init+0x38>)
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2104      	movs	r1, #4
 8001ecc:	f00e fb54 	bl	8010578 <osEventFlagsWait>
	  if(HK_ON)
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HK_init+0x3c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HK_init+0x30>
	  {
	    sample_hk();
 8001ed8:	f7ff fe0e 	bl	8001af8 <sample_hk>
		hk_seq++;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HK_init+0x40>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HK_init+0x40>)
 8001ee6:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8001ee8:	f00e fa88 	bl	80103fc <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001eec:	e7e8      	b.n	8001ec0 <HK_init+0x8>
 8001eee:	bf00      	nop
 8001ef0:	24000664 	.word	0x24000664
 8001ef4:	2400065c 	.word	0x2400065c
 8001ef8:	24000658 	.word	0x24000658

08001efc <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001f04:	2201      	movs	r2, #1
 8001f06:	4904      	ldr	r1, [pc, #16]	; (8001f18 <UART_RX_init+0x1c>)
 8001f08:	4804      	ldr	r0, [pc, #16]	; (8001f1c <UART_RX_init+0x20>)
 8001f0a:	f00b fe07 	bl	800db1c <HAL_UART_Receive_IT>
		osDelay(5);
 8001f0e:	2005      	movs	r0, #5
 8001f10:	f00e fa94 	bl	801043c <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001f14:	e7f6      	b.n	8001f04 <UART_RX_init+0x8>
 8001f16:	bf00      	nop
 8001f18:	24000668 	.word	0x24000668
 8001f1c:	240005a8 	.word	0x240005a8

08001f20 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <UART_TX_init+0x50>)
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	f107 010c 	add.w	r1, r7, #12
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f34:	2200      	movs	r2, #0
 8001f36:	f00e fc59 	bl	80107ec <osMessageQueueGet>
 8001f3a:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d113      	bne.n	8001f6a <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <UART_TX_init+0x50>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f00e fcae 	bl	80108a8 <osMessageQueueGetCount>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4808      	ldr	r0, [pc, #32]	; (8001f74 <UART_TX_init+0x54>)
 8001f52:	f011 fe0b 	bl	8013b6c <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8001f56:	68f9      	ldr	r1, [r7, #12]
 8001f58:	8a3a      	ldrh	r2, [r7, #16]
 8001f5a:	2364      	movs	r3, #100	; 0x64
 8001f5c:	4806      	ldr	r0, [pc, #24]	; (8001f78 <UART_TX_init+0x58>)
 8001f5e:	f00b fd4f 	bl	800da00 <HAL_UART_Transmit>
	       free(msg.array);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f011 fd03 	bl	8013970 <free>
	   }
	   osThreadYield();
 8001f6a:	f00e fa47 	bl	80103fc <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001f6e:	e7db      	b.n	8001f28 <UART_TX_init+0x8>
 8001f70:	24000650 	.word	0x24000650
 8001f74:	08014bc0 	.word	0x08014bc0
 8001f78:	240005a8 	.word	0x240005a8

08001f7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f8e:	f000 feed 	bl	8002d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40001000 	.word	0x40001000

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa4:	b672      	cpsid	i
}
 8001fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fa8:	e7fe      	b.n	8001fa8 <Error_Handler+0x8>
	...

08001fac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_MspInit+0x38>)
 8001fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_MspInit+0x38>)
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_MspInit+0x38>)
 8001fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f06f 0001 	mvn.w	r0, #1
 8001fd8:	f002 fbd6 	bl	8004788 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	58024400 	.word	0x58024400

08001fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08e      	sub	sp, #56	; 0x38
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a7b      	ldr	r2, [pc, #492]	; (80021f4 <HAL_ADC_MspInit+0x20c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	f040 8091 	bne.w	800212e <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800200c:	4b7a      	ldr	r3, [pc, #488]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 800200e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002012:	4a79      	ldr	r2, [pc, #484]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 8002014:	f043 0320 	orr.w	r3, r3, #32
 8002018:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800201c:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 800201e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	623b      	str	r3, [r7, #32]
 8002028:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 800202c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002030:	4a71      	ldr	r2, [pc, #452]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203a:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 800203c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b6b      	ldr	r3, [pc, #428]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204e:	4a6a      	ldr	r2, [pc, #424]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002058:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206c:	4a62      	ldr	r2, [pc, #392]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002076:	4b60      	ldr	r3, [pc, #384]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002084:	2333      	movs	r3, #51	; 0x33
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002088:	2303      	movs	r3, #3
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	4619      	mov	r1, r3
 8002096:	4859      	ldr	r0, [pc, #356]	; (80021fc <HAL_ADC_MspInit+0x214>)
 8002098:	f005 fde0 	bl	8007c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 800209c:	23ce      	movs	r3, #206	; 0xce
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a0:	2303      	movs	r3, #3
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	4854      	ldr	r0, [pc, #336]	; (8002200 <HAL_ADC_MspInit+0x218>)
 80020b0:	f005 fdd4 	bl	8007c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020b4:	2303      	movs	r3, #3
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b8:	2303      	movs	r3, #3
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	4619      	mov	r1, r3
 80020c6:	484f      	ldr	r0, [pc, #316]	; (8002204 <HAL_ADC_MspInit+0x21c>)
 80020c8:	f005 fdc8 	bl	8007c5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80020cc:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_ADC_MspInit+0x220>)
 80020ce:	4a4f      	ldr	r2, [pc, #316]	; (800220c <HAL_ADC_MspInit+0x224>)
 80020d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020d2:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <HAL_ADC_MspInit+0x220>)
 80020d4:	2209      	movs	r2, #9
 80020d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020d8:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <HAL_ADC_MspInit+0x220>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020de:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_ADC_MspInit+0x220>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020e4:	4b48      	ldr	r3, [pc, #288]	; (8002208 <HAL_ADC_MspInit+0x220>)
 80020e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020ec:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_ADC_MspInit+0x220>)
 80020ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020f4:	4b44      	ldr	r3, [pc, #272]	; (8002208 <HAL_ADC_MspInit+0x220>)
 80020f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_ADC_MspInit+0x220>)
 80020fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002102:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002104:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_ADC_MspInit+0x220>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800210a:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <HAL_ADC_MspInit+0x220>)
 800210c:	2200      	movs	r2, #0
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002110:	483d      	ldr	r0, [pc, #244]	; (8002208 <HAL_ADC_MspInit+0x220>)
 8002112:	f002 ff67 	bl	8004fe4 <HAL_DMA_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 800211c:	f7ff ff40 	bl	8001fa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a39      	ldr	r2, [pc, #228]	; (8002208 <HAL_ADC_MspInit+0x220>)
 8002124:	64da      	str	r2, [r3, #76]	; 0x4c
 8002126:	4a38      	ldr	r2, [pc, #224]	; (8002208 <HAL_ADC_MspInit+0x220>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800212c:	e05e      	b.n	80021ec <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a37      	ldr	r2, [pc, #220]	; (8002210 <HAL_ADC_MspInit+0x228>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d159      	bne.n	80021ec <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002138:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 800213a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213e:	4a2e      	ldr	r2, [pc, #184]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 8002140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 800214a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215c:	4a26      	ldr	r2, [pc, #152]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_ADC_MspInit+0x210>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002174:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002178:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800217c:	f000 fe22 	bl	8002dc4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002180:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002184:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002188:	f000 fe1c 	bl	8002dc4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 800218e:	4a22      	ldr	r2, [pc, #136]	; (8002218 <HAL_ADC_MspInit+0x230>)
 8002190:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 8002194:	2273      	movs	r2, #115	; 0x73
 8002196:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002198:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 80021a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021aa:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 80021ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 80021b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ba:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80021bc:	4b15      	ldr	r3, [pc, #84]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 80021be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80021d0:	4810      	ldr	r0, [pc, #64]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 80021d2:	f002 ff07 	bl	8004fe4 <HAL_DMA_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80021dc:	f7ff fee0 	bl	8001fa0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 80021e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <HAL_ADC_MspInit+0x22c>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021ec:	bf00      	nop
 80021ee:	3738      	adds	r7, #56	; 0x38
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40022000 	.word	0x40022000
 80021f8:	58024400 	.word	0x58024400
 80021fc:	58020800 	.word	0x58020800
 8002200:	58020000 	.word	0x58020000
 8002204:	58020400 	.word	0x58020400
 8002208:	240001e4 	.word	0x240001e4
 800220c:	40020010 	.word	0x40020010
 8002210:	58026000 	.word	0x58026000
 8002214:	2400025c 	.word	0x2400025c
 8002218:	40020028 	.word	0x40020028

0800221c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_DAC_MspInit+0xf0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d161      	bne.n	8002302 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800223e:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_DAC_MspInit+0xf4>)
 8002240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002244:	4a32      	ldr	r2, [pc, #200]	; (8002310 <HAL_DAC_MspInit+0xf4>)
 8002246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800224a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_DAC_MspInit+0xf4>)
 8002250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_DAC_MspInit+0xf4>)
 800225e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002262:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <HAL_DAC_MspInit+0xf4>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_DAC_MspInit+0xf4>)
 800226e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800227a:	2310      	movs	r3, #16
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800227e:	2303      	movs	r3, #3
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4821      	ldr	r0, [pc, #132]	; (8002314 <HAL_DAC_MspInit+0xf8>)
 800228e:	f005 fce5 	bl	8007c5c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 8002294:	4a21      	ldr	r2, [pc, #132]	; (800231c <HAL_DAC_MspInit+0x100>)
 8002296:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 800229a:	2243      	movs	r2, #67	; 0x43
 800229c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022a0:	2240      	movs	r2, #64	; 0x40
 80022a2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022b8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022c0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80022d6:	4810      	ldr	r0, [pc, #64]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022d8:	f002 fe84 	bl	8004fe4 <HAL_DMA_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80022e2:	f7ff fe5d 	bl	8001fa0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <HAL_DAC_MspInit+0xfc>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2105      	movs	r1, #5
 80022f6:	2036      	movs	r0, #54	; 0x36
 80022f8:	f002 fa46 	bl	8004788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022fc:	2036      	movs	r0, #54	; 0x36
 80022fe:	f002 fa5d 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	; 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40007400 	.word	0x40007400
 8002310:	58024400 	.word	0x58024400
 8002314:	58020000 	.word	0x58020000
 8002318:	240002e8 	.word	0x240002e8
 800231c:	40020088 	.word	0x40020088

08002320 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b0ba      	sub	sp, #232	; 0xe8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	22c0      	movs	r2, #192	; 0xc0
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f011 fb2b 	bl	801399c <memset>
  if(hi2c->Instance==I2C1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <HAL_I2C_MspInit+0xc8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d146      	bne.n	80023de <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002350:	f04f 0208 	mov.w	r2, #8
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	4618      	mov	r0, r3
 8002368:	f006 fff0 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002372:	f7ff fe15 	bl	8001fa0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_I2C_MspInit+0xcc>)
 8002378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237c:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_I2C_MspInit+0xcc>)
 800237e:	f043 0302 	orr.w	r3, r3, #2
 8002382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_I2C_MspInit+0xcc>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002394:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239c:	2312      	movs	r3, #18
 800239e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ae:	2304      	movs	r3, #4
 80023b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023b8:	4619      	mov	r1, r3
 80023ba:	480d      	ldr	r0, [pc, #52]	; (80023f0 <HAL_I2C_MspInit+0xd0>)
 80023bc:	f005 fc4e 	bl	8007c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_I2C_MspInit+0xcc>)
 80023c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_I2C_MspInit+0xcc>)
 80023c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_I2C_MspInit+0xcc>)
 80023d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023de:	bf00      	nop
 80023e0:	37e8      	adds	r7, #232	; 0xe8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40005400 	.word	0x40005400
 80023ec:	58024400 	.word	0x58024400
 80023f0:	58020400 	.word	0x58020400

080023f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0bc      	sub	sp, #240	; 0xf0
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800240c:	f107 0318 	add.w	r3, r7, #24
 8002410:	22c0      	movs	r2, #192	; 0xc0
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f011 fac1 	bl	801399c <memset>
  if(hspi->Instance==SPI1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <HAL_SPI_MspInit+0x15c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d145      	bne.n	80024b0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002424:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002430:	2300      	movs	r3, #0
 8002432:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002434:	f107 0318 	add.w	r3, r7, #24
 8002438:	4618      	mov	r0, r3
 800243a:	f006 ff87 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002444:	f7ff fdac 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <HAL_SPI_MspInit+0x160>)
 800244a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800244e:	4a41      	ldr	r2, [pc, #260]	; (8002554 <HAL_SPI_MspInit+0x160>)
 8002450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002454:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002458:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <HAL_SPI_MspInit+0x160>)
 800245a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800245e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_SPI_MspInit+0x160>)
 8002468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246c:	4a39      	ldr	r2, [pc, #228]	; (8002554 <HAL_SPI_MspInit+0x160>)
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_SPI_MspInit+0x160>)
 8002478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002484:	2318      	movs	r3, #24
 8002486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800249c:	2305      	movs	r3, #5
 800249e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024a6:	4619      	mov	r1, r3
 80024a8:	482b      	ldr	r0, [pc, #172]	; (8002558 <HAL_SPI_MspInit+0x164>)
 80024aa:	f005 fbd7 	bl	8007c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024ae:	e04a      	b.n	8002546 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a29      	ldr	r2, [pc, #164]	; (800255c <HAL_SPI_MspInit+0x168>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d145      	bne.n	8002546 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80024ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ca:	f107 0318 	add.w	r3, r7, #24
 80024ce:	4618      	mov	r0, r3
 80024d0:	f006 ff3c 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80024da:	f7ff fd61 	bl	8001fa0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_SPI_MspInit+0x160>)
 80024e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e4:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <HAL_SPI_MspInit+0x160>)
 80024e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_SPI_MspInit+0x160>)
 80024f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_SPI_MspInit+0x160>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002502:	4a14      	ldr	r2, [pc, #80]	; (8002554 <HAL_SPI_MspInit+0x160>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_SPI_MspInit+0x160>)
 800250e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800251a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800251e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002534:	2305      	movs	r3, #5
 8002536:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <HAL_SPI_MspInit+0x164>)
 8002542:	f005 fb8b 	bl	8007c5c <HAL_GPIO_Init>
}
 8002546:	bf00      	nop
 8002548:	37f0      	adds	r7, #240	; 0xf0
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40013000 	.word	0x40013000
 8002554:	58024400 	.word	0x58024400
 8002558:	58020400 	.word	0x58020400
 800255c:	40003800 	.word	0x40003800

08002560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a37      	ldr	r2, [pc, #220]	; (800264c <HAL_TIM_Base_MspInit+0xec>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d12f      	bne.n	80025d2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_TIM_Base_MspInit+0xf0>)
 8002574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002578:	4a35      	ldr	r2, [pc, #212]	; (8002650 <HAL_TIM_Base_MspInit+0xf0>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002582:	4b33      	ldr	r3, [pc, #204]	; (8002650 <HAL_TIM_Base_MspInit+0xf0>)
 8002584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002590:	2200      	movs	r2, #0
 8002592:	2105      	movs	r1, #5
 8002594:	2018      	movs	r0, #24
 8002596:	f002 f8f7 	bl	8004788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800259a:	2018      	movs	r0, #24
 800259c:	f002 f90e 	bl	80047bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2105      	movs	r1, #5
 80025a4:	2019      	movs	r0, #25
 80025a6:	f002 f8ef 	bl	8004788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80025aa:	2019      	movs	r0, #25
 80025ac:	f002 f906 	bl	80047bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2105      	movs	r1, #5
 80025b4:	201a      	movs	r0, #26
 80025b6:	f002 f8e7 	bl	8004788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80025ba:	201a      	movs	r0, #26
 80025bc:	f002 f8fe 	bl	80047bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2105      	movs	r1, #5
 80025c4:	201b      	movs	r0, #27
 80025c6:	f002 f8df 	bl	8004788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80025ca:	201b      	movs	r0, #27
 80025cc:	f002 f8f6 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025d0:	e038      	b.n	8002644 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025da:	d117      	bne.n	800260c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025dc:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_TIM_Base_MspInit+0xf0>)
 80025de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025e2:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <HAL_TIM_Base_MspInit+0xf0>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025ec:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_TIM_Base_MspInit+0xf0>)
 80025ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2105      	movs	r1, #5
 80025fe:	201c      	movs	r0, #28
 8002600:	f002 f8c2 	bl	8004788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002604:	201c      	movs	r0, #28
 8002606:	f002 f8d9 	bl	80047bc <HAL_NVIC_EnableIRQ>
}
 800260a:	e01b      	b.n	8002644 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_TIM_Base_MspInit+0xf4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d116      	bne.n	8002644 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_TIM_Base_MspInit+0xf0>)
 8002618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800261c:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <HAL_TIM_Base_MspInit+0xf0>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_TIM_Base_MspInit+0xf0>)
 8002628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	2105      	movs	r1, #5
 8002638:	201d      	movs	r0, #29
 800263a:	f002 f8a5 	bl	8004788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800263e:	201d      	movs	r0, #29
 8002640:	f002 f8bc 	bl	80047bc <HAL_NVIC_EnableIRQ>
}
 8002644:	bf00      	nop
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40010000 	.word	0x40010000
 8002650:	58024400 	.word	0x58024400
 8002654:	40000400 	.word	0x40000400

08002658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a26      	ldr	r2, [pc, #152]	; (8002710 <HAL_TIM_MspPostInit+0xb8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d120      	bne.n	80026bc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_TIM_MspPostInit+0xbc>)
 800267c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <HAL_TIM_MspPostInit+0xbc>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_TIM_MspPostInit+0xbc>)
 800268c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800269c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	4818      	ldr	r0, [pc, #96]	; (8002718 <HAL_TIM_MspPostInit+0xc0>)
 80026b6:	f005 fad1 	bl	8007c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026ba:	e024      	b.n	8002706 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c4:	d11f      	bne.n	8002706 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <HAL_TIM_MspPostInit+0xbc>)
 80026c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026cc:	4a11      	ldr	r2, [pc, #68]	; (8002714 <HAL_TIM_MspPostInit+0xbc>)
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_TIM_MspPostInit+0xbc>)
 80026d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026f6:	2301      	movs	r3, #1
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	4619      	mov	r1, r3
 8002700:	4806      	ldr	r0, [pc, #24]	; (800271c <HAL_TIM_MspPostInit+0xc4>)
 8002702:	f005 faab 	bl	8007c5c <HAL_GPIO_Init>
}
 8002706:	bf00      	nop
 8002708:	3728      	adds	r7, #40	; 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40010000 	.word	0x40010000
 8002714:	58024400 	.word	0x58024400
 8002718:	58020000 	.word	0x58020000
 800271c:	58020400 	.word	0x58020400

08002720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b0ba      	sub	sp, #232	; 0xe8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002738:	f107 0310 	add.w	r3, r7, #16
 800273c:	22c0      	movs	r2, #192	; 0xc0
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f011 f92b 	bl	801399c <memset>
  if(huart->Instance==USART1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2b      	ldr	r2, [pc, #172]	; (80027f8 <HAL_UART_MspInit+0xd8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d14e      	bne.n	80027ee <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002750:	f04f 0201 	mov.w	r2, #1
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002762:	f107 0310 	add.w	r3, r7, #16
 8002766:	4618      	mov	r0, r3
 8002768:	f006 fdf0 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002772:	f7ff fc15 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <HAL_UART_MspInit+0xdc>)
 8002778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800277c:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <HAL_UART_MspInit+0xdc>)
 800277e:	f043 0310 	orr.w	r3, r3, #16
 8002782:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_UART_MspInit+0xdc>)
 8002788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_UART_MspInit+0xdc>)
 8002796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279a:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_UART_MspInit+0xdc>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a4:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_UART_MspInit+0xdc>)
 80027a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027cc:	2307      	movs	r3, #7
 80027ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027d6:	4619      	mov	r1, r3
 80027d8:	4809      	ldr	r0, [pc, #36]	; (8002800 <HAL_UART_MspInit+0xe0>)
 80027da:	f005 fa3f 	bl	8007c5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2105      	movs	r1, #5
 80027e2:	2025      	movs	r0, #37	; 0x25
 80027e4:	f001 ffd0 	bl	8004788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027e8:	2025      	movs	r0, #37	; 0x25
 80027ea:	f001 ffe7 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027ee:	bf00      	nop
 80027f0:	37e8      	adds	r7, #232	; 0xe8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40011000 	.word	0x40011000
 80027fc:	58024400 	.word	0x58024400
 8002800:	58020000 	.word	0x58020000

08002804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b090      	sub	sp, #64	; 0x40
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	d827      	bhi.n	8002862 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002812:	2200      	movs	r2, #0
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	2036      	movs	r0, #54	; 0x36
 8002818:	f001 ffb6 	bl	8004788 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800281c:	2036      	movs	r0, #54	; 0x36
 800281e:	f001 ffcd 	bl	80047bc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002822:	4a29      	ldr	r2, [pc, #164]	; (80028c8 <HAL_InitTick+0xc4>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002828:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_InitTick+0xc8>)
 800282a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800282e:	4a27      	ldr	r2, [pc, #156]	; (80028cc <HAL_InitTick+0xc8>)
 8002830:	f043 0310 	orr.w	r3, r3, #16
 8002834:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_InitTick+0xc8>)
 800283a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002846:	f107 0210 	add.w	r2, r7, #16
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f006 fd39 	bl	80092c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <HAL_InitTick+0x6a>
 8002860:	e001      	b.n	8002866 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e02b      	b.n	80028be <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002866:	f006 fd03 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 800286a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800286c:	e004      	b.n	8002878 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800286e:	f006 fcff 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 8002872:	4603      	mov	r3, r0
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287a:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_InitTick+0xcc>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	0c9b      	lsrs	r3, r3, #18
 8002882:	3b01      	subs	r3, #1
 8002884:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_InitTick+0xd0>)
 8002888:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <HAL_InitTick+0xd4>)
 800288a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_InitTick+0xd0>)
 800288e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002892:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002894:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <HAL_InitTick+0xd0>)
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_InitTick+0xd0>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_InitTick+0xd0>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80028a6:	480b      	ldr	r0, [pc, #44]	; (80028d4 <HAL_InitTick+0xd0>)
 80028a8:	f009 fb8d 	bl	800bfc6 <HAL_TIM_Base_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80028b2:	4808      	ldr	r0, [pc, #32]	; (80028d4 <HAL_InitTick+0xd0>)
 80028b4:	f009 fc76 	bl	800c1a4 <HAL_TIM_Base_Start_IT>
 80028b8:	4603      	mov	r3, r0
 80028ba:	e000      	b.n	80028be <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3740      	adds	r7, #64	; 0x40
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	24000090 	.word	0x24000090
 80028cc:	58024400 	.word	0x58024400
 80028d0:	431bde83 	.word	0x431bde83
 80028d4:	24000708 	.word	0x24000708
 80028d8:	40001000 	.word	0x40001000

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80028e0:	e7fe      	b.n	80028e0 <NMI_Handler+0x4>

080028e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e6:	e7fe      	b.n	80028e6 <HardFault_Handler+0x4>

080028e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <MemManage_Handler+0x4>

080028ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <BusFault_Handler+0x4>

080028f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <UsageFault_Handler+0x4>

080028fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <DMA1_Stream0_IRQHandler+0x10>)
 800290e:	f003 fe93 	bl	8006638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	240001e4 	.word	0x240001e4

0800291c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <DMA1_Stream1_IRQHandler+0x10>)
 8002922:	f003 fe89 	bl	8006638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2400025c 	.word	0x2400025c

08002930 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <DMA1_Stream5_IRQHandler+0x10>)
 8002936:	f003 fe7f 	bl	8006638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	240002e8 	.word	0x240002e8

08002944 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <TIM1_BRK_IRQHandler+0x10>)
 800294a:	f009 ff6d 	bl	800c828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	240004c4 	.word	0x240004c4

08002958 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <TIM1_UP_IRQHandler+0x10>)
 800295e:	f009 ff63 	bl	800c828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	240004c4 	.word	0x240004c4

0800296c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002972:	f009 ff59 	bl	800c828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	240004c4 	.word	0x240004c4

08002980 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <TIM1_CC_IRQHandler+0x10>)
 8002986:	f009 ff4f 	bl	800c828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	240004c4 	.word	0x240004c4

08002994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <TIM2_IRQHandler+0x10>)
 800299a:	f009 ff45 	bl	800c828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	24000510 	.word	0x24000510

080029a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <TIM3_IRQHandler+0x10>)
 80029ae:	f009 ff3b 	bl	800c828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	2400055c 	.word	0x2400055c

080029bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <USART1_IRQHandler+0x10>)
 80029c2:	f00b f8f7 	bl	800dbb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	240005a8 	.word	0x240005a8

080029d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <TIM6_DAC_IRQHandler+0x20>)
 80029d6:	791b      	ldrb	r3, [r3, #4]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80029de:	4804      	ldr	r0, [pc, #16]	; (80029f0 <TIM6_DAC_IRQHandler+0x20>)
 80029e0:	f002 f881 	bl	8004ae6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80029e4:	4803      	ldr	r0, [pc, #12]	; (80029f4 <TIM6_DAC_IRQHandler+0x24>)
 80029e6:	f009 ff1f 	bl	800c828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	240002d4 	.word	0x240002d4
 80029f4:	24000708 	.word	0x24000708

080029f8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <ITM_SendChar+0x48>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <ITM_SendChar+0x48>)
 8002a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <ITM_SendChar+0x4c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <ITM_SendChar+0x4c>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002a1a:	bf00      	nop
 8002a1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f8      	beq.n	8002a1c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002a2a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	6013      	str	r3, [r2, #0]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000edfc 	.word	0xe000edfc
 8002a44:	e0000e00 	.word	0xe0000e00

08002a48 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e00a      	b.n	8002a70 <_read+0x28>
		*ptr++ = __io_getchar();
 8002a5a:	f3af 8000 	nop.w
 8002a5e:	4601      	mov	r1, r0
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	60ba      	str	r2, [r7, #8]
 8002a66:	b2ca      	uxtb	r2, r1
 8002a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dbf0      	blt.n	8002a5a <_read+0x12>
	}

	return len;
 8002a78:	687b      	ldr	r3, [r7, #4]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e009      	b.n	8002aa8 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	60ba      	str	r2, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ffab 	bl	80029f8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dbf1      	blt.n	8002a94 <_write+0x12>
	}
	return len;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_close>:

int _close(int file) {
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_isatty>:

int _isatty(int file) {
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <_sbrk+0x64>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <_sbrk+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d207      	bcs.n	8002b64 <_sbrk+0x40>
		errno = ENOMEM;
 8002b54:	f010 feda 	bl	801390c <__errno>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b62:	e009      	b.n	8002b78 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <_sbrk+0x64>)
 8002b74:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	24080000 	.word	0x24080000
 8002b84:	00000400 	.word	0x00000400
 8002b88:	24000754 	.word	0x24000754
 8002b8c:	240050c0 	.word	0x240050c0

08002b90 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <SystemInit+0xe4>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	4a36      	ldr	r2, [pc, #216]	; (8002c74 <SystemInit+0xe4>)
 8002b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <SystemInit+0xe8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	2b06      	cmp	r3, #6
 8002bae:	d807      	bhi.n	8002bc0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002bb0:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <SystemInit+0xe8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 030f 	bic.w	r3, r3, #15
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	; (8002c78 <SystemInit+0xe8>)
 8002bba:	f043 0307 	orr.w	r3, r3, #7
 8002bbe:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002bc0:	4b2e      	ldr	r3, [pc, #184]	; (8002c7c <SystemInit+0xec>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2d      	ldr	r2, [pc, #180]	; (8002c7c <SystemInit+0xec>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <SystemInit+0xec>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002bd2:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <SystemInit+0xec>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4929      	ldr	r1, [pc, #164]	; (8002c7c <SystemInit+0xec>)
 8002bd8:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <SystemInit+0xf0>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <SystemInit+0xe8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002bea:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <SystemInit+0xe8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 030f 	bic.w	r3, r3, #15
 8002bf2:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <SystemInit+0xe8>)
 8002bf4:	f043 0307 	orr.w	r3, r3, #7
 8002bf8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <SystemInit+0xec>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <SystemInit+0xec>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <SystemInit+0xec>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <SystemInit+0xec>)
 8002c0e:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <SystemInit+0xf4>)
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <SystemInit+0xec>)
 8002c14:	4a1c      	ldr	r2, [pc, #112]	; (8002c88 <SystemInit+0xf8>)
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <SystemInit+0xec>)
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <SystemInit+0xfc>)
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <SystemInit+0xec>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <SystemInit+0xec>)
 8002c26:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <SystemInit+0xfc>)
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <SystemInit+0xec>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <SystemInit+0xec>)
 8002c32:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <SystemInit+0xfc>)
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <SystemInit+0xec>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <SystemInit+0xec>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <SystemInit+0xec>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <SystemInit+0xec>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <SystemInit+0x100>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <SystemInit+0x104>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c5a:	d202      	bcs.n	8002c62 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <SystemInit+0x108>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <SystemInit+0x10c>)
 8002c64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00
 8002c78:	52002000 	.word	0x52002000
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c84:	02020200 	.word	0x02020200
 8002c88:	01ff0000 	.word	0x01ff0000
 8002c8c:	01010280 	.word	0x01010280
 8002c90:	5c001000 	.word	0x5c001000
 8002c94:	ffff0000 	.word	0xffff0000
 8002c98:	51008108 	.word	0x51008108
 8002c9c:	52004000 	.word	0x52004000

08002ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ca4:	f7ff ff74 	bl	8002b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca8:	480c      	ldr	r0, [pc, #48]	; (8002cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002caa:	490d      	ldr	r1, [pc, #52]	; (8002ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cac:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cc0:	4c0a      	ldr	r4, [pc, #40]	; (8002cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cce:	f010 fe23 	bl	8013918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd2:	f7fd ff41 	bl	8000b58 <main>
  bx  lr
 8002cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cd8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002cdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ce0:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8002ce4:	08014d8c 	.word	0x08014d8c
  ldr r2, =_sbss
 8002ce8:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002cec:	240050bc 	.word	0x240050bc

08002cf0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <ADC3_IRQHandler>
	...

08002cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cfa:	2003      	movs	r0, #3
 8002cfc:	f001 fd39 	bl	8004772 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d00:	f006 f90c 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_Init+0x68>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	4913      	ldr	r1, [pc, #76]	; (8002d60 <HAL_Init+0x6c>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_Init+0x68>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <HAL_Init+0x6c>)
 8002d28:	5cd3      	ldrb	r3, [r2, r3]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
 8002d34:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <HAL_Init+0x70>)
 8002d36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d38:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <HAL_Init+0x74>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d3e:	2005      	movs	r0, #5
 8002d40:	f7ff fd60 	bl	8002804 <HAL_InitTick>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e002      	b.n	8002d54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d4e:	f7ff f92d 	bl	8001fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	08014ca4 	.word	0x08014ca4
 8002d64:	2400008c 	.word	0x2400008c
 8002d68:	24000088 	.word	0x24000088

08002d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x20>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_IncTick+0x24>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_IncTick+0x24>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	24000094 	.word	0x24000094
 8002d90:	24000758 	.word	0x24000758

08002d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_GetTick+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	24000758 	.word	0x24000758

08002dac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_GetREVID+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0c1b      	lsrs	r3, r3, #16
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	5c001000 	.word	0x5c001000

08002dc4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	4904      	ldr	r1, [pc, #16]	; (8002dec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	58000400 	.word	0x58000400

08002df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	609a      	str	r2, [r3, #8]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3360      	adds	r3, #96	; 0x60
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	611a      	str	r2, [r3, #16]
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b087      	sub	sp, #28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	601a      	str	r2, [r3, #0]
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b087      	sub	sp, #28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3330      	adds	r3, #48	; 0x30
 8002f36:	461a      	mov	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	4413      	add	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	211f      	movs	r1, #31
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	401a      	ands	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	f003 011f 	and.w	r1, r3, #31
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f023 0203 	bic.w	r2, r3, #3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	60da      	str	r2, [r3, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3314      	adds	r3, #20
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	0e5b      	lsrs	r3, r3, #25
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	4413      	add	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	0d1b      	lsrs	r3, r3, #20
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	2107      	movs	r1, #7
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	401a      	ands	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	0d1b      	lsrs	r3, r3, #20
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003014:	43db      	mvns	r3, r3
 8003016:	401a      	ands	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0318 	and.w	r3, r3, #24
 800301e:	4908      	ldr	r1, [pc, #32]	; (8003040 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003020:	40d9      	lsrs	r1, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	400b      	ands	r3, r1
 8003026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	000fffff 	.word	0x000fffff

08003044 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 031f 	and.w	r3, r3, #31
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <LL_ADC_DisableDeepPowerDown+0x20>)
 800306e:	4013      	ands	r3, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6093      	str	r3, [r2, #8]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	5fffffc0 	.word	0x5fffffc0

08003084 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003098:	d101      	bne.n	800309e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	6fffffc0 	.word	0x6fffffc0

080030d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030e8:	d101      	bne.n	80030ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <LL_ADC_Enable+0x24>)
 800310a:	4013      	ands	r3, r2
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	7fffffc0 	.word	0x7fffffc0

08003124 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <LL_ADC_Disable+0x24>)
 8003132:	4013      	ands	r3, r2
 8003134:	f043 0202 	orr.w	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	7fffffc0 	.word	0x7fffffc0

0800314c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <LL_ADC_IsEnabled+0x18>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <LL_ADC_IsEnabled+0x1a>
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d101      	bne.n	800318a <LL_ADC_IsDisableOngoing+0x18>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_ADC_IsDisableOngoing+0x1a>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <LL_ADC_REG_StartConversion+0x24>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	f043 0204 	orr.w	r2, r3, #4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	7fffffc0 	.word	0x7fffffc0

080031c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d101      	bne.n	80031d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d101      	bne.n	80031fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003218:	2300      	movs	r3, #0
 800321a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e18f      	b.n	8003546 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7fe fed7 	bl	8001fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff19 	bl	8003084 <LL_ADC_IsDeepPowerDownEnabled>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff feff 	bl	8003060 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff34 	bl	80030d4 <LL_ADC_IsInternalRegulatorEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d114      	bne.n	800329c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff18 	bl	80030ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800327c:	4b87      	ldr	r3, [pc, #540]	; (800349c <HAL_ADC_Init+0x290>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	4a87      	ldr	r2, [pc, #540]	; (80034a0 <HAL_ADC_Init+0x294>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	3301      	adds	r3, #1
 800328c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800328e:	e002      	b.n	8003296 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	3b01      	subs	r3, #1
 8003294:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f9      	bne.n	8003290 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff17 	bl	80030d4 <LL_ADC_IsInternalRegulatorEnabled>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10d      	bne.n	80032c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	f043 0210 	orr.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff77 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 80032d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 8129 	bne.w	8003534 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 8125 	bne.w	8003534 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032f2:	f043 0202 	orr.w	r2, r3, #2
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ff24 	bl	800314c <LL_ADC_IsEnabled>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d136      	bne.n	8003378 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a65      	ldr	r2, [pc, #404]	; (80034a4 <HAL_ADC_Init+0x298>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_ADC_Init+0x112>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a63      	ldr	r2, [pc, #396]	; (80034a8 <HAL_ADC_Init+0x29c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10e      	bne.n	800333c <HAL_ADC_Init+0x130>
 800331e:	4861      	ldr	r0, [pc, #388]	; (80034a4 <HAL_ADC_Init+0x298>)
 8003320:	f7ff ff14 	bl	800314c <LL_ADC_IsEnabled>
 8003324:	4604      	mov	r4, r0
 8003326:	4860      	ldr	r0, [pc, #384]	; (80034a8 <HAL_ADC_Init+0x29c>)
 8003328:	f7ff ff10 	bl	800314c <LL_ADC_IsEnabled>
 800332c:	4603      	mov	r3, r0
 800332e:	4323      	orrs	r3, r4
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e008      	b.n	800334e <HAL_ADC_Init+0x142>
 800333c:	485b      	ldr	r0, [pc, #364]	; (80034ac <HAL_ADC_Init+0x2a0>)
 800333e:	f7ff ff05 	bl	800314c <LL_ADC_IsEnabled>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a53      	ldr	r2, [pc, #332]	; (80034a4 <HAL_ADC_Init+0x298>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_ADC_Init+0x15a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a51      	ldr	r2, [pc, #324]	; (80034a8 <HAL_ADC_Init+0x29c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_ADC_Init+0x15e>
 8003366:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_ADC_Init+0x2a4>)
 8003368:	e000      	b.n	800336c <HAL_ADC_Init+0x160>
 800336a:	4a52      	ldr	r2, [pc, #328]	; (80034b4 <HAL_ADC_Init+0x2a8>)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f7ff fd3c 	bl	8002df0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003378:	f7ff fd18 	bl	8002dac <HAL_GetREVID>
 800337c:	4603      	mov	r3, r0
 800337e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003382:	4293      	cmp	r3, r2
 8003384:	d914      	bls.n	80033b0 <HAL_ADC_Init+0x1a4>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b10      	cmp	r3, #16
 800338c:	d110      	bne.n	80033b0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	7d5b      	ldrb	r3, [r3, #21]
 8003392:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003398:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800339e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7f1b      	ldrb	r3, [r3, #28]
 80033a4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80033a6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033a8:	f043 030c 	orr.w	r3, r3, #12
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e00d      	b.n	80033cc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	7d5b      	ldrb	r3, [r3, #21]
 80033b4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033ba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80033c0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	7f1b      	ldrb	r3, [r3, #28]
 80033c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	7f1b      	ldrb	r3, [r3, #28]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d106      	bne.n	80033e2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	3b01      	subs	r3, #1
 80033da:	045b      	lsls	r3, r3, #17
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <HAL_ADC_Init+0x2ac>)
 8003406:	4013      	ands	r3, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	69b9      	ldr	r1, [r7, #24]
 800340e:	430b      	orrs	r3, r1
 8003410:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fed2 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 800341c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fedf 	bl	80031e6 <LL_ADC_INJ_IsConversionOngoing>
 8003428:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d15f      	bne.n	80034f0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d15c      	bne.n	80034f0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7d1b      	ldrb	r3, [r3, #20]
 800343a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <HAL_ADC_Init+0x2b0>)
 800344c:	4013      	ands	r3, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	69b9      	ldr	r1, [r7, #24]
 8003454:	430b      	orrs	r3, r1
 8003456:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800345e:	2b01      	cmp	r3, #1
 8003460:	d130      	bne.n	80034c4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_ADC_Init+0x2b4>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003476:	3a01      	subs	r2, #1
 8003478:	0411      	lsls	r1, r2, #16
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800348a:	430a      	orrs	r2, r1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	611a      	str	r2, [r3, #16]
 8003498:	e01c      	b.n	80034d4 <HAL_ADC_Init+0x2c8>
 800349a:	bf00      	nop
 800349c:	24000088 	.word	0x24000088
 80034a0:	053e2d63 	.word	0x053e2d63
 80034a4:	40022000 	.word	0x40022000
 80034a8:	40022100 	.word	0x40022100
 80034ac:	58026000 	.word	0x58026000
 80034b0:	40022300 	.word	0x40022300
 80034b4:	58026300 	.word	0x58026300
 80034b8:	fff0c003 	.word	0xfff0c003
 80034bc:	ffffbffc 	.word	0xffffbffc
 80034c0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fdec 	bl	80040c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d10c      	bne.n	8003512 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f023 010f 	bic.w	r1, r3, #15
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	1e5a      	subs	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
 8003510:	e007      	b.n	8003522 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 020f 	bic.w	r2, r2, #15
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	655a      	str	r2, [r3, #84]	; 0x54
 8003532:	e007      	b.n	8003544 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f043 0210 	orr.w	r2, r3, #16
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003544:	7ffb      	ldrb	r3, [r7, #31]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3724      	adds	r7, #36	; 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd90      	pop	{r4, r7, pc}
 800354e:	bf00      	nop

08003550 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a55      	ldr	r2, [pc, #340]	; (80036b8 <HAL_ADC_Start_DMA+0x168>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_ADC_Start_DMA+0x20>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a54      	ldr	r2, [pc, #336]	; (80036bc <HAL_ADC_Start_DMA+0x16c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_ADC_Start_DMA+0x24>
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_ADC_Start_DMA+0x170>)
 8003572:	e000      	b.n	8003576 <HAL_ADC_Start_DMA+0x26>
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_ADC_Start_DMA+0x174>)
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fd64 	bl	8003044 <LL_ADC_GetMultimode>
 800357c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fe1c 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 808c 	bne.w	80036a8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_ADC_Start_DMA+0x4e>
 800359a:	2302      	movs	r3, #2
 800359c:	e087      	b.n	80036ae <HAL_ADC_Start_DMA+0x15e>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d002      	beq.n	80035b8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b09      	cmp	r3, #9
 80035b6:	d170      	bne.n	800369a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fc07 	bl	8003dcc <ADC_Enable>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d163      	bne.n	8003690 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035cc:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_ADC_Start_DMA+0x178>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a37      	ldr	r2, [pc, #220]	; (80036bc <HAL_ADC_Start_DMA+0x16c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d002      	beq.n	80035e8 <HAL_ADC_Start_DMA+0x98>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e000      	b.n	80035ea <HAL_ADC_Start_DMA+0x9a>
 80035e8:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <HAL_ADC_Start_DMA+0x168>)
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d002      	beq.n	80035f8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d105      	bne.n	8003604 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	f023 0206 	bic.w	r2, r3, #6
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	659a      	str	r2, [r3, #88]	; 0x58
 800361c:	e002      	b.n	8003624 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003628:	4a28      	ldr	r2, [pc, #160]	; (80036cc <HAL_ADC_Start_DMA+0x17c>)
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <HAL_ADC_Start_DMA+0x180>)
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <HAL_ADC_Start_DMA+0x184>)
 800363a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	221c      	movs	r2, #28
 8003642:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0210 	orr.w	r2, r2, #16
 800365a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7ff fc89 	bl	8002f7e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3340      	adds	r3, #64	; 0x40
 8003676:	4619      	mov	r1, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f002 f80e 	bl	800569c <HAL_DMA_Start_IT>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fd85 	bl	8003198 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800368e:	e00d      	b.n	80036ac <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003698:	e008      	b.n	80036ac <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80036a6:	e001      	b.n	80036ac <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
 80036aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40022100 	.word	0x40022100
 80036c0:	40022300 	.word	0x40022300
 80036c4:	58026300 	.word	0x58026300
 80036c8:	fffff0fe 	.word	0xfffff0fe
 80036cc:	08003f9f 	.word	0x08003f9f
 80036d0:	08004077 	.word	0x08004077
 80036d4:	08004093 	.word	0x08004093

080036d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b0a1      	sub	sp, #132	; 0x84
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <HAL_ADC_ConfigChannel+0x1b0>)
 800372e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_ADC_ConfigChannel+0x2a>
 800373a:	2302      	movs	r3, #2
 800373c:	e32e      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x688>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fd38 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 8313 	bne.w	8003d7e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	db2c      	blt.n	80037ba <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003768:	2b00      	cmp	r3, #0
 800376a:	d108      	bne.n	800377e <HAL_ADC_ConfigChannel+0x6a>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0e9b      	lsrs	r3, r3, #26
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2201      	movs	r2, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	e016      	b.n	80037ac <HAL_ADC_ConfigChannel+0x98>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800378c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800378e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003796:	2320      	movs	r3, #32
 8003798:	e003      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800379a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2201      	movs	r2, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	69d1      	ldr	r1, [r2, #28]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	430b      	orrs	r3, r1
 80037b8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7ff fbad 	bl	8002f26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fcf5 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 80037d6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fd02 	bl	80031e6 <LL_ADC_INJ_IsConversionOngoing>
 80037e2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 80b8 	bne.w	800395c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 80b4 	bne.w	800395c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	461a      	mov	r2, r3
 8003802:	f7ff fbcf 	bl	8002fa4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003806:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <HAL_ADC_ConfigChannel+0x1b4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800380e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003812:	d10b      	bne.n	800382c <HAL_ADC_ConfigChannel+0x118>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	089b      	lsrs	r3, r3, #2
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	e01d      	b.n	8003868 <HAL_ADC_ConfigChannel+0x154>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x13e>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	089b      	lsrs	r3, r3, #2
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	e00a      	b.n	8003868 <HAL_ADC_ConfigChannel+0x154>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b04      	cmp	r3, #4
 8003870:	d02c      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6919      	ldr	r1, [r3, #16]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003880:	f7ff faea 	bl	8002e58 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6919      	ldr	r1, [r3, #16]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	7e5b      	ldrb	r3, [r3, #25]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d102      	bne.n	800389a <HAL_ADC_ConfigChannel+0x186>
 8003894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003898:	e000      	b.n	800389c <HAL_ADC_ConfigChannel+0x188>
 800389a:	2300      	movs	r3, #0
 800389c:	461a      	mov	r2, r3
 800389e:	f7ff fb14 	bl	8002eca <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6919      	ldr	r1, [r3, #16]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	7e1b      	ldrb	r3, [r3, #24]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d102      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x1a4>
 80038b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038b6:	e000      	b.n	80038ba <HAL_ADC_ConfigChannel+0x1a6>
 80038b8:	2300      	movs	r3, #0
 80038ba:	461a      	mov	r2, r3
 80038bc:	f7ff faec 	bl	8002e98 <LL_ADC_SetDataRightShift>
 80038c0:	e04c      	b.n	800395c <HAL_ADC_ConfigChannel+0x248>
 80038c2:	bf00      	nop
 80038c4:	47ff0000 	.word	0x47ff0000
 80038c8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	069b      	lsls	r3, r3, #26
 80038dc:	429a      	cmp	r2, r3
 80038de:	d107      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	069b      	lsls	r3, r3, #26
 8003900:	429a      	cmp	r2, r3
 8003902:	d107      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003912:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800391a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	069b      	lsls	r3, r3, #26
 8003924:	429a      	cmp	r2, r3
 8003926:	d107      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003936:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	069b      	lsls	r3, r3, #26
 8003948:	429a      	cmp	r2, r3
 800394a:	d107      	bne.n	800395c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800395a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fbf3 	bl	800314c <LL_ADC_IsEnabled>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	f040 8211 	bne.w	8003d90 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	461a      	mov	r2, r3
 800397c:	f7ff fb3e 	bl	8002ffc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4aa1      	ldr	r2, [pc, #644]	; (8003c0c <HAL_ADC_ConfigChannel+0x4f8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	f040 812e 	bne.w	8003be8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x2a0>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	3301      	adds	r3, #1
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	bf94      	ite	ls
 80039ac:	2301      	movls	r3, #1
 80039ae:	2300      	movhi	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e019      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x2d4>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80039c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80039c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80039cc:	2320      	movs	r3, #32
 80039ce:	e003      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80039d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2b09      	cmp	r3, #9
 80039e0:	bf94      	ite	ls
 80039e2:	2301      	movls	r3, #1
 80039e4:	2300      	movhi	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d079      	beq.n	8003ae0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x2f4>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0e9b      	lsrs	r3, r3, #26
 80039fe:	3301      	adds	r3, #1
 8003a00:	069b      	lsls	r3, r3, #26
 8003a02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a06:	e015      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x320>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a18:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003a20:	2320      	movs	r3, #32
 8003a22:	e003      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	069b      	lsls	r3, r3, #26
 8003a30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x340>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0e9b      	lsrs	r3, r3, #26
 8003a46:	3301      	adds	r3, #1
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	e017      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x370>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5c:	fa93 f3a3 	rbit	r3, r3
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a64:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003a6c:	2320      	movs	r3, #32
 8003a6e:	e003      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2101      	movs	r1, #1
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	ea42 0103 	orr.w	r1, r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x396>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0e9b      	lsrs	r3, r3, #26
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	051b      	lsls	r3, r3, #20
 8003aa8:	e018      	b.n	8003adc <HAL_ADC_ConfigChannel+0x3c8>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	e003      	b.n	8003ace <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f003 021f 	and.w	r2, r3, #31
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003adc:	430b      	orrs	r3, r1
 8003ade:	e07e      	b.n	8003bde <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d107      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x3e8>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	0e9b      	lsrs	r3, r3, #26
 8003af2:	3301      	adds	r3, #1
 8003af4:	069b      	lsls	r3, r3, #26
 8003af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003afa:	e015      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x414>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003b14:	2320      	movs	r3, #32
 8003b16:	e003      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	3301      	adds	r3, #1
 8003b22:	069b      	lsls	r3, r3, #26
 8003b24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d109      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x434>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	0e9b      	lsrs	r3, r3, #26
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	e017      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x464>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	61bb      	str	r3, [r7, #24]
  return result;
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003b60:	2320      	movs	r3, #32
 8003b62:	e003      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	2101      	movs	r1, #1
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	ea42 0103 	orr.w	r1, r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10d      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x490>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f003 021f 	and.w	r2, r3, #31
 8003b94:	4613      	mov	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	4413      	add	r3, r2
 8003b9a:	3b1e      	subs	r3, #30
 8003b9c:	051b      	lsls	r3, r3, #20
 8003b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	e01b      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x4c8>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	60fb      	str	r3, [r7, #12]
  return result;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e003      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f003 021f 	and.w	r2, r3, #31
 8003bce:	4613      	mov	r3, r2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3b1e      	subs	r3, #30
 8003bd6:	051b      	lsls	r3, r3, #20
 8003bd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	6892      	ldr	r2, [r2, #8]
 8003be2:	4619      	mov	r1, r3
 8003be4:	f7ff f9de 	bl	8002fa4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f280 80cf 	bge.w	8003d90 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a06      	ldr	r2, [pc, #24]	; (8003c10 <HAL_ADC_ConfigChannel+0x4fc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_ADC_ConfigChannel+0x4f2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a04      	ldr	r2, [pc, #16]	; (8003c14 <HAL_ADC_ConfigChannel+0x500>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10a      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x508>
 8003c06:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <HAL_ADC_ConfigChannel+0x504>)
 8003c08:	e009      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x50a>
 8003c0a:	bf00      	nop
 8003c0c:	47ff0000 	.word	0x47ff0000
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40022100 	.word	0x40022100
 8003c18:	40022300 	.word	0x40022300
 8003c1c:	4b61      	ldr	r3, [pc, #388]	; (8003da4 <HAL_ADC_ConfigChannel+0x690>)
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff f90c 	bl	8002e3c <LL_ADC_GetCommonPathInternalCh>
 8003c24:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a5f      	ldr	r2, [pc, #380]	; (8003da8 <HAL_ADC_ConfigChannel+0x694>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_ADC_ConfigChannel+0x526>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a5d      	ldr	r2, [pc, #372]	; (8003dac <HAL_ADC_ConfigChannel+0x698>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10e      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x544>
 8003c3a:	485b      	ldr	r0, [pc, #364]	; (8003da8 <HAL_ADC_ConfigChannel+0x694>)
 8003c3c:	f7ff fa86 	bl	800314c <LL_ADC_IsEnabled>
 8003c40:	4604      	mov	r4, r0
 8003c42:	485a      	ldr	r0, [pc, #360]	; (8003dac <HAL_ADC_ConfigChannel+0x698>)
 8003c44:	f7ff fa82 	bl	800314c <LL_ADC_IsEnabled>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4323      	orrs	r3, r4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	e008      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x556>
 8003c58:	4855      	ldr	r0, [pc, #340]	; (8003db0 <HAL_ADC_ConfigChannel+0x69c>)
 8003c5a:	f7ff fa77 	bl	800314c <LL_ADC_IsEnabled>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d07d      	beq.n	8003d6a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a50      	ldr	r2, [pc, #320]	; (8003db4 <HAL_ADC_ConfigChannel+0x6a0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d130      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x5c6>
 8003c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d12b      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a4a      	ldr	r2, [pc, #296]	; (8003db0 <HAL_ADC_ConfigChannel+0x69c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	f040 8081 	bne.w	8003d90 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a45      	ldr	r2, [pc, #276]	; (8003da8 <HAL_ADC_ConfigChannel+0x694>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_ADC_ConfigChannel+0x58e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a43      	ldr	r2, [pc, #268]	; (8003dac <HAL_ADC_ConfigChannel+0x698>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x592>
 8003ca2:	4a45      	ldr	r2, [pc, #276]	; (8003db8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003ca4:	e000      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x594>
 8003ca6:	4a3f      	ldr	r2, [pc, #252]	; (8003da4 <HAL_ADC_ConfigChannel+0x690>)
 8003ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003caa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f7ff f8b0 	bl	8002e16 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cb6:	4b41      	ldr	r3, [pc, #260]	; (8003dbc <HAL_ADC_ConfigChannel+0x6a8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	4a40      	ldr	r2, [pc, #256]	; (8003dc0 <HAL_ADC_ConfigChannel+0x6ac>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003cca:	e002      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f9      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cd8:	e05a      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a39      	ldr	r2, [pc, #228]	; (8003dc4 <HAL_ADC_ConfigChannel+0x6b0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d11e      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x60e>
 8003ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d119      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2f      	ldr	r2, [pc, #188]	; (8003db0 <HAL_ADC_ConfigChannel+0x69c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d14b      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2a      	ldr	r2, [pc, #168]	; (8003da8 <HAL_ADC_ConfigChannel+0x694>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0x5f8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a29      	ldr	r2, [pc, #164]	; (8003dac <HAL_ADC_ConfigChannel+0x698>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x5fc>
 8003d0c:	4a2a      	ldr	r2, [pc, #168]	; (8003db8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003d0e:	e000      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x5fe>
 8003d10:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <HAL_ADC_ConfigChannel+0x690>)
 8003d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f7ff f87b 	bl	8002e16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d20:	e036      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a28      	ldr	r2, [pc, #160]	; (8003dc8 <HAL_ADC_ConfigChannel+0x6b4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d131      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x67c>
 8003d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d12c      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <HAL_ADC_ConfigChannel+0x69c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d127      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <HAL_ADC_ConfigChannel+0x694>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <HAL_ADC_ConfigChannel+0x640>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a17      	ldr	r2, [pc, #92]	; (8003dac <HAL_ADC_ConfigChannel+0x698>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d101      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x644>
 8003d54:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003d56:	e000      	b.n	8003d5a <HAL_ADC_ConfigChannel+0x646>
 8003d58:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <HAL_ADC_ConfigChannel+0x690>)
 8003d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f7ff f857 	bl	8002e16 <LL_ADC_SetCommonPathInternalCh>
 8003d68:	e012      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d7c:	e008      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3784      	adds	r7, #132	; 0x84
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd90      	pop	{r4, r7, pc}
 8003da4:	58026300 	.word	0x58026300
 8003da8:	40022000 	.word	0x40022000
 8003dac:	40022100 	.word	0x40022100
 8003db0:	58026000 	.word	0x58026000
 8003db4:	cb840000 	.word	0xcb840000
 8003db8:	40022300 	.word	0x40022300
 8003dbc:	24000088 	.word	0x24000088
 8003dc0:	053e2d63 	.word	0x053e2d63
 8003dc4:	c7520000 	.word	0xc7520000
 8003dc8:	cfb80000 	.word	0xcfb80000

08003dcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff f9b7 	bl	800314c <LL_ADC_IsEnabled>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d16e      	bne.n	8003ec2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <ADC_Enable+0x100>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	f043 0210 	orr.w	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	f043 0201 	orr.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e05a      	b.n	8003ec4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff f972 	bl	80030fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e18:	f7fe ffbc 	bl	8002d94 <HAL_GetTick>
 8003e1c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2b      	ldr	r2, [pc, #172]	; (8003ed0 <ADC_Enable+0x104>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d004      	beq.n	8003e32 <ADC_Enable+0x66>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a29      	ldr	r2, [pc, #164]	; (8003ed4 <ADC_Enable+0x108>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <ADC_Enable+0x6a>
 8003e32:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <ADC_Enable+0x10c>)
 8003e34:	e000      	b.n	8003e38 <ADC_Enable+0x6c>
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <ADC_Enable+0x110>)
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff f903 	bl	8003044 <LL_ADC_GetMultimode>
 8003e3e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <ADC_Enable+0x108>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d002      	beq.n	8003e50 <ADC_Enable+0x84>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	e000      	b.n	8003e52 <ADC_Enable+0x86>
 8003e50:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <ADC_Enable+0x104>)
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d02c      	beq.n	8003eb4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d130      	bne.n	8003ec2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e60:	e028      	b.n	8003eb4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff f970 	bl	800314c <LL_ADC_IsEnabled>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff f940 	bl	80030fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e7c:	f7fe ff8a 	bl	8002d94 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d914      	bls.n	8003eb4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d00d      	beq.n	8003eb4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	f043 0210 	orr.w	r2, r3, #16
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f043 0201 	orr.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e007      	b.n	8003ec4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d1cf      	bne.n	8003e62 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	8000003f 	.word	0x8000003f
 8003ed0:	40022000 	.word	0x40022000
 8003ed4:	40022100 	.word	0x40022100
 8003ed8:	40022300 	.word	0x40022300
 8003edc:	58026300 	.word	0x58026300

08003ee0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff f940 	bl	8003172 <LL_ADC_IsDisableOngoing>
 8003ef2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff f927 	bl	800314c <LL_ADC_IsEnabled>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d047      	beq.n	8003f94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d144      	bne.n	8003f94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 030d 	and.w	r3, r3, #13
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d10c      	bne.n	8003f32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f901 	bl	8003124 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2203      	movs	r2, #3
 8003f28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f2a:	f7fe ff33 	bl	8002d94 <HAL_GetTick>
 8003f2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f30:	e029      	b.n	8003f86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	f043 0210 	orr.w	r2, r3, #16
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e023      	b.n	8003f96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f4e:	f7fe ff21 	bl	8002d94 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d914      	bls.n	8003f86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	f043 0210 	orr.w	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e007      	b.n	8003f96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1dc      	bne.n	8003f4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d14b      	bne.n	8004050 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d021      	beq.n	8004016 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe ff92 	bl	8002f00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d032      	beq.n	8004048 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d12b      	bne.n	8004048 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d11f      	bne.n	8004048 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	f043 0201 	orr.w	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
 8004014:	e018      	b.n	8004048 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d111      	bne.n	8004048 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7ff fb45 	bl	80036d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800404e:	e00e      	b.n	800406e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff fb4f 	bl	8003700 <HAL_ADC_ErrorCallback>
}
 8004062:	e004      	b.n	800406e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7ff fb31 	bl	80036ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	f043 0204 	orr.w	r2, r3, #4
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff fb21 	bl	8003700 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a7a      	ldr	r2, [pc, #488]	; (80042c0 <ADC_ConfigureBoostMode+0x1f8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <ADC_ConfigureBoostMode+0x1c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a79      	ldr	r2, [pc, #484]	; (80042c4 <ADC_ConfigureBoostMode+0x1fc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d109      	bne.n	80040f8 <ADC_ConfigureBoostMode+0x30>
 80040e4:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <ADC_ConfigureBoostMode+0x200>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e008      	b.n	800410a <ADC_ConfigureBoostMode+0x42>
 80040f8:	4b74      	ldr	r3, [pc, #464]	; (80042cc <ADC_ConfigureBoostMode+0x204>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01c      	beq.n	8004148 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800410e:	f005 f87f 	bl	8009210 <HAL_RCC_GetHCLKFreq>
 8004112:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800411c:	d010      	beq.n	8004140 <ADC_ConfigureBoostMode+0x78>
 800411e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004122:	d873      	bhi.n	800420c <ADC_ConfigureBoostMode+0x144>
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004128:	d002      	beq.n	8004130 <ADC_ConfigureBoostMode+0x68>
 800412a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800412e:	d16d      	bne.n	800420c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	60fb      	str	r3, [r7, #12]
        break;
 800413e:	e068      	b.n	8004212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	089b      	lsrs	r3, r3, #2
 8004144:	60fb      	str	r3, [r7, #12]
        break;
 8004146:	e064      	b.n	8004212 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004148:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	f006 fb06 	bl	800a760 <HAL_RCCEx_GetPeriphCLKFreq>
 8004154:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800415e:	d051      	beq.n	8004204 <ADC_ConfigureBoostMode+0x13c>
 8004160:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004164:	d854      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x148>
 8004166:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800416a:	d047      	beq.n	80041fc <ADC_ConfigureBoostMode+0x134>
 800416c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004170:	d84e      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x148>
 8004172:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004176:	d03d      	beq.n	80041f4 <ADC_ConfigureBoostMode+0x12c>
 8004178:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800417c:	d848      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x148>
 800417e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004182:	d033      	beq.n	80041ec <ADC_ConfigureBoostMode+0x124>
 8004184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004188:	d842      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x148>
 800418a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800418e:	d029      	beq.n	80041e4 <ADC_ConfigureBoostMode+0x11c>
 8004190:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004194:	d83c      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x148>
 8004196:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800419a:	d01a      	beq.n	80041d2 <ADC_ConfigureBoostMode+0x10a>
 800419c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80041a0:	d836      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x148>
 80041a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041a6:	d014      	beq.n	80041d2 <ADC_ConfigureBoostMode+0x10a>
 80041a8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041ac:	d830      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x148>
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b2:	d00e      	beq.n	80041d2 <ADC_ConfigureBoostMode+0x10a>
 80041b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b8:	d82a      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x148>
 80041ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041be:	d008      	beq.n	80041d2 <ADC_ConfigureBoostMode+0x10a>
 80041c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041c4:	d824      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x148>
 80041c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041ca:	d002      	beq.n	80041d2 <ADC_ConfigureBoostMode+0x10a>
 80041cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041d0:	d11e      	bne.n	8004210 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	0c9b      	lsrs	r3, r3, #18
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	60fb      	str	r3, [r7, #12]
        break;
 80041e2:	e016      	b.n	8004212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	60fb      	str	r3, [r7, #12]
        break;
 80041ea:	e012      	b.n	8004212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	60fb      	str	r3, [r7, #12]
        break;
 80041f2:	e00e      	b.n	8004212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	099b      	lsrs	r3, r3, #6
 80041f8:	60fb      	str	r3, [r7, #12]
        break;
 80041fa:	e00a      	b.n	8004212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	09db      	lsrs	r3, r3, #7
 8004200:	60fb      	str	r3, [r7, #12]
        break;
 8004202:	e006      	b.n	8004212 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	60fb      	str	r3, [r7, #12]
        break;
 800420a:	e002      	b.n	8004212 <ADC_ConfigureBoostMode+0x14a>
        break;
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004210:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004212:	f7fe fdcb 	bl	8002dac <HAL_GetREVID>
 8004216:	4603      	mov	r3, r0
 8004218:	f241 0203 	movw	r2, #4099	; 0x1003
 800421c:	4293      	cmp	r3, r2
 800421e:	d815      	bhi.n	800424c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4a2b      	ldr	r2, [pc, #172]	; (80042d0 <ADC_ConfigureBoostMode+0x208>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d908      	bls.n	800423a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004236:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004238:	e03e      	b.n	80042b8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004248:	609a      	str	r2, [r3, #8]
}
 800424a:	e035      	b.n	80042b8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4a1f      	ldr	r2, [pc, #124]	; (80042d4 <ADC_ConfigureBoostMode+0x20c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d808      	bhi.n	800426c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004268:	609a      	str	r2, [r3, #8]
}
 800426a:	e025      	b.n	80042b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a1a      	ldr	r2, [pc, #104]	; (80042d8 <ADC_ConfigureBoostMode+0x210>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d80a      	bhi.n	800428a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	e016      	b.n	80042b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a13      	ldr	r2, [pc, #76]	; (80042dc <ADC_ConfigureBoostMode+0x214>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d80a      	bhi.n	80042a8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a4:	609a      	str	r2, [r3, #8]
}
 80042a6:	e007      	b.n	80042b8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40022000 	.word	0x40022000
 80042c4:	40022100 	.word	0x40022100
 80042c8:	40022300 	.word	0x40022300
 80042cc:	58026300 	.word	0x58026300
 80042d0:	01312d00 	.word	0x01312d00
 80042d4:	005f5e10 	.word	0x005f5e10
 80042d8:	00bebc20 	.word	0x00bebc20
 80042dc:	017d7840 	.word	0x017d7840

080042e0 <LL_ADC_IsEnabled>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <LL_ADC_IsEnabled+0x18>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <LL_ADC_IsEnabled+0x1a>
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <LL_ADC_StartCalibration>:
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <LL_ADC_StartCalibration+0x38>)
 800431a:	4013      	ands	r3, r2
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004328:	430a      	orrs	r2, r1
 800432a:	4313      	orrs	r3, r2
 800432c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	3ffeffc0 	.word	0x3ffeffc0

08004344 <LL_ADC_IsCalibrationOnGoing>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004358:	d101      	bne.n	800435e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <LL_ADC_REG_IsConversionOngoing>:
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b04      	cmp	r3, #4
 800437e:	d101      	bne.n	8004384 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_ADCEx_Calibration_Start+0x1e>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e04c      	b.n	800444c <HAL_ADCEx_Calibration_Start+0xb8>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff fd90 	bl	8003ee0 <ADC_Disable>
 80043c0:	4603      	mov	r3, r0
 80043c2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d135      	bne.n	8004436 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ce:	4b21      	ldr	r3, [pc, #132]	; (8004454 <HAL_ADCEx_Calibration_Start+0xc0>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	f043 0202 	orr.w	r2, r3, #2
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff ff90 	bl	8004308 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043e8:	e014      	b.n	8004414 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	3301      	adds	r3, #1
 80043ee:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4a19      	ldr	r2, [pc, #100]	; (8004458 <HAL_ADCEx_Calibration_Start+0xc4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d30d      	bcc.n	8004414 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fc:	f023 0312 	bic.w	r3, r3, #18
 8004400:	f043 0210 	orr.w	r2, r3, #16
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e01b      	b.n	800444c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff93 	bl	8004344 <LL_ADC_IsCalibrationOnGoing>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e2      	bne.n	80043ea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004428:	f023 0303 	bic.w	r3, r3, #3
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
 8004434:	e005      	b.n	8004442 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f043 0210 	orr.w	r2, r3, #16
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800444a:	7dfb      	ldrb	r3, [r7, #23]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	ffffeefd 	.word	0xffffeefd
 8004458:	25c3f800 	.word	0x25c3f800

0800445c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b09f      	sub	sp, #124	; 0x7c
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004476:	2302      	movs	r3, #2
 8004478:	e0be      	b.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004482:	2300      	movs	r3, #0
 8004484:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004486:	2300      	movs	r3, #0
 8004488:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a5c      	ldr	r2, [pc, #368]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d102      	bne.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004494:	4b5b      	ldr	r3, [pc, #364]	; (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	e001      	b.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e09d      	b.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff ff54 	bl	800436c <LL_ADC_REG_IsConversionOngoing>
 80044c4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff4e 	bl	800436c <LL_ADC_REG_IsConversionOngoing>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d17f      	bne.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d17c      	bne.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a47      	ldr	r2, [pc, #284]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a46      	ldr	r2, [pc, #280]	; (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d101      	bne.n	80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80044f0:	4b45      	ldr	r3, [pc, #276]	; (8004608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044f2:	e000      	b.n	80044f6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80044f4:	4b45      	ldr	r3, [pc, #276]	; (800460c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d039      	beq.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	431a      	orrs	r2, r3
 800450e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004510:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a3a      	ldr	r2, [pc, #232]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a38      	ldr	r2, [pc, #224]	; (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10e      	bne.n	8004544 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004526:	4836      	ldr	r0, [pc, #216]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004528:	f7ff feda 	bl	80042e0 <LL_ADC_IsEnabled>
 800452c:	4604      	mov	r4, r0
 800452e:	4835      	ldr	r0, [pc, #212]	; (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004530:	f7ff fed6 	bl	80042e0 <LL_ADC_IsEnabled>
 8004534:	4603      	mov	r3, r0
 8004536:	4323      	orrs	r3, r4
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e008      	b.n	8004556 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004544:	4832      	ldr	r0, [pc, #200]	; (8004610 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004546:	f7ff fecb 	bl	80042e0 <LL_ADC_IsEnabled>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	bf0c      	ite	eq
 8004550:	2301      	moveq	r3, #1
 8004552:	2300      	movne	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d047      	beq.n	80045ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800455a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004560:	4013      	ands	r3, r2
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	6811      	ldr	r1, [r2, #0]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	6892      	ldr	r2, [r2, #8]
 800456a:	430a      	orrs	r2, r1
 800456c:	431a      	orrs	r2, r3
 800456e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004570:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004572:	e03a      	b.n	80045ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800457c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10e      	bne.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004594:	481a      	ldr	r0, [pc, #104]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004596:	f7ff fea3 	bl	80042e0 <LL_ADC_IsEnabled>
 800459a:	4604      	mov	r4, r0
 800459c:	4819      	ldr	r0, [pc, #100]	; (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800459e:	f7ff fe9f 	bl	80042e0 <LL_ADC_IsEnabled>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4323      	orrs	r3, r4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e008      	b.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80045b2:	4817      	ldr	r0, [pc, #92]	; (8004610 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80045b4:	f7ff fe94 	bl	80042e0 <LL_ADC_IsEnabled>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf0c      	ite	eq
 80045be:	2301      	moveq	r3, #1
 80045c0:	2300      	movne	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045d2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045d4:	e009      	b.n	80045ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80045e8:	e000      	b.n	80045ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	377c      	adds	r7, #124	; 0x7c
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd90      	pop	{r4, r7, pc}
 8004600:	40022000 	.word	0x40022000
 8004604:	40022100 	.word	0x40022100
 8004608:	40022300 	.word	0x40022300
 800460c:	58026300 	.word	0x58026300
 8004610:	58026000 	.word	0x58026000
 8004614:	fffff0e0 	.word	0xfffff0e0

08004618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <__NVIC_SetPriorityGrouping+0x40>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004634:	4013      	ands	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <__NVIC_SetPriorityGrouping+0x44>)
 8004642:	4313      	orrs	r3, r2
 8004644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <__NVIC_SetPriorityGrouping+0x40>)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	60d3      	str	r3, [r2, #12]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000ed00 	.word	0xe000ed00
 800465c:	05fa0000 	.word	0x05fa0000

08004660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004664:	4b04      	ldr	r3, [pc, #16]	; (8004678 <__NVIC_GetPriorityGrouping+0x18>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	0a1b      	lsrs	r3, r3, #8
 800466a:	f003 0307 	and.w	r3, r3, #7
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	e000ed00 	.word	0xe000ed00

0800467c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800468a:	2b00      	cmp	r3, #0
 800468c:	db0b      	blt.n	80046a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	f003 021f 	and.w	r2, r3, #31
 8004694:	4907      	ldr	r1, [pc, #28]	; (80046b4 <__NVIC_EnableIRQ+0x38>)
 8004696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	2001      	movs	r0, #1
 800469e:	fa00 f202 	lsl.w	r2, r0, r2
 80046a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	e000e100 	.word	0xe000e100

080046b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	6039      	str	r1, [r7, #0]
 80046c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	db0a      	blt.n	80046e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	490c      	ldr	r1, [pc, #48]	; (8004704 <__NVIC_SetPriority+0x4c>)
 80046d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046d6:	0112      	lsls	r2, r2, #4
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	440b      	add	r3, r1
 80046dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046e0:	e00a      	b.n	80046f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4908      	ldr	r1, [pc, #32]	; (8004708 <__NVIC_SetPriority+0x50>)
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	3b04      	subs	r3, #4
 80046f0:	0112      	lsls	r2, r2, #4
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	440b      	add	r3, r1
 80046f6:	761a      	strb	r2, [r3, #24]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	e000e100 	.word	0xe000e100
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f1c3 0307 	rsb	r3, r3, #7
 8004726:	2b04      	cmp	r3, #4
 8004728:	bf28      	it	cs
 800472a:	2304      	movcs	r3, #4
 800472c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3304      	adds	r3, #4
 8004732:	2b06      	cmp	r3, #6
 8004734:	d902      	bls.n	800473c <NVIC_EncodePriority+0x30>
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3b03      	subs	r3, #3
 800473a:	e000      	b.n	800473e <NVIC_EncodePriority+0x32>
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	401a      	ands	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	fa01 f303 	lsl.w	r3, r1, r3
 800475e:	43d9      	mvns	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004764:	4313      	orrs	r3, r2
         );
}
 8004766:	4618      	mov	r0, r3
 8004768:	3724      	adds	r7, #36	; 0x24
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ff4c 	bl	8004618 <__NVIC_SetPriorityGrouping>
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004796:	f7ff ff63 	bl	8004660 <__NVIC_GetPriorityGrouping>
 800479a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	f7ff ffb3 	bl	800470c <NVIC_EncodePriority>
 80047a6:	4602      	mov	r2, r0
 80047a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff ff82 	bl	80046b8 <__NVIC_SetPriority>
}
 80047b4:	bf00      	nop
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ff56 	bl	800467c <__NVIC_EnableIRQ>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e014      	b.n	8004814 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	791b      	ldrb	r3, [r3, #4]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd fd0e 	bl	800221c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e046      	b.n	80048be <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	795b      	ldrb	r3, [r3, #5]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_DAC_Start+0x20>
 8004838:	2302      	movs	r3, #2
 800483a:	e040      	b.n	80048be <HAL_DAC_Start+0xa2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6819      	ldr	r1, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2201      	movs	r2, #1
 8004856:	409a      	lsls	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004870:	2b02      	cmp	r3, #2
 8004872:	d11d      	bne.n	80048b0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	e014      	b.n	80048b0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2102      	movs	r1, #2
 8004898:	fa01 f303 	lsl.w	r3, r1, r3
 800489c:	429a      	cmp	r2, r3
 800489e:	d107      	bne.n	80048b0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0202 	orr.w	r2, r2, #2
 80048ae:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0a2      	b.n	8004a2a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	795b      	ldrb	r3, [r3, #5]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_DAC_Start_DMA+0x24>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e09c      	b.n	8004a2a <HAL_DAC_Start_DMA+0x15e>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2202      	movs	r2, #2
 80048fa:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d129      	bne.n	8004956 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4a4b      	ldr	r2, [pc, #300]	; (8004a34 <HAL_DAC_Start_DMA+0x168>)
 8004908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	4a4a      	ldr	r2, [pc, #296]	; (8004a38 <HAL_DAC_Start_DMA+0x16c>)
 8004910:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	4a49      	ldr	r2, [pc, #292]	; (8004a3c <HAL_DAC_Start_DMA+0x170>)
 8004918:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004928:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_DAC_Start_DMA+0x6c>
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	2b04      	cmp	r3, #4
 8004934:	d005      	beq.n	8004942 <HAL_DAC_Start_DMA+0x76>
 8004936:	e009      	b.n	800494c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	613b      	str	r3, [r7, #16]
        break;
 8004940:	e033      	b.n	80049aa <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	613b      	str	r3, [r7, #16]
        break;
 800494a:	e02e      	b.n	80049aa <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3310      	adds	r3, #16
 8004952:	613b      	str	r3, [r7, #16]
        break;
 8004954:	e029      	b.n	80049aa <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	4a39      	ldr	r2, [pc, #228]	; (8004a40 <HAL_DAC_Start_DMA+0x174>)
 800495c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	4a38      	ldr	r2, [pc, #224]	; (8004a44 <HAL_DAC_Start_DMA+0x178>)
 8004964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	4a37      	ldr	r2, [pc, #220]	; (8004a48 <HAL_DAC_Start_DMA+0x17c>)
 800496c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800497c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_DAC_Start_DMA+0xc0>
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	2b04      	cmp	r3, #4
 8004988:	d005      	beq.n	8004996 <HAL_DAC_Start_DMA+0xca>
 800498a:	e009      	b.n	80049a0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3314      	adds	r3, #20
 8004992:	613b      	str	r3, [r7, #16]
        break;
 8004994:	e009      	b.n	80049aa <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3318      	adds	r3, #24
 800499c:	613b      	str	r3, [r7, #16]
        break;
 800499e:	e004      	b.n	80049aa <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	331c      	adds	r3, #28
 80049a6:	613b      	str	r3, [r7, #16]
        break;
 80049a8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d111      	bne.n	80049d4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6898      	ldr	r0, [r3, #8]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	f000 fe67 	bl	800569c <HAL_DMA_Start_IT>
 80049ce:	4603      	mov	r3, r0
 80049d0:	75fb      	strb	r3, [r7, #23]
 80049d2:	e010      	b.n	80049f6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80049e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68d8      	ldr	r0, [r3, #12]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	f000 fe55 	bl	800569c <HAL_DMA_Start_IT>
 80049f2:	4603      	mov	r3, r0
 80049f4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10c      	bne.n	8004a1c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6819      	ldr	r1, [r3, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2201      	movs	r2, #1
 8004a10:	409a      	lsls	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e005      	b.n	8004a28 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f043 0204 	orr.w	r2, r3, #4
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	08004ebd 	.word	0x08004ebd
 8004a38:	08004edf 	.word	0x08004edf
 8004a3c:	08004efb 	.word	0x08004efb
 8004a40:	08004f79 	.word	0x08004f79
 8004a44:	08004f9b 	.word	0x08004f9b
 8004a48:	08004fb7 	.word	0x08004fb7

08004a4c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e03e      	b.n	8004ade <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	43da      	mvns	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	400a      	ands	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43da      	mvns	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	400a      	ands	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10d      	bne.n	8004abc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 f863 	bl	8005b70 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e00c      	b.n	8004ad6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 f855 	bl	8005b70 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004ad4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01d      	beq.n	8004b44 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d018      	beq.n	8004b44 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2204      	movs	r2, #4
 8004b16:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f043 0201 	orr.w	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f86f 	bl	8004c22 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01d      	beq.n	8004b8a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d018      	beq.n	8004b8a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f043 0202 	orr.w	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004b72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004b82:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f9ed 	bl	8004f64 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e015      	b.n	8004bda <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e004      	b.n	8004bd0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	3314      	adds	r3, #20
 8004bce:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_DAC_ConfigChannel+0x1e>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e12a      	b.n	8004eb0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	795b      	ldrb	r3, [r3, #5]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_DAC_ConfigChannel+0x2e>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e124      	b.n	8004eb0 <HAL_DAC_ConfigChannel+0x278>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d17a      	bne.n	8004d70 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c7a:	f7fe f88b 	bl	8002d94 <HAL_GetTick>
 8004c7e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d13d      	bne.n	8004d02 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c86:	e018      	b.n	8004cba <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c88:	f7fe f884 	bl	8002d94 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d911      	bls.n	8004cba <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c9c:	4b86      	ldr	r3, [pc, #536]	; (8004eb8 <HAL_DAC_ConfigChannel+0x280>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f043 0208 	orr.w	r2, r3, #8
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2203      	movs	r2, #3
 8004cb4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e0fa      	b.n	8004eb0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc0:	4b7d      	ldr	r3, [pc, #500]	; (8004eb8 <HAL_DAC_ConfigChannel+0x280>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1df      	bne.n	8004c88 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	6992      	ldr	r2, [r2, #24]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
 8004cd2:	e020      	b.n	8004d16 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004cd4:	f7fe f85e 	bl	8002d94 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d90f      	bls.n	8004d02 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	da0a      	bge.n	8004d02 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f043 0208 	orr.w	r2, r3, #8
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e0d6      	b.n	8004eb0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	dbe3      	blt.n	8004cd4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	6992      	ldr	r2, [r2, #24]
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004d26:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	ea02 0103 	and.w	r1, r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	21ff      	movs	r1, #255	; 0xff
 8004d52:	fa01 f303 	lsl.w	r3, r1, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	ea02 0103 	and.w	r1, r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6a1a      	ldr	r2, [r3, #32]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f003 0310 	and.w	r3, r3, #16
 8004d66:	409a      	lsls	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d11d      	bne.n	8004db4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	221f      	movs	r2, #31
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4013      	ands	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2207      	movs	r2, #7
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d102      	bne.n	8004dde <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
 8004ddc:	e00f      	b.n	8004dfe <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d102      	bne.n	8004dec <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004de6:	2301      	movs	r3, #1
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dea:	e008      	b.n	8004dfe <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004df4:	2301      	movs	r3, #1
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
 8004df8:	e001      	b.n	8004dfe <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43da      	mvns	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	400a      	ands	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	22c0      	movs	r2, #192	; 0xc0
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43da      	mvns	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3728      	adds	r7, #40	; 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20008000 	.word	0x20008000

08004ebc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff fe8b 	bl	8004be6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	711a      	strb	r2, [r3, #4]
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff fe84 	bl	8004bfa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f043 0204 	orr.w	r2, r3, #4
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff fe7a 	bl	8004c0e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	711a      	strb	r2, [r3, #4]
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff ffce 	bl	8004f28 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	711a      	strb	r2, [r3, #4]
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7ff ffc7 	bl	8004f3c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f043 0204 	orr.w	r2, r3, #4
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff ffbd 	bl	8004f50 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	711a      	strb	r2, [r3, #4]
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004fec:	f7fd fed2 	bl	8002d94 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e316      	b.n	800562a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a66      	ldr	r2, [pc, #408]	; (800519c <HAL_DMA_Init+0x1b8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d04a      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a65      	ldr	r2, [pc, #404]	; (80051a0 <HAL_DMA_Init+0x1bc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d045      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a63      	ldr	r2, [pc, #396]	; (80051a4 <HAL_DMA_Init+0x1c0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d040      	beq.n	800509c <HAL_DMA_Init+0xb8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a62      	ldr	r2, [pc, #392]	; (80051a8 <HAL_DMA_Init+0x1c4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d03b      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a60      	ldr	r2, [pc, #384]	; (80051ac <HAL_DMA_Init+0x1c8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d036      	beq.n	800509c <HAL_DMA_Init+0xb8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a5f      	ldr	r2, [pc, #380]	; (80051b0 <HAL_DMA_Init+0x1cc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d031      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a5d      	ldr	r2, [pc, #372]	; (80051b4 <HAL_DMA_Init+0x1d0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d02c      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a5c      	ldr	r2, [pc, #368]	; (80051b8 <HAL_DMA_Init+0x1d4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d027      	beq.n	800509c <HAL_DMA_Init+0xb8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a5a      	ldr	r2, [pc, #360]	; (80051bc <HAL_DMA_Init+0x1d8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a59      	ldr	r2, [pc, #356]	; (80051c0 <HAL_DMA_Init+0x1dc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d01d      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a57      	ldr	r2, [pc, #348]	; (80051c4 <HAL_DMA_Init+0x1e0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_DMA_Init+0xb8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a56      	ldr	r2, [pc, #344]	; (80051c8 <HAL_DMA_Init+0x1e4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a54      	ldr	r2, [pc, #336]	; (80051cc <HAL_DMA_Init+0x1e8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_DMA_Init+0xb8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a53      	ldr	r2, [pc, #332]	; (80051d0 <HAL_DMA_Init+0x1ec>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a51      	ldr	r2, [pc, #324]	; (80051d4 <HAL_DMA_Init+0x1f0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a50      	ldr	r2, [pc, #320]	; (80051d8 <HAL_DMA_Init+0x1f4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d101      	bne.n	80050a0 <HAL_DMA_Init+0xbc>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <HAL_DMA_Init+0xbe>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 813b 	beq.w	800531e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a37      	ldr	r2, [pc, #220]	; (800519c <HAL_DMA_Init+0x1b8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d04a      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a36      	ldr	r2, [pc, #216]	; (80051a0 <HAL_DMA_Init+0x1bc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d045      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a34      	ldr	r2, [pc, #208]	; (80051a4 <HAL_DMA_Init+0x1c0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d040      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a33      	ldr	r2, [pc, #204]	; (80051a8 <HAL_DMA_Init+0x1c4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d03b      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a31      	ldr	r2, [pc, #196]	; (80051ac <HAL_DMA_Init+0x1c8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d036      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a30      	ldr	r2, [pc, #192]	; (80051b0 <HAL_DMA_Init+0x1cc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d031      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2e      	ldr	r2, [pc, #184]	; (80051b4 <HAL_DMA_Init+0x1d0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d02c      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2d      	ldr	r2, [pc, #180]	; (80051b8 <HAL_DMA_Init+0x1d4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d027      	beq.n	8005158 <HAL_DMA_Init+0x174>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2b      	ldr	r2, [pc, #172]	; (80051bc <HAL_DMA_Init+0x1d8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d022      	beq.n	8005158 <HAL_DMA_Init+0x174>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2a      	ldr	r2, [pc, #168]	; (80051c0 <HAL_DMA_Init+0x1dc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d01d      	beq.n	8005158 <HAL_DMA_Init+0x174>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <HAL_DMA_Init+0x1e0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d018      	beq.n	8005158 <HAL_DMA_Init+0x174>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <HAL_DMA_Init+0x1e4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d013      	beq.n	8005158 <HAL_DMA_Init+0x174>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a25      	ldr	r2, [pc, #148]	; (80051cc <HAL_DMA_Init+0x1e8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00e      	beq.n	8005158 <HAL_DMA_Init+0x174>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a24      	ldr	r2, [pc, #144]	; (80051d0 <HAL_DMA_Init+0x1ec>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d009      	beq.n	8005158 <HAL_DMA_Init+0x174>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a22      	ldr	r2, [pc, #136]	; (80051d4 <HAL_DMA_Init+0x1f0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <HAL_DMA_Init+0x174>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a21      	ldr	r2, [pc, #132]	; (80051d8 <HAL_DMA_Init+0x1f4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d108      	bne.n	800516a <HAL_DMA_Init+0x186>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e007      	b.n	800517a <HAL_DMA_Init+0x196>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800517a:	e02f      	b.n	80051dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800517c:	f7fd fe0a 	bl	8002d94 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b05      	cmp	r3, #5
 8005188:	d928      	bls.n	80051dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2203      	movs	r2, #3
 8005194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e246      	b.n	800562a <HAL_DMA_Init+0x646>
 800519c:	40020010 	.word	0x40020010
 80051a0:	40020028 	.word	0x40020028
 80051a4:	40020040 	.word	0x40020040
 80051a8:	40020058 	.word	0x40020058
 80051ac:	40020070 	.word	0x40020070
 80051b0:	40020088 	.word	0x40020088
 80051b4:	400200a0 	.word	0x400200a0
 80051b8:	400200b8 	.word	0x400200b8
 80051bc:	40020410 	.word	0x40020410
 80051c0:	40020428 	.word	0x40020428
 80051c4:	40020440 	.word	0x40020440
 80051c8:	40020458 	.word	0x40020458
 80051cc:	40020470 	.word	0x40020470
 80051d0:	40020488 	.word	0x40020488
 80051d4:	400204a0 	.word	0x400204a0
 80051d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1c8      	bne.n	800517c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4b83      	ldr	r3, [pc, #524]	; (8005404 <HAL_DMA_Init+0x420>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005202:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b04      	cmp	r3, #4
 800522e:	d107      	bne.n	8005240 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	4313      	orrs	r3, r2
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005240:	4b71      	ldr	r3, [pc, #452]	; (8005408 <HAL_DMA_Init+0x424>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	4b71      	ldr	r3, [pc, #452]	; (800540c <HAL_DMA_Init+0x428>)
 8005246:	4013      	ands	r3, r2
 8005248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800524c:	d328      	bcc.n	80052a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b28      	cmp	r3, #40	; 0x28
 8005254:	d903      	bls.n	800525e <HAL_DMA_Init+0x27a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b2e      	cmp	r3, #46	; 0x2e
 800525c:	d917      	bls.n	800528e <HAL_DMA_Init+0x2aa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b3e      	cmp	r3, #62	; 0x3e
 8005264:	d903      	bls.n	800526e <HAL_DMA_Init+0x28a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b42      	cmp	r3, #66	; 0x42
 800526c:	d90f      	bls.n	800528e <HAL_DMA_Init+0x2aa>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b46      	cmp	r3, #70	; 0x46
 8005274:	d903      	bls.n	800527e <HAL_DMA_Init+0x29a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b48      	cmp	r3, #72	; 0x48
 800527c:	d907      	bls.n	800528e <HAL_DMA_Init+0x2aa>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b4e      	cmp	r3, #78	; 0x4e
 8005284:	d905      	bls.n	8005292 <HAL_DMA_Init+0x2ae>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b52      	cmp	r3, #82	; 0x52
 800528c:	d801      	bhi.n	8005292 <HAL_DMA_Init+0x2ae>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <HAL_DMA_Init+0x2b0>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800529e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f023 0307 	bic.w	r3, r3, #7
 80052b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d117      	bne.n	80052fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00e      	beq.n	80052fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f002 fb33 	bl	8007948 <DMA_CheckFifoParam>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2240      	movs	r2, #64	; 0x40
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e197      	b.n	800562a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f002 fa6e 	bl	80077e4 <DMA_CalcBaseAndBitshift>
 8005308:	4603      	mov	r3, r0
 800530a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	223f      	movs	r2, #63	; 0x3f
 8005316:	409a      	lsls	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	609a      	str	r2, [r3, #8]
 800531c:	e0cd      	b.n	80054ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3b      	ldr	r2, [pc, #236]	; (8005410 <HAL_DMA_Init+0x42c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_DMA_Init+0x38a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a39      	ldr	r2, [pc, #228]	; (8005414 <HAL_DMA_Init+0x430>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_DMA_Init+0x38a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a38      	ldr	r2, [pc, #224]	; (8005418 <HAL_DMA_Init+0x434>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_DMA_Init+0x38a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a36      	ldr	r2, [pc, #216]	; (800541c <HAL_DMA_Init+0x438>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_DMA_Init+0x38a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a35      	ldr	r2, [pc, #212]	; (8005420 <HAL_DMA_Init+0x43c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_DMA_Init+0x38a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a33      	ldr	r2, [pc, #204]	; (8005424 <HAL_DMA_Init+0x440>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_DMA_Init+0x38a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a32      	ldr	r2, [pc, #200]	; (8005428 <HAL_DMA_Init+0x444>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_DMA_Init+0x38a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a30      	ldr	r2, [pc, #192]	; (800542c <HAL_DMA_Init+0x448>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d101      	bne.n	8005372 <HAL_DMA_Init+0x38e>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_DMA_Init+0x390>
 8005372:	2300      	movs	r3, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8097 	beq.w	80054a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a24      	ldr	r2, [pc, #144]	; (8005410 <HAL_DMA_Init+0x42c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d021      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a22      	ldr	r2, [pc, #136]	; (8005414 <HAL_DMA_Init+0x430>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01c      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a21      	ldr	r2, [pc, #132]	; (8005418 <HAL_DMA_Init+0x434>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d017      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1f      	ldr	r2, [pc, #124]	; (800541c <HAL_DMA_Init+0x438>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d012      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <HAL_DMA_Init+0x43c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00d      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <HAL_DMA_Init+0x440>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d008      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <HAL_DMA_Init+0x444>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a19      	ldr	r2, [pc, #100]	; (800542c <HAL_DMA_Init+0x448>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_DMA_Init+0x44c>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	d020      	beq.n	8005434 <HAL_DMA_Init+0x450>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b80      	cmp	r3, #128	; 0x80
 80053f8:	d102      	bne.n	8005400 <HAL_DMA_Init+0x41c>
 80053fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053fe:	e01a      	b.n	8005436 <HAL_DMA_Init+0x452>
 8005400:	2300      	movs	r3, #0
 8005402:	e018      	b.n	8005436 <HAL_DMA_Init+0x452>
 8005404:	fe10803f 	.word	0xfe10803f
 8005408:	5c001000 	.word	0x5c001000
 800540c:	ffff0000 	.word	0xffff0000
 8005410:	58025408 	.word	0x58025408
 8005414:	5802541c 	.word	0x5802541c
 8005418:	58025430 	.word	0x58025430
 800541c:	58025444 	.word	0x58025444
 8005420:	58025458 	.word	0x58025458
 8005424:	5802546c 	.word	0x5802546c
 8005428:	58025480 	.word	0x58025480
 800542c:	58025494 	.word	0x58025494
 8005430:	fffe000f 	.word	0xfffe000f
 8005434:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68d2      	ldr	r2, [r2, #12]
 800543a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800543c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005444:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800544c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800545c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005464:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	4b6e      	ldr	r3, [pc, #440]	; (8005634 <HAL_DMA_Init+0x650>)
 800547c:	4413      	add	r3, r2
 800547e:	4a6e      	ldr	r2, [pc, #440]	; (8005638 <HAL_DMA_Init+0x654>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	009a      	lsls	r2, r3, #2
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f002 f9a9 	bl	80077e4 <DMA_CalcBaseAndBitshift>
 8005492:	4603      	mov	r3, r0
 8005494:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	2201      	movs	r2, #1
 80054a0:	409a      	lsls	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	e008      	b.n	80054ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2240      	movs	r2, #64	; 0x40
 80054ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2203      	movs	r2, #3
 80054b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0b7      	b.n	800562a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5f      	ldr	r2, [pc, #380]	; (800563c <HAL_DMA_Init+0x658>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d072      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5d      	ldr	r2, [pc, #372]	; (8005640 <HAL_DMA_Init+0x65c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d06d      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a5c      	ldr	r2, [pc, #368]	; (8005644 <HAL_DMA_Init+0x660>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d068      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a5a      	ldr	r2, [pc, #360]	; (8005648 <HAL_DMA_Init+0x664>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d063      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a59      	ldr	r2, [pc, #356]	; (800564c <HAL_DMA_Init+0x668>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d05e      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a57      	ldr	r2, [pc, #348]	; (8005650 <HAL_DMA_Init+0x66c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d059      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a56      	ldr	r2, [pc, #344]	; (8005654 <HAL_DMA_Init+0x670>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d054      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a54      	ldr	r2, [pc, #336]	; (8005658 <HAL_DMA_Init+0x674>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d04f      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a53      	ldr	r2, [pc, #332]	; (800565c <HAL_DMA_Init+0x678>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d04a      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a51      	ldr	r2, [pc, #324]	; (8005660 <HAL_DMA_Init+0x67c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d045      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a50      	ldr	r2, [pc, #320]	; (8005664 <HAL_DMA_Init+0x680>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d040      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a4e      	ldr	r2, [pc, #312]	; (8005668 <HAL_DMA_Init+0x684>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d03b      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a4d      	ldr	r2, [pc, #308]	; (800566c <HAL_DMA_Init+0x688>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d036      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4b      	ldr	r2, [pc, #300]	; (8005670 <HAL_DMA_Init+0x68c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d031      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4a      	ldr	r2, [pc, #296]	; (8005674 <HAL_DMA_Init+0x690>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d02c      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a48      	ldr	r2, [pc, #288]	; (8005678 <HAL_DMA_Init+0x694>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d027      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a47      	ldr	r2, [pc, #284]	; (800567c <HAL_DMA_Init+0x698>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d022      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a45      	ldr	r2, [pc, #276]	; (8005680 <HAL_DMA_Init+0x69c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01d      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a44      	ldr	r2, [pc, #272]	; (8005684 <HAL_DMA_Init+0x6a0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d018      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a42      	ldr	r2, [pc, #264]	; (8005688 <HAL_DMA_Init+0x6a4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a41      	ldr	r2, [pc, #260]	; (800568c <HAL_DMA_Init+0x6a8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a3f      	ldr	r2, [pc, #252]	; (8005690 <HAL_DMA_Init+0x6ac>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a3e      	ldr	r2, [pc, #248]	; (8005694 <HAL_DMA_Init+0x6b0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a3c      	ldr	r2, [pc, #240]	; (8005698 <HAL_DMA_Init+0x6b4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d101      	bne.n	80055ae <HAL_DMA_Init+0x5ca>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <HAL_DMA_Init+0x5cc>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d032      	beq.n	800561a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f002 fa43 	bl	8007a40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b80      	cmp	r3, #128	; 0x80
 80055c0:	d102      	bne.n	80055c8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d010      	beq.n	8005608 <HAL_DMA_Init+0x624>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d80c      	bhi.n	8005608 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f002 fac0 	bl	8007b74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	e008      	b.n	800561a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	a7fdabf8 	.word	0xa7fdabf8
 8005638:	cccccccd 	.word	0xcccccccd
 800563c:	40020010 	.word	0x40020010
 8005640:	40020028 	.word	0x40020028
 8005644:	40020040 	.word	0x40020040
 8005648:	40020058 	.word	0x40020058
 800564c:	40020070 	.word	0x40020070
 8005650:	40020088 	.word	0x40020088
 8005654:	400200a0 	.word	0x400200a0
 8005658:	400200b8 	.word	0x400200b8
 800565c:	40020410 	.word	0x40020410
 8005660:	40020428 	.word	0x40020428
 8005664:	40020440 	.word	0x40020440
 8005668:	40020458 	.word	0x40020458
 800566c:	40020470 	.word	0x40020470
 8005670:	40020488 	.word	0x40020488
 8005674:	400204a0 	.word	0x400204a0
 8005678:	400204b8 	.word	0x400204b8
 800567c:	58025408 	.word	0x58025408
 8005680:	5802541c 	.word	0x5802541c
 8005684:	58025430 	.word	0x58025430
 8005688:	58025444 	.word	0x58025444
 800568c:	58025458 	.word	0x58025458
 8005690:	5802546c 	.word	0x5802546c
 8005694:	58025480 	.word	0x58025480
 8005698:	58025494 	.word	0x58025494

0800569c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e226      	b.n	8005b06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_DMA_Start_IT+0x2a>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e21f      	b.n	8005b06 <HAL_DMA_Start_IT+0x46a>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	f040 820a 	bne.w	8005af0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a68      	ldr	r2, [pc, #416]	; (8005890 <HAL_DMA_Start_IT+0x1f4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d04a      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a66      	ldr	r2, [pc, #408]	; (8005894 <HAL_DMA_Start_IT+0x1f8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d045      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a65      	ldr	r2, [pc, #404]	; (8005898 <HAL_DMA_Start_IT+0x1fc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d040      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a63      	ldr	r2, [pc, #396]	; (800589c <HAL_DMA_Start_IT+0x200>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d03b      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a62      	ldr	r2, [pc, #392]	; (80058a0 <HAL_DMA_Start_IT+0x204>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d036      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a60      	ldr	r2, [pc, #384]	; (80058a4 <HAL_DMA_Start_IT+0x208>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a5f      	ldr	r2, [pc, #380]	; (80058a8 <HAL_DMA_Start_IT+0x20c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d02c      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5d      	ldr	r2, [pc, #372]	; (80058ac <HAL_DMA_Start_IT+0x210>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d027      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a5c      	ldr	r2, [pc, #368]	; (80058b0 <HAL_DMA_Start_IT+0x214>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a5a      	ldr	r2, [pc, #360]	; (80058b4 <HAL_DMA_Start_IT+0x218>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a59      	ldr	r2, [pc, #356]	; (80058b8 <HAL_DMA_Start_IT+0x21c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a57      	ldr	r2, [pc, #348]	; (80058bc <HAL_DMA_Start_IT+0x220>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a56      	ldr	r2, [pc, #344]	; (80058c0 <HAL_DMA_Start_IT+0x224>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a54      	ldr	r2, [pc, #336]	; (80058c4 <HAL_DMA_Start_IT+0x228>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a53      	ldr	r2, [pc, #332]	; (80058c8 <HAL_DMA_Start_IT+0x22c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a51      	ldr	r2, [pc, #324]	; (80058cc <HAL_DMA_Start_IT+0x230>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d108      	bne.n	800579c <HAL_DMA_Start_IT+0x100>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	e007      	b.n	80057ac <HAL_DMA_Start_IT+0x110>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0201 	bic.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f001 fe6a 	bl	800748c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a34      	ldr	r2, [pc, #208]	; (8005890 <HAL_DMA_Start_IT+0x1f4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d04a      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a33      	ldr	r2, [pc, #204]	; (8005894 <HAL_DMA_Start_IT+0x1f8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d045      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a31      	ldr	r2, [pc, #196]	; (8005898 <HAL_DMA_Start_IT+0x1fc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d040      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a30      	ldr	r2, [pc, #192]	; (800589c <HAL_DMA_Start_IT+0x200>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d03b      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a2e      	ldr	r2, [pc, #184]	; (80058a0 <HAL_DMA_Start_IT+0x204>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d036      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <HAL_DMA_Start_IT+0x208>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d031      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2b      	ldr	r2, [pc, #172]	; (80058a8 <HAL_DMA_Start_IT+0x20c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d02c      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2a      	ldr	r2, [pc, #168]	; (80058ac <HAL_DMA_Start_IT+0x210>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d027      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a28      	ldr	r2, [pc, #160]	; (80058b0 <HAL_DMA_Start_IT+0x214>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d022      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a27      	ldr	r2, [pc, #156]	; (80058b4 <HAL_DMA_Start_IT+0x218>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d01d      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a25      	ldr	r2, [pc, #148]	; (80058b8 <HAL_DMA_Start_IT+0x21c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d018      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a24      	ldr	r2, [pc, #144]	; (80058bc <HAL_DMA_Start_IT+0x220>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a22      	ldr	r2, [pc, #136]	; (80058c0 <HAL_DMA_Start_IT+0x224>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00e      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <HAL_DMA_Start_IT+0x228>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <HAL_DMA_Start_IT+0x22c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <HAL_DMA_Start_IT+0x230>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d101      	bne.n	800585c <HAL_DMA_Start_IT+0x1c0>
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <HAL_DMA_Start_IT+0x1c2>
 800585c:	2300      	movs	r3, #0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d036      	beq.n	80058d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f023 021e 	bic.w	r2, r3, #30
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0216 	orr.w	r2, r2, #22
 8005874:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d03e      	beq.n	80058fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0208 	orr.w	r2, r2, #8
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	e035      	b.n	80058fc <HAL_DMA_Start_IT+0x260>
 8005890:	40020010 	.word	0x40020010
 8005894:	40020028 	.word	0x40020028
 8005898:	40020040 	.word	0x40020040
 800589c:	40020058 	.word	0x40020058
 80058a0:	40020070 	.word	0x40020070
 80058a4:	40020088 	.word	0x40020088
 80058a8:	400200a0 	.word	0x400200a0
 80058ac:	400200b8 	.word	0x400200b8
 80058b0:	40020410 	.word	0x40020410
 80058b4:	40020428 	.word	0x40020428
 80058b8:	40020440 	.word	0x40020440
 80058bc:	40020458 	.word	0x40020458
 80058c0:	40020470 	.word	0x40020470
 80058c4:	40020488 	.word	0x40020488
 80058c8:	400204a0 	.word	0x400204a0
 80058cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 020e 	bic.w	r2, r3, #14
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 020a 	orr.w	r2, r2, #10
 80058e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0204 	orr.w	r2, r2, #4
 80058fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a83      	ldr	r2, [pc, #524]	; (8005b10 <HAL_DMA_Start_IT+0x474>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d072      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a82      	ldr	r2, [pc, #520]	; (8005b14 <HAL_DMA_Start_IT+0x478>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d06d      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a80      	ldr	r2, [pc, #512]	; (8005b18 <HAL_DMA_Start_IT+0x47c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d068      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a7f      	ldr	r2, [pc, #508]	; (8005b1c <HAL_DMA_Start_IT+0x480>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d063      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a7d      	ldr	r2, [pc, #500]	; (8005b20 <HAL_DMA_Start_IT+0x484>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d05e      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a7c      	ldr	r2, [pc, #496]	; (8005b24 <HAL_DMA_Start_IT+0x488>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d059      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a7a      	ldr	r2, [pc, #488]	; (8005b28 <HAL_DMA_Start_IT+0x48c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d054      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a79      	ldr	r2, [pc, #484]	; (8005b2c <HAL_DMA_Start_IT+0x490>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d04f      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a77      	ldr	r2, [pc, #476]	; (8005b30 <HAL_DMA_Start_IT+0x494>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d04a      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a76      	ldr	r2, [pc, #472]	; (8005b34 <HAL_DMA_Start_IT+0x498>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d045      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a74      	ldr	r2, [pc, #464]	; (8005b38 <HAL_DMA_Start_IT+0x49c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d040      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a73      	ldr	r2, [pc, #460]	; (8005b3c <HAL_DMA_Start_IT+0x4a0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d03b      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a71      	ldr	r2, [pc, #452]	; (8005b40 <HAL_DMA_Start_IT+0x4a4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d036      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a70      	ldr	r2, [pc, #448]	; (8005b44 <HAL_DMA_Start_IT+0x4a8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d031      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a6e      	ldr	r2, [pc, #440]	; (8005b48 <HAL_DMA_Start_IT+0x4ac>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d02c      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a6d      	ldr	r2, [pc, #436]	; (8005b4c <HAL_DMA_Start_IT+0x4b0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d027      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a6b      	ldr	r2, [pc, #428]	; (8005b50 <HAL_DMA_Start_IT+0x4b4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d022      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a6a      	ldr	r2, [pc, #424]	; (8005b54 <HAL_DMA_Start_IT+0x4b8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d01d      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a68      	ldr	r2, [pc, #416]	; (8005b58 <HAL_DMA_Start_IT+0x4bc>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d018      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a67      	ldr	r2, [pc, #412]	; (8005b5c <HAL_DMA_Start_IT+0x4c0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a65      	ldr	r2, [pc, #404]	; (8005b60 <HAL_DMA_Start_IT+0x4c4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a64      	ldr	r2, [pc, #400]	; (8005b64 <HAL_DMA_Start_IT+0x4c8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a62      	ldr	r2, [pc, #392]	; (8005b68 <HAL_DMA_Start_IT+0x4cc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a61      	ldr	r2, [pc, #388]	; (8005b6c <HAL_DMA_Start_IT+0x4d0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d101      	bne.n	80059f0 <HAL_DMA_Start_IT+0x354>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <HAL_DMA_Start_IT+0x356>
 80059f0:	2300      	movs	r3, #0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01a      	beq.n	8005a2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a37      	ldr	r2, [pc, #220]	; (8005b10 <HAL_DMA_Start_IT+0x474>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d04a      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a36      	ldr	r2, [pc, #216]	; (8005b14 <HAL_DMA_Start_IT+0x478>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d045      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a34      	ldr	r2, [pc, #208]	; (8005b18 <HAL_DMA_Start_IT+0x47c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d040      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a33      	ldr	r2, [pc, #204]	; (8005b1c <HAL_DMA_Start_IT+0x480>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d03b      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a31      	ldr	r2, [pc, #196]	; (8005b20 <HAL_DMA_Start_IT+0x484>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d036      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a30      	ldr	r2, [pc, #192]	; (8005b24 <HAL_DMA_Start_IT+0x488>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d031      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2e      	ldr	r2, [pc, #184]	; (8005b28 <HAL_DMA_Start_IT+0x48c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d02c      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2d      	ldr	r2, [pc, #180]	; (8005b2c <HAL_DMA_Start_IT+0x490>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d027      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2b      	ldr	r2, [pc, #172]	; (8005b30 <HAL_DMA_Start_IT+0x494>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d022      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <HAL_DMA_Start_IT+0x498>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d01d      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a28      	ldr	r2, [pc, #160]	; (8005b38 <HAL_DMA_Start_IT+0x49c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d018      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <HAL_DMA_Start_IT+0x4a0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d013      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a25      	ldr	r2, [pc, #148]	; (8005b40 <HAL_DMA_Start_IT+0x4a4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00e      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <HAL_DMA_Start_IT+0x4a8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a22      	ldr	r2, [pc, #136]	; (8005b48 <HAL_DMA_Start_IT+0x4ac>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a21      	ldr	r2, [pc, #132]	; (8005b4c <HAL_DMA_Start_IT+0x4b0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d108      	bne.n	8005ade <HAL_DMA_Start_IT+0x442>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	e012      	b.n	8005b04 <HAL_DMA_Start_IT+0x468>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e009      	b.n	8005b04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
 8005b50:	58025408 	.word	0x58025408
 8005b54:	5802541c 	.word	0x5802541c
 8005b58:	58025430 	.word	0x58025430
 8005b5c:	58025444 	.word	0x58025444
 8005b60:	58025458 	.word	0x58025458
 8005b64:	5802546c 	.word	0x5802546c
 8005b68:	58025480 	.word	0x58025480
 8005b6c:	58025494 	.word	0x58025494

08005b70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005b78:	f7fd f90c 	bl	8002d94 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e2dc      	b.n	8006142 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d008      	beq.n	8005ba6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e2cd      	b.n	8006142 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a76      	ldr	r2, [pc, #472]	; (8005d84 <HAL_DMA_Abort+0x214>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d04a      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a74      	ldr	r2, [pc, #464]	; (8005d88 <HAL_DMA_Abort+0x218>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d045      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a73      	ldr	r2, [pc, #460]	; (8005d8c <HAL_DMA_Abort+0x21c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d040      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a71      	ldr	r2, [pc, #452]	; (8005d90 <HAL_DMA_Abort+0x220>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d03b      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a70      	ldr	r2, [pc, #448]	; (8005d94 <HAL_DMA_Abort+0x224>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d036      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a6e      	ldr	r2, [pc, #440]	; (8005d98 <HAL_DMA_Abort+0x228>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d031      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a6d      	ldr	r2, [pc, #436]	; (8005d9c <HAL_DMA_Abort+0x22c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d02c      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a6b      	ldr	r2, [pc, #428]	; (8005da0 <HAL_DMA_Abort+0x230>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d027      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6a      	ldr	r2, [pc, #424]	; (8005da4 <HAL_DMA_Abort+0x234>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d022      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a68      	ldr	r2, [pc, #416]	; (8005da8 <HAL_DMA_Abort+0x238>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01d      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a67      	ldr	r2, [pc, #412]	; (8005dac <HAL_DMA_Abort+0x23c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d018      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a65      	ldr	r2, [pc, #404]	; (8005db0 <HAL_DMA_Abort+0x240>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a64      	ldr	r2, [pc, #400]	; (8005db4 <HAL_DMA_Abort+0x244>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00e      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a62      	ldr	r2, [pc, #392]	; (8005db8 <HAL_DMA_Abort+0x248>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d009      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a61      	ldr	r2, [pc, #388]	; (8005dbc <HAL_DMA_Abort+0x24c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_DMA_Abort+0xd6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a5f      	ldr	r2, [pc, #380]	; (8005dc0 <HAL_DMA_Abort+0x250>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d101      	bne.n	8005c4a <HAL_DMA_Abort+0xda>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <HAL_DMA_Abort+0xdc>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d013      	beq.n	8005c78 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 021e 	bic.w	r2, r2, #30
 8005c5e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c6e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e00a      	b.n	8005c8e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 020e 	bic.w	r2, r2, #14
 8005c86:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a3c      	ldr	r2, [pc, #240]	; (8005d84 <HAL_DMA_Abort+0x214>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d072      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a3a      	ldr	r2, [pc, #232]	; (8005d88 <HAL_DMA_Abort+0x218>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d06d      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a39      	ldr	r2, [pc, #228]	; (8005d8c <HAL_DMA_Abort+0x21c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d068      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a37      	ldr	r2, [pc, #220]	; (8005d90 <HAL_DMA_Abort+0x220>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d063      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a36      	ldr	r2, [pc, #216]	; (8005d94 <HAL_DMA_Abort+0x224>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d05e      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a34      	ldr	r2, [pc, #208]	; (8005d98 <HAL_DMA_Abort+0x228>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d059      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a33      	ldr	r2, [pc, #204]	; (8005d9c <HAL_DMA_Abort+0x22c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d054      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a31      	ldr	r2, [pc, #196]	; (8005da0 <HAL_DMA_Abort+0x230>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d04f      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a30      	ldr	r2, [pc, #192]	; (8005da4 <HAL_DMA_Abort+0x234>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d04a      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a2e      	ldr	r2, [pc, #184]	; (8005da8 <HAL_DMA_Abort+0x238>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d045      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a2d      	ldr	r2, [pc, #180]	; (8005dac <HAL_DMA_Abort+0x23c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d040      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a2b      	ldr	r2, [pc, #172]	; (8005db0 <HAL_DMA_Abort+0x240>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d03b      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a2a      	ldr	r2, [pc, #168]	; (8005db4 <HAL_DMA_Abort+0x244>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d036      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a28      	ldr	r2, [pc, #160]	; (8005db8 <HAL_DMA_Abort+0x248>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d031      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a27      	ldr	r2, [pc, #156]	; (8005dbc <HAL_DMA_Abort+0x24c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d02c      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a25      	ldr	r2, [pc, #148]	; (8005dc0 <HAL_DMA_Abort+0x250>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d027      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a24      	ldr	r2, [pc, #144]	; (8005dc4 <HAL_DMA_Abort+0x254>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d022      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a22      	ldr	r2, [pc, #136]	; (8005dc8 <HAL_DMA_Abort+0x258>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01d      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <HAL_DMA_Abort+0x25c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d018      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1f      	ldr	r2, [pc, #124]	; (8005dd0 <HAL_DMA_Abort+0x260>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1e      	ldr	r2, [pc, #120]	; (8005dd4 <HAL_DMA_Abort+0x264>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00e      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1c      	ldr	r2, [pc, #112]	; (8005dd8 <HAL_DMA_Abort+0x268>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d009      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <HAL_DMA_Abort+0x26c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d004      	beq.n	8005d7e <HAL_DMA_Abort+0x20e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <HAL_DMA_Abort+0x270>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d132      	bne.n	8005de4 <HAL_DMA_Abort+0x274>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e031      	b.n	8005de6 <HAL_DMA_Abort+0x276>
 8005d82:	bf00      	nop
 8005d84:	40020010 	.word	0x40020010
 8005d88:	40020028 	.word	0x40020028
 8005d8c:	40020040 	.word	0x40020040
 8005d90:	40020058 	.word	0x40020058
 8005d94:	40020070 	.word	0x40020070
 8005d98:	40020088 	.word	0x40020088
 8005d9c:	400200a0 	.word	0x400200a0
 8005da0:	400200b8 	.word	0x400200b8
 8005da4:	40020410 	.word	0x40020410
 8005da8:	40020428 	.word	0x40020428
 8005dac:	40020440 	.word	0x40020440
 8005db0:	40020458 	.word	0x40020458
 8005db4:	40020470 	.word	0x40020470
 8005db8:	40020488 	.word	0x40020488
 8005dbc:	400204a0 	.word	0x400204a0
 8005dc0:	400204b8 	.word	0x400204b8
 8005dc4:	58025408 	.word	0x58025408
 8005dc8:	5802541c 	.word	0x5802541c
 8005dcc:	58025430 	.word	0x58025430
 8005dd0:	58025444 	.word	0x58025444
 8005dd4:	58025458 	.word	0x58025458
 8005dd8:	5802546c 	.word	0x5802546c
 8005ddc:	58025480 	.word	0x58025480
 8005de0:	58025494 	.word	0x58025494
 8005de4:	2300      	movs	r3, #0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d007      	beq.n	8005dfa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a6d      	ldr	r2, [pc, #436]	; (8005fb4 <HAL_DMA_Abort+0x444>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d04a      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6b      	ldr	r2, [pc, #428]	; (8005fb8 <HAL_DMA_Abort+0x448>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d045      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6a      	ldr	r2, [pc, #424]	; (8005fbc <HAL_DMA_Abort+0x44c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d040      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a68      	ldr	r2, [pc, #416]	; (8005fc0 <HAL_DMA_Abort+0x450>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d03b      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a67      	ldr	r2, [pc, #412]	; (8005fc4 <HAL_DMA_Abort+0x454>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d036      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a65      	ldr	r2, [pc, #404]	; (8005fc8 <HAL_DMA_Abort+0x458>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d031      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a64      	ldr	r2, [pc, #400]	; (8005fcc <HAL_DMA_Abort+0x45c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d02c      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a62      	ldr	r2, [pc, #392]	; (8005fd0 <HAL_DMA_Abort+0x460>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d027      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a61      	ldr	r2, [pc, #388]	; (8005fd4 <HAL_DMA_Abort+0x464>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d022      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a5f      	ldr	r2, [pc, #380]	; (8005fd8 <HAL_DMA_Abort+0x468>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01d      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a5e      	ldr	r2, [pc, #376]	; (8005fdc <HAL_DMA_Abort+0x46c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d018      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5c      	ldr	r2, [pc, #368]	; (8005fe0 <HAL_DMA_Abort+0x470>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a5b      	ldr	r2, [pc, #364]	; (8005fe4 <HAL_DMA_Abort+0x474>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a59      	ldr	r2, [pc, #356]	; (8005fe8 <HAL_DMA_Abort+0x478>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a58      	ldr	r2, [pc, #352]	; (8005fec <HAL_DMA_Abort+0x47c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_DMA_Abort+0x32a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a56      	ldr	r2, [pc, #344]	; (8005ff0 <HAL_DMA_Abort+0x480>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d108      	bne.n	8005eac <HAL_DMA_Abort+0x33c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	e007      	b.n	8005ebc <HAL_DMA_Abort+0x34c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0201 	bic.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ebc:	e013      	b.n	8005ee6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ebe:	f7fc ff69 	bl	8002d94 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b05      	cmp	r3, #5
 8005eca:	d90c      	bls.n	8005ee6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e12d      	b.n	8006142 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e5      	bne.n	8005ebe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2f      	ldr	r2, [pc, #188]	; (8005fb4 <HAL_DMA_Abort+0x444>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d04a      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2d      	ldr	r2, [pc, #180]	; (8005fb8 <HAL_DMA_Abort+0x448>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d045      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2c      	ldr	r2, [pc, #176]	; (8005fbc <HAL_DMA_Abort+0x44c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d040      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a2a      	ldr	r2, [pc, #168]	; (8005fc0 <HAL_DMA_Abort+0x450>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d03b      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a29      	ldr	r2, [pc, #164]	; (8005fc4 <HAL_DMA_Abort+0x454>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d036      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a27      	ldr	r2, [pc, #156]	; (8005fc8 <HAL_DMA_Abort+0x458>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d031      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <HAL_DMA_Abort+0x45c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d02c      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a24      	ldr	r2, [pc, #144]	; (8005fd0 <HAL_DMA_Abort+0x460>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d027      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a23      	ldr	r2, [pc, #140]	; (8005fd4 <HAL_DMA_Abort+0x464>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d022      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <HAL_DMA_Abort+0x468>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d01d      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <HAL_DMA_Abort+0x46c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d018      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <HAL_DMA_Abort+0x470>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d013      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1d      	ldr	r2, [pc, #116]	; (8005fe4 <HAL_DMA_Abort+0x474>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d00e      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <HAL_DMA_Abort+0x478>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d009      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_DMA_Abort+0x47c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d004      	beq.n	8005f92 <HAL_DMA_Abort+0x422>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a18      	ldr	r2, [pc, #96]	; (8005ff0 <HAL_DMA_Abort+0x480>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d101      	bne.n	8005f96 <HAL_DMA_Abort+0x426>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <HAL_DMA_Abort+0x428>
 8005f96:	2300      	movs	r3, #0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d02b      	beq.n	8005ff4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	223f      	movs	r2, #63	; 0x3f
 8005fac:	409a      	lsls	r2, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	609a      	str	r2, [r3, #8]
 8005fb2:	e02a      	b.n	800600a <HAL_DMA_Abort+0x49a>
 8005fb4:	40020010 	.word	0x40020010
 8005fb8:	40020028 	.word	0x40020028
 8005fbc:	40020040 	.word	0x40020040
 8005fc0:	40020058 	.word	0x40020058
 8005fc4:	40020070 	.word	0x40020070
 8005fc8:	40020088 	.word	0x40020088
 8005fcc:	400200a0 	.word	0x400200a0
 8005fd0:	400200b8 	.word	0x400200b8
 8005fd4:	40020410 	.word	0x40020410
 8005fd8:	40020428 	.word	0x40020428
 8005fdc:	40020440 	.word	0x40020440
 8005fe0:	40020458 	.word	0x40020458
 8005fe4:	40020470 	.word	0x40020470
 8005fe8:	40020488 	.word	0x40020488
 8005fec:	400204a0 	.word	0x400204a0
 8005ff0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	2201      	movs	r2, #1
 8006004:	409a      	lsls	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a4f      	ldr	r2, [pc, #316]	; (800614c <HAL_DMA_Abort+0x5dc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d072      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a4d      	ldr	r2, [pc, #308]	; (8006150 <HAL_DMA_Abort+0x5e0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d06d      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a4c      	ldr	r2, [pc, #304]	; (8006154 <HAL_DMA_Abort+0x5e4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d068      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a4a      	ldr	r2, [pc, #296]	; (8006158 <HAL_DMA_Abort+0x5e8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d063      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a49      	ldr	r2, [pc, #292]	; (800615c <HAL_DMA_Abort+0x5ec>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d05e      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a47      	ldr	r2, [pc, #284]	; (8006160 <HAL_DMA_Abort+0x5f0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d059      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a46      	ldr	r2, [pc, #280]	; (8006164 <HAL_DMA_Abort+0x5f4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d054      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a44      	ldr	r2, [pc, #272]	; (8006168 <HAL_DMA_Abort+0x5f8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d04f      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a43      	ldr	r2, [pc, #268]	; (800616c <HAL_DMA_Abort+0x5fc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d04a      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a41      	ldr	r2, [pc, #260]	; (8006170 <HAL_DMA_Abort+0x600>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d045      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a40      	ldr	r2, [pc, #256]	; (8006174 <HAL_DMA_Abort+0x604>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d040      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a3e      	ldr	r2, [pc, #248]	; (8006178 <HAL_DMA_Abort+0x608>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d03b      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3d      	ldr	r2, [pc, #244]	; (800617c <HAL_DMA_Abort+0x60c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d036      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a3b      	ldr	r2, [pc, #236]	; (8006180 <HAL_DMA_Abort+0x610>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d031      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a3a      	ldr	r2, [pc, #232]	; (8006184 <HAL_DMA_Abort+0x614>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d02c      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a38      	ldr	r2, [pc, #224]	; (8006188 <HAL_DMA_Abort+0x618>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d027      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a37      	ldr	r2, [pc, #220]	; (800618c <HAL_DMA_Abort+0x61c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d022      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a35      	ldr	r2, [pc, #212]	; (8006190 <HAL_DMA_Abort+0x620>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01d      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a34      	ldr	r2, [pc, #208]	; (8006194 <HAL_DMA_Abort+0x624>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a32      	ldr	r2, [pc, #200]	; (8006198 <HAL_DMA_Abort+0x628>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a31      	ldr	r2, [pc, #196]	; (800619c <HAL_DMA_Abort+0x62c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00e      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2f      	ldr	r2, [pc, #188]	; (80061a0 <HAL_DMA_Abort+0x630>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2e      	ldr	r2, [pc, #184]	; (80061a4 <HAL_DMA_Abort+0x634>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_DMA_Abort+0x58a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2c      	ldr	r2, [pc, #176]	; (80061a8 <HAL_DMA_Abort+0x638>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d101      	bne.n	80060fe <HAL_DMA_Abort+0x58e>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <HAL_DMA_Abort+0x590>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d015      	beq.n	8006130 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800610c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00c      	beq.n	8006130 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006124:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800612e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40020010 	.word	0x40020010
 8006150:	40020028 	.word	0x40020028
 8006154:	40020040 	.word	0x40020040
 8006158:	40020058 	.word	0x40020058
 800615c:	40020070 	.word	0x40020070
 8006160:	40020088 	.word	0x40020088
 8006164:	400200a0 	.word	0x400200a0
 8006168:	400200b8 	.word	0x400200b8
 800616c:	40020410 	.word	0x40020410
 8006170:	40020428 	.word	0x40020428
 8006174:	40020440 	.word	0x40020440
 8006178:	40020458 	.word	0x40020458
 800617c:	40020470 	.word	0x40020470
 8006180:	40020488 	.word	0x40020488
 8006184:	400204a0 	.word	0x400204a0
 8006188:	400204b8 	.word	0x400204b8
 800618c:	58025408 	.word	0x58025408
 8006190:	5802541c 	.word	0x5802541c
 8006194:	58025430 	.word	0x58025430
 8006198:	58025444 	.word	0x58025444
 800619c:	58025458 	.word	0x58025458
 80061a0:	5802546c 	.word	0x5802546c
 80061a4:	58025480 	.word	0x58025480
 80061a8:	58025494 	.word	0x58025494

080061ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e237      	b.n	800662e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d004      	beq.n	80061d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2280      	movs	r2, #128	; 0x80
 80061ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e22c      	b.n	800662e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a5c      	ldr	r2, [pc, #368]	; (800634c <HAL_DMA_Abort_IT+0x1a0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d04a      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a5b      	ldr	r2, [pc, #364]	; (8006350 <HAL_DMA_Abort_IT+0x1a4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d045      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a59      	ldr	r2, [pc, #356]	; (8006354 <HAL_DMA_Abort_IT+0x1a8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d040      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a58      	ldr	r2, [pc, #352]	; (8006358 <HAL_DMA_Abort_IT+0x1ac>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d03b      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a56      	ldr	r2, [pc, #344]	; (800635c <HAL_DMA_Abort_IT+0x1b0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d036      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a55      	ldr	r2, [pc, #340]	; (8006360 <HAL_DMA_Abort_IT+0x1b4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d031      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a53      	ldr	r2, [pc, #332]	; (8006364 <HAL_DMA_Abort_IT+0x1b8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d02c      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a52      	ldr	r2, [pc, #328]	; (8006368 <HAL_DMA_Abort_IT+0x1bc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d027      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a50      	ldr	r2, [pc, #320]	; (800636c <HAL_DMA_Abort_IT+0x1c0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d022      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a4f      	ldr	r2, [pc, #316]	; (8006370 <HAL_DMA_Abort_IT+0x1c4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d01d      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a4d      	ldr	r2, [pc, #308]	; (8006374 <HAL_DMA_Abort_IT+0x1c8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d018      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a4c      	ldr	r2, [pc, #304]	; (8006378 <HAL_DMA_Abort_IT+0x1cc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d013      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a4a      	ldr	r2, [pc, #296]	; (800637c <HAL_DMA_Abort_IT+0x1d0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00e      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a49      	ldr	r2, [pc, #292]	; (8006380 <HAL_DMA_Abort_IT+0x1d4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d009      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a47      	ldr	r2, [pc, #284]	; (8006384 <HAL_DMA_Abort_IT+0x1d8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_DMA_Abort_IT+0xc8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a46      	ldr	r2, [pc, #280]	; (8006388 <HAL_DMA_Abort_IT+0x1dc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d101      	bne.n	8006278 <HAL_DMA_Abort_IT+0xcc>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_DMA_Abort_IT+0xce>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 8086 	beq.w	800638c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2204      	movs	r2, #4
 8006284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2f      	ldr	r2, [pc, #188]	; (800634c <HAL_DMA_Abort_IT+0x1a0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d04a      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2e      	ldr	r2, [pc, #184]	; (8006350 <HAL_DMA_Abort_IT+0x1a4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d045      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a2c      	ldr	r2, [pc, #176]	; (8006354 <HAL_DMA_Abort_IT+0x1a8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d040      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2b      	ldr	r2, [pc, #172]	; (8006358 <HAL_DMA_Abort_IT+0x1ac>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d03b      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a29      	ldr	r2, [pc, #164]	; (800635c <HAL_DMA_Abort_IT+0x1b0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d036      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a28      	ldr	r2, [pc, #160]	; (8006360 <HAL_DMA_Abort_IT+0x1b4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d031      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a26      	ldr	r2, [pc, #152]	; (8006364 <HAL_DMA_Abort_IT+0x1b8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d02c      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a25      	ldr	r2, [pc, #148]	; (8006368 <HAL_DMA_Abort_IT+0x1bc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d027      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a23      	ldr	r2, [pc, #140]	; (800636c <HAL_DMA_Abort_IT+0x1c0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d022      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a22      	ldr	r2, [pc, #136]	; (8006370 <HAL_DMA_Abort_IT+0x1c4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d01d      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a20      	ldr	r2, [pc, #128]	; (8006374 <HAL_DMA_Abort_IT+0x1c8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d018      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1f      	ldr	r2, [pc, #124]	; (8006378 <HAL_DMA_Abort_IT+0x1cc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d013      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1d      	ldr	r2, [pc, #116]	; (800637c <HAL_DMA_Abort_IT+0x1d0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00e      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1c      	ldr	r2, [pc, #112]	; (8006380 <HAL_DMA_Abort_IT+0x1d4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d009      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1a      	ldr	r2, [pc, #104]	; (8006384 <HAL_DMA_Abort_IT+0x1d8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_DMA_Abort_IT+0x17c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a19      	ldr	r2, [pc, #100]	; (8006388 <HAL_DMA_Abort_IT+0x1dc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <HAL_DMA_Abort_IT+0x18e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e178      	b.n	800662c <HAL_DMA_Abort_IT+0x480>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0201 	bic.w	r2, r2, #1
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	e16f      	b.n	800662c <HAL_DMA_Abort_IT+0x480>
 800634c:	40020010 	.word	0x40020010
 8006350:	40020028 	.word	0x40020028
 8006354:	40020040 	.word	0x40020040
 8006358:	40020058 	.word	0x40020058
 800635c:	40020070 	.word	0x40020070
 8006360:	40020088 	.word	0x40020088
 8006364:	400200a0 	.word	0x400200a0
 8006368:	400200b8 	.word	0x400200b8
 800636c:	40020410 	.word	0x40020410
 8006370:	40020428 	.word	0x40020428
 8006374:	40020440 	.word	0x40020440
 8006378:	40020458 	.word	0x40020458
 800637c:	40020470 	.word	0x40020470
 8006380:	40020488 	.word	0x40020488
 8006384:	400204a0 	.word	0x400204a0
 8006388:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 020e 	bic.w	r2, r2, #14
 800639a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a6c      	ldr	r2, [pc, #432]	; (8006554 <HAL_DMA_Abort_IT+0x3a8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d04a      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a6b      	ldr	r2, [pc, #428]	; (8006558 <HAL_DMA_Abort_IT+0x3ac>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d045      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a69      	ldr	r2, [pc, #420]	; (800655c <HAL_DMA_Abort_IT+0x3b0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d040      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a68      	ldr	r2, [pc, #416]	; (8006560 <HAL_DMA_Abort_IT+0x3b4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d03b      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a66      	ldr	r2, [pc, #408]	; (8006564 <HAL_DMA_Abort_IT+0x3b8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d036      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a65      	ldr	r2, [pc, #404]	; (8006568 <HAL_DMA_Abort_IT+0x3bc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d031      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a63      	ldr	r2, [pc, #396]	; (800656c <HAL_DMA_Abort_IT+0x3c0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d02c      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a62      	ldr	r2, [pc, #392]	; (8006570 <HAL_DMA_Abort_IT+0x3c4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d027      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a60      	ldr	r2, [pc, #384]	; (8006574 <HAL_DMA_Abort_IT+0x3c8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d022      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a5f      	ldr	r2, [pc, #380]	; (8006578 <HAL_DMA_Abort_IT+0x3cc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d01d      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5d      	ldr	r2, [pc, #372]	; (800657c <HAL_DMA_Abort_IT+0x3d0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d018      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a5c      	ldr	r2, [pc, #368]	; (8006580 <HAL_DMA_Abort_IT+0x3d4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a5a      	ldr	r2, [pc, #360]	; (8006584 <HAL_DMA_Abort_IT+0x3d8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a59      	ldr	r2, [pc, #356]	; (8006588 <HAL_DMA_Abort_IT+0x3dc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a57      	ldr	r2, [pc, #348]	; (800658c <HAL_DMA_Abort_IT+0x3e0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_DMA_Abort_IT+0x290>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a56      	ldr	r2, [pc, #344]	; (8006590 <HAL_DMA_Abort_IT+0x3e4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d108      	bne.n	800644e <HAL_DMA_Abort_IT+0x2a2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0201 	bic.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e007      	b.n	800645e <HAL_DMA_Abort_IT+0x2b2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a3c      	ldr	r2, [pc, #240]	; (8006554 <HAL_DMA_Abort_IT+0x3a8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d072      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a3a      	ldr	r2, [pc, #232]	; (8006558 <HAL_DMA_Abort_IT+0x3ac>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d06d      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a39      	ldr	r2, [pc, #228]	; (800655c <HAL_DMA_Abort_IT+0x3b0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d068      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a37      	ldr	r2, [pc, #220]	; (8006560 <HAL_DMA_Abort_IT+0x3b4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d063      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a36      	ldr	r2, [pc, #216]	; (8006564 <HAL_DMA_Abort_IT+0x3b8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d05e      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a34      	ldr	r2, [pc, #208]	; (8006568 <HAL_DMA_Abort_IT+0x3bc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d059      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a33      	ldr	r2, [pc, #204]	; (800656c <HAL_DMA_Abort_IT+0x3c0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d054      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a31      	ldr	r2, [pc, #196]	; (8006570 <HAL_DMA_Abort_IT+0x3c4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d04f      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a30      	ldr	r2, [pc, #192]	; (8006574 <HAL_DMA_Abort_IT+0x3c8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d04a      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2e      	ldr	r2, [pc, #184]	; (8006578 <HAL_DMA_Abort_IT+0x3cc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d045      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2d      	ldr	r2, [pc, #180]	; (800657c <HAL_DMA_Abort_IT+0x3d0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d040      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a2b      	ldr	r2, [pc, #172]	; (8006580 <HAL_DMA_Abort_IT+0x3d4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d03b      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <HAL_DMA_Abort_IT+0x3d8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d036      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a28      	ldr	r2, [pc, #160]	; (8006588 <HAL_DMA_Abort_IT+0x3dc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d031      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a27      	ldr	r2, [pc, #156]	; (800658c <HAL_DMA_Abort_IT+0x3e0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d02c      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a25      	ldr	r2, [pc, #148]	; (8006590 <HAL_DMA_Abort_IT+0x3e4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d027      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a24      	ldr	r2, [pc, #144]	; (8006594 <HAL_DMA_Abort_IT+0x3e8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d022      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a22      	ldr	r2, [pc, #136]	; (8006598 <HAL_DMA_Abort_IT+0x3ec>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d01d      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_DMA_Abort_IT+0x3f0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d018      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <HAL_DMA_Abort_IT+0x3f4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <HAL_DMA_Abort_IT+0x3f8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00e      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <HAL_DMA_Abort_IT+0x3fc>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d009      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1b      	ldr	r2, [pc, #108]	; (80065ac <HAL_DMA_Abort_IT+0x400>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d004      	beq.n	800654e <HAL_DMA_Abort_IT+0x3a2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <HAL_DMA_Abort_IT+0x404>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d132      	bne.n	80065b4 <HAL_DMA_Abort_IT+0x408>
 800654e:	2301      	movs	r3, #1
 8006550:	e031      	b.n	80065b6 <HAL_DMA_Abort_IT+0x40a>
 8006552:	bf00      	nop
 8006554:	40020010 	.word	0x40020010
 8006558:	40020028 	.word	0x40020028
 800655c:	40020040 	.word	0x40020040
 8006560:	40020058 	.word	0x40020058
 8006564:	40020070 	.word	0x40020070
 8006568:	40020088 	.word	0x40020088
 800656c:	400200a0 	.word	0x400200a0
 8006570:	400200b8 	.word	0x400200b8
 8006574:	40020410 	.word	0x40020410
 8006578:	40020428 	.word	0x40020428
 800657c:	40020440 	.word	0x40020440
 8006580:	40020458 	.word	0x40020458
 8006584:	40020470 	.word	0x40020470
 8006588:	40020488 	.word	0x40020488
 800658c:	400204a0 	.word	0x400204a0
 8006590:	400204b8 	.word	0x400204b8
 8006594:	58025408 	.word	0x58025408
 8006598:	5802541c 	.word	0x5802541c
 800659c:	58025430 	.word	0x58025430
 80065a0:	58025444 	.word	0x58025444
 80065a4:	58025458 	.word	0x58025458
 80065a8:	5802546c 	.word	0x5802546c
 80065ac:	58025480 	.word	0x58025480
 80065b0:	58025494 	.word	0x58025494
 80065b4:	2300      	movs	r3, #0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d028      	beq.n	800660c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	2201      	movs	r2, #1
 80065da:	409a      	lsls	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80065e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006600:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800660a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop

08006638 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006644:	4b67      	ldr	r3, [pc, #412]	; (80067e4 <HAL_DMA_IRQHandler+0x1ac>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a67      	ldr	r2, [pc, #412]	; (80067e8 <HAL_DMA_IRQHandler+0x1b0>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	0a9b      	lsrs	r3, r3, #10
 8006650:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006656:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a5f      	ldr	r2, [pc, #380]	; (80067ec <HAL_DMA_IRQHandler+0x1b4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d04a      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a5d      	ldr	r2, [pc, #372]	; (80067f0 <HAL_DMA_IRQHandler+0x1b8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d045      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a5c      	ldr	r2, [pc, #368]	; (80067f4 <HAL_DMA_IRQHandler+0x1bc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d040      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a5a      	ldr	r2, [pc, #360]	; (80067f8 <HAL_DMA_IRQHandler+0x1c0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d03b      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a59      	ldr	r2, [pc, #356]	; (80067fc <HAL_DMA_IRQHandler+0x1c4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d036      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a57      	ldr	r2, [pc, #348]	; (8006800 <HAL_DMA_IRQHandler+0x1c8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d031      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a56      	ldr	r2, [pc, #344]	; (8006804 <HAL_DMA_IRQHandler+0x1cc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d02c      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a54      	ldr	r2, [pc, #336]	; (8006808 <HAL_DMA_IRQHandler+0x1d0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d027      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a53      	ldr	r2, [pc, #332]	; (800680c <HAL_DMA_IRQHandler+0x1d4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d022      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a51      	ldr	r2, [pc, #324]	; (8006810 <HAL_DMA_IRQHandler+0x1d8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d01d      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a50      	ldr	r2, [pc, #320]	; (8006814 <HAL_DMA_IRQHandler+0x1dc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d018      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a4e      	ldr	r2, [pc, #312]	; (8006818 <HAL_DMA_IRQHandler+0x1e0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4d      	ldr	r2, [pc, #308]	; (800681c <HAL_DMA_IRQHandler+0x1e4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00e      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a4b      	ldr	r2, [pc, #300]	; (8006820 <HAL_DMA_IRQHandler+0x1e8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a4a      	ldr	r2, [pc, #296]	; (8006824 <HAL_DMA_IRQHandler+0x1ec>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d004      	beq.n	800670a <HAL_DMA_IRQHandler+0xd2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a48      	ldr	r2, [pc, #288]	; (8006828 <HAL_DMA_IRQHandler+0x1f0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d101      	bne.n	800670e <HAL_DMA_IRQHandler+0xd6>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <HAL_DMA_IRQHandler+0xd8>
 800670e:	2300      	movs	r3, #0
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 842b 	beq.w	8006f6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	2208      	movs	r2, #8
 8006720:	409a      	lsls	r2, r3
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4013      	ands	r3, r2
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 80a2 	beq.w	8006870 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a2e      	ldr	r2, [pc, #184]	; (80067ec <HAL_DMA_IRQHandler+0x1b4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d04a      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a2d      	ldr	r2, [pc, #180]	; (80067f0 <HAL_DMA_IRQHandler+0x1b8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d045      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a2b      	ldr	r2, [pc, #172]	; (80067f4 <HAL_DMA_IRQHandler+0x1bc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d040      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a2a      	ldr	r2, [pc, #168]	; (80067f8 <HAL_DMA_IRQHandler+0x1c0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d03b      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a28      	ldr	r2, [pc, #160]	; (80067fc <HAL_DMA_IRQHandler+0x1c4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d036      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a27      	ldr	r2, [pc, #156]	; (8006800 <HAL_DMA_IRQHandler+0x1c8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d031      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a25      	ldr	r2, [pc, #148]	; (8006804 <HAL_DMA_IRQHandler+0x1cc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d02c      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a24      	ldr	r2, [pc, #144]	; (8006808 <HAL_DMA_IRQHandler+0x1d0>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d027      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a22      	ldr	r2, [pc, #136]	; (800680c <HAL_DMA_IRQHandler+0x1d4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d022      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a21      	ldr	r2, [pc, #132]	; (8006810 <HAL_DMA_IRQHandler+0x1d8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d01d      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <HAL_DMA_IRQHandler+0x1dc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d018      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1e      	ldr	r2, [pc, #120]	; (8006818 <HAL_DMA_IRQHandler+0x1e0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d013      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1c      	ldr	r2, [pc, #112]	; (800681c <HAL_DMA_IRQHandler+0x1e4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00e      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1b      	ldr	r2, [pc, #108]	; (8006820 <HAL_DMA_IRQHandler+0x1e8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d009      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a19      	ldr	r2, [pc, #100]	; (8006824 <HAL_DMA_IRQHandler+0x1ec>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d004      	beq.n	80067cc <HAL_DMA_IRQHandler+0x194>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a18      	ldr	r2, [pc, #96]	; (8006828 <HAL_DMA_IRQHandler+0x1f0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d12f      	bne.n	800682c <HAL_DMA_IRQHandler+0x1f4>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bf14      	ite	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	2300      	moveq	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	e02e      	b.n	8006840 <HAL_DMA_IRQHandler+0x208>
 80067e2:	bf00      	nop
 80067e4:	24000088 	.word	0x24000088
 80067e8:	1b4e81b5 	.word	0x1b4e81b5
 80067ec:	40020010 	.word	0x40020010
 80067f0:	40020028 	.word	0x40020028
 80067f4:	40020040 	.word	0x40020040
 80067f8:	40020058 	.word	0x40020058
 80067fc:	40020070 	.word	0x40020070
 8006800:	40020088 	.word	0x40020088
 8006804:	400200a0 	.word	0x400200a0
 8006808:	400200b8 	.word	0x400200b8
 800680c:	40020410 	.word	0x40020410
 8006810:	40020428 	.word	0x40020428
 8006814:	40020440 	.word	0x40020440
 8006818:	40020458 	.word	0x40020458
 800681c:	40020470 	.word	0x40020470
 8006820:	40020488 	.word	0x40020488
 8006824:	400204a0 	.word	0x400204a0
 8006828:	400204b8 	.word	0x400204b8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	bf14      	ite	ne
 800683a:	2301      	movne	r3, #1
 800683c:	2300      	moveq	r3, #0
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d015      	beq.n	8006870 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0204 	bic.w	r2, r2, #4
 8006852:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006858:	f003 031f 	and.w	r3, r3, #31
 800685c:	2208      	movs	r2, #8
 800685e:	409a      	lsls	r2, r3
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006868:	f043 0201 	orr.w	r2, r3, #1
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006874:	f003 031f 	and.w	r3, r3, #31
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	fa22 f303 	lsr.w	r3, r2, r3
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d06e      	beq.n	8006964 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a69      	ldr	r2, [pc, #420]	; (8006a30 <HAL_DMA_IRQHandler+0x3f8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d04a      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a67      	ldr	r2, [pc, #412]	; (8006a34 <HAL_DMA_IRQHandler+0x3fc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d045      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a66      	ldr	r2, [pc, #408]	; (8006a38 <HAL_DMA_IRQHandler+0x400>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d040      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a64      	ldr	r2, [pc, #400]	; (8006a3c <HAL_DMA_IRQHandler+0x404>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d03b      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a63      	ldr	r2, [pc, #396]	; (8006a40 <HAL_DMA_IRQHandler+0x408>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d036      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a61      	ldr	r2, [pc, #388]	; (8006a44 <HAL_DMA_IRQHandler+0x40c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d031      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a60      	ldr	r2, [pc, #384]	; (8006a48 <HAL_DMA_IRQHandler+0x410>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d02c      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a5e      	ldr	r2, [pc, #376]	; (8006a4c <HAL_DMA_IRQHandler+0x414>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d027      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a5d      	ldr	r2, [pc, #372]	; (8006a50 <HAL_DMA_IRQHandler+0x418>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d022      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a5b      	ldr	r2, [pc, #364]	; (8006a54 <HAL_DMA_IRQHandler+0x41c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d01d      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a5a      	ldr	r2, [pc, #360]	; (8006a58 <HAL_DMA_IRQHandler+0x420>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d018      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a58      	ldr	r2, [pc, #352]	; (8006a5c <HAL_DMA_IRQHandler+0x424>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a57      	ldr	r2, [pc, #348]	; (8006a60 <HAL_DMA_IRQHandler+0x428>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00e      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a55      	ldr	r2, [pc, #340]	; (8006a64 <HAL_DMA_IRQHandler+0x42c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d009      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a54      	ldr	r2, [pc, #336]	; (8006a68 <HAL_DMA_IRQHandler+0x430>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_DMA_IRQHandler+0x2ee>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a52      	ldr	r2, [pc, #328]	; (8006a6c <HAL_DMA_IRQHandler+0x434>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d10a      	bne.n	800693c <HAL_DMA_IRQHandler+0x304>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006930:	2b00      	cmp	r3, #0
 8006932:	bf14      	ite	ne
 8006934:	2301      	movne	r3, #1
 8006936:	2300      	moveq	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	e003      	b.n	8006944 <HAL_DMA_IRQHandler+0x30c>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2300      	movs	r3, #0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00d      	beq.n	8006964 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694c:	f003 031f 	and.w	r3, r3, #31
 8006950:	2201      	movs	r2, #1
 8006952:	409a      	lsls	r2, r3
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695c:	f043 0202 	orr.w	r2, r3, #2
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006968:	f003 031f 	and.w	r3, r3, #31
 800696c:	2204      	movs	r2, #4
 800696e:	409a      	lsls	r2, r3
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	4013      	ands	r3, r2
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 808f 	beq.w	8006a98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a2c      	ldr	r2, [pc, #176]	; (8006a30 <HAL_DMA_IRQHandler+0x3f8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d04a      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a2a      	ldr	r2, [pc, #168]	; (8006a34 <HAL_DMA_IRQHandler+0x3fc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d045      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a29      	ldr	r2, [pc, #164]	; (8006a38 <HAL_DMA_IRQHandler+0x400>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d040      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a27      	ldr	r2, [pc, #156]	; (8006a3c <HAL_DMA_IRQHandler+0x404>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d03b      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a26      	ldr	r2, [pc, #152]	; (8006a40 <HAL_DMA_IRQHandler+0x408>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d036      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a24      	ldr	r2, [pc, #144]	; (8006a44 <HAL_DMA_IRQHandler+0x40c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d031      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a23      	ldr	r2, [pc, #140]	; (8006a48 <HAL_DMA_IRQHandler+0x410>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d02c      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a21      	ldr	r2, [pc, #132]	; (8006a4c <HAL_DMA_IRQHandler+0x414>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d027      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a20      	ldr	r2, [pc, #128]	; (8006a50 <HAL_DMA_IRQHandler+0x418>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d022      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1e      	ldr	r2, [pc, #120]	; (8006a54 <HAL_DMA_IRQHandler+0x41c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01d      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <HAL_DMA_IRQHandler+0x420>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d018      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a1b      	ldr	r2, [pc, #108]	; (8006a5c <HAL_DMA_IRQHandler+0x424>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1a      	ldr	r2, [pc, #104]	; (8006a60 <HAL_DMA_IRQHandler+0x428>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00e      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a18      	ldr	r2, [pc, #96]	; (8006a64 <HAL_DMA_IRQHandler+0x42c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d009      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <HAL_DMA_IRQHandler+0x430>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_DMA_IRQHandler+0x3e2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a15      	ldr	r2, [pc, #84]	; (8006a6c <HAL_DMA_IRQHandler+0x434>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d12a      	bne.n	8006a70 <HAL_DMA_IRQHandler+0x438>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bf14      	ite	ne
 8006a28:	2301      	movne	r3, #1
 8006a2a:	2300      	moveq	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	e023      	b.n	8006a78 <HAL_DMA_IRQHandler+0x440>
 8006a30:	40020010 	.word	0x40020010
 8006a34:	40020028 	.word	0x40020028
 8006a38:	40020040 	.word	0x40020040
 8006a3c:	40020058 	.word	0x40020058
 8006a40:	40020070 	.word	0x40020070
 8006a44:	40020088 	.word	0x40020088
 8006a48:	400200a0 	.word	0x400200a0
 8006a4c:	400200b8 	.word	0x400200b8
 8006a50:	40020410 	.word	0x40020410
 8006a54:	40020428 	.word	0x40020428
 8006a58:	40020440 	.word	0x40020440
 8006a5c:	40020458 	.word	0x40020458
 8006a60:	40020470 	.word	0x40020470
 8006a64:	40020488 	.word	0x40020488
 8006a68:	400204a0 	.word	0x400204a0
 8006a6c:	400204b8 	.word	0x400204b8
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2300      	movs	r3, #0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00d      	beq.n	8006a98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	2204      	movs	r2, #4
 8006a86:	409a      	lsls	r2, r3
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a90:	f043 0204 	orr.w	r2, r3, #4
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	2210      	movs	r2, #16
 8006aa2:	409a      	lsls	r2, r3
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80a6 	beq.w	8006bfa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a85      	ldr	r2, [pc, #532]	; (8006cc8 <HAL_DMA_IRQHandler+0x690>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d04a      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a83      	ldr	r2, [pc, #524]	; (8006ccc <HAL_DMA_IRQHandler+0x694>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d045      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a82      	ldr	r2, [pc, #520]	; (8006cd0 <HAL_DMA_IRQHandler+0x698>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d040      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a80      	ldr	r2, [pc, #512]	; (8006cd4 <HAL_DMA_IRQHandler+0x69c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d03b      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a7f      	ldr	r2, [pc, #508]	; (8006cd8 <HAL_DMA_IRQHandler+0x6a0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d036      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a7d      	ldr	r2, [pc, #500]	; (8006cdc <HAL_DMA_IRQHandler+0x6a4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d031      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a7c      	ldr	r2, [pc, #496]	; (8006ce0 <HAL_DMA_IRQHandler+0x6a8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d02c      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a7a      	ldr	r2, [pc, #488]	; (8006ce4 <HAL_DMA_IRQHandler+0x6ac>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d027      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a79      	ldr	r2, [pc, #484]	; (8006ce8 <HAL_DMA_IRQHandler+0x6b0>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d022      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a77      	ldr	r2, [pc, #476]	; (8006cec <HAL_DMA_IRQHandler+0x6b4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a76      	ldr	r2, [pc, #472]	; (8006cf0 <HAL_DMA_IRQHandler+0x6b8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d018      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a74      	ldr	r2, [pc, #464]	; (8006cf4 <HAL_DMA_IRQHandler+0x6bc>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a73      	ldr	r2, [pc, #460]	; (8006cf8 <HAL_DMA_IRQHandler+0x6c0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a71      	ldr	r2, [pc, #452]	; (8006cfc <HAL_DMA_IRQHandler+0x6c4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a70      	ldr	r2, [pc, #448]	; (8006d00 <HAL_DMA_IRQHandler+0x6c8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x516>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a6e      	ldr	r2, [pc, #440]	; (8006d04 <HAL_DMA_IRQHandler+0x6cc>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d10a      	bne.n	8006b64 <HAL_DMA_IRQHandler+0x52c>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bf14      	ite	ne
 8006b5c:	2301      	movne	r3, #1
 8006b5e:	2300      	moveq	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	e009      	b.n	8006b78 <HAL_DMA_IRQHandler+0x540>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bf14      	ite	ne
 8006b72:	2301      	movne	r3, #1
 8006b74:	2300      	moveq	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d03e      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b80:	f003 031f 	and.w	r3, r3, #31
 8006b84:	2210      	movs	r2, #16
 8006b86:	409a      	lsls	r2, r3
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d018      	beq.n	8006bcc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d108      	bne.n	8006bba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d024      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
 8006bb8:	e01f      	b.n	8006bfa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01b      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
 8006bca:	e016      	b.n	8006bfa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d107      	bne.n	8006bea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0208 	bic.w	r2, r2, #8
 8006be8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfe:	f003 031f 	and.w	r3, r3, #31
 8006c02:	2220      	movs	r2, #32
 8006c04:	409a      	lsls	r2, r3
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8110 	beq.w	8006e30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2c      	ldr	r2, [pc, #176]	; (8006cc8 <HAL_DMA_IRQHandler+0x690>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d04a      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2b      	ldr	r2, [pc, #172]	; (8006ccc <HAL_DMA_IRQHandler+0x694>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d045      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a29      	ldr	r2, [pc, #164]	; (8006cd0 <HAL_DMA_IRQHandler+0x698>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d040      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <HAL_DMA_IRQHandler+0x69c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d03b      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a26      	ldr	r2, [pc, #152]	; (8006cd8 <HAL_DMA_IRQHandler+0x6a0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d036      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a25      	ldr	r2, [pc, #148]	; (8006cdc <HAL_DMA_IRQHandler+0x6a4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d031      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a23      	ldr	r2, [pc, #140]	; (8006ce0 <HAL_DMA_IRQHandler+0x6a8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d02c      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a22      	ldr	r2, [pc, #136]	; (8006ce4 <HAL_DMA_IRQHandler+0x6ac>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d027      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a20      	ldr	r2, [pc, #128]	; (8006ce8 <HAL_DMA_IRQHandler+0x6b0>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d022      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a1f      	ldr	r2, [pc, #124]	; (8006cec <HAL_DMA_IRQHandler+0x6b4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d01d      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1d      	ldr	r2, [pc, #116]	; (8006cf0 <HAL_DMA_IRQHandler+0x6b8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d018      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1c      	ldr	r2, [pc, #112]	; (8006cf4 <HAL_DMA_IRQHandler+0x6bc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1a      	ldr	r2, [pc, #104]	; (8006cf8 <HAL_DMA_IRQHandler+0x6c0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00e      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a19      	ldr	r2, [pc, #100]	; (8006cfc <HAL_DMA_IRQHandler+0x6c4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d009      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a17      	ldr	r2, [pc, #92]	; (8006d00 <HAL_DMA_IRQHandler+0x6c8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d004      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x678>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a16      	ldr	r2, [pc, #88]	; (8006d04 <HAL_DMA_IRQHandler+0x6cc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d12b      	bne.n	8006d08 <HAL_DMA_IRQHandler+0x6d0>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	bf14      	ite	ne
 8006cbe:	2301      	movne	r3, #1
 8006cc0:	2300      	moveq	r3, #0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	e02a      	b.n	8006d1c <HAL_DMA_IRQHandler+0x6e4>
 8006cc6:	bf00      	nop
 8006cc8:	40020010 	.word	0x40020010
 8006ccc:	40020028 	.word	0x40020028
 8006cd0:	40020040 	.word	0x40020040
 8006cd4:	40020058 	.word	0x40020058
 8006cd8:	40020070 	.word	0x40020070
 8006cdc:	40020088 	.word	0x40020088
 8006ce0:	400200a0 	.word	0x400200a0
 8006ce4:	400200b8 	.word	0x400200b8
 8006ce8:	40020410 	.word	0x40020410
 8006cec:	40020428 	.word	0x40020428
 8006cf0:	40020440 	.word	0x40020440
 8006cf4:	40020458 	.word	0x40020458
 8006cf8:	40020470 	.word	0x40020470
 8006cfc:	40020488 	.word	0x40020488
 8006d00:	400204a0 	.word	0x400204a0
 8006d04:	400204b8 	.word	0x400204b8
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bf14      	ite	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	2300      	moveq	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8087 	beq.w	8006e30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	409a      	lsls	r2, r3
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d139      	bne.n	8006db2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0216 	bic.w	r2, r2, #22
 8006d4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695a      	ldr	r2, [r3, #20]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d103      	bne.n	8006d6e <HAL_DMA_IRQHandler+0x736>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0208 	bic.w	r2, r2, #8
 8006d7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	223f      	movs	r2, #63	; 0x3f
 8006d88:	409a      	lsls	r2, r3
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 834a 	beq.w	800743c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
          }
          return;
 8006db0:	e344      	b.n	800743c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d018      	beq.n	8006df2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d108      	bne.n	8006de0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02c      	beq.n	8006e30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	4798      	blx	r3
 8006dde:	e027      	b.n	8006e30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d023      	beq.n	8006e30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	4798      	blx	r3
 8006df0:	e01e      	b.n	8006e30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10f      	bne.n	8006e20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0210 	bic.w	r2, r2, #16
 8006e0e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8306 	beq.w	8007446 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 8088 	beq.w	8006f58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a7a      	ldr	r2, [pc, #488]	; (8007040 <HAL_DMA_IRQHandler+0xa08>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d04a      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a79      	ldr	r2, [pc, #484]	; (8007044 <HAL_DMA_IRQHandler+0xa0c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d045      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a77      	ldr	r2, [pc, #476]	; (8007048 <HAL_DMA_IRQHandler+0xa10>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d040      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a76      	ldr	r2, [pc, #472]	; (800704c <HAL_DMA_IRQHandler+0xa14>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d03b      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a74      	ldr	r2, [pc, #464]	; (8007050 <HAL_DMA_IRQHandler+0xa18>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d036      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a73      	ldr	r2, [pc, #460]	; (8007054 <HAL_DMA_IRQHandler+0xa1c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d031      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a71      	ldr	r2, [pc, #452]	; (8007058 <HAL_DMA_IRQHandler+0xa20>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d02c      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a70      	ldr	r2, [pc, #448]	; (800705c <HAL_DMA_IRQHandler+0xa24>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d027      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a6e      	ldr	r2, [pc, #440]	; (8007060 <HAL_DMA_IRQHandler+0xa28>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d022      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a6d      	ldr	r2, [pc, #436]	; (8007064 <HAL_DMA_IRQHandler+0xa2c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d01d      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a6b      	ldr	r2, [pc, #428]	; (8007068 <HAL_DMA_IRQHandler+0xa30>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d018      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a6a      	ldr	r2, [pc, #424]	; (800706c <HAL_DMA_IRQHandler+0xa34>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d013      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a68      	ldr	r2, [pc, #416]	; (8007070 <HAL_DMA_IRQHandler+0xa38>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00e      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a67      	ldr	r2, [pc, #412]	; (8007074 <HAL_DMA_IRQHandler+0xa3c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d009      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a65      	ldr	r2, [pc, #404]	; (8007078 <HAL_DMA_IRQHandler+0xa40>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d004      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x8b8>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a64      	ldr	r2, [pc, #400]	; (800707c <HAL_DMA_IRQHandler+0xa44>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d108      	bne.n	8006f02 <HAL_DMA_IRQHandler+0x8ca>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0201 	bic.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	e007      	b.n	8006f12 <HAL_DMA_IRQHandler+0x8da>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0201 	bic.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d307      	bcc.n	8006f2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1f2      	bne.n	8006f12 <HAL_DMA_IRQHandler+0x8da>
 8006f2c:	e000      	b.n	8006f30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f2e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d004      	beq.n	8006f48 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2203      	movs	r2, #3
 8006f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006f46:	e003      	b.n	8006f50 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 8272 	beq.w	8007446 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4798      	blx	r3
 8006f6a:	e26c      	b.n	8007446 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a43      	ldr	r2, [pc, #268]	; (8007080 <HAL_DMA_IRQHandler+0xa48>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d022      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x984>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a42      	ldr	r2, [pc, #264]	; (8007084 <HAL_DMA_IRQHandler+0xa4c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d01d      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x984>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a40      	ldr	r2, [pc, #256]	; (8007088 <HAL_DMA_IRQHandler+0xa50>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d018      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x984>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a3f      	ldr	r2, [pc, #252]	; (800708c <HAL_DMA_IRQHandler+0xa54>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d013      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x984>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a3d      	ldr	r2, [pc, #244]	; (8007090 <HAL_DMA_IRQHandler+0xa58>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00e      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x984>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a3c      	ldr	r2, [pc, #240]	; (8007094 <HAL_DMA_IRQHandler+0xa5c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d009      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x984>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a3a      	ldr	r2, [pc, #232]	; (8007098 <HAL_DMA_IRQHandler+0xa60>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d004      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x984>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a39      	ldr	r2, [pc, #228]	; (800709c <HAL_DMA_IRQHandler+0xa64>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d101      	bne.n	8006fc0 <HAL_DMA_IRQHandler+0x988>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e000      	b.n	8006fc2 <HAL_DMA_IRQHandler+0x98a>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 823f 	beq.w	8007446 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	2204      	movs	r2, #4
 8006fda:	409a      	lsls	r2, r3
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80cd 	beq.w	8007180 <HAL_DMA_IRQHandler+0xb48>
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 80c7 	beq.w	8007180 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	2204      	movs	r2, #4
 8006ffc:	409a      	lsls	r2, r3
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d049      	beq.n	80070a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 8210 	beq.w	8007440 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007028:	e20a      	b.n	8007440 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 8206 	beq.w	8007440 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800703c:	e200      	b.n	8007440 <HAL_DMA_IRQHandler+0xe08>
 800703e:	bf00      	nop
 8007040:	40020010 	.word	0x40020010
 8007044:	40020028 	.word	0x40020028
 8007048:	40020040 	.word	0x40020040
 800704c:	40020058 	.word	0x40020058
 8007050:	40020070 	.word	0x40020070
 8007054:	40020088 	.word	0x40020088
 8007058:	400200a0 	.word	0x400200a0
 800705c:	400200b8 	.word	0x400200b8
 8007060:	40020410 	.word	0x40020410
 8007064:	40020428 	.word	0x40020428
 8007068:	40020440 	.word	0x40020440
 800706c:	40020458 	.word	0x40020458
 8007070:	40020470 	.word	0x40020470
 8007074:	40020488 	.word	0x40020488
 8007078:	400204a0 	.word	0x400204a0
 800707c:	400204b8 	.word	0x400204b8
 8007080:	58025408 	.word	0x58025408
 8007084:	5802541c 	.word	0x5802541c
 8007088:	58025430 	.word	0x58025430
 800708c:	58025444 	.word	0x58025444
 8007090:	58025458 	.word	0x58025458
 8007094:	5802546c 	.word	0x5802546c
 8007098:	58025480 	.word	0x58025480
 800709c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d160      	bne.n	800716c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a7f      	ldr	r2, [pc, #508]	; (80072ac <HAL_DMA_IRQHandler+0xc74>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d04a      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a7d      	ldr	r2, [pc, #500]	; (80072b0 <HAL_DMA_IRQHandler+0xc78>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d045      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a7c      	ldr	r2, [pc, #496]	; (80072b4 <HAL_DMA_IRQHandler+0xc7c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d040      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a7a      	ldr	r2, [pc, #488]	; (80072b8 <HAL_DMA_IRQHandler+0xc80>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d03b      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a79      	ldr	r2, [pc, #484]	; (80072bc <HAL_DMA_IRQHandler+0xc84>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d036      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a77      	ldr	r2, [pc, #476]	; (80072c0 <HAL_DMA_IRQHandler+0xc88>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d031      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a76      	ldr	r2, [pc, #472]	; (80072c4 <HAL_DMA_IRQHandler+0xc8c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d02c      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a74      	ldr	r2, [pc, #464]	; (80072c8 <HAL_DMA_IRQHandler+0xc90>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d027      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a73      	ldr	r2, [pc, #460]	; (80072cc <HAL_DMA_IRQHandler+0xc94>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d022      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a71      	ldr	r2, [pc, #452]	; (80072d0 <HAL_DMA_IRQHandler+0xc98>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d01d      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a70      	ldr	r2, [pc, #448]	; (80072d4 <HAL_DMA_IRQHandler+0xc9c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d018      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a6e      	ldr	r2, [pc, #440]	; (80072d8 <HAL_DMA_IRQHandler+0xca0>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d013      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a6d      	ldr	r2, [pc, #436]	; (80072dc <HAL_DMA_IRQHandler+0xca4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00e      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a6b      	ldr	r2, [pc, #428]	; (80072e0 <HAL_DMA_IRQHandler+0xca8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d009      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a6a      	ldr	r2, [pc, #424]	; (80072e4 <HAL_DMA_IRQHandler+0xcac>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d004      	beq.n	800714a <HAL_DMA_IRQHandler+0xb12>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a68      	ldr	r2, [pc, #416]	; (80072e8 <HAL_DMA_IRQHandler+0xcb0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d108      	bne.n	800715c <HAL_DMA_IRQHandler+0xb24>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0208 	bic.w	r2, r2, #8
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e007      	b.n	800716c <HAL_DMA_IRQHandler+0xb34>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0204 	bic.w	r2, r2, #4
 800716a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8165 	beq.w	8007440 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800717e:	e15f      	b.n	8007440 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	2202      	movs	r2, #2
 800718a:	409a      	lsls	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80c5 	beq.w	8007320 <HAL_DMA_IRQHandler+0xce8>
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80bf 	beq.w	8007320 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a6:	f003 031f 	and.w	r3, r3, #31
 80071aa:	2202      	movs	r2, #2
 80071ac:	409a      	lsls	r2, r3
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d018      	beq.n	80071ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 813a 	beq.w	8007444 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d8:	e134      	b.n	8007444 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 8130 	beq.w	8007444 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071ec:	e12a      	b.n	8007444 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f003 0320 	and.w	r3, r3, #32
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f040 8089 	bne.w	800730c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2b      	ldr	r2, [pc, #172]	; (80072ac <HAL_DMA_IRQHandler+0xc74>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d04a      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a29      	ldr	r2, [pc, #164]	; (80072b0 <HAL_DMA_IRQHandler+0xc78>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d045      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a28      	ldr	r2, [pc, #160]	; (80072b4 <HAL_DMA_IRQHandler+0xc7c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d040      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a26      	ldr	r2, [pc, #152]	; (80072b8 <HAL_DMA_IRQHandler+0xc80>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d03b      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a25      	ldr	r2, [pc, #148]	; (80072bc <HAL_DMA_IRQHandler+0xc84>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d036      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a23      	ldr	r2, [pc, #140]	; (80072c0 <HAL_DMA_IRQHandler+0xc88>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d031      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a22      	ldr	r2, [pc, #136]	; (80072c4 <HAL_DMA_IRQHandler+0xc8c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d02c      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a20      	ldr	r2, [pc, #128]	; (80072c8 <HAL_DMA_IRQHandler+0xc90>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d027      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1f      	ldr	r2, [pc, #124]	; (80072cc <HAL_DMA_IRQHandler+0xc94>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d022      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1d      	ldr	r2, [pc, #116]	; (80072d0 <HAL_DMA_IRQHandler+0xc98>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d01d      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1c      	ldr	r2, [pc, #112]	; (80072d4 <HAL_DMA_IRQHandler+0xc9c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d018      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1a      	ldr	r2, [pc, #104]	; (80072d8 <HAL_DMA_IRQHandler+0xca0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a19      	ldr	r2, [pc, #100]	; (80072dc <HAL_DMA_IRQHandler+0xca4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00e      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <HAL_DMA_IRQHandler+0xca8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d009      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <HAL_DMA_IRQHandler+0xcac>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <HAL_DMA_IRQHandler+0xc62>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a14      	ldr	r2, [pc, #80]	; (80072e8 <HAL_DMA_IRQHandler+0xcb0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d128      	bne.n	80072ec <HAL_DMA_IRQHandler+0xcb4>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0214 	bic.w	r2, r2, #20
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	e027      	b.n	80072fc <HAL_DMA_IRQHandler+0xcc4>
 80072ac:	40020010 	.word	0x40020010
 80072b0:	40020028 	.word	0x40020028
 80072b4:	40020040 	.word	0x40020040
 80072b8:	40020058 	.word	0x40020058
 80072bc:	40020070 	.word	0x40020070
 80072c0:	40020088 	.word	0x40020088
 80072c4:	400200a0 	.word	0x400200a0
 80072c8:	400200b8 	.word	0x400200b8
 80072cc:	40020410 	.word	0x40020410
 80072d0:	40020428 	.word	0x40020428
 80072d4:	40020440 	.word	0x40020440
 80072d8:	40020458 	.word	0x40020458
 80072dc:	40020470 	.word	0x40020470
 80072e0:	40020488 	.word	0x40020488
 80072e4:	400204a0 	.word	0x400204a0
 80072e8:	400204b8 	.word	0x400204b8
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 020a 	bic.w	r2, r2, #10
 80072fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8097 	beq.w	8007444 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800731e:	e091      	b.n	8007444 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	2208      	movs	r2, #8
 800732a:	409a      	lsls	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8088 	beq.w	8007446 <HAL_DMA_IRQHandler+0xe0e>
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8082 	beq.w	8007446 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a41      	ldr	r2, [pc, #260]	; (800744c <HAL_DMA_IRQHandler+0xe14>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d04a      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a3f      	ldr	r2, [pc, #252]	; (8007450 <HAL_DMA_IRQHandler+0xe18>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d045      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a3e      	ldr	r2, [pc, #248]	; (8007454 <HAL_DMA_IRQHandler+0xe1c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d040      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a3c      	ldr	r2, [pc, #240]	; (8007458 <HAL_DMA_IRQHandler+0xe20>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d03b      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a3b      	ldr	r2, [pc, #236]	; (800745c <HAL_DMA_IRQHandler+0xe24>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d036      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a39      	ldr	r2, [pc, #228]	; (8007460 <HAL_DMA_IRQHandler+0xe28>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d031      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a38      	ldr	r2, [pc, #224]	; (8007464 <HAL_DMA_IRQHandler+0xe2c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d02c      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a36      	ldr	r2, [pc, #216]	; (8007468 <HAL_DMA_IRQHandler+0xe30>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d027      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a35      	ldr	r2, [pc, #212]	; (800746c <HAL_DMA_IRQHandler+0xe34>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d022      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a33      	ldr	r2, [pc, #204]	; (8007470 <HAL_DMA_IRQHandler+0xe38>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d01d      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a32      	ldr	r2, [pc, #200]	; (8007474 <HAL_DMA_IRQHandler+0xe3c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d018      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a30      	ldr	r2, [pc, #192]	; (8007478 <HAL_DMA_IRQHandler+0xe40>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d013      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2f      	ldr	r2, [pc, #188]	; (800747c <HAL_DMA_IRQHandler+0xe44>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00e      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a2d      	ldr	r2, [pc, #180]	; (8007480 <HAL_DMA_IRQHandler+0xe48>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d009      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a2c      	ldr	r2, [pc, #176]	; (8007484 <HAL_DMA_IRQHandler+0xe4c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d004      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xdaa>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a2a      	ldr	r2, [pc, #168]	; (8007488 <HAL_DMA_IRQHandler+0xe50>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d108      	bne.n	80073f4 <HAL_DMA_IRQHandler+0xdbc>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 021c 	bic.w	r2, r2, #28
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	e007      	b.n	8007404 <HAL_DMA_IRQHandler+0xdcc>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 020e 	bic.w	r2, r2, #14
 8007402:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	2201      	movs	r2, #1
 800740e:	409a      	lsls	r2, r3
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
 800743a:	e004      	b.n	8007446 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800743c:	bf00      	nop
 800743e:	e002      	b.n	8007446 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007440:	bf00      	nop
 8007442:	e000      	b.n	8007446 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007444:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007446:	3728      	adds	r7, #40	; 0x28
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8

0800748c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a7f      	ldr	r2, [pc, #508]	; (80076a8 <DMA_SetConfig+0x21c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d072      	beq.n	8007596 <DMA_SetConfig+0x10a>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a7d      	ldr	r2, [pc, #500]	; (80076ac <DMA_SetConfig+0x220>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d06d      	beq.n	8007596 <DMA_SetConfig+0x10a>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a7c      	ldr	r2, [pc, #496]	; (80076b0 <DMA_SetConfig+0x224>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d068      	beq.n	8007596 <DMA_SetConfig+0x10a>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a7a      	ldr	r2, [pc, #488]	; (80076b4 <DMA_SetConfig+0x228>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d063      	beq.n	8007596 <DMA_SetConfig+0x10a>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a79      	ldr	r2, [pc, #484]	; (80076b8 <DMA_SetConfig+0x22c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d05e      	beq.n	8007596 <DMA_SetConfig+0x10a>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a77      	ldr	r2, [pc, #476]	; (80076bc <DMA_SetConfig+0x230>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d059      	beq.n	8007596 <DMA_SetConfig+0x10a>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a76      	ldr	r2, [pc, #472]	; (80076c0 <DMA_SetConfig+0x234>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d054      	beq.n	8007596 <DMA_SetConfig+0x10a>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a74      	ldr	r2, [pc, #464]	; (80076c4 <DMA_SetConfig+0x238>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d04f      	beq.n	8007596 <DMA_SetConfig+0x10a>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a73      	ldr	r2, [pc, #460]	; (80076c8 <DMA_SetConfig+0x23c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d04a      	beq.n	8007596 <DMA_SetConfig+0x10a>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a71      	ldr	r2, [pc, #452]	; (80076cc <DMA_SetConfig+0x240>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d045      	beq.n	8007596 <DMA_SetConfig+0x10a>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a70      	ldr	r2, [pc, #448]	; (80076d0 <DMA_SetConfig+0x244>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d040      	beq.n	8007596 <DMA_SetConfig+0x10a>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a6e      	ldr	r2, [pc, #440]	; (80076d4 <DMA_SetConfig+0x248>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d03b      	beq.n	8007596 <DMA_SetConfig+0x10a>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a6d      	ldr	r2, [pc, #436]	; (80076d8 <DMA_SetConfig+0x24c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d036      	beq.n	8007596 <DMA_SetConfig+0x10a>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a6b      	ldr	r2, [pc, #428]	; (80076dc <DMA_SetConfig+0x250>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d031      	beq.n	8007596 <DMA_SetConfig+0x10a>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a6a      	ldr	r2, [pc, #424]	; (80076e0 <DMA_SetConfig+0x254>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d02c      	beq.n	8007596 <DMA_SetConfig+0x10a>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a68      	ldr	r2, [pc, #416]	; (80076e4 <DMA_SetConfig+0x258>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d027      	beq.n	8007596 <DMA_SetConfig+0x10a>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a67      	ldr	r2, [pc, #412]	; (80076e8 <DMA_SetConfig+0x25c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d022      	beq.n	8007596 <DMA_SetConfig+0x10a>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a65      	ldr	r2, [pc, #404]	; (80076ec <DMA_SetConfig+0x260>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d01d      	beq.n	8007596 <DMA_SetConfig+0x10a>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a64      	ldr	r2, [pc, #400]	; (80076f0 <DMA_SetConfig+0x264>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d018      	beq.n	8007596 <DMA_SetConfig+0x10a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a62      	ldr	r2, [pc, #392]	; (80076f4 <DMA_SetConfig+0x268>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <DMA_SetConfig+0x10a>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a61      	ldr	r2, [pc, #388]	; (80076f8 <DMA_SetConfig+0x26c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00e      	beq.n	8007596 <DMA_SetConfig+0x10a>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a5f      	ldr	r2, [pc, #380]	; (80076fc <DMA_SetConfig+0x270>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d009      	beq.n	8007596 <DMA_SetConfig+0x10a>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a5e      	ldr	r2, [pc, #376]	; (8007700 <DMA_SetConfig+0x274>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d004      	beq.n	8007596 <DMA_SetConfig+0x10a>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a5c      	ldr	r2, [pc, #368]	; (8007704 <DMA_SetConfig+0x278>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d101      	bne.n	800759a <DMA_SetConfig+0x10e>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <DMA_SetConfig+0x110>
 800759a:	2300      	movs	r3, #0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00d      	beq.n	80075bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a39      	ldr	r2, [pc, #228]	; (80076a8 <DMA_SetConfig+0x21c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d04a      	beq.n	800765c <DMA_SetConfig+0x1d0>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a38      	ldr	r2, [pc, #224]	; (80076ac <DMA_SetConfig+0x220>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d045      	beq.n	800765c <DMA_SetConfig+0x1d0>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a36      	ldr	r2, [pc, #216]	; (80076b0 <DMA_SetConfig+0x224>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d040      	beq.n	800765c <DMA_SetConfig+0x1d0>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a35      	ldr	r2, [pc, #212]	; (80076b4 <DMA_SetConfig+0x228>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d03b      	beq.n	800765c <DMA_SetConfig+0x1d0>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a33      	ldr	r2, [pc, #204]	; (80076b8 <DMA_SetConfig+0x22c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d036      	beq.n	800765c <DMA_SetConfig+0x1d0>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a32      	ldr	r2, [pc, #200]	; (80076bc <DMA_SetConfig+0x230>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d031      	beq.n	800765c <DMA_SetConfig+0x1d0>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a30      	ldr	r2, [pc, #192]	; (80076c0 <DMA_SetConfig+0x234>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d02c      	beq.n	800765c <DMA_SetConfig+0x1d0>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2f      	ldr	r2, [pc, #188]	; (80076c4 <DMA_SetConfig+0x238>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d027      	beq.n	800765c <DMA_SetConfig+0x1d0>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a2d      	ldr	r2, [pc, #180]	; (80076c8 <DMA_SetConfig+0x23c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d022      	beq.n	800765c <DMA_SetConfig+0x1d0>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a2c      	ldr	r2, [pc, #176]	; (80076cc <DMA_SetConfig+0x240>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d01d      	beq.n	800765c <DMA_SetConfig+0x1d0>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2a      	ldr	r2, [pc, #168]	; (80076d0 <DMA_SetConfig+0x244>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d018      	beq.n	800765c <DMA_SetConfig+0x1d0>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a29      	ldr	r2, [pc, #164]	; (80076d4 <DMA_SetConfig+0x248>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d013      	beq.n	800765c <DMA_SetConfig+0x1d0>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a27      	ldr	r2, [pc, #156]	; (80076d8 <DMA_SetConfig+0x24c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00e      	beq.n	800765c <DMA_SetConfig+0x1d0>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a26      	ldr	r2, [pc, #152]	; (80076dc <DMA_SetConfig+0x250>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d009      	beq.n	800765c <DMA_SetConfig+0x1d0>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a24      	ldr	r2, [pc, #144]	; (80076e0 <DMA_SetConfig+0x254>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <DMA_SetConfig+0x1d0>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a23      	ldr	r2, [pc, #140]	; (80076e4 <DMA_SetConfig+0x258>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d101      	bne.n	8007660 <DMA_SetConfig+0x1d4>
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <DMA_SetConfig+0x1d6>
 8007660:	2300      	movs	r3, #0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d059      	beq.n	800771a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766a:	f003 031f 	and.w	r3, r3, #31
 800766e:	223f      	movs	r2, #63	; 0x3f
 8007670:	409a      	lsls	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007684:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b40      	cmp	r3, #64	; 0x40
 8007694:	d138      	bne.n	8007708 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80076a6:	e086      	b.n	80077b6 <DMA_SetConfig+0x32a>
 80076a8:	40020010 	.word	0x40020010
 80076ac:	40020028 	.word	0x40020028
 80076b0:	40020040 	.word	0x40020040
 80076b4:	40020058 	.word	0x40020058
 80076b8:	40020070 	.word	0x40020070
 80076bc:	40020088 	.word	0x40020088
 80076c0:	400200a0 	.word	0x400200a0
 80076c4:	400200b8 	.word	0x400200b8
 80076c8:	40020410 	.word	0x40020410
 80076cc:	40020428 	.word	0x40020428
 80076d0:	40020440 	.word	0x40020440
 80076d4:	40020458 	.word	0x40020458
 80076d8:	40020470 	.word	0x40020470
 80076dc:	40020488 	.word	0x40020488
 80076e0:	400204a0 	.word	0x400204a0
 80076e4:	400204b8 	.word	0x400204b8
 80076e8:	58025408 	.word	0x58025408
 80076ec:	5802541c 	.word	0x5802541c
 80076f0:	58025430 	.word	0x58025430
 80076f4:	58025444 	.word	0x58025444
 80076f8:	58025458 	.word	0x58025458
 80076fc:	5802546c 	.word	0x5802546c
 8007700:	58025480 	.word	0x58025480
 8007704:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	60da      	str	r2, [r3, #12]
}
 8007718:	e04d      	b.n	80077b6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a29      	ldr	r2, [pc, #164]	; (80077c4 <DMA_SetConfig+0x338>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d022      	beq.n	800776a <DMA_SetConfig+0x2de>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a27      	ldr	r2, [pc, #156]	; (80077c8 <DMA_SetConfig+0x33c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01d      	beq.n	800776a <DMA_SetConfig+0x2de>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a26      	ldr	r2, [pc, #152]	; (80077cc <DMA_SetConfig+0x340>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d018      	beq.n	800776a <DMA_SetConfig+0x2de>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a24      	ldr	r2, [pc, #144]	; (80077d0 <DMA_SetConfig+0x344>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <DMA_SetConfig+0x2de>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a23      	ldr	r2, [pc, #140]	; (80077d4 <DMA_SetConfig+0x348>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00e      	beq.n	800776a <DMA_SetConfig+0x2de>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a21      	ldr	r2, [pc, #132]	; (80077d8 <DMA_SetConfig+0x34c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d009      	beq.n	800776a <DMA_SetConfig+0x2de>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a20      	ldr	r2, [pc, #128]	; (80077dc <DMA_SetConfig+0x350>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d004      	beq.n	800776a <DMA_SetConfig+0x2de>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1e      	ldr	r2, [pc, #120]	; (80077e0 <DMA_SetConfig+0x354>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d101      	bne.n	800776e <DMA_SetConfig+0x2e2>
 800776a:	2301      	movs	r3, #1
 800776c:	e000      	b.n	8007770 <DMA_SetConfig+0x2e4>
 800776e:	2300      	movs	r3, #0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d020      	beq.n	80077b6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	2201      	movs	r2, #1
 800777e:	409a      	lsls	r2, r3
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	d108      	bne.n	80077a6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	60da      	str	r2, [r3, #12]
}
 80077a4:	e007      	b.n	80077b6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	60da      	str	r2, [r3, #12]
}
 80077b6:	bf00      	nop
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	58025408 	.word	0x58025408
 80077c8:	5802541c 	.word	0x5802541c
 80077cc:	58025430 	.word	0x58025430
 80077d0:	58025444 	.word	0x58025444
 80077d4:	58025458 	.word	0x58025458
 80077d8:	5802546c 	.word	0x5802546c
 80077dc:	58025480 	.word	0x58025480
 80077e0:	58025494 	.word	0x58025494

080077e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a42      	ldr	r2, [pc, #264]	; (80078fc <DMA_CalcBaseAndBitshift+0x118>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d04a      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a41      	ldr	r2, [pc, #260]	; (8007900 <DMA_CalcBaseAndBitshift+0x11c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d045      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a3f      	ldr	r2, [pc, #252]	; (8007904 <DMA_CalcBaseAndBitshift+0x120>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d040      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a3e      	ldr	r2, [pc, #248]	; (8007908 <DMA_CalcBaseAndBitshift+0x124>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d03b      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a3c      	ldr	r2, [pc, #240]	; (800790c <DMA_CalcBaseAndBitshift+0x128>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d036      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a3b      	ldr	r2, [pc, #236]	; (8007910 <DMA_CalcBaseAndBitshift+0x12c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d031      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a39      	ldr	r2, [pc, #228]	; (8007914 <DMA_CalcBaseAndBitshift+0x130>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d02c      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a38      	ldr	r2, [pc, #224]	; (8007918 <DMA_CalcBaseAndBitshift+0x134>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d027      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a36      	ldr	r2, [pc, #216]	; (800791c <DMA_CalcBaseAndBitshift+0x138>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d022      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a35      	ldr	r2, [pc, #212]	; (8007920 <DMA_CalcBaseAndBitshift+0x13c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d01d      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a33      	ldr	r2, [pc, #204]	; (8007924 <DMA_CalcBaseAndBitshift+0x140>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d018      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a32      	ldr	r2, [pc, #200]	; (8007928 <DMA_CalcBaseAndBitshift+0x144>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a30      	ldr	r2, [pc, #192]	; (800792c <DMA_CalcBaseAndBitshift+0x148>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00e      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2f      	ldr	r2, [pc, #188]	; (8007930 <DMA_CalcBaseAndBitshift+0x14c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d009      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <DMA_CalcBaseAndBitshift+0x150>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d004      	beq.n	800788c <DMA_CalcBaseAndBitshift+0xa8>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a2c      	ldr	r2, [pc, #176]	; (8007938 <DMA_CalcBaseAndBitshift+0x154>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d101      	bne.n	8007890 <DMA_CalcBaseAndBitshift+0xac>
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <DMA_CalcBaseAndBitshift+0xae>
 8007890:	2300      	movs	r3, #0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d024      	beq.n	80078e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	3b10      	subs	r3, #16
 800789e:	4a27      	ldr	r2, [pc, #156]	; (800793c <DMA_CalcBaseAndBitshift+0x158>)
 80078a0:	fba2 2303 	umull	r2, r3, r2, r3
 80078a4:	091b      	lsrs	r3, r3, #4
 80078a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	4a24      	ldr	r2, [pc, #144]	; (8007940 <DMA_CalcBaseAndBitshift+0x15c>)
 80078b0:	5cd3      	ldrb	r3, [r2, r3]
 80078b2:	461a      	mov	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d908      	bls.n	80078d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	4b1f      	ldr	r3, [pc, #124]	; (8007944 <DMA_CalcBaseAndBitshift+0x160>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	1d1a      	adds	r2, r3, #4
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	659a      	str	r2, [r3, #88]	; 0x58
 80078ce:	e00d      	b.n	80078ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <DMA_CalcBaseAndBitshift+0x160>)
 80078d8:	4013      	ands	r3, r2
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6593      	str	r3, [r2, #88]	; 0x58
 80078de:	e005      	b.n	80078ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	40020010 	.word	0x40020010
 8007900:	40020028 	.word	0x40020028
 8007904:	40020040 	.word	0x40020040
 8007908:	40020058 	.word	0x40020058
 800790c:	40020070 	.word	0x40020070
 8007910:	40020088 	.word	0x40020088
 8007914:	400200a0 	.word	0x400200a0
 8007918:	400200b8 	.word	0x400200b8
 800791c:	40020410 	.word	0x40020410
 8007920:	40020428 	.word	0x40020428
 8007924:	40020440 	.word	0x40020440
 8007928:	40020458 	.word	0x40020458
 800792c:	40020470 	.word	0x40020470
 8007930:	40020488 	.word	0x40020488
 8007934:	400204a0 	.word	0x400204a0
 8007938:	400204b8 	.word	0x400204b8
 800793c:	aaaaaaab 	.word	0xaaaaaaab
 8007940:	08014cb4 	.word	0x08014cb4
 8007944:	fffffc00 	.word	0xfffffc00

08007948 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d120      	bne.n	800799e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007960:	2b03      	cmp	r3, #3
 8007962:	d858      	bhi.n	8007a16 <DMA_CheckFifoParam+0xce>
 8007964:	a201      	add	r2, pc, #4	; (adr r2, 800796c <DMA_CheckFifoParam+0x24>)
 8007966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796a:	bf00      	nop
 800796c:	0800797d 	.word	0x0800797d
 8007970:	0800798f 	.word	0x0800798f
 8007974:	0800797d 	.word	0x0800797d
 8007978:	08007a17 	.word	0x08007a17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d048      	beq.n	8007a1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800798c:	e045      	b.n	8007a1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007992:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007996:	d142      	bne.n	8007a1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800799c:	e03f      	b.n	8007a1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a6:	d123      	bne.n	80079f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d838      	bhi.n	8007a22 <DMA_CheckFifoParam+0xda>
 80079b0:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <DMA_CheckFifoParam+0x70>)
 80079b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	080079c9 	.word	0x080079c9
 80079bc:	080079cf 	.word	0x080079cf
 80079c0:	080079c9 	.word	0x080079c9
 80079c4:	080079e1 	.word	0x080079e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	73fb      	strb	r3, [r7, #15]
        break;
 80079cc:	e030      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d025      	beq.n	8007a26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079de:	e022      	b.n	8007a26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079e8:	d11f      	bne.n	8007a2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079ee:	e01c      	b.n	8007a2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d902      	bls.n	80079fe <DMA_CheckFifoParam+0xb6>
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d003      	beq.n	8007a04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80079fc:	e018      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
        break;
 8007a02:	e015      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00e      	beq.n	8007a2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	73fb      	strb	r3, [r7, #15]
    break;
 8007a14:	e00b      	b.n	8007a2e <DMA_CheckFifoParam+0xe6>
        break;
 8007a16:	bf00      	nop
 8007a18:	e00a      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
        break;
 8007a1a:	bf00      	nop
 8007a1c:	e008      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
        break;
 8007a1e:	bf00      	nop
 8007a20:	e006      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
        break;
 8007a22:	bf00      	nop
 8007a24:	e004      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
        break;
 8007a26:	bf00      	nop
 8007a28:	e002      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
        break;
 8007a2a:	bf00      	nop
 8007a2c:	e000      	b.n	8007a30 <DMA_CheckFifoParam+0xe8>
    break;
 8007a2e:	bf00      	nop
    }
  }

  return status;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop

08007a40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a38      	ldr	r2, [pc, #224]	; (8007b34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d022      	beq.n	8007a9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a36      	ldr	r2, [pc, #216]	; (8007b38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d01d      	beq.n	8007a9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a35      	ldr	r2, [pc, #212]	; (8007b3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d018      	beq.n	8007a9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a33      	ldr	r2, [pc, #204]	; (8007b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d013      	beq.n	8007a9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a32      	ldr	r2, [pc, #200]	; (8007b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d00e      	beq.n	8007a9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a30      	ldr	r2, [pc, #192]	; (8007b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d009      	beq.n	8007a9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a2f      	ldr	r2, [pc, #188]	; (8007b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d004      	beq.n	8007a9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a2d      	ldr	r2, [pc, #180]	; (8007b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d101      	bne.n	8007aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01a      	beq.n	8007ade <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	3b08      	subs	r3, #8
 8007ab0:	4a28      	ldr	r2, [pc, #160]	; (8007b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab6:	091b      	lsrs	r3, r3, #4
 8007ab8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4b26      	ldr	r3, [pc, #152]	; (8007b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a24      	ldr	r2, [pc, #144]	; (8007b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007acc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f003 031f 	and.w	r3, r3, #31
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	409a      	lsls	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007adc:	e024      	b.n	8007b28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	3b10      	subs	r3, #16
 8007ae6:	4a1e      	ldr	r2, [pc, #120]	; (8007b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aec:	091b      	lsrs	r3, r3, #4
 8007aee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4a1c      	ldr	r2, [pc, #112]	; (8007b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d806      	bhi.n	8007b06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4a1b      	ldr	r2, [pc, #108]	; (8007b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d902      	bls.n	8007b06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3308      	adds	r3, #8
 8007b04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4b18      	ldr	r3, [pc, #96]	; (8007b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a16      	ldr	r2, [pc, #88]	; (8007b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 031f 	and.w	r3, r3, #31
 8007b20:	2201      	movs	r2, #1
 8007b22:	409a      	lsls	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b28:	bf00      	nop
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	58025408 	.word	0x58025408
 8007b38:	5802541c 	.word	0x5802541c
 8007b3c:	58025430 	.word	0x58025430
 8007b40:	58025444 	.word	0x58025444
 8007b44:	58025458 	.word	0x58025458
 8007b48:	5802546c 	.word	0x5802546c
 8007b4c:	58025480 	.word	0x58025480
 8007b50:	58025494 	.word	0x58025494
 8007b54:	cccccccd 	.word	0xcccccccd
 8007b58:	16009600 	.word	0x16009600
 8007b5c:	58025880 	.word	0x58025880
 8007b60:	aaaaaaab 	.word	0xaaaaaaab
 8007b64:	400204b8 	.word	0x400204b8
 8007b68:	4002040f 	.word	0x4002040f
 8007b6c:	10008200 	.word	0x10008200
 8007b70:	40020880 	.word	0x40020880

08007b74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d04a      	beq.n	8007c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d847      	bhi.n	8007c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a25      	ldr	r2, [pc, #148]	; (8007c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d022      	beq.n	8007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a24      	ldr	r2, [pc, #144]	; (8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d01d      	beq.n	8007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a22      	ldr	r2, [pc, #136]	; (8007c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d018      	beq.n	8007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a21      	ldr	r2, [pc, #132]	; (8007c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d013      	beq.n	8007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a1f      	ldr	r2, [pc, #124]	; (8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00e      	beq.n	8007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a1e      	ldr	r2, [pc, #120]	; (8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d009      	beq.n	8007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d004      	beq.n	8007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a1b      	ldr	r2, [pc, #108]	; (8007c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d101      	bne.n	8007be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007be0:	2301      	movs	r3, #1
 8007be2:	e000      	b.n	8007be6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007be4:	2300      	movs	r3, #0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	4b17      	ldr	r3, [pc, #92]	; (8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a15      	ldr	r2, [pc, #84]	; (8007c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007bfc:	671a      	str	r2, [r3, #112]	; 0x70
 8007bfe:	e009      	b.n	8007c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4b14      	ldr	r3, [pc, #80]	; (8007c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	461a      	mov	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a11      	ldr	r2, [pc, #68]	; (8007c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c12:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	2201      	movs	r2, #1
 8007c1a:	409a      	lsls	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007c20:	bf00      	nop
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	58025408 	.word	0x58025408
 8007c30:	5802541c 	.word	0x5802541c
 8007c34:	58025430 	.word	0x58025430
 8007c38:	58025444 	.word	0x58025444
 8007c3c:	58025458 	.word	0x58025458
 8007c40:	5802546c 	.word	0x5802546c
 8007c44:	58025480 	.word	0x58025480
 8007c48:	58025494 	.word	0x58025494
 8007c4c:	1600963f 	.word	0x1600963f
 8007c50:	58025940 	.word	0x58025940
 8007c54:	1000823f 	.word	0x1000823f
 8007c58:	40020940 	.word	0x40020940

08007c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b089      	sub	sp, #36	; 0x24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c6a:	4b89      	ldr	r3, [pc, #548]	; (8007e90 <HAL_GPIO_Init+0x234>)
 8007c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c6e:	e194      	b.n	8007f9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	2101      	movs	r1, #1
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 8186 	beq.w	8007f94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d005      	beq.n	8007ca0 <HAL_GPIO_Init+0x44>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f003 0303 	and.w	r3, r3, #3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d130      	bne.n	8007d02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	2203      	movs	r2, #3
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	43db      	mvns	r3, r3
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	091b      	lsrs	r3, r3, #4
 8007cec:	f003 0201 	and.w	r2, r3, #1
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f003 0303 	and.w	r3, r3, #3
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d017      	beq.n	8007d3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	2203      	movs	r2, #3
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	43db      	mvns	r3, r3
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	4013      	ands	r3, r2
 8007d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d123      	bne.n	8007d92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	08da      	lsrs	r2, r3, #3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3208      	adds	r2, #8
 8007d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	220f      	movs	r2, #15
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	43db      	mvns	r3, r3
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	691a      	ldr	r2, [r3, #16]
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f003 0307 	and.w	r3, r3, #7
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	08da      	lsrs	r2, r3, #3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3208      	adds	r2, #8
 8007d8c:	69b9      	ldr	r1, [r7, #24]
 8007d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	2203      	movs	r2, #3
 8007d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007da2:	43db      	mvns	r3, r3
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4013      	ands	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f003 0203 	and.w	r2, r3, #3
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 80e0 	beq.w	8007f94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dd4:	4b2f      	ldr	r3, [pc, #188]	; (8007e94 <HAL_GPIO_Init+0x238>)
 8007dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dda:	4a2e      	ldr	r2, [pc, #184]	; (8007e94 <HAL_GPIO_Init+0x238>)
 8007ddc:	f043 0302 	orr.w	r3, r3, #2
 8007de0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007de4:	4b2b      	ldr	r3, [pc, #172]	; (8007e94 <HAL_GPIO_Init+0x238>)
 8007de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007df2:	4a29      	ldr	r2, [pc, #164]	; (8007e98 <HAL_GPIO_Init+0x23c>)
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	089b      	lsrs	r3, r3, #2
 8007df8:	3302      	adds	r3, #2
 8007dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	220f      	movs	r2, #15
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	43db      	mvns	r3, r3
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	4013      	ands	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a20      	ldr	r2, [pc, #128]	; (8007e9c <HAL_GPIO_Init+0x240>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d052      	beq.n	8007ec4 <HAL_GPIO_Init+0x268>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a1f      	ldr	r2, [pc, #124]	; (8007ea0 <HAL_GPIO_Init+0x244>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d031      	beq.n	8007e8a <HAL_GPIO_Init+0x22e>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <HAL_GPIO_Init+0x248>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d02b      	beq.n	8007e86 <HAL_GPIO_Init+0x22a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a1d      	ldr	r2, [pc, #116]	; (8007ea8 <HAL_GPIO_Init+0x24c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d025      	beq.n	8007e82 <HAL_GPIO_Init+0x226>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a1c      	ldr	r2, [pc, #112]	; (8007eac <HAL_GPIO_Init+0x250>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d01f      	beq.n	8007e7e <HAL_GPIO_Init+0x222>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1b      	ldr	r2, [pc, #108]	; (8007eb0 <HAL_GPIO_Init+0x254>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d019      	beq.n	8007e7a <HAL_GPIO_Init+0x21e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <HAL_GPIO_Init+0x258>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d013      	beq.n	8007e76 <HAL_GPIO_Init+0x21a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a19      	ldr	r2, [pc, #100]	; (8007eb8 <HAL_GPIO_Init+0x25c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00d      	beq.n	8007e72 <HAL_GPIO_Init+0x216>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a18      	ldr	r2, [pc, #96]	; (8007ebc <HAL_GPIO_Init+0x260>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d007      	beq.n	8007e6e <HAL_GPIO_Init+0x212>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a17      	ldr	r2, [pc, #92]	; (8007ec0 <HAL_GPIO_Init+0x264>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d101      	bne.n	8007e6a <HAL_GPIO_Init+0x20e>
 8007e66:	2309      	movs	r3, #9
 8007e68:	e02d      	b.n	8007ec6 <HAL_GPIO_Init+0x26a>
 8007e6a:	230a      	movs	r3, #10
 8007e6c:	e02b      	b.n	8007ec6 <HAL_GPIO_Init+0x26a>
 8007e6e:	2308      	movs	r3, #8
 8007e70:	e029      	b.n	8007ec6 <HAL_GPIO_Init+0x26a>
 8007e72:	2307      	movs	r3, #7
 8007e74:	e027      	b.n	8007ec6 <HAL_GPIO_Init+0x26a>
 8007e76:	2306      	movs	r3, #6
 8007e78:	e025      	b.n	8007ec6 <HAL_GPIO_Init+0x26a>
 8007e7a:	2305      	movs	r3, #5
 8007e7c:	e023      	b.n	8007ec6 <HAL_GPIO_Init+0x26a>
 8007e7e:	2304      	movs	r3, #4
 8007e80:	e021      	b.n	8007ec6 <HAL_GPIO_Init+0x26a>
 8007e82:	2303      	movs	r3, #3
 8007e84:	e01f      	b.n	8007ec6 <HAL_GPIO_Init+0x26a>
 8007e86:	2302      	movs	r3, #2
 8007e88:	e01d      	b.n	8007ec6 <HAL_GPIO_Init+0x26a>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e01b      	b.n	8007ec6 <HAL_GPIO_Init+0x26a>
 8007e8e:	bf00      	nop
 8007e90:	58000080 	.word	0x58000080
 8007e94:	58024400 	.word	0x58024400
 8007e98:	58000400 	.word	0x58000400
 8007e9c:	58020000 	.word	0x58020000
 8007ea0:	58020400 	.word	0x58020400
 8007ea4:	58020800 	.word	0x58020800
 8007ea8:	58020c00 	.word	0x58020c00
 8007eac:	58021000 	.word	0x58021000
 8007eb0:	58021400 	.word	0x58021400
 8007eb4:	58021800 	.word	0x58021800
 8007eb8:	58021c00 	.word	0x58021c00
 8007ebc:	58022000 	.word	0x58022000
 8007ec0:	58022400 	.word	0x58022400
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	f002 0203 	and.w	r2, r2, #3
 8007ecc:	0092      	lsls	r2, r2, #2
 8007ece:	4093      	lsls	r3, r2
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ed6:	4938      	ldr	r1, [pc, #224]	; (8007fb8 <HAL_GPIO_Init+0x35c>)
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	089b      	lsrs	r3, r3, #2
 8007edc:	3302      	adds	r3, #2
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	43db      	mvns	r3, r3
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	43db      	mvns	r3, r3
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	4013      	ands	r3, r2
 8007f22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	43db      	mvns	r3, r3
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	4013      	ands	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	3301      	adds	r3, #1
 8007f98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f47f ae63 	bne.w	8007c70 <HAL_GPIO_Init+0x14>
  }
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	3724      	adds	r7, #36	; 0x24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	58000400 	.word	0x58000400

08007fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	887b      	ldrh	r3, [r7, #2]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	73fb      	strb	r3, [r7, #15]
 8007fd8:	e001      	b.n	8007fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	807b      	strh	r3, [r7, #2]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ffc:	787b      	ldrb	r3, [r7, #1]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008002:	887a      	ldrh	r2, [r7, #2]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008008:	e003      	b.n	8008012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800800a:	887b      	ldrh	r3, [r7, #2]
 800800c:	041a      	lsls	r2, r3, #16
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	619a      	str	r2, [r3, #24]
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e08b      	b.n	800814a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fa f96a 	bl	8002320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2224      	movs	r2, #36	; 0x24
 8008050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0201 	bic.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d107      	bne.n	800809a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008096:	609a      	str	r2, [r3, #8]
 8008098:	e006      	b.n	80080a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689a      	ldr	r2, [r3, #8]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80080a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d108      	bne.n	80080c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080be:	605a      	str	r2, [r3, #4]
 80080c0:	e007      	b.n	80080d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6859      	ldr	r1, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	4b1d      	ldr	r3, [pc, #116]	; (8008154 <HAL_I2C_Init+0x134>)
 80080de:	430b      	orrs	r3, r1
 80080e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691a      	ldr	r2, [r3, #16]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	69d9      	ldr	r1, [r3, #28]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1a      	ldr	r2, [r3, #32]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f042 0201 	orr.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	02008000 	.word	0x02008000

08008158 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b20      	cmp	r3, #32
 800816c:	d138      	bne.n	80081e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008178:	2302      	movs	r3, #2
 800817a:	e032      	b.n	80081e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	; 0x24
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6819      	ldr	r1, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0201 	orr.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	e000      	b.n	80081e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081e0:	2302      	movs	r3, #2
  }
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b20      	cmp	r3, #32
 8008202:	d139      	bne.n	8008278 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800820a:	2b01      	cmp	r3, #1
 800820c:	d101      	bne.n	8008212 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800820e:	2302      	movs	r3, #2
 8008210:	e033      	b.n	800827a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2224      	movs	r2, #36	; 0x24
 800821e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0201 	bic.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008240:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0201 	orr.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	e000      	b.n	800827a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008278:	2302      	movs	r3, #2
  }
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
	...

08008288 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008290:	4b19      	ldr	r3, [pc, #100]	; (80082f8 <HAL_PWREx_ConfigSupply+0x70>)
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b04      	cmp	r3, #4
 800829a:	d00a      	beq.n	80082b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800829c:	4b16      	ldr	r3, [pc, #88]	; (80082f8 <HAL_PWREx_ConfigSupply+0x70>)
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f003 0307 	and.w	r3, r3, #7
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d001      	beq.n	80082ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e01f      	b.n	80082ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e01d      	b.n	80082ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80082b2:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <HAL_PWREx_ConfigSupply+0x70>)
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f023 0207 	bic.w	r2, r3, #7
 80082ba:	490f      	ldr	r1, [pc, #60]	; (80082f8 <HAL_PWREx_ConfigSupply+0x70>)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80082c2:	f7fa fd67 	bl	8002d94 <HAL_GetTick>
 80082c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082c8:	e009      	b.n	80082de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082ca:	f7fa fd63 	bl	8002d94 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082d8:	d901      	bls.n	80082de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e007      	b.n	80082ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082de:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <HAL_PWREx_ConfigSupply+0x70>)
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ea:	d1ee      	bne.n	80082ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	58024800 	.word	0x58024800

080082fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08c      	sub	sp, #48	; 0x30
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d102      	bne.n	8008310 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	f000 bc48 	b.w	8008ba0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 8088 	beq.w	800842e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800831e:	4b99      	ldr	r3, [pc, #612]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008328:	4b96      	ldr	r3, [pc, #600]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	2b10      	cmp	r3, #16
 8008332:	d007      	beq.n	8008344 <HAL_RCC_OscConfig+0x48>
 8008334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008336:	2b18      	cmp	r3, #24
 8008338:	d111      	bne.n	800835e <HAL_RCC_OscConfig+0x62>
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	f003 0303 	and.w	r3, r3, #3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d10c      	bne.n	800835e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008344:	4b8f      	ldr	r3, [pc, #572]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d06d      	beq.n	800842c <HAL_RCC_OscConfig+0x130>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d169      	bne.n	800842c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	f000 bc21 	b.w	8008ba0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008366:	d106      	bne.n	8008376 <HAL_RCC_OscConfig+0x7a>
 8008368:	4b86      	ldr	r3, [pc, #536]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a85      	ldr	r2, [pc, #532]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 800836e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	e02e      	b.n	80083d4 <HAL_RCC_OscConfig+0xd8>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10c      	bne.n	8008398 <HAL_RCC_OscConfig+0x9c>
 800837e:	4b81      	ldr	r3, [pc, #516]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a80      	ldr	r2, [pc, #512]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	4b7e      	ldr	r3, [pc, #504]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a7d      	ldr	r2, [pc, #500]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	e01d      	b.n	80083d4 <HAL_RCC_OscConfig+0xd8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083a0:	d10c      	bne.n	80083bc <HAL_RCC_OscConfig+0xc0>
 80083a2:	4b78      	ldr	r3, [pc, #480]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a77      	ldr	r2, [pc, #476]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80083a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	4b75      	ldr	r3, [pc, #468]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a74      	ldr	r2, [pc, #464]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80083b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	e00b      	b.n	80083d4 <HAL_RCC_OscConfig+0xd8>
 80083bc:	4b71      	ldr	r3, [pc, #452]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a70      	ldr	r2, [pc, #448]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80083c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	4b6e      	ldr	r3, [pc, #440]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a6d      	ldr	r2, [pc, #436]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80083ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d013      	beq.n	8008404 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083dc:	f7fa fcda 	bl	8002d94 <HAL_GetTick>
 80083e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083e4:	f7fa fcd6 	bl	8002d94 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b64      	cmp	r3, #100	; 0x64
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e3d4      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083f6:	4b63      	ldr	r3, [pc, #396]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0f0      	beq.n	80083e4 <HAL_RCC_OscConfig+0xe8>
 8008402:	e014      	b.n	800842e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008404:	f7fa fcc6 	bl	8002d94 <HAL_GetTick>
 8008408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800840a:	e008      	b.n	800841e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800840c:	f7fa fcc2 	bl	8002d94 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b64      	cmp	r3, #100	; 0x64
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e3c0      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800841e:	4b59      	ldr	r3, [pc, #356]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f0      	bne.n	800840c <HAL_RCC_OscConfig+0x110>
 800842a:	e000      	b.n	800842e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800842c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 80ca 	beq.w	80085d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800843c:	4b51      	ldr	r3, [pc, #324]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008444:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008446:	4b4f      	ldr	r3, [pc, #316]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <HAL_RCC_OscConfig+0x166>
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	2b18      	cmp	r3, #24
 8008456:	d156      	bne.n	8008506 <HAL_RCC_OscConfig+0x20a>
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	f003 0303 	and.w	r3, r3, #3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d151      	bne.n	8008506 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008462:	4b48      	ldr	r3, [pc, #288]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0304 	and.w	r3, r3, #4
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <HAL_RCC_OscConfig+0x17e>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e392      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800847a:	4b42      	ldr	r3, [pc, #264]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f023 0219 	bic.w	r2, r3, #25
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	493f      	ldr	r1, [pc, #252]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008488:	4313      	orrs	r3, r2
 800848a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800848c:	f7fa fc82 	bl	8002d94 <HAL_GetTick>
 8008490:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008492:	e008      	b.n	80084a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008494:	f7fa fc7e 	bl	8002d94 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d901      	bls.n	80084a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e37c      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084a6:	4b37      	ldr	r3, [pc, #220]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0304 	and.w	r3, r3, #4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0f0      	beq.n	8008494 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084b2:	f7fa fc7b 	bl	8002dac <HAL_GetREVID>
 80084b6:	4603      	mov	r3, r0
 80084b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80084bc:	4293      	cmp	r3, r2
 80084be:	d817      	bhi.n	80084f0 <HAL_RCC_OscConfig+0x1f4>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b40      	cmp	r3, #64	; 0x40
 80084c6:	d108      	bne.n	80084da <HAL_RCC_OscConfig+0x1de>
 80084c8:	4b2e      	ldr	r3, [pc, #184]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80084d0:	4a2c      	ldr	r2, [pc, #176]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80084d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084d8:	e07a      	b.n	80085d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084da:	4b2a      	ldr	r3, [pc, #168]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	031b      	lsls	r3, r3, #12
 80084e8:	4926      	ldr	r1, [pc, #152]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084ee:	e06f      	b.n	80085d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084f0:	4b24      	ldr	r3, [pc, #144]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	061b      	lsls	r3, r3, #24
 80084fe:	4921      	ldr	r1, [pc, #132]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008500:	4313      	orrs	r3, r2
 8008502:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008504:	e064      	b.n	80085d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d047      	beq.n	800859e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800850e:	4b1d      	ldr	r3, [pc, #116]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f023 0219 	bic.w	r2, r3, #25
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	491a      	ldr	r1, [pc, #104]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 800851c:	4313      	orrs	r3, r2
 800851e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008520:	f7fa fc38 	bl	8002d94 <HAL_GetTick>
 8008524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008528:	f7fa fc34 	bl	8002d94 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e332      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800853a:	4b12      	ldr	r3, [pc, #72]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0304 	and.w	r3, r3, #4
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0f0      	beq.n	8008528 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008546:	f7fa fc31 	bl	8002dac <HAL_GetREVID>
 800854a:	4603      	mov	r3, r0
 800854c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008550:	4293      	cmp	r3, r2
 8008552:	d819      	bhi.n	8008588 <HAL_RCC_OscConfig+0x28c>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d108      	bne.n	800856e <HAL_RCC_OscConfig+0x272>
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008564:	4a07      	ldr	r2, [pc, #28]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800856a:	6053      	str	r3, [r2, #4]
 800856c:	e030      	b.n	80085d0 <HAL_RCC_OscConfig+0x2d4>
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	031b      	lsls	r3, r3, #12
 800857c:	4901      	ldr	r1, [pc, #4]	; (8008584 <HAL_RCC_OscConfig+0x288>)
 800857e:	4313      	orrs	r3, r2
 8008580:	604b      	str	r3, [r1, #4]
 8008582:	e025      	b.n	80085d0 <HAL_RCC_OscConfig+0x2d4>
 8008584:	58024400 	.word	0x58024400
 8008588:	4b9a      	ldr	r3, [pc, #616]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	061b      	lsls	r3, r3, #24
 8008596:	4997      	ldr	r1, [pc, #604]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 8008598:	4313      	orrs	r3, r2
 800859a:	604b      	str	r3, [r1, #4]
 800859c:	e018      	b.n	80085d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800859e:	4b95      	ldr	r3, [pc, #596]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a94      	ldr	r2, [pc, #592]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085aa:	f7fa fbf3 	bl	8002d94 <HAL_GetTick>
 80085ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085b0:	e008      	b.n	80085c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085b2:	f7fa fbef 	bl	8002d94 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d901      	bls.n	80085c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e2ed      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085c4:	4b8b      	ldr	r3, [pc, #556]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1f0      	bne.n	80085b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 80a9 	beq.w	8008730 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085de:	4b85      	ldr	r3, [pc, #532]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085e8:	4b82      	ldr	r3, [pc, #520]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d007      	beq.n	8008604 <HAL_RCC_OscConfig+0x308>
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2b18      	cmp	r3, #24
 80085f8:	d13a      	bne.n	8008670 <HAL_RCC_OscConfig+0x374>
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	2b01      	cmp	r3, #1
 8008602:	d135      	bne.n	8008670 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008604:	4b7b      	ldr	r3, [pc, #492]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <HAL_RCC_OscConfig+0x320>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	2b80      	cmp	r3, #128	; 0x80
 8008616:	d001      	beq.n	800861c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e2c1      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800861c:	f7fa fbc6 	bl	8002dac <HAL_GetREVID>
 8008620:	4603      	mov	r3, r0
 8008622:	f241 0203 	movw	r2, #4099	; 0x1003
 8008626:	4293      	cmp	r3, r2
 8008628:	d817      	bhi.n	800865a <HAL_RCC_OscConfig+0x35e>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	2b20      	cmp	r3, #32
 8008630:	d108      	bne.n	8008644 <HAL_RCC_OscConfig+0x348>
 8008632:	4b70      	ldr	r3, [pc, #448]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800863a:	4a6e      	ldr	r2, [pc, #440]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 800863c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008640:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008642:	e075      	b.n	8008730 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008644:	4b6b      	ldr	r3, [pc, #428]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	069b      	lsls	r3, r3, #26
 8008652:	4968      	ldr	r1, [pc, #416]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 8008654:	4313      	orrs	r3, r2
 8008656:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008658:	e06a      	b.n	8008730 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800865a:	4b66      	ldr	r3, [pc, #408]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	061b      	lsls	r3, r3, #24
 8008668:	4962      	ldr	r1, [pc, #392]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 800866a:	4313      	orrs	r3, r2
 800866c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800866e:	e05f      	b.n	8008730 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d042      	beq.n	80086fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008678:	4b5e      	ldr	r3, [pc, #376]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a5d      	ldr	r2, [pc, #372]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 800867e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008684:	f7fa fb86 	bl	8002d94 <HAL_GetTick>
 8008688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800868a:	e008      	b.n	800869e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800868c:	f7fa fb82 	bl	8002d94 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e280      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800869e:	4b55      	ldr	r3, [pc, #340]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0f0      	beq.n	800868c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086aa:	f7fa fb7f 	bl	8002dac <HAL_GetREVID>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d817      	bhi.n	80086e8 <HAL_RCC_OscConfig+0x3ec>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d108      	bne.n	80086d2 <HAL_RCC_OscConfig+0x3d6>
 80086c0:	4b4c      	ldr	r3, [pc, #304]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086c8:	4a4a      	ldr	r2, [pc, #296]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80086ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086ce:	6053      	str	r3, [r2, #4]
 80086d0:	e02e      	b.n	8008730 <HAL_RCC_OscConfig+0x434>
 80086d2:	4b48      	ldr	r3, [pc, #288]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	069b      	lsls	r3, r3, #26
 80086e0:	4944      	ldr	r1, [pc, #272]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	604b      	str	r3, [r1, #4]
 80086e6:	e023      	b.n	8008730 <HAL_RCC_OscConfig+0x434>
 80086e8:	4b42      	ldr	r3, [pc, #264]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	061b      	lsls	r3, r3, #24
 80086f6:	493f      	ldr	r1, [pc, #252]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	60cb      	str	r3, [r1, #12]
 80086fc:	e018      	b.n	8008730 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80086fe:	4b3d      	ldr	r3, [pc, #244]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a3c      	ldr	r2, [pc, #240]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 8008704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870a:	f7fa fb43 	bl	8002d94 <HAL_GetTick>
 800870e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008710:	e008      	b.n	8008724 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008712:	f7fa fb3f 	bl	8002d94 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d901      	bls.n	8008724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e23d      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008724:	4b33      	ldr	r3, [pc, #204]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f0      	bne.n	8008712 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0308 	and.w	r3, r3, #8
 8008738:	2b00      	cmp	r3, #0
 800873a:	d036      	beq.n	80087aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d019      	beq.n	8008778 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008744:	4b2b      	ldr	r3, [pc, #172]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 8008746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008748:	4a2a      	ldr	r2, [pc, #168]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 800874a:	f043 0301 	orr.w	r3, r3, #1
 800874e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008750:	f7fa fb20 	bl	8002d94 <HAL_GetTick>
 8008754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008758:	f7fa fb1c 	bl	8002d94 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e21a      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800876a:	4b22      	ldr	r3, [pc, #136]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 800876c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f0      	beq.n	8008758 <HAL_RCC_OscConfig+0x45c>
 8008776:	e018      	b.n	80087aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008778:	4b1e      	ldr	r3, [pc, #120]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 800877a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800877c:	4a1d      	ldr	r2, [pc, #116]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 800877e:	f023 0301 	bic.w	r3, r3, #1
 8008782:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008784:	f7fa fb06 	bl	8002d94 <HAL_GetTick>
 8008788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800878c:	f7fa fb02 	bl	8002d94 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e200      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800879e:	4b15      	ldr	r3, [pc, #84]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80087a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1f0      	bne.n	800878c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d039      	beq.n	800882a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d01c      	beq.n	80087f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087be:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a0c      	ldr	r2, [pc, #48]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80087c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087ca:	f7fa fae3 	bl	8002d94 <HAL_GetTick>
 80087ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087d0:	e008      	b.n	80087e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087d2:	f7fa fadf 	bl	8002d94 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e1dd      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087e4:	4b03      	ldr	r3, [pc, #12]	; (80087f4 <HAL_RCC_OscConfig+0x4f8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d0f0      	beq.n	80087d2 <HAL_RCC_OscConfig+0x4d6>
 80087f0:	e01b      	b.n	800882a <HAL_RCC_OscConfig+0x52e>
 80087f2:	bf00      	nop
 80087f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087f8:	4b9b      	ldr	r3, [pc, #620]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a9a      	ldr	r2, [pc, #616]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80087fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008802:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008804:	f7fa fac6 	bl	8002d94 <HAL_GetTick>
 8008808:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800880a:	e008      	b.n	800881e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800880c:	f7fa fac2 	bl	8002d94 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b02      	cmp	r3, #2
 8008818:	d901      	bls.n	800881e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e1c0      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800881e:	4b92      	ldr	r3, [pc, #584]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1f0      	bne.n	800880c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 8081 	beq.w	800893a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008838:	4b8c      	ldr	r3, [pc, #560]	; (8008a6c <HAL_RCC_OscConfig+0x770>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a8b      	ldr	r2, [pc, #556]	; (8008a6c <HAL_RCC_OscConfig+0x770>)
 800883e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008844:	f7fa faa6 	bl	8002d94 <HAL_GetTick>
 8008848:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800884a:	e008      	b.n	800885e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800884c:	f7fa faa2 	bl	8002d94 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b64      	cmp	r3, #100	; 0x64
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e1a0      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800885e:	4b83      	ldr	r3, [pc, #524]	; (8008a6c <HAL_RCC_OscConfig+0x770>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008866:	2b00      	cmp	r3, #0
 8008868:	d0f0      	beq.n	800884c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d106      	bne.n	8008880 <HAL_RCC_OscConfig+0x584>
 8008872:	4b7d      	ldr	r3, [pc, #500]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008876:	4a7c      	ldr	r2, [pc, #496]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	6713      	str	r3, [r2, #112]	; 0x70
 800887e:	e02d      	b.n	80088dc <HAL_RCC_OscConfig+0x5e0>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10c      	bne.n	80088a2 <HAL_RCC_OscConfig+0x5a6>
 8008888:	4b77      	ldr	r3, [pc, #476]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 800888a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888c:	4a76      	ldr	r2, [pc, #472]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 800888e:	f023 0301 	bic.w	r3, r3, #1
 8008892:	6713      	str	r3, [r2, #112]	; 0x70
 8008894:	4b74      	ldr	r3, [pc, #464]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008898:	4a73      	ldr	r2, [pc, #460]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 800889a:	f023 0304 	bic.w	r3, r3, #4
 800889e:	6713      	str	r3, [r2, #112]	; 0x70
 80088a0:	e01c      	b.n	80088dc <HAL_RCC_OscConfig+0x5e0>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2b05      	cmp	r3, #5
 80088a8:	d10c      	bne.n	80088c4 <HAL_RCC_OscConfig+0x5c8>
 80088aa:	4b6f      	ldr	r3, [pc, #444]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80088ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ae:	4a6e      	ldr	r2, [pc, #440]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80088b0:	f043 0304 	orr.w	r3, r3, #4
 80088b4:	6713      	str	r3, [r2, #112]	; 0x70
 80088b6:	4b6c      	ldr	r3, [pc, #432]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80088b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ba:	4a6b      	ldr	r2, [pc, #428]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80088bc:	f043 0301 	orr.w	r3, r3, #1
 80088c0:	6713      	str	r3, [r2, #112]	; 0x70
 80088c2:	e00b      	b.n	80088dc <HAL_RCC_OscConfig+0x5e0>
 80088c4:	4b68      	ldr	r3, [pc, #416]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80088c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c8:	4a67      	ldr	r2, [pc, #412]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80088ca:	f023 0301 	bic.w	r3, r3, #1
 80088ce:	6713      	str	r3, [r2, #112]	; 0x70
 80088d0:	4b65      	ldr	r3, [pc, #404]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80088d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d4:	4a64      	ldr	r2, [pc, #400]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80088d6:	f023 0304 	bic.w	r3, r3, #4
 80088da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d015      	beq.n	8008910 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e4:	f7fa fa56 	bl	8002d94 <HAL_GetTick>
 80088e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088ea:	e00a      	b.n	8008902 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ec:	f7fa fa52 	bl	8002d94 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e14e      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008902:	4b59      	ldr	r3, [pc, #356]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0ee      	beq.n	80088ec <HAL_RCC_OscConfig+0x5f0>
 800890e:	e014      	b.n	800893a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008910:	f7fa fa40 	bl	8002d94 <HAL_GetTick>
 8008914:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008916:	e00a      	b.n	800892e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008918:	f7fa fa3c 	bl	8002d94 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	f241 3288 	movw	r2, #5000	; 0x1388
 8008926:	4293      	cmp	r3, r2
 8008928:	d901      	bls.n	800892e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e138      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800892e:	4b4e      	ldr	r3, [pc, #312]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1ee      	bne.n	8008918 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 812d 	beq.w	8008b9e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008944:	4b48      	ldr	r3, [pc, #288]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800894c:	2b18      	cmp	r3, #24
 800894e:	f000 80bd 	beq.w	8008acc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	2b02      	cmp	r3, #2
 8008958:	f040 809e 	bne.w	8008a98 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800895c:	4b42      	ldr	r3, [pc, #264]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a41      	ldr	r2, [pc, #260]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008968:	f7fa fa14 	bl	8002d94 <HAL_GetTick>
 800896c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800896e:	e008      	b.n	8008982 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008970:	f7fa fa10 	bl	8002d94 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b02      	cmp	r3, #2
 800897c:	d901      	bls.n	8008982 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e10e      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008982:	4b39      	ldr	r3, [pc, #228]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1f0      	bne.n	8008970 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800898e:	4b36      	ldr	r3, [pc, #216]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008992:	4b37      	ldr	r3, [pc, #220]	; (8008a70 <HAL_RCC_OscConfig+0x774>)
 8008994:	4013      	ands	r3, r2
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800899e:	0112      	lsls	r2, r2, #4
 80089a0:	430a      	orrs	r2, r1
 80089a2:	4931      	ldr	r1, [pc, #196]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	628b      	str	r3, [r1, #40]	; 0x28
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ac:	3b01      	subs	r3, #1
 80089ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b6:	3b01      	subs	r3, #1
 80089b8:	025b      	lsls	r3, r3, #9
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	431a      	orrs	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c2:	3b01      	subs	r3, #1
 80089c4:	041b      	lsls	r3, r3, #16
 80089c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d0:	3b01      	subs	r3, #1
 80089d2:	061b      	lsls	r3, r3, #24
 80089d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089d8:	4923      	ldr	r1, [pc, #140]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80089de:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	4a21      	ldr	r2, [pc, #132]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80089e4:	f023 0301 	bic.w	r3, r3, #1
 80089e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089ea:	4b1f      	ldr	r3, [pc, #124]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80089ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ee:	4b21      	ldr	r3, [pc, #132]	; (8008a74 <HAL_RCC_OscConfig+0x778>)
 80089f0:	4013      	ands	r3, r2
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089f6:	00d2      	lsls	r2, r2, #3
 80089f8:	491b      	ldr	r1, [pc, #108]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80089fe:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	f023 020c 	bic.w	r2, r3, #12
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	4917      	ldr	r1, [pc, #92]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a10:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	f023 0202 	bic.w	r2, r3, #2
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1c:	4912      	ldr	r1, [pc, #72]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a22:	4b11      	ldr	r3, [pc, #68]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	4a10      	ldr	r2, [pc, #64]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a2e:	4b0e      	ldr	r3, [pc, #56]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a32:	4a0d      	ldr	r2, [pc, #52]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a3a:	4b0b      	ldr	r3, [pc, #44]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	4a0a      	ldr	r2, [pc, #40]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a46:	4b08      	ldr	r3, [pc, #32]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	4a07      	ldr	r2, [pc, #28]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a4c:	f043 0301 	orr.w	r3, r3, #1
 8008a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a04      	ldr	r2, [pc, #16]	; (8008a68 <HAL_RCC_OscConfig+0x76c>)
 8008a58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5e:	f7fa f999 	bl	8002d94 <HAL_GetTick>
 8008a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a64:	e011      	b.n	8008a8a <HAL_RCC_OscConfig+0x78e>
 8008a66:	bf00      	nop
 8008a68:	58024400 	.word	0x58024400
 8008a6c:	58024800 	.word	0x58024800
 8008a70:	fffffc0c 	.word	0xfffffc0c
 8008a74:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a78:	f7fa f98c 	bl	8002d94 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d901      	bls.n	8008a8a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e08a      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a8a:	4b47      	ldr	r3, [pc, #284]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0f0      	beq.n	8008a78 <HAL_RCC_OscConfig+0x77c>
 8008a96:	e082      	b.n	8008b9e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a98:	4b43      	ldr	r3, [pc, #268]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a42      	ldr	r2, [pc, #264]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa4:	f7fa f976 	bl	8002d94 <HAL_GetTick>
 8008aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aaa:	e008      	b.n	8008abe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aac:	f7fa f972 	bl	8002d94 <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d901      	bls.n	8008abe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e070      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008abe:	4b3a      	ldr	r3, [pc, #232]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1f0      	bne.n	8008aac <HAL_RCC_OscConfig+0x7b0>
 8008aca:	e068      	b.n	8008b9e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008acc:	4b36      	ldr	r3, [pc, #216]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ad2:	4b35      	ldr	r3, [pc, #212]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d031      	beq.n	8008b44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f003 0203 	and.w	r2, r3, #3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d12a      	bne.n	8008b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	091b      	lsrs	r3, r3, #4
 8008af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d122      	bne.n	8008b44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b08:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d11a      	bne.n	8008b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	0a5b      	lsrs	r3, r3, #9
 8008b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d111      	bne.n	8008b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	0c1b      	lsrs	r3, r3, #16
 8008b24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d108      	bne.n	8008b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	0e1b      	lsrs	r3, r3, #24
 8008b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d001      	beq.n	8008b48 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e02b      	b.n	8008ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b48:	4b17      	ldr	r3, [pc, #92]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4c:	08db      	lsrs	r3, r3, #3
 8008b4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b52:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d01f      	beq.n	8008b9e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b5e:	4b12      	ldr	r3, [pc, #72]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	4a11      	ldr	r2, [pc, #68]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008b64:	f023 0301 	bic.w	r3, r3, #1
 8008b68:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b6a:	f7fa f913 	bl	8002d94 <HAL_GetTick>
 8008b6e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008b70:	bf00      	nop
 8008b72:	f7fa f90f 	bl	8002d94 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d0f9      	beq.n	8008b72 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b82:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <HAL_RCC_OscConfig+0x8b0>)
 8008b84:	4013      	ands	r3, r2
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b8a:	00d2      	lsls	r2, r2, #3
 8008b8c:	4906      	ldr	r1, [pc, #24]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008b92:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	4a04      	ldr	r2, [pc, #16]	; (8008ba8 <HAL_RCC_OscConfig+0x8ac>)
 8008b98:	f043 0301 	orr.w	r3, r3, #1
 8008b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3730      	adds	r7, #48	; 0x30
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	58024400 	.word	0x58024400
 8008bac:	ffff0007 	.word	0xffff0007

08008bb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e19c      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bc4:	4b8a      	ldr	r3, [pc, #552]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 030f 	and.w	r3, r3, #15
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d910      	bls.n	8008bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bd2:	4b87      	ldr	r3, [pc, #540]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f023 020f 	bic.w	r2, r3, #15
 8008bda:	4985      	ldr	r1, [pc, #532]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008be2:	4b83      	ldr	r3, [pc, #524]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d001      	beq.n	8008bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e184      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0304 	and.w	r3, r3, #4
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d010      	beq.n	8008c22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	4b7b      	ldr	r3, [pc, #492]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d908      	bls.n	8008c22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c10:	4b78      	ldr	r3, [pc, #480]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	4975      	ldr	r1, [pc, #468]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0308 	and.w	r3, r3, #8
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d010      	beq.n	8008c50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	695a      	ldr	r2, [r3, #20]
 8008c32:	4b70      	ldr	r3, [pc, #448]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d908      	bls.n	8008c50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c3e:	4b6d      	ldr	r3, [pc, #436]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	496a      	ldr	r1, [pc, #424]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0310 	and.w	r3, r3, #16
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d010      	beq.n	8008c7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699a      	ldr	r2, [r3, #24]
 8008c60:	4b64      	ldr	r3, [pc, #400]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d908      	bls.n	8008c7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c6c:	4b61      	ldr	r3, [pc, #388]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	495e      	ldr	r1, [pc, #376]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d010      	beq.n	8008cac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	69da      	ldr	r2, [r3, #28]
 8008c8e:	4b59      	ldr	r3, [pc, #356]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d908      	bls.n	8008cac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c9a:	4b56      	ldr	r3, [pc, #344]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	4953      	ldr	r1, [pc, #332]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d010      	beq.n	8008cda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	4b4d      	ldr	r3, [pc, #308]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	f003 030f 	and.w	r3, r3, #15
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d908      	bls.n	8008cda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cc8:	4b4a      	ldr	r3, [pc, #296]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	f023 020f 	bic.w	r2, r3, #15
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	4947      	ldr	r1, [pc, #284]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d055      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008ce6:	4b43      	ldr	r3, [pc, #268]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	4940      	ldr	r1, [pc, #256]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d107      	bne.n	8008d10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d00:	4b3c      	ldr	r3, [pc, #240]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d121      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e0f6      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d107      	bne.n	8008d28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d18:	4b36      	ldr	r3, [pc, #216]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d115      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e0ea      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d107      	bne.n	8008d40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d30:	4b30      	ldr	r3, [pc, #192]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d109      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e0de      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d40:	4b2c      	ldr	r3, [pc, #176]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0d6      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d50:	4b28      	ldr	r3, [pc, #160]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f023 0207 	bic.w	r2, r3, #7
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4925      	ldr	r1, [pc, #148]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d62:	f7fa f817 	bl	8002d94 <HAL_GetTick>
 8008d66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d68:	e00a      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d6a:	f7fa f813 	bl	8002d94 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e0be      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d80:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d1eb      	bne.n	8008d6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d010      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	4b14      	ldr	r3, [pc, #80]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f003 030f 	and.w	r3, r3, #15
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d208      	bcs.n	8008dc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dae:	4b11      	ldr	r3, [pc, #68]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f023 020f 	bic.w	r2, r3, #15
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	490e      	ldr	r1, [pc, #56]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d214      	bcs.n	8008df8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dce:	4b08      	ldr	r3, [pc, #32]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f023 020f 	bic.w	r2, r3, #15
 8008dd6:	4906      	ldr	r1, [pc, #24]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dde:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d005      	beq.n	8008df8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e086      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
 8008df0:	52002000 	.word	0x52002000
 8008df4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d010      	beq.n	8008e26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	691a      	ldr	r2, [r3, #16]
 8008e08:	4b3f      	ldr	r3, [pc, #252]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d208      	bcs.n	8008e26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e14:	4b3c      	ldr	r3, [pc, #240]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	4939      	ldr	r1, [pc, #228]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0308 	and.w	r3, r3, #8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d010      	beq.n	8008e54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	695a      	ldr	r2, [r3, #20]
 8008e36:	4b34      	ldr	r3, [pc, #208]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d208      	bcs.n	8008e54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e42:	4b31      	ldr	r3, [pc, #196]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	492e      	ldr	r1, [pc, #184]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d010      	beq.n	8008e82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	4b28      	ldr	r3, [pc, #160]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d208      	bcs.n	8008e82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e70:	4b25      	ldr	r3, [pc, #148]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	4922      	ldr	r1, [pc, #136]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d010      	beq.n	8008eb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69da      	ldr	r2, [r3, #28]
 8008e92:	4b1d      	ldr	r3, [pc, #116]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d208      	bcs.n	8008eb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e9e:	4b1a      	ldr	r3, [pc, #104]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	4917      	ldr	r1, [pc, #92]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008eb0:	f000 f834 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	0a1b      	lsrs	r3, r3, #8
 8008ebc:	f003 030f 	and.w	r3, r3, #15
 8008ec0:	4912      	ldr	r1, [pc, #72]	; (8008f0c <HAL_RCC_ClockConfig+0x35c>)
 8008ec2:	5ccb      	ldrb	r3, [r1, r3]
 8008ec4:	f003 031f 	and.w	r3, r3, #31
 8008ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ecc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ece:	4b0e      	ldr	r3, [pc, #56]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	4a0d      	ldr	r2, [pc, #52]	; (8008f0c <HAL_RCC_ClockConfig+0x35c>)
 8008ed8:	5cd3      	ldrb	r3, [r2, r3]
 8008eda:	f003 031f 	and.w	r3, r3, #31
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee4:	4a0a      	ldr	r2, [pc, #40]	; (8008f10 <HAL_RCC_ClockConfig+0x360>)
 8008ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ee8:	4a0a      	ldr	r2, [pc, #40]	; (8008f14 <HAL_RCC_ClockConfig+0x364>)
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008eee:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <HAL_RCC_ClockConfig+0x368>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7f9 fc86 	bl	8002804 <HAL_InitTick>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	58024400 	.word	0x58024400
 8008f0c:	08014ca4 	.word	0x08014ca4
 8008f10:	2400008c 	.word	0x2400008c
 8008f14:	24000088 	.word	0x24000088
 8008f18:	24000090 	.word	0x24000090

08008f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b089      	sub	sp, #36	; 0x24
 8008f20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f22:	4bb3      	ldr	r3, [pc, #716]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f2a:	2b18      	cmp	r3, #24
 8008f2c:	f200 8155 	bhi.w	80091da <HAL_RCC_GetSysClockFreq+0x2be>
 8008f30:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f36:	bf00      	nop
 8008f38:	08008f9d 	.word	0x08008f9d
 8008f3c:	080091db 	.word	0x080091db
 8008f40:	080091db 	.word	0x080091db
 8008f44:	080091db 	.word	0x080091db
 8008f48:	080091db 	.word	0x080091db
 8008f4c:	080091db 	.word	0x080091db
 8008f50:	080091db 	.word	0x080091db
 8008f54:	080091db 	.word	0x080091db
 8008f58:	08008fc3 	.word	0x08008fc3
 8008f5c:	080091db 	.word	0x080091db
 8008f60:	080091db 	.word	0x080091db
 8008f64:	080091db 	.word	0x080091db
 8008f68:	080091db 	.word	0x080091db
 8008f6c:	080091db 	.word	0x080091db
 8008f70:	080091db 	.word	0x080091db
 8008f74:	080091db 	.word	0x080091db
 8008f78:	08008fc9 	.word	0x08008fc9
 8008f7c:	080091db 	.word	0x080091db
 8008f80:	080091db 	.word	0x080091db
 8008f84:	080091db 	.word	0x080091db
 8008f88:	080091db 	.word	0x080091db
 8008f8c:	080091db 	.word	0x080091db
 8008f90:	080091db 	.word	0x080091db
 8008f94:	080091db 	.word	0x080091db
 8008f98:	08008fcf 	.word	0x08008fcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f9c:	4b94      	ldr	r3, [pc, #592]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0320 	and.w	r3, r3, #32
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d009      	beq.n	8008fbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fa8:	4b91      	ldr	r3, [pc, #580]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	08db      	lsrs	r3, r3, #3
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	4a90      	ldr	r2, [pc, #576]	; (80091f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008fba:	e111      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008fbc:	4b8d      	ldr	r3, [pc, #564]	; (80091f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fbe:	61bb      	str	r3, [r7, #24]
      break;
 8008fc0:	e10e      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008fc2:	4b8d      	ldr	r3, [pc, #564]	; (80091f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008fc4:	61bb      	str	r3, [r7, #24]
      break;
 8008fc6:	e10b      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008fc8:	4b8c      	ldr	r3, [pc, #560]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008fca:	61bb      	str	r3, [r7, #24]
      break;
 8008fcc:	e108      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fce:	4b88      	ldr	r3, [pc, #544]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd2:	f003 0303 	and.w	r3, r3, #3
 8008fd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008fd8:	4b85      	ldr	r3, [pc, #532]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fdc:	091b      	lsrs	r3, r3, #4
 8008fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fe2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008fe4:	4b82      	ldr	r3, [pc, #520]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008fee:	4b80      	ldr	r3, [pc, #512]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff2:	08db      	lsrs	r3, r3, #3
 8008ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	fb02 f303 	mul.w	r3, r2, r3
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009006:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 80e1 	beq.w	80091d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b02      	cmp	r3, #2
 8009016:	f000 8083 	beq.w	8009120 <HAL_RCC_GetSysClockFreq+0x204>
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b02      	cmp	r3, #2
 800901e:	f200 80a1 	bhi.w	8009164 <HAL_RCC_GetSysClockFreq+0x248>
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <HAL_RCC_GetSysClockFreq+0x114>
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d056      	beq.n	80090dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800902e:	e099      	b.n	8009164 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009030:	4b6f      	ldr	r3, [pc, #444]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	d02d      	beq.n	8009098 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800903c:	4b6c      	ldr	r3, [pc, #432]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	08db      	lsrs	r3, r3, #3
 8009042:	f003 0303 	and.w	r3, r3, #3
 8009046:	4a6b      	ldr	r2, [pc, #428]	; (80091f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009048:	fa22 f303 	lsr.w	r3, r2, r3
 800904c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009066:	4b62      	ldr	r3, [pc, #392]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009076:	ed97 6a02 	vldr	s12, [r7, #8]
 800907a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800907e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800908a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009092:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009096:	e087      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009204 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090aa:	4b51      	ldr	r3, [pc, #324]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80090be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090da:	e065      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009208 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ee:	4b40      	ldr	r3, [pc, #256]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009102:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800911e:	e043      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800920c <HAL_RCC_GetSysClockFreq+0x2f0>
 800912e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009132:	4b2f      	ldr	r3, [pc, #188]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009142:	ed97 6a02 	vldr	s12, [r7, #8]
 8009146:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800914a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009162:	e021      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009208 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009176:	4b1e      	ldr	r3, [pc, #120]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009186:	ed97 6a02 	vldr	s12, [r7, #8]
 800918a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800918e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800919a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80091a8:	4b11      	ldr	r3, [pc, #68]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ac:	0a5b      	lsrs	r3, r3, #9
 80091ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b2:	3301      	adds	r3, #1
 80091b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	ee07 3a90 	vmov	s15, r3
 80091bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091cc:	ee17 3a90 	vmov	r3, s15
 80091d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80091d2:	e005      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61bb      	str	r3, [r7, #24]
      break;
 80091d8:	e002      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091dc:	61bb      	str	r3, [r7, #24]
      break;
 80091de:	bf00      	nop
  }

  return sysclockfreq;
 80091e0:	69bb      	ldr	r3, [r7, #24]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3724      	adds	r7, #36	; 0x24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	58024400 	.word	0x58024400
 80091f4:	03d09000 	.word	0x03d09000
 80091f8:	003d0900 	.word	0x003d0900
 80091fc:	017d7840 	.word	0x017d7840
 8009200:	46000000 	.word	0x46000000
 8009204:	4c742400 	.word	0x4c742400
 8009208:	4a742400 	.word	0x4a742400
 800920c:	4bbebc20 	.word	0x4bbebc20

08009210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009216:	f7ff fe81 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 800921a:	4602      	mov	r2, r0
 800921c:	4b10      	ldr	r3, [pc, #64]	; (8009260 <HAL_RCC_GetHCLKFreq+0x50>)
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	0a1b      	lsrs	r3, r3, #8
 8009222:	f003 030f 	and.w	r3, r3, #15
 8009226:	490f      	ldr	r1, [pc, #60]	; (8009264 <HAL_RCC_GetHCLKFreq+0x54>)
 8009228:	5ccb      	ldrb	r3, [r1, r3]
 800922a:	f003 031f 	and.w	r3, r3, #31
 800922e:	fa22 f303 	lsr.w	r3, r2, r3
 8009232:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009234:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <HAL_RCC_GetHCLKFreq+0x50>)
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	4a09      	ldr	r2, [pc, #36]	; (8009264 <HAL_RCC_GetHCLKFreq+0x54>)
 800923e:	5cd3      	ldrb	r3, [r2, r3]
 8009240:	f003 031f 	and.w	r3, r3, #31
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	fa22 f303 	lsr.w	r3, r2, r3
 800924a:	4a07      	ldr	r2, [pc, #28]	; (8009268 <HAL_RCC_GetHCLKFreq+0x58>)
 800924c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800924e:	4a07      	ldr	r2, [pc, #28]	; (800926c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009254:	4b04      	ldr	r3, [pc, #16]	; (8009268 <HAL_RCC_GetHCLKFreq+0x58>)
 8009256:	681b      	ldr	r3, [r3, #0]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	58024400 	.word	0x58024400
 8009264:	08014ca4 	.word	0x08014ca4
 8009268:	2400008c 	.word	0x2400008c
 800926c:	24000088 	.word	0x24000088

08009270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009274:	f7ff ffcc 	bl	8009210 <HAL_RCC_GetHCLKFreq>
 8009278:	4602      	mov	r2, r0
 800927a:	4b06      	ldr	r3, [pc, #24]	; (8009294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	091b      	lsrs	r3, r3, #4
 8009280:	f003 0307 	and.w	r3, r3, #7
 8009284:	4904      	ldr	r1, [pc, #16]	; (8009298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009286:	5ccb      	ldrb	r3, [r1, r3]
 8009288:	f003 031f 	and.w	r3, r3, #31
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009290:	4618      	mov	r0, r3
 8009292:	bd80      	pop	{r7, pc}
 8009294:	58024400 	.word	0x58024400
 8009298:	08014ca4 	.word	0x08014ca4

0800929c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092a0:	f7ff ffb6 	bl	8009210 <HAL_RCC_GetHCLKFreq>
 80092a4:	4602      	mov	r2, r0
 80092a6:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	0a1b      	lsrs	r3, r3, #8
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	4904      	ldr	r1, [pc, #16]	; (80092c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092b2:	5ccb      	ldrb	r3, [r1, r3]
 80092b4:	f003 031f 	and.w	r3, r3, #31
 80092b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80092bc:	4618      	mov	r0, r3
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	58024400 	.word	0x58024400
 80092c4:	08014ca4 	.word	0x08014ca4

080092c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	223f      	movs	r2, #63	; 0x3f
 80092d6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80092d8:	4b1a      	ldr	r3, [pc, #104]	; (8009344 <HAL_RCC_GetClockConfig+0x7c>)
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	f003 0207 	and.w	r2, r3, #7
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80092e4:	4b17      	ldr	r3, [pc, #92]	; (8009344 <HAL_RCC_GetClockConfig+0x7c>)
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80092f0:	4b14      	ldr	r3, [pc, #80]	; (8009344 <HAL_RCC_GetClockConfig+0x7c>)
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	f003 020f 	and.w	r2, r3, #15
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80092fc:	4b11      	ldr	r3, [pc, #68]	; (8009344 <HAL_RCC_GetClockConfig+0x7c>)
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009308:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <HAL_RCC_GetClockConfig+0x7c>)
 800930a:	69db      	ldr	r3, [r3, #28]
 800930c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009314:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <HAL_RCC_GetClockConfig+0x7c>)
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009320:	4b08      	ldr	r3, [pc, #32]	; (8009344 <HAL_RCC_GetClockConfig+0x7c>)
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800932c:	4b06      	ldr	r3, [pc, #24]	; (8009348 <HAL_RCC_GetClockConfig+0x80>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 020f 	and.w	r2, r3, #15
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	601a      	str	r2, [r3, #0]
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	58024400 	.word	0x58024400
 8009348:	52002000 	.word	0x52002000

0800934c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800934c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009350:	b0ca      	sub	sp, #296	; 0x128
 8009352:	af00      	add	r7, sp, #0
 8009354:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009358:	2300      	movs	r3, #0
 800935a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800935e:	2300      	movs	r3, #0
 8009360:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009370:	2500      	movs	r5, #0
 8009372:	ea54 0305 	orrs.w	r3, r4, r5
 8009376:	d049      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800937c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800937e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009382:	d02f      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009384:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009388:	d828      	bhi.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800938a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800938e:	d01a      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009394:	d822      	bhi.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800939a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800939e:	d007      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80093a0:	e01c      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a2:	4bb8      	ldr	r3, [pc, #736]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a6:	4ab7      	ldr	r2, [pc, #732]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80093ae:	e01a      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093b4:	3308      	adds	r3, #8
 80093b6:	2102      	movs	r1, #2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f002 fb61 	bl	800ba80 <RCCEx_PLL2_Config>
 80093be:	4603      	mov	r3, r0
 80093c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80093c4:	e00f      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ca:	3328      	adds	r3, #40	; 0x28
 80093cc:	2102      	movs	r1, #2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f002 fc08 	bl	800bbe4 <RCCEx_PLL3_Config>
 80093d4:	4603      	mov	r3, r0
 80093d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80093da:	e004      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093e2:	e000      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80093e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10a      	bne.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093ee:	4ba5      	ldr	r3, [pc, #660]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80093f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093fc:	4aa1      	ldr	r2, [pc, #644]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093fe:	430b      	orrs	r3, r1
 8009400:	6513      	str	r3, [r2, #80]	; 0x50
 8009402:	e003      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800940c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009418:	f04f 0900 	mov.w	r9, #0
 800941c:	ea58 0309 	orrs.w	r3, r8, r9
 8009420:	d047      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009428:	2b04      	cmp	r3, #4
 800942a:	d82a      	bhi.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800942c:	a201      	add	r2, pc, #4	; (adr r2, 8009434 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800942e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009432:	bf00      	nop
 8009434:	08009449 	.word	0x08009449
 8009438:	08009457 	.word	0x08009457
 800943c:	0800946d 	.word	0x0800946d
 8009440:	0800948b 	.word	0x0800948b
 8009444:	0800948b 	.word	0x0800948b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009448:	4b8e      	ldr	r3, [pc, #568]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	4a8d      	ldr	r2, [pc, #564]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800944e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009454:	e01a      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800945a:	3308      	adds	r3, #8
 800945c:	2100      	movs	r1, #0
 800945e:	4618      	mov	r0, r3
 8009460:	f002 fb0e 	bl	800ba80 <RCCEx_PLL2_Config>
 8009464:	4603      	mov	r3, r0
 8009466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800946a:	e00f      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800946c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009470:	3328      	adds	r3, #40	; 0x28
 8009472:	2100      	movs	r1, #0
 8009474:	4618      	mov	r0, r3
 8009476:	f002 fbb5 	bl	800bbe4 <RCCEx_PLL3_Config>
 800947a:	4603      	mov	r3, r0
 800947c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009480:	e004      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009488:	e000      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800948a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800948c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10a      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009494:	4b7b      	ldr	r3, [pc, #492]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009498:	f023 0107 	bic.w	r1, r3, #7
 800949c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a2:	4a78      	ldr	r2, [pc, #480]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094a4:	430b      	orrs	r3, r1
 80094a6:	6513      	str	r3, [r2, #80]	; 0x50
 80094a8:	e003      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80094be:	f04f 0b00 	mov.w	fp, #0
 80094c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80094c6:	d04c      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80094c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d2:	d030      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80094d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d8:	d829      	bhi.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094da:	2bc0      	cmp	r3, #192	; 0xc0
 80094dc:	d02d      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80094de:	2bc0      	cmp	r3, #192	; 0xc0
 80094e0:	d825      	bhi.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094e2:	2b80      	cmp	r3, #128	; 0x80
 80094e4:	d018      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80094e6:	2b80      	cmp	r3, #128	; 0x80
 80094e8:	d821      	bhi.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80094ee:	2b40      	cmp	r3, #64	; 0x40
 80094f0:	d007      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80094f2:	e01c      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094f4:	4b63      	ldr	r3, [pc, #396]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	4a62      	ldr	r2, [pc, #392]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009500:	e01c      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009506:	3308      	adds	r3, #8
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f002 fab8 	bl	800ba80 <RCCEx_PLL2_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009516:	e011      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951c:	3328      	adds	r3, #40	; 0x28
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f002 fb5f 	bl	800bbe4 <RCCEx_PLL3_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800952c:	e006      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009534:	e002      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009536:	bf00      	nop
 8009538:	e000      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800953a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800953c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10a      	bne.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009544:	4b4f      	ldr	r3, [pc, #316]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009548:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800954c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009552:	4a4c      	ldr	r2, [pc, #304]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009554:	430b      	orrs	r3, r1
 8009556:	6513      	str	r3, [r2, #80]	; 0x50
 8009558:	e003      	b.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800955a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800955e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800956e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009572:	2300      	movs	r3, #0
 8009574:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009578:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800957c:	460b      	mov	r3, r1
 800957e:	4313      	orrs	r3, r2
 8009580:	d053      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009586:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800958a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800958e:	d035      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009590:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009594:	d82e      	bhi.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009596:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800959a:	d031      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800959c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80095a0:	d828      	bhi.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80095a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095a6:	d01a      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80095a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095ac:	d822      	bhi.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80095b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095b6:	d007      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80095b8:	e01c      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095ba:	4b32      	ldr	r3, [pc, #200]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095be:	4a31      	ldr	r2, [pc, #196]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095c6:	e01c      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095cc:	3308      	adds	r3, #8
 80095ce:	2100      	movs	r1, #0
 80095d0:	4618      	mov	r0, r3
 80095d2:	f002 fa55 	bl	800ba80 <RCCEx_PLL2_Config>
 80095d6:	4603      	mov	r3, r0
 80095d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80095dc:	e011      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e2:	3328      	adds	r3, #40	; 0x28
 80095e4:	2100      	movs	r1, #0
 80095e6:	4618      	mov	r0, r3
 80095e8:	f002 fafc 	bl	800bbe4 <RCCEx_PLL3_Config>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095f2:	e006      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095fa:	e002      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80095fc:	bf00      	nop
 80095fe:	e000      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800960a:	4b1e      	ldr	r3, [pc, #120]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800960c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009616:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800961a:	4a1a      	ldr	r2, [pc, #104]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800961c:	430b      	orrs	r3, r1
 800961e:	6593      	str	r3, [r2, #88]	; 0x58
 8009620:	e003      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009626:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800962a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009636:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800963a:	2300      	movs	r3, #0
 800963c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009640:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009644:	460b      	mov	r3, r1
 8009646:	4313      	orrs	r3, r2
 8009648:	d056      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800964e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009656:	d038      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800965c:	d831      	bhi.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800965e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009662:	d034      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009668:	d82b      	bhi.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800966a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800966e:	d01d      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009674:	d825      	bhi.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d006      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800967a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800967e:	d00a      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009680:	e01f      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009682:	bf00      	nop
 8009684:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009688:	4ba2      	ldr	r3, [pc, #648]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968c:	4aa1      	ldr	r2, [pc, #644]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800968e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009692:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009694:	e01c      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800969a:	3308      	adds	r3, #8
 800969c:	2100      	movs	r1, #0
 800969e:	4618      	mov	r0, r3
 80096a0:	f002 f9ee 	bl	800ba80 <RCCEx_PLL2_Config>
 80096a4:	4603      	mov	r3, r0
 80096a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80096aa:	e011      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b0:	3328      	adds	r3, #40	; 0x28
 80096b2:	2100      	movs	r1, #0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f002 fa95 	bl	800bbe4 <RCCEx_PLL3_Config>
 80096ba:	4603      	mov	r3, r0
 80096bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096c0:	e006      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096c8:	e002      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80096ca:	bf00      	nop
 80096cc:	e000      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80096ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10b      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80096d8:	4b8e      	ldr	r3, [pc, #568]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096dc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80096e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096e8:	4a8a      	ldr	r2, [pc, #552]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096ea:	430b      	orrs	r3, r1
 80096ec:	6593      	str	r3, [r2, #88]	; 0x58
 80096ee:	e003      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80096f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009704:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009708:	2300      	movs	r3, #0
 800970a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800970e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009712:	460b      	mov	r3, r1
 8009714:	4313      	orrs	r3, r2
 8009716:	d03a      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800971c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800971e:	2b30      	cmp	r3, #48	; 0x30
 8009720:	d01f      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009722:	2b30      	cmp	r3, #48	; 0x30
 8009724:	d819      	bhi.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009726:	2b20      	cmp	r3, #32
 8009728:	d00c      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800972a:	2b20      	cmp	r3, #32
 800972c:	d815      	bhi.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800972e:	2b00      	cmp	r3, #0
 8009730:	d019      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009732:	2b10      	cmp	r3, #16
 8009734:	d111      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009736:	4b77      	ldr	r3, [pc, #476]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973a:	4a76      	ldr	r2, [pc, #472]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800973c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009742:	e011      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009748:	3308      	adds	r3, #8
 800974a:	2102      	movs	r1, #2
 800974c:	4618      	mov	r0, r3
 800974e:	f002 f997 	bl	800ba80 <RCCEx_PLL2_Config>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009758:	e006      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009760:	e002      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009762:	bf00      	nop
 8009764:	e000      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009770:	4b68      	ldr	r3, [pc, #416]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009774:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800977c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800977e:	4a65      	ldr	r2, [pc, #404]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009780:	430b      	orrs	r3, r1
 8009782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009784:	e003      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800978a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800979a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800979e:	2300      	movs	r3, #0
 80097a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80097a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4313      	orrs	r3, r2
 80097ac:	d051      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80097ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097b8:	d035      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80097ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097be:	d82e      	bhi.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80097c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097c4:	d031      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80097c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097ca:	d828      	bhi.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80097cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097d0:	d01a      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80097d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097d6:	d822      	bhi.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80097dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097e0:	d007      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80097e2:	e01c      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097e4:	4b4b      	ldr	r3, [pc, #300]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	4a4a      	ldr	r2, [pc, #296]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097f0:	e01c      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f6:	3308      	adds	r3, #8
 80097f8:	2100      	movs	r1, #0
 80097fa:	4618      	mov	r0, r3
 80097fc:	f002 f940 	bl	800ba80 <RCCEx_PLL2_Config>
 8009800:	4603      	mov	r3, r0
 8009802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009806:	e011      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980c:	3328      	adds	r3, #40	; 0x28
 800980e:	2100      	movs	r1, #0
 8009810:	4618      	mov	r0, r3
 8009812:	f002 f9e7 	bl	800bbe4 <RCCEx_PLL3_Config>
 8009816:	4603      	mov	r3, r0
 8009818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800981c:	e006      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009824:	e002      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009826:	bf00      	nop
 8009828:	e000      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800982a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10a      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009834:	4b37      	ldr	r3, [pc, #220]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009838:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800983c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009842:	4a34      	ldr	r2, [pc, #208]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009844:	430b      	orrs	r3, r1
 8009846:	6513      	str	r3, [r2, #80]	; 0x50
 8009848:	e003      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800984e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800985e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009862:	2300      	movs	r3, #0
 8009864:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009868:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800986c:	460b      	mov	r3, r1
 800986e:	4313      	orrs	r3, r2
 8009870:	d056      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800987c:	d033      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800987e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009882:	d82c      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009884:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009888:	d02f      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800988a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800988e:	d826      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009890:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009894:	d02b      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009896:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800989a:	d820      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800989c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098a0:	d012      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80098a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098a6:	d81a      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d022      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80098ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098b0:	d115      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b6:	3308      	adds	r3, #8
 80098b8:	2101      	movs	r1, #1
 80098ba:	4618      	mov	r0, r3
 80098bc:	f002 f8e0 	bl	800ba80 <RCCEx_PLL2_Config>
 80098c0:	4603      	mov	r3, r0
 80098c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80098c6:	e015      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098cc:	3328      	adds	r3, #40	; 0x28
 80098ce:	2101      	movs	r1, #1
 80098d0:	4618      	mov	r0, r3
 80098d2:	f002 f987 	bl	800bbe4 <RCCEx_PLL3_Config>
 80098d6:	4603      	mov	r3, r0
 80098d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80098dc:	e00a      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098e4:	e006      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098e6:	bf00      	nop
 80098e8:	e004      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098ea:	bf00      	nop
 80098ec:	e002      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098ee:	bf00      	nop
 80098f0:	e000      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10d      	bne.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009900:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800990a:	4a02      	ldr	r2, [pc, #8]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800990c:	430b      	orrs	r3, r1
 800990e:	6513      	str	r3, [r2, #80]	; 0x50
 8009910:	e006      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009912:	bf00      	nop
 8009914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009918:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800991c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800992c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009930:	2300      	movs	r3, #0
 8009932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009936:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800993a:	460b      	mov	r3, r1
 800993c:	4313      	orrs	r3, r2
 800993e:	d055      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800994c:	d033      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800994e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009952:	d82c      	bhi.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009958:	d02f      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800995a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800995e:	d826      	bhi.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009960:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009964:	d02b      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009966:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800996a:	d820      	bhi.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800996c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009970:	d012      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009976:	d81a      	bhi.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009978:	2b00      	cmp	r3, #0
 800997a:	d022      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800997c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009980:	d115      	bne.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009986:	3308      	adds	r3, #8
 8009988:	2101      	movs	r1, #1
 800998a:	4618      	mov	r0, r3
 800998c:	f002 f878 	bl	800ba80 <RCCEx_PLL2_Config>
 8009990:	4603      	mov	r3, r0
 8009992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009996:	e015      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800999c:	3328      	adds	r3, #40	; 0x28
 800999e:	2101      	movs	r1, #1
 80099a0:	4618      	mov	r0, r3
 80099a2:	f002 f91f 	bl	800bbe4 <RCCEx_PLL3_Config>
 80099a6:	4603      	mov	r3, r0
 80099a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80099ac:	e00a      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099b4:	e006      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80099b6:	bf00      	nop
 80099b8:	e004      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80099ba:	bf00      	nop
 80099bc:	e002      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80099be:	bf00      	nop
 80099c0:	e000      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80099c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10b      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80099cc:	4ba3      	ldr	r3, [pc, #652]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099d0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80099d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099dc:	4a9f      	ldr	r2, [pc, #636]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099de:	430b      	orrs	r3, r1
 80099e0:	6593      	str	r3, [r2, #88]	; 0x58
 80099e2:	e003      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80099f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099fc:	2300      	movs	r3, #0
 80099fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a06:	460b      	mov	r3, r1
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	d037      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a16:	d00e      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a1c:	d816      	bhi.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d018      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a26:	d111      	bne.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a28:	4b8c      	ldr	r3, [pc, #560]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	4a8b      	ldr	r2, [pc, #556]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a34:	e00f      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f002 f81e 	bl	800ba80 <RCCEx_PLL2_Config>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a4a:	e004      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a52:	e000      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10a      	bne.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a5e:	4b7f      	ldr	r3, [pc, #508]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a62:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a6c:	4a7b      	ldr	r2, [pc, #492]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a6e:	430b      	orrs	r3, r1
 8009a70:	6513      	str	r3, [r2, #80]	; 0x50
 8009a72:	e003      	b.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	d039      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d81c      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009aa6:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009ae9 	.word	0x08009ae9
 8009ab0:	08009abd 	.word	0x08009abd
 8009ab4:	08009acb 	.word	0x08009acb
 8009ab8:	08009ae9 	.word	0x08009ae9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009abc:	4b67      	ldr	r3, [pc, #412]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	4a66      	ldr	r2, [pc, #408]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ac8:	e00f      	b.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ace:	3308      	adds	r3, #8
 8009ad0:	2102      	movs	r1, #2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f001 ffd4 	bl	800ba80 <RCCEx_PLL2_Config>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ade:	e004      	b.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ae6:	e000      	b.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10a      	bne.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009af2:	4b5a      	ldr	r3, [pc, #360]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009af6:	f023 0103 	bic.w	r1, r3, #3
 8009afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b00:	4a56      	ldr	r2, [pc, #344]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b02:	430b      	orrs	r3, r1
 8009b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b06:	e003      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b20:	2300      	movs	r3, #0
 8009b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	f000 809f 	beq.w	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b32:	4b4b      	ldr	r3, [pc, #300]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a4a      	ldr	r2, [pc, #296]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b3e:	f7f9 f929 	bl	8002d94 <HAL_GetTick>
 8009b42:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b46:	e00b      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b48:	f7f9 f924 	bl	8002d94 <HAL_GetTick>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	2b64      	cmp	r3, #100	; 0x64
 8009b56:	d903      	bls.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b5e:	e005      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b60:	4b3f      	ldr	r3, [pc, #252]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0ed      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d179      	bne.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b74:	4b39      	ldr	r3, [pc, #228]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b80:	4053      	eors	r3, r2
 8009b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d015      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b8a:	4b34      	ldr	r3, [pc, #208]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b96:	4b31      	ldr	r3, [pc, #196]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9a:	4a30      	ldr	r2, [pc, #192]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ba0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ba2:	4b2e      	ldr	r3, [pc, #184]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba6:	4a2d      	ldr	r2, [pc, #180]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009bae:	4a2b      	ldr	r2, [pc, #172]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009bb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc2:	d118      	bne.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc4:	f7f9 f8e6 	bl	8002d94 <HAL_GetTick>
 8009bc8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bcc:	e00d      	b.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bce:	f7f9 f8e1 	bl	8002d94 <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009bd8:	1ad2      	subs	r2, r2, r3
 8009bda:	f241 3388 	movw	r3, #5000	; 0x1388
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d903      	bls.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009be8:	e005      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bea:	4b1c      	ldr	r3, [pc, #112]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0eb      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d129      	bne.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c0e:	d10e      	bne.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009c10:	4b12      	ldr	r3, [pc, #72]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009c20:	091a      	lsrs	r2, r3, #4
 8009c22:	4b10      	ldr	r3, [pc, #64]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	4a0d      	ldr	r2, [pc, #52]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	6113      	str	r3, [r2, #16]
 8009c2c:	e005      	b.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009c2e:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	4a0a      	ldr	r2, [pc, #40]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c38:	6113      	str	r3, [r2, #16]
 8009c3a:	4b08      	ldr	r3, [pc, #32]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c3c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c4a:	4a04      	ldr	r2, [pc, #16]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c4c:	430b      	orrs	r3, r1
 8009c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c50:	e00e      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009c5a:	e009      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009c5c:	58024400 	.word	0x58024400
 8009c60:	58024800 	.word	0x58024800
 8009c64:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c78:	f002 0301 	and.w	r3, r2, #1
 8009c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c80:	2300      	movs	r3, #0
 8009c82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	f000 8089 	beq.w	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c98:	2b28      	cmp	r3, #40	; 0x28
 8009c9a:	d86b      	bhi.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009c9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009d7d 	.word	0x08009d7d
 8009ca8:	08009d75 	.word	0x08009d75
 8009cac:	08009d75 	.word	0x08009d75
 8009cb0:	08009d75 	.word	0x08009d75
 8009cb4:	08009d75 	.word	0x08009d75
 8009cb8:	08009d75 	.word	0x08009d75
 8009cbc:	08009d75 	.word	0x08009d75
 8009cc0:	08009d75 	.word	0x08009d75
 8009cc4:	08009d49 	.word	0x08009d49
 8009cc8:	08009d75 	.word	0x08009d75
 8009ccc:	08009d75 	.word	0x08009d75
 8009cd0:	08009d75 	.word	0x08009d75
 8009cd4:	08009d75 	.word	0x08009d75
 8009cd8:	08009d75 	.word	0x08009d75
 8009cdc:	08009d75 	.word	0x08009d75
 8009ce0:	08009d75 	.word	0x08009d75
 8009ce4:	08009d5f 	.word	0x08009d5f
 8009ce8:	08009d75 	.word	0x08009d75
 8009cec:	08009d75 	.word	0x08009d75
 8009cf0:	08009d75 	.word	0x08009d75
 8009cf4:	08009d75 	.word	0x08009d75
 8009cf8:	08009d75 	.word	0x08009d75
 8009cfc:	08009d75 	.word	0x08009d75
 8009d00:	08009d75 	.word	0x08009d75
 8009d04:	08009d7d 	.word	0x08009d7d
 8009d08:	08009d75 	.word	0x08009d75
 8009d0c:	08009d75 	.word	0x08009d75
 8009d10:	08009d75 	.word	0x08009d75
 8009d14:	08009d75 	.word	0x08009d75
 8009d18:	08009d75 	.word	0x08009d75
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d75 	.word	0x08009d75
 8009d24:	08009d7d 	.word	0x08009d7d
 8009d28:	08009d75 	.word	0x08009d75
 8009d2c:	08009d75 	.word	0x08009d75
 8009d30:	08009d75 	.word	0x08009d75
 8009d34:	08009d75 	.word	0x08009d75
 8009d38:	08009d75 	.word	0x08009d75
 8009d3c:	08009d75 	.word	0x08009d75
 8009d40:	08009d75 	.word	0x08009d75
 8009d44:	08009d7d 	.word	0x08009d7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4c:	3308      	adds	r3, #8
 8009d4e:	2101      	movs	r1, #1
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 fe95 	bl	800ba80 <RCCEx_PLL2_Config>
 8009d56:	4603      	mov	r3, r0
 8009d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d5c:	e00f      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d62:	3328      	adds	r3, #40	; 0x28
 8009d64:	2101      	movs	r1, #1
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 ff3c 	bl	800bbe4 <RCCEx_PLL3_Config>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d72:	e004      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d7a:	e000      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10a      	bne.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d86:	4bbf      	ldr	r3, [pc, #764]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d94:	4abb      	ldr	r2, [pc, #748]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d96:	430b      	orrs	r3, r1
 8009d98:	6553      	str	r3, [r2, #84]	; 0x54
 8009d9a:	e003      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009da0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	f002 0302 	and.w	r3, r2, #2
 8009db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009db4:	2300      	movs	r3, #0
 8009db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009dba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	d041      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dca:	2b05      	cmp	r3, #5
 8009dcc:	d824      	bhi.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009dce:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009e21 	.word	0x08009e21
 8009dd8:	08009ded 	.word	0x08009ded
 8009ddc:	08009e03 	.word	0x08009e03
 8009de0:	08009e21 	.word	0x08009e21
 8009de4:	08009e21 	.word	0x08009e21
 8009de8:	08009e21 	.word	0x08009e21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df0:	3308      	adds	r3, #8
 8009df2:	2101      	movs	r1, #1
 8009df4:	4618      	mov	r0, r3
 8009df6:	f001 fe43 	bl	800ba80 <RCCEx_PLL2_Config>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009e00:	e00f      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e06:	3328      	adds	r3, #40	; 0x28
 8009e08:	2101      	movs	r1, #1
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 feea 	bl	800bbe4 <RCCEx_PLL3_Config>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009e16:	e004      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e1e:	e000      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10a      	bne.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009e2a:	4b96      	ldr	r3, [pc, #600]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e2e:	f023 0107 	bic.w	r1, r3, #7
 8009e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e38:	4a92      	ldr	r2, [pc, #584]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e3a:	430b      	orrs	r3, r1
 8009e3c:	6553      	str	r3, [r2, #84]	; 0x54
 8009e3e:	e003      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	f002 0304 	and.w	r3, r2, #4
 8009e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e58:	2300      	movs	r3, #0
 8009e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4313      	orrs	r3, r2
 8009e66:	d044      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e70:	2b05      	cmp	r3, #5
 8009e72:	d825      	bhi.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009e74:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7a:	bf00      	nop
 8009e7c:	08009ec9 	.word	0x08009ec9
 8009e80:	08009e95 	.word	0x08009e95
 8009e84:	08009eab 	.word	0x08009eab
 8009e88:	08009ec9 	.word	0x08009ec9
 8009e8c:	08009ec9 	.word	0x08009ec9
 8009e90:	08009ec9 	.word	0x08009ec9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e98:	3308      	adds	r3, #8
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 fdef 	bl	800ba80 <RCCEx_PLL2_Config>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009ea8:	e00f      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eae:	3328      	adds	r3, #40	; 0x28
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f001 fe96 	bl	800bbe4 <RCCEx_PLL3_Config>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009ebe:	e004      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ec6:	e000      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10b      	bne.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ed2:	4b6c      	ldr	r3, [pc, #432]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ed6:	f023 0107 	bic.w	r1, r3, #7
 8009eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ee2:	4a68      	ldr	r2, [pc, #416]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ee4:	430b      	orrs	r3, r1
 8009ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8009ee8:	e003      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efa:	f002 0320 	and.w	r3, r2, #32
 8009efe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009f02:	2300      	movs	r3, #0
 8009f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	d055      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f1e:	d033      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f24:	d82c      	bhi.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2a:	d02f      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f30:	d826      	bhi.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f36:	d02b      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009f38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f3c:	d820      	bhi.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f42:	d012      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f48:	d81a      	bhi.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d022      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f52:	d115      	bne.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f58:	3308      	adds	r3, #8
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f001 fd8f 	bl	800ba80 <RCCEx_PLL2_Config>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f68:	e015      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f6e:	3328      	adds	r3, #40	; 0x28
 8009f70:	2102      	movs	r1, #2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 fe36 	bl	800bbe4 <RCCEx_PLL3_Config>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f7e:	e00a      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f86:	e006      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f88:	bf00      	nop
 8009f8a:	e004      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f8c:	bf00      	nop
 8009f8e:	e002      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f90:	bf00      	nop
 8009f92:	e000      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10b      	bne.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f9e:	4b39      	ldr	r3, [pc, #228]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fae:	4a35      	ldr	r2, [pc, #212]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	6553      	str	r3, [r2, #84]	; 0x54
 8009fb4:	e003      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009fd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	d058      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fe6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009fea:	d033      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009fec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ff0:	d82c      	bhi.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff6:	d02f      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ffc:	d826      	bhi.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a002:	d02b      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a004:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a008:	d820      	bhi.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a00a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a00e:	d012      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a014:	d81a      	bhi.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d022      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a01e:	d115      	bne.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a024:	3308      	adds	r3, #8
 800a026:	2100      	movs	r1, #0
 800a028:	4618      	mov	r0, r3
 800a02a:	f001 fd29 	bl	800ba80 <RCCEx_PLL2_Config>
 800a02e:	4603      	mov	r3, r0
 800a030:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a034:	e015      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a03a:	3328      	adds	r3, #40	; 0x28
 800a03c:	2102      	movs	r1, #2
 800a03e:	4618      	mov	r0, r3
 800a040:	f001 fdd0 	bl	800bbe4 <RCCEx_PLL3_Config>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a04a:	e00a      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a052:	e006      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a054:	bf00      	nop
 800a056:	e004      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a058:	bf00      	nop
 800a05a:	e002      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a05c:	bf00      	nop
 800a05e:	e000      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a060:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10e      	bne.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a06a:	4b06      	ldr	r3, [pc, #24]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a07a:	4a02      	ldr	r2, [pc, #8]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a07c:	430b      	orrs	r3, r1
 800a07e:	6593      	str	r3, [r2, #88]	; 0x58
 800a080:	e006      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a082:	bf00      	nop
 800a084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a08c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a09c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	d055      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a0bc:	d033      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a0be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a0c2:	d82c      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a0c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0c8:	d02f      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a0ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0ce:	d826      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a0d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0d4:	d02b      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a0d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0da:	d820      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a0dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0e0:	d012      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a0e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0e6:	d81a      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d022      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a0ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0f0:	d115      	bne.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f001 fcc0 	bl	800ba80 <RCCEx_PLL2_Config>
 800a100:	4603      	mov	r3, r0
 800a102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a106:	e015      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a10c:	3328      	adds	r3, #40	; 0x28
 800a10e:	2102      	movs	r1, #2
 800a110:	4618      	mov	r0, r3
 800a112:	f001 fd67 	bl	800bbe4 <RCCEx_PLL3_Config>
 800a116:	4603      	mov	r3, r0
 800a118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a11c:	e00a      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a124:	e006      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a126:	bf00      	nop
 800a128:	e004      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a12a:	bf00      	nop
 800a12c:	e002      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a12e:	bf00      	nop
 800a130:	e000      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a132:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10b      	bne.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a13c:	4ba1      	ldr	r3, [pc, #644]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a13e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a140:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a148:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a14c:	4a9d      	ldr	r2, [pc, #628]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a14e:	430b      	orrs	r3, r1
 800a150:	6593      	str	r3, [r2, #88]	; 0x58
 800a152:	e003      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a158:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	f002 0308 	and.w	r3, r2, #8
 800a168:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a16c:	2300      	movs	r3, #0
 800a16e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a172:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a176:	460b      	mov	r3, r1
 800a178:	4313      	orrs	r3, r2
 800a17a:	d01e      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a188:	d10c      	bne.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a18e:	3328      	adds	r3, #40	; 0x28
 800a190:	2102      	movs	r1, #2
 800a192:	4618      	mov	r0, r3
 800a194:	f001 fd26 	bl	800bbe4 <RCCEx_PLL3_Config>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d002      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a1a4:	4b87      	ldr	r3, [pc, #540]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1b4:	4a83      	ldr	r2, [pc, #524]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1b6:	430b      	orrs	r3, r1
 800a1b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	f002 0310 	and.w	r3, r2, #16
 800a1c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a1d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	d01e      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1e6:	d10c      	bne.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ec:	3328      	adds	r3, #40	; 0x28
 800a1ee:	2102      	movs	r1, #2
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f001 fcf7 	bl	800bbe4 <RCCEx_PLL3_Config>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d002      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a202:	4b70      	ldr	r3, [pc, #448]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a206:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a20e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a212:	4a6c      	ldr	r2, [pc, #432]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a214:	430b      	orrs	r3, r1
 800a216:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a228:	2300      	movs	r3, #0
 800a22a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a22e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a232:	460b      	mov	r3, r1
 800a234:	4313      	orrs	r3, r2
 800a236:	d03e      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a244:	d022      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a24a:	d81b      	bhi.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d003      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a254:	d00b      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a256:	e015      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a25c:	3308      	adds	r3, #8
 800a25e:	2100      	movs	r1, #0
 800a260:	4618      	mov	r0, r3
 800a262:	f001 fc0d 	bl	800ba80 <RCCEx_PLL2_Config>
 800a266:	4603      	mov	r3, r0
 800a268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a26c:	e00f      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a272:	3328      	adds	r3, #40	; 0x28
 800a274:	2102      	movs	r1, #2
 800a276:	4618      	mov	r0, r3
 800a278:	f001 fcb4 	bl	800bbe4 <RCCEx_PLL3_Config>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a282:	e004      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a28a:	e000      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a28c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a28e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10b      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a296:	4b4b      	ldr	r3, [pc, #300]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a2a6:	4a47      	ldr	r2, [pc, #284]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2a8:	430b      	orrs	r3, r1
 800a2aa:	6593      	str	r3, [r2, #88]	; 0x58
 800a2ac:	e003      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a2c2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a2c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	d03b      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2de:	d01f      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a2e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2e4:	d818      	bhi.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a2e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2ea:	d003      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a2ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2f0:	d007      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a2f2:	e011      	b.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f4:	4b33      	ldr	r3, [pc, #204]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	4a32      	ldr	r2, [pc, #200]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a300:	e00f      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a306:	3328      	adds	r3, #40	; 0x28
 800a308:	2101      	movs	r1, #1
 800a30a:	4618      	mov	r0, r3
 800a30c:	f001 fc6a 	bl	800bbe4 <RCCEx_PLL3_Config>
 800a310:	4603      	mov	r3, r0
 800a312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a316:	e004      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a31e:	e000      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a320:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10b      	bne.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a32a:	4b26      	ldr	r3, [pc, #152]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a32e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33a:	4a22      	ldr	r2, [pc, #136]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a33c:	430b      	orrs	r3, r1
 800a33e:	6553      	str	r3, [r2, #84]	; 0x54
 800a340:	e003      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a346:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a356:	673b      	str	r3, [r7, #112]	; 0x70
 800a358:	2300      	movs	r3, #0
 800a35a:	677b      	str	r3, [r7, #116]	; 0x74
 800a35c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a360:	460b      	mov	r3, r1
 800a362:	4313      	orrs	r3, r2
 800a364:	d034      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a374:	d007      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a376:	e011      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a378:	4b12      	ldr	r3, [pc, #72]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	4a11      	ldr	r2, [pc, #68]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a37e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a382:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a384:	e00e      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a38a:	3308      	adds	r3, #8
 800a38c:	2102      	movs	r1, #2
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 fb76 	bl	800ba80 <RCCEx_PLL2_Config>
 800a394:	4603      	mov	r3, r0
 800a396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a39a:	e003      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10d      	bne.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a3ac:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ba:	4a02      	ldr	r2, [pc, #8]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3c0:	e006      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a3c2:	bf00      	nop
 800a3c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a3dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3de:	2300      	movs	r3, #0
 800a3e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	d00c      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f0:	3328      	adds	r3, #40	; 0x28
 800a3f2:	2102      	movs	r1, #2
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f001 fbf5 	bl	800bbe4 <RCCEx_PLL3_Config>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a412:	663b      	str	r3, [r7, #96]	; 0x60
 800a414:	2300      	movs	r3, #0
 800a416:	667b      	str	r3, [r7, #100]	; 0x64
 800a418:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a41c:	460b      	mov	r3, r1
 800a41e:	4313      	orrs	r3, r2
 800a420:	d038      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a42a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a42e:	d018      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a434:	d811      	bhi.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a43a:	d014      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a440:	d80b      	bhi.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a442:	2b00      	cmp	r3, #0
 800a444:	d011      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a44a:	d106      	bne.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a44c:	4bc3      	ldr	r3, [pc, #780]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	4ac2      	ldr	r2, [pc, #776]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a458:	e008      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a460:	e004      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a462:	bf00      	nop
 800a464:	e002      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a466:	bf00      	nop
 800a468:	e000      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a46a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a46c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10b      	bne.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a474:	4bb9      	ldr	r3, [pc, #740]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a478:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a484:	4ab5      	ldr	r2, [pc, #724]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a486:	430b      	orrs	r3, r1
 800a488:	6553      	str	r3, [r2, #84]	; 0x54
 800a48a:	e003      	b.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a48c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a490:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a4a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	d009      	beq.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a4b0:	4baa      	ldr	r3, [pc, #680]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4be:	4aa7      	ldr	r2, [pc, #668]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4c0:	430b      	orrs	r3, r1
 800a4c2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a4d0:	653b      	str	r3, [r7, #80]	; 0x50
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	657b      	str	r3, [r7, #84]	; 0x54
 800a4d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	d00a      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a4e0:	4b9e      	ldr	r3, [pc, #632]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4f0:	4a9a      	ldr	r2, [pc, #616]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4f2:	430b      	orrs	r3, r1
 800a4f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a502:	64bb      	str	r3, [r7, #72]	; 0x48
 800a504:	2300      	movs	r3, #0
 800a506:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a508:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a50c:	460b      	mov	r3, r1
 800a50e:	4313      	orrs	r3, r2
 800a510:	d009      	beq.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a512:	4b92      	ldr	r3, [pc, #584]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a516:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a520:	4a8e      	ldr	r2, [pc, #568]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a522:	430b      	orrs	r3, r1
 800a524:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a532:	643b      	str	r3, [r7, #64]	; 0x40
 800a534:	2300      	movs	r3, #0
 800a536:	647b      	str	r3, [r7, #68]	; 0x44
 800a538:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a53c:	460b      	mov	r3, r1
 800a53e:	4313      	orrs	r3, r2
 800a540:	d00e      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a542:	4b86      	ldr	r3, [pc, #536]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	4a85      	ldr	r2, [pc, #532]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a54c:	6113      	str	r3, [r2, #16]
 800a54e:	4b83      	ldr	r3, [pc, #524]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a550:	6919      	ldr	r1, [r3, #16]
 800a552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a556:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a55a:	4a80      	ldr	r2, [pc, #512]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a55c:	430b      	orrs	r3, r1
 800a55e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a56c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a56e:	2300      	movs	r3, #0
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a572:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a576:	460b      	mov	r3, r1
 800a578:	4313      	orrs	r3, r2
 800a57a:	d009      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a57c:	4b77      	ldr	r3, [pc, #476]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a57e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a580:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a58a:	4a74      	ldr	r2, [pc, #464]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a58c:	430b      	orrs	r3, r1
 800a58e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a59c:	633b      	str	r3, [r7, #48]	; 0x30
 800a59e:	2300      	movs	r3, #0
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a5a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	d00a      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a5ac:	4b6b      	ldr	r3, [pc, #428]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5bc:	4a67      	ldr	r2, [pc, #412]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a5be:	430b      	orrs	r3, r1
 800a5c0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	62b9      	str	r1, [r7, #40]	; 0x28
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	d011      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f001 fa4a 	bl	800ba80 <RCCEx_PLL2_Config>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	2100      	movs	r1, #0
 800a60c:	6239      	str	r1, [r7, #32]
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	627b      	str	r3, [r7, #36]	; 0x24
 800a614:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a618:	460b      	mov	r3, r1
 800a61a:	4313      	orrs	r3, r2
 800a61c:	d011      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a622:	3308      	adds	r3, #8
 800a624:	2101      	movs	r1, #1
 800a626:	4618      	mov	r0, r3
 800a628:	f001 fa2a 	bl	800ba80 <RCCEx_PLL2_Config>
 800a62c:	4603      	mov	r3, r0
 800a62e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a63a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a63e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64a:	2100      	movs	r1, #0
 800a64c:	61b9      	str	r1, [r7, #24]
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	61fb      	str	r3, [r7, #28]
 800a654:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a658:	460b      	mov	r3, r1
 800a65a:	4313      	orrs	r3, r2
 800a65c:	d011      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a662:	3308      	adds	r3, #8
 800a664:	2102      	movs	r1, #2
 800a666:	4618      	mov	r0, r3
 800a668:	f001 fa0a 	bl	800ba80 <RCCEx_PLL2_Config>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a67a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a67e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68a:	2100      	movs	r1, #0
 800a68c:	6139      	str	r1, [r7, #16]
 800a68e:	f003 0308 	and.w	r3, r3, #8
 800a692:	617b      	str	r3, [r7, #20]
 800a694:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a698:	460b      	mov	r3, r1
 800a69a:	4313      	orrs	r3, r2
 800a69c:	d011      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a2:	3328      	adds	r3, #40	; 0x28
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f001 fa9c 	bl	800bbe4 <RCCEx_PLL3_Config>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a6b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	f003 0310 	and.w	r3, r3, #16
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	d011      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e2:	3328      	adds	r3, #40	; 0x28
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f001 fa7c 	bl	800bbe4 <RCCEx_PLL3_Config>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	2100      	movs	r1, #0
 800a70c:	6039      	str	r1, [r7, #0]
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	607b      	str	r3, [r7, #4]
 800a714:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a718:	460b      	mov	r3, r1
 800a71a:	4313      	orrs	r3, r2
 800a71c:	d011      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a722:	3328      	adds	r3, #40	; 0x28
 800a724:	2102      	movs	r1, #2
 800a726:	4618      	mov	r0, r3
 800a728:	f001 fa5c 	bl	800bbe4 <RCCEx_PLL3_Config>
 800a72c:	4603      	mov	r3, r0
 800a72e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a73a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a73e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a742:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	e000      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
}
 800a750:	4618      	mov	r0, r3
 800a752:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a756:	46bd      	mov	sp, r7
 800a758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a75c:	58024400 	.word	0x58024400

0800a760 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b090      	sub	sp, #64	; 0x40
 800a764:	af00      	add	r7, sp, #0
 800a766:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a76a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a76e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a772:	430b      	orrs	r3, r1
 800a774:	f040 8094 	bne.w	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a778:	4b9e      	ldr	r3, [pc, #632]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a77c:	f003 0307 	and.w	r3, r3, #7
 800a780:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	2b04      	cmp	r3, #4
 800a786:	f200 8087 	bhi.w	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a78a:	a201      	add	r2, pc, #4	; (adr r2, 800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a790:	0800a7a5 	.word	0x0800a7a5
 800a794:	0800a7cd 	.word	0x0800a7cd
 800a798:	0800a7f5 	.word	0x0800a7f5
 800a79c:	0800a891 	.word	0x0800a891
 800a7a0:	0800a81d 	.word	0x0800a81d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7a4:	4b93      	ldr	r3, [pc, #588]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7b0:	d108      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f001 f810 	bl	800b7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7c0:	f000 bd45 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7c8:	f000 bd41 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7cc:	4b89      	ldr	r3, [pc, #548]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7d8:	d108      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7da:	f107 0318 	add.w	r3, r7, #24
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fd54 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e8:	f000 bd31 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7f0:	f000 bd2d 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7f4:	4b7f      	ldr	r3, [pc, #508]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a800:	d108      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a802:	f107 030c 	add.w	r3, r7, #12
 800a806:	4618      	mov	r0, r3
 800a808:	f000 fe94 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a810:	f000 bd1d 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a818:	f000 bd19 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a81c:	4b75      	ldr	r3, [pc, #468]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a81e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a824:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a826:	4b73      	ldr	r3, [pc, #460]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 0304 	and.w	r3, r3, #4
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d10c      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	2b00      	cmp	r3, #0
 800a836:	d109      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a838:	4b6e      	ldr	r3, [pc, #440]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	08db      	lsrs	r3, r3, #3
 800a83e:	f003 0303 	and.w	r3, r3, #3
 800a842:	4a6d      	ldr	r2, [pc, #436]	; (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a844:	fa22 f303 	lsr.w	r3, r2, r3
 800a848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a84a:	e01f      	b.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a84c:	4b69      	ldr	r3, [pc, #420]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a858:	d106      	bne.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a860:	d102      	bne.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a862:	4b66      	ldr	r3, [pc, #408]	; (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a864:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a866:	e011      	b.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a868:	4b62      	ldr	r3, [pc, #392]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a874:	d106      	bne.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a87c:	d102      	bne.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a87e:	4b60      	ldr	r3, [pc, #384]	; (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a880:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a882:	e003      	b.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a888:	f000 bce1 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a88c:	f000 bcdf 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a890:	4b5c      	ldr	r3, [pc, #368]	; (800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a894:	f000 bcdb 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a89c:	f000 bcd7 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a8a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	f040 80ad 	bne.w	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a8ae:	4b51      	ldr	r3, [pc, #324]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a8b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8be:	d056      	beq.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8c6:	f200 8090 	bhi.w	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	2bc0      	cmp	r3, #192	; 0xc0
 800a8ce:	f000 8088 	beq.w	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d4:	2bc0      	cmp	r3, #192	; 0xc0
 800a8d6:	f200 8088 	bhi.w	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	2b80      	cmp	r3, #128	; 0x80
 800a8de:	d032      	beq.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	2b80      	cmp	r3, #128	; 0x80
 800a8e4:	f200 8081 	bhi.w	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	2b40      	cmp	r3, #64	; 0x40
 800a8f2:	d014      	beq.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a8f4:	e079      	b.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8f6:	4b3f      	ldr	r3, [pc, #252]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a902:	d108      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 ff67 	bl	800b7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a912:	f000 bc9c 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a91a:	f000 bc98 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a91e:	4b35      	ldr	r3, [pc, #212]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a92a:	d108      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a92c:	f107 0318 	add.w	r3, r7, #24
 800a930:	4618      	mov	r0, r3
 800a932:	f000 fcab 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a93a:	f000 bc88 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a942:	f000 bc84 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a946:	4b2b      	ldr	r3, [pc, #172]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a94e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a952:	d108      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a954:	f107 030c 	add.w	r3, r7, #12
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fdeb 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a962:	f000 bc74 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a96a:	f000 bc70 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a96e:	4b21      	ldr	r3, [pc, #132]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a976:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a978:	4b1e      	ldr	r3, [pc, #120]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 0304 	and.w	r3, r3, #4
 800a980:	2b04      	cmp	r3, #4
 800a982:	d10c      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a986:	2b00      	cmp	r3, #0
 800a988:	d109      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a98a:	4b1a      	ldr	r3, [pc, #104]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	08db      	lsrs	r3, r3, #3
 800a990:	f003 0303 	and.w	r3, r3, #3
 800a994:	4a18      	ldr	r2, [pc, #96]	; (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a996:	fa22 f303 	lsr.w	r3, r2, r3
 800a99a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a99c:	e01f      	b.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a99e:	4b15      	ldr	r3, [pc, #84]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9aa:	d106      	bne.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9b2:	d102      	bne.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9b4:	4b11      	ldr	r3, [pc, #68]	; (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9b8:	e011      	b.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9ba:	4b0e      	ldr	r3, [pc, #56]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9c6:	d106      	bne.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9ce:	d102      	bne.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9d0:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9d4:	e003      	b.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a9da:	f000 bc38 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9de:	f000 bc36 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9e2:	4b08      	ldr	r3, [pc, #32]	; (800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9e6:	f000 bc32 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ee:	f000 bc2e 	b.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9f2:	bf00      	nop
 800a9f4:	58024400 	.word	0x58024400
 800a9f8:	03d09000 	.word	0x03d09000
 800a9fc:	003d0900 	.word	0x003d0900
 800aa00:	017d7840 	.word	0x017d7840
 800aa04:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aa08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa0c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800aa10:	430b      	orrs	r3, r1
 800aa12:	f040 809c 	bne.w	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aa16:	4b9e      	ldr	r3, [pc, #632]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800aa1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa26:	d054      	beq.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800aa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa2e:	f200 808b 	bhi.w	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa38:	f000 8083 	beq.w	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa42:	f200 8081 	bhi.w	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa4c:	d02f      	beq.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa54:	d878      	bhi.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d004      	beq.n	800aa66 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa62:	d012      	beq.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800aa64:	e070      	b.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa66:	4b8a      	ldr	r3, [pc, #552]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa72:	d107      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 feaf 	bl	800b7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa82:	e3e4      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa88:	e3e1      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa8a:	4b81      	ldr	r3, [pc, #516]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa96:	d107      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa98:	f107 0318 	add.w	r3, r7, #24
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 fbf5 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaa6:	e3d2      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaac:	e3cf      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aaae:	4b78      	ldr	r3, [pc, #480]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaba:	d107      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aabc:	f107 030c 	add.w	r3, r7, #12
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fd37 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaca:	e3c0      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad0:	e3bd      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aad2:	4b6f      	ldr	r3, [pc, #444]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aad6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aada:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aadc:	4b6c      	ldr	r3, [pc, #432]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0304 	and.w	r3, r3, #4
 800aae4:	2b04      	cmp	r3, #4
 800aae6:	d10c      	bne.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d109      	bne.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaee:	4b68      	ldr	r3, [pc, #416]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	08db      	lsrs	r3, r3, #3
 800aaf4:	f003 0303 	and.w	r3, r3, #3
 800aaf8:	4a66      	ldr	r2, [pc, #408]	; (800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aafa:	fa22 f303 	lsr.w	r3, r2, r3
 800aafe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab00:	e01e      	b.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab02:	4b63      	ldr	r3, [pc, #396]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab0e:	d106      	bne.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ab10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab16:	d102      	bne.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab18:	4b5f      	ldr	r3, [pc, #380]	; (800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab1c:	e010      	b.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab1e:	4b5c      	ldr	r3, [pc, #368]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab2a:	d106      	bne.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ab2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab32:	d102      	bne.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab34:	4b59      	ldr	r3, [pc, #356]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ab36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab38:	e002      	b.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ab3e:	e386      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab40:	e385      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab42:	4b57      	ldr	r3, [pc, #348]	; (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ab44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab46:	e382      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab4c:	e37f      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ab4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab52:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ab56:	430b      	orrs	r3, r1
 800ab58:	f040 80a7 	bne.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ab5c:	4b4c      	ldr	r3, [pc, #304]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab60:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ab64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab6c:	d055      	beq.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab74:	f200 8096 	bhi.w	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab7e:	f000 8084 	beq.w	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab88:	f200 808c 	bhi.w	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab92:	d030      	beq.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ab94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab9a:	f200 8083 	bhi.w	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d004      	beq.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800aba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800abaa:	d012      	beq.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800abac:	e07a      	b.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abae:	4b38      	ldr	r3, [pc, #224]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abba:	d107      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fe0b 	bl	800b7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abca:	e340      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd0:	e33d      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abd2:	4b2f      	ldr	r3, [pc, #188]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abde:	d107      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abe0:	f107 0318 	add.w	r3, r7, #24
 800abe4:	4618      	mov	r0, r3
 800abe6:	f000 fb51 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abee:	e32e      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abf4:	e32b      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abf6:	4b26      	ldr	r3, [pc, #152]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac02:	d107      	bne.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac04:	f107 030c 	add.w	r3, r7, #12
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 fc93 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac12:	e31c      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac18:	e319      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac1a:	4b1d      	ldr	r3, [pc, #116]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac22:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac24:	4b1a      	ldr	r3, [pc, #104]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 0304 	and.w	r3, r3, #4
 800ac2c:	2b04      	cmp	r3, #4
 800ac2e:	d10c      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ac30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d109      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac36:	4b16      	ldr	r3, [pc, #88]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	08db      	lsrs	r3, r3, #3
 800ac3c:	f003 0303 	and.w	r3, r3, #3
 800ac40:	4a14      	ldr	r2, [pc, #80]	; (800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ac42:	fa22 f303 	lsr.w	r3, r2, r3
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac48:	e01e      	b.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac4a:	4b11      	ldr	r3, [pc, #68]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac56:	d106      	bne.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ac58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac5e:	d102      	bne.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac60:	4b0d      	ldr	r3, [pc, #52]	; (800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac64:	e010      	b.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac66:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac72:	d106      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ac74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac7a:	d102      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac7c:	4b07      	ldr	r3, [pc, #28]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ac7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac80:	e002      	b.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac86:	e2e2      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac88:	e2e1      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac8a:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ac8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac8e:	e2de      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac90:	58024400 	.word	0x58024400
 800ac94:	03d09000 	.word	0x03d09000
 800ac98:	003d0900 	.word	0x003d0900
 800ac9c:	017d7840 	.word	0x017d7840
 800aca0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aca8:	e2d1      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800acaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800acb2:	430b      	orrs	r3, r1
 800acb4:	f040 809c 	bne.w	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800acb8:	4b93      	ldr	r3, [pc, #588]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acbc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800acc0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acc8:	d054      	beq.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800acca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800accc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acd0:	f200 808b 	bhi.w	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acda:	f000 8083 	beq.w	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800acde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ace4:	f200 8081 	bhi.w	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acee:	d02f      	beq.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acf6:	d878      	bhi.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800acf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d004      	beq.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad04:	d012      	beq.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ad06:	e070      	b.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad08:	4b7f      	ldr	r3, [pc, #508]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad14:	d107      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 fd5e 	bl	800b7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad24:	e293      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad2a:	e290      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad2c:	4b76      	ldr	r3, [pc, #472]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad38:	d107      	bne.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad3a:	f107 0318 	add.w	r3, r7, #24
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 faa4 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad48:	e281      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad4e:	e27e      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad50:	4b6d      	ldr	r3, [pc, #436]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad5c:	d107      	bne.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad5e:	f107 030c 	add.w	r3, r7, #12
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 fbe6 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad6c:	e26f      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad72:	e26c      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad74:	4b64      	ldr	r3, [pc, #400]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad7e:	4b62      	ldr	r3, [pc, #392]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 0304 	and.w	r3, r3, #4
 800ad86:	2b04      	cmp	r3, #4
 800ad88:	d10c      	bne.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d109      	bne.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad90:	4b5d      	ldr	r3, [pc, #372]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	08db      	lsrs	r3, r3, #3
 800ad96:	f003 0303 	and.w	r3, r3, #3
 800ad9a:	4a5c      	ldr	r2, [pc, #368]	; (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ad9c:	fa22 f303 	lsr.w	r3, r2, r3
 800ada0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ada2:	e01e      	b.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ada4:	4b58      	ldr	r3, [pc, #352]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb0:	d106      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800adb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adb8:	d102      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800adba:	4b55      	ldr	r3, [pc, #340]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adbe:	e010      	b.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adc0:	4b51      	ldr	r3, [pc, #324]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adcc:	d106      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800adce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800add4:	d102      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800add6:	4b4f      	ldr	r3, [pc, #316]	; (800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800add8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adda:	e002      	b.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800addc:	2300      	movs	r3, #0
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ade0:	e235      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ade2:	e234      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ade4:	4b4c      	ldr	r3, [pc, #304]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ade6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ade8:	e231      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adee:	e22e      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800adf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adf4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800adf8:	430b      	orrs	r3, r1
 800adfa:	f040 808f 	bne.w	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800adfe:	4b42      	ldr	r3, [pc, #264]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae02:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ae06:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ae08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae0e:	d06b      	beq.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ae10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae16:	d874      	bhi.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae1e:	d056      	beq.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae26:	d86c      	bhi.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae2e:	d03b      	beq.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae36:	d864      	bhi.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae3e:	d021      	beq.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae46:	d85c      	bhi.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d004      	beq.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae54:	d004      	beq.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ae56:	e054      	b.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ae58:	f7fe fa0a 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 800ae5c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae5e:	e1f6      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae60:	4b29      	ldr	r3, [pc, #164]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae6c:	d107      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6e:	f107 0318 	add.w	r3, r7, #24
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 fa0a 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae7c:	e1e7      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae82:	e1e4      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae84:	4b20      	ldr	r3, [pc, #128]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae90:	d107      	bne.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae92:	f107 030c 	add.w	r3, r7, #12
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 fb4c 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea0:	e1d5      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea6:	e1d2      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aea8:	4b17      	ldr	r3, [pc, #92]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0304 	and.w	r3, r3, #4
 800aeb0:	2b04      	cmp	r3, #4
 800aeb2:	d109      	bne.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aeb4:	4b14      	ldr	r3, [pc, #80]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	08db      	lsrs	r3, r3, #3
 800aeba:	f003 0303 	and.w	r3, r3, #3
 800aebe:	4a13      	ldr	r2, [pc, #76]	; (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aec0:	fa22 f303 	lsr.w	r3, r2, r3
 800aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec6:	e1c2      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aecc:	e1bf      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aece:	4b0e      	ldr	r3, [pc, #56]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeda:	d102      	bne.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800aedc:	4b0c      	ldr	r3, [pc, #48]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aee0:	e1b5      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aee6:	e1b2      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aee8:	4b07      	ldr	r3, [pc, #28]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aef4:	d102      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aef6:	4b07      	ldr	r3, [pc, #28]	; (800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aefa:	e1a8      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af00:	e1a5      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af06:	e1a2      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af08:	58024400 	.word	0x58024400
 800af0c:	03d09000 	.word	0x03d09000
 800af10:	003d0900 	.word	0x003d0900
 800af14:	017d7840 	.word	0x017d7840
 800af18:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800af1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af20:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800af24:	430b      	orrs	r3, r1
 800af26:	d173      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800af28:	4b9c      	ldr	r3, [pc, #624]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800af30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800af32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af38:	d02f      	beq.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800af3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af40:	d863      	bhi.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800af42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af44:	2b00      	cmp	r3, #0
 800af46:	d004      	beq.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800af48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af4e:	d012      	beq.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800af50:	e05b      	b.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af52:	4b92      	ldr	r3, [pc, #584]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af5e:	d107      	bne.n	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af60:	f107 0318 	add.w	r3, r7, #24
 800af64:	4618      	mov	r0, r3
 800af66:	f000 f991 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af6e:	e16e      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af74:	e16b      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af76:	4b89      	ldr	r3, [pc, #548]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af82:	d107      	bne.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af84:	f107 030c 	add.w	r3, r7, #12
 800af88:	4618      	mov	r0, r3
 800af8a:	f000 fad3 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af92:	e15c      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af94:	2300      	movs	r3, #0
 800af96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af98:	e159      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af9a:	4b80      	ldr	r3, [pc, #512]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afa2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afa4:	4b7d      	ldr	r3, [pc, #500]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0304 	and.w	r3, r3, #4
 800afac:	2b04      	cmp	r3, #4
 800afae:	d10c      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800afb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d109      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afb6:	4b79      	ldr	r3, [pc, #484]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	08db      	lsrs	r3, r3, #3
 800afbc:	f003 0303 	and.w	r3, r3, #3
 800afc0:	4a77      	ldr	r2, [pc, #476]	; (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800afc2:	fa22 f303 	lsr.w	r3, r2, r3
 800afc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afc8:	e01e      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afca:	4b74      	ldr	r3, [pc, #464]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afd6:	d106      	bne.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800afd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afde:	d102      	bne.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afe0:	4b70      	ldr	r3, [pc, #448]	; (800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afe4:	e010      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afe6:	4b6d      	ldr	r3, [pc, #436]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aff2:	d106      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800aff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800affa:	d102      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800affc:	4b6a      	ldr	r3, [pc, #424]	; (800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b000:	e002      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b006:	e122      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b008:	e121      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b00e:	e11e      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b010:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b014:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b018:	430b      	orrs	r3, r1
 800b01a:	d133      	bne.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b01c:	4b5f      	ldr	r3, [pc, #380]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b01e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b024:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d004      	beq.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b032:	d012      	beq.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b034:	e023      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b036:	4b59      	ldr	r3, [pc, #356]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b03e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b042:	d107      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 fbc7 	bl	800b7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b052:	e0fc      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b058:	e0f9      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b05a:	4b50      	ldr	r3, [pc, #320]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b066:	d107      	bne.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b068:	f107 0318 	add.w	r3, r7, #24
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 f90d 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b076:	e0ea      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b07c:	e0e7      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b082:	e0e4      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b084:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b088:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b08c:	430b      	orrs	r3, r1
 800b08e:	f040 808d 	bne.w	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b092:	4b42      	ldr	r3, [pc, #264]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b096:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b09a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0a2:	d06b      	beq.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0aa:	d874      	bhi.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0b2:	d056      	beq.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ba:	d86c      	bhi.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0c2:	d03b      	beq.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0ca:	d864      	bhi.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0d2:	d021      	beq.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0da:	d85c      	bhi.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d004      	beq.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0e8:	d004      	beq.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b0ea:	e054      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b0ec:	f000 f8b8 	bl	800b260 <HAL_RCCEx_GetD3PCLK1Freq>
 800b0f0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b0f2:	e0ac      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0f4:	4b29      	ldr	r3, [pc, #164]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b100:	d107      	bne.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b102:	f107 0318 	add.w	r3, r7, #24
 800b106:	4618      	mov	r0, r3
 800b108:	f000 f8c0 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b110:	e09d      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b116:	e09a      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b118:	4b20      	ldr	r3, [pc, #128]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b124:	d107      	bne.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b126:	f107 030c 	add.w	r3, r7, #12
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 fa02 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b134:	e08b      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b13a:	e088      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b13c:	4b17      	ldr	r3, [pc, #92]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 0304 	and.w	r3, r3, #4
 800b144:	2b04      	cmp	r3, #4
 800b146:	d109      	bne.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b148:	4b14      	ldr	r3, [pc, #80]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	08db      	lsrs	r3, r3, #3
 800b14e:	f003 0303 	and.w	r3, r3, #3
 800b152:	4a13      	ldr	r2, [pc, #76]	; (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b154:	fa22 f303 	lsr.w	r3, r2, r3
 800b158:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b15a:	e078      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b160:	e075      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b162:	4b0e      	ldr	r3, [pc, #56]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b16a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b16e:	d102      	bne.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b170:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b174:	e06b      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b17a:	e068      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b17c:	4b07      	ldr	r3, [pc, #28]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b188:	d102      	bne.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b18a:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b18e:	e05e      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b190:	2300      	movs	r3, #0
 800b192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b194:	e05b      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b19a:	e058      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b19c:	58024400 	.word	0x58024400
 800b1a0:	03d09000 	.word	0x03d09000
 800b1a4:	003d0900 	.word	0x003d0900
 800b1a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b1ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1b0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b1b4:	430b      	orrs	r3, r1
 800b1b6:	d148      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b1b8:	4b27      	ldr	r3, [pc, #156]	; (800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c8:	d02a      	beq.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d0:	d838      	bhi.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1de:	d00d      	beq.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b1e0:	e030      	b.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b1e2:	4b1d      	ldr	r3, [pc, #116]	; (800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1ee:	d102      	bne.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b1f0:	4b1a      	ldr	r3, [pc, #104]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1f4:	e02b      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1fa:	e028      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1fc:	4b16      	ldr	r3, [pc, #88]	; (800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b208:	d107      	bne.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b20a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 fae4 	bl	800b7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b218:	e019      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b21e:	e016      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b220:	4b0d      	ldr	r3, [pc, #52]	; (800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b22c:	d107      	bne.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b22e:	f107 0318 	add.w	r3, r7, #24
 800b232:	4618      	mov	r0, r3
 800b234:	f000 f82a 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b23c:	e007      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b242:	e004      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b244:	2300      	movs	r3, #0
 800b246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b248:	e001      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b24a:	2300      	movs	r3, #0
 800b24c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b250:	4618      	mov	r0, r3
 800b252:	3740      	adds	r7, #64	; 0x40
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	58024400 	.word	0x58024400
 800b25c:	017d7840 	.word	0x017d7840

0800b260 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b264:	f7fd ffd4 	bl	8009210 <HAL_RCC_GetHCLKFreq>
 800b268:	4602      	mov	r2, r0
 800b26a:	4b06      	ldr	r3, [pc, #24]	; (800b284 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	091b      	lsrs	r3, r3, #4
 800b270:	f003 0307 	and.w	r3, r3, #7
 800b274:	4904      	ldr	r1, [pc, #16]	; (800b288 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b276:	5ccb      	ldrb	r3, [r1, r3]
 800b278:	f003 031f 	and.w	r3, r3, #31
 800b27c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b280:	4618      	mov	r0, r3
 800b282:	bd80      	pop	{r7, pc}
 800b284:	58024400 	.word	0x58024400
 800b288:	08014ca4 	.word	0x08014ca4

0800b28c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b089      	sub	sp, #36	; 0x24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b294:	4ba1      	ldr	r3, [pc, #644]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b298:	f003 0303 	and.w	r3, r3, #3
 800b29c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b29e:	4b9f      	ldr	r3, [pc, #636]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a2:	0b1b      	lsrs	r3, r3, #12
 800b2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b2aa:	4b9c      	ldr	r3, [pc, #624]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ae:	091b      	lsrs	r3, r3, #4
 800b2b0:	f003 0301 	and.w	r3, r3, #1
 800b2b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b2b6:	4b99      	ldr	r3, [pc, #612]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ba:	08db      	lsrs	r3, r3, #3
 800b2bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	fb02 f303 	mul.w	r3, r2, r3
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 8111 	beq.w	800b4fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	f000 8083 	beq.w	800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	f200 80a1 	bhi.w	800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d003      	beq.n	800b2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d056      	beq.n	800b3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b2f6:	e099      	b.n	800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2f8:	4b88      	ldr	r3, [pc, #544]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 0320 	and.w	r3, r3, #32
 800b300:	2b00      	cmp	r3, #0
 800b302:	d02d      	beq.n	800b360 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b304:	4b85      	ldr	r3, [pc, #532]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	08db      	lsrs	r3, r3, #3
 800b30a:	f003 0303 	and.w	r3, r3, #3
 800b30e:	4a84      	ldr	r2, [pc, #528]	; (800b520 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b310:	fa22 f303 	lsr.w	r3, r2, r3
 800b314:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	ee07 3a90 	vmov	s15, r3
 800b31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b32e:	4b7b      	ldr	r3, [pc, #492]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b342:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b35a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b35e:	e087      	b.n	800b470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	ee07 3a90 	vmov	s15, r3
 800b366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b528 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b372:	4b6a      	ldr	r3, [pc, #424]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b37a:	ee07 3a90 	vmov	s15, r3
 800b37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b382:	ed97 6a03 	vldr	s12, [r7, #12]
 800b386:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3a2:	e065      	b.n	800b470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	ee07 3a90 	vmov	s15, r3
 800b3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b52c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b6:	4b59      	ldr	r3, [pc, #356]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3e6:	e043      	b.n	800b470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b530 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3fa:	4b48      	ldr	r3, [pc, #288]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b402:	ee07 3a90 	vmov	s15, r3
 800b406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b40e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b42a:	e021      	b.n	800b470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	ee07 3a90 	vmov	s15, r3
 800b432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b436:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b52c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b43e:	4b37      	ldr	r3, [pc, #220]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b446:	ee07 3a90 	vmov	s15, r3
 800b44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b452:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b45e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b46a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b46e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b470:	4b2a      	ldr	r3, [pc, #168]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b474:	0a5b      	lsrs	r3, r3, #9
 800b476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b47a:	ee07 3a90 	vmov	s15, r3
 800b47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b48a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b48e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b496:	ee17 2a90 	vmov	r2, s15
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b49e:	4b1f      	ldr	r3, [pc, #124]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a2:	0c1b      	lsrs	r3, r3, #16
 800b4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4a8:	ee07 3a90 	vmov	s15, r3
 800b4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4c4:	ee17 2a90 	vmov	r2, s15
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b4cc:	4b13      	ldr	r3, [pc, #76]	; (800b51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d0:	0e1b      	lsrs	r3, r3, #24
 800b4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4f2:	ee17 2a90 	vmov	r2, s15
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b4fa:	e008      	b.n	800b50e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	609a      	str	r2, [r3, #8]
}
 800b50e:	bf00      	nop
 800b510:	3724      	adds	r7, #36	; 0x24
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	58024400 	.word	0x58024400
 800b520:	03d09000 	.word	0x03d09000
 800b524:	46000000 	.word	0x46000000
 800b528:	4c742400 	.word	0x4c742400
 800b52c:	4a742400 	.word	0x4a742400
 800b530:	4bbebc20 	.word	0x4bbebc20

0800b534 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b534:	b480      	push	{r7}
 800b536:	b089      	sub	sp, #36	; 0x24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b53c:	4ba1      	ldr	r3, [pc, #644]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b540:	f003 0303 	and.w	r3, r3, #3
 800b544:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b546:	4b9f      	ldr	r3, [pc, #636]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54a:	0d1b      	lsrs	r3, r3, #20
 800b54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b550:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b552:	4b9c      	ldr	r3, [pc, #624]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b556:	0a1b      	lsrs	r3, r3, #8
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b55e:	4b99      	ldr	r3, [pc, #612]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b562:	08db      	lsrs	r3, r3, #3
 800b564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b568:	693a      	ldr	r2, [r7, #16]
 800b56a:	fb02 f303 	mul.w	r3, r2, r3
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b576:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f000 8111 	beq.w	800b7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	2b02      	cmp	r3, #2
 800b586:	f000 8083 	beq.w	800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	f200 80a1 	bhi.w	800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d003      	beq.n	800b5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d056      	beq.n	800b64c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b59e:	e099      	b.n	800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5a0:	4b88      	ldr	r3, [pc, #544]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0320 	and.w	r3, r3, #32
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d02d      	beq.n	800b608 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5ac:	4b85      	ldr	r3, [pc, #532]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	08db      	lsrs	r3, r3, #3
 800b5b2:	f003 0303 	and.w	r3, r3, #3
 800b5b6:	4a84      	ldr	r2, [pc, #528]	; (800b7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b5bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	ee07 3a90 	vmov	s15, r3
 800b5c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	ee07 3a90 	vmov	s15, r3
 800b5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5d6:	4b7b      	ldr	r3, [pc, #492]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b602:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b606:	e087      	b.n	800b718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	ee07 3a90 	vmov	s15, r3
 800b60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b612:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b7d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b61a:	4b6a      	ldr	r3, [pc, #424]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b622:	ee07 3a90 	vmov	s15, r3
 800b626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b62a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b62e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b63a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b64a:	e065      	b.n	800b718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	ee07 3a90 	vmov	s15, r3
 800b652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b656:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b65a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b65e:	4b59      	ldr	r3, [pc, #356]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b66e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b672:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b67a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b67e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b68a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b68e:	e043      	b.n	800b718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	ee07 3a90 	vmov	s15, r3
 800b696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b69e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6a2:	4b48      	ldr	r3, [pc, #288]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6aa:	ee07 3a90 	vmov	s15, r3
 800b6ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6d2:	e021      	b.n	800b718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	ee07 3a90 	vmov	s15, r3
 800b6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b6e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6e6:	4b37      	ldr	r3, [pc, #220]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ee:	ee07 3a90 	vmov	s15, r3
 800b6f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b70a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b70e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b716:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b718:	4b2a      	ldr	r3, [pc, #168]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71c:	0a5b      	lsrs	r3, r3, #9
 800b71e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b722:	ee07 3a90 	vmov	s15, r3
 800b726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b72e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b732:	edd7 6a07 	vldr	s13, [r7, #28]
 800b736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b73a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b73e:	ee17 2a90 	vmov	r2, s15
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b746:	4b1f      	ldr	r3, [pc, #124]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b74a:	0c1b      	lsrs	r3, r3, #16
 800b74c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b750:	ee07 3a90 	vmov	s15, r3
 800b754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b758:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b75c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b760:	edd7 6a07 	vldr	s13, [r7, #28]
 800b764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b76c:	ee17 2a90 	vmov	r2, s15
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b774:	4b13      	ldr	r3, [pc, #76]	; (800b7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b778:	0e1b      	lsrs	r3, r3, #24
 800b77a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b77e:	ee07 3a90 	vmov	s15, r3
 800b782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b78a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b78e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b79a:	ee17 2a90 	vmov	r2, s15
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b7a2:	e008      	b.n	800b7b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	609a      	str	r2, [r3, #8]
}
 800b7b6:	bf00      	nop
 800b7b8:	3724      	adds	r7, #36	; 0x24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	58024400 	.word	0x58024400
 800b7c8:	03d09000 	.word	0x03d09000
 800b7cc:	46000000 	.word	0x46000000
 800b7d0:	4c742400 	.word	0x4c742400
 800b7d4:	4a742400 	.word	0x4a742400
 800b7d8:	4bbebc20 	.word	0x4bbebc20

0800b7dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b089      	sub	sp, #36	; 0x24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7e4:	4ba0      	ldr	r3, [pc, #640]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e8:	f003 0303 	and.w	r3, r3, #3
 800b7ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b7ee:	4b9e      	ldr	r3, [pc, #632]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f2:	091b      	lsrs	r3, r3, #4
 800b7f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b7fa:	4b9b      	ldr	r3, [pc, #620]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	f003 0301 	and.w	r3, r3, #1
 800b802:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b804:	4b98      	ldr	r3, [pc, #608]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b808:	08db      	lsrs	r3, r3, #3
 800b80a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	fb02 f303 	mul.w	r3, r2, r3
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 8111 	beq.w	800ba4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	f000 8083 	beq.w	800b936 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	2b02      	cmp	r3, #2
 800b834:	f200 80a1 	bhi.w	800b97a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d056      	beq.n	800b8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b844:	e099      	b.n	800b97a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b846:	4b88      	ldr	r3, [pc, #544]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0320 	and.w	r3, r3, #32
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d02d      	beq.n	800b8ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b852:	4b85      	ldr	r3, [pc, #532]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	08db      	lsrs	r3, r3, #3
 800b858:	f003 0303 	and.w	r3, r3, #3
 800b85c:	4a83      	ldr	r2, [pc, #524]	; (800ba6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b85e:	fa22 f303 	lsr.w	r3, r2, r3
 800b862:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	ee07 3a90 	vmov	s15, r3
 800b86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	ee07 3a90 	vmov	s15, r3
 800b874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b87c:	4b7a      	ldr	r3, [pc, #488]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b890:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b89c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b8ac:	e087      	b.n	800b9be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	ee07 3a90 	vmov	s15, r3
 800b8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ba74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b8bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c0:	4b69      	ldr	r3, [pc, #420]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8f0:	e065      	b.n	800b9be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	ee07 3a90 	vmov	s15, r3
 800b8f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ba78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b904:	4b58      	ldr	r3, [pc, #352]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b90c:	ee07 3a90 	vmov	s15, r3
 800b910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b914:	ed97 6a03 	vldr	s12, [r7, #12]
 800b918:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b91c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b920:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b924:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b92c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b930:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b934:	e043      	b.n	800b9be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	ee07 3a90 	vmov	s15, r3
 800b93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b940:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ba7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b948:	4b47      	ldr	r3, [pc, #284]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b950:	ee07 3a90 	vmov	s15, r3
 800b954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b958:	ed97 6a03 	vldr	s12, [r7, #12]
 800b95c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b96c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b970:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b974:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b978:	e021      	b.n	800b9be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	ee07 3a90 	vmov	s15, r3
 800b980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b984:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ba74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b98c:	4b36      	ldr	r3, [pc, #216]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b98e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b994:	ee07 3a90 	vmov	s15, r3
 800b998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b99c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b9be:	4b2a      	ldr	r3, [pc, #168]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c2:	0a5b      	lsrs	r3, r3, #9
 800b9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9c8:	ee07 3a90 	vmov	s15, r3
 800b9cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9e4:	ee17 2a90 	vmov	r2, s15
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b9ec:	4b1e      	ldr	r3, [pc, #120]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f0:	0c1b      	lsrs	r3, r3, #16
 800b9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9f6:	ee07 3a90 	vmov	s15, r3
 800b9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba12:	ee17 2a90 	vmov	r2, s15
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ba1a:	4b13      	ldr	r3, [pc, #76]	; (800ba68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba1e:	0e1b      	lsrs	r3, r3, #24
 800ba20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba24:	ee07 3a90 	vmov	s15, r3
 800ba28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba40:	ee17 2a90 	vmov	r2, s15
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ba48:	e008      	b.n	800ba5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	609a      	str	r2, [r3, #8]
}
 800ba5c:	bf00      	nop
 800ba5e:	3724      	adds	r7, #36	; 0x24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	58024400 	.word	0x58024400
 800ba6c:	03d09000 	.word	0x03d09000
 800ba70:	46000000 	.word	0x46000000
 800ba74:	4c742400 	.word	0x4c742400
 800ba78:	4a742400 	.word	0x4a742400
 800ba7c:	4bbebc20 	.word	0x4bbebc20

0800ba80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba8e:	4b53      	ldr	r3, [pc, #332]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800ba90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba92:	f003 0303 	and.w	r3, r3, #3
 800ba96:	2b03      	cmp	r3, #3
 800ba98:	d101      	bne.n	800ba9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e099      	b.n	800bbd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ba9e:	4b4f      	ldr	r3, [pc, #316]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a4e      	ldr	r2, [pc, #312]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800baa4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800baa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baaa:	f7f7 f973 	bl	8002d94 <HAL_GetTick>
 800baae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bab0:	e008      	b.n	800bac4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bab2:	f7f7 f96f 	bl	8002d94 <HAL_GetTick>
 800bab6:	4602      	mov	r2, r0
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	2b02      	cmp	r3, #2
 800babe:	d901      	bls.n	800bac4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bac0:	2303      	movs	r3, #3
 800bac2:	e086      	b.n	800bbd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bac4:	4b45      	ldr	r3, [pc, #276]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1f0      	bne.n	800bab2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bad0:	4b42      	ldr	r3, [pc, #264]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	031b      	lsls	r3, r3, #12
 800bade:	493f      	ldr	r1, [pc, #252]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bae0:	4313      	orrs	r3, r2
 800bae2:	628b      	str	r3, [r1, #40]	; 0x28
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	3b01      	subs	r3, #1
 800baea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	3b01      	subs	r3, #1
 800baf4:	025b      	lsls	r3, r3, #9
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	431a      	orrs	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	041b      	lsls	r3, r3, #16
 800bb02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	061b      	lsls	r3, r3, #24
 800bb10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bb14:	4931      	ldr	r1, [pc, #196]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb16:	4313      	orrs	r3, r2
 800bb18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bb1a:	4b30      	ldr	r3, [pc, #192]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	492d      	ldr	r1, [pc, #180]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bb2c:	4b2b      	ldr	r3, [pc, #172]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb30:	f023 0220 	bic.w	r2, r3, #32
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	4928      	ldr	r1, [pc, #160]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bb3e:	4b27      	ldr	r3, [pc, #156]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb42:	4a26      	ldr	r2, [pc, #152]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb44:	f023 0310 	bic.w	r3, r3, #16
 800bb48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb4a:	4b24      	ldr	r3, [pc, #144]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb4e:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <RCCEx_PLL2_Config+0x160>)
 800bb50:	4013      	ands	r3, r2
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	69d2      	ldr	r2, [r2, #28]
 800bb56:	00d2      	lsls	r2, r2, #3
 800bb58:	4920      	ldr	r1, [pc, #128]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bb5e:	4b1f      	ldr	r3, [pc, #124]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb62:	4a1e      	ldr	r2, [pc, #120]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb64:	f043 0310 	orr.w	r3, r3, #16
 800bb68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d106      	bne.n	800bb7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bb70:	4b1a      	ldr	r3, [pc, #104]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb74:	4a19      	ldr	r2, [pc, #100]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb7c:	e00f      	b.n	800bb9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d106      	bne.n	800bb92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bb84:	4b15      	ldr	r3, [pc, #84]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb88:	4a14      	ldr	r2, [pc, #80]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb90:	e005      	b.n	800bb9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bb92:	4b12      	ldr	r3, [pc, #72]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb96:	4a11      	ldr	r2, [pc, #68]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bb98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bb9e:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a0e      	ldr	r2, [pc, #56]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbaa:	f7f7 f8f3 	bl	8002d94 <HAL_GetTick>
 800bbae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bbb0:	e008      	b.n	800bbc4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bbb2:	f7f7 f8ef 	bl	8002d94 <HAL_GetTick>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d901      	bls.n	800bbc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e006      	b.n	800bbd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bbc4:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <RCCEx_PLL2_Config+0x15c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0f0      	beq.n	800bbb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	58024400 	.word	0x58024400
 800bbe0:	ffff0007 	.word	0xffff0007

0800bbe4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbf2:	4b53      	ldr	r3, [pc, #332]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf6:	f003 0303 	and.w	r3, r3, #3
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d101      	bne.n	800bc02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e099      	b.n	800bd36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bc02:	4b4f      	ldr	r3, [pc, #316]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a4e      	ldr	r2, [pc, #312]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bc08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc0e:	f7f7 f8c1 	bl	8002d94 <HAL_GetTick>
 800bc12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bc14:	e008      	b.n	800bc28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc16:	f7f7 f8bd 	bl	8002d94 <HAL_GetTick>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d901      	bls.n	800bc28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	e086      	b.n	800bd36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bc28:	4b45      	ldr	r3, [pc, #276]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1f0      	bne.n	800bc16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bc34:	4b42      	ldr	r3, [pc, #264]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	051b      	lsls	r3, r3, #20
 800bc42:	493f      	ldr	r1, [pc, #252]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bc44:	4313      	orrs	r3, r2
 800bc46:	628b      	str	r3, [r1, #40]	; 0x28
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	025b      	lsls	r3, r3, #9
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	431a      	orrs	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	041b      	lsls	r3, r3, #16
 800bc66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bc6a:	431a      	orrs	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	3b01      	subs	r3, #1
 800bc72:	061b      	lsls	r3, r3, #24
 800bc74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bc78:	4931      	ldr	r1, [pc, #196]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bc7e:	4b30      	ldr	r3, [pc, #192]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	492d      	ldr	r1, [pc, #180]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bc90:	4b2b      	ldr	r3, [pc, #172]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	4928      	ldr	r1, [pc, #160]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bca2:	4b27      	ldr	r3, [pc, #156]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	4a26      	ldr	r2, [pc, #152]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bcae:	4b24      	ldr	r3, [pc, #144]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bcb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcb2:	4b24      	ldr	r3, [pc, #144]	; (800bd44 <RCCEx_PLL3_Config+0x160>)
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	69d2      	ldr	r2, [r2, #28]
 800bcba:	00d2      	lsls	r2, r2, #3
 800bcbc:	4920      	ldr	r1, [pc, #128]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bcc2:	4b1f      	ldr	r3, [pc, #124]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bcc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc6:	4a1e      	ldr	r2, [pc, #120]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bcc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bccc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d106      	bne.n	800bce2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bcd4:	4b1a      	ldr	r3, [pc, #104]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd8:	4a19      	ldr	r2, [pc, #100]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bcda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bcde:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bce0:	e00f      	b.n	800bd02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d106      	bne.n	800bcf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bce8:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcec:	4a14      	ldr	r2, [pc, #80]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bcee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bcf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bcf4:	e005      	b.n	800bd02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bcf6:	4b12      	ldr	r3, [pc, #72]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfa:	4a11      	ldr	r2, [pc, #68]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bcfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bd02:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a0e      	ldr	r2, [pc, #56]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bd08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd0e:	f7f7 f841 	bl	8002d94 <HAL_GetTick>
 800bd12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bd14:	e008      	b.n	800bd28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bd16:	f7f7 f83d 	bl	8002d94 <HAL_GetTick>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	d901      	bls.n	800bd28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bd24:	2303      	movs	r3, #3
 800bd26:	e006      	b.n	800bd36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bd28:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <RCCEx_PLL3_Config+0x15c>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d0f0      	beq.n	800bd16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	58024400 	.word	0x58024400
 800bd44:	ffff0007 	.word	0xffff0007

0800bd48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e10f      	b.n	800bf7a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a87      	ldr	r2, [pc, #540]	; (800bf84 <HAL_SPI_Init+0x23c>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d00f      	beq.n	800bd8a <HAL_SPI_Init+0x42>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a86      	ldr	r2, [pc, #536]	; (800bf88 <HAL_SPI_Init+0x240>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d00a      	beq.n	800bd8a <HAL_SPI_Init+0x42>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a84      	ldr	r2, [pc, #528]	; (800bf8c <HAL_SPI_Init+0x244>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d005      	beq.n	800bd8a <HAL_SPI_Init+0x42>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	2b0f      	cmp	r3, #15
 800bd84:	d901      	bls.n	800bd8a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e0f7      	b.n	800bf7a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f900 	bl	800bf90 <SPI_GetPacketSize>
 800bd90:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a7b      	ldr	r2, [pc, #492]	; (800bf84 <HAL_SPI_Init+0x23c>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d00c      	beq.n	800bdb6 <HAL_SPI_Init+0x6e>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a79      	ldr	r2, [pc, #484]	; (800bf88 <HAL_SPI_Init+0x240>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d007      	beq.n	800bdb6 <HAL_SPI_Init+0x6e>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a78      	ldr	r2, [pc, #480]	; (800bf8c <HAL_SPI_Init+0x244>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d002      	beq.n	800bdb6 <HAL_SPI_Init+0x6e>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2b08      	cmp	r3, #8
 800bdb4:	d811      	bhi.n	800bdda <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bdba:	4a72      	ldr	r2, [pc, #456]	; (800bf84 <HAL_SPI_Init+0x23c>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d009      	beq.n	800bdd4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a70      	ldr	r2, [pc, #448]	; (800bf88 <HAL_SPI_Init+0x240>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d004      	beq.n	800bdd4 <HAL_SPI_Init+0x8c>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a6f      	ldr	r2, [pc, #444]	; (800bf8c <HAL_SPI_Init+0x244>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d104      	bne.n	800bdde <HAL_SPI_Init+0x96>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b10      	cmp	r3, #16
 800bdd8:	d901      	bls.n	800bdde <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e0cd      	b.n	800bf7a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d106      	bne.n	800bdf8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7f6 fafe 	bl	80023f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2202      	movs	r2, #2
 800bdfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f022 0201 	bic.w	r2, r2, #1
 800be0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800be1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be24:	d119      	bne.n	800be5a <HAL_SPI_Init+0x112>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be2e:	d103      	bne.n	800be38 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800be34:	2b00      	cmp	r3, #0
 800be36:	d008      	beq.n	800be4a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10c      	bne.n	800be5a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800be44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be48:	d107      	bne.n	800be5a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00f      	beq.n	800be86 <HAL_SPI_Init+0x13e>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	2b06      	cmp	r3, #6
 800be6c:	d90b      	bls.n	800be86 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	430a      	orrs	r2, r1
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	e007      	b.n	800be96 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	69da      	ldr	r2, [r3, #28]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9e:	431a      	orrs	r2, r3
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	431a      	orrs	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bea8:	ea42 0103 	orr.w	r1, r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	68da      	ldr	r2, [r3, #12]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	430a      	orrs	r2, r1
 800beb6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec0:	431a      	orrs	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec6:	431a      	orrs	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	431a      	orrs	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	431a      	orrs	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	431a      	orrs	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	431a      	orrs	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	431a      	orrs	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beea:	431a      	orrs	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	431a      	orrs	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bef6:	ea42 0103 	orr.w	r1, r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	430a      	orrs	r2, r1
 800bf04:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d113      	bne.n	800bf36 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf20:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf34:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f022 0201 	bic.w	r2, r2, #1
 800bf44:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00a      	beq.n	800bf68 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	430a      	orrs	r2, r1
 800bf66:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	40013000 	.word	0x40013000
 800bf88:	40003800 	.word	0x40003800
 800bf8c:	40003c00 	.word	0x40003c00

0800bf90 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf9c:	095b      	lsrs	r3, r3, #5
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	3307      	adds	r3, #7
 800bfae:	08db      	lsrs	r3, r3, #3
 800bfb0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	fb02 f303 	mul.w	r3, r2, r3
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b082      	sub	sp, #8
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d101      	bne.n	800bfd8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e049      	b.n	800c06c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d106      	bne.n	800bff2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f7f6 fab7 	bl	8002560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2202      	movs	r2, #2
 800bff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	3304      	adds	r3, #4
 800c002:	4619      	mov	r1, r3
 800c004:	4610      	mov	r0, r2
 800c006:	f000 ff41 	bl	800ce8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2201      	movs	r2, #1
 800c01e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2201      	movs	r2, #1
 800c036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2201      	movs	r2, #1
 800c046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2201      	movs	r2, #1
 800c04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2201      	movs	r2, #1
 800c066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b01      	cmp	r3, #1
 800c086:	d001      	beq.n	800c08c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e04c      	b.n	800c126 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2202      	movs	r2, #2
 800c090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a26      	ldr	r2, [pc, #152]	; (800c134 <HAL_TIM_Base_Start+0xc0>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d022      	beq.n	800c0e4 <HAL_TIM_Base_Start+0x70>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a6:	d01d      	beq.n	800c0e4 <HAL_TIM_Base_Start+0x70>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a22      	ldr	r2, [pc, #136]	; (800c138 <HAL_TIM_Base_Start+0xc4>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d018      	beq.n	800c0e4 <HAL_TIM_Base_Start+0x70>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a21      	ldr	r2, [pc, #132]	; (800c13c <HAL_TIM_Base_Start+0xc8>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d013      	beq.n	800c0e4 <HAL_TIM_Base_Start+0x70>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a1f      	ldr	r2, [pc, #124]	; (800c140 <HAL_TIM_Base_Start+0xcc>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d00e      	beq.n	800c0e4 <HAL_TIM_Base_Start+0x70>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a1e      	ldr	r2, [pc, #120]	; (800c144 <HAL_TIM_Base_Start+0xd0>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d009      	beq.n	800c0e4 <HAL_TIM_Base_Start+0x70>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a1c      	ldr	r2, [pc, #112]	; (800c148 <HAL_TIM_Base_Start+0xd4>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d004      	beq.n	800c0e4 <HAL_TIM_Base_Start+0x70>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a1b      	ldr	r2, [pc, #108]	; (800c14c <HAL_TIM_Base_Start+0xd8>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d115      	bne.n	800c110 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	689a      	ldr	r2, [r3, #8]
 800c0ea:	4b19      	ldr	r3, [pc, #100]	; (800c150 <HAL_TIM_Base_Start+0xdc>)
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2b06      	cmp	r3, #6
 800c0f4:	d015      	beq.n	800c122 <HAL_TIM_Base_Start+0xae>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0fc:	d011      	beq.n	800c122 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f042 0201 	orr.w	r2, r2, #1
 800c10c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c10e:	e008      	b.n	800c122 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f042 0201 	orr.w	r2, r2, #1
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	e000      	b.n	800c124 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c122:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	40010000 	.word	0x40010000
 800c138:	40000400 	.word	0x40000400
 800c13c:	40000800 	.word	0x40000800
 800c140:	40000c00 	.word	0x40000c00
 800c144:	40010400 	.word	0x40010400
 800c148:	40001800 	.word	0x40001800
 800c14c:	40014000 	.word	0x40014000
 800c150:	00010007 	.word	0x00010007

0800c154 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	6a1a      	ldr	r2, [r3, #32]
 800c162:	f241 1311 	movw	r3, #4369	; 0x1111
 800c166:	4013      	ands	r3, r2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10f      	bne.n	800c18c <HAL_TIM_Base_Stop+0x38>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	6a1a      	ldr	r2, [r3, #32]
 800c172:	f240 4344 	movw	r3, #1092	; 0x444
 800c176:	4013      	ands	r3, r2
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d107      	bne.n	800c18c <HAL_TIM_Base_Stop+0x38>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f022 0201 	bic.w	r2, r2, #1
 800c18a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
	...

0800c1a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d001      	beq.n	800c1bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e054      	b.n	800c266 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68da      	ldr	r2, [r3, #12]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f042 0201 	orr.w	r2, r2, #1
 800c1d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a26      	ldr	r2, [pc, #152]	; (800c274 <HAL_TIM_Base_Start_IT+0xd0>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d022      	beq.n	800c224 <HAL_TIM_Base_Start_IT+0x80>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1e6:	d01d      	beq.n	800c224 <HAL_TIM_Base_Start_IT+0x80>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a22      	ldr	r2, [pc, #136]	; (800c278 <HAL_TIM_Base_Start_IT+0xd4>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d018      	beq.n	800c224 <HAL_TIM_Base_Start_IT+0x80>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a21      	ldr	r2, [pc, #132]	; (800c27c <HAL_TIM_Base_Start_IT+0xd8>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d013      	beq.n	800c224 <HAL_TIM_Base_Start_IT+0x80>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a1f      	ldr	r2, [pc, #124]	; (800c280 <HAL_TIM_Base_Start_IT+0xdc>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d00e      	beq.n	800c224 <HAL_TIM_Base_Start_IT+0x80>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a1e      	ldr	r2, [pc, #120]	; (800c284 <HAL_TIM_Base_Start_IT+0xe0>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d009      	beq.n	800c224 <HAL_TIM_Base_Start_IT+0x80>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a1c      	ldr	r2, [pc, #112]	; (800c288 <HAL_TIM_Base_Start_IT+0xe4>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d004      	beq.n	800c224 <HAL_TIM_Base_Start_IT+0x80>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a1b      	ldr	r2, [pc, #108]	; (800c28c <HAL_TIM_Base_Start_IT+0xe8>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d115      	bne.n	800c250 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	689a      	ldr	r2, [r3, #8]
 800c22a:	4b19      	ldr	r3, [pc, #100]	; (800c290 <HAL_TIM_Base_Start_IT+0xec>)
 800c22c:	4013      	ands	r3, r2
 800c22e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b06      	cmp	r3, #6
 800c234:	d015      	beq.n	800c262 <HAL_TIM_Base_Start_IT+0xbe>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c23c:	d011      	beq.n	800c262 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f042 0201 	orr.w	r2, r2, #1
 800c24c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c24e:	e008      	b.n	800c262 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f042 0201 	orr.w	r2, r2, #1
 800c25e:	601a      	str	r2, [r3, #0]
 800c260:	e000      	b.n	800c264 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3714      	adds	r7, #20
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	40010000 	.word	0x40010000
 800c278:	40000400 	.word	0x40000400
 800c27c:	40000800 	.word	0x40000800
 800c280:	40000c00 	.word	0x40000c00
 800c284:	40010400 	.word	0x40010400
 800c288:	40001800 	.word	0x40001800
 800c28c:	40014000 	.word	0x40014000
 800c290:	00010007 	.word	0x00010007

0800c294 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d109      	bne.n	800c2bc <HAL_TIM_OC_Start_IT+0x28>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	bf14      	ite	ne
 800c2b4:	2301      	movne	r3, #1
 800c2b6:	2300      	moveq	r3, #0
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	e03c      	b.n	800c336 <HAL_TIM_OC_Start_IT+0xa2>
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	2b04      	cmp	r3, #4
 800c2c0:	d109      	bne.n	800c2d6 <HAL_TIM_OC_Start_IT+0x42>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	bf14      	ite	ne
 800c2ce:	2301      	movne	r3, #1
 800c2d0:	2300      	moveq	r3, #0
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	e02f      	b.n	800c336 <HAL_TIM_OC_Start_IT+0xa2>
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	d109      	bne.n	800c2f0 <HAL_TIM_OC_Start_IT+0x5c>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	bf14      	ite	ne
 800c2e8:	2301      	movne	r3, #1
 800c2ea:	2300      	moveq	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	e022      	b.n	800c336 <HAL_TIM_OC_Start_IT+0xa2>
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b0c      	cmp	r3, #12
 800c2f4:	d109      	bne.n	800c30a <HAL_TIM_OC_Start_IT+0x76>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	bf14      	ite	ne
 800c302:	2301      	movne	r3, #1
 800c304:	2300      	moveq	r3, #0
 800c306:	b2db      	uxtb	r3, r3
 800c308:	e015      	b.n	800c336 <HAL_TIM_OC_Start_IT+0xa2>
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2b10      	cmp	r3, #16
 800c30e:	d109      	bne.n	800c324 <HAL_TIM_OC_Start_IT+0x90>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b01      	cmp	r3, #1
 800c31a:	bf14      	ite	ne
 800c31c:	2301      	movne	r3, #1
 800c31e:	2300      	moveq	r3, #0
 800c320:	b2db      	uxtb	r3, r3
 800c322:	e008      	b.n	800c336 <HAL_TIM_OC_Start_IT+0xa2>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	bf14      	ite	ne
 800c330:	2301      	movne	r3, #1
 800c332:	2300      	moveq	r3, #0
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e0ec      	b.n	800c518 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d104      	bne.n	800c34e <HAL_TIM_OC_Start_IT+0xba>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2202      	movs	r2, #2
 800c348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c34c:	e023      	b.n	800c396 <HAL_TIM_OC_Start_IT+0x102>
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b04      	cmp	r3, #4
 800c352:	d104      	bne.n	800c35e <HAL_TIM_OC_Start_IT+0xca>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2202      	movs	r2, #2
 800c358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c35c:	e01b      	b.n	800c396 <HAL_TIM_OC_Start_IT+0x102>
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b08      	cmp	r3, #8
 800c362:	d104      	bne.n	800c36e <HAL_TIM_OC_Start_IT+0xda>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2202      	movs	r2, #2
 800c368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c36c:	e013      	b.n	800c396 <HAL_TIM_OC_Start_IT+0x102>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2b0c      	cmp	r3, #12
 800c372:	d104      	bne.n	800c37e <HAL_TIM_OC_Start_IT+0xea>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2202      	movs	r2, #2
 800c378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c37c:	e00b      	b.n	800c396 <HAL_TIM_OC_Start_IT+0x102>
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b10      	cmp	r3, #16
 800c382:	d104      	bne.n	800c38e <HAL_TIM_OC_Start_IT+0xfa>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2202      	movs	r2, #2
 800c388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c38c:	e003      	b.n	800c396 <HAL_TIM_OC_Start_IT+0x102>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2202      	movs	r2, #2
 800c392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b0c      	cmp	r3, #12
 800c39a:	d841      	bhi.n	800c420 <HAL_TIM_OC_Start_IT+0x18c>
 800c39c:	a201      	add	r2, pc, #4	; (adr r2, 800c3a4 <HAL_TIM_OC_Start_IT+0x110>)
 800c39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a2:	bf00      	nop
 800c3a4:	0800c3d9 	.word	0x0800c3d9
 800c3a8:	0800c421 	.word	0x0800c421
 800c3ac:	0800c421 	.word	0x0800c421
 800c3b0:	0800c421 	.word	0x0800c421
 800c3b4:	0800c3eb 	.word	0x0800c3eb
 800c3b8:	0800c421 	.word	0x0800c421
 800c3bc:	0800c421 	.word	0x0800c421
 800c3c0:	0800c421 	.word	0x0800c421
 800c3c4:	0800c3fd 	.word	0x0800c3fd
 800c3c8:	0800c421 	.word	0x0800c421
 800c3cc:	0800c421 	.word	0x0800c421
 800c3d0:	0800c421 	.word	0x0800c421
 800c3d4:	0800c40f 	.word	0x0800c40f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68da      	ldr	r2, [r3, #12]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f042 0202 	orr.w	r2, r2, #2
 800c3e6:	60da      	str	r2, [r3, #12]
      break;
 800c3e8:	e01d      	b.n	800c426 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68da      	ldr	r2, [r3, #12]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f042 0204 	orr.w	r2, r2, #4
 800c3f8:	60da      	str	r2, [r3, #12]
      break;
 800c3fa:	e014      	b.n	800c426 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	68da      	ldr	r2, [r3, #12]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f042 0208 	orr.w	r2, r2, #8
 800c40a:	60da      	str	r2, [r3, #12]
      break;
 800c40c:	e00b      	b.n	800c426 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68da      	ldr	r2, [r3, #12]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f042 0210 	orr.w	r2, r2, #16
 800c41c:	60da      	str	r2, [r3, #12]
      break;
 800c41e:	e002      	b.n	800c426 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	73fb      	strb	r3, [r7, #15]
      break;
 800c424:	bf00      	nop
  }

  if (status == HAL_OK)
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d174      	bne.n	800c516 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2201      	movs	r2, #1
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	4618      	mov	r0, r3
 800c436:	f001 f943 	bl	800d6c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a38      	ldr	r2, [pc, #224]	; (800c520 <HAL_TIM_OC_Start_IT+0x28c>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d013      	beq.n	800c46c <HAL_TIM_OC_Start_IT+0x1d8>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a36      	ldr	r2, [pc, #216]	; (800c524 <HAL_TIM_OC_Start_IT+0x290>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d00e      	beq.n	800c46c <HAL_TIM_OC_Start_IT+0x1d8>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a35      	ldr	r2, [pc, #212]	; (800c528 <HAL_TIM_OC_Start_IT+0x294>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d009      	beq.n	800c46c <HAL_TIM_OC_Start_IT+0x1d8>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a33      	ldr	r2, [pc, #204]	; (800c52c <HAL_TIM_OC_Start_IT+0x298>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d004      	beq.n	800c46c <HAL_TIM_OC_Start_IT+0x1d8>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a32      	ldr	r2, [pc, #200]	; (800c530 <HAL_TIM_OC_Start_IT+0x29c>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d101      	bne.n	800c470 <HAL_TIM_OC_Start_IT+0x1dc>
 800c46c:	2301      	movs	r3, #1
 800c46e:	e000      	b.n	800c472 <HAL_TIM_OC_Start_IT+0x1de>
 800c470:	2300      	movs	r3, #0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d007      	beq.n	800c486 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c484:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a25      	ldr	r2, [pc, #148]	; (800c520 <HAL_TIM_OC_Start_IT+0x28c>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d022      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c498:	d01d      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a25      	ldr	r2, [pc, #148]	; (800c534 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d018      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a23      	ldr	r2, [pc, #140]	; (800c538 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d013      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a22      	ldr	r2, [pc, #136]	; (800c53c <HAL_TIM_OC_Start_IT+0x2a8>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d00e      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a19      	ldr	r2, [pc, #100]	; (800c524 <HAL_TIM_OC_Start_IT+0x290>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d009      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a1e      	ldr	r2, [pc, #120]	; (800c540 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d004      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a15      	ldr	r2, [pc, #84]	; (800c528 <HAL_TIM_OC_Start_IT+0x294>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d115      	bne.n	800c502 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	689a      	ldr	r2, [r3, #8]
 800c4dc:	4b19      	ldr	r3, [pc, #100]	; (800c544 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c4de:	4013      	ands	r3, r2
 800c4e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2b06      	cmp	r3, #6
 800c4e6:	d015      	beq.n	800c514 <HAL_TIM_OC_Start_IT+0x280>
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ee:	d011      	beq.n	800c514 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f042 0201 	orr.w	r2, r2, #1
 800c4fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c500:	e008      	b.n	800c514 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f042 0201 	orr.w	r2, r2, #1
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	e000      	b.n	800c516 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c514:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c516:	7bfb      	ldrb	r3, [r7, #15]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	40010000 	.word	0x40010000
 800c524:	40010400 	.word	0x40010400
 800c528:	40014000 	.word	0x40014000
 800c52c:	40014400 	.word	0x40014400
 800c530:	40014800 	.word	0x40014800
 800c534:	40000400 	.word	0x40000400
 800c538:	40000800 	.word	0x40000800
 800c53c:	40000c00 	.word	0x40000c00
 800c540:	40001800 	.word	0x40001800
 800c544:	00010007 	.word	0x00010007

0800c548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c556:	2301      	movs	r3, #1
 800c558:	e049      	b.n	800c5ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d106      	bne.n	800c574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 f841 	bl	800c5f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2202      	movs	r2, #2
 800c578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3304      	adds	r3, #4
 800c584:	4619      	mov	r1, r3
 800c586:	4610      	mov	r0, r2
 800c588:	f000 fc80 	bl	800ce8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b083      	sub	sp, #12
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c5fe:	bf00      	nop
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
	...

0800c60c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d109      	bne.n	800c630 <HAL_TIM_PWM_Start+0x24>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b01      	cmp	r3, #1
 800c626:	bf14      	ite	ne
 800c628:	2301      	movne	r3, #1
 800c62a:	2300      	moveq	r3, #0
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	e03c      	b.n	800c6aa <HAL_TIM_PWM_Start+0x9e>
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	2b04      	cmp	r3, #4
 800c634:	d109      	bne.n	800c64a <HAL_TIM_PWM_Start+0x3e>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b01      	cmp	r3, #1
 800c640:	bf14      	ite	ne
 800c642:	2301      	movne	r3, #1
 800c644:	2300      	moveq	r3, #0
 800c646:	b2db      	uxtb	r3, r3
 800c648:	e02f      	b.n	800c6aa <HAL_TIM_PWM_Start+0x9e>
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b08      	cmp	r3, #8
 800c64e:	d109      	bne.n	800c664 <HAL_TIM_PWM_Start+0x58>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b01      	cmp	r3, #1
 800c65a:	bf14      	ite	ne
 800c65c:	2301      	movne	r3, #1
 800c65e:	2300      	moveq	r3, #0
 800c660:	b2db      	uxtb	r3, r3
 800c662:	e022      	b.n	800c6aa <HAL_TIM_PWM_Start+0x9e>
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	2b0c      	cmp	r3, #12
 800c668:	d109      	bne.n	800c67e <HAL_TIM_PWM_Start+0x72>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b01      	cmp	r3, #1
 800c674:	bf14      	ite	ne
 800c676:	2301      	movne	r3, #1
 800c678:	2300      	moveq	r3, #0
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	e015      	b.n	800c6aa <HAL_TIM_PWM_Start+0x9e>
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b10      	cmp	r3, #16
 800c682:	d109      	bne.n	800c698 <HAL_TIM_PWM_Start+0x8c>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	bf14      	ite	ne
 800c690:	2301      	movne	r3, #1
 800c692:	2300      	moveq	r3, #0
 800c694:	b2db      	uxtb	r3, r3
 800c696:	e008      	b.n	800c6aa <HAL_TIM_PWM_Start+0x9e>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	bf14      	ite	ne
 800c6a4:	2301      	movne	r3, #1
 800c6a6:	2300      	moveq	r3, #0
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e0a1      	b.n	800c7f6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d104      	bne.n	800c6c2 <HAL_TIM_PWM_Start+0xb6>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6c0:	e023      	b.n	800c70a <HAL_TIM_PWM_Start+0xfe>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	d104      	bne.n	800c6d2 <HAL_TIM_PWM_Start+0xc6>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6d0:	e01b      	b.n	800c70a <HAL_TIM_PWM_Start+0xfe>
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	2b08      	cmp	r3, #8
 800c6d6:	d104      	bne.n	800c6e2 <HAL_TIM_PWM_Start+0xd6>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2202      	movs	r2, #2
 800c6dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6e0:	e013      	b.n	800c70a <HAL_TIM_PWM_Start+0xfe>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	2b0c      	cmp	r3, #12
 800c6e6:	d104      	bne.n	800c6f2 <HAL_TIM_PWM_Start+0xe6>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6f0:	e00b      	b.n	800c70a <HAL_TIM_PWM_Start+0xfe>
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2b10      	cmp	r3, #16
 800c6f6:	d104      	bne.n	800c702 <HAL_TIM_PWM_Start+0xf6>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c700:	e003      	b.n	800c70a <HAL_TIM_PWM_Start+0xfe>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2202      	movs	r2, #2
 800c706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2201      	movs	r2, #1
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	4618      	mov	r0, r3
 800c714:	f000 ffd4 	bl	800d6c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a38      	ldr	r2, [pc, #224]	; (800c800 <HAL_TIM_PWM_Start+0x1f4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d013      	beq.n	800c74a <HAL_TIM_PWM_Start+0x13e>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a37      	ldr	r2, [pc, #220]	; (800c804 <HAL_TIM_PWM_Start+0x1f8>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d00e      	beq.n	800c74a <HAL_TIM_PWM_Start+0x13e>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a35      	ldr	r2, [pc, #212]	; (800c808 <HAL_TIM_PWM_Start+0x1fc>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d009      	beq.n	800c74a <HAL_TIM_PWM_Start+0x13e>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a34      	ldr	r2, [pc, #208]	; (800c80c <HAL_TIM_PWM_Start+0x200>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d004      	beq.n	800c74a <HAL_TIM_PWM_Start+0x13e>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a32      	ldr	r2, [pc, #200]	; (800c810 <HAL_TIM_PWM_Start+0x204>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d101      	bne.n	800c74e <HAL_TIM_PWM_Start+0x142>
 800c74a:	2301      	movs	r3, #1
 800c74c:	e000      	b.n	800c750 <HAL_TIM_PWM_Start+0x144>
 800c74e:	2300      	movs	r3, #0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d007      	beq.n	800c764 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c762:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a25      	ldr	r2, [pc, #148]	; (800c800 <HAL_TIM_PWM_Start+0x1f4>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d022      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c776:	d01d      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a25      	ldr	r2, [pc, #148]	; (800c814 <HAL_TIM_PWM_Start+0x208>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d018      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a24      	ldr	r2, [pc, #144]	; (800c818 <HAL_TIM_PWM_Start+0x20c>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d013      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a22      	ldr	r2, [pc, #136]	; (800c81c <HAL_TIM_PWM_Start+0x210>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d00e      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a1a      	ldr	r2, [pc, #104]	; (800c804 <HAL_TIM_PWM_Start+0x1f8>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d009      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a1e      	ldr	r2, [pc, #120]	; (800c820 <HAL_TIM_PWM_Start+0x214>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d004      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a16      	ldr	r2, [pc, #88]	; (800c808 <HAL_TIM_PWM_Start+0x1fc>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d115      	bne.n	800c7e0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	689a      	ldr	r2, [r3, #8]
 800c7ba:	4b1a      	ldr	r3, [pc, #104]	; (800c824 <HAL_TIM_PWM_Start+0x218>)
 800c7bc:	4013      	ands	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2b06      	cmp	r3, #6
 800c7c4:	d015      	beq.n	800c7f2 <HAL_TIM_PWM_Start+0x1e6>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7cc:	d011      	beq.n	800c7f2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f042 0201 	orr.w	r2, r2, #1
 800c7dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7de:	e008      	b.n	800c7f2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f042 0201 	orr.w	r2, r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	e000      	b.n	800c7f4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	40010000 	.word	0x40010000
 800c804:	40010400 	.word	0x40010400
 800c808:	40014000 	.word	0x40014000
 800c80c:	40014400 	.word	0x40014400
 800c810:	40014800 	.word	0x40014800
 800c814:	40000400 	.word	0x40000400
 800c818:	40000800 	.word	0x40000800
 800c81c:	40000c00 	.word	0x40000c00
 800c820:	40001800 	.word	0x40001800
 800c824:	00010007 	.word	0x00010007

0800c828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	f003 0302 	and.w	r3, r3, #2
 800c846:	2b00      	cmp	r3, #0
 800c848:	d020      	beq.n	800c88c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d01b      	beq.n	800c88c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f06f 0202 	mvn.w	r2, #2
 800c85c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	f003 0303 	and.w	r3, r3, #3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d003      	beq.n	800c87a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 faec 	bl	800ce50 <HAL_TIM_IC_CaptureCallback>
 800c878:	e005      	b.n	800c886 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7f3 ff02 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 faef 	bl	800ce64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	f003 0304 	and.w	r3, r3, #4
 800c892:	2b00      	cmp	r3, #0
 800c894:	d020      	beq.n	800c8d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f003 0304 	and.w	r3, r3, #4
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d01b      	beq.n	800c8d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f06f 0204 	mvn.w	r2, #4
 800c8a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d003      	beq.n	800c8c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fac6 	bl	800ce50 <HAL_TIM_IC_CaptureCallback>
 800c8c4:	e005      	b.n	800c8d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7f3 fedc 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 fac9 	bl	800ce64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	f003 0308 	and.w	r3, r3, #8
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d020      	beq.n	800c924 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f003 0308 	and.w	r3, r3, #8
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d01b      	beq.n	800c924 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f06f 0208 	mvn.w	r2, #8
 800c8f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2204      	movs	r2, #4
 800c8fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	69db      	ldr	r3, [r3, #28]
 800c902:	f003 0303 	and.w	r3, r3, #3
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 faa0 	bl	800ce50 <HAL_TIM_IC_CaptureCallback>
 800c910:	e005      	b.n	800c91e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f7f3 feb6 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 faa3 	bl	800ce64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	f003 0310 	and.w	r3, r3, #16
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d020      	beq.n	800c970 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f003 0310 	and.w	r3, r3, #16
 800c934:	2b00      	cmp	r3, #0
 800c936:	d01b      	beq.n	800c970 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f06f 0210 	mvn.w	r2, #16
 800c940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2208      	movs	r2, #8
 800c946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	69db      	ldr	r3, [r3, #28]
 800c94e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c952:	2b00      	cmp	r3, #0
 800c954:	d003      	beq.n	800c95e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fa7a 	bl	800ce50 <HAL_TIM_IC_CaptureCallback>
 800c95c:	e005      	b.n	800c96a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f7f3 fe90 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fa7d 	bl	800ce64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00c      	beq.n	800c994 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	2b00      	cmp	r3, #0
 800c982:	d007      	beq.n	800c994 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f06f 0201 	mvn.w	r2, #1
 800c98c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7f5 faf4 	bl	8001f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d104      	bne.n	800c9a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00c      	beq.n	800c9c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d007      	beq.n	800c9c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c9ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 ffbb 	bl	800d938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00c      	beq.n	800c9e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d007      	beq.n	800c9e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c9de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 ffb3 	bl	800d94c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00c      	beq.n	800ca0a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d007      	beq.n	800ca0a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fa37 	bl	800ce78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	f003 0320 	and.w	r3, r3, #32
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00c      	beq.n	800ca2e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f003 0320 	and.w	r3, r3, #32
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d007      	beq.n	800ca2e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f06f 0220 	mvn.w	r2, #32
 800ca26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 ff7b 	bl	800d924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca2e:	bf00      	nop
 800ca30:	3710      	adds	r7, #16
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
	...

0800ca38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b086      	sub	sp, #24
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d101      	bne.n	800ca56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ca52:	2302      	movs	r3, #2
 800ca54:	e0ff      	b.n	800cc56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b14      	cmp	r3, #20
 800ca62:	f200 80f0 	bhi.w	800cc46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca66:	a201      	add	r2, pc, #4	; (adr r2, 800ca6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6c:	0800cac1 	.word	0x0800cac1
 800ca70:	0800cc47 	.word	0x0800cc47
 800ca74:	0800cc47 	.word	0x0800cc47
 800ca78:	0800cc47 	.word	0x0800cc47
 800ca7c:	0800cb01 	.word	0x0800cb01
 800ca80:	0800cc47 	.word	0x0800cc47
 800ca84:	0800cc47 	.word	0x0800cc47
 800ca88:	0800cc47 	.word	0x0800cc47
 800ca8c:	0800cb43 	.word	0x0800cb43
 800ca90:	0800cc47 	.word	0x0800cc47
 800ca94:	0800cc47 	.word	0x0800cc47
 800ca98:	0800cc47 	.word	0x0800cc47
 800ca9c:	0800cb83 	.word	0x0800cb83
 800caa0:	0800cc47 	.word	0x0800cc47
 800caa4:	0800cc47 	.word	0x0800cc47
 800caa8:	0800cc47 	.word	0x0800cc47
 800caac:	0800cbc5 	.word	0x0800cbc5
 800cab0:	0800cc47 	.word	0x0800cc47
 800cab4:	0800cc47 	.word	0x0800cc47
 800cab8:	0800cc47 	.word	0x0800cc47
 800cabc:	0800cc05 	.word	0x0800cc05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	68b9      	ldr	r1, [r7, #8]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 fa86 	bl	800cfd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	699a      	ldr	r2, [r3, #24]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f042 0208 	orr.w	r2, r2, #8
 800cada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	699a      	ldr	r2, [r3, #24]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f022 0204 	bic.w	r2, r2, #4
 800caea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	6999      	ldr	r1, [r3, #24]
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	691a      	ldr	r2, [r3, #16]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	430a      	orrs	r2, r1
 800cafc:	619a      	str	r2, [r3, #24]
      break;
 800cafe:	e0a5      	b.n	800cc4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68b9      	ldr	r1, [r7, #8]
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 faf6 	bl	800d0f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	699a      	ldr	r2, [r3, #24]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	699a      	ldr	r2, [r3, #24]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	6999      	ldr	r1, [r3, #24]
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	691b      	ldr	r3, [r3, #16]
 800cb36:	021a      	lsls	r2, r3, #8
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	430a      	orrs	r2, r1
 800cb3e:	619a      	str	r2, [r3, #24]
      break;
 800cb40:	e084      	b.n	800cc4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68b9      	ldr	r1, [r7, #8]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f000 fb5f 	bl	800d20c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	69da      	ldr	r2, [r3, #28]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f042 0208 	orr.w	r2, r2, #8
 800cb5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	69da      	ldr	r2, [r3, #28]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f022 0204 	bic.w	r2, r2, #4
 800cb6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	69d9      	ldr	r1, [r3, #28]
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	691a      	ldr	r2, [r3, #16]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	61da      	str	r2, [r3, #28]
      break;
 800cb80:	e064      	b.n	800cc4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	68b9      	ldr	r1, [r7, #8]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 fbc7 	bl	800d31c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	69da      	ldr	r2, [r3, #28]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	69da      	ldr	r2, [r3, #28]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	69d9      	ldr	r1, [r3, #28]
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	021a      	lsls	r2, r3, #8
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	61da      	str	r2, [r3, #28]
      break;
 800cbc2:	e043      	b.n	800cc4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68b9      	ldr	r1, [r7, #8]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 fc10 	bl	800d3f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f042 0208 	orr.w	r2, r2, #8
 800cbde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f022 0204 	bic.w	r2, r2, #4
 800cbee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	691a      	ldr	r2, [r3, #16]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	430a      	orrs	r2, r1
 800cc00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc02:	e023      	b.n	800cc4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68b9      	ldr	r1, [r7, #8]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 fc54 	bl	800d4b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	021a      	lsls	r2, r3, #8
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	430a      	orrs	r2, r1
 800cc42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc44:	e002      	b.n	800cc4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	75fb      	strb	r3, [r7, #23]
      break;
 800cc4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc54:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop

0800cc60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d101      	bne.n	800cc7c <HAL_TIM_ConfigClockSource+0x1c>
 800cc78:	2302      	movs	r3, #2
 800cc7a:	e0dc      	b.n	800ce36 <HAL_TIM_ConfigClockSource+0x1d6>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2202      	movs	r2, #2
 800cc88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	4b6a      	ldr	r3, [pc, #424]	; (800ce40 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cc98:	4013      	ands	r3, r2
 800cc9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a64      	ldr	r2, [pc, #400]	; (800ce44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	f000 80a9 	beq.w	800ce0a <HAL_TIM_ConfigClockSource+0x1aa>
 800ccb8:	4a62      	ldr	r2, [pc, #392]	; (800ce44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	f200 80ae 	bhi.w	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800ccc0:	4a61      	ldr	r2, [pc, #388]	; (800ce48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	f000 80a1 	beq.w	800ce0a <HAL_TIM_ConfigClockSource+0x1aa>
 800ccc8:	4a5f      	ldr	r2, [pc, #380]	; (800ce48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	f200 80a6 	bhi.w	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800ccd0:	4a5e      	ldr	r2, [pc, #376]	; (800ce4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	f000 8099 	beq.w	800ce0a <HAL_TIM_ConfigClockSource+0x1aa>
 800ccd8:	4a5c      	ldr	r2, [pc, #368]	; (800ce4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	f200 809e 	bhi.w	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cce0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cce4:	f000 8091 	beq.w	800ce0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cce8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ccec:	f200 8096 	bhi.w	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800ccf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccf4:	f000 8089 	beq.w	800ce0a <HAL_TIM_ConfigClockSource+0x1aa>
 800ccf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccfc:	f200 808e 	bhi.w	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cd00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd04:	d03e      	beq.n	800cd84 <HAL_TIM_ConfigClockSource+0x124>
 800cd06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd0a:	f200 8087 	bhi.w	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cd0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd12:	f000 8086 	beq.w	800ce22 <HAL_TIM_ConfigClockSource+0x1c2>
 800cd16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd1a:	d87f      	bhi.n	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cd1c:	2b70      	cmp	r3, #112	; 0x70
 800cd1e:	d01a      	beq.n	800cd56 <HAL_TIM_ConfigClockSource+0xf6>
 800cd20:	2b70      	cmp	r3, #112	; 0x70
 800cd22:	d87b      	bhi.n	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cd24:	2b60      	cmp	r3, #96	; 0x60
 800cd26:	d050      	beq.n	800cdca <HAL_TIM_ConfigClockSource+0x16a>
 800cd28:	2b60      	cmp	r3, #96	; 0x60
 800cd2a:	d877      	bhi.n	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cd2c:	2b50      	cmp	r3, #80	; 0x50
 800cd2e:	d03c      	beq.n	800cdaa <HAL_TIM_ConfigClockSource+0x14a>
 800cd30:	2b50      	cmp	r3, #80	; 0x50
 800cd32:	d873      	bhi.n	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cd34:	2b40      	cmp	r3, #64	; 0x40
 800cd36:	d058      	beq.n	800cdea <HAL_TIM_ConfigClockSource+0x18a>
 800cd38:	2b40      	cmp	r3, #64	; 0x40
 800cd3a:	d86f      	bhi.n	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cd3c:	2b30      	cmp	r3, #48	; 0x30
 800cd3e:	d064      	beq.n	800ce0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cd40:	2b30      	cmp	r3, #48	; 0x30
 800cd42:	d86b      	bhi.n	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cd44:	2b20      	cmp	r3, #32
 800cd46:	d060      	beq.n	800ce0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cd48:	2b20      	cmp	r3, #32
 800cd4a:	d867      	bhi.n	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d05c      	beq.n	800ce0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cd50:	2b10      	cmp	r3, #16
 800cd52:	d05a      	beq.n	800ce0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cd54:	e062      	b.n	800ce1c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6818      	ldr	r0, [r3, #0]
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	6899      	ldr	r1, [r3, #8]
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	f000 fc8b 	bl	800d680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cd78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	609a      	str	r2, [r3, #8]
      break;
 800cd82:	e04f      	b.n	800ce24 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6818      	ldr	r0, [r3, #0]
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	6899      	ldr	r1, [r3, #8]
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	685a      	ldr	r2, [r3, #4]
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	f000 fc74 	bl	800d680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	689a      	ldr	r2, [r3, #8]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cda6:	609a      	str	r2, [r3, #8]
      break;
 800cda8:	e03c      	b.n	800ce24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6818      	ldr	r0, [r3, #0]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	6859      	ldr	r1, [r3, #4]
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	f000 fbe4 	bl	800d584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2150      	movs	r1, #80	; 0x50
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 fc3e 	bl	800d644 <TIM_ITRx_SetConfig>
      break;
 800cdc8:	e02c      	b.n	800ce24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6818      	ldr	r0, [r3, #0]
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	6859      	ldr	r1, [r3, #4]
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f000 fc03 	bl	800d5e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2160      	movs	r1, #96	; 0x60
 800cde2:	4618      	mov	r0, r3
 800cde4:	f000 fc2e 	bl	800d644 <TIM_ITRx_SetConfig>
      break;
 800cde8:	e01c      	b.n	800ce24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	6859      	ldr	r1, [r3, #4]
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	f000 fbc4 	bl	800d584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2140      	movs	r1, #64	; 0x40
 800ce02:	4618      	mov	r0, r3
 800ce04:	f000 fc1e 	bl	800d644 <TIM_ITRx_SetConfig>
      break;
 800ce08:	e00c      	b.n	800ce24 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4619      	mov	r1, r3
 800ce14:	4610      	mov	r0, r2
 800ce16:	f000 fc15 	bl	800d644 <TIM_ITRx_SetConfig>
      break;
 800ce1a:	e003      	b.n	800ce24 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ce20:	e000      	b.n	800ce24 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ce22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	ffceff88 	.word	0xffceff88
 800ce44:	00100040 	.word	0x00100040
 800ce48:	00100030 	.word	0x00100030
 800ce4c:	00100020 	.word	0x00100020

0800ce50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce58:	bf00      	nop
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ce6c:	bf00      	nop
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce80:	bf00      	nop
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4a46      	ldr	r2, [pc, #280]	; (800cfb8 <TIM_Base_SetConfig+0x12c>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d013      	beq.n	800cecc <TIM_Base_SetConfig+0x40>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceaa:	d00f      	beq.n	800cecc <TIM_Base_SetConfig+0x40>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4a43      	ldr	r2, [pc, #268]	; (800cfbc <TIM_Base_SetConfig+0x130>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d00b      	beq.n	800cecc <TIM_Base_SetConfig+0x40>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4a42      	ldr	r2, [pc, #264]	; (800cfc0 <TIM_Base_SetConfig+0x134>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d007      	beq.n	800cecc <TIM_Base_SetConfig+0x40>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4a41      	ldr	r2, [pc, #260]	; (800cfc4 <TIM_Base_SetConfig+0x138>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d003      	beq.n	800cecc <TIM_Base_SetConfig+0x40>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	4a40      	ldr	r2, [pc, #256]	; (800cfc8 <TIM_Base_SetConfig+0x13c>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d108      	bne.n	800cede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ced2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4a35      	ldr	r2, [pc, #212]	; (800cfb8 <TIM_Base_SetConfig+0x12c>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d01f      	beq.n	800cf26 <TIM_Base_SetConfig+0x9a>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceec:	d01b      	beq.n	800cf26 <TIM_Base_SetConfig+0x9a>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4a32      	ldr	r2, [pc, #200]	; (800cfbc <TIM_Base_SetConfig+0x130>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d017      	beq.n	800cf26 <TIM_Base_SetConfig+0x9a>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a31      	ldr	r2, [pc, #196]	; (800cfc0 <TIM_Base_SetConfig+0x134>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d013      	beq.n	800cf26 <TIM_Base_SetConfig+0x9a>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a30      	ldr	r2, [pc, #192]	; (800cfc4 <TIM_Base_SetConfig+0x138>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d00f      	beq.n	800cf26 <TIM_Base_SetConfig+0x9a>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a2f      	ldr	r2, [pc, #188]	; (800cfc8 <TIM_Base_SetConfig+0x13c>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d00b      	beq.n	800cf26 <TIM_Base_SetConfig+0x9a>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a2e      	ldr	r2, [pc, #184]	; (800cfcc <TIM_Base_SetConfig+0x140>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d007      	beq.n	800cf26 <TIM_Base_SetConfig+0x9a>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4a2d      	ldr	r2, [pc, #180]	; (800cfd0 <TIM_Base_SetConfig+0x144>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d003      	beq.n	800cf26 <TIM_Base_SetConfig+0x9a>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a2c      	ldr	r2, [pc, #176]	; (800cfd4 <TIM_Base_SetConfig+0x148>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d108      	bne.n	800cf38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	695b      	ldr	r3, [r3, #20]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	689a      	ldr	r2, [r3, #8]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4a16      	ldr	r2, [pc, #88]	; (800cfb8 <TIM_Base_SetConfig+0x12c>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d00f      	beq.n	800cf84 <TIM_Base_SetConfig+0xf8>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4a18      	ldr	r2, [pc, #96]	; (800cfc8 <TIM_Base_SetConfig+0x13c>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d00b      	beq.n	800cf84 <TIM_Base_SetConfig+0xf8>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	4a17      	ldr	r2, [pc, #92]	; (800cfcc <TIM_Base_SetConfig+0x140>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d007      	beq.n	800cf84 <TIM_Base_SetConfig+0xf8>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4a16      	ldr	r2, [pc, #88]	; (800cfd0 <TIM_Base_SetConfig+0x144>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d003      	beq.n	800cf84 <TIM_Base_SetConfig+0xf8>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a15      	ldr	r2, [pc, #84]	; (800cfd4 <TIM_Base_SetConfig+0x148>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d103      	bne.n	800cf8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	691a      	ldr	r2, [r3, #16]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d105      	bne.n	800cfaa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	f023 0201 	bic.w	r2, r3, #1
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	611a      	str	r2, [r3, #16]
  }
}
 800cfaa:	bf00      	nop
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	40010000 	.word	0x40010000
 800cfbc:	40000400 	.word	0x40000400
 800cfc0:	40000800 	.word	0x40000800
 800cfc4:	40000c00 	.word	0x40000c00
 800cfc8:	40010400 	.word	0x40010400
 800cfcc:	40014000 	.word	0x40014000
 800cfd0:	40014400 	.word	0x40014400
 800cfd4:	40014800 	.word	0x40014800

0800cfd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b087      	sub	sp, #28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6a1b      	ldr	r3, [r3, #32]
 800cfe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6a1b      	ldr	r3, [r3, #32]
 800cfec:	f023 0201 	bic.w	r2, r3, #1
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	699b      	ldr	r3, [r3, #24]
 800cffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	4b37      	ldr	r3, [pc, #220]	; (800d0e0 <TIM_OC1_SetConfig+0x108>)
 800d004:	4013      	ands	r3, r2
 800d006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f023 0303 	bic.w	r3, r3, #3
 800d00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	4313      	orrs	r3, r2
 800d018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f023 0302 	bic.w	r3, r3, #2
 800d020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	697a      	ldr	r2, [r7, #20]
 800d028:	4313      	orrs	r3, r2
 800d02a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a2d      	ldr	r2, [pc, #180]	; (800d0e4 <TIM_OC1_SetConfig+0x10c>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d00f      	beq.n	800d054 <TIM_OC1_SetConfig+0x7c>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a2c      	ldr	r2, [pc, #176]	; (800d0e8 <TIM_OC1_SetConfig+0x110>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d00b      	beq.n	800d054 <TIM_OC1_SetConfig+0x7c>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a2b      	ldr	r2, [pc, #172]	; (800d0ec <TIM_OC1_SetConfig+0x114>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d007      	beq.n	800d054 <TIM_OC1_SetConfig+0x7c>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4a2a      	ldr	r2, [pc, #168]	; (800d0f0 <TIM_OC1_SetConfig+0x118>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d003      	beq.n	800d054 <TIM_OC1_SetConfig+0x7c>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4a29      	ldr	r2, [pc, #164]	; (800d0f4 <TIM_OC1_SetConfig+0x11c>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d10c      	bne.n	800d06e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	f023 0308 	bic.w	r3, r3, #8
 800d05a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	697a      	ldr	r2, [r7, #20]
 800d062:	4313      	orrs	r3, r2
 800d064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	f023 0304 	bic.w	r3, r3, #4
 800d06c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4a1c      	ldr	r2, [pc, #112]	; (800d0e4 <TIM_OC1_SetConfig+0x10c>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d00f      	beq.n	800d096 <TIM_OC1_SetConfig+0xbe>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a1b      	ldr	r2, [pc, #108]	; (800d0e8 <TIM_OC1_SetConfig+0x110>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d00b      	beq.n	800d096 <TIM_OC1_SetConfig+0xbe>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a1a      	ldr	r2, [pc, #104]	; (800d0ec <TIM_OC1_SetConfig+0x114>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d007      	beq.n	800d096 <TIM_OC1_SetConfig+0xbe>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4a19      	ldr	r2, [pc, #100]	; (800d0f0 <TIM_OC1_SetConfig+0x118>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d003      	beq.n	800d096 <TIM_OC1_SetConfig+0xbe>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	4a18      	ldr	r2, [pc, #96]	; (800d0f4 <TIM_OC1_SetConfig+0x11c>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d111      	bne.n	800d0ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d09c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	695b      	ldr	r3, [r3, #20]
 800d0aa:	693a      	ldr	r2, [r7, #16]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	699b      	ldr	r3, [r3, #24]
 800d0b4:	693a      	ldr	r2, [r7, #16]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	693a      	ldr	r2, [r7, #16]
 800d0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	685a      	ldr	r2, [r3, #4]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	621a      	str	r2, [r3, #32]
}
 800d0d4:	bf00      	nop
 800d0d6:	371c      	adds	r7, #28
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	fffeff8f 	.word	0xfffeff8f
 800d0e4:	40010000 	.word	0x40010000
 800d0e8:	40010400 	.word	0x40010400
 800d0ec:	40014000 	.word	0x40014000
 800d0f0:	40014400 	.word	0x40014400
 800d0f4:	40014800 	.word	0x40014800

0800d0f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b087      	sub	sp, #28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6a1b      	ldr	r3, [r3, #32]
 800d10c:	f023 0210 	bic.w	r2, r3, #16
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	4b34      	ldr	r3, [pc, #208]	; (800d1f4 <TIM_OC2_SetConfig+0xfc>)
 800d124:	4013      	ands	r3, r2
 800d126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d12e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	021b      	lsls	r3, r3, #8
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	4313      	orrs	r3, r2
 800d13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	f023 0320 	bic.w	r3, r3, #32
 800d142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	011b      	lsls	r3, r3, #4
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	4313      	orrs	r3, r2
 800d14e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a29      	ldr	r2, [pc, #164]	; (800d1f8 <TIM_OC2_SetConfig+0x100>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d003      	beq.n	800d160 <TIM_OC2_SetConfig+0x68>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a28      	ldr	r2, [pc, #160]	; (800d1fc <TIM_OC2_SetConfig+0x104>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d10d      	bne.n	800d17c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	011b      	lsls	r3, r3, #4
 800d16e:	697a      	ldr	r2, [r7, #20]
 800d170:	4313      	orrs	r3, r2
 800d172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d17a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4a1e      	ldr	r2, [pc, #120]	; (800d1f8 <TIM_OC2_SetConfig+0x100>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d00f      	beq.n	800d1a4 <TIM_OC2_SetConfig+0xac>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4a1d      	ldr	r2, [pc, #116]	; (800d1fc <TIM_OC2_SetConfig+0x104>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d00b      	beq.n	800d1a4 <TIM_OC2_SetConfig+0xac>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	4a1c      	ldr	r2, [pc, #112]	; (800d200 <TIM_OC2_SetConfig+0x108>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d007      	beq.n	800d1a4 <TIM_OC2_SetConfig+0xac>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	4a1b      	ldr	r2, [pc, #108]	; (800d204 <TIM_OC2_SetConfig+0x10c>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d003      	beq.n	800d1a4 <TIM_OC2_SetConfig+0xac>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4a1a      	ldr	r2, [pc, #104]	; (800d208 <TIM_OC2_SetConfig+0x110>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d113      	bne.n	800d1cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d1aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	695b      	ldr	r3, [r3, #20]
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	699b      	ldr	r3, [r3, #24]
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	693a      	ldr	r2, [r7, #16]
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	693a      	ldr	r2, [r7, #16]
 800d1d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	621a      	str	r2, [r3, #32]
}
 800d1e6:	bf00      	nop
 800d1e8:	371c      	adds	r7, #28
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	feff8fff 	.word	0xfeff8fff
 800d1f8:	40010000 	.word	0x40010000
 800d1fc:	40010400 	.word	0x40010400
 800d200:	40014000 	.word	0x40014000
 800d204:	40014400 	.word	0x40014400
 800d208:	40014800 	.word	0x40014800

0800d20c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b087      	sub	sp, #28
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a1b      	ldr	r3, [r3, #32]
 800d21a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	69db      	ldr	r3, [r3, #28]
 800d232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	4b33      	ldr	r3, [pc, #204]	; (800d304 <TIM_OC3_SetConfig+0xf8>)
 800d238:	4013      	ands	r3, r2
 800d23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f023 0303 	bic.w	r3, r3, #3
 800d242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	4313      	orrs	r3, r2
 800d24c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	021b      	lsls	r3, r3, #8
 800d25c:	697a      	ldr	r2, [r7, #20]
 800d25e:	4313      	orrs	r3, r2
 800d260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a28      	ldr	r2, [pc, #160]	; (800d308 <TIM_OC3_SetConfig+0xfc>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d003      	beq.n	800d272 <TIM_OC3_SetConfig+0x66>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a27      	ldr	r2, [pc, #156]	; (800d30c <TIM_OC3_SetConfig+0x100>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d10d      	bne.n	800d28e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	021b      	lsls	r3, r3, #8
 800d280:	697a      	ldr	r2, [r7, #20]
 800d282:	4313      	orrs	r3, r2
 800d284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d28c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4a1d      	ldr	r2, [pc, #116]	; (800d308 <TIM_OC3_SetConfig+0xfc>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d00f      	beq.n	800d2b6 <TIM_OC3_SetConfig+0xaa>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4a1c      	ldr	r2, [pc, #112]	; (800d30c <TIM_OC3_SetConfig+0x100>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d00b      	beq.n	800d2b6 <TIM_OC3_SetConfig+0xaa>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a1b      	ldr	r2, [pc, #108]	; (800d310 <TIM_OC3_SetConfig+0x104>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d007      	beq.n	800d2b6 <TIM_OC3_SetConfig+0xaa>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4a1a      	ldr	r2, [pc, #104]	; (800d314 <TIM_OC3_SetConfig+0x108>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d003      	beq.n	800d2b6 <TIM_OC3_SetConfig+0xaa>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4a19      	ldr	r2, [pc, #100]	; (800d318 <TIM_OC3_SetConfig+0x10c>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d113      	bne.n	800d2de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	695b      	ldr	r3, [r3, #20]
 800d2ca:	011b      	lsls	r3, r3, #4
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	699b      	ldr	r3, [r3, #24]
 800d2d6:	011b      	lsls	r3, r3, #4
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	693a      	ldr	r2, [r7, #16]
 800d2e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	697a      	ldr	r2, [r7, #20]
 800d2f6:	621a      	str	r2, [r3, #32]
}
 800d2f8:	bf00      	nop
 800d2fa:	371c      	adds	r7, #28
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr
 800d304:	fffeff8f 	.word	0xfffeff8f
 800d308:	40010000 	.word	0x40010000
 800d30c:	40010400 	.word	0x40010400
 800d310:	40014000 	.word	0x40014000
 800d314:	40014400 	.word	0x40014400
 800d318:	40014800 	.word	0x40014800

0800d31c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b087      	sub	sp, #28
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a1b      	ldr	r3, [r3, #32]
 800d330:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	4b24      	ldr	r3, [pc, #144]	; (800d3d8 <TIM_OC4_SetConfig+0xbc>)
 800d348:	4013      	ands	r3, r2
 800d34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	021b      	lsls	r3, r3, #8
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	4313      	orrs	r3, r2
 800d35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	031b      	lsls	r3, r3, #12
 800d36e:	693a      	ldr	r2, [r7, #16]
 800d370:	4313      	orrs	r3, r2
 800d372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a19      	ldr	r2, [pc, #100]	; (800d3dc <TIM_OC4_SetConfig+0xc0>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d00f      	beq.n	800d39c <TIM_OC4_SetConfig+0x80>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a18      	ldr	r2, [pc, #96]	; (800d3e0 <TIM_OC4_SetConfig+0xc4>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d00b      	beq.n	800d39c <TIM_OC4_SetConfig+0x80>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4a17      	ldr	r2, [pc, #92]	; (800d3e4 <TIM_OC4_SetConfig+0xc8>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d007      	beq.n	800d39c <TIM_OC4_SetConfig+0x80>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4a16      	ldr	r2, [pc, #88]	; (800d3e8 <TIM_OC4_SetConfig+0xcc>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d003      	beq.n	800d39c <TIM_OC4_SetConfig+0x80>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a15      	ldr	r2, [pc, #84]	; (800d3ec <TIM_OC4_SetConfig+0xd0>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d109      	bne.n	800d3b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	695b      	ldr	r3, [r3, #20]
 800d3a8:	019b      	lsls	r3, r3, #6
 800d3aa:	697a      	ldr	r2, [r7, #20]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	697a      	ldr	r2, [r7, #20]
 800d3b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	68fa      	ldr	r2, [r7, #12]
 800d3ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	685a      	ldr	r2, [r3, #4]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	621a      	str	r2, [r3, #32]
}
 800d3ca:	bf00      	nop
 800d3cc:	371c      	adds	r7, #28
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	feff8fff 	.word	0xfeff8fff
 800d3dc:	40010000 	.word	0x40010000
 800d3e0:	40010400 	.word	0x40010400
 800d3e4:	40014000 	.word	0x40014000
 800d3e8:	40014400 	.word	0x40014400
 800d3ec:	40014800 	.word	0x40014800

0800d3f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b087      	sub	sp, #28
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a1b      	ldr	r3, [r3, #32]
 800d404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	4b21      	ldr	r3, [pc, #132]	; (800d4a0 <TIM_OC5_SetConfig+0xb0>)
 800d41c:	4013      	ands	r3, r2
 800d41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	4313      	orrs	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	041b      	lsls	r3, r3, #16
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a18      	ldr	r2, [pc, #96]	; (800d4a4 <TIM_OC5_SetConfig+0xb4>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d00f      	beq.n	800d466 <TIM_OC5_SetConfig+0x76>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a17      	ldr	r2, [pc, #92]	; (800d4a8 <TIM_OC5_SetConfig+0xb8>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d00b      	beq.n	800d466 <TIM_OC5_SetConfig+0x76>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a16      	ldr	r2, [pc, #88]	; (800d4ac <TIM_OC5_SetConfig+0xbc>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d007      	beq.n	800d466 <TIM_OC5_SetConfig+0x76>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a15      	ldr	r2, [pc, #84]	; (800d4b0 <TIM_OC5_SetConfig+0xc0>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d003      	beq.n	800d466 <TIM_OC5_SetConfig+0x76>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a14      	ldr	r2, [pc, #80]	; (800d4b4 <TIM_OC5_SetConfig+0xc4>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d109      	bne.n	800d47a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d46c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	695b      	ldr	r3, [r3, #20]
 800d472:	021b      	lsls	r3, r3, #8
 800d474:	697a      	ldr	r2, [r7, #20]
 800d476:	4313      	orrs	r3, r2
 800d478:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	697a      	ldr	r2, [r7, #20]
 800d47e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	685a      	ldr	r2, [r3, #4]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	621a      	str	r2, [r3, #32]
}
 800d494:	bf00      	nop
 800d496:	371c      	adds	r7, #28
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr
 800d4a0:	fffeff8f 	.word	0xfffeff8f
 800d4a4:	40010000 	.word	0x40010000
 800d4a8:	40010400 	.word	0x40010400
 800d4ac:	40014000 	.word	0x40014000
 800d4b0:	40014400 	.word	0x40014400
 800d4b4:	40014800 	.word	0x40014800

0800d4b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b087      	sub	sp, #28
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a1b      	ldr	r3, [r3, #32]
 800d4cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	4b22      	ldr	r3, [pc, #136]	; (800d56c <TIM_OC6_SetConfig+0xb4>)
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	021b      	lsls	r3, r3, #8
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d4fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	051b      	lsls	r3, r3, #20
 800d502:	693a      	ldr	r2, [r7, #16]
 800d504:	4313      	orrs	r3, r2
 800d506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a19      	ldr	r2, [pc, #100]	; (800d570 <TIM_OC6_SetConfig+0xb8>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d00f      	beq.n	800d530 <TIM_OC6_SetConfig+0x78>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4a18      	ldr	r2, [pc, #96]	; (800d574 <TIM_OC6_SetConfig+0xbc>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d00b      	beq.n	800d530 <TIM_OC6_SetConfig+0x78>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a17      	ldr	r2, [pc, #92]	; (800d578 <TIM_OC6_SetConfig+0xc0>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d007      	beq.n	800d530 <TIM_OC6_SetConfig+0x78>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a16      	ldr	r2, [pc, #88]	; (800d57c <TIM_OC6_SetConfig+0xc4>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d003      	beq.n	800d530 <TIM_OC6_SetConfig+0x78>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4a15      	ldr	r2, [pc, #84]	; (800d580 <TIM_OC6_SetConfig+0xc8>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d109      	bne.n	800d544 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d536:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	695b      	ldr	r3, [r3, #20]
 800d53c:	029b      	lsls	r3, r3, #10
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	4313      	orrs	r3, r2
 800d542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	697a      	ldr	r2, [r7, #20]
 800d548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	68fa      	ldr	r2, [r7, #12]
 800d54e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	685a      	ldr	r2, [r3, #4]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	693a      	ldr	r2, [r7, #16]
 800d55c:	621a      	str	r2, [r3, #32]
}
 800d55e:	bf00      	nop
 800d560:	371c      	adds	r7, #28
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	feff8fff 	.word	0xfeff8fff
 800d570:	40010000 	.word	0x40010000
 800d574:	40010400 	.word	0x40010400
 800d578:	40014000 	.word	0x40014000
 800d57c:	40014400 	.word	0x40014400
 800d580:	40014800 	.word	0x40014800

0800d584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d584:	b480      	push	{r7}
 800d586:	b087      	sub	sp, #28
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6a1b      	ldr	r3, [r3, #32]
 800d594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6a1b      	ldr	r3, [r3, #32]
 800d59a:	f023 0201 	bic.w	r2, r3, #1
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d5ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	011b      	lsls	r3, r3, #4
 800d5b4:	693a      	ldr	r2, [r7, #16]
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	f023 030a 	bic.w	r3, r3, #10
 800d5c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d5c2:	697a      	ldr	r2, [r7, #20]
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	693a      	ldr	r2, [r7, #16]
 800d5ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	621a      	str	r2, [r3, #32]
}
 800d5d6:	bf00      	nop
 800d5d8:	371c      	adds	r7, #28
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b087      	sub	sp, #28
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	60f8      	str	r0, [r7, #12]
 800d5ea:	60b9      	str	r1, [r7, #8]
 800d5ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6a1b      	ldr	r3, [r3, #32]
 800d5f8:	f023 0210 	bic.w	r2, r3, #16
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	699b      	ldr	r3, [r3, #24]
 800d604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d60c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	031b      	lsls	r3, r3, #12
 800d612:	693a      	ldr	r2, [r7, #16]
 800d614:	4313      	orrs	r3, r2
 800d616:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d61e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	011b      	lsls	r3, r3, #4
 800d624:	697a      	ldr	r2, [r7, #20]
 800d626:	4313      	orrs	r3, r2
 800d628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	693a      	ldr	r2, [r7, #16]
 800d62e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	697a      	ldr	r2, [r7, #20]
 800d634:	621a      	str	r2, [r3, #32]
}
 800d636:	bf00      	nop
 800d638:	371c      	adds	r7, #28
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
	...

0800d644 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	4b09      	ldr	r3, [pc, #36]	; (800d67c <TIM_ITRx_SetConfig+0x38>)
 800d658:	4013      	ands	r3, r2
 800d65a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d65c:	683a      	ldr	r2, [r7, #0]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	4313      	orrs	r3, r2
 800d662:	f043 0307 	orr.w	r3, r3, #7
 800d666:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	609a      	str	r2, [r3, #8]
}
 800d66e:	bf00      	nop
 800d670:	3714      	adds	r7, #20
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	ffcfff8f 	.word	0xffcfff8f

0800d680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d680:	b480      	push	{r7}
 800d682:	b087      	sub	sp, #28
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	607a      	str	r2, [r7, #4]
 800d68c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d69a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	021a      	lsls	r2, r3, #8
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	431a      	orrs	r2, r3
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	697a      	ldr	r2, [r7, #20]
 800d6b2:	609a      	str	r2, [r3, #8]
}
 800d6b4:	bf00      	nop
 800d6b6:	371c      	adds	r7, #28
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b087      	sub	sp, #28
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	f003 031f 	and.w	r3, r3, #31
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d6d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6a1a      	ldr	r2, [r3, #32]
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	43db      	mvns	r3, r3
 800d6e2:	401a      	ands	r2, r3
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	6a1a      	ldr	r2, [r3, #32]
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	f003 031f 	and.w	r3, r3, #31
 800d6f2:	6879      	ldr	r1, [r7, #4]
 800d6f4:	fa01 f303 	lsl.w	r3, r1, r3
 800d6f8:	431a      	orrs	r2, r3
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	621a      	str	r2, [r3, #32]
}
 800d6fe:	bf00      	nop
 800d700:	371c      	adds	r7, #28
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
	...

0800d70c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d101      	bne.n	800d724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d720:	2302      	movs	r3, #2
 800d722:	e06d      	b.n	800d800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2202      	movs	r2, #2
 800d730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a30      	ldr	r2, [pc, #192]	; (800d80c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d004      	beq.n	800d758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4a2f      	ldr	r2, [pc, #188]	; (800d810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d108      	bne.n	800d76a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d75e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	4313      	orrs	r3, r2
 800d768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d770:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	4313      	orrs	r3, r2
 800d77a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a20      	ldr	r2, [pc, #128]	; (800d80c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d022      	beq.n	800d7d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d796:	d01d      	beq.n	800d7d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a1d      	ldr	r2, [pc, #116]	; (800d814 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d018      	beq.n	800d7d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a1c      	ldr	r2, [pc, #112]	; (800d818 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d013      	beq.n	800d7d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a1a      	ldr	r2, [pc, #104]	; (800d81c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d00e      	beq.n	800d7d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a15      	ldr	r2, [pc, #84]	; (800d810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d009      	beq.n	800d7d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a16      	ldr	r2, [pc, #88]	; (800d820 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d004      	beq.n	800d7d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a15      	ldr	r2, [pc, #84]	; (800d824 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d10c      	bne.n	800d7ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	68ba      	ldr	r2, [r7, #8]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	40010000 	.word	0x40010000
 800d810:	40010400 	.word	0x40010400
 800d814:	40000400 	.word	0x40000400
 800d818:	40000800 	.word	0x40000800
 800d81c:	40000c00 	.word	0x40000c00
 800d820:	40001800 	.word	0x40001800
 800d824:	40014000 	.word	0x40014000

0800d828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d832:	2300      	movs	r3, #0
 800d834:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d101      	bne.n	800d844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d840:	2302      	movs	r3, #2
 800d842:	e065      	b.n	800d910 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	4313      	orrs	r3, r2
 800d858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	4313      	orrs	r3, r2
 800d866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	4313      	orrs	r3, r2
 800d874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4313      	orrs	r3, r2
 800d882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	691b      	ldr	r3, [r3, #16]
 800d88e:	4313      	orrs	r3, r2
 800d890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	695b      	ldr	r3, [r3, #20]
 800d89c:	4313      	orrs	r3, r2
 800d89e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	699b      	ldr	r3, [r3, #24]
 800d8b8:	041b      	lsls	r3, r3, #16
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a16      	ldr	r2, [pc, #88]	; (800d91c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d004      	beq.n	800d8d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a14      	ldr	r2, [pc, #80]	; (800d920 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d115      	bne.n	800d8fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8dc:	051b      	lsls	r3, r3, #20
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	69db      	ldr	r3, [r3, #28]
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3714      	adds	r7, #20
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr
 800d91c:	40010000 	.word	0x40010000
 800d920:	40010400 	.word	0x40010400

0800d924 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d92c:	bf00      	nop
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d940:	bf00      	nop
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d954:	bf00      	nop
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d101      	bne.n	800d972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d96e:	2301      	movs	r3, #1
 800d970:	e042      	b.n	800d9f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d106      	bne.n	800d98a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7f4 fecb 	bl	8002720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2224      	movs	r2, #36	; 0x24
 800d98e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f022 0201 	bic.w	r2, r2, #1
 800d9a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d002      	beq.n	800d9b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f001 fa44 	bl	800ee38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 fcd9 	bl	800e368 <UART_SetConfig>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d101      	bne.n	800d9c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e01b      	b.n	800d9f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d9ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	689a      	ldr	r2, [r3, #8]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d9de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f042 0201 	orr.w	r2, r2, #1
 800d9ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f001 fac3 	bl	800ef7c <UART_CheckIdleState>
 800d9f6:	4603      	mov	r3, r0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08a      	sub	sp, #40	; 0x28
 800da04:	af02      	add	r7, sp, #8
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	603b      	str	r3, [r7, #0]
 800da0c:	4613      	mov	r3, r2
 800da0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da16:	2b20      	cmp	r3, #32
 800da18:	d17b      	bne.n	800db12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d002      	beq.n	800da26 <HAL_UART_Transmit+0x26>
 800da20:	88fb      	ldrh	r3, [r7, #6]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d101      	bne.n	800da2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	e074      	b.n	800db14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2221      	movs	r2, #33	; 0x21
 800da36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800da3a:	f7f5 f9ab 	bl	8002d94 <HAL_GetTick>
 800da3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	88fa      	ldrh	r2, [r7, #6]
 800da44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	88fa      	ldrh	r2, [r7, #6]
 800da4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da58:	d108      	bne.n	800da6c <HAL_UART_Transmit+0x6c>
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d104      	bne.n	800da6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800da62:	2300      	movs	r3, #0
 800da64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	61bb      	str	r3, [r7, #24]
 800da6a:	e003      	b.n	800da74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800da70:	2300      	movs	r3, #0
 800da72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800da74:	e030      	b.n	800dad8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	2200      	movs	r2, #0
 800da7e:	2180      	movs	r1, #128	; 0x80
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f001 fb25 	bl	800f0d0 <UART_WaitOnFlagUntilTimeout>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d005      	beq.n	800da98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2220      	movs	r2, #32
 800da90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800da94:	2303      	movs	r3, #3
 800da96:	e03d      	b.n	800db14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d10b      	bne.n	800dab6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	881b      	ldrh	r3, [r3, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800daac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	3302      	adds	r3, #2
 800dab2:	61bb      	str	r3, [r7, #24]
 800dab4:	e007      	b.n	800dac6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	781a      	ldrb	r2, [r3, #0]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	3301      	adds	r3, #1
 800dac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dacc:	b29b      	uxth	r3, r3
 800dace:	3b01      	subs	r3, #1
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dade:	b29b      	uxth	r3, r3
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1c8      	bne.n	800da76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	2200      	movs	r2, #0
 800daec:	2140      	movs	r1, #64	; 0x40
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f001 faee 	bl	800f0d0 <UART_WaitOnFlagUntilTimeout>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d005      	beq.n	800db06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2220      	movs	r2, #32
 800dafe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800db02:	2303      	movs	r3, #3
 800db04:	e006      	b.n	800db14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2220      	movs	r2, #32
 800db0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	e000      	b.n	800db14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800db12:	2302      	movs	r3, #2
  }
}
 800db14:	4618      	mov	r0, r3
 800db16:	3720      	adds	r7, #32
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b08a      	sub	sp, #40	; 0x28
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	4613      	mov	r3, r2
 800db28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db30:	2b20      	cmp	r3, #32
 800db32:	d137      	bne.n	800dba4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d002      	beq.n	800db40 <HAL_UART_Receive_IT+0x24>
 800db3a:	88fb      	ldrh	r3, [r7, #6]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d101      	bne.n	800db44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	e030      	b.n	800dba6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2200      	movs	r2, #0
 800db48:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a18      	ldr	r2, [pc, #96]	; (800dbb0 <HAL_UART_Receive_IT+0x94>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d01f      	beq.n	800db94 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d018      	beq.n	800db94 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	e853 3f00 	ldrex	r3, [r3]
 800db6e:	613b      	str	r3, [r7, #16]
   return(result);
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800db76:	627b      	str	r3, [r7, #36]	; 0x24
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	461a      	mov	r2, r3
 800db7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db80:	623b      	str	r3, [r7, #32]
 800db82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db84:	69f9      	ldr	r1, [r7, #28]
 800db86:	6a3a      	ldr	r2, [r7, #32]
 800db88:	e841 2300 	strex	r3, r2, [r1]
 800db8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d1e6      	bne.n	800db62 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800db94:	88fb      	ldrh	r3, [r7, #6]
 800db96:	461a      	mov	r2, r3
 800db98:	68b9      	ldr	r1, [r7, #8]
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f001 fb06 	bl	800f1ac <UART_Start_Receive_IT>
 800dba0:	4603      	mov	r3, r0
 800dba2:	e000      	b.n	800dba6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dba4:	2302      	movs	r3, #2
  }
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3728      	adds	r7, #40	; 0x28
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	58000c00 	.word	0x58000c00

0800dbb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b0ba      	sub	sp, #232	; 0xe8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	69db      	ldr	r3, [r3, #28]
 800dbc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dbda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dbde:	f640 030f 	movw	r3, #2063	; 0x80f
 800dbe2:	4013      	ands	r3, r2
 800dbe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dbe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d11b      	bne.n	800dc28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dbf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbf4:	f003 0320 	and.w	r3, r3, #32
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d015      	beq.n	800dc28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc00:	f003 0320 	and.w	r3, r3, #32
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d105      	bne.n	800dc14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d009      	beq.n	800dc28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 8377 	beq.w	800e30c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	4798      	blx	r3
      }
      return;
 800dc26:	e371      	b.n	800e30c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dc28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f000 8123 	beq.w	800de78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dc32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dc36:	4b8d      	ldr	r3, [pc, #564]	; (800de6c <HAL_UART_IRQHandler+0x2b8>)
 800dc38:	4013      	ands	r3, r2
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d106      	bne.n	800dc4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dc3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dc42:	4b8b      	ldr	r3, [pc, #556]	; (800de70 <HAL_UART_IRQHandler+0x2bc>)
 800dc44:	4013      	ands	r3, r2
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f000 8116 	beq.w	800de78 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d011      	beq.n	800dc7c <HAL_UART_IRQHandler+0xc8>
 800dc58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00b      	beq.n	800dc7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc72:	f043 0201 	orr.w	r2, r3, #1
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc80:	f003 0302 	and.w	r3, r3, #2
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d011      	beq.n	800dcac <HAL_UART_IRQHandler+0xf8>
 800dc88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc8c:	f003 0301 	and.w	r3, r3, #1
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00b      	beq.n	800dcac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2202      	movs	r2, #2
 800dc9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dca2:	f043 0204 	orr.w	r2, r3, #4
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcb0:	f003 0304 	and.w	r3, r3, #4
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d011      	beq.n	800dcdc <HAL_UART_IRQHandler+0x128>
 800dcb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dcbc:	f003 0301 	and.w	r3, r3, #1
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00b      	beq.n	800dcdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2204      	movs	r2, #4
 800dcca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcd2:	f043 0202 	orr.w	r2, r3, #2
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dcdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dce0:	f003 0308 	and.w	r3, r3, #8
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d017      	beq.n	800dd18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcec:	f003 0320 	and.w	r3, r3, #32
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d105      	bne.n	800dd00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dcf4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dcf8:	4b5c      	ldr	r3, [pc, #368]	; (800de6c <HAL_UART_IRQHandler+0x2b8>)
 800dcfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00b      	beq.n	800dd18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2208      	movs	r2, #8
 800dd06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd0e:	f043 0208 	orr.w	r2, r3, #8
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dd18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d012      	beq.n	800dd4a <HAL_UART_IRQHandler+0x196>
 800dd24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00c      	beq.n	800dd4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd40:	f043 0220 	orr.w	r2, r3, #32
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f000 82dd 	beq.w	800e310 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd5a:	f003 0320 	and.w	r3, r3, #32
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d013      	beq.n	800dd8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd66:	f003 0320 	and.w	r3, r3, #32
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d105      	bne.n	800dd7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d007      	beq.n	800dd8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d003      	beq.n	800dd8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd9e:	2b40      	cmp	r3, #64	; 0x40
 800dda0:	d005      	beq.n	800ddae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dda2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dda6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d054      	beq.n	800de58 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f001 fb1e 	bl	800f3f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddbe:	2b40      	cmp	r3, #64	; 0x40
 800ddc0:	d146      	bne.n	800de50 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ddd0:	e853 3f00 	ldrex	r3, [r3]
 800ddd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ddd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dde0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	3308      	adds	r3, #8
 800ddea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ddee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ddf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ddfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ddfe:	e841 2300 	strex	r3, r2, [r1]
 800de02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800de06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1d9      	bne.n	800ddc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de14:	2b00      	cmp	r3, #0
 800de16:	d017      	beq.n	800de48 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de1e:	4a15      	ldr	r2, [pc, #84]	; (800de74 <HAL_UART_IRQHandler+0x2c0>)
 800de20:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de28:	4618      	mov	r0, r3
 800de2a:	f7f8 f9bf 	bl	80061ac <HAL_DMA_Abort_IT>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d019      	beq.n	800de68 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800de42:	4610      	mov	r0, r2
 800de44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de46:	e00f      	b.n	800de68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f000 fa77 	bl	800e33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de4e:	e00b      	b.n	800de68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 fa73 	bl	800e33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de56:	e007      	b.n	800de68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 fa6f 	bl	800e33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800de66:	e253      	b.n	800e310 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de68:	bf00      	nop
    return;
 800de6a:	e251      	b.n	800e310 <HAL_UART_IRQHandler+0x75c>
 800de6c:	10000001 	.word	0x10000001
 800de70:	04000120 	.word	0x04000120
 800de74:	0800f4bd 	.word	0x0800f4bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	f040 81e7 	bne.w	800e250 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800de82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de86:	f003 0310 	and.w	r3, r3, #16
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f000 81e0 	beq.w	800e250 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800de90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de94:	f003 0310 	and.w	r3, r3, #16
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f000 81d9 	beq.w	800e250 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2210      	movs	r2, #16
 800dea4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deb0:	2b40      	cmp	r3, #64	; 0x40
 800deb2:	f040 8151 	bne.w	800e158 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	4a96      	ldr	r2, [pc, #600]	; (800e118 <HAL_UART_IRQHandler+0x564>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d068      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a93      	ldr	r2, [pc, #588]	; (800e11c <HAL_UART_IRQHandler+0x568>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d061      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a91      	ldr	r2, [pc, #580]	; (800e120 <HAL_UART_IRQHandler+0x56c>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d05a      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a8e      	ldr	r2, [pc, #568]	; (800e124 <HAL_UART_IRQHandler+0x570>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d053      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a8c      	ldr	r2, [pc, #560]	; (800e128 <HAL_UART_IRQHandler+0x574>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d04c      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a89      	ldr	r2, [pc, #548]	; (800e12c <HAL_UART_IRQHandler+0x578>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d045      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a87      	ldr	r2, [pc, #540]	; (800e130 <HAL_UART_IRQHandler+0x57c>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d03e      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a84      	ldr	r2, [pc, #528]	; (800e134 <HAL_UART_IRQHandler+0x580>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d037      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a82      	ldr	r2, [pc, #520]	; (800e138 <HAL_UART_IRQHandler+0x584>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d030      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a7f      	ldr	r2, [pc, #508]	; (800e13c <HAL_UART_IRQHandler+0x588>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d029      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a7d      	ldr	r2, [pc, #500]	; (800e140 <HAL_UART_IRQHandler+0x58c>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d022      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a7a      	ldr	r2, [pc, #488]	; (800e144 <HAL_UART_IRQHandler+0x590>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d01b      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a78      	ldr	r2, [pc, #480]	; (800e148 <HAL_UART_IRQHandler+0x594>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d014      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a75      	ldr	r2, [pc, #468]	; (800e14c <HAL_UART_IRQHandler+0x598>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d00d      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a73      	ldr	r2, [pc, #460]	; (800e150 <HAL_UART_IRQHandler+0x59c>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d006      	beq.n	800df96 <HAL_UART_IRQHandler+0x3e2>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a70      	ldr	r2, [pc, #448]	; (800e154 <HAL_UART_IRQHandler+0x5a0>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d106      	bne.n	800dfa4 <HAL_UART_IRQHandler+0x3f0>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	e005      	b.n	800dfb0 <HAL_UART_IRQHandler+0x3fc>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dfb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f000 81ab 	beq.w	800e314 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dfc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	f080 81a3 	bcs.w	800e314 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dfd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfde:	69db      	ldr	r3, [r3, #28]
 800dfe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfe4:	f000 8087 	beq.w	800e0f6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dff4:	e853 3f00 	ldrex	r3, [r3]
 800dff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	461a      	mov	r2, r3
 800e00e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e012:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e016:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e01e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e022:	e841 2300 	strex	r3, r2, [r1]
 800e026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e02a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d1da      	bne.n	800dfe8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	3308      	adds	r3, #8
 800e038:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e03a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e03c:	e853 3f00 	ldrex	r3, [r3]
 800e040:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e044:	f023 0301 	bic.w	r3, r3, #1
 800e048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3308      	adds	r3, #8
 800e052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e056:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e05a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e05c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e05e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e062:	e841 2300 	strex	r3, r2, [r1]
 800e066:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d1e1      	bne.n	800e032 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	3308      	adds	r3, #8
 800e074:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e078:	e853 3f00 	ldrex	r3, [r3]
 800e07c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e07e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	3308      	adds	r3, #8
 800e08e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e092:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e094:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e096:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e098:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e09a:	e841 2300 	strex	r3, r2, [r1]
 800e09e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e0a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1e3      	bne.n	800e06e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2220      	movs	r2, #32
 800e0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0bc:	e853 3f00 	ldrex	r3, [r3]
 800e0c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0c4:	f023 0310 	bic.w	r3, r3, #16
 800e0c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e0dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0de:	e841 2300 	strex	r3, r2, [r1]
 800e0e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d1e4      	bne.n	800e0b4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7f7 fd3d 	bl	8005b70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2202      	movs	r2, #2
 800e0fa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e108:	b29b      	uxth	r3, r3
 800e10a:	1ad3      	subs	r3, r2, r3
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	4619      	mov	r1, r3
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 f91d 	bl	800e350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e116:	e0fd      	b.n	800e314 <HAL_UART_IRQHandler+0x760>
 800e118:	40020010 	.word	0x40020010
 800e11c:	40020028 	.word	0x40020028
 800e120:	40020040 	.word	0x40020040
 800e124:	40020058 	.word	0x40020058
 800e128:	40020070 	.word	0x40020070
 800e12c:	40020088 	.word	0x40020088
 800e130:	400200a0 	.word	0x400200a0
 800e134:	400200b8 	.word	0x400200b8
 800e138:	40020410 	.word	0x40020410
 800e13c:	40020428 	.word	0x40020428
 800e140:	40020440 	.word	0x40020440
 800e144:	40020458 	.word	0x40020458
 800e148:	40020470 	.word	0x40020470
 800e14c:	40020488 	.word	0x40020488
 800e150:	400204a0 	.word	0x400204a0
 800e154:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e164:	b29b      	uxth	r3, r3
 800e166:	1ad3      	subs	r3, r2, r3
 800e168:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e172:	b29b      	uxth	r3, r3
 800e174:	2b00      	cmp	r3, #0
 800e176:	f000 80cf 	beq.w	800e318 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e17a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f000 80ca 	beq.w	800e318 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18c:	e853 3f00 	ldrex	r3, [r3]
 800e190:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e1a6:	647b      	str	r3, [r7, #68]	; 0x44
 800e1a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1ae:	e841 2300 	strex	r3, r2, [r1]
 800e1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1e4      	bne.n	800e184 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3308      	adds	r3, #8
 800e1c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c4:	e853 3f00 	ldrex	r3, [r3]
 800e1c8:	623b      	str	r3, [r7, #32]
   return(result);
 800e1ca:	6a3a      	ldr	r2, [r7, #32]
 800e1cc:	4b55      	ldr	r3, [pc, #340]	; (800e324 <HAL_UART_IRQHandler+0x770>)
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	3308      	adds	r3, #8
 800e1da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e1de:	633a      	str	r2, [r7, #48]	; 0x30
 800e1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1e6:	e841 2300 	strex	r3, r2, [r1]
 800e1ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d1e3      	bne.n	800e1ba <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2220      	movs	r2, #32
 800e1f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	e853 3f00 	ldrex	r3, [r3]
 800e212:	60fb      	str	r3, [r7, #12]
   return(result);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f023 0310 	bic.w	r3, r3, #16
 800e21a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	461a      	mov	r2, r3
 800e224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e228:	61fb      	str	r3, [r7, #28]
 800e22a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22c:	69b9      	ldr	r1, [r7, #24]
 800e22e:	69fa      	ldr	r2, [r7, #28]
 800e230:	e841 2300 	strex	r3, r2, [r1]
 800e234:	617b      	str	r3, [r7, #20]
   return(result);
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1e4      	bne.n	800e206 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2202      	movs	r2, #2
 800e240:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e242:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e246:	4619      	mov	r1, r3
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 f881 	bl	800e350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e24e:	e063      	b.n	800e318 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00e      	beq.n	800e27a <HAL_UART_IRQHandler+0x6c6>
 800e25c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e264:	2b00      	cmp	r3, #0
 800e266:	d008      	beq.n	800e27a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e270:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f001 fe80 	bl	800ff78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e278:	e051      	b.n	800e31e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e27a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e282:	2b00      	cmp	r3, #0
 800e284:	d014      	beq.n	800e2b0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d105      	bne.n	800e29e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d008      	beq.n	800e2b0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d03a      	beq.n	800e31c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	4798      	blx	r3
    }
    return;
 800e2ae:	e035      	b.n	800e31c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d009      	beq.n	800e2d0 <HAL_UART_IRQHandler+0x71c>
 800e2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d003      	beq.n	800e2d0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f001 f90d 	bl	800f4e8 <UART_EndTransmit_IT>
    return;
 800e2ce:	e026      	b.n	800e31e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d009      	beq.n	800e2f0 <HAL_UART_IRQHandler+0x73c>
 800e2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d003      	beq.n	800e2f0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f001 fe59 	bl	800ffa0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2ee:	e016      	b.n	800e31e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d010      	beq.n	800e31e <HAL_UART_IRQHandler+0x76a>
 800e2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e300:	2b00      	cmp	r3, #0
 800e302:	da0c      	bge.n	800e31e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f001 fe41 	bl	800ff8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e30a:	e008      	b.n	800e31e <HAL_UART_IRQHandler+0x76a>
      return;
 800e30c:	bf00      	nop
 800e30e:	e006      	b.n	800e31e <HAL_UART_IRQHandler+0x76a>
    return;
 800e310:	bf00      	nop
 800e312:	e004      	b.n	800e31e <HAL_UART_IRQHandler+0x76a>
      return;
 800e314:	bf00      	nop
 800e316:	e002      	b.n	800e31e <HAL_UART_IRQHandler+0x76a>
      return;
 800e318:	bf00      	nop
 800e31a:	e000      	b.n	800e31e <HAL_UART_IRQHandler+0x76a>
    return;
 800e31c:	bf00      	nop
  }
}
 800e31e:	37e8      	adds	r7, #232	; 0xe8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	effffffe 	.word	0xeffffffe

0800e328 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e328:	b480      	push	{r7}
 800e32a:	b083      	sub	sp, #12
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e330:	bf00      	nop
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e344:	bf00      	nop
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	460b      	mov	r3, r1
 800e35a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e35c:	bf00      	nop
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e36c:	b092      	sub	sp, #72	; 0x48
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e372:	2300      	movs	r3, #0
 800e374:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	689a      	ldr	r2, [r3, #8]
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	691b      	ldr	r3, [r3, #16]
 800e380:	431a      	orrs	r2, r3
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	695b      	ldr	r3, [r3, #20]
 800e386:	431a      	orrs	r2, r3
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	69db      	ldr	r3, [r3, #28]
 800e38c:	4313      	orrs	r3, r2
 800e38e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	4bbe      	ldr	r3, [pc, #760]	; (800e690 <UART_SetConfig+0x328>)
 800e398:	4013      	ands	r3, r2
 800e39a:	697a      	ldr	r2, [r7, #20]
 800e39c:	6812      	ldr	r2, [r2, #0]
 800e39e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3a0:	430b      	orrs	r3, r1
 800e3a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	68da      	ldr	r2, [r3, #12]
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	430a      	orrs	r2, r1
 800e3b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	699b      	ldr	r3, [r3, #24]
 800e3be:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4ab3      	ldr	r2, [pc, #716]	; (800e694 <UART_SetConfig+0x32c>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d004      	beq.n	800e3d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	6a1b      	ldr	r3, [r3, #32]
 800e3ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	689a      	ldr	r2, [r3, #8]
 800e3da:	4baf      	ldr	r3, [pc, #700]	; (800e698 <UART_SetConfig+0x330>)
 800e3dc:	4013      	ands	r3, r2
 800e3de:	697a      	ldr	r2, [r7, #20]
 800e3e0:	6812      	ldr	r2, [r2, #0]
 800e3e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3e4:	430b      	orrs	r3, r1
 800e3e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ee:	f023 010f 	bic.w	r1, r3, #15
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	430a      	orrs	r2, r1
 800e3fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4aa6      	ldr	r2, [pc, #664]	; (800e69c <UART_SetConfig+0x334>)
 800e404:	4293      	cmp	r3, r2
 800e406:	d177      	bne.n	800e4f8 <UART_SetConfig+0x190>
 800e408:	4ba5      	ldr	r3, [pc, #660]	; (800e6a0 <UART_SetConfig+0x338>)
 800e40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e40c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e410:	2b28      	cmp	r3, #40	; 0x28
 800e412:	d86d      	bhi.n	800e4f0 <UART_SetConfig+0x188>
 800e414:	a201      	add	r2, pc, #4	; (adr r2, 800e41c <UART_SetConfig+0xb4>)
 800e416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41a:	bf00      	nop
 800e41c:	0800e4c1 	.word	0x0800e4c1
 800e420:	0800e4f1 	.word	0x0800e4f1
 800e424:	0800e4f1 	.word	0x0800e4f1
 800e428:	0800e4f1 	.word	0x0800e4f1
 800e42c:	0800e4f1 	.word	0x0800e4f1
 800e430:	0800e4f1 	.word	0x0800e4f1
 800e434:	0800e4f1 	.word	0x0800e4f1
 800e438:	0800e4f1 	.word	0x0800e4f1
 800e43c:	0800e4c9 	.word	0x0800e4c9
 800e440:	0800e4f1 	.word	0x0800e4f1
 800e444:	0800e4f1 	.word	0x0800e4f1
 800e448:	0800e4f1 	.word	0x0800e4f1
 800e44c:	0800e4f1 	.word	0x0800e4f1
 800e450:	0800e4f1 	.word	0x0800e4f1
 800e454:	0800e4f1 	.word	0x0800e4f1
 800e458:	0800e4f1 	.word	0x0800e4f1
 800e45c:	0800e4d1 	.word	0x0800e4d1
 800e460:	0800e4f1 	.word	0x0800e4f1
 800e464:	0800e4f1 	.word	0x0800e4f1
 800e468:	0800e4f1 	.word	0x0800e4f1
 800e46c:	0800e4f1 	.word	0x0800e4f1
 800e470:	0800e4f1 	.word	0x0800e4f1
 800e474:	0800e4f1 	.word	0x0800e4f1
 800e478:	0800e4f1 	.word	0x0800e4f1
 800e47c:	0800e4d9 	.word	0x0800e4d9
 800e480:	0800e4f1 	.word	0x0800e4f1
 800e484:	0800e4f1 	.word	0x0800e4f1
 800e488:	0800e4f1 	.word	0x0800e4f1
 800e48c:	0800e4f1 	.word	0x0800e4f1
 800e490:	0800e4f1 	.word	0x0800e4f1
 800e494:	0800e4f1 	.word	0x0800e4f1
 800e498:	0800e4f1 	.word	0x0800e4f1
 800e49c:	0800e4e1 	.word	0x0800e4e1
 800e4a0:	0800e4f1 	.word	0x0800e4f1
 800e4a4:	0800e4f1 	.word	0x0800e4f1
 800e4a8:	0800e4f1 	.word	0x0800e4f1
 800e4ac:	0800e4f1 	.word	0x0800e4f1
 800e4b0:	0800e4f1 	.word	0x0800e4f1
 800e4b4:	0800e4f1 	.word	0x0800e4f1
 800e4b8:	0800e4f1 	.word	0x0800e4f1
 800e4bc:	0800e4e9 	.word	0x0800e4e9
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c6:	e222      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e4c8:	2304      	movs	r3, #4
 800e4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ce:	e21e      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e4d0:	2308      	movs	r3, #8
 800e4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d6:	e21a      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e4d8:	2310      	movs	r3, #16
 800e4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4de:	e216      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e4e0:	2320      	movs	r3, #32
 800e4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e6:	e212      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e4e8:	2340      	movs	r3, #64	; 0x40
 800e4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ee:	e20e      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e4f0:	2380      	movs	r3, #128	; 0x80
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e20a      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a69      	ldr	r2, [pc, #420]	; (800e6a4 <UART_SetConfig+0x33c>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d130      	bne.n	800e564 <UART_SetConfig+0x1fc>
 800e502:	4b67      	ldr	r3, [pc, #412]	; (800e6a0 <UART_SetConfig+0x338>)
 800e504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e506:	f003 0307 	and.w	r3, r3, #7
 800e50a:	2b05      	cmp	r3, #5
 800e50c:	d826      	bhi.n	800e55c <UART_SetConfig+0x1f4>
 800e50e:	a201      	add	r2, pc, #4	; (adr r2, 800e514 <UART_SetConfig+0x1ac>)
 800e510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e514:	0800e52d 	.word	0x0800e52d
 800e518:	0800e535 	.word	0x0800e535
 800e51c:	0800e53d 	.word	0x0800e53d
 800e520:	0800e545 	.word	0x0800e545
 800e524:	0800e54d 	.word	0x0800e54d
 800e528:	0800e555 	.word	0x0800e555
 800e52c:	2300      	movs	r3, #0
 800e52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e532:	e1ec      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e534:	2304      	movs	r3, #4
 800e536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53a:	e1e8      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e53c:	2308      	movs	r3, #8
 800e53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e542:	e1e4      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e544:	2310      	movs	r3, #16
 800e546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54a:	e1e0      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e54c:	2320      	movs	r3, #32
 800e54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e552:	e1dc      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e554:	2340      	movs	r3, #64	; 0x40
 800e556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e55a:	e1d8      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e55c:	2380      	movs	r3, #128	; 0x80
 800e55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e562:	e1d4      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a4f      	ldr	r2, [pc, #316]	; (800e6a8 <UART_SetConfig+0x340>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d130      	bne.n	800e5d0 <UART_SetConfig+0x268>
 800e56e:	4b4c      	ldr	r3, [pc, #304]	; (800e6a0 <UART_SetConfig+0x338>)
 800e570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e572:	f003 0307 	and.w	r3, r3, #7
 800e576:	2b05      	cmp	r3, #5
 800e578:	d826      	bhi.n	800e5c8 <UART_SetConfig+0x260>
 800e57a:	a201      	add	r2, pc, #4	; (adr r2, 800e580 <UART_SetConfig+0x218>)
 800e57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e580:	0800e599 	.word	0x0800e599
 800e584:	0800e5a1 	.word	0x0800e5a1
 800e588:	0800e5a9 	.word	0x0800e5a9
 800e58c:	0800e5b1 	.word	0x0800e5b1
 800e590:	0800e5b9 	.word	0x0800e5b9
 800e594:	0800e5c1 	.word	0x0800e5c1
 800e598:	2300      	movs	r3, #0
 800e59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e59e:	e1b6      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e5a0:	2304      	movs	r3, #4
 800e5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a6:	e1b2      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e5a8:	2308      	movs	r3, #8
 800e5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ae:	e1ae      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e5b0:	2310      	movs	r3, #16
 800e5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5b6:	e1aa      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e5b8:	2320      	movs	r3, #32
 800e5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5be:	e1a6      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e5c0:	2340      	movs	r3, #64	; 0x40
 800e5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c6:	e1a2      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e5c8:	2380      	movs	r3, #128	; 0x80
 800e5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ce:	e19e      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4a35      	ldr	r2, [pc, #212]	; (800e6ac <UART_SetConfig+0x344>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d130      	bne.n	800e63c <UART_SetConfig+0x2d4>
 800e5da:	4b31      	ldr	r3, [pc, #196]	; (800e6a0 <UART_SetConfig+0x338>)
 800e5dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5de:	f003 0307 	and.w	r3, r3, #7
 800e5e2:	2b05      	cmp	r3, #5
 800e5e4:	d826      	bhi.n	800e634 <UART_SetConfig+0x2cc>
 800e5e6:	a201      	add	r2, pc, #4	; (adr r2, 800e5ec <UART_SetConfig+0x284>)
 800e5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ec:	0800e605 	.word	0x0800e605
 800e5f0:	0800e60d 	.word	0x0800e60d
 800e5f4:	0800e615 	.word	0x0800e615
 800e5f8:	0800e61d 	.word	0x0800e61d
 800e5fc:	0800e625 	.word	0x0800e625
 800e600:	0800e62d 	.word	0x0800e62d
 800e604:	2300      	movs	r3, #0
 800e606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60a:	e180      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e60c:	2304      	movs	r3, #4
 800e60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e612:	e17c      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e614:	2308      	movs	r3, #8
 800e616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61a:	e178      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e61c:	2310      	movs	r3, #16
 800e61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e622:	e174      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e624:	2320      	movs	r3, #32
 800e626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62a:	e170      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e62c:	2340      	movs	r3, #64	; 0x40
 800e62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e632:	e16c      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e634:	2380      	movs	r3, #128	; 0x80
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63a:	e168      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4a1b      	ldr	r2, [pc, #108]	; (800e6b0 <UART_SetConfig+0x348>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d142      	bne.n	800e6cc <UART_SetConfig+0x364>
 800e646:	4b16      	ldr	r3, [pc, #88]	; (800e6a0 <UART_SetConfig+0x338>)
 800e648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e64a:	f003 0307 	and.w	r3, r3, #7
 800e64e:	2b05      	cmp	r3, #5
 800e650:	d838      	bhi.n	800e6c4 <UART_SetConfig+0x35c>
 800e652:	a201      	add	r2, pc, #4	; (adr r2, 800e658 <UART_SetConfig+0x2f0>)
 800e654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e658:	0800e671 	.word	0x0800e671
 800e65c:	0800e679 	.word	0x0800e679
 800e660:	0800e681 	.word	0x0800e681
 800e664:	0800e689 	.word	0x0800e689
 800e668:	0800e6b5 	.word	0x0800e6b5
 800e66c:	0800e6bd 	.word	0x0800e6bd
 800e670:	2300      	movs	r3, #0
 800e672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e676:	e14a      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e678:	2304      	movs	r3, #4
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e146      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e680:	2308      	movs	r3, #8
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e142      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e688:	2310      	movs	r3, #16
 800e68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68e:	e13e      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e690:	cfff69f3 	.word	0xcfff69f3
 800e694:	58000c00 	.word	0x58000c00
 800e698:	11fff4ff 	.word	0x11fff4ff
 800e69c:	40011000 	.word	0x40011000
 800e6a0:	58024400 	.word	0x58024400
 800e6a4:	40004400 	.word	0x40004400
 800e6a8:	40004800 	.word	0x40004800
 800e6ac:	40004c00 	.word	0x40004c00
 800e6b0:	40005000 	.word	0x40005000
 800e6b4:	2320      	movs	r3, #32
 800e6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ba:	e128      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e6bc:	2340      	movs	r3, #64	; 0x40
 800e6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c2:	e124      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e6c4:	2380      	movs	r3, #128	; 0x80
 800e6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ca:	e120      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4acb      	ldr	r2, [pc, #812]	; (800ea00 <UART_SetConfig+0x698>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d176      	bne.n	800e7c4 <UART_SetConfig+0x45c>
 800e6d6:	4bcb      	ldr	r3, [pc, #812]	; (800ea04 <UART_SetConfig+0x69c>)
 800e6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e6de:	2b28      	cmp	r3, #40	; 0x28
 800e6e0:	d86c      	bhi.n	800e7bc <UART_SetConfig+0x454>
 800e6e2:	a201      	add	r2, pc, #4	; (adr r2, 800e6e8 <UART_SetConfig+0x380>)
 800e6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e8:	0800e78d 	.word	0x0800e78d
 800e6ec:	0800e7bd 	.word	0x0800e7bd
 800e6f0:	0800e7bd 	.word	0x0800e7bd
 800e6f4:	0800e7bd 	.word	0x0800e7bd
 800e6f8:	0800e7bd 	.word	0x0800e7bd
 800e6fc:	0800e7bd 	.word	0x0800e7bd
 800e700:	0800e7bd 	.word	0x0800e7bd
 800e704:	0800e7bd 	.word	0x0800e7bd
 800e708:	0800e795 	.word	0x0800e795
 800e70c:	0800e7bd 	.word	0x0800e7bd
 800e710:	0800e7bd 	.word	0x0800e7bd
 800e714:	0800e7bd 	.word	0x0800e7bd
 800e718:	0800e7bd 	.word	0x0800e7bd
 800e71c:	0800e7bd 	.word	0x0800e7bd
 800e720:	0800e7bd 	.word	0x0800e7bd
 800e724:	0800e7bd 	.word	0x0800e7bd
 800e728:	0800e79d 	.word	0x0800e79d
 800e72c:	0800e7bd 	.word	0x0800e7bd
 800e730:	0800e7bd 	.word	0x0800e7bd
 800e734:	0800e7bd 	.word	0x0800e7bd
 800e738:	0800e7bd 	.word	0x0800e7bd
 800e73c:	0800e7bd 	.word	0x0800e7bd
 800e740:	0800e7bd 	.word	0x0800e7bd
 800e744:	0800e7bd 	.word	0x0800e7bd
 800e748:	0800e7a5 	.word	0x0800e7a5
 800e74c:	0800e7bd 	.word	0x0800e7bd
 800e750:	0800e7bd 	.word	0x0800e7bd
 800e754:	0800e7bd 	.word	0x0800e7bd
 800e758:	0800e7bd 	.word	0x0800e7bd
 800e75c:	0800e7bd 	.word	0x0800e7bd
 800e760:	0800e7bd 	.word	0x0800e7bd
 800e764:	0800e7bd 	.word	0x0800e7bd
 800e768:	0800e7ad 	.word	0x0800e7ad
 800e76c:	0800e7bd 	.word	0x0800e7bd
 800e770:	0800e7bd 	.word	0x0800e7bd
 800e774:	0800e7bd 	.word	0x0800e7bd
 800e778:	0800e7bd 	.word	0x0800e7bd
 800e77c:	0800e7bd 	.word	0x0800e7bd
 800e780:	0800e7bd 	.word	0x0800e7bd
 800e784:	0800e7bd 	.word	0x0800e7bd
 800e788:	0800e7b5 	.word	0x0800e7b5
 800e78c:	2301      	movs	r3, #1
 800e78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e792:	e0bc      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e794:	2304      	movs	r3, #4
 800e796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79a:	e0b8      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e79c:	2308      	movs	r3, #8
 800e79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7a2:	e0b4      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e7a4:	2310      	movs	r3, #16
 800e7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7aa:	e0b0      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e7ac:	2320      	movs	r3, #32
 800e7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7b2:	e0ac      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e7b4:	2340      	movs	r3, #64	; 0x40
 800e7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ba:	e0a8      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e7bc:	2380      	movs	r3, #128	; 0x80
 800e7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c2:	e0a4      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a8f      	ldr	r2, [pc, #572]	; (800ea08 <UART_SetConfig+0x6a0>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d130      	bne.n	800e830 <UART_SetConfig+0x4c8>
 800e7ce:	4b8d      	ldr	r3, [pc, #564]	; (800ea04 <UART_SetConfig+0x69c>)
 800e7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7d2:	f003 0307 	and.w	r3, r3, #7
 800e7d6:	2b05      	cmp	r3, #5
 800e7d8:	d826      	bhi.n	800e828 <UART_SetConfig+0x4c0>
 800e7da:	a201      	add	r2, pc, #4	; (adr r2, 800e7e0 <UART_SetConfig+0x478>)
 800e7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e0:	0800e7f9 	.word	0x0800e7f9
 800e7e4:	0800e801 	.word	0x0800e801
 800e7e8:	0800e809 	.word	0x0800e809
 800e7ec:	0800e811 	.word	0x0800e811
 800e7f0:	0800e819 	.word	0x0800e819
 800e7f4:	0800e821 	.word	0x0800e821
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fe:	e086      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e800:	2304      	movs	r3, #4
 800e802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e806:	e082      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e808:	2308      	movs	r3, #8
 800e80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80e:	e07e      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e810:	2310      	movs	r3, #16
 800e812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e816:	e07a      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e818:	2320      	movs	r3, #32
 800e81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e81e:	e076      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e820:	2340      	movs	r3, #64	; 0x40
 800e822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e826:	e072      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e828:	2380      	movs	r3, #128	; 0x80
 800e82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e82e:	e06e      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a75      	ldr	r2, [pc, #468]	; (800ea0c <UART_SetConfig+0x6a4>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d130      	bne.n	800e89c <UART_SetConfig+0x534>
 800e83a:	4b72      	ldr	r3, [pc, #456]	; (800ea04 <UART_SetConfig+0x69c>)
 800e83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e83e:	f003 0307 	and.w	r3, r3, #7
 800e842:	2b05      	cmp	r3, #5
 800e844:	d826      	bhi.n	800e894 <UART_SetConfig+0x52c>
 800e846:	a201      	add	r2, pc, #4	; (adr r2, 800e84c <UART_SetConfig+0x4e4>)
 800e848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e84c:	0800e865 	.word	0x0800e865
 800e850:	0800e86d 	.word	0x0800e86d
 800e854:	0800e875 	.word	0x0800e875
 800e858:	0800e87d 	.word	0x0800e87d
 800e85c:	0800e885 	.word	0x0800e885
 800e860:	0800e88d 	.word	0x0800e88d
 800e864:	2300      	movs	r3, #0
 800e866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86a:	e050      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e86c:	2304      	movs	r3, #4
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e872:	e04c      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e874:	2308      	movs	r3, #8
 800e876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87a:	e048      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e87c:	2310      	movs	r3, #16
 800e87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e882:	e044      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e884:	2320      	movs	r3, #32
 800e886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e88a:	e040      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e88c:	2340      	movs	r3, #64	; 0x40
 800e88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e892:	e03c      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e894:	2380      	movs	r3, #128	; 0x80
 800e896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e89a:	e038      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a5b      	ldr	r2, [pc, #364]	; (800ea10 <UART_SetConfig+0x6a8>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d130      	bne.n	800e908 <UART_SetConfig+0x5a0>
 800e8a6:	4b57      	ldr	r3, [pc, #348]	; (800ea04 <UART_SetConfig+0x69c>)
 800e8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8aa:	f003 0307 	and.w	r3, r3, #7
 800e8ae:	2b05      	cmp	r3, #5
 800e8b0:	d826      	bhi.n	800e900 <UART_SetConfig+0x598>
 800e8b2:	a201      	add	r2, pc, #4	; (adr r2, 800e8b8 <UART_SetConfig+0x550>)
 800e8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b8:	0800e8d1 	.word	0x0800e8d1
 800e8bc:	0800e8d9 	.word	0x0800e8d9
 800e8c0:	0800e8e1 	.word	0x0800e8e1
 800e8c4:	0800e8e9 	.word	0x0800e8e9
 800e8c8:	0800e8f1 	.word	0x0800e8f1
 800e8cc:	0800e8f9 	.word	0x0800e8f9
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8d6:	e01a      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e8d8:	2304      	movs	r3, #4
 800e8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8de:	e016      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e8e0:	2308      	movs	r3, #8
 800e8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8e6:	e012      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e8e8:	2310      	movs	r3, #16
 800e8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ee:	e00e      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e8f0:	2320      	movs	r3, #32
 800e8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8f6:	e00a      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e8f8:	2340      	movs	r3, #64	; 0x40
 800e8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8fe:	e006      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e900:	2380      	movs	r3, #128	; 0x80
 800e902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e906:	e002      	b.n	800e90e <UART_SetConfig+0x5a6>
 800e908:	2380      	movs	r3, #128	; 0x80
 800e90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	4a3f      	ldr	r2, [pc, #252]	; (800ea10 <UART_SetConfig+0x6a8>)
 800e914:	4293      	cmp	r3, r2
 800e916:	f040 80f8 	bne.w	800eb0a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e91a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e91e:	2b20      	cmp	r3, #32
 800e920:	dc46      	bgt.n	800e9b0 <UART_SetConfig+0x648>
 800e922:	2b02      	cmp	r3, #2
 800e924:	f2c0 8082 	blt.w	800ea2c <UART_SetConfig+0x6c4>
 800e928:	3b02      	subs	r3, #2
 800e92a:	2b1e      	cmp	r3, #30
 800e92c:	d87e      	bhi.n	800ea2c <UART_SetConfig+0x6c4>
 800e92e:	a201      	add	r2, pc, #4	; (adr r2, 800e934 <UART_SetConfig+0x5cc>)
 800e930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e934:	0800e9b7 	.word	0x0800e9b7
 800e938:	0800ea2d 	.word	0x0800ea2d
 800e93c:	0800e9bf 	.word	0x0800e9bf
 800e940:	0800ea2d 	.word	0x0800ea2d
 800e944:	0800ea2d 	.word	0x0800ea2d
 800e948:	0800ea2d 	.word	0x0800ea2d
 800e94c:	0800e9cf 	.word	0x0800e9cf
 800e950:	0800ea2d 	.word	0x0800ea2d
 800e954:	0800ea2d 	.word	0x0800ea2d
 800e958:	0800ea2d 	.word	0x0800ea2d
 800e95c:	0800ea2d 	.word	0x0800ea2d
 800e960:	0800ea2d 	.word	0x0800ea2d
 800e964:	0800ea2d 	.word	0x0800ea2d
 800e968:	0800ea2d 	.word	0x0800ea2d
 800e96c:	0800e9df 	.word	0x0800e9df
 800e970:	0800ea2d 	.word	0x0800ea2d
 800e974:	0800ea2d 	.word	0x0800ea2d
 800e978:	0800ea2d 	.word	0x0800ea2d
 800e97c:	0800ea2d 	.word	0x0800ea2d
 800e980:	0800ea2d 	.word	0x0800ea2d
 800e984:	0800ea2d 	.word	0x0800ea2d
 800e988:	0800ea2d 	.word	0x0800ea2d
 800e98c:	0800ea2d 	.word	0x0800ea2d
 800e990:	0800ea2d 	.word	0x0800ea2d
 800e994:	0800ea2d 	.word	0x0800ea2d
 800e998:	0800ea2d 	.word	0x0800ea2d
 800e99c:	0800ea2d 	.word	0x0800ea2d
 800e9a0:	0800ea2d 	.word	0x0800ea2d
 800e9a4:	0800ea2d 	.word	0x0800ea2d
 800e9a8:	0800ea2d 	.word	0x0800ea2d
 800e9ac:	0800ea1f 	.word	0x0800ea1f
 800e9b0:	2b40      	cmp	r3, #64	; 0x40
 800e9b2:	d037      	beq.n	800ea24 <UART_SetConfig+0x6bc>
 800e9b4:	e03a      	b.n	800ea2c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e9b6:	f7fc fc53 	bl	800b260 <HAL_RCCEx_GetD3PCLK1Freq>
 800e9ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9bc:	e03c      	b.n	800ea38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fc fc62 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9cc:	e034      	b.n	800ea38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9ce:	f107 0318 	add.w	r3, r7, #24
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fc fdae 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9dc:	e02c      	b.n	800ea38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9de:	4b09      	ldr	r3, [pc, #36]	; (800ea04 <UART_SetConfig+0x69c>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f003 0320 	and.w	r3, r3, #32
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d016      	beq.n	800ea18 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e9ea:	4b06      	ldr	r3, [pc, #24]	; (800ea04 <UART_SetConfig+0x69c>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	08db      	lsrs	r3, r3, #3
 800e9f0:	f003 0303 	and.w	r3, r3, #3
 800e9f4:	4a07      	ldr	r2, [pc, #28]	; (800ea14 <UART_SetConfig+0x6ac>)
 800e9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e9fc:	e01c      	b.n	800ea38 <UART_SetConfig+0x6d0>
 800e9fe:	bf00      	nop
 800ea00:	40011400 	.word	0x40011400
 800ea04:	58024400 	.word	0x58024400
 800ea08:	40007800 	.word	0x40007800
 800ea0c:	40007c00 	.word	0x40007c00
 800ea10:	58000c00 	.word	0x58000c00
 800ea14:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ea18:	4b9d      	ldr	r3, [pc, #628]	; (800ec90 <UART_SetConfig+0x928>)
 800ea1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea1c:	e00c      	b.n	800ea38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea1e:	4b9d      	ldr	r3, [pc, #628]	; (800ec94 <UART_SetConfig+0x92c>)
 800ea20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea22:	e009      	b.n	800ea38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea2a:	e005      	b.n	800ea38 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea30:	2301      	movs	r3, #1
 800ea32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ea38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f000 81de 	beq.w	800edfc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea44:	4a94      	ldr	r2, [pc, #592]	; (800ec98 <UART_SetConfig+0x930>)
 800ea46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea52:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	685a      	ldr	r2, [r3, #4]
 800ea58:	4613      	mov	r3, r2
 800ea5a:	005b      	lsls	r3, r3, #1
 800ea5c:	4413      	add	r3, r2
 800ea5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d305      	bcc.n	800ea70 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d903      	bls.n	800ea78 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ea70:	2301      	movs	r3, #1
 800ea72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea76:	e1c1      	b.n	800edfc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	60bb      	str	r3, [r7, #8]
 800ea7e:	60fa      	str	r2, [r7, #12]
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea84:	4a84      	ldr	r2, [pc, #528]	; (800ec98 <UART_SetConfig+0x930>)
 800ea86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	603b      	str	r3, [r7, #0]
 800ea90:	607a      	str	r2, [r7, #4]
 800ea92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ea9a:	f7f1 fc71 	bl	8000380 <__aeabi_uldivmod>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	f04f 0200 	mov.w	r2, #0
 800eaaa:	f04f 0300 	mov.w	r3, #0
 800eaae:	020b      	lsls	r3, r1, #8
 800eab0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eab4:	0202      	lsls	r2, r0, #8
 800eab6:	6979      	ldr	r1, [r7, #20]
 800eab8:	6849      	ldr	r1, [r1, #4]
 800eaba:	0849      	lsrs	r1, r1, #1
 800eabc:	2000      	movs	r0, #0
 800eabe:	460c      	mov	r4, r1
 800eac0:	4605      	mov	r5, r0
 800eac2:	eb12 0804 	adds.w	r8, r2, r4
 800eac6:	eb43 0905 	adc.w	r9, r3, r5
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	469a      	mov	sl, r3
 800ead2:	4693      	mov	fp, r2
 800ead4:	4652      	mov	r2, sl
 800ead6:	465b      	mov	r3, fp
 800ead8:	4640      	mov	r0, r8
 800eada:	4649      	mov	r1, r9
 800eadc:	f7f1 fc50 	bl	8000380 <__aeabi_uldivmod>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	4613      	mov	r3, r2
 800eae6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eaee:	d308      	bcc.n	800eb02 <UART_SetConfig+0x79a>
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eaf6:	d204      	bcs.n	800eb02 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eafe:	60da      	str	r2, [r3, #12]
 800eb00:	e17c      	b.n	800edfc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800eb02:	2301      	movs	r3, #1
 800eb04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb08:	e178      	b.n	800edfc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	69db      	ldr	r3, [r3, #28]
 800eb0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb12:	f040 80c5 	bne.w	800eca0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800eb16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb1a:	2b20      	cmp	r3, #32
 800eb1c:	dc48      	bgt.n	800ebb0 <UART_SetConfig+0x848>
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	db7b      	blt.n	800ec1a <UART_SetConfig+0x8b2>
 800eb22:	2b20      	cmp	r3, #32
 800eb24:	d879      	bhi.n	800ec1a <UART_SetConfig+0x8b2>
 800eb26:	a201      	add	r2, pc, #4	; (adr r2, 800eb2c <UART_SetConfig+0x7c4>)
 800eb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb2c:	0800ebb7 	.word	0x0800ebb7
 800eb30:	0800ebbf 	.word	0x0800ebbf
 800eb34:	0800ec1b 	.word	0x0800ec1b
 800eb38:	0800ec1b 	.word	0x0800ec1b
 800eb3c:	0800ebc7 	.word	0x0800ebc7
 800eb40:	0800ec1b 	.word	0x0800ec1b
 800eb44:	0800ec1b 	.word	0x0800ec1b
 800eb48:	0800ec1b 	.word	0x0800ec1b
 800eb4c:	0800ebd7 	.word	0x0800ebd7
 800eb50:	0800ec1b 	.word	0x0800ec1b
 800eb54:	0800ec1b 	.word	0x0800ec1b
 800eb58:	0800ec1b 	.word	0x0800ec1b
 800eb5c:	0800ec1b 	.word	0x0800ec1b
 800eb60:	0800ec1b 	.word	0x0800ec1b
 800eb64:	0800ec1b 	.word	0x0800ec1b
 800eb68:	0800ec1b 	.word	0x0800ec1b
 800eb6c:	0800ebe7 	.word	0x0800ebe7
 800eb70:	0800ec1b 	.word	0x0800ec1b
 800eb74:	0800ec1b 	.word	0x0800ec1b
 800eb78:	0800ec1b 	.word	0x0800ec1b
 800eb7c:	0800ec1b 	.word	0x0800ec1b
 800eb80:	0800ec1b 	.word	0x0800ec1b
 800eb84:	0800ec1b 	.word	0x0800ec1b
 800eb88:	0800ec1b 	.word	0x0800ec1b
 800eb8c:	0800ec1b 	.word	0x0800ec1b
 800eb90:	0800ec1b 	.word	0x0800ec1b
 800eb94:	0800ec1b 	.word	0x0800ec1b
 800eb98:	0800ec1b 	.word	0x0800ec1b
 800eb9c:	0800ec1b 	.word	0x0800ec1b
 800eba0:	0800ec1b 	.word	0x0800ec1b
 800eba4:	0800ec1b 	.word	0x0800ec1b
 800eba8:	0800ec1b 	.word	0x0800ec1b
 800ebac:	0800ec0d 	.word	0x0800ec0d
 800ebb0:	2b40      	cmp	r3, #64	; 0x40
 800ebb2:	d02e      	beq.n	800ec12 <UART_SetConfig+0x8aa>
 800ebb4:	e031      	b.n	800ec1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebb6:	f7fa fb5b 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 800ebba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebbc:	e033      	b.n	800ec26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebbe:	f7fa fb6d 	bl	800929c <HAL_RCC_GetPCLK2Freq>
 800ebc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebc4:	e02f      	b.n	800ec26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fc fb5e 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ebd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebd4:	e027      	b.n	800ec26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebd6:	f107 0318 	add.w	r3, r7, #24
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fc fcaa 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebe4:	e01f      	b.n	800ec26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebe6:	4b2d      	ldr	r3, [pc, #180]	; (800ec9c <UART_SetConfig+0x934>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f003 0320 	and.w	r3, r3, #32
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d009      	beq.n	800ec06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebf2:	4b2a      	ldr	r3, [pc, #168]	; (800ec9c <UART_SetConfig+0x934>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	08db      	lsrs	r3, r3, #3
 800ebf8:	f003 0303 	and.w	r3, r3, #3
 800ebfc:	4a24      	ldr	r2, [pc, #144]	; (800ec90 <UART_SetConfig+0x928>)
 800ebfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ec02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec04:	e00f      	b.n	800ec26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ec06:	4b22      	ldr	r3, [pc, #136]	; (800ec90 <UART_SetConfig+0x928>)
 800ec08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec0a:	e00c      	b.n	800ec26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec0c:	4b21      	ldr	r3, [pc, #132]	; (800ec94 <UART_SetConfig+0x92c>)
 800ec0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec10:	e009      	b.n	800ec26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec18:	e005      	b.n	800ec26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec1e:	2301      	movs	r3, #1
 800ec20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ec26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 80e7 	beq.w	800edfc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec32:	4a19      	ldr	r2, [pc, #100]	; (800ec98 <UART_SetConfig+0x930>)
 800ec34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec38:	461a      	mov	r2, r3
 800ec3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec40:	005a      	lsls	r2, r3, #1
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	085b      	lsrs	r3, r3, #1
 800ec48:	441a      	add	r2, r3
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec56:	2b0f      	cmp	r3, #15
 800ec58:	d916      	bls.n	800ec88 <UART_SetConfig+0x920>
 800ec5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec60:	d212      	bcs.n	800ec88 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	f023 030f 	bic.w	r3, r3, #15
 800ec6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6e:	085b      	lsrs	r3, r3, #1
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	f003 0307 	and.w	r3, r3, #7
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec84:	60da      	str	r2, [r3, #12]
 800ec86:	e0b9      	b.n	800edfc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ec8e:	e0b5      	b.n	800edfc <UART_SetConfig+0xa94>
 800ec90:	03d09000 	.word	0x03d09000
 800ec94:	003d0900 	.word	0x003d0900
 800ec98:	08014cbc 	.word	0x08014cbc
 800ec9c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800eca0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eca4:	2b20      	cmp	r3, #32
 800eca6:	dc49      	bgt.n	800ed3c <UART_SetConfig+0x9d4>
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	db7c      	blt.n	800eda6 <UART_SetConfig+0xa3e>
 800ecac:	2b20      	cmp	r3, #32
 800ecae:	d87a      	bhi.n	800eda6 <UART_SetConfig+0xa3e>
 800ecb0:	a201      	add	r2, pc, #4	; (adr r2, 800ecb8 <UART_SetConfig+0x950>)
 800ecb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb6:	bf00      	nop
 800ecb8:	0800ed43 	.word	0x0800ed43
 800ecbc:	0800ed4b 	.word	0x0800ed4b
 800ecc0:	0800eda7 	.word	0x0800eda7
 800ecc4:	0800eda7 	.word	0x0800eda7
 800ecc8:	0800ed53 	.word	0x0800ed53
 800eccc:	0800eda7 	.word	0x0800eda7
 800ecd0:	0800eda7 	.word	0x0800eda7
 800ecd4:	0800eda7 	.word	0x0800eda7
 800ecd8:	0800ed63 	.word	0x0800ed63
 800ecdc:	0800eda7 	.word	0x0800eda7
 800ece0:	0800eda7 	.word	0x0800eda7
 800ece4:	0800eda7 	.word	0x0800eda7
 800ece8:	0800eda7 	.word	0x0800eda7
 800ecec:	0800eda7 	.word	0x0800eda7
 800ecf0:	0800eda7 	.word	0x0800eda7
 800ecf4:	0800eda7 	.word	0x0800eda7
 800ecf8:	0800ed73 	.word	0x0800ed73
 800ecfc:	0800eda7 	.word	0x0800eda7
 800ed00:	0800eda7 	.word	0x0800eda7
 800ed04:	0800eda7 	.word	0x0800eda7
 800ed08:	0800eda7 	.word	0x0800eda7
 800ed0c:	0800eda7 	.word	0x0800eda7
 800ed10:	0800eda7 	.word	0x0800eda7
 800ed14:	0800eda7 	.word	0x0800eda7
 800ed18:	0800eda7 	.word	0x0800eda7
 800ed1c:	0800eda7 	.word	0x0800eda7
 800ed20:	0800eda7 	.word	0x0800eda7
 800ed24:	0800eda7 	.word	0x0800eda7
 800ed28:	0800eda7 	.word	0x0800eda7
 800ed2c:	0800eda7 	.word	0x0800eda7
 800ed30:	0800eda7 	.word	0x0800eda7
 800ed34:	0800eda7 	.word	0x0800eda7
 800ed38:	0800ed99 	.word	0x0800ed99
 800ed3c:	2b40      	cmp	r3, #64	; 0x40
 800ed3e:	d02e      	beq.n	800ed9e <UART_SetConfig+0xa36>
 800ed40:	e031      	b.n	800eda6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed42:	f7fa fa95 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 800ed46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed48:	e033      	b.n	800edb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed4a:	f7fa faa7 	bl	800929c <HAL_RCC_GetPCLK2Freq>
 800ed4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed50:	e02f      	b.n	800edb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fc fa98 	bl	800b28c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed60:	e027      	b.n	800edb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed62:	f107 0318 	add.w	r3, r7, #24
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fc fbe4 	bl	800b534 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed70:	e01f      	b.n	800edb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed72:	4b2d      	ldr	r3, [pc, #180]	; (800ee28 <UART_SetConfig+0xac0>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 0320 	and.w	r3, r3, #32
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d009      	beq.n	800ed92 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed7e:	4b2a      	ldr	r3, [pc, #168]	; (800ee28 <UART_SetConfig+0xac0>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	08db      	lsrs	r3, r3, #3
 800ed84:	f003 0303 	and.w	r3, r3, #3
 800ed88:	4a28      	ldr	r2, [pc, #160]	; (800ee2c <UART_SetConfig+0xac4>)
 800ed8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ed8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed90:	e00f      	b.n	800edb2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ed92:	4b26      	ldr	r3, [pc, #152]	; (800ee2c <UART_SetConfig+0xac4>)
 800ed94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed96:	e00c      	b.n	800edb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed98:	4b25      	ldr	r3, [pc, #148]	; (800ee30 <UART_SetConfig+0xac8>)
 800ed9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed9c:	e009      	b.n	800edb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eda4:	e005      	b.n	800edb2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800eda6:	2300      	movs	r3, #0
 800eda8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800edaa:	2301      	movs	r3, #1
 800edac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800edb0:	bf00      	nop
    }

    if (pclk != 0U)
 800edb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d021      	beq.n	800edfc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edbc:	4a1d      	ldr	r2, [pc, #116]	; (800ee34 <UART_SetConfig+0xacc>)
 800edbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edc2:	461a      	mov	r2, r3
 800edc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc6:	fbb3 f2f2 	udiv	r2, r3, r2
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	085b      	lsrs	r3, r3, #1
 800edd0:	441a      	add	r2, r3
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800edda:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edde:	2b0f      	cmp	r3, #15
 800ede0:	d909      	bls.n	800edf6 <UART_SetConfig+0xa8e>
 800ede2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ede8:	d205      	bcs.n	800edf6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800edea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edec:	b29a      	uxth	r2, r3
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	60da      	str	r2, [r3, #12]
 800edf4:	e002      	b.n	800edfc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800edf6:	2301      	movs	r3, #1
 800edf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	2201      	movs	r2, #1
 800ee08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	2200      	movs	r2, #0
 800ee16:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ee18:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3748      	adds	r7, #72	; 0x48
 800ee20:	46bd      	mov	sp, r7
 800ee22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ee26:	bf00      	nop
 800ee28:	58024400 	.word	0x58024400
 800ee2c:	03d09000 	.word	0x03d09000
 800ee30:	003d0900 	.word	0x003d0900
 800ee34:	08014cbc 	.word	0x08014cbc

0800ee38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee44:	f003 0308 	and.w	r3, r3, #8
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00a      	beq.n	800ee62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	430a      	orrs	r2, r1
 800ee60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee66:	f003 0301 	and.w	r3, r3, #1
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00a      	beq.n	800ee84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	430a      	orrs	r2, r1
 800ee82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee88:	f003 0302 	and.w	r3, r3, #2
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00a      	beq.n	800eea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	430a      	orrs	r2, r1
 800eea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeaa:	f003 0304 	and.w	r3, r3, #4
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00a      	beq.n	800eec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	430a      	orrs	r2, r1
 800eec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eecc:	f003 0310 	and.w	r3, r3, #16
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00a      	beq.n	800eeea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	430a      	orrs	r2, r1
 800eee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeee:	f003 0320 	and.w	r3, r3, #32
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00a      	beq.n	800ef0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	689b      	ldr	r3, [r3, #8]
 800eefc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	430a      	orrs	r2, r1
 800ef0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d01a      	beq.n	800ef4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	430a      	orrs	r2, r1
 800ef2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef36:	d10a      	bne.n	800ef4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	430a      	orrs	r2, r1
 800ef4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00a      	beq.n	800ef70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	430a      	orrs	r2, r1
 800ef6e:	605a      	str	r2, [r3, #4]
  }
}
 800ef70:	bf00      	nop
 800ef72:	370c      	adds	r7, #12
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr

0800ef7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b098      	sub	sp, #96	; 0x60
 800ef80:	af02      	add	r7, sp, #8
 800ef82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef8c:	f7f3 ff02 	bl	8002d94 <HAL_GetTick>
 800ef90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 0308 	and.w	r3, r3, #8
 800ef9c:	2b08      	cmp	r3, #8
 800ef9e:	d12f      	bne.n	800f000 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800efa4:	9300      	str	r3, [sp, #0]
 800efa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efa8:	2200      	movs	r2, #0
 800efaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 f88e 	bl	800f0d0 <UART_WaitOnFlagUntilTimeout>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d022      	beq.n	800f000 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc2:	e853 3f00 	ldrex	r3, [r3]
 800efc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800efc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efce:	653b      	str	r3, [r7, #80]	; 0x50
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	461a      	mov	r2, r3
 800efd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efd8:	647b      	str	r3, [r7, #68]	; 0x44
 800efda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800efde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efe0:	e841 2300 	strex	r3, r2, [r1]
 800efe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800efe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d1e6      	bne.n	800efba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2220      	movs	r2, #32
 800eff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2200      	movs	r2, #0
 800eff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800effc:	2303      	movs	r3, #3
 800effe:	e063      	b.n	800f0c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f003 0304 	and.w	r3, r3, #4
 800f00a:	2b04      	cmp	r3, #4
 800f00c:	d149      	bne.n	800f0a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f00e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f012:	9300      	str	r3, [sp, #0]
 800f014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f016:	2200      	movs	r2, #0
 800f018:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f000 f857 	bl	800f0d0 <UART_WaitOnFlagUntilTimeout>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d03c      	beq.n	800f0a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f030:	e853 3f00 	ldrex	r3, [r3]
 800f034:	623b      	str	r3, [r7, #32]
   return(result);
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f03c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	461a      	mov	r2, r3
 800f044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f046:	633b      	str	r3, [r7, #48]	; 0x30
 800f048:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f04e:	e841 2300 	strex	r3, r2, [r1]
 800f052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1e6      	bne.n	800f028 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	3308      	adds	r3, #8
 800f060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	e853 3f00 	ldrex	r3, [r3]
 800f068:	60fb      	str	r3, [r7, #12]
   return(result);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f023 0301 	bic.w	r3, r3, #1
 800f070:	64bb      	str	r3, [r7, #72]	; 0x48
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	3308      	adds	r3, #8
 800f078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f07a:	61fa      	str	r2, [r7, #28]
 800f07c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07e:	69b9      	ldr	r1, [r7, #24]
 800f080:	69fa      	ldr	r2, [r7, #28]
 800f082:	e841 2300 	strex	r3, r2, [r1]
 800f086:	617b      	str	r3, [r7, #20]
   return(result);
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1e5      	bne.n	800f05a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2220      	movs	r2, #32
 800f092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2200      	movs	r2, #0
 800f09a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f09e:	2303      	movs	r3, #3
 800f0a0:	e012      	b.n	800f0c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2220      	movs	r2, #32
 800f0a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2220      	movs	r2, #32
 800f0ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3758      	adds	r7, #88	; 0x58
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	603b      	str	r3, [r7, #0]
 800f0dc:	4613      	mov	r3, r2
 800f0de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0e0:	e04f      	b.n	800f182 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0e8:	d04b      	beq.n	800f182 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0ea:	f7f3 fe53 	bl	8002d94 <HAL_GetTick>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	1ad3      	subs	r3, r2, r3
 800f0f4:	69ba      	ldr	r2, [r7, #24]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d302      	bcc.n	800f100 <UART_WaitOnFlagUntilTimeout+0x30>
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d101      	bne.n	800f104 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f100:	2303      	movs	r3, #3
 800f102:	e04e      	b.n	800f1a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f003 0304 	and.w	r3, r3, #4
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d037      	beq.n	800f182 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	2b80      	cmp	r3, #128	; 0x80
 800f116:	d034      	beq.n	800f182 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	2b40      	cmp	r3, #64	; 0x40
 800f11c:	d031      	beq.n	800f182 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	69db      	ldr	r3, [r3, #28]
 800f124:	f003 0308 	and.w	r3, r3, #8
 800f128:	2b08      	cmp	r3, #8
 800f12a:	d110      	bne.n	800f14e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2208      	movs	r2, #8
 800f132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f000 f95b 	bl	800f3f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2208      	movs	r2, #8
 800f13e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f14a:	2301      	movs	r3, #1
 800f14c:	e029      	b.n	800f1a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	69db      	ldr	r3, [r3, #28]
 800f154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f15c:	d111      	bne.n	800f182 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 f941 	bl	800f3f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2220      	movs	r2, #32
 800f172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2200      	movs	r2, #0
 800f17a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f17e:	2303      	movs	r3, #3
 800f180:	e00f      	b.n	800f1a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	69da      	ldr	r2, [r3, #28]
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	4013      	ands	r3, r2
 800f18c:	68ba      	ldr	r2, [r7, #8]
 800f18e:	429a      	cmp	r2, r3
 800f190:	bf0c      	ite	eq
 800f192:	2301      	moveq	r3, #1
 800f194:	2300      	movne	r3, #0
 800f196:	b2db      	uxtb	r3, r3
 800f198:	461a      	mov	r2, r3
 800f19a:	79fb      	ldrb	r3, [r7, #7]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d0a0      	beq.n	800f0e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
	...

0800f1ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b0a3      	sub	sp, #140	; 0x8c
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	88fa      	ldrh	r2, [r7, #6]
 800f1c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	88fa      	ldrh	r2, [r7, #6]
 800f1cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	689b      	ldr	r3, [r3, #8]
 800f1da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1de:	d10e      	bne.n	800f1fe <UART_Start_Receive_IT+0x52>
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	691b      	ldr	r3, [r3, #16]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d105      	bne.n	800f1f4 <UART_Start_Receive_IT+0x48>
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f1ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f1f2:	e02d      	b.n	800f250 <UART_Start_Receive_IT+0xa4>
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	22ff      	movs	r2, #255	; 0xff
 800f1f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f1fc:	e028      	b.n	800f250 <UART_Start_Receive_IT+0xa4>
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10d      	bne.n	800f222 <UART_Start_Receive_IT+0x76>
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	691b      	ldr	r3, [r3, #16]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d104      	bne.n	800f218 <UART_Start_Receive_IT+0x6c>
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	22ff      	movs	r2, #255	; 0xff
 800f212:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f216:	e01b      	b.n	800f250 <UART_Start_Receive_IT+0xa4>
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	227f      	movs	r2, #127	; 0x7f
 800f21c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f220:	e016      	b.n	800f250 <UART_Start_Receive_IT+0xa4>
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f22a:	d10d      	bne.n	800f248 <UART_Start_Receive_IT+0x9c>
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	691b      	ldr	r3, [r3, #16]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d104      	bne.n	800f23e <UART_Start_Receive_IT+0x92>
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	227f      	movs	r2, #127	; 0x7f
 800f238:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f23c:	e008      	b.n	800f250 <UART_Start_Receive_IT+0xa4>
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	223f      	movs	r2, #63	; 0x3f
 800f242:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f246:	e003      	b.n	800f250 <UART_Start_Receive_IT+0xa4>
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2200      	movs	r2, #0
 800f24c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2200      	movs	r2, #0
 800f254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2222      	movs	r2, #34	; 0x22
 800f25c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	3308      	adds	r3, #8
 800f266:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f26a:	e853 3f00 	ldrex	r3, [r3]
 800f26e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f270:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f272:	f043 0301 	orr.w	r3, r3, #1
 800f276:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	3308      	adds	r3, #8
 800f280:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f284:	673a      	str	r2, [r7, #112]	; 0x70
 800f286:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f288:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f28a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f28c:	e841 2300 	strex	r3, r2, [r1]
 800f290:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f292:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1e3      	bne.n	800f260 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f29c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2a0:	d14f      	bne.n	800f342 <UART_Start_Receive_IT+0x196>
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f2a8:	88fa      	ldrh	r2, [r7, #6]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d349      	bcc.n	800f342 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2b6:	d107      	bne.n	800f2c8 <UART_Start_Receive_IT+0x11c>
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d103      	bne.n	800f2c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	4a47      	ldr	r2, [pc, #284]	; (800f3e0 <UART_Start_Receive_IT+0x234>)
 800f2c4:	675a      	str	r2, [r3, #116]	; 0x74
 800f2c6:	e002      	b.n	800f2ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	4a46      	ldr	r2, [pc, #280]	; (800f3e4 <UART_Start_Receive_IT+0x238>)
 800f2cc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d01a      	beq.n	800f30c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2de:	e853 3f00 	ldrex	r3, [r3]
 800f2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f2ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f2f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f2fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f2fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f300:	e841 2300 	strex	r3, r2, [r1]
 800f304:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1e4      	bne.n	800f2d6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	3308      	adds	r3, #8
 800f312:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f316:	e853 3f00 	ldrex	r3, [r3]
 800f31a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f31e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f322:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	3308      	adds	r3, #8
 800f32a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f32c:	64ba      	str	r2, [r7, #72]	; 0x48
 800f32e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f330:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f334:	e841 2300 	strex	r3, r2, [r1]
 800f338:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d1e5      	bne.n	800f30c <UART_Start_Receive_IT+0x160>
 800f340:	e046      	b.n	800f3d0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f34a:	d107      	bne.n	800f35c <UART_Start_Receive_IT+0x1b0>
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	691b      	ldr	r3, [r3, #16]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d103      	bne.n	800f35c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	4a24      	ldr	r2, [pc, #144]	; (800f3e8 <UART_Start_Receive_IT+0x23c>)
 800f358:	675a      	str	r2, [r3, #116]	; 0x74
 800f35a:	e002      	b.n	800f362 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	4a23      	ldr	r2, [pc, #140]	; (800f3ec <UART_Start_Receive_IT+0x240>)
 800f360:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	691b      	ldr	r3, [r3, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d019      	beq.n	800f39e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	e853 3f00 	ldrex	r3, [r3]
 800f376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f37e:	677b      	str	r3, [r7, #116]	; 0x74
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	461a      	mov	r2, r3
 800f386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f388:	637b      	str	r3, [r7, #52]	; 0x34
 800f38a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f38c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f38e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f390:	e841 2300 	strex	r3, r2, [r1]
 800f394:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d1e6      	bne.n	800f36a <UART_Start_Receive_IT+0x1be>
 800f39c:	e018      	b.n	800f3d0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	e853 3f00 	ldrex	r3, [r3]
 800f3aa:	613b      	str	r3, [r7, #16]
   return(result);
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	f043 0320 	orr.w	r3, r3, #32
 800f3b2:	67bb      	str	r3, [r7, #120]	; 0x78
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3bc:	623b      	str	r3, [r7, #32]
 800f3be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c0:	69f9      	ldr	r1, [r7, #28]
 800f3c2:	6a3a      	ldr	r2, [r7, #32]
 800f3c4:	e841 2300 	strex	r3, r2, [r1]
 800f3c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1e6      	bne.n	800f39e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	378c      	adds	r7, #140	; 0x8c
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	0800fc11 	.word	0x0800fc11
 800f3e4:	0800f8b1 	.word	0x0800f8b1
 800f3e8:	0800f6f9 	.word	0x0800f6f9
 800f3ec:	0800f541 	.word	0x0800f541

0800f3f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b095      	sub	sp, #84	; 0x54
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f400:	e853 3f00 	ldrex	r3, [r3]
 800f404:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f40c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f416:	643b      	str	r3, [r7, #64]	; 0x40
 800f418:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f41c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f41e:	e841 2300 	strex	r3, r2, [r1]
 800f422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1e6      	bne.n	800f3f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3308      	adds	r3, #8
 800f430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f432:	6a3b      	ldr	r3, [r7, #32]
 800f434:	e853 3f00 	ldrex	r3, [r3]
 800f438:	61fb      	str	r3, [r7, #28]
   return(result);
 800f43a:	69fa      	ldr	r2, [r7, #28]
 800f43c:	4b1e      	ldr	r3, [pc, #120]	; (800f4b8 <UART_EndRxTransfer+0xc8>)
 800f43e:	4013      	ands	r3, r2
 800f440:	64bb      	str	r3, [r7, #72]	; 0x48
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	3308      	adds	r3, #8
 800f448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f44a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f44c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f452:	e841 2300 	strex	r3, r2, [r1]
 800f456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1e5      	bne.n	800f42a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f462:	2b01      	cmp	r3, #1
 800f464:	d118      	bne.n	800f498 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	e853 3f00 	ldrex	r3, [r3]
 800f472:	60bb      	str	r3, [r7, #8]
   return(result);
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	f023 0310 	bic.w	r3, r3, #16
 800f47a:	647b      	str	r3, [r7, #68]	; 0x44
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	461a      	mov	r2, r3
 800f482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f484:	61bb      	str	r3, [r7, #24]
 800f486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f488:	6979      	ldr	r1, [r7, #20]
 800f48a:	69ba      	ldr	r2, [r7, #24]
 800f48c:	e841 2300 	strex	r3, r2, [r1]
 800f490:	613b      	str	r3, [r7, #16]
   return(result);
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1e6      	bne.n	800f466 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2220      	movs	r2, #32
 800f49c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f4ac:	bf00      	nop
 800f4ae:	3754      	adds	r7, #84	; 0x54
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	effffffe 	.word	0xeffffffe

0800f4bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f7fe ff2e 	bl	800e33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4e0:	bf00      	nop
 800f4e2:	3710      	adds	r7, #16
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b088      	sub	sp, #32
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	e853 3f00 	ldrex	r3, [r3]
 800f4fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f504:	61fb      	str	r3, [r7, #28]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	461a      	mov	r2, r3
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	61bb      	str	r3, [r7, #24]
 800f510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f512:	6979      	ldr	r1, [r7, #20]
 800f514:	69ba      	ldr	r2, [r7, #24]
 800f516:	e841 2300 	strex	r3, r2, [r1]
 800f51a:	613b      	str	r3, [r7, #16]
   return(result);
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1e6      	bne.n	800f4f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2220      	movs	r2, #32
 800f526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f7fe fef9 	bl	800e328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f536:	bf00      	nop
 800f538:	3720      	adds	r7, #32
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
	...

0800f540 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b09c      	sub	sp, #112	; 0x70
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f54e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f558:	2b22      	cmp	r3, #34	; 0x22
 800f55a:	f040 80be 	bne.w	800f6da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f564:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f568:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f56c:	b2d9      	uxtb	r1, r3
 800f56e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f572:	b2da      	uxtb	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f578:	400a      	ands	r2, r1
 800f57a:	b2d2      	uxtb	r2, r2
 800f57c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f582:	1c5a      	adds	r2, r3, #1
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f58e:	b29b      	uxth	r3, r3
 800f590:	3b01      	subs	r3, #1
 800f592:	b29a      	uxth	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f040 80a1 	bne.w	800f6ea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5b0:	e853 3f00 	ldrex	r3, [r3]
 800f5b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f5b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5ce:	e841 2300 	strex	r3, r2, [r1]
 800f5d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f5d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1e6      	bne.n	800f5a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	3308      	adds	r3, #8
 800f5e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e4:	e853 3f00 	ldrex	r3, [r3]
 800f5e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ec:	f023 0301 	bic.w	r3, r3, #1
 800f5f0:	667b      	str	r3, [r7, #100]	; 0x64
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	3308      	adds	r3, #8
 800f5f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f5fa:	647a      	str	r2, [r7, #68]	; 0x44
 800f5fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f602:	e841 2300 	strex	r3, r2, [r1]
 800f606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d1e5      	bne.n	800f5da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2220      	movs	r2, #32
 800f612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2200      	movs	r2, #0
 800f61a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	4a33      	ldr	r2, [pc, #204]	; (800f6f4 <UART_RxISR_8BIT+0x1b4>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d01f      	beq.n	800f66c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f636:	2b00      	cmp	r3, #0
 800f638:	d018      	beq.n	800f66c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f642:	e853 3f00 	ldrex	r3, [r3]
 800f646:	623b      	str	r3, [r7, #32]
   return(result);
 800f648:	6a3b      	ldr	r3, [r7, #32]
 800f64a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f64e:	663b      	str	r3, [r7, #96]	; 0x60
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	461a      	mov	r2, r3
 800f656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f658:	633b      	str	r3, [r7, #48]	; 0x30
 800f65a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f65c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f65e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f660:	e841 2300 	strex	r3, r2, [r1]
 800f664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1e6      	bne.n	800f63a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f670:	2b01      	cmp	r3, #1
 800f672:	d12e      	bne.n	800f6d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	e853 3f00 	ldrex	r3, [r3]
 800f686:	60fb      	str	r3, [r7, #12]
   return(result);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f023 0310 	bic.w	r3, r3, #16
 800f68e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	461a      	mov	r2, r3
 800f696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f698:	61fb      	str	r3, [r7, #28]
 800f69a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f69c:	69b9      	ldr	r1, [r7, #24]
 800f69e:	69fa      	ldr	r2, [r7, #28]
 800f6a0:	e841 2300 	strex	r3, r2, [r1]
 800f6a4:	617b      	str	r3, [r7, #20]
   return(result);
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1e6      	bne.n	800f67a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	69db      	ldr	r3, [r3, #28]
 800f6b2:	f003 0310 	and.w	r3, r3, #16
 800f6b6:	2b10      	cmp	r3, #16
 800f6b8:	d103      	bne.n	800f6c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2210      	movs	r2, #16
 800f6c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7fe fe40 	bl	800e350 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6d0:	e00b      	b.n	800f6ea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7f1 f80c 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800f6d8:	e007      	b.n	800f6ea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	699a      	ldr	r2, [r3, #24]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f042 0208 	orr.w	r2, r2, #8
 800f6e8:	619a      	str	r2, [r3, #24]
}
 800f6ea:	bf00      	nop
 800f6ec:	3770      	adds	r7, #112	; 0x70
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	58000c00 	.word	0x58000c00

0800f6f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b09c      	sub	sp, #112	; 0x70
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f706:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f710:	2b22      	cmp	r3, #34	; 0x22
 800f712:	f040 80be 	bne.w	800f892 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f724:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f726:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f72a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f72e:	4013      	ands	r3, r2
 800f730:	b29a      	uxth	r2, r3
 800f732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f734:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f73a:	1c9a      	adds	r2, r3, #2
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f746:	b29b      	uxth	r3, r3
 800f748:	3b01      	subs	r3, #1
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f758:	b29b      	uxth	r3, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f040 80a1 	bne.w	800f8a2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f768:	e853 3f00 	ldrex	r3, [r3]
 800f76c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f76e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f774:	667b      	str	r3, [r7, #100]	; 0x64
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	461a      	mov	r2, r3
 800f77c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f77e:	657b      	str	r3, [r7, #84]	; 0x54
 800f780:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f782:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f784:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f786:	e841 2300 	strex	r3, r2, [r1]
 800f78a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d1e6      	bne.n	800f760 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	3308      	adds	r3, #8
 800f798:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f79c:	e853 3f00 	ldrex	r3, [r3]
 800f7a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a4:	f023 0301 	bic.w	r3, r3, #1
 800f7a8:	663b      	str	r3, [r7, #96]	; 0x60
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	3308      	adds	r3, #8
 800f7b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f7b2:	643a      	str	r2, [r7, #64]	; 0x40
 800f7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7ba:	e841 2300 	strex	r3, r2, [r1]
 800f7be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d1e5      	bne.n	800f792 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2220      	movs	r2, #32
 800f7ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4a33      	ldr	r2, [pc, #204]	; (800f8ac <UART_RxISR_16BIT+0x1b4>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d01f      	beq.n	800f824 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d018      	beq.n	800f824 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f8:	6a3b      	ldr	r3, [r7, #32]
 800f7fa:	e853 3f00 	ldrex	r3, [r3]
 800f7fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f806:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	461a      	mov	r2, r3
 800f80e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f810:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f812:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f818:	e841 2300 	strex	r3, r2, [r1]
 800f81c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1e6      	bne.n	800f7f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d12e      	bne.n	800f88a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2200      	movs	r2, #0
 800f830:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	e853 3f00 	ldrex	r3, [r3]
 800f83e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	f023 0310 	bic.w	r3, r3, #16
 800f846:	65bb      	str	r3, [r7, #88]	; 0x58
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	461a      	mov	r2, r3
 800f84e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f850:	61bb      	str	r3, [r7, #24]
 800f852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f854:	6979      	ldr	r1, [r7, #20]
 800f856:	69ba      	ldr	r2, [r7, #24]
 800f858:	e841 2300 	strex	r3, r2, [r1]
 800f85c:	613b      	str	r3, [r7, #16]
   return(result);
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1e6      	bne.n	800f832 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	69db      	ldr	r3, [r3, #28]
 800f86a:	f003 0310 	and.w	r3, r3, #16
 800f86e:	2b10      	cmp	r3, #16
 800f870:	d103      	bne.n	800f87a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2210      	movs	r2, #16
 800f878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f880:	4619      	mov	r1, r3
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f7fe fd64 	bl	800e350 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f888:	e00b      	b.n	800f8a2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f7f0 ff30 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800f890:	e007      	b.n	800f8a2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	699a      	ldr	r2, [r3, #24]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f042 0208 	orr.w	r2, r2, #8
 800f8a0:	619a      	str	r2, [r3, #24]
}
 800f8a2:	bf00      	nop
 800f8a4:	3770      	adds	r7, #112	; 0x70
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	58000c00 	.word	0x58000c00

0800f8b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b0ac      	sub	sp, #176	; 0xb0
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	69db      	ldr	r3, [r3, #28]
 800f8c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8e6:	2b22      	cmp	r3, #34	; 0x22
 800f8e8:	f040 8180 	bne.w	800fbec <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f8f2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f8f6:	e123      	b.n	800fb40 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8fe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f902:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f906:	b2d9      	uxtb	r1, r3
 800f908:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f90c:	b2da      	uxtb	r2, r3
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f912:	400a      	ands	r2, r1
 800f914:	b2d2      	uxtb	r2, r2
 800f916:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f91c:	1c5a      	adds	r2, r3, #1
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f928:	b29b      	uxth	r3, r3
 800f92a:	3b01      	subs	r3, #1
 800f92c:	b29a      	uxth	r2, r3
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	69db      	ldr	r3, [r3, #28]
 800f93a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f93e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f942:	f003 0307 	and.w	r3, r3, #7
 800f946:	2b00      	cmp	r3, #0
 800f948:	d053      	beq.n	800f9f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f94a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f94e:	f003 0301 	and.w	r3, r3, #1
 800f952:	2b00      	cmp	r3, #0
 800f954:	d011      	beq.n	800f97a <UART_RxISR_8BIT_FIFOEN+0xca>
 800f956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f95a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d00b      	beq.n	800f97a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2201      	movs	r2, #1
 800f968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f970:	f043 0201 	orr.w	r2, r3, #1
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f97a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f97e:	f003 0302 	and.w	r3, r3, #2
 800f982:	2b00      	cmp	r3, #0
 800f984:	d011      	beq.n	800f9aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f98a:	f003 0301 	and.w	r3, r3, #1
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d00b      	beq.n	800f9aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2202      	movs	r2, #2
 800f998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9a0:	f043 0204 	orr.w	r2, r3, #4
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f9aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f9ae:	f003 0304 	and.w	r3, r3, #4
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d011      	beq.n	800f9da <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f9b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f9ba:	f003 0301 	and.w	r3, r3, #1
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00b      	beq.n	800f9da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2204      	movs	r2, #4
 800f9c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9d0:	f043 0202 	orr.w	r2, r3, #2
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d006      	beq.n	800f9f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7fe fca9 	bl	800e33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	f040 80a0 	bne.w	800fb40 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa08:	e853 3f00 	ldrex	r3, [r3]
 800fa0c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800fa0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa22:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa24:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa26:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fa28:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fa2a:	e841 2300 	strex	r3, r2, [r1]
 800fa2e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800fa30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d1e4      	bne.n	800fa00 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	3308      	adds	r3, #8
 800fa3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa40:	e853 3f00 	ldrex	r3, [r3]
 800fa44:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fa46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa48:	4b6e      	ldr	r3, [pc, #440]	; (800fc04 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800fa4a:	4013      	ands	r3, r2
 800fa4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	3308      	adds	r3, #8
 800fa56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fa5a:	66ba      	str	r2, [r7, #104]	; 0x68
 800fa5c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa5e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fa60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fa62:	e841 2300 	strex	r3, r2, [r1]
 800fa66:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fa68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1e3      	bne.n	800fa36 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2220      	movs	r2, #32
 800fa72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	4a60      	ldr	r2, [pc, #384]	; (800fc08 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d021      	beq.n	800fad0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d01a      	beq.n	800fad0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faa2:	e853 3f00 	ldrex	r3, [r3]
 800faa6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800faa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800faae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	461a      	mov	r2, r3
 800fab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fabc:	657b      	str	r3, [r7, #84]	; 0x54
 800fabe:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fac2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fac4:	e841 2300 	strex	r3, r2, [r1]
 800fac8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800faca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800facc:	2b00      	cmp	r3, #0
 800face:	d1e4      	bne.n	800fa9a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d130      	bne.n	800fb3a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2200      	movs	r2, #0
 800fadc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae6:	e853 3f00 	ldrex	r3, [r3]
 800faea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800faec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faee:	f023 0310 	bic.w	r3, r3, #16
 800faf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	461a      	mov	r2, r3
 800fafc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb00:	643b      	str	r3, [r7, #64]	; 0x40
 800fb02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb08:	e841 2300 	strex	r3, r2, [r1]
 800fb0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1e4      	bne.n	800fade <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	69db      	ldr	r3, [r3, #28]
 800fb1a:	f003 0310 	and.w	r3, r3, #16
 800fb1e:	2b10      	cmp	r3, #16
 800fb20:	d103      	bne.n	800fb2a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	2210      	movs	r2, #16
 800fb28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb30:	4619      	mov	r1, r3
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f7fe fc0c 	bl	800e350 <HAL_UARTEx_RxEventCallback>
 800fb38:	e002      	b.n	800fb40 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f7f0 fdd8 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fb40:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d006      	beq.n	800fb56 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800fb48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb4c:	f003 0320 	and.w	r3, r3, #32
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f47f aed1 	bne.w	800f8f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fb60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d049      	beq.n	800fbfc <UART_RxISR_8BIT_FIFOEN+0x34c>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb6e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d242      	bcs.n	800fbfc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	3308      	adds	r3, #8
 800fb7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb7e:	6a3b      	ldr	r3, [r7, #32]
 800fb80:	e853 3f00 	ldrex	r3, [r3]
 800fb84:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fb8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	3308      	adds	r3, #8
 800fb96:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fb9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fba2:	e841 2300 	strex	r3, r2, [r1]
 800fba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1e3      	bne.n	800fb76 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4a16      	ldr	r2, [pc, #88]	; (800fc0c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800fbb2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	e853 3f00 	ldrex	r3, [r3]
 800fbc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	f043 0320 	orr.w	r3, r3, #32
 800fbc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fbd6:	61bb      	str	r3, [r7, #24]
 800fbd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbda:	6979      	ldr	r1, [r7, #20]
 800fbdc:	69ba      	ldr	r2, [r7, #24]
 800fbde:	e841 2300 	strex	r3, r2, [r1]
 800fbe2:	613b      	str	r3, [r7, #16]
   return(result);
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1e4      	bne.n	800fbb4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fbea:	e007      	b.n	800fbfc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	699a      	ldr	r2, [r3, #24]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f042 0208 	orr.w	r2, r2, #8
 800fbfa:	619a      	str	r2, [r3, #24]
}
 800fbfc:	bf00      	nop
 800fbfe:	37b0      	adds	r7, #176	; 0xb0
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	effffffe 	.word	0xeffffffe
 800fc08:	58000c00 	.word	0x58000c00
 800fc0c:	0800f541 	.word	0x0800f541

0800fc10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b0ae      	sub	sp, #184	; 0xb8
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc1e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	69db      	ldr	r3, [r3, #28]
 800fc28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	689b      	ldr	r3, [r3, #8]
 800fc3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc46:	2b22      	cmp	r3, #34	; 0x22
 800fc48:	f040 8184 	bne.w	800ff54 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc52:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fc56:	e127      	b.n	800fea8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800fc6a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800fc6e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800fc72:	4013      	ands	r3, r2
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fc7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc80:	1c9a      	adds	r2, r3, #2
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	3b01      	subs	r3, #1
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	69db      	ldr	r3, [r3, #28]
 800fc9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fca6:	f003 0307 	and.w	r3, r3, #7
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d053      	beq.n	800fd56 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fcae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fcb2:	f003 0301 	and.w	r3, r3, #1
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d011      	beq.n	800fcde <UART_RxISR_16BIT_FIFOEN+0xce>
 800fcba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fcbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d00b      	beq.n	800fcde <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2201      	movs	r2, #1
 800fccc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcd4:	f043 0201 	orr.w	r2, r3, #1
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fce2:	f003 0302 	and.w	r3, r3, #2
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d011      	beq.n	800fd0e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fcea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fcee:	f003 0301 	and.w	r3, r3, #1
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00b      	beq.n	800fd0e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2202      	movs	r2, #2
 800fcfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd04:	f043 0204 	orr.w	r2, r3, #4
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fd12:	f003 0304 	and.w	r3, r3, #4
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d011      	beq.n	800fd3e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fd1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fd1e:	f003 0301 	and.w	r3, r3, #1
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00b      	beq.n	800fd3e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	2204      	movs	r2, #4
 800fd2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd34:	f043 0202 	orr.w	r2, r3, #2
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d006      	beq.n	800fd56 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7fe faf7 	bl	800e33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f040 80a2 	bne.w	800fea8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd6c:	e853 3f00 	ldrex	r3, [r3]
 800fd70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fd72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	461a      	mov	r2, r3
 800fd82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd8a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fd8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fd92:	e841 2300 	strex	r3, r2, [r1]
 800fd96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fd98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d1e2      	bne.n	800fd64 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	3308      	adds	r3, #8
 800fda4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fda8:	e853 3f00 	ldrex	r3, [r3]
 800fdac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fdae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fdb0:	4b6e      	ldr	r3, [pc, #440]	; (800ff6c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800fdb2:	4013      	ands	r3, r2
 800fdb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	3308      	adds	r3, #8
 800fdbe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fdc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fdc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fdc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fdca:	e841 2300 	strex	r3, r2, [r1]
 800fdce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fdd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d1e3      	bne.n	800fd9e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2220      	movs	r2, #32
 800fdda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4a60      	ldr	r2, [pc, #384]	; (800ff70 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d021      	beq.n	800fe38 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d01a      	beq.n	800fe38 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe0a:	e853 3f00 	ldrex	r3, [r3]
 800fe0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fe10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe24:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe2c:	e841 2300 	strex	r3, r2, [r1]
 800fe30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fe32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d1e4      	bne.n	800fe02 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d130      	bne.n	800fea2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2200      	movs	r2, #0
 800fe44:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4e:	e853 3f00 	ldrex	r3, [r3]
 800fe52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe56:	f023 0310 	bic.w	r3, r3, #16
 800fe5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	461a      	mov	r2, r3
 800fe64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe68:	647b      	str	r3, [r7, #68]	; 0x44
 800fe6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe70:	e841 2300 	strex	r3, r2, [r1]
 800fe74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d1e4      	bne.n	800fe46 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	69db      	ldr	r3, [r3, #28]
 800fe82:	f003 0310 	and.w	r3, r3, #16
 800fe86:	2b10      	cmp	r3, #16
 800fe88:	d103      	bne.n	800fe92 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2210      	movs	r2, #16
 800fe90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe98:	4619      	mov	r1, r3
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f7fe fa58 	bl	800e350 <HAL_UARTEx_RxEventCallback>
 800fea0:	e002      	b.n	800fea8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f7f0 fc24 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fea8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800feac:	2b00      	cmp	r3, #0
 800feae:	d006      	beq.n	800febe <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800feb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800feb4:	f003 0320 	and.w	r3, r3, #32
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f47f aecd 	bne.w	800fc58 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fec4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fec8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d049      	beq.n	800ff64 <UART_RxISR_16BIT_FIFOEN+0x354>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fed6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800feda:	429a      	cmp	r2, r3
 800fedc:	d242      	bcs.n	800ff64 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	3308      	adds	r3, #8
 800fee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee8:	e853 3f00 	ldrex	r3, [r3]
 800feec:	623b      	str	r3, [r7, #32]
   return(result);
 800feee:	6a3b      	ldr	r3, [r7, #32]
 800fef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	3308      	adds	r3, #8
 800fefe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff02:	633a      	str	r2, [r7, #48]	; 0x30
 800ff04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff0a:	e841 2300 	strex	r3, r2, [r1]
 800ff0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d1e3      	bne.n	800fede <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4a16      	ldr	r2, [pc, #88]	; (800ff74 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ff1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	e853 3f00 	ldrex	r3, [r3]
 800ff28:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f043 0320 	orr.w	r3, r3, #32
 800ff30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	461a      	mov	r2, r3
 800ff3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff3e:	61fb      	str	r3, [r7, #28]
 800ff40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff42:	69b9      	ldr	r1, [r7, #24]
 800ff44:	69fa      	ldr	r2, [r7, #28]
 800ff46:	e841 2300 	strex	r3, r2, [r1]
 800ff4a:	617b      	str	r3, [r7, #20]
   return(result);
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d1e4      	bne.n	800ff1c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff52:	e007      	b.n	800ff64 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	699a      	ldr	r2, [r3, #24]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f042 0208 	orr.w	r2, r2, #8
 800ff62:	619a      	str	r2, [r3, #24]
}
 800ff64:	bf00      	nop
 800ff66:	37b8      	adds	r7, #184	; 0xb8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	effffffe 	.word	0xeffffffe
 800ff70:	58000c00 	.word	0x58000c00
 800ff74:	0800f6f9 	.word	0x0800f6f9

0800ff78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ff80:	bf00      	nop
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff94:	bf00      	nop
 800ff96:	370c      	adds	r7, #12
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr

0800ffa0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ffa8:	bf00      	nop
 800ffaa:	370c      	adds	r7, #12
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b085      	sub	sp, #20
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d101      	bne.n	800ffca <HAL_UARTEx_DisableFifoMode+0x16>
 800ffc6:	2302      	movs	r3, #2
 800ffc8:	e027      	b.n	801001a <HAL_UARTEx_DisableFifoMode+0x66>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2224      	movs	r2, #36	; 0x24
 800ffd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f022 0201 	bic.w	r2, r2, #1
 800fff0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fff8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2200      	movs	r2, #0
 800fffe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	68fa      	ldr	r2, [r7, #12]
 8010006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2220      	movs	r2, #32
 801000c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2200      	movs	r2, #0
 8010014:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010018:	2300      	movs	r3, #0
}
 801001a:	4618      	mov	r0, r3
 801001c:	3714      	adds	r7, #20
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr

08010026 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010026:	b580      	push	{r7, lr}
 8010028:	b084      	sub	sp, #16
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
 801002e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010036:	2b01      	cmp	r3, #1
 8010038:	d101      	bne.n	801003e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801003a:	2302      	movs	r3, #2
 801003c:	e02d      	b.n	801009a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2201      	movs	r2, #1
 8010042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2224      	movs	r2, #36	; 0x24
 801004a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f022 0201 	bic.w	r2, r2, #1
 8010064:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	683a      	ldr	r2, [r7, #0]
 8010076:	430a      	orrs	r2, r1
 8010078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 f850 	bl	8010120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	68fa      	ldr	r2, [r7, #12]
 8010086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2220      	movs	r2, #32
 801008c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010098:	2300      	movs	r3, #0
}
 801009a:	4618      	mov	r0, r3
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b084      	sub	sp, #16
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
 80100aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d101      	bne.n	80100ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80100b6:	2302      	movs	r3, #2
 80100b8:	e02d      	b.n	8010116 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2201      	movs	r2, #1
 80100be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2224      	movs	r2, #36	; 0x24
 80100c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f022 0201 	bic.w	r2, r2, #1
 80100e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	689b      	ldr	r3, [r3, #8]
 80100e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	683a      	ldr	r2, [r7, #0]
 80100f2:	430a      	orrs	r2, r1
 80100f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 f812 	bl	8010120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	68fa      	ldr	r2, [r7, #12]
 8010102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2220      	movs	r2, #32
 8010108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010114:	2300      	movs	r3, #0
}
 8010116:	4618      	mov	r0, r3
 8010118:	3710      	adds	r7, #16
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
	...

08010120 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010120:	b480      	push	{r7}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801012c:	2b00      	cmp	r3, #0
 801012e:	d108      	bne.n	8010142 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2201      	movs	r2, #1
 8010134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2201      	movs	r2, #1
 801013c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010140:	e031      	b.n	80101a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010142:	2310      	movs	r3, #16
 8010144:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010146:	2310      	movs	r3, #16
 8010148:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	689b      	ldr	r3, [r3, #8]
 8010150:	0e5b      	lsrs	r3, r3, #25
 8010152:	b2db      	uxtb	r3, r3
 8010154:	f003 0307 	and.w	r3, r3, #7
 8010158:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	689b      	ldr	r3, [r3, #8]
 8010160:	0f5b      	lsrs	r3, r3, #29
 8010162:	b2db      	uxtb	r3, r3
 8010164:	f003 0307 	and.w	r3, r3, #7
 8010168:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801016a:	7bbb      	ldrb	r3, [r7, #14]
 801016c:	7b3a      	ldrb	r2, [r7, #12]
 801016e:	4911      	ldr	r1, [pc, #68]	; (80101b4 <UARTEx_SetNbDataToProcess+0x94>)
 8010170:	5c8a      	ldrb	r2, [r1, r2]
 8010172:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010176:	7b3a      	ldrb	r2, [r7, #12]
 8010178:	490f      	ldr	r1, [pc, #60]	; (80101b8 <UARTEx_SetNbDataToProcess+0x98>)
 801017a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801017c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010180:	b29a      	uxth	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010188:	7bfb      	ldrb	r3, [r7, #15]
 801018a:	7b7a      	ldrb	r2, [r7, #13]
 801018c:	4909      	ldr	r1, [pc, #36]	; (80101b4 <UARTEx_SetNbDataToProcess+0x94>)
 801018e:	5c8a      	ldrb	r2, [r1, r2]
 8010190:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010194:	7b7a      	ldrb	r2, [r7, #13]
 8010196:	4908      	ldr	r1, [pc, #32]	; (80101b8 <UARTEx_SetNbDataToProcess+0x98>)
 8010198:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801019a:	fb93 f3f2 	sdiv	r3, r3, r2
 801019e:	b29a      	uxth	r2, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80101a6:	bf00      	nop
 80101a8:	3714      	adds	r7, #20
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	08014cd4 	.word	0x08014cd4
 80101b8:	08014cdc 	.word	0x08014cdc

080101bc <__NVIC_SetPriority>:
{
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	4603      	mov	r3, r0
 80101c4:	6039      	str	r1, [r7, #0]
 80101c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80101c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	db0a      	blt.n	80101e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	b2da      	uxtb	r2, r3
 80101d4:	490c      	ldr	r1, [pc, #48]	; (8010208 <__NVIC_SetPriority+0x4c>)
 80101d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80101da:	0112      	lsls	r2, r2, #4
 80101dc:	b2d2      	uxtb	r2, r2
 80101de:	440b      	add	r3, r1
 80101e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80101e4:	e00a      	b.n	80101fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	b2da      	uxtb	r2, r3
 80101ea:	4908      	ldr	r1, [pc, #32]	; (801020c <__NVIC_SetPriority+0x50>)
 80101ec:	88fb      	ldrh	r3, [r7, #6]
 80101ee:	f003 030f 	and.w	r3, r3, #15
 80101f2:	3b04      	subs	r3, #4
 80101f4:	0112      	lsls	r2, r2, #4
 80101f6:	b2d2      	uxtb	r2, r2
 80101f8:	440b      	add	r3, r1
 80101fa:	761a      	strb	r2, [r3, #24]
}
 80101fc:	bf00      	nop
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr
 8010208:	e000e100 	.word	0xe000e100
 801020c:	e000ed00 	.word	0xe000ed00

08010210 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010210:	b580      	push	{r7, lr}
 8010212:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010214:	4b05      	ldr	r3, [pc, #20]	; (801022c <SysTick_Handler+0x1c>)
 8010216:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010218:	f002 fada 	bl	80127d0 <xTaskGetSchedulerState>
 801021c:	4603      	mov	r3, r0
 801021e:	2b01      	cmp	r3, #1
 8010220:	d001      	beq.n	8010226 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010222:	f003 f8f9 	bl	8013418 <xPortSysTickHandler>
  }
}
 8010226:	bf00      	nop
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	e000e010 	.word	0xe000e010

08010230 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010230:	b580      	push	{r7, lr}
 8010232:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010234:	2100      	movs	r1, #0
 8010236:	f06f 0004 	mvn.w	r0, #4
 801023a:	f7ff ffbf 	bl	80101bc <__NVIC_SetPriority>
#endif
}
 801023e:	bf00      	nop
 8010240:	bd80      	pop	{r7, pc}
	...

08010244 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801024a:	f3ef 8305 	mrs	r3, IPSR
 801024e:	603b      	str	r3, [r7, #0]
  return(result);
 8010250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010252:	2b00      	cmp	r3, #0
 8010254:	d003      	beq.n	801025e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010256:	f06f 0305 	mvn.w	r3, #5
 801025a:	607b      	str	r3, [r7, #4]
 801025c:	e00c      	b.n	8010278 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801025e:	4b0a      	ldr	r3, [pc, #40]	; (8010288 <osKernelInitialize+0x44>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d105      	bne.n	8010272 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010266:	4b08      	ldr	r3, [pc, #32]	; (8010288 <osKernelInitialize+0x44>)
 8010268:	2201      	movs	r2, #1
 801026a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801026c:	2300      	movs	r3, #0
 801026e:	607b      	str	r3, [r7, #4]
 8010270:	e002      	b.n	8010278 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010278:	687b      	ldr	r3, [r7, #4]
}
 801027a:	4618      	mov	r0, r3
 801027c:	370c      	adds	r7, #12
 801027e:	46bd      	mov	sp, r7
 8010280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010284:	4770      	bx	lr
 8010286:	bf00      	nop
 8010288:	2400075c 	.word	0x2400075c

0801028c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010292:	f3ef 8305 	mrs	r3, IPSR
 8010296:	603b      	str	r3, [r7, #0]
  return(result);
 8010298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801029a:	2b00      	cmp	r3, #0
 801029c:	d003      	beq.n	80102a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 801029e:	f06f 0305 	mvn.w	r3, #5
 80102a2:	607b      	str	r3, [r7, #4]
 80102a4:	e010      	b.n	80102c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80102a6:	4b0b      	ldr	r3, [pc, #44]	; (80102d4 <osKernelStart+0x48>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2b01      	cmp	r3, #1
 80102ac:	d109      	bne.n	80102c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80102ae:	f7ff ffbf 	bl	8010230 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80102b2:	4b08      	ldr	r3, [pc, #32]	; (80102d4 <osKernelStart+0x48>)
 80102b4:	2202      	movs	r2, #2
 80102b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80102b8:	f001 fda4 	bl	8011e04 <vTaskStartScheduler>
      stat = osOK;
 80102bc:	2300      	movs	r3, #0
 80102be:	607b      	str	r3, [r7, #4]
 80102c0:	e002      	b.n	80102c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80102c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80102c8:	687b      	ldr	r3, [r7, #4]
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3708      	adds	r7, #8
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	bf00      	nop
 80102d4:	2400075c 	.word	0x2400075c

080102d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80102d8:	b580      	push	{r7, lr}
 80102da:	b08e      	sub	sp, #56	; 0x38
 80102dc:	af04      	add	r7, sp, #16
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80102e4:	2300      	movs	r3, #0
 80102e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102e8:	f3ef 8305 	mrs	r3, IPSR
 80102ec:	617b      	str	r3, [r7, #20]
  return(result);
 80102ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d17e      	bne.n	80103f2 <osThreadNew+0x11a>
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d07b      	beq.n	80103f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80102fa:	2380      	movs	r3, #128	; 0x80
 80102fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80102fe:	2318      	movs	r3, #24
 8010300:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010302:	2300      	movs	r3, #0
 8010304:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801030a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d045      	beq.n	801039e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d002      	beq.n	8010320 <osThreadNew+0x48>
        name = attr->name;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	699b      	ldr	r3, [r3, #24]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d002      	beq.n	801032e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	699b      	ldr	r3, [r3, #24]
 801032c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d008      	beq.n	8010346 <osThreadNew+0x6e>
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	2b38      	cmp	r3, #56	; 0x38
 8010338:	d805      	bhi.n	8010346 <osThreadNew+0x6e>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	f003 0301 	and.w	r3, r3, #1
 8010342:	2b00      	cmp	r3, #0
 8010344:	d001      	beq.n	801034a <osThreadNew+0x72>
        return (NULL);
 8010346:	2300      	movs	r3, #0
 8010348:	e054      	b.n	80103f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	695b      	ldr	r3, [r3, #20]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d003      	beq.n	801035a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	695b      	ldr	r3, [r3, #20]
 8010356:	089b      	lsrs	r3, r3, #2
 8010358:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00e      	beq.n	8010380 <osThreadNew+0xa8>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	2b5b      	cmp	r3, #91	; 0x5b
 8010368:	d90a      	bls.n	8010380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801036e:	2b00      	cmp	r3, #0
 8010370:	d006      	beq.n	8010380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	695b      	ldr	r3, [r3, #20]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d002      	beq.n	8010380 <osThreadNew+0xa8>
        mem = 1;
 801037a:	2301      	movs	r3, #1
 801037c:	61bb      	str	r3, [r7, #24]
 801037e:	e010      	b.n	80103a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d10c      	bne.n	80103a2 <osThreadNew+0xca>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	68db      	ldr	r3, [r3, #12]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d108      	bne.n	80103a2 <osThreadNew+0xca>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	691b      	ldr	r3, [r3, #16]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d104      	bne.n	80103a2 <osThreadNew+0xca>
          mem = 0;
 8010398:	2300      	movs	r3, #0
 801039a:	61bb      	str	r3, [r7, #24]
 801039c:	e001      	b.n	80103a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801039e:	2300      	movs	r3, #0
 80103a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d110      	bne.n	80103ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80103b0:	9202      	str	r2, [sp, #8]
 80103b2:	9301      	str	r3, [sp, #4]
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	6a3a      	ldr	r2, [r7, #32]
 80103bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80103be:	68f8      	ldr	r0, [r7, #12]
 80103c0:	f001 fb4a 	bl	8011a58 <xTaskCreateStatic>
 80103c4:	4603      	mov	r3, r0
 80103c6:	613b      	str	r3, [r7, #16]
 80103c8:	e013      	b.n	80103f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d110      	bne.n	80103f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80103d0:	6a3b      	ldr	r3, [r7, #32]
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	f107 0310 	add.w	r3, r7, #16
 80103d8:	9301      	str	r3, [sp, #4]
 80103da:	69fb      	ldr	r3, [r7, #28]
 80103dc:	9300      	str	r3, [sp, #0]
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	f001 fb95 	bl	8011b12 <xTaskCreate>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d001      	beq.n	80103f2 <osThreadNew+0x11a>
            hTask = NULL;
 80103ee:	2300      	movs	r3, #0
 80103f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80103f2:	693b      	ldr	r3, [r7, #16]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3728      	adds	r7, #40	; 0x28
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010402:	f3ef 8305 	mrs	r3, IPSR
 8010406:	603b      	str	r3, [r7, #0]
  return(result);
 8010408:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801040a:	2b00      	cmp	r3, #0
 801040c:	d003      	beq.n	8010416 <osThreadYield+0x1a>
    stat = osErrorISR;
 801040e:	f06f 0305 	mvn.w	r3, #5
 8010412:	607b      	str	r3, [r7, #4]
 8010414:	e009      	b.n	801042a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8010416:	2300      	movs	r3, #0
 8010418:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801041a:	4b07      	ldr	r3, [pc, #28]	; (8010438 <osThreadYield+0x3c>)
 801041c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010420:	601a      	str	r2, [r3, #0]
 8010422:	f3bf 8f4f 	dsb	sy
 8010426:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801042a:	687b      	ldr	r3, [r7, #4]
}
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr
 8010438:	e000ed04 	.word	0xe000ed04

0801043c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010444:	f3ef 8305 	mrs	r3, IPSR
 8010448:	60bb      	str	r3, [r7, #8]
  return(result);
 801044a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801044c:	2b00      	cmp	r3, #0
 801044e:	d003      	beq.n	8010458 <osDelay+0x1c>
    stat = osErrorISR;
 8010450:	f06f 0305 	mvn.w	r3, #5
 8010454:	60fb      	str	r3, [r7, #12]
 8010456:	e007      	b.n	8010468 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010458:	2300      	movs	r3, #0
 801045a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d002      	beq.n	8010468 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f001 fc9a 	bl	8011d9c <vTaskDelay>
    }
  }

  return (stat);
 8010468:	68fb      	ldr	r3, [r7, #12]
}
 801046a:	4618      	mov	r0, r3
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8010472:	b580      	push	{r7, lr}
 8010474:	b086      	sub	sp, #24
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801047a:	2300      	movs	r3, #0
 801047c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801047e:	f3ef 8305 	mrs	r3, IPSR
 8010482:	60fb      	str	r3, [r7, #12]
  return(result);
 8010484:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8010486:	2b00      	cmp	r3, #0
 8010488:	d12d      	bne.n	80104e6 <osEventFlagsNew+0x74>
    mem = -1;
 801048a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801048e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d015      	beq.n	80104c2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	689b      	ldr	r3, [r3, #8]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d006      	beq.n	80104ac <osEventFlagsNew+0x3a>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	2b1f      	cmp	r3, #31
 80104a4:	d902      	bls.n	80104ac <osEventFlagsNew+0x3a>
        mem = 1;
 80104a6:	2301      	movs	r3, #1
 80104a8:	613b      	str	r3, [r7, #16]
 80104aa:	e00c      	b.n	80104c6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d108      	bne.n	80104c6 <osEventFlagsNew+0x54>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d104      	bne.n	80104c6 <osEventFlagsNew+0x54>
          mem = 0;
 80104bc:	2300      	movs	r3, #0
 80104be:	613b      	str	r3, [r7, #16]
 80104c0:	e001      	b.n	80104c6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80104c2:	2300      	movs	r3, #0
 80104c4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d106      	bne.n	80104da <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	689b      	ldr	r3, [r3, #8]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f000 fa3d 	bl	8010950 <xEventGroupCreateStatic>
 80104d6:	6178      	str	r0, [r7, #20]
 80104d8:	e005      	b.n	80104e6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d102      	bne.n	80104e6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80104e0:	f000 fa6d 	bl	80109be <xEventGroupCreate>
 80104e4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80104e6:	697b      	ldr	r3, [r7, #20]
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3718      	adds	r7, #24
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b086      	sub	sp, #24
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d004      	beq.n	801050e <osEventFlagsSet+0x1e>
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801050a:	2b00      	cmp	r3, #0
 801050c:	d003      	beq.n	8010516 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801050e:	f06f 0303 	mvn.w	r3, #3
 8010512:	617b      	str	r3, [r7, #20]
 8010514:	e028      	b.n	8010568 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010516:	f3ef 8305 	mrs	r3, IPSR
 801051a:	60fb      	str	r3, [r7, #12]
  return(result);
 801051c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801051e:	2b00      	cmp	r3, #0
 8010520:	d01d      	beq.n	801055e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8010522:	2300      	movs	r3, #0
 8010524:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8010526:	f107 0308 	add.w	r3, r7, #8
 801052a:	461a      	mov	r2, r3
 801052c:	6839      	ldr	r1, [r7, #0]
 801052e:	6938      	ldr	r0, [r7, #16]
 8010530:	f000 fbe8 	bl	8010d04 <xEventGroupSetBitsFromISR>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d103      	bne.n	8010542 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801053a:	f06f 0302 	mvn.w	r3, #2
 801053e:	617b      	str	r3, [r7, #20]
 8010540:	e012      	b.n	8010568 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d00d      	beq.n	8010568 <osEventFlagsSet+0x78>
 801054c:	4b09      	ldr	r3, [pc, #36]	; (8010574 <osEventFlagsSet+0x84>)
 801054e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010552:	601a      	str	r2, [r3, #0]
 8010554:	f3bf 8f4f 	dsb	sy
 8010558:	f3bf 8f6f 	isb	sy
 801055c:	e004      	b.n	8010568 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801055e:	6839      	ldr	r1, [r7, #0]
 8010560:	6938      	ldr	r0, [r7, #16]
 8010562:	f000 fb15 	bl	8010b90 <xEventGroupSetBits>
 8010566:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8010568:	697b      	ldr	r3, [r7, #20]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3718      	adds	r7, #24
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	e000ed04 	.word	0xe000ed04

08010578 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8010578:	b580      	push	{r7, lr}
 801057a:	b08c      	sub	sp, #48	; 0x30
 801057c:	af02      	add	r7, sp, #8
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]
 8010584:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d004      	beq.n	801059a <osEventFlagsWait+0x22>
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010596:	2b00      	cmp	r3, #0
 8010598:	d003      	beq.n	80105a2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801059a:	f06f 0303 	mvn.w	r3, #3
 801059e:	61fb      	str	r3, [r7, #28]
 80105a0:	e04b      	b.n	801063a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105a2:	f3ef 8305 	mrs	r3, IPSR
 80105a6:	617b      	str	r3, [r7, #20]
  return(result);
 80105a8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d003      	beq.n	80105b6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80105ae:	f06f 0305 	mvn.w	r3, #5
 80105b2:	61fb      	str	r3, [r7, #28]
 80105b4:	e041      	b.n	801063a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f003 0301 	and.w	r3, r3, #1
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d002      	beq.n	80105c6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80105c0:	2301      	movs	r3, #1
 80105c2:	627b      	str	r3, [r7, #36]	; 0x24
 80105c4:	e001      	b.n	80105ca <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80105c6:	2300      	movs	r3, #0
 80105c8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f003 0302 	and.w	r3, r3, #2
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d002      	beq.n	80105da <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80105d4:	2300      	movs	r3, #0
 80105d6:	623b      	str	r3, [r7, #32]
 80105d8:	e001      	b.n	80105de <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80105da:	2301      	movs	r3, #1
 80105dc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	9300      	str	r3, [sp, #0]
 80105e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e4:	6a3a      	ldr	r2, [r7, #32]
 80105e6:	68b9      	ldr	r1, [r7, #8]
 80105e8:	69b8      	ldr	r0, [r7, #24]
 80105ea:	f000 fa03 	bl	80109f4 <xEventGroupWaitBits>
 80105ee:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f003 0301 	and.w	r3, r3, #1
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d010      	beq.n	801061c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80105fa:	68ba      	ldr	r2, [r7, #8]
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	4013      	ands	r3, r2
 8010600:	68ba      	ldr	r2, [r7, #8]
 8010602:	429a      	cmp	r2, r3
 8010604:	d019      	beq.n	801063a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d003      	beq.n	8010614 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801060c:	f06f 0301 	mvn.w	r3, #1
 8010610:	61fb      	str	r3, [r7, #28]
 8010612:	e012      	b.n	801063a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010614:	f06f 0302 	mvn.w	r3, #2
 8010618:	61fb      	str	r3, [r7, #28]
 801061a:	e00e      	b.n	801063a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801061c:	68ba      	ldr	r2, [r7, #8]
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	4013      	ands	r3, r2
 8010622:	2b00      	cmp	r3, #0
 8010624:	d109      	bne.n	801063a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d003      	beq.n	8010634 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801062c:	f06f 0301 	mvn.w	r3, #1
 8010630:	61fb      	str	r3, [r7, #28]
 8010632:	e002      	b.n	801063a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010634:	f06f 0302 	mvn.w	r3, #2
 8010638:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801063a:	69fb      	ldr	r3, [r7, #28]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3728      	adds	r7, #40	; 0x28
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010644:	b580      	push	{r7, lr}
 8010646:	b08a      	sub	sp, #40	; 0x28
 8010648:	af02      	add	r7, sp, #8
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	60b9      	str	r1, [r7, #8]
 801064e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010650:	2300      	movs	r3, #0
 8010652:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010654:	f3ef 8305 	mrs	r3, IPSR
 8010658:	613b      	str	r3, [r7, #16]
  return(result);
 801065a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801065c:	2b00      	cmp	r3, #0
 801065e:	d15f      	bne.n	8010720 <osMessageQueueNew+0xdc>
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d05c      	beq.n	8010720 <osMessageQueueNew+0xdc>
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d059      	beq.n	8010720 <osMessageQueueNew+0xdc>
    mem = -1;
 801066c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010670:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d029      	beq.n	80106cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	689b      	ldr	r3, [r3, #8]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d012      	beq.n	80106a6 <osMessageQueueNew+0x62>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	2b4f      	cmp	r3, #79	; 0x4f
 8010686:	d90e      	bls.n	80106a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801068c:	2b00      	cmp	r3, #0
 801068e:	d00a      	beq.n	80106a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	695a      	ldr	r2, [r3, #20]
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	68b9      	ldr	r1, [r7, #8]
 8010698:	fb01 f303 	mul.w	r3, r1, r3
 801069c:	429a      	cmp	r2, r3
 801069e:	d302      	bcc.n	80106a6 <osMessageQueueNew+0x62>
        mem = 1;
 80106a0:	2301      	movs	r3, #1
 80106a2:	61bb      	str	r3, [r7, #24]
 80106a4:	e014      	b.n	80106d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	689b      	ldr	r3, [r3, #8]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d110      	bne.n	80106d0 <osMessageQueueNew+0x8c>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d10c      	bne.n	80106d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d108      	bne.n	80106d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	695b      	ldr	r3, [r3, #20]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d104      	bne.n	80106d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	61bb      	str	r3, [r7, #24]
 80106ca:	e001      	b.n	80106d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80106cc:	2300      	movs	r3, #0
 80106ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	2b01      	cmp	r3, #1
 80106d4:	d10b      	bne.n	80106ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	691a      	ldr	r2, [r3, #16]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	689b      	ldr	r3, [r3, #8]
 80106de:	2100      	movs	r1, #0
 80106e0:	9100      	str	r1, [sp, #0]
 80106e2:	68b9      	ldr	r1, [r7, #8]
 80106e4:	68f8      	ldr	r0, [r7, #12]
 80106e6:	f000 fc3d 	bl	8010f64 <xQueueGenericCreateStatic>
 80106ea:	61f8      	str	r0, [r7, #28]
 80106ec:	e008      	b.n	8010700 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80106ee:	69bb      	ldr	r3, [r7, #24]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d105      	bne.n	8010700 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80106f4:	2200      	movs	r2, #0
 80106f6:	68b9      	ldr	r1, [r7, #8]
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 fcab 	bl	8011054 <xQueueGenericCreate>
 80106fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00c      	beq.n	8010720 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d003      	beq.n	8010714 <osMessageQueueNew+0xd0>
        name = attr->name;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	617b      	str	r3, [r7, #20]
 8010712:	e001      	b.n	8010718 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010714:	2300      	movs	r3, #0
 8010716:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010718:	6979      	ldr	r1, [r7, #20]
 801071a:	69f8      	ldr	r0, [r7, #28]
 801071c:	f001 f93e 	bl	801199c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010720:	69fb      	ldr	r3, [r7, #28]
}
 8010722:	4618      	mov	r0, r3
 8010724:	3720      	adds	r7, #32
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
	...

0801072c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801072c:	b580      	push	{r7, lr}
 801072e:	b088      	sub	sp, #32
 8010730:	af00      	add	r7, sp, #0
 8010732:	60f8      	str	r0, [r7, #12]
 8010734:	60b9      	str	r1, [r7, #8]
 8010736:	603b      	str	r3, [r7, #0]
 8010738:	4613      	mov	r3, r2
 801073a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010740:	2300      	movs	r3, #0
 8010742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010744:	f3ef 8305 	mrs	r3, IPSR
 8010748:	617b      	str	r3, [r7, #20]
  return(result);
 801074a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801074c:	2b00      	cmp	r3, #0
 801074e:	d028      	beq.n	80107a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d005      	beq.n	8010762 <osMessageQueuePut+0x36>
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <osMessageQueuePut+0x36>
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d003      	beq.n	801076a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010762:	f06f 0303 	mvn.w	r3, #3
 8010766:	61fb      	str	r3, [r7, #28]
 8010768:	e038      	b.n	80107dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801076a:	2300      	movs	r3, #0
 801076c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801076e:	f107 0210 	add.w	r2, r7, #16
 8010772:	2300      	movs	r3, #0
 8010774:	68b9      	ldr	r1, [r7, #8]
 8010776:	69b8      	ldr	r0, [r7, #24]
 8010778:	f000 fdc8 	bl	801130c <xQueueGenericSendFromISR>
 801077c:	4603      	mov	r3, r0
 801077e:	2b01      	cmp	r3, #1
 8010780:	d003      	beq.n	801078a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010782:	f06f 0302 	mvn.w	r3, #2
 8010786:	61fb      	str	r3, [r7, #28]
 8010788:	e028      	b.n	80107dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d025      	beq.n	80107dc <osMessageQueuePut+0xb0>
 8010790:	4b15      	ldr	r3, [pc, #84]	; (80107e8 <osMessageQueuePut+0xbc>)
 8010792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010796:	601a      	str	r2, [r3, #0]
 8010798:	f3bf 8f4f 	dsb	sy
 801079c:	f3bf 8f6f 	isb	sy
 80107a0:	e01c      	b.n	80107dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80107a2:	69bb      	ldr	r3, [r7, #24]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d002      	beq.n	80107ae <osMessageQueuePut+0x82>
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d103      	bne.n	80107b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80107ae:	f06f 0303 	mvn.w	r3, #3
 80107b2:	61fb      	str	r3, [r7, #28]
 80107b4:	e012      	b.n	80107dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80107b6:	2300      	movs	r3, #0
 80107b8:	683a      	ldr	r2, [r7, #0]
 80107ba:	68b9      	ldr	r1, [r7, #8]
 80107bc:	69b8      	ldr	r0, [r7, #24]
 80107be:	f000 fca7 	bl	8011110 <xQueueGenericSend>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	d009      	beq.n	80107dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d003      	beq.n	80107d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80107ce:	f06f 0301 	mvn.w	r3, #1
 80107d2:	61fb      	str	r3, [r7, #28]
 80107d4:	e002      	b.n	80107dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80107d6:	f06f 0302 	mvn.w	r3, #2
 80107da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80107dc:	69fb      	ldr	r3, [r7, #28]
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3720      	adds	r7, #32
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	e000ed04 	.word	0xe000ed04

080107ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b088      	sub	sp, #32
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
 80107f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80107fe:	2300      	movs	r3, #0
 8010800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010802:	f3ef 8305 	mrs	r3, IPSR
 8010806:	617b      	str	r3, [r7, #20]
  return(result);
 8010808:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801080a:	2b00      	cmp	r3, #0
 801080c:	d028      	beq.n	8010860 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d005      	beq.n	8010820 <osMessageQueueGet+0x34>
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d002      	beq.n	8010820 <osMessageQueueGet+0x34>
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010820:	f06f 0303 	mvn.w	r3, #3
 8010824:	61fb      	str	r3, [r7, #28]
 8010826:	e037      	b.n	8010898 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010828:	2300      	movs	r3, #0
 801082a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801082c:	f107 0310 	add.w	r3, r7, #16
 8010830:	461a      	mov	r2, r3
 8010832:	68b9      	ldr	r1, [r7, #8]
 8010834:	69b8      	ldr	r0, [r7, #24]
 8010836:	f000 fee5 	bl	8011604 <xQueueReceiveFromISR>
 801083a:	4603      	mov	r3, r0
 801083c:	2b01      	cmp	r3, #1
 801083e:	d003      	beq.n	8010848 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010840:	f06f 0302 	mvn.w	r3, #2
 8010844:	61fb      	str	r3, [r7, #28]
 8010846:	e027      	b.n	8010898 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d024      	beq.n	8010898 <osMessageQueueGet+0xac>
 801084e:	4b15      	ldr	r3, [pc, #84]	; (80108a4 <osMessageQueueGet+0xb8>)
 8010850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010854:	601a      	str	r2, [r3, #0]
 8010856:	f3bf 8f4f 	dsb	sy
 801085a:	f3bf 8f6f 	isb	sy
 801085e:	e01b      	b.n	8010898 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010860:	69bb      	ldr	r3, [r7, #24]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d002      	beq.n	801086c <osMessageQueueGet+0x80>
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d103      	bne.n	8010874 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801086c:	f06f 0303 	mvn.w	r3, #3
 8010870:	61fb      	str	r3, [r7, #28]
 8010872:	e011      	b.n	8010898 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010874:	683a      	ldr	r2, [r7, #0]
 8010876:	68b9      	ldr	r1, [r7, #8]
 8010878:	69b8      	ldr	r0, [r7, #24]
 801087a:	f000 fde3 	bl	8011444 <xQueueReceive>
 801087e:	4603      	mov	r3, r0
 8010880:	2b01      	cmp	r3, #1
 8010882:	d009      	beq.n	8010898 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d003      	beq.n	8010892 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801088a:	f06f 0301 	mvn.w	r3, #1
 801088e:	61fb      	str	r3, [r7, #28]
 8010890:	e002      	b.n	8010898 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010892:	f06f 0302 	mvn.w	r3, #2
 8010896:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010898:	69fb      	ldr	r3, [r7, #28]
}
 801089a:	4618      	mov	r0, r3
 801089c:	3720      	adds	r7, #32
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop
 80108a4:	e000ed04 	.word	0xe000ed04

080108a8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b086      	sub	sp, #24
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d102      	bne.n	80108c0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80108ba:	2300      	movs	r3, #0
 80108bc:	617b      	str	r3, [r7, #20]
 80108be:	e00e      	b.n	80108de <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108c0:	f3ef 8305 	mrs	r3, IPSR
 80108c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80108c6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d004      	beq.n	80108d6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80108cc:	6938      	ldr	r0, [r7, #16]
 80108ce:	f000 ff37 	bl	8011740 <uxQueueMessagesWaitingFromISR>
 80108d2:	6178      	str	r0, [r7, #20]
 80108d4:	e003      	b.n	80108de <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80108d6:	6938      	ldr	r0, [r7, #16]
 80108d8:	f000 ff14 	bl	8011704 <uxQueueMessagesWaiting>
 80108dc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80108de:	697b      	ldr	r3, [r7, #20]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3718      	adds	r7, #24
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80108e8:	b480      	push	{r7}
 80108ea:	b085      	sub	sp, #20
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	60f8      	str	r0, [r7, #12]
 80108f0:	60b9      	str	r1, [r7, #8]
 80108f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	4a07      	ldr	r2, [pc, #28]	; (8010914 <vApplicationGetIdleTaskMemory+0x2c>)
 80108f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	4a06      	ldr	r2, [pc, #24]	; (8010918 <vApplicationGetIdleTaskMemory+0x30>)
 80108fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2280      	movs	r2, #128	; 0x80
 8010904:	601a      	str	r2, [r3, #0]
}
 8010906:	bf00      	nop
 8010908:	3714      	adds	r7, #20
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	24000760 	.word	0x24000760
 8010918:	240007bc 	.word	0x240007bc

0801091c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801091c:	b480      	push	{r7}
 801091e:	b085      	sub	sp, #20
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	4a07      	ldr	r2, [pc, #28]	; (8010948 <vApplicationGetTimerTaskMemory+0x2c>)
 801092c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	4a06      	ldr	r2, [pc, #24]	; (801094c <vApplicationGetTimerTaskMemory+0x30>)
 8010932:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f44f 7280 	mov.w	r2, #256	; 0x100
 801093a:	601a      	str	r2, [r3, #0]
}
 801093c:	bf00      	nop
 801093e:	3714      	adds	r7, #20
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr
 8010948:	240009bc 	.word	0x240009bc
 801094c:	24000a18 	.word	0x24000a18

08010950 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8010950:	b580      	push	{r7, lr}
 8010952:	b086      	sub	sp, #24
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d10a      	bne.n	8010974 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010962:	f383 8811 	msr	BASEPRI, r3
 8010966:	f3bf 8f6f 	isb	sy
 801096a:	f3bf 8f4f 	dsb	sy
 801096e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010970:	bf00      	nop
 8010972:	e7fe      	b.n	8010972 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8010974:	2320      	movs	r3, #32
 8010976:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	2b20      	cmp	r3, #32
 801097c:	d00a      	beq.n	8010994 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801097e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	60fb      	str	r3, [r7, #12]
}
 8010990:	bf00      	nop
 8010992:	e7fe      	b.n	8010992 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d00a      	beq.n	80109b4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	2200      	movs	r2, #0
 80109a2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	3304      	adds	r3, #4
 80109a8:	4618      	mov	r0, r3
 80109aa:	f000 f9bf 	bl	8010d2c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	2201      	movs	r2, #1
 80109b2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80109b4:	697b      	ldr	r3, [r7, #20]
	}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3718      	adds	r7, #24
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80109be:	b580      	push	{r7, lr}
 80109c0:	b082      	sub	sp, #8
 80109c2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80109c4:	2020      	movs	r0, #32
 80109c6:	f002 fdb7 	bl	8013538 <pvPortMalloc>
 80109ca:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00a      	beq.n	80109e8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2200      	movs	r2, #0
 80109d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	3304      	adds	r3, #4
 80109dc:	4618      	mov	r0, r3
 80109de:	f000 f9a5 	bl	8010d2c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2200      	movs	r2, #0
 80109e6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80109e8:	687b      	ldr	r3, [r7, #4]
	}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3708      	adds	r7, #8
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
	...

080109f4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b090      	sub	sp, #64	; 0x40
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
 8010a00:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8010a06:	2300      	movs	r3, #0
 8010a08:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d10a      	bne.n	8010a2a <xEventGroupWaitBits+0x36>
	__asm volatile
 8010a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a18:	f383 8811 	msr	BASEPRI, r3
 8010a1c:	f3bf 8f6f 	isb	sy
 8010a20:	f3bf 8f4f 	dsb	sy
 8010a24:	623b      	str	r3, [r7, #32]
}
 8010a26:	bf00      	nop
 8010a28:	e7fe      	b.n	8010a28 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d00a      	beq.n	8010a4a <xEventGroupWaitBits+0x56>
	__asm volatile
 8010a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a38:	f383 8811 	msr	BASEPRI, r3
 8010a3c:	f3bf 8f6f 	isb	sy
 8010a40:	f3bf 8f4f 	dsb	sy
 8010a44:	61fb      	str	r3, [r7, #28]
}
 8010a46:	bf00      	nop
 8010a48:	e7fe      	b.n	8010a48 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d10a      	bne.n	8010a66 <xEventGroupWaitBits+0x72>
	__asm volatile
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	61bb      	str	r3, [r7, #24]
}
 8010a62:	bf00      	nop
 8010a64:	e7fe      	b.n	8010a64 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a66:	f001 feb3 	bl	80127d0 <xTaskGetSchedulerState>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d102      	bne.n	8010a76 <xEventGroupWaitBits+0x82>
 8010a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d101      	bne.n	8010a7a <xEventGroupWaitBits+0x86>
 8010a76:	2301      	movs	r3, #1
 8010a78:	e000      	b.n	8010a7c <xEventGroupWaitBits+0x88>
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d10a      	bne.n	8010a96 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8010a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a84:	f383 8811 	msr	BASEPRI, r3
 8010a88:	f3bf 8f6f 	isb	sy
 8010a8c:	f3bf 8f4f 	dsb	sy
 8010a90:	617b      	str	r3, [r7, #20]
}
 8010a92:	bf00      	nop
 8010a94:	e7fe      	b.n	8010a94 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8010a96:	f001 fa1b 	bl	8011ed0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8010a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8010aa0:	683a      	ldr	r2, [r7, #0]
 8010aa2:	68b9      	ldr	r1, [r7, #8]
 8010aa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aa6:	f000 f90b 	bl	8010cc0 <prvTestWaitCondition>
 8010aaa:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8010aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d00e      	beq.n	8010ad0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8010ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d028      	beq.n	8010b12 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	43db      	mvns	r3, r3
 8010ac8:	401a      	ands	r2, r3
 8010aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010acc:	601a      	str	r2, [r3, #0]
 8010ace:	e020      	b.n	8010b12 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8010ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d104      	bne.n	8010ae0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8010ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8010ada:	2301      	movs	r3, #1
 8010adc:	633b      	str	r3, [r7, #48]	; 0x30
 8010ade:	e018      	b.n	8010b12 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d003      	beq.n	8010aee <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8010ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010aec:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d003      	beq.n	8010afc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8010af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010afa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8010afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010afe:	1d18      	adds	r0, r3, #4
 8010b00:	68ba      	ldr	r2, [r7, #8]
 8010b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b04:	4313      	orrs	r3, r2
 8010b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b08:	4619      	mov	r1, r3
 8010b0a:	f001 fbd9 	bl	80122c0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8010b12:	f001 f9eb 	bl	8011eec <xTaskResumeAll>
 8010b16:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8010b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d031      	beq.n	8010b82 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d107      	bne.n	8010b34 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8010b24:	4b19      	ldr	r3, [pc, #100]	; (8010b8c <xEventGroupWaitBits+0x198>)
 8010b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b2a:	601a      	str	r2, [r3, #0]
 8010b2c:	f3bf 8f4f 	dsb	sy
 8010b30:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8010b34:	f001 fed8 	bl	80128e8 <uxTaskResetEventItemValue>
 8010b38:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8010b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d11a      	bne.n	8010b7a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8010b44:	f002 fbd6 	bl	80132f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8010b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8010b4e:	683a      	ldr	r2, [r7, #0]
 8010b50:	68b9      	ldr	r1, [r7, #8]
 8010b52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b54:	f000 f8b4 	bl	8010cc0 <prvTestWaitCondition>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d009      	beq.n	8010b72 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d006      	beq.n	8010b72 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	43db      	mvns	r3, r3
 8010b6c:	401a      	ands	r2, r3
 8010b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b70:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8010b72:	2301      	movs	r3, #1
 8010b74:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8010b76:	f002 fbed 	bl	8013354 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010b80:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8010b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3740      	adds	r7, #64	; 0x40
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	e000ed04 	.word	0xe000ed04

08010b90 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b08e      	sub	sp, #56	; 0x38
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d10a      	bne.n	8010bc2 <xEventGroupSetBits+0x32>
	__asm volatile
 8010bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb0:	f383 8811 	msr	BASEPRI, r3
 8010bb4:	f3bf 8f6f 	isb	sy
 8010bb8:	f3bf 8f4f 	dsb	sy
 8010bbc:	613b      	str	r3, [r7, #16]
}
 8010bbe:	bf00      	nop
 8010bc0:	e7fe      	b.n	8010bc0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d00a      	beq.n	8010be2 <xEventGroupSetBits+0x52>
	__asm volatile
 8010bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd0:	f383 8811 	msr	BASEPRI, r3
 8010bd4:	f3bf 8f6f 	isb	sy
 8010bd8:	f3bf 8f4f 	dsb	sy
 8010bdc:	60fb      	str	r3, [r7, #12]
}
 8010bde:	bf00      	nop
 8010be0:	e7fe      	b.n	8010be0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8010be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be4:	3304      	adds	r3, #4
 8010be6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bea:	3308      	adds	r3, #8
 8010bec:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8010bee:	f001 f96f 	bl	8011ed0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8010bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf4:	68db      	ldr	r3, [r3, #12]
 8010bf6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	431a      	orrs	r2, r3
 8010c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c02:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8010c04:	e03c      	b.n	8010c80 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8010c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8010c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8010c12:	2300      	movs	r3, #0
 8010c14:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8010c16:	69bb      	ldr	r3, [r7, #24]
 8010c18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010c1c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010c1e:	69bb      	ldr	r3, [r7, #24]
 8010c20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010c24:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d108      	bne.n	8010c42 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8010c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c32:	681a      	ldr	r2, [r3, #0]
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	4013      	ands	r3, r2
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00b      	beq.n	8010c54 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c40:	e008      	b.n	8010c54 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8010c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c44:	681a      	ldr	r2, [r3, #0]
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	4013      	ands	r3, r2
 8010c4a:	69ba      	ldr	r2, [r7, #24]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d101      	bne.n	8010c54 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8010c50:	2301      	movs	r3, #1
 8010c52:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8010c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d010      	beq.n	8010c7c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d003      	beq.n	8010c6c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8010c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c66:	69bb      	ldr	r3, [r7, #24]
 8010c68:	4313      	orrs	r3, r2
 8010c6a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8010c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010c74:	4619      	mov	r1, r3
 8010c76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c78:	f001 fbee 	bl	8012458 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8010c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d1be      	bne.n	8010c06 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8e:	43db      	mvns	r3, r3
 8010c90:	401a      	ands	r2, r3
 8010c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c94:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8010c96:	f001 f929 	bl	8011eec <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8010c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9c:	681b      	ldr	r3, [r3, #0]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3738      	adds	r7, #56	; 0x38
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}

08010ca6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8010ca6:	b580      	push	{r7, lr}
 8010ca8:	b082      	sub	sp, #8
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
 8010cae:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8010cb0:	6839      	ldr	r1, [r7, #0]
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f7ff ff6c 	bl	8010b90 <xEventGroupSetBits>
}
 8010cb8:	bf00      	nop
 8010cba:	3708      	adds	r7, #8
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b087      	sub	sp, #28
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	60b9      	str	r1, [r7, #8]
 8010cca:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d107      	bne.n	8010ce6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	4013      	ands	r3, r2
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d00a      	beq.n	8010cf6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010ce0:	2301      	movs	r3, #1
 8010ce2:	617b      	str	r3, [r7, #20]
 8010ce4:	e007      	b.n	8010cf6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8010ce6:	68fa      	ldr	r2, [r7, #12]
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	4013      	ands	r3, r2
 8010cec:	68ba      	ldr	r2, [r7, #8]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d101      	bne.n	8010cf6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8010cf6:	697b      	ldr	r3, [r7, #20]
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	371c      	adds	r7, #28
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b086      	sub	sp, #24
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	68ba      	ldr	r2, [r7, #8]
 8010d14:	68f9      	ldr	r1, [r7, #12]
 8010d16:	4804      	ldr	r0, [pc, #16]	; (8010d28 <xEventGroupSetBitsFromISR+0x24>)
 8010d18:	f002 f9a0 	bl	801305c <xTimerPendFunctionCallFromISR>
 8010d1c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8010d1e:	697b      	ldr	r3, [r7, #20]
	}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3718      	adds	r7, #24
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	08010ca7 	.word	0x08010ca7

08010d2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f103 0208 	add.w	r2, r3, #8
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f103 0208 	add.w	r2, r3, #8
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f103 0208 	add.w	r2, r3, #8
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010d60:	bf00      	nop
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2200      	movs	r2, #0
 8010d78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010d7a:	bf00      	nop
 8010d7c:	370c      	adds	r7, #12
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr

08010d86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010d86:	b480      	push	{r7}
 8010d88:	b085      	sub	sp, #20
 8010d8a:	af00      	add	r7, sp, #0
 8010d8c:	6078      	str	r0, [r7, #4]
 8010d8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	68fa      	ldr	r2, [r7, #12]
 8010d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	689a      	ldr	r2, [r3, #8]
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	683a      	ldr	r2, [r7, #0]
 8010daa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	683a      	ldr	r2, [r7, #0]
 8010db0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	1c5a      	adds	r2, r3, #1
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	601a      	str	r2, [r3, #0]
}
 8010dc2:	bf00      	nop
 8010dc4:	3714      	adds	r7, #20
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010dce:	b480      	push	{r7}
 8010dd0:	b085      	sub	sp, #20
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	6078      	str	r0, [r7, #4]
 8010dd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010de4:	d103      	bne.n	8010dee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	691b      	ldr	r3, [r3, #16]
 8010dea:	60fb      	str	r3, [r7, #12]
 8010dec:	e00c      	b.n	8010e08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	3308      	adds	r3, #8
 8010df2:	60fb      	str	r3, [r7, #12]
 8010df4:	e002      	b.n	8010dfc <vListInsert+0x2e>
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	60fb      	str	r3, [r7, #12]
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	68ba      	ldr	r2, [r7, #8]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d2f6      	bcs.n	8010df6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	685a      	ldr	r2, [r3, #4]
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	683a      	ldr	r2, [r7, #0]
 8010e16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	683a      	ldr	r2, [r7, #0]
 8010e22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	601a      	str	r2, [r3, #0]
}
 8010e34:	bf00      	nop
 8010e36:	3714      	adds	r7, #20
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr

08010e40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010e40:	b480      	push	{r7}
 8010e42:	b085      	sub	sp, #20
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	691b      	ldr	r3, [r3, #16]
 8010e4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	6892      	ldr	r2, [r2, #8]
 8010e56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	689b      	ldr	r3, [r3, #8]
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	6852      	ldr	r2, [r2, #4]
 8010e60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d103      	bne.n	8010e74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	689a      	ldr	r2, [r3, #8]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2200      	movs	r2, #0
 8010e78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	1e5a      	subs	r2, r3, #1
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3714      	adds	r7, #20
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d10a      	bne.n	8010ebe <xQueueGenericReset+0x2a>
	__asm volatile
 8010ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eac:	f383 8811 	msr	BASEPRI, r3
 8010eb0:	f3bf 8f6f 	isb	sy
 8010eb4:	f3bf 8f4f 	dsb	sy
 8010eb8:	60bb      	str	r3, [r7, #8]
}
 8010eba:	bf00      	nop
 8010ebc:	e7fe      	b.n	8010ebc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010ebe:	f002 fa19 	bl	80132f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	681a      	ldr	r2, [r3, #0]
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eca:	68f9      	ldr	r1, [r7, #12]
 8010ecc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010ece:	fb01 f303 	mul.w	r3, r1, r3
 8010ed2:	441a      	add	r2, r3
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2200      	movs	r2, #0
 8010edc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	68f9      	ldr	r1, [r7, #12]
 8010ef2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010ef4:	fb01 f303 	mul.w	r3, r1, r3
 8010ef8:	441a      	add	r2, r3
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	22ff      	movs	r2, #255	; 0xff
 8010f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	22ff      	movs	r2, #255	; 0xff
 8010f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d114      	bne.n	8010f3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	691b      	ldr	r3, [r3, #16]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d01a      	beq.n	8010f52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	3310      	adds	r3, #16
 8010f20:	4618      	mov	r0, r3
 8010f22:	f001 fa35 	bl	8012390 <xTaskRemoveFromEventList>
 8010f26:	4603      	mov	r3, r0
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d012      	beq.n	8010f52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010f2c:	4b0c      	ldr	r3, [pc, #48]	; (8010f60 <xQueueGenericReset+0xcc>)
 8010f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f32:	601a      	str	r2, [r3, #0]
 8010f34:	f3bf 8f4f 	dsb	sy
 8010f38:	f3bf 8f6f 	isb	sy
 8010f3c:	e009      	b.n	8010f52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	3310      	adds	r3, #16
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7ff fef2 	bl	8010d2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	3324      	adds	r3, #36	; 0x24
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7ff feed 	bl	8010d2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010f52:	f002 f9ff 	bl	8013354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010f56:	2301      	movs	r3, #1
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3710      	adds	r7, #16
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	e000ed04 	.word	0xe000ed04

08010f64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b08e      	sub	sp, #56	; 0x38
 8010f68:	af02      	add	r7, sp, #8
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	60b9      	str	r1, [r7, #8]
 8010f6e:	607a      	str	r2, [r7, #4]
 8010f70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d10a      	bne.n	8010f8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7c:	f383 8811 	msr	BASEPRI, r3
 8010f80:	f3bf 8f6f 	isb	sy
 8010f84:	f3bf 8f4f 	dsb	sy
 8010f88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010f8a:	bf00      	nop
 8010f8c:	e7fe      	b.n	8010f8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d10a      	bne.n	8010faa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f98:	f383 8811 	msr	BASEPRI, r3
 8010f9c:	f3bf 8f6f 	isb	sy
 8010fa0:	f3bf 8f4f 	dsb	sy
 8010fa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010fa6:	bf00      	nop
 8010fa8:	e7fe      	b.n	8010fa8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d002      	beq.n	8010fb6 <xQueueGenericCreateStatic+0x52>
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d001      	beq.n	8010fba <xQueueGenericCreateStatic+0x56>
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e000      	b.n	8010fbc <xQueueGenericCreateStatic+0x58>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d10a      	bne.n	8010fd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc4:	f383 8811 	msr	BASEPRI, r3
 8010fc8:	f3bf 8f6f 	isb	sy
 8010fcc:	f3bf 8f4f 	dsb	sy
 8010fd0:	623b      	str	r3, [r7, #32]
}
 8010fd2:	bf00      	nop
 8010fd4:	e7fe      	b.n	8010fd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d102      	bne.n	8010fe2 <xQueueGenericCreateStatic+0x7e>
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d101      	bne.n	8010fe6 <xQueueGenericCreateStatic+0x82>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	e000      	b.n	8010fe8 <xQueueGenericCreateStatic+0x84>
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d10a      	bne.n	8011002 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff0:	f383 8811 	msr	BASEPRI, r3
 8010ff4:	f3bf 8f6f 	isb	sy
 8010ff8:	f3bf 8f4f 	dsb	sy
 8010ffc:	61fb      	str	r3, [r7, #28]
}
 8010ffe:	bf00      	nop
 8011000:	e7fe      	b.n	8011000 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011002:	2350      	movs	r3, #80	; 0x50
 8011004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	2b50      	cmp	r3, #80	; 0x50
 801100a:	d00a      	beq.n	8011022 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801100c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011010:	f383 8811 	msr	BASEPRI, r3
 8011014:	f3bf 8f6f 	isb	sy
 8011018:	f3bf 8f4f 	dsb	sy
 801101c:	61bb      	str	r3, [r7, #24]
}
 801101e:	bf00      	nop
 8011020:	e7fe      	b.n	8011020 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011022:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102a:	2b00      	cmp	r3, #0
 801102c:	d00d      	beq.n	801104a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011030:	2201      	movs	r2, #1
 8011032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011036:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103c:	9300      	str	r3, [sp, #0]
 801103e:	4613      	mov	r3, r2
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	68b9      	ldr	r1, [r7, #8]
 8011044:	68f8      	ldr	r0, [r7, #12]
 8011046:	f000 f83f 	bl	80110c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801104c:	4618      	mov	r0, r3
 801104e:	3730      	adds	r7, #48	; 0x30
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011054:	b580      	push	{r7, lr}
 8011056:	b08a      	sub	sp, #40	; 0x28
 8011058:	af02      	add	r7, sp, #8
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	4613      	mov	r3, r2
 8011060:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d10a      	bne.n	801107e <xQueueGenericCreate+0x2a>
	__asm volatile
 8011068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801106c:	f383 8811 	msr	BASEPRI, r3
 8011070:	f3bf 8f6f 	isb	sy
 8011074:	f3bf 8f4f 	dsb	sy
 8011078:	613b      	str	r3, [r7, #16]
}
 801107a:	bf00      	nop
 801107c:	e7fe      	b.n	801107c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	68ba      	ldr	r2, [r7, #8]
 8011082:	fb02 f303 	mul.w	r3, r2, r3
 8011086:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	3350      	adds	r3, #80	; 0x50
 801108c:	4618      	mov	r0, r3
 801108e:	f002 fa53 	bl	8013538 <pvPortMalloc>
 8011092:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d011      	beq.n	80110be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801109a:	69bb      	ldr	r3, [r7, #24]
 801109c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	3350      	adds	r3, #80	; 0x50
 80110a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80110a4:	69bb      	ldr	r3, [r7, #24]
 80110a6:	2200      	movs	r2, #0
 80110a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80110ac:	79fa      	ldrb	r2, [r7, #7]
 80110ae:	69bb      	ldr	r3, [r7, #24]
 80110b0:	9300      	str	r3, [sp, #0]
 80110b2:	4613      	mov	r3, r2
 80110b4:	697a      	ldr	r2, [r7, #20]
 80110b6:	68b9      	ldr	r1, [r7, #8]
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f000 f805 	bl	80110c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80110be:	69bb      	ldr	r3, [r7, #24]
	}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3720      	adds	r7, #32
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	607a      	str	r2, [r7, #4]
 80110d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d103      	bne.n	80110e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80110dc:	69bb      	ldr	r3, [r7, #24]
 80110de:	69ba      	ldr	r2, [r7, #24]
 80110e0:	601a      	str	r2, [r3, #0]
 80110e2:	e002      	b.n	80110ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80110e4:	69bb      	ldr	r3, [r7, #24]
 80110e6:	687a      	ldr	r2, [r7, #4]
 80110e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80110ea:	69bb      	ldr	r3, [r7, #24]
 80110ec:	68fa      	ldr	r2, [r7, #12]
 80110ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	68ba      	ldr	r2, [r7, #8]
 80110f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80110f6:	2101      	movs	r1, #1
 80110f8:	69b8      	ldr	r0, [r7, #24]
 80110fa:	f7ff fecb 	bl	8010e94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	78fa      	ldrb	r2, [r7, #3]
 8011102:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011106:	bf00      	nop
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
	...

08011110 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b08e      	sub	sp, #56	; 0x38
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	607a      	str	r2, [r7, #4]
 801111c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801111e:	2300      	movs	r3, #0
 8011120:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011128:	2b00      	cmp	r3, #0
 801112a:	d10a      	bne.n	8011142 <xQueueGenericSend+0x32>
	__asm volatile
 801112c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011130:	f383 8811 	msr	BASEPRI, r3
 8011134:	f3bf 8f6f 	isb	sy
 8011138:	f3bf 8f4f 	dsb	sy
 801113c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801113e:	bf00      	nop
 8011140:	e7fe      	b.n	8011140 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d103      	bne.n	8011150 <xQueueGenericSend+0x40>
 8011148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801114c:	2b00      	cmp	r3, #0
 801114e:	d101      	bne.n	8011154 <xQueueGenericSend+0x44>
 8011150:	2301      	movs	r3, #1
 8011152:	e000      	b.n	8011156 <xQueueGenericSend+0x46>
 8011154:	2300      	movs	r3, #0
 8011156:	2b00      	cmp	r3, #0
 8011158:	d10a      	bne.n	8011170 <xQueueGenericSend+0x60>
	__asm volatile
 801115a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115e:	f383 8811 	msr	BASEPRI, r3
 8011162:	f3bf 8f6f 	isb	sy
 8011166:	f3bf 8f4f 	dsb	sy
 801116a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801116c:	bf00      	nop
 801116e:	e7fe      	b.n	801116e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	2b02      	cmp	r3, #2
 8011174:	d103      	bne.n	801117e <xQueueGenericSend+0x6e>
 8011176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801117a:	2b01      	cmp	r3, #1
 801117c:	d101      	bne.n	8011182 <xQueueGenericSend+0x72>
 801117e:	2301      	movs	r3, #1
 8011180:	e000      	b.n	8011184 <xQueueGenericSend+0x74>
 8011182:	2300      	movs	r3, #0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d10a      	bne.n	801119e <xQueueGenericSend+0x8e>
	__asm volatile
 8011188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118c:	f383 8811 	msr	BASEPRI, r3
 8011190:	f3bf 8f6f 	isb	sy
 8011194:	f3bf 8f4f 	dsb	sy
 8011198:	623b      	str	r3, [r7, #32]
}
 801119a:	bf00      	nop
 801119c:	e7fe      	b.n	801119c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801119e:	f001 fb17 	bl	80127d0 <xTaskGetSchedulerState>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d102      	bne.n	80111ae <xQueueGenericSend+0x9e>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d101      	bne.n	80111b2 <xQueueGenericSend+0xa2>
 80111ae:	2301      	movs	r3, #1
 80111b0:	e000      	b.n	80111b4 <xQueueGenericSend+0xa4>
 80111b2:	2300      	movs	r3, #0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d10a      	bne.n	80111ce <xQueueGenericSend+0xbe>
	__asm volatile
 80111b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111bc:	f383 8811 	msr	BASEPRI, r3
 80111c0:	f3bf 8f6f 	isb	sy
 80111c4:	f3bf 8f4f 	dsb	sy
 80111c8:	61fb      	str	r3, [r7, #28]
}
 80111ca:	bf00      	nop
 80111cc:	e7fe      	b.n	80111cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80111ce:	f002 f891 	bl	80132f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111da:	429a      	cmp	r2, r3
 80111dc:	d302      	bcc.n	80111e4 <xQueueGenericSend+0xd4>
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	2b02      	cmp	r3, #2
 80111e2:	d129      	bne.n	8011238 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80111e4:	683a      	ldr	r2, [r7, #0]
 80111e6:	68b9      	ldr	r1, [r7, #8]
 80111e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111ea:	f000 fac7 	bl	801177c <prvCopyDataToQueue>
 80111ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d010      	beq.n	801121a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fa:	3324      	adds	r3, #36	; 0x24
 80111fc:	4618      	mov	r0, r3
 80111fe:	f001 f8c7 	bl	8012390 <xTaskRemoveFromEventList>
 8011202:	4603      	mov	r3, r0
 8011204:	2b00      	cmp	r3, #0
 8011206:	d013      	beq.n	8011230 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011208:	4b3f      	ldr	r3, [pc, #252]	; (8011308 <xQueueGenericSend+0x1f8>)
 801120a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801120e:	601a      	str	r2, [r3, #0]
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	f3bf 8f6f 	isb	sy
 8011218:	e00a      	b.n	8011230 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121c:	2b00      	cmp	r3, #0
 801121e:	d007      	beq.n	8011230 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011220:	4b39      	ldr	r3, [pc, #228]	; (8011308 <xQueueGenericSend+0x1f8>)
 8011222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011226:	601a      	str	r2, [r3, #0]
 8011228:	f3bf 8f4f 	dsb	sy
 801122c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011230:	f002 f890 	bl	8013354 <vPortExitCritical>
				return pdPASS;
 8011234:	2301      	movs	r3, #1
 8011236:	e063      	b.n	8011300 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d103      	bne.n	8011246 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801123e:	f002 f889 	bl	8013354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011242:	2300      	movs	r3, #0
 8011244:	e05c      	b.n	8011300 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011248:	2b00      	cmp	r3, #0
 801124a:	d106      	bne.n	801125a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801124c:	f107 0314 	add.w	r3, r7, #20
 8011250:	4618      	mov	r0, r3
 8011252:	f001 f963 	bl	801251c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011256:	2301      	movs	r3, #1
 8011258:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801125a:	f002 f87b 	bl	8013354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801125e:	f000 fe37 	bl	8011ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011262:	f002 f847 	bl	80132f4 <vPortEnterCritical>
 8011266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801126c:	b25b      	sxtb	r3, r3
 801126e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011272:	d103      	bne.n	801127c <xQueueGenericSend+0x16c>
 8011274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011276:	2200      	movs	r2, #0
 8011278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801127c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801127e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011282:	b25b      	sxtb	r3, r3
 8011284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011288:	d103      	bne.n	8011292 <xQueueGenericSend+0x182>
 801128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128c:	2200      	movs	r2, #0
 801128e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011292:	f002 f85f 	bl	8013354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011296:	1d3a      	adds	r2, r7, #4
 8011298:	f107 0314 	add.w	r3, r7, #20
 801129c:	4611      	mov	r1, r2
 801129e:	4618      	mov	r0, r3
 80112a0:	f001 f952 	bl	8012548 <xTaskCheckForTimeOut>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d124      	bne.n	80112f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80112aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112ac:	f000 fb5e 	bl	801196c <prvIsQueueFull>
 80112b0:	4603      	mov	r3, r0
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d018      	beq.n	80112e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80112b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b8:	3310      	adds	r3, #16
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	4611      	mov	r1, r2
 80112be:	4618      	mov	r0, r3
 80112c0:	f000 ffda 	bl	8012278 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80112c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112c6:	f000 fae9 	bl	801189c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80112ca:	f000 fe0f 	bl	8011eec <xTaskResumeAll>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	f47f af7c 	bne.w	80111ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80112d6:	4b0c      	ldr	r3, [pc, #48]	; (8011308 <xQueueGenericSend+0x1f8>)
 80112d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112dc:	601a      	str	r2, [r3, #0]
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	e772      	b.n	80111ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80112e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112ea:	f000 fad7 	bl	801189c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80112ee:	f000 fdfd 	bl	8011eec <xTaskResumeAll>
 80112f2:	e76c      	b.n	80111ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80112f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112f6:	f000 fad1 	bl	801189c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80112fa:	f000 fdf7 	bl	8011eec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80112fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011300:	4618      	mov	r0, r3
 8011302:	3738      	adds	r7, #56	; 0x38
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}
 8011308:	e000ed04 	.word	0xe000ed04

0801130c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b090      	sub	sp, #64	; 0x40
 8011310:	af00      	add	r7, sp, #0
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	60b9      	str	r1, [r7, #8]
 8011316:	607a      	str	r2, [r7, #4]
 8011318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801131e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011320:	2b00      	cmp	r3, #0
 8011322:	d10a      	bne.n	801133a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011328:	f383 8811 	msr	BASEPRI, r3
 801132c:	f3bf 8f6f 	isb	sy
 8011330:	f3bf 8f4f 	dsb	sy
 8011334:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011336:	bf00      	nop
 8011338:	e7fe      	b.n	8011338 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d103      	bne.n	8011348 <xQueueGenericSendFromISR+0x3c>
 8011340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011344:	2b00      	cmp	r3, #0
 8011346:	d101      	bne.n	801134c <xQueueGenericSendFromISR+0x40>
 8011348:	2301      	movs	r3, #1
 801134a:	e000      	b.n	801134e <xQueueGenericSendFromISR+0x42>
 801134c:	2300      	movs	r3, #0
 801134e:	2b00      	cmp	r3, #0
 8011350:	d10a      	bne.n	8011368 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011356:	f383 8811 	msr	BASEPRI, r3
 801135a:	f3bf 8f6f 	isb	sy
 801135e:	f3bf 8f4f 	dsb	sy
 8011362:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011364:	bf00      	nop
 8011366:	e7fe      	b.n	8011366 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	2b02      	cmp	r3, #2
 801136c:	d103      	bne.n	8011376 <xQueueGenericSendFromISR+0x6a>
 801136e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011372:	2b01      	cmp	r3, #1
 8011374:	d101      	bne.n	801137a <xQueueGenericSendFromISR+0x6e>
 8011376:	2301      	movs	r3, #1
 8011378:	e000      	b.n	801137c <xQueueGenericSendFromISR+0x70>
 801137a:	2300      	movs	r3, #0
 801137c:	2b00      	cmp	r3, #0
 801137e:	d10a      	bne.n	8011396 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011384:	f383 8811 	msr	BASEPRI, r3
 8011388:	f3bf 8f6f 	isb	sy
 801138c:	f3bf 8f4f 	dsb	sy
 8011390:	623b      	str	r3, [r7, #32]
}
 8011392:	bf00      	nop
 8011394:	e7fe      	b.n	8011394 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011396:	f002 f88f 	bl	80134b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801139a:	f3ef 8211 	mrs	r2, BASEPRI
 801139e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a2:	f383 8811 	msr	BASEPRI, r3
 80113a6:	f3bf 8f6f 	isb	sy
 80113aa:	f3bf 8f4f 	dsb	sy
 80113ae:	61fa      	str	r2, [r7, #28]
 80113b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80113b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80113b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80113b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113be:	429a      	cmp	r2, r3
 80113c0:	d302      	bcc.n	80113c8 <xQueueGenericSendFromISR+0xbc>
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	2b02      	cmp	r3, #2
 80113c6:	d12f      	bne.n	8011428 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80113c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80113d8:	683a      	ldr	r2, [r7, #0]
 80113da:	68b9      	ldr	r1, [r7, #8]
 80113dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113de:	f000 f9cd 	bl	801177c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80113e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80113e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113ea:	d112      	bne.n	8011412 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d016      	beq.n	8011422 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f6:	3324      	adds	r3, #36	; 0x24
 80113f8:	4618      	mov	r0, r3
 80113fa:	f000 ffc9 	bl	8012390 <xTaskRemoveFromEventList>
 80113fe:	4603      	mov	r3, r0
 8011400:	2b00      	cmp	r3, #0
 8011402:	d00e      	beq.n	8011422 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00b      	beq.n	8011422 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2201      	movs	r2, #1
 801140e:	601a      	str	r2, [r3, #0]
 8011410:	e007      	b.n	8011422 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011412:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011416:	3301      	adds	r3, #1
 8011418:	b2db      	uxtb	r3, r3
 801141a:	b25a      	sxtb	r2, r3
 801141c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011422:	2301      	movs	r3, #1
 8011424:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011426:	e001      	b.n	801142c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011428:	2300      	movs	r3, #0
 801142a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801142e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011436:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801143a:	4618      	mov	r0, r3
 801143c:	3740      	adds	r7, #64	; 0x40
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
	...

08011444 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b08c      	sub	sp, #48	; 0x30
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	60b9      	str	r1, [r7, #8]
 801144e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011450:	2300      	movs	r3, #0
 8011452:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145a:	2b00      	cmp	r3, #0
 801145c:	d10a      	bne.n	8011474 <xQueueReceive+0x30>
	__asm volatile
 801145e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011462:	f383 8811 	msr	BASEPRI, r3
 8011466:	f3bf 8f6f 	isb	sy
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	623b      	str	r3, [r7, #32]
}
 8011470:	bf00      	nop
 8011472:	e7fe      	b.n	8011472 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d103      	bne.n	8011482 <xQueueReceive+0x3e>
 801147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801147e:	2b00      	cmp	r3, #0
 8011480:	d101      	bne.n	8011486 <xQueueReceive+0x42>
 8011482:	2301      	movs	r3, #1
 8011484:	e000      	b.n	8011488 <xQueueReceive+0x44>
 8011486:	2300      	movs	r3, #0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d10a      	bne.n	80114a2 <xQueueReceive+0x5e>
	__asm volatile
 801148c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011490:	f383 8811 	msr	BASEPRI, r3
 8011494:	f3bf 8f6f 	isb	sy
 8011498:	f3bf 8f4f 	dsb	sy
 801149c:	61fb      	str	r3, [r7, #28]
}
 801149e:	bf00      	nop
 80114a0:	e7fe      	b.n	80114a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114a2:	f001 f995 	bl	80127d0 <xTaskGetSchedulerState>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d102      	bne.n	80114b2 <xQueueReceive+0x6e>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d101      	bne.n	80114b6 <xQueueReceive+0x72>
 80114b2:	2301      	movs	r3, #1
 80114b4:	e000      	b.n	80114b8 <xQueueReceive+0x74>
 80114b6:	2300      	movs	r3, #0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d10a      	bne.n	80114d2 <xQueueReceive+0x8e>
	__asm volatile
 80114bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c0:	f383 8811 	msr	BASEPRI, r3
 80114c4:	f3bf 8f6f 	isb	sy
 80114c8:	f3bf 8f4f 	dsb	sy
 80114cc:	61bb      	str	r3, [r7, #24]
}
 80114ce:	bf00      	nop
 80114d0:	e7fe      	b.n	80114d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80114d2:	f001 ff0f 	bl	80132f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80114dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d01f      	beq.n	8011522 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80114e2:	68b9      	ldr	r1, [r7, #8]
 80114e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114e6:	f000 f9b3 	bl	8011850 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80114ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ec:	1e5a      	subs	r2, r3, #1
 80114ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f4:	691b      	ldr	r3, [r3, #16]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d00f      	beq.n	801151a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fc:	3310      	adds	r3, #16
 80114fe:	4618      	mov	r0, r3
 8011500:	f000 ff46 	bl	8012390 <xTaskRemoveFromEventList>
 8011504:	4603      	mov	r3, r0
 8011506:	2b00      	cmp	r3, #0
 8011508:	d007      	beq.n	801151a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801150a:	4b3d      	ldr	r3, [pc, #244]	; (8011600 <xQueueReceive+0x1bc>)
 801150c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011510:	601a      	str	r2, [r3, #0]
 8011512:	f3bf 8f4f 	dsb	sy
 8011516:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801151a:	f001 ff1b 	bl	8013354 <vPortExitCritical>
				return pdPASS;
 801151e:	2301      	movs	r3, #1
 8011520:	e069      	b.n	80115f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d103      	bne.n	8011530 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011528:	f001 ff14 	bl	8013354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801152c:	2300      	movs	r3, #0
 801152e:	e062      	b.n	80115f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011532:	2b00      	cmp	r3, #0
 8011534:	d106      	bne.n	8011544 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011536:	f107 0310 	add.w	r3, r7, #16
 801153a:	4618      	mov	r0, r3
 801153c:	f000 ffee 	bl	801251c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011540:	2301      	movs	r3, #1
 8011542:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011544:	f001 ff06 	bl	8013354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011548:	f000 fcc2 	bl	8011ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801154c:	f001 fed2 	bl	80132f4 <vPortEnterCritical>
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011556:	b25b      	sxtb	r3, r3
 8011558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801155c:	d103      	bne.n	8011566 <xQueueReceive+0x122>
 801155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011560:	2200      	movs	r2, #0
 8011562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801156c:	b25b      	sxtb	r3, r3
 801156e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011572:	d103      	bne.n	801157c <xQueueReceive+0x138>
 8011574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011576:	2200      	movs	r2, #0
 8011578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801157c:	f001 feea 	bl	8013354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011580:	1d3a      	adds	r2, r7, #4
 8011582:	f107 0310 	add.w	r3, r7, #16
 8011586:	4611      	mov	r1, r2
 8011588:	4618      	mov	r0, r3
 801158a:	f000 ffdd 	bl	8012548 <xTaskCheckForTimeOut>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d123      	bne.n	80115dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011596:	f000 f9d3 	bl	8011940 <prvIsQueueEmpty>
 801159a:	4603      	mov	r3, r0
 801159c:	2b00      	cmp	r3, #0
 801159e:	d017      	beq.n	80115d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80115a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a2:	3324      	adds	r3, #36	; 0x24
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	4611      	mov	r1, r2
 80115a8:	4618      	mov	r0, r3
 80115aa:	f000 fe65 	bl	8012278 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80115ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115b0:	f000 f974 	bl	801189c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80115b4:	f000 fc9a 	bl	8011eec <xTaskResumeAll>
 80115b8:	4603      	mov	r3, r0
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d189      	bne.n	80114d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80115be:	4b10      	ldr	r3, [pc, #64]	; (8011600 <xQueueReceive+0x1bc>)
 80115c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115c4:	601a      	str	r2, [r3, #0]
 80115c6:	f3bf 8f4f 	dsb	sy
 80115ca:	f3bf 8f6f 	isb	sy
 80115ce:	e780      	b.n	80114d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80115d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115d2:	f000 f963 	bl	801189c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80115d6:	f000 fc89 	bl	8011eec <xTaskResumeAll>
 80115da:	e77a      	b.n	80114d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80115dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115de:	f000 f95d 	bl	801189c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80115e2:	f000 fc83 	bl	8011eec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115e8:	f000 f9aa 	bl	8011940 <prvIsQueueEmpty>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	f43f af6f 	beq.w	80114d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80115f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3730      	adds	r7, #48	; 0x30
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	e000ed04 	.word	0xe000ed04

08011604 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b08e      	sub	sp, #56	; 0x38
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011616:	2b00      	cmp	r3, #0
 8011618:	d10a      	bne.n	8011630 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801161a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	623b      	str	r3, [r7, #32]
}
 801162c:	bf00      	nop
 801162e:	e7fe      	b.n	801162e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d103      	bne.n	801163e <xQueueReceiveFromISR+0x3a>
 8011636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801163a:	2b00      	cmp	r3, #0
 801163c:	d101      	bne.n	8011642 <xQueueReceiveFromISR+0x3e>
 801163e:	2301      	movs	r3, #1
 8011640:	e000      	b.n	8011644 <xQueueReceiveFromISR+0x40>
 8011642:	2300      	movs	r3, #0
 8011644:	2b00      	cmp	r3, #0
 8011646:	d10a      	bne.n	801165e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164c:	f383 8811 	msr	BASEPRI, r3
 8011650:	f3bf 8f6f 	isb	sy
 8011654:	f3bf 8f4f 	dsb	sy
 8011658:	61fb      	str	r3, [r7, #28]
}
 801165a:	bf00      	nop
 801165c:	e7fe      	b.n	801165c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801165e:	f001 ff2b 	bl	80134b8 <vPortValidateInterruptPriority>
	__asm volatile
 8011662:	f3ef 8211 	mrs	r2, BASEPRI
 8011666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801166a:	f383 8811 	msr	BASEPRI, r3
 801166e:	f3bf 8f6f 	isb	sy
 8011672:	f3bf 8f4f 	dsb	sy
 8011676:	61ba      	str	r2, [r7, #24]
 8011678:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801167a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801167c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011682:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011686:	2b00      	cmp	r3, #0
 8011688:	d02f      	beq.n	80116ea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011694:	68b9      	ldr	r1, [r7, #8]
 8011696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011698:	f000 f8da 	bl	8011850 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169e:	1e5a      	subs	r2, r3, #1
 80116a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80116a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80116a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116ac:	d112      	bne.n	80116d4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b0:	691b      	ldr	r3, [r3, #16]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d016      	beq.n	80116e4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b8:	3310      	adds	r3, #16
 80116ba:	4618      	mov	r0, r3
 80116bc:	f000 fe68 	bl	8012390 <xTaskRemoveFromEventList>
 80116c0:	4603      	mov	r3, r0
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d00e      	beq.n	80116e4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d00b      	beq.n	80116e4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2201      	movs	r2, #1
 80116d0:	601a      	str	r2, [r3, #0]
 80116d2:	e007      	b.n	80116e4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80116d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116d8:	3301      	adds	r3, #1
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	b25a      	sxtb	r2, r3
 80116de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80116e4:	2301      	movs	r3, #1
 80116e6:	637b      	str	r3, [r7, #52]	; 0x34
 80116e8:	e001      	b.n	80116ee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80116ea:	2300      	movs	r3, #0
 80116ec:	637b      	str	r3, [r7, #52]	; 0x34
 80116ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	f383 8811 	msr	BASEPRI, r3
}
 80116f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80116fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3738      	adds	r7, #56	; 0x38
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b084      	sub	sp, #16
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d10a      	bne.n	8011728 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8011712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011716:	f383 8811 	msr	BASEPRI, r3
 801171a:	f3bf 8f6f 	isb	sy
 801171e:	f3bf 8f4f 	dsb	sy
 8011722:	60bb      	str	r3, [r7, #8]
}
 8011724:	bf00      	nop
 8011726:	e7fe      	b.n	8011726 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8011728:	f001 fde4 	bl	80132f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011730:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8011732:	f001 fe0f 	bl	8013354 <vPortExitCritical>

	return uxReturn;
 8011736:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011738:	4618      	mov	r0, r3
 801173a:	3710      	adds	r7, #16
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8011740:	b480      	push	{r7}
 8011742:	b087      	sub	sp, #28
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10a      	bne.n	8011768 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8011752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011756:	f383 8811 	msr	BASEPRI, r3
 801175a:	f3bf 8f6f 	isb	sy
 801175e:	f3bf 8f4f 	dsb	sy
 8011762:	60fb      	str	r3, [r7, #12]
}
 8011764:	bf00      	nop
 8011766:	e7fe      	b.n	8011766 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801176c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801176e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011770:	4618      	mov	r0, r3
 8011772:	371c      	adds	r7, #28
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr

0801177c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b086      	sub	sp, #24
 8011780:	af00      	add	r7, sp, #0
 8011782:	60f8      	str	r0, [r7, #12]
 8011784:	60b9      	str	r1, [r7, #8]
 8011786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011788:	2300      	movs	r3, #0
 801178a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011790:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011796:	2b00      	cmp	r3, #0
 8011798:	d10d      	bne.n	80117b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d14d      	bne.n	801183e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	4618      	mov	r0, r3
 80117a8:	f001 f830 	bl	801280c <xTaskPriorityDisinherit>
 80117ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2200      	movs	r2, #0
 80117b2:	609a      	str	r2, [r3, #8]
 80117b4:	e043      	b.n	801183e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d119      	bne.n	80117f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	6858      	ldr	r0, [r3, #4]
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117c4:	461a      	mov	r2, r3
 80117c6:	68b9      	ldr	r1, [r7, #8]
 80117c8:	f002 f8da 	bl	8013980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	685a      	ldr	r2, [r3, #4]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117d4:	441a      	add	r2, r3
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	685a      	ldr	r2, [r3, #4]
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d32b      	bcc.n	801183e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	605a      	str	r2, [r3, #4]
 80117ee:	e026      	b.n	801183e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	68d8      	ldr	r0, [r3, #12]
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117f8:	461a      	mov	r2, r3
 80117fa:	68b9      	ldr	r1, [r7, #8]
 80117fc:	f002 f8c0 	bl	8013980 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	68da      	ldr	r2, [r3, #12]
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011808:	425b      	negs	r3, r3
 801180a:	441a      	add	r2, r3
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	68da      	ldr	r2, [r3, #12]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	429a      	cmp	r2, r3
 801181a:	d207      	bcs.n	801182c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	689a      	ldr	r2, [r3, #8]
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011824:	425b      	negs	r3, r3
 8011826:	441a      	add	r2, r3
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2b02      	cmp	r3, #2
 8011830:	d105      	bne.n	801183e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d002      	beq.n	801183e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	3b01      	subs	r3, #1
 801183c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	1c5a      	adds	r2, r3, #1
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011846:	697b      	ldr	r3, [r7, #20]
}
 8011848:	4618      	mov	r0, r3
 801184a:	3718      	adds	r7, #24
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801185e:	2b00      	cmp	r3, #0
 8011860:	d018      	beq.n	8011894 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	68da      	ldr	r2, [r3, #12]
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801186a:	441a      	add	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	68da      	ldr	r2, [r3, #12]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	689b      	ldr	r3, [r3, #8]
 8011878:	429a      	cmp	r2, r3
 801187a:	d303      	bcc.n	8011884 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	68d9      	ldr	r1, [r3, #12]
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801188c:	461a      	mov	r2, r3
 801188e:	6838      	ldr	r0, [r7, #0]
 8011890:	f002 f876 	bl	8013980 <memcpy>
	}
}
 8011894:	bf00      	nop
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b084      	sub	sp, #16
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80118a4:	f001 fd26 	bl	80132f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80118b0:	e011      	b.n	80118d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d012      	beq.n	80118e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	3324      	adds	r3, #36	; 0x24
 80118be:	4618      	mov	r0, r3
 80118c0:	f000 fd66 	bl	8012390 <xTaskRemoveFromEventList>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d001      	beq.n	80118ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80118ca:	f000 fe9f 	bl	801260c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80118ce:	7bfb      	ldrb	r3, [r7, #15]
 80118d0:	3b01      	subs	r3, #1
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80118d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	dce9      	bgt.n	80118b2 <prvUnlockQueue+0x16>
 80118de:	e000      	b.n	80118e2 <prvUnlockQueue+0x46>
					break;
 80118e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	22ff      	movs	r2, #255	; 0xff
 80118e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80118ea:	f001 fd33 	bl	8013354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80118ee:	f001 fd01 	bl	80132f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80118f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80118fa:	e011      	b.n	8011920 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	691b      	ldr	r3, [r3, #16]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d012      	beq.n	801192a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	3310      	adds	r3, #16
 8011908:	4618      	mov	r0, r3
 801190a:	f000 fd41 	bl	8012390 <xTaskRemoveFromEventList>
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d001      	beq.n	8011918 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011914:	f000 fe7a 	bl	801260c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011918:	7bbb      	ldrb	r3, [r7, #14]
 801191a:	3b01      	subs	r3, #1
 801191c:	b2db      	uxtb	r3, r3
 801191e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011924:	2b00      	cmp	r3, #0
 8011926:	dce9      	bgt.n	80118fc <prvUnlockQueue+0x60>
 8011928:	e000      	b.n	801192c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801192a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	22ff      	movs	r2, #255	; 0xff
 8011930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011934:	f001 fd0e 	bl	8013354 <vPortExitCritical>
}
 8011938:	bf00      	nop
 801193a:	3710      	adds	r7, #16
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}

08011940 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b084      	sub	sp, #16
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011948:	f001 fcd4 	bl	80132f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011950:	2b00      	cmp	r3, #0
 8011952:	d102      	bne.n	801195a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011954:	2301      	movs	r3, #1
 8011956:	60fb      	str	r3, [r7, #12]
 8011958:	e001      	b.n	801195e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801195a:	2300      	movs	r3, #0
 801195c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801195e:	f001 fcf9 	bl	8013354 <vPortExitCritical>

	return xReturn;
 8011962:	68fb      	ldr	r3, [r7, #12]
}
 8011964:	4618      	mov	r0, r3
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b084      	sub	sp, #16
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011974:	f001 fcbe 	bl	80132f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011980:	429a      	cmp	r2, r3
 8011982:	d102      	bne.n	801198a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011984:	2301      	movs	r3, #1
 8011986:	60fb      	str	r3, [r7, #12]
 8011988:	e001      	b.n	801198e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801198a:	2300      	movs	r3, #0
 801198c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801198e:	f001 fce1 	bl	8013354 <vPortExitCritical>

	return xReturn;
 8011992:	68fb      	ldr	r3, [r7, #12]
}
 8011994:	4618      	mov	r0, r3
 8011996:	3710      	adds	r7, #16
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801199c:	b480      	push	{r7}
 801199e:	b085      	sub	sp, #20
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80119a6:	2300      	movs	r3, #0
 80119a8:	60fb      	str	r3, [r7, #12]
 80119aa:	e014      	b.n	80119d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80119ac:	4a0f      	ldr	r2, [pc, #60]	; (80119ec <vQueueAddToRegistry+0x50>)
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d10b      	bne.n	80119d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80119b8:	490c      	ldr	r1, [pc, #48]	; (80119ec <vQueueAddToRegistry+0x50>)
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	683a      	ldr	r2, [r7, #0]
 80119be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80119c2:	4a0a      	ldr	r2, [pc, #40]	; (80119ec <vQueueAddToRegistry+0x50>)
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	00db      	lsls	r3, r3, #3
 80119c8:	4413      	add	r3, r2
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80119ce:	e006      	b.n	80119de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	3301      	adds	r3, #1
 80119d4:	60fb      	str	r3, [r7, #12]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	2b07      	cmp	r3, #7
 80119da:	d9e7      	bls.n	80119ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80119dc:	bf00      	nop
 80119de:	bf00      	nop
 80119e0:	3714      	adds	r7, #20
 80119e2:	46bd      	mov	sp, r7
 80119e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e8:	4770      	bx	lr
 80119ea:	bf00      	nop
 80119ec:	24000e18 	.word	0x24000e18

080119f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b086      	sub	sp, #24
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011a00:	f001 fc78 	bl	80132f4 <vPortEnterCritical>
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a0a:	b25b      	sxtb	r3, r3
 8011a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a10:	d103      	bne.n	8011a1a <vQueueWaitForMessageRestricted+0x2a>
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	2200      	movs	r2, #0
 8011a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a20:	b25b      	sxtb	r3, r3
 8011a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a26:	d103      	bne.n	8011a30 <vQueueWaitForMessageRestricted+0x40>
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a30:	f001 fc90 	bl	8013354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d106      	bne.n	8011a4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	3324      	adds	r3, #36	; 0x24
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	68b9      	ldr	r1, [r7, #8]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f000 fc77 	bl	8012338 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011a4a:	6978      	ldr	r0, [r7, #20]
 8011a4c:	f7ff ff26 	bl	801189c <prvUnlockQueue>
	}
 8011a50:	bf00      	nop
 8011a52:	3718      	adds	r7, #24
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b08e      	sub	sp, #56	; 0x38
 8011a5c:	af04      	add	r7, sp, #16
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]
 8011a64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d10a      	bne.n	8011a82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8011a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a70:	f383 8811 	msr	BASEPRI, r3
 8011a74:	f3bf 8f6f 	isb	sy
 8011a78:	f3bf 8f4f 	dsb	sy
 8011a7c:	623b      	str	r3, [r7, #32]
}
 8011a7e:	bf00      	nop
 8011a80:	e7fe      	b.n	8011a80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10a      	bne.n	8011a9e <xTaskCreateStatic+0x46>
	__asm volatile
 8011a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8c:	f383 8811 	msr	BASEPRI, r3
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	61fb      	str	r3, [r7, #28]
}
 8011a9a:	bf00      	nop
 8011a9c:	e7fe      	b.n	8011a9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011a9e:	235c      	movs	r3, #92	; 0x5c
 8011aa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	2b5c      	cmp	r3, #92	; 0x5c
 8011aa6:	d00a      	beq.n	8011abe <xTaskCreateStatic+0x66>
	__asm volatile
 8011aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aac:	f383 8811 	msr	BASEPRI, r3
 8011ab0:	f3bf 8f6f 	isb	sy
 8011ab4:	f3bf 8f4f 	dsb	sy
 8011ab8:	61bb      	str	r3, [r7, #24]
}
 8011aba:	bf00      	nop
 8011abc:	e7fe      	b.n	8011abc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011abe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d01e      	beq.n	8011b04 <xTaskCreateStatic+0xac>
 8011ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d01b      	beq.n	8011b04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ace:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ad4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad8:	2202      	movs	r2, #2
 8011ada:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011ade:	2300      	movs	r3, #0
 8011ae0:	9303      	str	r3, [sp, #12]
 8011ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae4:	9302      	str	r3, [sp, #8]
 8011ae6:	f107 0314 	add.w	r3, r7, #20
 8011aea:	9301      	str	r3, [sp, #4]
 8011aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aee:	9300      	str	r3, [sp, #0]
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	68b9      	ldr	r1, [r7, #8]
 8011af6:	68f8      	ldr	r0, [r7, #12]
 8011af8:	f000 f850 	bl	8011b9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011afe:	f000 f8dd 	bl	8011cbc <prvAddNewTaskToReadyList>
 8011b02:	e001      	b.n	8011b08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011b04:	2300      	movs	r3, #0
 8011b06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011b08:	697b      	ldr	r3, [r7, #20]
	}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3728      	adds	r7, #40	; 0x28
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}

08011b12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011b12:	b580      	push	{r7, lr}
 8011b14:	b08c      	sub	sp, #48	; 0x30
 8011b16:	af04      	add	r7, sp, #16
 8011b18:	60f8      	str	r0, [r7, #12]
 8011b1a:	60b9      	str	r1, [r7, #8]
 8011b1c:	603b      	str	r3, [r7, #0]
 8011b1e:	4613      	mov	r3, r2
 8011b20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011b22:	88fb      	ldrh	r3, [r7, #6]
 8011b24:	009b      	lsls	r3, r3, #2
 8011b26:	4618      	mov	r0, r3
 8011b28:	f001 fd06 	bl	8013538 <pvPortMalloc>
 8011b2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d00e      	beq.n	8011b52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011b34:	205c      	movs	r0, #92	; 0x5c
 8011b36:	f001 fcff 	bl	8013538 <pvPortMalloc>
 8011b3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d003      	beq.n	8011b4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	697a      	ldr	r2, [r7, #20]
 8011b46:	631a      	str	r2, [r3, #48]	; 0x30
 8011b48:	e005      	b.n	8011b56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011b4a:	6978      	ldr	r0, [r7, #20]
 8011b4c:	f001 fdc0 	bl	80136d0 <vPortFree>
 8011b50:	e001      	b.n	8011b56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011b52:	2300      	movs	r3, #0
 8011b54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d017      	beq.n	8011b8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011b64:	88fa      	ldrh	r2, [r7, #6]
 8011b66:	2300      	movs	r3, #0
 8011b68:	9303      	str	r3, [sp, #12]
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	9302      	str	r3, [sp, #8]
 8011b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b70:	9301      	str	r3, [sp, #4]
 8011b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	68b9      	ldr	r1, [r7, #8]
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f000 f80e 	bl	8011b9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011b80:	69f8      	ldr	r0, [r7, #28]
 8011b82:	f000 f89b 	bl	8011cbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011b86:	2301      	movs	r3, #1
 8011b88:	61bb      	str	r3, [r7, #24]
 8011b8a:	e002      	b.n	8011b92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011b92:	69bb      	ldr	r3, [r7, #24]
	}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3720      	adds	r7, #32
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}

08011b9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b088      	sub	sp, #32
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	60b9      	str	r1, [r7, #8]
 8011ba6:	607a      	str	r2, [r7, #4]
 8011ba8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	21a5      	movs	r1, #165	; 0xa5
 8011bb6:	f001 fef1 	bl	801399c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011bbe:	6879      	ldr	r1, [r7, #4]
 8011bc0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011bc4:	440b      	add	r3, r1
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	4413      	add	r3, r2
 8011bca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	f023 0307 	bic.w	r3, r3, #7
 8011bd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	f003 0307 	and.w	r3, r3, #7
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d00a      	beq.n	8011bf4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be2:	f383 8811 	msr	BASEPRI, r3
 8011be6:	f3bf 8f6f 	isb	sy
 8011bea:	f3bf 8f4f 	dsb	sy
 8011bee:	617b      	str	r3, [r7, #20]
}
 8011bf0:	bf00      	nop
 8011bf2:	e7fe      	b.n	8011bf2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d01f      	beq.n	8011c3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	61fb      	str	r3, [r7, #28]
 8011bfe:	e012      	b.n	8011c26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011c00:	68ba      	ldr	r2, [r7, #8]
 8011c02:	69fb      	ldr	r3, [r7, #28]
 8011c04:	4413      	add	r3, r2
 8011c06:	7819      	ldrb	r1, [r3, #0]
 8011c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c0a:	69fb      	ldr	r3, [r7, #28]
 8011c0c:	4413      	add	r3, r2
 8011c0e:	3334      	adds	r3, #52	; 0x34
 8011c10:	460a      	mov	r2, r1
 8011c12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011c14:	68ba      	ldr	r2, [r7, #8]
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	4413      	add	r3, r2
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d006      	beq.n	8011c2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011c20:	69fb      	ldr	r3, [r7, #28]
 8011c22:	3301      	adds	r3, #1
 8011c24:	61fb      	str	r3, [r7, #28]
 8011c26:	69fb      	ldr	r3, [r7, #28]
 8011c28:	2b0f      	cmp	r3, #15
 8011c2a:	d9e9      	bls.n	8011c00 <prvInitialiseNewTask+0x64>
 8011c2c:	e000      	b.n	8011c30 <prvInitialiseNewTask+0x94>
			{
				break;
 8011c2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c32:	2200      	movs	r2, #0
 8011c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011c38:	e003      	b.n	8011c42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c44:	2b37      	cmp	r3, #55	; 0x37
 8011c46:	d901      	bls.n	8011c4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011c48:	2337      	movs	r3, #55	; 0x37
 8011c4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c60:	3304      	adds	r3, #4
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7ff f882 	bl	8010d6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c6a:	3318      	adds	r3, #24
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7ff f87d 	bl	8010d6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c90:	2200      	movs	r2, #0
 8011c92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011c96:	683a      	ldr	r2, [r7, #0]
 8011c98:	68f9      	ldr	r1, [r7, #12]
 8011c9a:	69b8      	ldr	r0, [r7, #24]
 8011c9c:	f001 f9fe 	bl	801309c <pxPortInitialiseStack>
 8011ca0:	4602      	mov	r2, r0
 8011ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d002      	beq.n	8011cb2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011cb2:	bf00      	nop
 8011cb4:	3720      	adds	r7, #32
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
	...

08011cbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011cc4:	f001 fb16 	bl	80132f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011cc8:	4b2d      	ldr	r3, [pc, #180]	; (8011d80 <prvAddNewTaskToReadyList+0xc4>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	3301      	adds	r3, #1
 8011cce:	4a2c      	ldr	r2, [pc, #176]	; (8011d80 <prvAddNewTaskToReadyList+0xc4>)
 8011cd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011cd2:	4b2c      	ldr	r3, [pc, #176]	; (8011d84 <prvAddNewTaskToReadyList+0xc8>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d109      	bne.n	8011cee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011cda:	4a2a      	ldr	r2, [pc, #168]	; (8011d84 <prvAddNewTaskToReadyList+0xc8>)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011ce0:	4b27      	ldr	r3, [pc, #156]	; (8011d80 <prvAddNewTaskToReadyList+0xc4>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	d110      	bne.n	8011d0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011ce8:	f000 fcb4 	bl	8012654 <prvInitialiseTaskLists>
 8011cec:	e00d      	b.n	8011d0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011cee:	4b26      	ldr	r3, [pc, #152]	; (8011d88 <prvAddNewTaskToReadyList+0xcc>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d109      	bne.n	8011d0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011cf6:	4b23      	ldr	r3, [pc, #140]	; (8011d84 <prvAddNewTaskToReadyList+0xc8>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d802      	bhi.n	8011d0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011d04:	4a1f      	ldr	r2, [pc, #124]	; (8011d84 <prvAddNewTaskToReadyList+0xc8>)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011d0a:	4b20      	ldr	r3, [pc, #128]	; (8011d8c <prvAddNewTaskToReadyList+0xd0>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	3301      	adds	r3, #1
 8011d10:	4a1e      	ldr	r2, [pc, #120]	; (8011d8c <prvAddNewTaskToReadyList+0xd0>)
 8011d12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011d14:	4b1d      	ldr	r3, [pc, #116]	; (8011d8c <prvAddNewTaskToReadyList+0xd0>)
 8011d16:	681a      	ldr	r2, [r3, #0]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d20:	4b1b      	ldr	r3, [pc, #108]	; (8011d90 <prvAddNewTaskToReadyList+0xd4>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d903      	bls.n	8011d30 <prvAddNewTaskToReadyList+0x74>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d2c:	4a18      	ldr	r2, [pc, #96]	; (8011d90 <prvAddNewTaskToReadyList+0xd4>)
 8011d2e:	6013      	str	r3, [r2, #0]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d34:	4613      	mov	r3, r2
 8011d36:	009b      	lsls	r3, r3, #2
 8011d38:	4413      	add	r3, r2
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	4a15      	ldr	r2, [pc, #84]	; (8011d94 <prvAddNewTaskToReadyList+0xd8>)
 8011d3e:	441a      	add	r2, r3
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	3304      	adds	r3, #4
 8011d44:	4619      	mov	r1, r3
 8011d46:	4610      	mov	r0, r2
 8011d48:	f7ff f81d 	bl	8010d86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011d4c:	f001 fb02 	bl	8013354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011d50:	4b0d      	ldr	r3, [pc, #52]	; (8011d88 <prvAddNewTaskToReadyList+0xcc>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d00e      	beq.n	8011d76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011d58:	4b0a      	ldr	r3, [pc, #40]	; (8011d84 <prvAddNewTaskToReadyList+0xc8>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d207      	bcs.n	8011d76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011d66:	4b0c      	ldr	r3, [pc, #48]	; (8011d98 <prvAddNewTaskToReadyList+0xdc>)
 8011d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d6c:	601a      	str	r2, [r3, #0]
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d76:	bf00      	nop
 8011d78:	3708      	adds	r7, #8
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	2400132c 	.word	0x2400132c
 8011d84:	24000e58 	.word	0x24000e58
 8011d88:	24001338 	.word	0x24001338
 8011d8c:	24001348 	.word	0x24001348
 8011d90:	24001334 	.word	0x24001334
 8011d94:	24000e5c 	.word	0x24000e5c
 8011d98:	e000ed04 	.word	0xe000ed04

08011d9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b084      	sub	sp, #16
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011da4:	2300      	movs	r3, #0
 8011da6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d017      	beq.n	8011dde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011dae:	4b13      	ldr	r3, [pc, #76]	; (8011dfc <vTaskDelay+0x60>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d00a      	beq.n	8011dcc <vTaskDelay+0x30>
	__asm volatile
 8011db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dba:	f383 8811 	msr	BASEPRI, r3
 8011dbe:	f3bf 8f6f 	isb	sy
 8011dc2:	f3bf 8f4f 	dsb	sy
 8011dc6:	60bb      	str	r3, [r7, #8]
}
 8011dc8:	bf00      	nop
 8011dca:	e7fe      	b.n	8011dca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011dcc:	f000 f880 	bl	8011ed0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f000 fda0 	bl	8012918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011dd8:	f000 f888 	bl	8011eec <xTaskResumeAll>
 8011ddc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d107      	bne.n	8011df4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011de4:	4b06      	ldr	r3, [pc, #24]	; (8011e00 <vTaskDelay+0x64>)
 8011de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dea:	601a      	str	r2, [r3, #0]
 8011dec:	f3bf 8f4f 	dsb	sy
 8011df0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011df4:	bf00      	nop
 8011df6:	3710      	adds	r7, #16
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	24001354 	.word	0x24001354
 8011e00:	e000ed04 	.word	0xe000ed04

08011e04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b08a      	sub	sp, #40	; 0x28
 8011e08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011e12:	463a      	mov	r2, r7
 8011e14:	1d39      	adds	r1, r7, #4
 8011e16:	f107 0308 	add.w	r3, r7, #8
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7fe fd64 	bl	80108e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011e20:	6839      	ldr	r1, [r7, #0]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	68ba      	ldr	r2, [r7, #8]
 8011e26:	9202      	str	r2, [sp, #8]
 8011e28:	9301      	str	r3, [sp, #4]
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	9300      	str	r3, [sp, #0]
 8011e2e:	2300      	movs	r3, #0
 8011e30:	460a      	mov	r2, r1
 8011e32:	4921      	ldr	r1, [pc, #132]	; (8011eb8 <vTaskStartScheduler+0xb4>)
 8011e34:	4821      	ldr	r0, [pc, #132]	; (8011ebc <vTaskStartScheduler+0xb8>)
 8011e36:	f7ff fe0f 	bl	8011a58 <xTaskCreateStatic>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	4a20      	ldr	r2, [pc, #128]	; (8011ec0 <vTaskStartScheduler+0xbc>)
 8011e3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011e40:	4b1f      	ldr	r3, [pc, #124]	; (8011ec0 <vTaskStartScheduler+0xbc>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d002      	beq.n	8011e4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	617b      	str	r3, [r7, #20]
 8011e4c:	e001      	b.n	8011e52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d102      	bne.n	8011e5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011e58:	f000 fdb2 	bl	80129c0 <xTimerCreateTimerTask>
 8011e5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	d116      	bne.n	8011e92 <vTaskStartScheduler+0x8e>
	__asm volatile
 8011e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e68:	f383 8811 	msr	BASEPRI, r3
 8011e6c:	f3bf 8f6f 	isb	sy
 8011e70:	f3bf 8f4f 	dsb	sy
 8011e74:	613b      	str	r3, [r7, #16]
}
 8011e76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011e78:	4b12      	ldr	r3, [pc, #72]	; (8011ec4 <vTaskStartScheduler+0xc0>)
 8011e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011e80:	4b11      	ldr	r3, [pc, #68]	; (8011ec8 <vTaskStartScheduler+0xc4>)
 8011e82:	2201      	movs	r2, #1
 8011e84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011e86:	4b11      	ldr	r3, [pc, #68]	; (8011ecc <vTaskStartScheduler+0xc8>)
 8011e88:	2200      	movs	r2, #0
 8011e8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011e8c:	f001 f990 	bl	80131b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011e90:	e00e      	b.n	8011eb0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e98:	d10a      	bne.n	8011eb0 <vTaskStartScheduler+0xac>
	__asm volatile
 8011e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e9e:	f383 8811 	msr	BASEPRI, r3
 8011ea2:	f3bf 8f6f 	isb	sy
 8011ea6:	f3bf 8f4f 	dsb	sy
 8011eaa:	60fb      	str	r3, [r7, #12]
}
 8011eac:	bf00      	nop
 8011eae:	e7fe      	b.n	8011eae <vTaskStartScheduler+0xaa>
}
 8011eb0:	bf00      	nop
 8011eb2:	3718      	adds	r7, #24
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	08014bd8 	.word	0x08014bd8
 8011ebc:	08012625 	.word	0x08012625
 8011ec0:	24001350 	.word	0x24001350
 8011ec4:	2400134c 	.word	0x2400134c
 8011ec8:	24001338 	.word	0x24001338
 8011ecc:	24001330 	.word	0x24001330

08011ed0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011ed4:	4b04      	ldr	r3, [pc, #16]	; (8011ee8 <vTaskSuspendAll+0x18>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	3301      	adds	r3, #1
 8011eda:	4a03      	ldr	r2, [pc, #12]	; (8011ee8 <vTaskSuspendAll+0x18>)
 8011edc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011ede:	bf00      	nop
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr
 8011ee8:	24001354 	.word	0x24001354

08011eec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011efa:	4b42      	ldr	r3, [pc, #264]	; (8012004 <xTaskResumeAll+0x118>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d10a      	bne.n	8011f18 <xTaskResumeAll+0x2c>
	__asm volatile
 8011f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f06:	f383 8811 	msr	BASEPRI, r3
 8011f0a:	f3bf 8f6f 	isb	sy
 8011f0e:	f3bf 8f4f 	dsb	sy
 8011f12:	603b      	str	r3, [r7, #0]
}
 8011f14:	bf00      	nop
 8011f16:	e7fe      	b.n	8011f16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011f18:	f001 f9ec 	bl	80132f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011f1c:	4b39      	ldr	r3, [pc, #228]	; (8012004 <xTaskResumeAll+0x118>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	3b01      	subs	r3, #1
 8011f22:	4a38      	ldr	r2, [pc, #224]	; (8012004 <xTaskResumeAll+0x118>)
 8011f24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f26:	4b37      	ldr	r3, [pc, #220]	; (8012004 <xTaskResumeAll+0x118>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d162      	bne.n	8011ff4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011f2e:	4b36      	ldr	r3, [pc, #216]	; (8012008 <xTaskResumeAll+0x11c>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d05e      	beq.n	8011ff4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011f36:	e02f      	b.n	8011f98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f38:	4b34      	ldr	r3, [pc, #208]	; (801200c <xTaskResumeAll+0x120>)
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	3318      	adds	r3, #24
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7fe ff7b 	bl	8010e40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	3304      	adds	r3, #4
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7fe ff76 	bl	8010e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f58:	4b2d      	ldr	r3, [pc, #180]	; (8012010 <xTaskResumeAll+0x124>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d903      	bls.n	8011f68 <xTaskResumeAll+0x7c>
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f64:	4a2a      	ldr	r2, [pc, #168]	; (8012010 <xTaskResumeAll+0x124>)
 8011f66:	6013      	str	r3, [r2, #0]
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	4413      	add	r3, r2
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	4a27      	ldr	r2, [pc, #156]	; (8012014 <xTaskResumeAll+0x128>)
 8011f76:	441a      	add	r2, r3
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	3304      	adds	r3, #4
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	4610      	mov	r0, r2
 8011f80:	f7fe ff01 	bl	8010d86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f88:	4b23      	ldr	r3, [pc, #140]	; (8012018 <xTaskResumeAll+0x12c>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d302      	bcc.n	8011f98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011f92:	4b22      	ldr	r3, [pc, #136]	; (801201c <xTaskResumeAll+0x130>)
 8011f94:	2201      	movs	r2, #1
 8011f96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011f98:	4b1c      	ldr	r3, [pc, #112]	; (801200c <xTaskResumeAll+0x120>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d1cb      	bne.n	8011f38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d001      	beq.n	8011faa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011fa6:	f000 fbf3 	bl	8012790 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011faa:	4b1d      	ldr	r3, [pc, #116]	; (8012020 <xTaskResumeAll+0x134>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d010      	beq.n	8011fd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011fb6:	f000 f847 	bl	8012048 <xTaskIncrementTick>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d002      	beq.n	8011fc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011fc0:	4b16      	ldr	r3, [pc, #88]	; (801201c <xTaskResumeAll+0x130>)
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	3b01      	subs	r3, #1
 8011fca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d1f1      	bne.n	8011fb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011fd2:	4b13      	ldr	r3, [pc, #76]	; (8012020 <xTaskResumeAll+0x134>)
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011fd8:	4b10      	ldr	r3, [pc, #64]	; (801201c <xTaskResumeAll+0x130>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d009      	beq.n	8011ff4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011fe4:	4b0f      	ldr	r3, [pc, #60]	; (8012024 <xTaskResumeAll+0x138>)
 8011fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fea:	601a      	str	r2, [r3, #0]
 8011fec:	f3bf 8f4f 	dsb	sy
 8011ff0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ff4:	f001 f9ae 	bl	8013354 <vPortExitCritical>

	return xAlreadyYielded;
 8011ff8:	68bb      	ldr	r3, [r7, #8]
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3710      	adds	r7, #16
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	24001354 	.word	0x24001354
 8012008:	2400132c 	.word	0x2400132c
 801200c:	240012ec 	.word	0x240012ec
 8012010:	24001334 	.word	0x24001334
 8012014:	24000e5c 	.word	0x24000e5c
 8012018:	24000e58 	.word	0x24000e58
 801201c:	24001340 	.word	0x24001340
 8012020:	2400133c 	.word	0x2400133c
 8012024:	e000ed04 	.word	0xe000ed04

08012028 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012028:	b480      	push	{r7}
 801202a:	b083      	sub	sp, #12
 801202c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801202e:	4b05      	ldr	r3, [pc, #20]	; (8012044 <xTaskGetTickCount+0x1c>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012034:	687b      	ldr	r3, [r7, #4]
}
 8012036:	4618      	mov	r0, r3
 8012038:	370c      	adds	r7, #12
 801203a:	46bd      	mov	sp, r7
 801203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012040:	4770      	bx	lr
 8012042:	bf00      	nop
 8012044:	24001330 	.word	0x24001330

08012048 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b086      	sub	sp, #24
 801204c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801204e:	2300      	movs	r3, #0
 8012050:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012052:	4b4f      	ldr	r3, [pc, #316]	; (8012190 <xTaskIncrementTick+0x148>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	f040 808f 	bne.w	801217a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801205c:	4b4d      	ldr	r3, [pc, #308]	; (8012194 <xTaskIncrementTick+0x14c>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	3301      	adds	r3, #1
 8012062:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012064:	4a4b      	ldr	r2, [pc, #300]	; (8012194 <xTaskIncrementTick+0x14c>)
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d120      	bne.n	80120b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012070:	4b49      	ldr	r3, [pc, #292]	; (8012198 <xTaskIncrementTick+0x150>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d00a      	beq.n	8012090 <xTaskIncrementTick+0x48>
	__asm volatile
 801207a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801207e:	f383 8811 	msr	BASEPRI, r3
 8012082:	f3bf 8f6f 	isb	sy
 8012086:	f3bf 8f4f 	dsb	sy
 801208a:	603b      	str	r3, [r7, #0]
}
 801208c:	bf00      	nop
 801208e:	e7fe      	b.n	801208e <xTaskIncrementTick+0x46>
 8012090:	4b41      	ldr	r3, [pc, #260]	; (8012198 <xTaskIncrementTick+0x150>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	60fb      	str	r3, [r7, #12]
 8012096:	4b41      	ldr	r3, [pc, #260]	; (801219c <xTaskIncrementTick+0x154>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	4a3f      	ldr	r2, [pc, #252]	; (8012198 <xTaskIncrementTick+0x150>)
 801209c:	6013      	str	r3, [r2, #0]
 801209e:	4a3f      	ldr	r2, [pc, #252]	; (801219c <xTaskIncrementTick+0x154>)
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	6013      	str	r3, [r2, #0]
 80120a4:	4b3e      	ldr	r3, [pc, #248]	; (80121a0 <xTaskIncrementTick+0x158>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	3301      	adds	r3, #1
 80120aa:	4a3d      	ldr	r2, [pc, #244]	; (80121a0 <xTaskIncrementTick+0x158>)
 80120ac:	6013      	str	r3, [r2, #0]
 80120ae:	f000 fb6f 	bl	8012790 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80120b2:	4b3c      	ldr	r3, [pc, #240]	; (80121a4 <xTaskIncrementTick+0x15c>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	693a      	ldr	r2, [r7, #16]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d349      	bcc.n	8012150 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80120bc:	4b36      	ldr	r3, [pc, #216]	; (8012198 <xTaskIncrementTick+0x150>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d104      	bne.n	80120d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120c6:	4b37      	ldr	r3, [pc, #220]	; (80121a4 <xTaskIncrementTick+0x15c>)
 80120c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120cc:	601a      	str	r2, [r3, #0]
					break;
 80120ce:	e03f      	b.n	8012150 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120d0:	4b31      	ldr	r3, [pc, #196]	; (8012198 <xTaskIncrementTick+0x150>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	68db      	ldr	r3, [r3, #12]
 80120d6:	68db      	ldr	r3, [r3, #12]
 80120d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80120e0:	693a      	ldr	r2, [r7, #16]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d203      	bcs.n	80120f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80120e8:	4a2e      	ldr	r2, [pc, #184]	; (80121a4 <xTaskIncrementTick+0x15c>)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80120ee:	e02f      	b.n	8012150 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	3304      	adds	r3, #4
 80120f4:	4618      	mov	r0, r3
 80120f6:	f7fe fea3 	bl	8010e40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d004      	beq.n	801210c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	3318      	adds	r3, #24
 8012106:	4618      	mov	r0, r3
 8012108:	f7fe fe9a 	bl	8010e40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012110:	4b25      	ldr	r3, [pc, #148]	; (80121a8 <xTaskIncrementTick+0x160>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	429a      	cmp	r2, r3
 8012116:	d903      	bls.n	8012120 <xTaskIncrementTick+0xd8>
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801211c:	4a22      	ldr	r2, [pc, #136]	; (80121a8 <xTaskIncrementTick+0x160>)
 801211e:	6013      	str	r3, [r2, #0]
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012124:	4613      	mov	r3, r2
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	4413      	add	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	4a1f      	ldr	r2, [pc, #124]	; (80121ac <xTaskIncrementTick+0x164>)
 801212e:	441a      	add	r2, r3
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	3304      	adds	r3, #4
 8012134:	4619      	mov	r1, r3
 8012136:	4610      	mov	r0, r2
 8012138:	f7fe fe25 	bl	8010d86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012140:	4b1b      	ldr	r3, [pc, #108]	; (80121b0 <xTaskIncrementTick+0x168>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012146:	429a      	cmp	r2, r3
 8012148:	d3b8      	bcc.n	80120bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801214a:	2301      	movs	r3, #1
 801214c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801214e:	e7b5      	b.n	80120bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012150:	4b17      	ldr	r3, [pc, #92]	; (80121b0 <xTaskIncrementTick+0x168>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012156:	4915      	ldr	r1, [pc, #84]	; (80121ac <xTaskIncrementTick+0x164>)
 8012158:	4613      	mov	r3, r2
 801215a:	009b      	lsls	r3, r3, #2
 801215c:	4413      	add	r3, r2
 801215e:	009b      	lsls	r3, r3, #2
 8012160:	440b      	add	r3, r1
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b01      	cmp	r3, #1
 8012166:	d901      	bls.n	801216c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012168:	2301      	movs	r3, #1
 801216a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801216c:	4b11      	ldr	r3, [pc, #68]	; (80121b4 <xTaskIncrementTick+0x16c>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d007      	beq.n	8012184 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012174:	2301      	movs	r3, #1
 8012176:	617b      	str	r3, [r7, #20]
 8012178:	e004      	b.n	8012184 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801217a:	4b0f      	ldr	r3, [pc, #60]	; (80121b8 <xTaskIncrementTick+0x170>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	3301      	adds	r3, #1
 8012180:	4a0d      	ldr	r2, [pc, #52]	; (80121b8 <xTaskIncrementTick+0x170>)
 8012182:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012184:	697b      	ldr	r3, [r7, #20]
}
 8012186:	4618      	mov	r0, r3
 8012188:	3718      	adds	r7, #24
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	24001354 	.word	0x24001354
 8012194:	24001330 	.word	0x24001330
 8012198:	240012e4 	.word	0x240012e4
 801219c:	240012e8 	.word	0x240012e8
 80121a0:	24001344 	.word	0x24001344
 80121a4:	2400134c 	.word	0x2400134c
 80121a8:	24001334 	.word	0x24001334
 80121ac:	24000e5c 	.word	0x24000e5c
 80121b0:	24000e58 	.word	0x24000e58
 80121b4:	24001340 	.word	0x24001340
 80121b8:	2400133c 	.word	0x2400133c

080121bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80121bc:	b480      	push	{r7}
 80121be:	b085      	sub	sp, #20
 80121c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80121c2:	4b28      	ldr	r3, [pc, #160]	; (8012264 <vTaskSwitchContext+0xa8>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d003      	beq.n	80121d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80121ca:	4b27      	ldr	r3, [pc, #156]	; (8012268 <vTaskSwitchContext+0xac>)
 80121cc:	2201      	movs	r2, #1
 80121ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80121d0:	e041      	b.n	8012256 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80121d2:	4b25      	ldr	r3, [pc, #148]	; (8012268 <vTaskSwitchContext+0xac>)
 80121d4:	2200      	movs	r2, #0
 80121d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121d8:	4b24      	ldr	r3, [pc, #144]	; (801226c <vTaskSwitchContext+0xb0>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	60fb      	str	r3, [r7, #12]
 80121de:	e010      	b.n	8012202 <vTaskSwitchContext+0x46>
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d10a      	bne.n	80121fc <vTaskSwitchContext+0x40>
	__asm volatile
 80121e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ea:	f383 8811 	msr	BASEPRI, r3
 80121ee:	f3bf 8f6f 	isb	sy
 80121f2:	f3bf 8f4f 	dsb	sy
 80121f6:	607b      	str	r3, [r7, #4]
}
 80121f8:	bf00      	nop
 80121fa:	e7fe      	b.n	80121fa <vTaskSwitchContext+0x3e>
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	3b01      	subs	r3, #1
 8012200:	60fb      	str	r3, [r7, #12]
 8012202:	491b      	ldr	r1, [pc, #108]	; (8012270 <vTaskSwitchContext+0xb4>)
 8012204:	68fa      	ldr	r2, [r7, #12]
 8012206:	4613      	mov	r3, r2
 8012208:	009b      	lsls	r3, r3, #2
 801220a:	4413      	add	r3, r2
 801220c:	009b      	lsls	r3, r3, #2
 801220e:	440b      	add	r3, r1
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d0e4      	beq.n	80121e0 <vTaskSwitchContext+0x24>
 8012216:	68fa      	ldr	r2, [r7, #12]
 8012218:	4613      	mov	r3, r2
 801221a:	009b      	lsls	r3, r3, #2
 801221c:	4413      	add	r3, r2
 801221e:	009b      	lsls	r3, r3, #2
 8012220:	4a13      	ldr	r2, [pc, #76]	; (8012270 <vTaskSwitchContext+0xb4>)
 8012222:	4413      	add	r3, r2
 8012224:	60bb      	str	r3, [r7, #8]
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	685a      	ldr	r2, [r3, #4]
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	605a      	str	r2, [r3, #4]
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	685a      	ldr	r2, [r3, #4]
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	3308      	adds	r3, #8
 8012238:	429a      	cmp	r2, r3
 801223a:	d104      	bne.n	8012246 <vTaskSwitchContext+0x8a>
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	685a      	ldr	r2, [r3, #4]
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	605a      	str	r2, [r3, #4]
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	685b      	ldr	r3, [r3, #4]
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	4a09      	ldr	r2, [pc, #36]	; (8012274 <vTaskSwitchContext+0xb8>)
 801224e:	6013      	str	r3, [r2, #0]
 8012250:	4a06      	ldr	r2, [pc, #24]	; (801226c <vTaskSwitchContext+0xb0>)
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	6013      	str	r3, [r2, #0]
}
 8012256:	bf00      	nop
 8012258:	3714      	adds	r7, #20
 801225a:	46bd      	mov	sp, r7
 801225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012260:	4770      	bx	lr
 8012262:	bf00      	nop
 8012264:	24001354 	.word	0x24001354
 8012268:	24001340 	.word	0x24001340
 801226c:	24001334 	.word	0x24001334
 8012270:	24000e5c 	.word	0x24000e5c
 8012274:	24000e58 	.word	0x24000e58

08012278 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d10a      	bne.n	801229e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801228c:	f383 8811 	msr	BASEPRI, r3
 8012290:	f3bf 8f6f 	isb	sy
 8012294:	f3bf 8f4f 	dsb	sy
 8012298:	60fb      	str	r3, [r7, #12]
}
 801229a:	bf00      	nop
 801229c:	e7fe      	b.n	801229c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801229e:	4b07      	ldr	r3, [pc, #28]	; (80122bc <vTaskPlaceOnEventList+0x44>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	3318      	adds	r3, #24
 80122a4:	4619      	mov	r1, r3
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f7fe fd91 	bl	8010dce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80122ac:	2101      	movs	r1, #1
 80122ae:	6838      	ldr	r0, [r7, #0]
 80122b0:	f000 fb32 	bl	8012918 <prvAddCurrentTaskToDelayedList>
}
 80122b4:	bf00      	nop
 80122b6:	3710      	adds	r7, #16
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	24000e58 	.word	0x24000e58

080122c0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b086      	sub	sp, #24
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	60f8      	str	r0, [r7, #12]
 80122c8:	60b9      	str	r1, [r7, #8]
 80122ca:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d10a      	bne.n	80122e8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80122d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d6:	f383 8811 	msr	BASEPRI, r3
 80122da:	f3bf 8f6f 	isb	sy
 80122de:	f3bf 8f4f 	dsb	sy
 80122e2:	617b      	str	r3, [r7, #20]
}
 80122e4:	bf00      	nop
 80122e6:	e7fe      	b.n	80122e6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80122e8:	4b11      	ldr	r3, [pc, #68]	; (8012330 <vTaskPlaceOnUnorderedEventList+0x70>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d10a      	bne.n	8012306 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	613b      	str	r3, [r7, #16]
}
 8012302:	bf00      	nop
 8012304:	e7fe      	b.n	8012304 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012306:	4b0b      	ldr	r3, [pc, #44]	; (8012334 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	68ba      	ldr	r2, [r7, #8]
 801230c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8012310:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012312:	4b08      	ldr	r3, [pc, #32]	; (8012334 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	3318      	adds	r3, #24
 8012318:	4619      	mov	r1, r3
 801231a:	68f8      	ldr	r0, [r7, #12]
 801231c:	f7fe fd33 	bl	8010d86 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012320:	2101      	movs	r1, #1
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f000 faf8 	bl	8012918 <prvAddCurrentTaskToDelayedList>
}
 8012328:	bf00      	nop
 801232a:	3718      	adds	r7, #24
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	24001354 	.word	0x24001354
 8012334:	24000e58 	.word	0x24000e58

08012338 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012338:	b580      	push	{r7, lr}
 801233a:	b086      	sub	sp, #24
 801233c:	af00      	add	r7, sp, #0
 801233e:	60f8      	str	r0, [r7, #12]
 8012340:	60b9      	str	r1, [r7, #8]
 8012342:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d10a      	bne.n	8012360 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234e:	f383 8811 	msr	BASEPRI, r3
 8012352:	f3bf 8f6f 	isb	sy
 8012356:	f3bf 8f4f 	dsb	sy
 801235a:	617b      	str	r3, [r7, #20]
}
 801235c:	bf00      	nop
 801235e:	e7fe      	b.n	801235e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012360:	4b0a      	ldr	r3, [pc, #40]	; (801238c <vTaskPlaceOnEventListRestricted+0x54>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	3318      	adds	r3, #24
 8012366:	4619      	mov	r1, r3
 8012368:	68f8      	ldr	r0, [r7, #12]
 801236a:	f7fe fd0c 	bl	8010d86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d002      	beq.n	801237a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012378:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801237a:	6879      	ldr	r1, [r7, #4]
 801237c:	68b8      	ldr	r0, [r7, #8]
 801237e:	f000 facb 	bl	8012918 <prvAddCurrentTaskToDelayedList>
	}
 8012382:	bf00      	nop
 8012384:	3718      	adds	r7, #24
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	24000e58 	.word	0x24000e58

08012390 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b086      	sub	sp, #24
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d10a      	bne.n	80123bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80123a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123aa:	f383 8811 	msr	BASEPRI, r3
 80123ae:	f3bf 8f6f 	isb	sy
 80123b2:	f3bf 8f4f 	dsb	sy
 80123b6:	60fb      	str	r3, [r7, #12]
}
 80123b8:	bf00      	nop
 80123ba:	e7fe      	b.n	80123ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	3318      	adds	r3, #24
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7fe fd3d 	bl	8010e40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123c6:	4b1e      	ldr	r3, [pc, #120]	; (8012440 <xTaskRemoveFromEventList+0xb0>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d11d      	bne.n	801240a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	3304      	adds	r3, #4
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7fe fd34 	bl	8010e40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123dc:	4b19      	ldr	r3, [pc, #100]	; (8012444 <xTaskRemoveFromEventList+0xb4>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d903      	bls.n	80123ec <xTaskRemoveFromEventList+0x5c>
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123e8:	4a16      	ldr	r2, [pc, #88]	; (8012444 <xTaskRemoveFromEventList+0xb4>)
 80123ea:	6013      	str	r3, [r2, #0]
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123f0:	4613      	mov	r3, r2
 80123f2:	009b      	lsls	r3, r3, #2
 80123f4:	4413      	add	r3, r2
 80123f6:	009b      	lsls	r3, r3, #2
 80123f8:	4a13      	ldr	r2, [pc, #76]	; (8012448 <xTaskRemoveFromEventList+0xb8>)
 80123fa:	441a      	add	r2, r3
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	3304      	adds	r3, #4
 8012400:	4619      	mov	r1, r3
 8012402:	4610      	mov	r0, r2
 8012404:	f7fe fcbf 	bl	8010d86 <vListInsertEnd>
 8012408:	e005      	b.n	8012416 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	3318      	adds	r3, #24
 801240e:	4619      	mov	r1, r3
 8012410:	480e      	ldr	r0, [pc, #56]	; (801244c <xTaskRemoveFromEventList+0xbc>)
 8012412:	f7fe fcb8 	bl	8010d86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801241a:	4b0d      	ldr	r3, [pc, #52]	; (8012450 <xTaskRemoveFromEventList+0xc0>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012420:	429a      	cmp	r2, r3
 8012422:	d905      	bls.n	8012430 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012424:	2301      	movs	r3, #1
 8012426:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012428:	4b0a      	ldr	r3, [pc, #40]	; (8012454 <xTaskRemoveFromEventList+0xc4>)
 801242a:	2201      	movs	r2, #1
 801242c:	601a      	str	r2, [r3, #0]
 801242e:	e001      	b.n	8012434 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012430:	2300      	movs	r3, #0
 8012432:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012434:	697b      	ldr	r3, [r7, #20]
}
 8012436:	4618      	mov	r0, r3
 8012438:	3718      	adds	r7, #24
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
 801243e:	bf00      	nop
 8012440:	24001354 	.word	0x24001354
 8012444:	24001334 	.word	0x24001334
 8012448:	24000e5c 	.word	0x24000e5c
 801244c:	240012ec 	.word	0x240012ec
 8012450:	24000e58 	.word	0x24000e58
 8012454:	24001340 	.word	0x24001340

08012458 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b086      	sub	sp, #24
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8012462:	4b29      	ldr	r3, [pc, #164]	; (8012508 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d10a      	bne.n	8012480 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801246a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801246e:	f383 8811 	msr	BASEPRI, r3
 8012472:	f3bf 8f6f 	isb	sy
 8012476:	f3bf 8f4f 	dsb	sy
 801247a:	613b      	str	r3, [r7, #16]
}
 801247c:	bf00      	nop
 801247e:	e7fe      	b.n	801247e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	68db      	ldr	r3, [r3, #12]
 801248e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d10a      	bne.n	80124ac <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8012496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801249a:	f383 8811 	msr	BASEPRI, r3
 801249e:	f3bf 8f6f 	isb	sy
 80124a2:	f3bf 8f4f 	dsb	sy
 80124a6:	60fb      	str	r3, [r7, #12]
}
 80124a8:	bf00      	nop
 80124aa:	e7fe      	b.n	80124aa <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7fe fcc7 	bl	8010e40 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	3304      	adds	r3, #4
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7fe fcc2 	bl	8010e40 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124c0:	4b12      	ldr	r3, [pc, #72]	; (801250c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d903      	bls.n	80124d0 <vTaskRemoveFromUnorderedEventList+0x78>
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124cc:	4a0f      	ldr	r2, [pc, #60]	; (801250c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80124ce:	6013      	str	r3, [r2, #0]
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124d4:	4613      	mov	r3, r2
 80124d6:	009b      	lsls	r3, r3, #2
 80124d8:	4413      	add	r3, r2
 80124da:	009b      	lsls	r3, r3, #2
 80124dc:	4a0c      	ldr	r2, [pc, #48]	; (8012510 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80124de:	441a      	add	r2, r3
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	3304      	adds	r3, #4
 80124e4:	4619      	mov	r1, r3
 80124e6:	4610      	mov	r0, r2
 80124e8:	f7fe fc4d 	bl	8010d86 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124f0:	4b08      	ldr	r3, [pc, #32]	; (8012514 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d902      	bls.n	8012500 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80124fa:	4b07      	ldr	r3, [pc, #28]	; (8012518 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80124fc:	2201      	movs	r2, #1
 80124fe:	601a      	str	r2, [r3, #0]
	}
}
 8012500:	bf00      	nop
 8012502:	3718      	adds	r7, #24
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}
 8012508:	24001354 	.word	0x24001354
 801250c:	24001334 	.word	0x24001334
 8012510:	24000e5c 	.word	0x24000e5c
 8012514:	24000e58 	.word	0x24000e58
 8012518:	24001340 	.word	0x24001340

0801251c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012524:	4b06      	ldr	r3, [pc, #24]	; (8012540 <vTaskInternalSetTimeOutState+0x24>)
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801252c:	4b05      	ldr	r3, [pc, #20]	; (8012544 <vTaskInternalSetTimeOutState+0x28>)
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	605a      	str	r2, [r3, #4]
}
 8012534:	bf00      	nop
 8012536:	370c      	adds	r7, #12
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr
 8012540:	24001344 	.word	0x24001344
 8012544:	24001330 	.word	0x24001330

08012548 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b088      	sub	sp, #32
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d10a      	bne.n	801256e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255c:	f383 8811 	msr	BASEPRI, r3
 8012560:	f3bf 8f6f 	isb	sy
 8012564:	f3bf 8f4f 	dsb	sy
 8012568:	613b      	str	r3, [r7, #16]
}
 801256a:	bf00      	nop
 801256c:	e7fe      	b.n	801256c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d10a      	bne.n	801258a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012578:	f383 8811 	msr	BASEPRI, r3
 801257c:	f3bf 8f6f 	isb	sy
 8012580:	f3bf 8f4f 	dsb	sy
 8012584:	60fb      	str	r3, [r7, #12]
}
 8012586:	bf00      	nop
 8012588:	e7fe      	b.n	8012588 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801258a:	f000 feb3 	bl	80132f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801258e:	4b1d      	ldr	r3, [pc, #116]	; (8012604 <xTaskCheckForTimeOut+0xbc>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	69ba      	ldr	r2, [r7, #24]
 801259a:	1ad3      	subs	r3, r2, r3
 801259c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80125a6:	d102      	bne.n	80125ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80125a8:	2300      	movs	r3, #0
 80125aa:	61fb      	str	r3, [r7, #28]
 80125ac:	e023      	b.n	80125f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681a      	ldr	r2, [r3, #0]
 80125b2:	4b15      	ldr	r3, [pc, #84]	; (8012608 <xTaskCheckForTimeOut+0xc0>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d007      	beq.n	80125ca <xTaskCheckForTimeOut+0x82>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	69ba      	ldr	r2, [r7, #24]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d302      	bcc.n	80125ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80125c4:	2301      	movs	r3, #1
 80125c6:	61fb      	str	r3, [r7, #28]
 80125c8:	e015      	b.n	80125f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	697a      	ldr	r2, [r7, #20]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d20b      	bcs.n	80125ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	1ad2      	subs	r2, r2, r3
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f7ff ff9b 	bl	801251c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80125e6:	2300      	movs	r3, #0
 80125e8:	61fb      	str	r3, [r7, #28]
 80125ea:	e004      	b.n	80125f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	2200      	movs	r2, #0
 80125f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80125f2:	2301      	movs	r3, #1
 80125f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80125f6:	f000 fead 	bl	8013354 <vPortExitCritical>

	return xReturn;
 80125fa:	69fb      	ldr	r3, [r7, #28]
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3720      	adds	r7, #32
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}
 8012604:	24001330 	.word	0x24001330
 8012608:	24001344 	.word	0x24001344

0801260c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801260c:	b480      	push	{r7}
 801260e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012610:	4b03      	ldr	r3, [pc, #12]	; (8012620 <vTaskMissedYield+0x14>)
 8012612:	2201      	movs	r2, #1
 8012614:	601a      	str	r2, [r3, #0]
}
 8012616:	bf00      	nop
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr
 8012620:	24001340 	.word	0x24001340

08012624 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801262c:	f000 f852 	bl	80126d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012630:	4b06      	ldr	r3, [pc, #24]	; (801264c <prvIdleTask+0x28>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b01      	cmp	r3, #1
 8012636:	d9f9      	bls.n	801262c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012638:	4b05      	ldr	r3, [pc, #20]	; (8012650 <prvIdleTask+0x2c>)
 801263a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801263e:	601a      	str	r2, [r3, #0]
 8012640:	f3bf 8f4f 	dsb	sy
 8012644:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012648:	e7f0      	b.n	801262c <prvIdleTask+0x8>
 801264a:	bf00      	nop
 801264c:	24000e5c 	.word	0x24000e5c
 8012650:	e000ed04 	.word	0xe000ed04

08012654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801265a:	2300      	movs	r3, #0
 801265c:	607b      	str	r3, [r7, #4]
 801265e:	e00c      	b.n	801267a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	4613      	mov	r3, r2
 8012664:	009b      	lsls	r3, r3, #2
 8012666:	4413      	add	r3, r2
 8012668:	009b      	lsls	r3, r3, #2
 801266a:	4a12      	ldr	r2, [pc, #72]	; (80126b4 <prvInitialiseTaskLists+0x60>)
 801266c:	4413      	add	r3, r2
 801266e:	4618      	mov	r0, r3
 8012670:	f7fe fb5c 	bl	8010d2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	3301      	adds	r3, #1
 8012678:	607b      	str	r3, [r7, #4]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2b37      	cmp	r3, #55	; 0x37
 801267e:	d9ef      	bls.n	8012660 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012680:	480d      	ldr	r0, [pc, #52]	; (80126b8 <prvInitialiseTaskLists+0x64>)
 8012682:	f7fe fb53 	bl	8010d2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012686:	480d      	ldr	r0, [pc, #52]	; (80126bc <prvInitialiseTaskLists+0x68>)
 8012688:	f7fe fb50 	bl	8010d2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801268c:	480c      	ldr	r0, [pc, #48]	; (80126c0 <prvInitialiseTaskLists+0x6c>)
 801268e:	f7fe fb4d 	bl	8010d2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012692:	480c      	ldr	r0, [pc, #48]	; (80126c4 <prvInitialiseTaskLists+0x70>)
 8012694:	f7fe fb4a 	bl	8010d2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012698:	480b      	ldr	r0, [pc, #44]	; (80126c8 <prvInitialiseTaskLists+0x74>)
 801269a:	f7fe fb47 	bl	8010d2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801269e:	4b0b      	ldr	r3, [pc, #44]	; (80126cc <prvInitialiseTaskLists+0x78>)
 80126a0:	4a05      	ldr	r2, [pc, #20]	; (80126b8 <prvInitialiseTaskLists+0x64>)
 80126a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80126a4:	4b0a      	ldr	r3, [pc, #40]	; (80126d0 <prvInitialiseTaskLists+0x7c>)
 80126a6:	4a05      	ldr	r2, [pc, #20]	; (80126bc <prvInitialiseTaskLists+0x68>)
 80126a8:	601a      	str	r2, [r3, #0]
}
 80126aa:	bf00      	nop
 80126ac:	3708      	adds	r7, #8
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
 80126b2:	bf00      	nop
 80126b4:	24000e5c 	.word	0x24000e5c
 80126b8:	240012bc 	.word	0x240012bc
 80126bc:	240012d0 	.word	0x240012d0
 80126c0:	240012ec 	.word	0x240012ec
 80126c4:	24001300 	.word	0x24001300
 80126c8:	24001318 	.word	0x24001318
 80126cc:	240012e4 	.word	0x240012e4
 80126d0:	240012e8 	.word	0x240012e8

080126d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80126da:	e019      	b.n	8012710 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80126dc:	f000 fe0a 	bl	80132f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126e0:	4b10      	ldr	r3, [pc, #64]	; (8012724 <prvCheckTasksWaitingTermination+0x50>)
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	3304      	adds	r3, #4
 80126ec:	4618      	mov	r0, r3
 80126ee:	f7fe fba7 	bl	8010e40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80126f2:	4b0d      	ldr	r3, [pc, #52]	; (8012728 <prvCheckTasksWaitingTermination+0x54>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	3b01      	subs	r3, #1
 80126f8:	4a0b      	ldr	r2, [pc, #44]	; (8012728 <prvCheckTasksWaitingTermination+0x54>)
 80126fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80126fc:	4b0b      	ldr	r3, [pc, #44]	; (801272c <prvCheckTasksWaitingTermination+0x58>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	3b01      	subs	r3, #1
 8012702:	4a0a      	ldr	r2, [pc, #40]	; (801272c <prvCheckTasksWaitingTermination+0x58>)
 8012704:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012706:	f000 fe25 	bl	8013354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 f810 	bl	8012730 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012710:	4b06      	ldr	r3, [pc, #24]	; (801272c <prvCheckTasksWaitingTermination+0x58>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d1e1      	bne.n	80126dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012718:	bf00      	nop
 801271a:	bf00      	nop
 801271c:	3708      	adds	r7, #8
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	24001300 	.word	0x24001300
 8012728:	2400132c 	.word	0x2400132c
 801272c:	24001314 	.word	0x24001314

08012730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801273e:	2b00      	cmp	r3, #0
 8012740:	d108      	bne.n	8012754 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012746:	4618      	mov	r0, r3
 8012748:	f000 ffc2 	bl	80136d0 <vPortFree>
				vPortFree( pxTCB );
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f000 ffbf 	bl	80136d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012752:	e018      	b.n	8012786 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801275a:	2b01      	cmp	r3, #1
 801275c:	d103      	bne.n	8012766 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f000 ffb6 	bl	80136d0 <vPortFree>
	}
 8012764:	e00f      	b.n	8012786 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801276c:	2b02      	cmp	r3, #2
 801276e:	d00a      	beq.n	8012786 <prvDeleteTCB+0x56>
	__asm volatile
 8012770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012774:	f383 8811 	msr	BASEPRI, r3
 8012778:	f3bf 8f6f 	isb	sy
 801277c:	f3bf 8f4f 	dsb	sy
 8012780:	60fb      	str	r3, [r7, #12]
}
 8012782:	bf00      	nop
 8012784:	e7fe      	b.n	8012784 <prvDeleteTCB+0x54>
	}
 8012786:	bf00      	nop
 8012788:	3710      	adds	r7, #16
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
	...

08012790 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012790:	b480      	push	{r7}
 8012792:	b083      	sub	sp, #12
 8012794:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012796:	4b0c      	ldr	r3, [pc, #48]	; (80127c8 <prvResetNextTaskUnblockTime+0x38>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d104      	bne.n	80127aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80127a0:	4b0a      	ldr	r3, [pc, #40]	; (80127cc <prvResetNextTaskUnblockTime+0x3c>)
 80127a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80127a8:	e008      	b.n	80127bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127aa:	4b07      	ldr	r3, [pc, #28]	; (80127c8 <prvResetNextTaskUnblockTime+0x38>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	68db      	ldr	r3, [r3, #12]
 80127b0:	68db      	ldr	r3, [r3, #12]
 80127b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	4a04      	ldr	r2, [pc, #16]	; (80127cc <prvResetNextTaskUnblockTime+0x3c>)
 80127ba:	6013      	str	r3, [r2, #0]
}
 80127bc:	bf00      	nop
 80127be:	370c      	adds	r7, #12
 80127c0:	46bd      	mov	sp, r7
 80127c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c6:	4770      	bx	lr
 80127c8:	240012e4 	.word	0x240012e4
 80127cc:	2400134c 	.word	0x2400134c

080127d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80127d0:	b480      	push	{r7}
 80127d2:	b083      	sub	sp, #12
 80127d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80127d6:	4b0b      	ldr	r3, [pc, #44]	; (8012804 <xTaskGetSchedulerState+0x34>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d102      	bne.n	80127e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80127de:	2301      	movs	r3, #1
 80127e0:	607b      	str	r3, [r7, #4]
 80127e2:	e008      	b.n	80127f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127e4:	4b08      	ldr	r3, [pc, #32]	; (8012808 <xTaskGetSchedulerState+0x38>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d102      	bne.n	80127f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80127ec:	2302      	movs	r3, #2
 80127ee:	607b      	str	r3, [r7, #4]
 80127f0:	e001      	b.n	80127f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80127f2:	2300      	movs	r3, #0
 80127f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80127f6:	687b      	ldr	r3, [r7, #4]
	}
 80127f8:	4618      	mov	r0, r3
 80127fa:	370c      	adds	r7, #12
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr
 8012804:	24001338 	.word	0x24001338
 8012808:	24001354 	.word	0x24001354

0801280c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801280c:	b580      	push	{r7, lr}
 801280e:	b086      	sub	sp, #24
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012818:	2300      	movs	r3, #0
 801281a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d056      	beq.n	80128d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012822:	4b2e      	ldr	r3, [pc, #184]	; (80128dc <xTaskPriorityDisinherit+0xd0>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	693a      	ldr	r2, [r7, #16]
 8012828:	429a      	cmp	r2, r3
 801282a:	d00a      	beq.n	8012842 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012830:	f383 8811 	msr	BASEPRI, r3
 8012834:	f3bf 8f6f 	isb	sy
 8012838:	f3bf 8f4f 	dsb	sy
 801283c:	60fb      	str	r3, [r7, #12]
}
 801283e:	bf00      	nop
 8012840:	e7fe      	b.n	8012840 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012846:	2b00      	cmp	r3, #0
 8012848:	d10a      	bne.n	8012860 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801284e:	f383 8811 	msr	BASEPRI, r3
 8012852:	f3bf 8f6f 	isb	sy
 8012856:	f3bf 8f4f 	dsb	sy
 801285a:	60bb      	str	r3, [r7, #8]
}
 801285c:	bf00      	nop
 801285e:	e7fe      	b.n	801285e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012864:	1e5a      	subs	r2, r3, #1
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801286a:	693b      	ldr	r3, [r7, #16]
 801286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012872:	429a      	cmp	r2, r3
 8012874:	d02c      	beq.n	80128d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801287a:	2b00      	cmp	r3, #0
 801287c:	d128      	bne.n	80128d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	3304      	adds	r3, #4
 8012882:	4618      	mov	r0, r3
 8012884:	f7fe fadc 	bl	8010e40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012894:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128a0:	4b0f      	ldr	r3, [pc, #60]	; (80128e0 <xTaskPriorityDisinherit+0xd4>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d903      	bls.n	80128b0 <xTaskPriorityDisinherit+0xa4>
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ac:	4a0c      	ldr	r2, [pc, #48]	; (80128e0 <xTaskPriorityDisinherit+0xd4>)
 80128ae:	6013      	str	r3, [r2, #0]
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128b4:	4613      	mov	r3, r2
 80128b6:	009b      	lsls	r3, r3, #2
 80128b8:	4413      	add	r3, r2
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	4a09      	ldr	r2, [pc, #36]	; (80128e4 <xTaskPriorityDisinherit+0xd8>)
 80128be:	441a      	add	r2, r3
 80128c0:	693b      	ldr	r3, [r7, #16]
 80128c2:	3304      	adds	r3, #4
 80128c4:	4619      	mov	r1, r3
 80128c6:	4610      	mov	r0, r2
 80128c8:	f7fe fa5d 	bl	8010d86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80128cc:	2301      	movs	r3, #1
 80128ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80128d0:	697b      	ldr	r3, [r7, #20]
	}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3718      	adds	r7, #24
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	24000e58 	.word	0x24000e58
 80128e0:	24001334 	.word	0x24001334
 80128e4:	24000e5c 	.word	0x24000e5c

080128e8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80128ee:	4b09      	ldr	r3, [pc, #36]	; (8012914 <uxTaskResetEventItemValue+0x2c>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	699b      	ldr	r3, [r3, #24]
 80128f4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128f6:	4b07      	ldr	r3, [pc, #28]	; (8012914 <uxTaskResetEventItemValue+0x2c>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128fc:	4b05      	ldr	r3, [pc, #20]	; (8012914 <uxTaskResetEventItemValue+0x2c>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8012904:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8012906:	687b      	ldr	r3, [r7, #4]
}
 8012908:	4618      	mov	r0, r3
 801290a:	370c      	adds	r7, #12
 801290c:	46bd      	mov	sp, r7
 801290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012912:	4770      	bx	lr
 8012914:	24000e58 	.word	0x24000e58

08012918 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b084      	sub	sp, #16
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012922:	4b21      	ldr	r3, [pc, #132]	; (80129a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012928:	4b20      	ldr	r3, [pc, #128]	; (80129ac <prvAddCurrentTaskToDelayedList+0x94>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	3304      	adds	r3, #4
 801292e:	4618      	mov	r0, r3
 8012930:	f7fe fa86 	bl	8010e40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801293a:	d10a      	bne.n	8012952 <prvAddCurrentTaskToDelayedList+0x3a>
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d007      	beq.n	8012952 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012942:	4b1a      	ldr	r3, [pc, #104]	; (80129ac <prvAddCurrentTaskToDelayedList+0x94>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	3304      	adds	r3, #4
 8012948:	4619      	mov	r1, r3
 801294a:	4819      	ldr	r0, [pc, #100]	; (80129b0 <prvAddCurrentTaskToDelayedList+0x98>)
 801294c:	f7fe fa1b 	bl	8010d86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012950:	e026      	b.n	80129a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012952:	68fa      	ldr	r2, [r7, #12]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	4413      	add	r3, r2
 8012958:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801295a:	4b14      	ldr	r3, [pc, #80]	; (80129ac <prvAddCurrentTaskToDelayedList+0x94>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	68ba      	ldr	r2, [r7, #8]
 8012960:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012962:	68ba      	ldr	r2, [r7, #8]
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	429a      	cmp	r2, r3
 8012968:	d209      	bcs.n	801297e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801296a:	4b12      	ldr	r3, [pc, #72]	; (80129b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801296c:	681a      	ldr	r2, [r3, #0]
 801296e:	4b0f      	ldr	r3, [pc, #60]	; (80129ac <prvAddCurrentTaskToDelayedList+0x94>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	3304      	adds	r3, #4
 8012974:	4619      	mov	r1, r3
 8012976:	4610      	mov	r0, r2
 8012978:	f7fe fa29 	bl	8010dce <vListInsert>
}
 801297c:	e010      	b.n	80129a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801297e:	4b0e      	ldr	r3, [pc, #56]	; (80129b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012980:	681a      	ldr	r2, [r3, #0]
 8012982:	4b0a      	ldr	r3, [pc, #40]	; (80129ac <prvAddCurrentTaskToDelayedList+0x94>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	3304      	adds	r3, #4
 8012988:	4619      	mov	r1, r3
 801298a:	4610      	mov	r0, r2
 801298c:	f7fe fa1f 	bl	8010dce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012990:	4b0a      	ldr	r3, [pc, #40]	; (80129bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	68ba      	ldr	r2, [r7, #8]
 8012996:	429a      	cmp	r2, r3
 8012998:	d202      	bcs.n	80129a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801299a:	4a08      	ldr	r2, [pc, #32]	; (80129bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	6013      	str	r3, [r2, #0]
}
 80129a0:	bf00      	nop
 80129a2:	3710      	adds	r7, #16
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}
 80129a8:	24001330 	.word	0x24001330
 80129ac:	24000e58 	.word	0x24000e58
 80129b0:	24001318 	.word	0x24001318
 80129b4:	240012e8 	.word	0x240012e8
 80129b8:	240012e4 	.word	0x240012e4
 80129bc:	2400134c 	.word	0x2400134c

080129c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b08a      	sub	sp, #40	; 0x28
 80129c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80129c6:	2300      	movs	r3, #0
 80129c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80129ca:	f000 fb07 	bl	8012fdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80129ce:	4b1c      	ldr	r3, [pc, #112]	; (8012a40 <xTimerCreateTimerTask+0x80>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d021      	beq.n	8012a1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80129d6:	2300      	movs	r3, #0
 80129d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80129da:	2300      	movs	r3, #0
 80129dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80129de:	1d3a      	adds	r2, r7, #4
 80129e0:	f107 0108 	add.w	r1, r7, #8
 80129e4:	f107 030c 	add.w	r3, r7, #12
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7fd ff97 	bl	801091c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80129ee:	6879      	ldr	r1, [r7, #4]
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	68fa      	ldr	r2, [r7, #12]
 80129f4:	9202      	str	r2, [sp, #8]
 80129f6:	9301      	str	r3, [sp, #4]
 80129f8:	2302      	movs	r3, #2
 80129fa:	9300      	str	r3, [sp, #0]
 80129fc:	2300      	movs	r3, #0
 80129fe:	460a      	mov	r2, r1
 8012a00:	4910      	ldr	r1, [pc, #64]	; (8012a44 <xTimerCreateTimerTask+0x84>)
 8012a02:	4811      	ldr	r0, [pc, #68]	; (8012a48 <xTimerCreateTimerTask+0x88>)
 8012a04:	f7ff f828 	bl	8011a58 <xTaskCreateStatic>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	4a10      	ldr	r2, [pc, #64]	; (8012a4c <xTimerCreateTimerTask+0x8c>)
 8012a0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012a0e:	4b0f      	ldr	r3, [pc, #60]	; (8012a4c <xTimerCreateTimerTask+0x8c>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d001      	beq.n	8012a1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012a16:	2301      	movs	r3, #1
 8012a18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d10a      	bne.n	8012a36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a24:	f383 8811 	msr	BASEPRI, r3
 8012a28:	f3bf 8f6f 	isb	sy
 8012a2c:	f3bf 8f4f 	dsb	sy
 8012a30:	613b      	str	r3, [r7, #16]
}
 8012a32:	bf00      	nop
 8012a34:	e7fe      	b.n	8012a34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012a36:	697b      	ldr	r3, [r7, #20]
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3718      	adds	r7, #24
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	24001388 	.word	0x24001388
 8012a44:	08014be0 	.word	0x08014be0
 8012a48:	08012b85 	.word	0x08012b85
 8012a4c:	2400138c 	.word	0x2400138c

08012a50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b08a      	sub	sp, #40	; 0x28
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	60b9      	str	r1, [r7, #8]
 8012a5a:	607a      	str	r2, [r7, #4]
 8012a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d10a      	bne.n	8012a7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8012a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6c:	f383 8811 	msr	BASEPRI, r3
 8012a70:	f3bf 8f6f 	isb	sy
 8012a74:	f3bf 8f4f 	dsb	sy
 8012a78:	623b      	str	r3, [r7, #32]
}
 8012a7a:	bf00      	nop
 8012a7c:	e7fe      	b.n	8012a7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012a7e:	4b1a      	ldr	r3, [pc, #104]	; (8012ae8 <xTimerGenericCommand+0x98>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d02a      	beq.n	8012adc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	2b05      	cmp	r3, #5
 8012a96:	dc18      	bgt.n	8012aca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012a98:	f7ff fe9a 	bl	80127d0 <xTaskGetSchedulerState>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2b02      	cmp	r3, #2
 8012aa0:	d109      	bne.n	8012ab6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012aa2:	4b11      	ldr	r3, [pc, #68]	; (8012ae8 <xTimerGenericCommand+0x98>)
 8012aa4:	6818      	ldr	r0, [r3, #0]
 8012aa6:	f107 0110 	add.w	r1, r7, #16
 8012aaa:	2300      	movs	r3, #0
 8012aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012aae:	f7fe fb2f 	bl	8011110 <xQueueGenericSend>
 8012ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8012ab4:	e012      	b.n	8012adc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012ab6:	4b0c      	ldr	r3, [pc, #48]	; (8012ae8 <xTimerGenericCommand+0x98>)
 8012ab8:	6818      	ldr	r0, [r3, #0]
 8012aba:	f107 0110 	add.w	r1, r7, #16
 8012abe:	2300      	movs	r3, #0
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	f7fe fb25 	bl	8011110 <xQueueGenericSend>
 8012ac6:	6278      	str	r0, [r7, #36]	; 0x24
 8012ac8:	e008      	b.n	8012adc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012aca:	4b07      	ldr	r3, [pc, #28]	; (8012ae8 <xTimerGenericCommand+0x98>)
 8012acc:	6818      	ldr	r0, [r3, #0]
 8012ace:	f107 0110 	add.w	r1, r7, #16
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	683a      	ldr	r2, [r7, #0]
 8012ad6:	f7fe fc19 	bl	801130c <xQueueGenericSendFromISR>
 8012ada:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	3728      	adds	r7, #40	; 0x28
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}
 8012ae6:	bf00      	nop
 8012ae8:	24001388 	.word	0x24001388

08012aec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b088      	sub	sp, #32
 8012af0:	af02      	add	r7, sp, #8
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012af6:	4b22      	ldr	r3, [pc, #136]	; (8012b80 <prvProcessExpiredTimer+0x94>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	68db      	ldr	r3, [r3, #12]
 8012afe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	3304      	adds	r3, #4
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7fe f99b 	bl	8010e40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b10:	f003 0304 	and.w	r3, r3, #4
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d022      	beq.n	8012b5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	699a      	ldr	r2, [r3, #24]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	18d1      	adds	r1, r2, r3
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	683a      	ldr	r2, [r7, #0]
 8012b24:	6978      	ldr	r0, [r7, #20]
 8012b26:	f000 f8d1 	bl	8012ccc <prvInsertTimerInActiveList>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d01f      	beq.n	8012b70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012b30:	2300      	movs	r3, #0
 8012b32:	9300      	str	r3, [sp, #0]
 8012b34:	2300      	movs	r3, #0
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	2100      	movs	r1, #0
 8012b3a:	6978      	ldr	r0, [r7, #20]
 8012b3c:	f7ff ff88 	bl	8012a50 <xTimerGenericCommand>
 8012b40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012b42:	693b      	ldr	r3, [r7, #16]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d113      	bne.n	8012b70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b4c:	f383 8811 	msr	BASEPRI, r3
 8012b50:	f3bf 8f6f 	isb	sy
 8012b54:	f3bf 8f4f 	dsb	sy
 8012b58:	60fb      	str	r3, [r7, #12]
}
 8012b5a:	bf00      	nop
 8012b5c:	e7fe      	b.n	8012b5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b64:	f023 0301 	bic.w	r3, r3, #1
 8012b68:	b2da      	uxtb	r2, r3
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	6a1b      	ldr	r3, [r3, #32]
 8012b74:	6978      	ldr	r0, [r7, #20]
 8012b76:	4798      	blx	r3
}
 8012b78:	bf00      	nop
 8012b7a:	3718      	adds	r7, #24
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}
 8012b80:	24001380 	.word	0x24001380

08012b84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012b8c:	f107 0308 	add.w	r3, r7, #8
 8012b90:	4618      	mov	r0, r3
 8012b92:	f000 f857 	bl	8012c44 <prvGetNextExpireTime>
 8012b96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	4619      	mov	r1, r3
 8012b9c:	68f8      	ldr	r0, [r7, #12]
 8012b9e:	f000 f803 	bl	8012ba8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012ba2:	f000 f8d5 	bl	8012d50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012ba6:	e7f1      	b.n	8012b8c <prvTimerTask+0x8>

08012ba8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b084      	sub	sp, #16
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012bb2:	f7ff f98d 	bl	8011ed0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012bb6:	f107 0308 	add.w	r3, r7, #8
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f000 f866 	bl	8012c8c <prvSampleTimeNow>
 8012bc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d130      	bne.n	8012c2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d10a      	bne.n	8012be4 <prvProcessTimerOrBlockTask+0x3c>
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d806      	bhi.n	8012be4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012bd6:	f7ff f989 	bl	8011eec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012bda:	68f9      	ldr	r1, [r7, #12]
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f7ff ff85 	bl	8012aec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012be2:	e024      	b.n	8012c2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d008      	beq.n	8012bfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012bea:	4b13      	ldr	r3, [pc, #76]	; (8012c38 <prvProcessTimerOrBlockTask+0x90>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d101      	bne.n	8012bf8 <prvProcessTimerOrBlockTask+0x50>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	e000      	b.n	8012bfa <prvProcessTimerOrBlockTask+0x52>
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012bfc:	4b0f      	ldr	r3, [pc, #60]	; (8012c3c <prvProcessTimerOrBlockTask+0x94>)
 8012bfe:	6818      	ldr	r0, [r3, #0]
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	1ad3      	subs	r3, r2, r3
 8012c06:	683a      	ldr	r2, [r7, #0]
 8012c08:	4619      	mov	r1, r3
 8012c0a:	f7fe fef1 	bl	80119f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012c0e:	f7ff f96d 	bl	8011eec <xTaskResumeAll>
 8012c12:	4603      	mov	r3, r0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d10a      	bne.n	8012c2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012c18:	4b09      	ldr	r3, [pc, #36]	; (8012c40 <prvProcessTimerOrBlockTask+0x98>)
 8012c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c1e:	601a      	str	r2, [r3, #0]
 8012c20:	f3bf 8f4f 	dsb	sy
 8012c24:	f3bf 8f6f 	isb	sy
}
 8012c28:	e001      	b.n	8012c2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012c2a:	f7ff f95f 	bl	8011eec <xTaskResumeAll>
}
 8012c2e:	bf00      	nop
 8012c30:	3710      	adds	r7, #16
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	24001384 	.word	0x24001384
 8012c3c:	24001388 	.word	0x24001388
 8012c40:	e000ed04 	.word	0xe000ed04

08012c44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012c44:	b480      	push	{r7}
 8012c46:	b085      	sub	sp, #20
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012c4c:	4b0e      	ldr	r3, [pc, #56]	; (8012c88 <prvGetNextExpireTime+0x44>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d101      	bne.n	8012c5a <prvGetNextExpireTime+0x16>
 8012c56:	2201      	movs	r2, #1
 8012c58:	e000      	b.n	8012c5c <prvGetNextExpireTime+0x18>
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d105      	bne.n	8012c74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012c68:	4b07      	ldr	r3, [pc, #28]	; (8012c88 <prvGetNextExpireTime+0x44>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	68db      	ldr	r3, [r3, #12]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	60fb      	str	r3, [r7, #12]
 8012c72:	e001      	b.n	8012c78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012c74:	2300      	movs	r3, #0
 8012c76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012c78:	68fb      	ldr	r3, [r7, #12]
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3714      	adds	r7, #20
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c84:	4770      	bx	lr
 8012c86:	bf00      	nop
 8012c88:	24001380 	.word	0x24001380

08012c8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b084      	sub	sp, #16
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012c94:	f7ff f9c8 	bl	8012028 <xTaskGetTickCount>
 8012c98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012c9a:	4b0b      	ldr	r3, [pc, #44]	; (8012cc8 <prvSampleTimeNow+0x3c>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	68fa      	ldr	r2, [r7, #12]
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d205      	bcs.n	8012cb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012ca4:	f000 f936 	bl	8012f14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2201      	movs	r2, #1
 8012cac:	601a      	str	r2, [r3, #0]
 8012cae:	e002      	b.n	8012cb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012cb6:	4a04      	ldr	r2, [pc, #16]	; (8012cc8 <prvSampleTimeNow+0x3c>)
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3710      	adds	r7, #16
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	24001390 	.word	0x24001390

08012ccc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b086      	sub	sp, #24
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
 8012cd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	68ba      	ldr	r2, [r7, #8]
 8012ce2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	68fa      	ldr	r2, [r7, #12]
 8012ce8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012cea:	68ba      	ldr	r2, [r7, #8]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d812      	bhi.n	8012d18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cf2:	687a      	ldr	r2, [r7, #4]
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	1ad2      	subs	r2, r2, r3
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	699b      	ldr	r3, [r3, #24]
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d302      	bcc.n	8012d06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012d00:	2301      	movs	r3, #1
 8012d02:	617b      	str	r3, [r7, #20]
 8012d04:	e01b      	b.n	8012d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012d06:	4b10      	ldr	r3, [pc, #64]	; (8012d48 <prvInsertTimerInActiveList+0x7c>)
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	3304      	adds	r3, #4
 8012d0e:	4619      	mov	r1, r3
 8012d10:	4610      	mov	r0, r2
 8012d12:	f7fe f85c 	bl	8010dce <vListInsert>
 8012d16:	e012      	b.n	8012d3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d206      	bcs.n	8012d2e <prvInsertTimerInActiveList+0x62>
 8012d20:	68ba      	ldr	r2, [r7, #8]
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d302      	bcc.n	8012d2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012d28:	2301      	movs	r3, #1
 8012d2a:	617b      	str	r3, [r7, #20]
 8012d2c:	e007      	b.n	8012d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012d2e:	4b07      	ldr	r3, [pc, #28]	; (8012d4c <prvInsertTimerInActiveList+0x80>)
 8012d30:	681a      	ldr	r2, [r3, #0]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	3304      	adds	r3, #4
 8012d36:	4619      	mov	r1, r3
 8012d38:	4610      	mov	r0, r2
 8012d3a:	f7fe f848 	bl	8010dce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012d3e:	697b      	ldr	r3, [r7, #20]
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3718      	adds	r7, #24
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}
 8012d48:	24001384 	.word	0x24001384
 8012d4c:	24001380 	.word	0x24001380

08012d50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b08e      	sub	sp, #56	; 0x38
 8012d54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012d56:	e0ca      	b.n	8012eee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	da18      	bge.n	8012d90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012d5e:	1d3b      	adds	r3, r7, #4
 8012d60:	3304      	adds	r3, #4
 8012d62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d10a      	bne.n	8012d80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d6e:	f383 8811 	msr	BASEPRI, r3
 8012d72:	f3bf 8f6f 	isb	sy
 8012d76:	f3bf 8f4f 	dsb	sy
 8012d7a:	61fb      	str	r3, [r7, #28]
}
 8012d7c:	bf00      	nop
 8012d7e:	e7fe      	b.n	8012d7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d86:	6850      	ldr	r0, [r2, #4]
 8012d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d8a:	6892      	ldr	r2, [r2, #8]
 8012d8c:	4611      	mov	r1, r2
 8012d8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	f2c0 80aa 	blt.w	8012eec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d9e:	695b      	ldr	r3, [r3, #20]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d004      	beq.n	8012dae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da6:	3304      	adds	r3, #4
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7fe f849 	bl	8010e40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012dae:	463b      	mov	r3, r7
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7ff ff6b 	bl	8012c8c <prvSampleTimeNow>
 8012db6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2b09      	cmp	r3, #9
 8012dbc:	f200 8097 	bhi.w	8012eee <prvProcessReceivedCommands+0x19e>
 8012dc0:	a201      	add	r2, pc, #4	; (adr r2, 8012dc8 <prvProcessReceivedCommands+0x78>)
 8012dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dc6:	bf00      	nop
 8012dc8:	08012df1 	.word	0x08012df1
 8012dcc:	08012df1 	.word	0x08012df1
 8012dd0:	08012df1 	.word	0x08012df1
 8012dd4:	08012e65 	.word	0x08012e65
 8012dd8:	08012e79 	.word	0x08012e79
 8012ddc:	08012ec3 	.word	0x08012ec3
 8012de0:	08012df1 	.word	0x08012df1
 8012de4:	08012df1 	.word	0x08012df1
 8012de8:	08012e65 	.word	0x08012e65
 8012dec:	08012e79 	.word	0x08012e79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012df6:	f043 0301 	orr.w	r3, r3, #1
 8012dfa:	b2da      	uxtb	r2, r3
 8012dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012e02:	68ba      	ldr	r2, [r7, #8]
 8012e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e06:	699b      	ldr	r3, [r3, #24]
 8012e08:	18d1      	adds	r1, r2, r3
 8012e0a:	68bb      	ldr	r3, [r7, #8]
 8012e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e10:	f7ff ff5c 	bl	8012ccc <prvInsertTimerInActiveList>
 8012e14:	4603      	mov	r3, r0
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d069      	beq.n	8012eee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1c:	6a1b      	ldr	r3, [r3, #32]
 8012e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e28:	f003 0304 	and.w	r3, r3, #4
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d05e      	beq.n	8012eee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012e30:	68ba      	ldr	r2, [r7, #8]
 8012e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e34:	699b      	ldr	r3, [r3, #24]
 8012e36:	441a      	add	r2, r3
 8012e38:	2300      	movs	r3, #0
 8012e3a:	9300      	str	r3, [sp, #0]
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	2100      	movs	r1, #0
 8012e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e42:	f7ff fe05 	bl	8012a50 <xTimerGenericCommand>
 8012e46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012e48:	6a3b      	ldr	r3, [r7, #32]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d14f      	bne.n	8012eee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e52:	f383 8811 	msr	BASEPRI, r3
 8012e56:	f3bf 8f6f 	isb	sy
 8012e5a:	f3bf 8f4f 	dsb	sy
 8012e5e:	61bb      	str	r3, [r7, #24]
}
 8012e60:	bf00      	nop
 8012e62:	e7fe      	b.n	8012e62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e6a:	f023 0301 	bic.w	r3, r3, #1
 8012e6e:	b2da      	uxtb	r2, r3
 8012e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012e76:	e03a      	b.n	8012eee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e7e:	f043 0301 	orr.w	r3, r3, #1
 8012e82:	b2da      	uxtb	r2, r3
 8012e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012e8a:	68ba      	ldr	r2, [r7, #8]
 8012e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e92:	699b      	ldr	r3, [r3, #24]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d10a      	bne.n	8012eae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e9c:	f383 8811 	msr	BASEPRI, r3
 8012ea0:	f3bf 8f6f 	isb	sy
 8012ea4:	f3bf 8f4f 	dsb	sy
 8012ea8:	617b      	str	r3, [r7, #20]
}
 8012eaa:	bf00      	nop
 8012eac:	e7fe      	b.n	8012eac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb0:	699a      	ldr	r2, [r3, #24]
 8012eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb4:	18d1      	adds	r1, r2, r3
 8012eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ebc:	f7ff ff06 	bl	8012ccc <prvInsertTimerInActiveList>
					break;
 8012ec0:	e015      	b.n	8012eee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ec8:	f003 0302 	and.w	r3, r3, #2
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d103      	bne.n	8012ed8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ed2:	f000 fbfd 	bl	80136d0 <vPortFree>
 8012ed6:	e00a      	b.n	8012eee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ede:	f023 0301 	bic.w	r3, r3, #1
 8012ee2:	b2da      	uxtb	r2, r3
 8012ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012eea:	e000      	b.n	8012eee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012eec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012eee:	4b08      	ldr	r3, [pc, #32]	; (8012f10 <prvProcessReceivedCommands+0x1c0>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	1d39      	adds	r1, r7, #4
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fe faa4 	bl	8011444 <xQueueReceive>
 8012efc:	4603      	mov	r3, r0
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	f47f af2a 	bne.w	8012d58 <prvProcessReceivedCommands+0x8>
	}
}
 8012f04:	bf00      	nop
 8012f06:	bf00      	nop
 8012f08:	3730      	adds	r7, #48	; 0x30
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	24001388 	.word	0x24001388

08012f14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b088      	sub	sp, #32
 8012f18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012f1a:	e048      	b.n	8012fae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f1c:	4b2d      	ldr	r3, [pc, #180]	; (8012fd4 <prvSwitchTimerLists+0xc0>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	68db      	ldr	r3, [r3, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f26:	4b2b      	ldr	r3, [pc, #172]	; (8012fd4 <prvSwitchTimerLists+0xc0>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	68db      	ldr	r3, [r3, #12]
 8012f2c:	68db      	ldr	r3, [r3, #12]
 8012f2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	3304      	adds	r3, #4
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7fd ff83 	bl	8010e40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	6a1b      	ldr	r3, [r3, #32]
 8012f3e:	68f8      	ldr	r0, [r7, #12]
 8012f40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012f48:	f003 0304 	and.w	r3, r3, #4
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d02e      	beq.n	8012fae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	699b      	ldr	r3, [r3, #24]
 8012f54:	693a      	ldr	r2, [r7, #16]
 8012f56:	4413      	add	r3, r2
 8012f58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012f5a:	68ba      	ldr	r2, [r7, #8]
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d90e      	bls.n	8012f80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	68ba      	ldr	r2, [r7, #8]
 8012f66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012f6e:	4b19      	ldr	r3, [pc, #100]	; (8012fd4 <prvSwitchTimerLists+0xc0>)
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	3304      	adds	r3, #4
 8012f76:	4619      	mov	r1, r3
 8012f78:	4610      	mov	r0, r2
 8012f7a:	f7fd ff28 	bl	8010dce <vListInsert>
 8012f7e:	e016      	b.n	8012fae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012f80:	2300      	movs	r3, #0
 8012f82:	9300      	str	r3, [sp, #0]
 8012f84:	2300      	movs	r3, #0
 8012f86:	693a      	ldr	r2, [r7, #16]
 8012f88:	2100      	movs	r1, #0
 8012f8a:	68f8      	ldr	r0, [r7, #12]
 8012f8c:	f7ff fd60 	bl	8012a50 <xTimerGenericCommand>
 8012f90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d10a      	bne.n	8012fae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f9c:	f383 8811 	msr	BASEPRI, r3
 8012fa0:	f3bf 8f6f 	isb	sy
 8012fa4:	f3bf 8f4f 	dsb	sy
 8012fa8:	603b      	str	r3, [r7, #0]
}
 8012faa:	bf00      	nop
 8012fac:	e7fe      	b.n	8012fac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012fae:	4b09      	ldr	r3, [pc, #36]	; (8012fd4 <prvSwitchTimerLists+0xc0>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d1b1      	bne.n	8012f1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012fb8:	4b06      	ldr	r3, [pc, #24]	; (8012fd4 <prvSwitchTimerLists+0xc0>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012fbe:	4b06      	ldr	r3, [pc, #24]	; (8012fd8 <prvSwitchTimerLists+0xc4>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	4a04      	ldr	r2, [pc, #16]	; (8012fd4 <prvSwitchTimerLists+0xc0>)
 8012fc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012fc6:	4a04      	ldr	r2, [pc, #16]	; (8012fd8 <prvSwitchTimerLists+0xc4>)
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	6013      	str	r3, [r2, #0]
}
 8012fcc:	bf00      	nop
 8012fce:	3718      	adds	r7, #24
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}
 8012fd4:	24001380 	.word	0x24001380
 8012fd8:	24001384 	.word	0x24001384

08012fdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012fe2:	f000 f987 	bl	80132f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012fe6:	4b15      	ldr	r3, [pc, #84]	; (801303c <prvCheckForValidListAndQueue+0x60>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d120      	bne.n	8013030 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012fee:	4814      	ldr	r0, [pc, #80]	; (8013040 <prvCheckForValidListAndQueue+0x64>)
 8012ff0:	f7fd fe9c 	bl	8010d2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012ff4:	4813      	ldr	r0, [pc, #76]	; (8013044 <prvCheckForValidListAndQueue+0x68>)
 8012ff6:	f7fd fe99 	bl	8010d2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012ffa:	4b13      	ldr	r3, [pc, #76]	; (8013048 <prvCheckForValidListAndQueue+0x6c>)
 8012ffc:	4a10      	ldr	r2, [pc, #64]	; (8013040 <prvCheckForValidListAndQueue+0x64>)
 8012ffe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013000:	4b12      	ldr	r3, [pc, #72]	; (801304c <prvCheckForValidListAndQueue+0x70>)
 8013002:	4a10      	ldr	r2, [pc, #64]	; (8013044 <prvCheckForValidListAndQueue+0x68>)
 8013004:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013006:	2300      	movs	r3, #0
 8013008:	9300      	str	r3, [sp, #0]
 801300a:	4b11      	ldr	r3, [pc, #68]	; (8013050 <prvCheckForValidListAndQueue+0x74>)
 801300c:	4a11      	ldr	r2, [pc, #68]	; (8013054 <prvCheckForValidListAndQueue+0x78>)
 801300e:	2110      	movs	r1, #16
 8013010:	200a      	movs	r0, #10
 8013012:	f7fd ffa7 	bl	8010f64 <xQueueGenericCreateStatic>
 8013016:	4603      	mov	r3, r0
 8013018:	4a08      	ldr	r2, [pc, #32]	; (801303c <prvCheckForValidListAndQueue+0x60>)
 801301a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801301c:	4b07      	ldr	r3, [pc, #28]	; (801303c <prvCheckForValidListAndQueue+0x60>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d005      	beq.n	8013030 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013024:	4b05      	ldr	r3, [pc, #20]	; (801303c <prvCheckForValidListAndQueue+0x60>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	490b      	ldr	r1, [pc, #44]	; (8013058 <prvCheckForValidListAndQueue+0x7c>)
 801302a:	4618      	mov	r0, r3
 801302c:	f7fe fcb6 	bl	801199c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013030:	f000 f990 	bl	8013354 <vPortExitCritical>
}
 8013034:	bf00      	nop
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	24001388 	.word	0x24001388
 8013040:	24001358 	.word	0x24001358
 8013044:	2400136c 	.word	0x2400136c
 8013048:	24001380 	.word	0x24001380
 801304c:	24001384 	.word	0x24001384
 8013050:	24001434 	.word	0x24001434
 8013054:	24001394 	.word	0x24001394
 8013058:	08014be8 	.word	0x08014be8

0801305c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801305c:	b580      	push	{r7, lr}
 801305e:	b08a      	sub	sp, #40	; 0x28
 8013060:	af00      	add	r7, sp, #0
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	607a      	str	r2, [r7, #4]
 8013068:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801306a:	f06f 0301 	mvn.w	r3, #1
 801306e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801307c:	4b06      	ldr	r3, [pc, #24]	; (8013098 <xTimerPendFunctionCallFromISR+0x3c>)
 801307e:	6818      	ldr	r0, [r3, #0]
 8013080:	f107 0114 	add.w	r1, r7, #20
 8013084:	2300      	movs	r3, #0
 8013086:	683a      	ldr	r2, [r7, #0]
 8013088:	f7fe f940 	bl	801130c <xQueueGenericSendFromISR>
 801308c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013090:	4618      	mov	r0, r3
 8013092:	3728      	adds	r7, #40	; 0x28
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}
 8013098:	24001388 	.word	0x24001388

0801309c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801309c:	b480      	push	{r7}
 801309e:	b085      	sub	sp, #20
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	60f8      	str	r0, [r7, #12]
 80130a4:	60b9      	str	r1, [r7, #8]
 80130a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	3b04      	subs	r3, #4
 80130ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80130b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	3b04      	subs	r3, #4
 80130ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	f023 0201 	bic.w	r2, r3, #1
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	3b04      	subs	r3, #4
 80130ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80130cc:	4a0c      	ldr	r2, [pc, #48]	; (8013100 <pxPortInitialiseStack+0x64>)
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	3b14      	subs	r3, #20
 80130d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80130d8:	687a      	ldr	r2, [r7, #4]
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	3b04      	subs	r3, #4
 80130e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f06f 0202 	mvn.w	r2, #2
 80130ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	3b20      	subs	r3, #32
 80130f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80130f2:	68fb      	ldr	r3, [r7, #12]
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3714      	adds	r7, #20
 80130f8:	46bd      	mov	sp, r7
 80130fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fe:	4770      	bx	lr
 8013100:	08013105 	.word	0x08013105

08013104 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013104:	b480      	push	{r7}
 8013106:	b085      	sub	sp, #20
 8013108:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801310a:	2300      	movs	r3, #0
 801310c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801310e:	4b12      	ldr	r3, [pc, #72]	; (8013158 <prvTaskExitError+0x54>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013116:	d00a      	beq.n	801312e <prvTaskExitError+0x2a>
	__asm volatile
 8013118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801311c:	f383 8811 	msr	BASEPRI, r3
 8013120:	f3bf 8f6f 	isb	sy
 8013124:	f3bf 8f4f 	dsb	sy
 8013128:	60fb      	str	r3, [r7, #12]
}
 801312a:	bf00      	nop
 801312c:	e7fe      	b.n	801312c <prvTaskExitError+0x28>
	__asm volatile
 801312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013132:	f383 8811 	msr	BASEPRI, r3
 8013136:	f3bf 8f6f 	isb	sy
 801313a:	f3bf 8f4f 	dsb	sy
 801313e:	60bb      	str	r3, [r7, #8]
}
 8013140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013142:	bf00      	nop
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d0fc      	beq.n	8013144 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801314a:	bf00      	nop
 801314c:	bf00      	nop
 801314e:	3714      	adds	r7, #20
 8013150:	46bd      	mov	sp, r7
 8013152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013156:	4770      	bx	lr
 8013158:	24000098 	.word	0x24000098
 801315c:	00000000 	.word	0x00000000

08013160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013160:	4b07      	ldr	r3, [pc, #28]	; (8013180 <pxCurrentTCBConst2>)
 8013162:	6819      	ldr	r1, [r3, #0]
 8013164:	6808      	ldr	r0, [r1, #0]
 8013166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801316a:	f380 8809 	msr	PSP, r0
 801316e:	f3bf 8f6f 	isb	sy
 8013172:	f04f 0000 	mov.w	r0, #0
 8013176:	f380 8811 	msr	BASEPRI, r0
 801317a:	4770      	bx	lr
 801317c:	f3af 8000 	nop.w

08013180 <pxCurrentTCBConst2>:
 8013180:	24000e58 	.word	0x24000e58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013184:	bf00      	nop
 8013186:	bf00      	nop

08013188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013188:	4808      	ldr	r0, [pc, #32]	; (80131ac <prvPortStartFirstTask+0x24>)
 801318a:	6800      	ldr	r0, [r0, #0]
 801318c:	6800      	ldr	r0, [r0, #0]
 801318e:	f380 8808 	msr	MSP, r0
 8013192:	f04f 0000 	mov.w	r0, #0
 8013196:	f380 8814 	msr	CONTROL, r0
 801319a:	b662      	cpsie	i
 801319c:	b661      	cpsie	f
 801319e:	f3bf 8f4f 	dsb	sy
 80131a2:	f3bf 8f6f 	isb	sy
 80131a6:	df00      	svc	0
 80131a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80131aa:	bf00      	nop
 80131ac:	e000ed08 	.word	0xe000ed08

080131b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b086      	sub	sp, #24
 80131b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80131b6:	4b46      	ldr	r3, [pc, #280]	; (80132d0 <xPortStartScheduler+0x120>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	4a46      	ldr	r2, [pc, #280]	; (80132d4 <xPortStartScheduler+0x124>)
 80131bc:	4293      	cmp	r3, r2
 80131be:	d10a      	bne.n	80131d6 <xPortStartScheduler+0x26>
	__asm volatile
 80131c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131c4:	f383 8811 	msr	BASEPRI, r3
 80131c8:	f3bf 8f6f 	isb	sy
 80131cc:	f3bf 8f4f 	dsb	sy
 80131d0:	613b      	str	r3, [r7, #16]
}
 80131d2:	bf00      	nop
 80131d4:	e7fe      	b.n	80131d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80131d6:	4b3e      	ldr	r3, [pc, #248]	; (80132d0 <xPortStartScheduler+0x120>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	4a3f      	ldr	r2, [pc, #252]	; (80132d8 <xPortStartScheduler+0x128>)
 80131dc:	4293      	cmp	r3, r2
 80131de:	d10a      	bne.n	80131f6 <xPortStartScheduler+0x46>
	__asm volatile
 80131e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e4:	f383 8811 	msr	BASEPRI, r3
 80131e8:	f3bf 8f6f 	isb	sy
 80131ec:	f3bf 8f4f 	dsb	sy
 80131f0:	60fb      	str	r3, [r7, #12]
}
 80131f2:	bf00      	nop
 80131f4:	e7fe      	b.n	80131f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80131f6:	4b39      	ldr	r3, [pc, #228]	; (80132dc <xPortStartScheduler+0x12c>)
 80131f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	22ff      	movs	r2, #255	; 0xff
 8013206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	b2db      	uxtb	r3, r3
 801320e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013210:	78fb      	ldrb	r3, [r7, #3]
 8013212:	b2db      	uxtb	r3, r3
 8013214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013218:	b2da      	uxtb	r2, r3
 801321a:	4b31      	ldr	r3, [pc, #196]	; (80132e0 <xPortStartScheduler+0x130>)
 801321c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801321e:	4b31      	ldr	r3, [pc, #196]	; (80132e4 <xPortStartScheduler+0x134>)
 8013220:	2207      	movs	r2, #7
 8013222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013224:	e009      	b.n	801323a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013226:	4b2f      	ldr	r3, [pc, #188]	; (80132e4 <xPortStartScheduler+0x134>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	3b01      	subs	r3, #1
 801322c:	4a2d      	ldr	r2, [pc, #180]	; (80132e4 <xPortStartScheduler+0x134>)
 801322e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013230:	78fb      	ldrb	r3, [r7, #3]
 8013232:	b2db      	uxtb	r3, r3
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	b2db      	uxtb	r3, r3
 8013238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801323a:	78fb      	ldrb	r3, [r7, #3]
 801323c:	b2db      	uxtb	r3, r3
 801323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013242:	2b80      	cmp	r3, #128	; 0x80
 8013244:	d0ef      	beq.n	8013226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013246:	4b27      	ldr	r3, [pc, #156]	; (80132e4 <xPortStartScheduler+0x134>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	f1c3 0307 	rsb	r3, r3, #7
 801324e:	2b04      	cmp	r3, #4
 8013250:	d00a      	beq.n	8013268 <xPortStartScheduler+0xb8>
	__asm volatile
 8013252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013256:	f383 8811 	msr	BASEPRI, r3
 801325a:	f3bf 8f6f 	isb	sy
 801325e:	f3bf 8f4f 	dsb	sy
 8013262:	60bb      	str	r3, [r7, #8]
}
 8013264:	bf00      	nop
 8013266:	e7fe      	b.n	8013266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013268:	4b1e      	ldr	r3, [pc, #120]	; (80132e4 <xPortStartScheduler+0x134>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	021b      	lsls	r3, r3, #8
 801326e:	4a1d      	ldr	r2, [pc, #116]	; (80132e4 <xPortStartScheduler+0x134>)
 8013270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013272:	4b1c      	ldr	r3, [pc, #112]	; (80132e4 <xPortStartScheduler+0x134>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801327a:	4a1a      	ldr	r2, [pc, #104]	; (80132e4 <xPortStartScheduler+0x134>)
 801327c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	b2da      	uxtb	r2, r3
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013286:	4b18      	ldr	r3, [pc, #96]	; (80132e8 <xPortStartScheduler+0x138>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	4a17      	ldr	r2, [pc, #92]	; (80132e8 <xPortStartScheduler+0x138>)
 801328c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013292:	4b15      	ldr	r3, [pc, #84]	; (80132e8 <xPortStartScheduler+0x138>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	4a14      	ldr	r2, [pc, #80]	; (80132e8 <xPortStartScheduler+0x138>)
 8013298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801329c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801329e:	f000 f8dd 	bl	801345c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80132a2:	4b12      	ldr	r3, [pc, #72]	; (80132ec <xPortStartScheduler+0x13c>)
 80132a4:	2200      	movs	r2, #0
 80132a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80132a8:	f000 f8fc 	bl	80134a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80132ac:	4b10      	ldr	r3, [pc, #64]	; (80132f0 <xPortStartScheduler+0x140>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	4a0f      	ldr	r2, [pc, #60]	; (80132f0 <xPortStartScheduler+0x140>)
 80132b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80132b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80132b8:	f7ff ff66 	bl	8013188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80132bc:	f7fe ff7e 	bl	80121bc <vTaskSwitchContext>
	prvTaskExitError();
 80132c0:	f7ff ff20 	bl	8013104 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80132c4:	2300      	movs	r3, #0
}
 80132c6:	4618      	mov	r0, r3
 80132c8:	3718      	adds	r7, #24
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}
 80132ce:	bf00      	nop
 80132d0:	e000ed00 	.word	0xe000ed00
 80132d4:	410fc271 	.word	0x410fc271
 80132d8:	410fc270 	.word	0x410fc270
 80132dc:	e000e400 	.word	0xe000e400
 80132e0:	24001484 	.word	0x24001484
 80132e4:	24001488 	.word	0x24001488
 80132e8:	e000ed20 	.word	0xe000ed20
 80132ec:	24000098 	.word	0x24000098
 80132f0:	e000ef34 	.word	0xe000ef34

080132f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80132f4:	b480      	push	{r7}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
	__asm volatile
 80132fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132fe:	f383 8811 	msr	BASEPRI, r3
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	f3bf 8f4f 	dsb	sy
 801330a:	607b      	str	r3, [r7, #4]
}
 801330c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801330e:	4b0f      	ldr	r3, [pc, #60]	; (801334c <vPortEnterCritical+0x58>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	3301      	adds	r3, #1
 8013314:	4a0d      	ldr	r2, [pc, #52]	; (801334c <vPortEnterCritical+0x58>)
 8013316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013318:	4b0c      	ldr	r3, [pc, #48]	; (801334c <vPortEnterCritical+0x58>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	2b01      	cmp	r3, #1
 801331e:	d10f      	bne.n	8013340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013320:	4b0b      	ldr	r3, [pc, #44]	; (8013350 <vPortEnterCritical+0x5c>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	b2db      	uxtb	r3, r3
 8013326:	2b00      	cmp	r3, #0
 8013328:	d00a      	beq.n	8013340 <vPortEnterCritical+0x4c>
	__asm volatile
 801332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332e:	f383 8811 	msr	BASEPRI, r3
 8013332:	f3bf 8f6f 	isb	sy
 8013336:	f3bf 8f4f 	dsb	sy
 801333a:	603b      	str	r3, [r7, #0]
}
 801333c:	bf00      	nop
 801333e:	e7fe      	b.n	801333e <vPortEnterCritical+0x4a>
	}
}
 8013340:	bf00      	nop
 8013342:	370c      	adds	r7, #12
 8013344:	46bd      	mov	sp, r7
 8013346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334a:	4770      	bx	lr
 801334c:	24000098 	.word	0x24000098
 8013350:	e000ed04 	.word	0xe000ed04

08013354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013354:	b480      	push	{r7}
 8013356:	b083      	sub	sp, #12
 8013358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801335a:	4b12      	ldr	r3, [pc, #72]	; (80133a4 <vPortExitCritical+0x50>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d10a      	bne.n	8013378 <vPortExitCritical+0x24>
	__asm volatile
 8013362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013366:	f383 8811 	msr	BASEPRI, r3
 801336a:	f3bf 8f6f 	isb	sy
 801336e:	f3bf 8f4f 	dsb	sy
 8013372:	607b      	str	r3, [r7, #4]
}
 8013374:	bf00      	nop
 8013376:	e7fe      	b.n	8013376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013378:	4b0a      	ldr	r3, [pc, #40]	; (80133a4 <vPortExitCritical+0x50>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	3b01      	subs	r3, #1
 801337e:	4a09      	ldr	r2, [pc, #36]	; (80133a4 <vPortExitCritical+0x50>)
 8013380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013382:	4b08      	ldr	r3, [pc, #32]	; (80133a4 <vPortExitCritical+0x50>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d105      	bne.n	8013396 <vPortExitCritical+0x42>
 801338a:	2300      	movs	r3, #0
 801338c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	f383 8811 	msr	BASEPRI, r3
}
 8013394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013396:	bf00      	nop
 8013398:	370c      	adds	r7, #12
 801339a:	46bd      	mov	sp, r7
 801339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a0:	4770      	bx	lr
 80133a2:	bf00      	nop
 80133a4:	24000098 	.word	0x24000098
	...

080133b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80133b0:	f3ef 8009 	mrs	r0, PSP
 80133b4:	f3bf 8f6f 	isb	sy
 80133b8:	4b15      	ldr	r3, [pc, #84]	; (8013410 <pxCurrentTCBConst>)
 80133ba:	681a      	ldr	r2, [r3, #0]
 80133bc:	f01e 0f10 	tst.w	lr, #16
 80133c0:	bf08      	it	eq
 80133c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80133c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133ca:	6010      	str	r0, [r2, #0]
 80133cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80133d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80133d4:	f380 8811 	msr	BASEPRI, r0
 80133d8:	f3bf 8f4f 	dsb	sy
 80133dc:	f3bf 8f6f 	isb	sy
 80133e0:	f7fe feec 	bl	80121bc <vTaskSwitchContext>
 80133e4:	f04f 0000 	mov.w	r0, #0
 80133e8:	f380 8811 	msr	BASEPRI, r0
 80133ec:	bc09      	pop	{r0, r3}
 80133ee:	6819      	ldr	r1, [r3, #0]
 80133f0:	6808      	ldr	r0, [r1, #0]
 80133f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f6:	f01e 0f10 	tst.w	lr, #16
 80133fa:	bf08      	it	eq
 80133fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013400:	f380 8809 	msr	PSP, r0
 8013404:	f3bf 8f6f 	isb	sy
 8013408:	4770      	bx	lr
 801340a:	bf00      	nop
 801340c:	f3af 8000 	nop.w

08013410 <pxCurrentTCBConst>:
 8013410:	24000e58 	.word	0x24000e58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013414:	bf00      	nop
 8013416:	bf00      	nop

08013418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
	__asm volatile
 801341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013422:	f383 8811 	msr	BASEPRI, r3
 8013426:	f3bf 8f6f 	isb	sy
 801342a:	f3bf 8f4f 	dsb	sy
 801342e:	607b      	str	r3, [r7, #4]
}
 8013430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013432:	f7fe fe09 	bl	8012048 <xTaskIncrementTick>
 8013436:	4603      	mov	r3, r0
 8013438:	2b00      	cmp	r3, #0
 801343a:	d003      	beq.n	8013444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801343c:	4b06      	ldr	r3, [pc, #24]	; (8013458 <xPortSysTickHandler+0x40>)
 801343e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013442:	601a      	str	r2, [r3, #0]
 8013444:	2300      	movs	r3, #0
 8013446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	f383 8811 	msr	BASEPRI, r3
}
 801344e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013450:	bf00      	nop
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	e000ed04 	.word	0xe000ed04

0801345c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801345c:	b480      	push	{r7}
 801345e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013460:	4b0b      	ldr	r3, [pc, #44]	; (8013490 <vPortSetupTimerInterrupt+0x34>)
 8013462:	2200      	movs	r2, #0
 8013464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013466:	4b0b      	ldr	r3, [pc, #44]	; (8013494 <vPortSetupTimerInterrupt+0x38>)
 8013468:	2200      	movs	r2, #0
 801346a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801346c:	4b0a      	ldr	r3, [pc, #40]	; (8013498 <vPortSetupTimerInterrupt+0x3c>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4a0a      	ldr	r2, [pc, #40]	; (801349c <vPortSetupTimerInterrupt+0x40>)
 8013472:	fba2 2303 	umull	r2, r3, r2, r3
 8013476:	099b      	lsrs	r3, r3, #6
 8013478:	4a09      	ldr	r2, [pc, #36]	; (80134a0 <vPortSetupTimerInterrupt+0x44>)
 801347a:	3b01      	subs	r3, #1
 801347c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801347e:	4b04      	ldr	r3, [pc, #16]	; (8013490 <vPortSetupTimerInterrupt+0x34>)
 8013480:	2207      	movs	r2, #7
 8013482:	601a      	str	r2, [r3, #0]
}
 8013484:	bf00      	nop
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr
 801348e:	bf00      	nop
 8013490:	e000e010 	.word	0xe000e010
 8013494:	e000e018 	.word	0xe000e018
 8013498:	24000088 	.word	0x24000088
 801349c:	10624dd3 	.word	0x10624dd3
 80134a0:	e000e014 	.word	0xe000e014

080134a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80134a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80134b4 <vPortEnableVFP+0x10>
 80134a8:	6801      	ldr	r1, [r0, #0]
 80134aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80134ae:	6001      	str	r1, [r0, #0]
 80134b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80134b2:	bf00      	nop
 80134b4:	e000ed88 	.word	0xe000ed88

080134b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80134b8:	b480      	push	{r7}
 80134ba:	b085      	sub	sp, #20
 80134bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80134be:	f3ef 8305 	mrs	r3, IPSR
 80134c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	2b0f      	cmp	r3, #15
 80134c8:	d914      	bls.n	80134f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80134ca:	4a17      	ldr	r2, [pc, #92]	; (8013528 <vPortValidateInterruptPriority+0x70>)
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	4413      	add	r3, r2
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80134d4:	4b15      	ldr	r3, [pc, #84]	; (801352c <vPortValidateInterruptPriority+0x74>)
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	7afa      	ldrb	r2, [r7, #11]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d20a      	bcs.n	80134f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80134de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134e2:	f383 8811 	msr	BASEPRI, r3
 80134e6:	f3bf 8f6f 	isb	sy
 80134ea:	f3bf 8f4f 	dsb	sy
 80134ee:	607b      	str	r3, [r7, #4]
}
 80134f0:	bf00      	nop
 80134f2:	e7fe      	b.n	80134f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80134f4:	4b0e      	ldr	r3, [pc, #56]	; (8013530 <vPortValidateInterruptPriority+0x78>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80134fc:	4b0d      	ldr	r3, [pc, #52]	; (8013534 <vPortValidateInterruptPriority+0x7c>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	429a      	cmp	r2, r3
 8013502:	d90a      	bls.n	801351a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013508:	f383 8811 	msr	BASEPRI, r3
 801350c:	f3bf 8f6f 	isb	sy
 8013510:	f3bf 8f4f 	dsb	sy
 8013514:	603b      	str	r3, [r7, #0]
}
 8013516:	bf00      	nop
 8013518:	e7fe      	b.n	8013518 <vPortValidateInterruptPriority+0x60>
	}
 801351a:	bf00      	nop
 801351c:	3714      	adds	r7, #20
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr
 8013526:	bf00      	nop
 8013528:	e000e3f0 	.word	0xe000e3f0
 801352c:	24001484 	.word	0x24001484
 8013530:	e000ed0c 	.word	0xe000ed0c
 8013534:	24001488 	.word	0x24001488

08013538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b08a      	sub	sp, #40	; 0x28
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013540:	2300      	movs	r3, #0
 8013542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013544:	f7fe fcc4 	bl	8011ed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013548:	4b5b      	ldr	r3, [pc, #364]	; (80136b8 <pvPortMalloc+0x180>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d101      	bne.n	8013554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013550:	f000 f920 	bl	8013794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013554:	4b59      	ldr	r3, [pc, #356]	; (80136bc <pvPortMalloc+0x184>)
 8013556:	681a      	ldr	r2, [r3, #0]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	4013      	ands	r3, r2
 801355c:	2b00      	cmp	r3, #0
 801355e:	f040 8093 	bne.w	8013688 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d01d      	beq.n	80135a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013568:	2208      	movs	r2, #8
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	4413      	add	r3, r2
 801356e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f003 0307 	and.w	r3, r3, #7
 8013576:	2b00      	cmp	r3, #0
 8013578:	d014      	beq.n	80135a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f023 0307 	bic.w	r3, r3, #7
 8013580:	3308      	adds	r3, #8
 8013582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f003 0307 	and.w	r3, r3, #7
 801358a:	2b00      	cmp	r3, #0
 801358c:	d00a      	beq.n	80135a4 <pvPortMalloc+0x6c>
	__asm volatile
 801358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013592:	f383 8811 	msr	BASEPRI, r3
 8013596:	f3bf 8f6f 	isb	sy
 801359a:	f3bf 8f4f 	dsb	sy
 801359e:	617b      	str	r3, [r7, #20]
}
 80135a0:	bf00      	nop
 80135a2:	e7fe      	b.n	80135a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d06e      	beq.n	8013688 <pvPortMalloc+0x150>
 80135aa:	4b45      	ldr	r3, [pc, #276]	; (80136c0 <pvPortMalloc+0x188>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	687a      	ldr	r2, [r7, #4]
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d869      	bhi.n	8013688 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80135b4:	4b43      	ldr	r3, [pc, #268]	; (80136c4 <pvPortMalloc+0x18c>)
 80135b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80135b8:	4b42      	ldr	r3, [pc, #264]	; (80136c4 <pvPortMalloc+0x18c>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80135be:	e004      	b.n	80135ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80135c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80135c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80135ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d903      	bls.n	80135dc <pvPortMalloc+0xa4>
 80135d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d1f1      	bne.n	80135c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80135dc:	4b36      	ldr	r3, [pc, #216]	; (80136b8 <pvPortMalloc+0x180>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d050      	beq.n	8013688 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80135e6:	6a3b      	ldr	r3, [r7, #32]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	2208      	movs	r2, #8
 80135ec:	4413      	add	r3, r2
 80135ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80135f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f2:	681a      	ldr	r2, [r3, #0]
 80135f4:	6a3b      	ldr	r3, [r7, #32]
 80135f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80135f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fa:	685a      	ldr	r2, [r3, #4]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	1ad2      	subs	r2, r2, r3
 8013600:	2308      	movs	r3, #8
 8013602:	005b      	lsls	r3, r3, #1
 8013604:	429a      	cmp	r2, r3
 8013606:	d91f      	bls.n	8013648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	4413      	add	r3, r2
 801360e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013610:	69bb      	ldr	r3, [r7, #24]
 8013612:	f003 0307 	and.w	r3, r3, #7
 8013616:	2b00      	cmp	r3, #0
 8013618:	d00a      	beq.n	8013630 <pvPortMalloc+0xf8>
	__asm volatile
 801361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801361e:	f383 8811 	msr	BASEPRI, r3
 8013622:	f3bf 8f6f 	isb	sy
 8013626:	f3bf 8f4f 	dsb	sy
 801362a:	613b      	str	r3, [r7, #16]
}
 801362c:	bf00      	nop
 801362e:	e7fe      	b.n	801362e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013632:	685a      	ldr	r2, [r3, #4]
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	1ad2      	subs	r2, r2, r3
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363e:	687a      	ldr	r2, [r7, #4]
 8013640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013642:	69b8      	ldr	r0, [r7, #24]
 8013644:	f000 f908 	bl	8013858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013648:	4b1d      	ldr	r3, [pc, #116]	; (80136c0 <pvPortMalloc+0x188>)
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364e:	685b      	ldr	r3, [r3, #4]
 8013650:	1ad3      	subs	r3, r2, r3
 8013652:	4a1b      	ldr	r2, [pc, #108]	; (80136c0 <pvPortMalloc+0x188>)
 8013654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013656:	4b1a      	ldr	r3, [pc, #104]	; (80136c0 <pvPortMalloc+0x188>)
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	4b1b      	ldr	r3, [pc, #108]	; (80136c8 <pvPortMalloc+0x190>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	429a      	cmp	r2, r3
 8013660:	d203      	bcs.n	801366a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013662:	4b17      	ldr	r3, [pc, #92]	; (80136c0 <pvPortMalloc+0x188>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	4a18      	ldr	r2, [pc, #96]	; (80136c8 <pvPortMalloc+0x190>)
 8013668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801366c:	685a      	ldr	r2, [r3, #4]
 801366e:	4b13      	ldr	r3, [pc, #76]	; (80136bc <pvPortMalloc+0x184>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	431a      	orrs	r2, r3
 8013674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801367a:	2200      	movs	r2, #0
 801367c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801367e:	4b13      	ldr	r3, [pc, #76]	; (80136cc <pvPortMalloc+0x194>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	3301      	adds	r3, #1
 8013684:	4a11      	ldr	r2, [pc, #68]	; (80136cc <pvPortMalloc+0x194>)
 8013686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013688:	f7fe fc30 	bl	8011eec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	f003 0307 	and.w	r3, r3, #7
 8013692:	2b00      	cmp	r3, #0
 8013694:	d00a      	beq.n	80136ac <pvPortMalloc+0x174>
	__asm volatile
 8013696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801369a:	f383 8811 	msr	BASEPRI, r3
 801369e:	f3bf 8f6f 	isb	sy
 80136a2:	f3bf 8f4f 	dsb	sy
 80136a6:	60fb      	str	r3, [r7, #12]
}
 80136a8:	bf00      	nop
 80136aa:	e7fe      	b.n	80136aa <pvPortMalloc+0x172>
	return pvReturn;
 80136ac:	69fb      	ldr	r3, [r7, #28]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3728      	adds	r7, #40	; 0x28
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	24005094 	.word	0x24005094
 80136bc:	240050a8 	.word	0x240050a8
 80136c0:	24005098 	.word	0x24005098
 80136c4:	2400508c 	.word	0x2400508c
 80136c8:	2400509c 	.word	0x2400509c
 80136cc:	240050a0 	.word	0x240050a0

080136d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b086      	sub	sp, #24
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d04d      	beq.n	801377e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80136e2:	2308      	movs	r3, #8
 80136e4:	425b      	negs	r3, r3
 80136e6:	697a      	ldr	r2, [r7, #20]
 80136e8:	4413      	add	r3, r2
 80136ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	685a      	ldr	r2, [r3, #4]
 80136f4:	4b24      	ldr	r3, [pc, #144]	; (8013788 <vPortFree+0xb8>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	4013      	ands	r3, r2
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d10a      	bne.n	8013714 <vPortFree+0x44>
	__asm volatile
 80136fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013702:	f383 8811 	msr	BASEPRI, r3
 8013706:	f3bf 8f6f 	isb	sy
 801370a:	f3bf 8f4f 	dsb	sy
 801370e:	60fb      	str	r3, [r7, #12]
}
 8013710:	bf00      	nop
 8013712:	e7fe      	b.n	8013712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d00a      	beq.n	8013732 <vPortFree+0x62>
	__asm volatile
 801371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013720:	f383 8811 	msr	BASEPRI, r3
 8013724:	f3bf 8f6f 	isb	sy
 8013728:	f3bf 8f4f 	dsb	sy
 801372c:	60bb      	str	r3, [r7, #8]
}
 801372e:	bf00      	nop
 8013730:	e7fe      	b.n	8013730 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013732:	693b      	ldr	r3, [r7, #16]
 8013734:	685a      	ldr	r2, [r3, #4]
 8013736:	4b14      	ldr	r3, [pc, #80]	; (8013788 <vPortFree+0xb8>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	4013      	ands	r3, r2
 801373c:	2b00      	cmp	r3, #0
 801373e:	d01e      	beq.n	801377e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d11a      	bne.n	801377e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	685a      	ldr	r2, [r3, #4]
 801374c:	4b0e      	ldr	r3, [pc, #56]	; (8013788 <vPortFree+0xb8>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	43db      	mvns	r3, r3
 8013752:	401a      	ands	r2, r3
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013758:	f7fe fbba 	bl	8011ed0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	685a      	ldr	r2, [r3, #4]
 8013760:	4b0a      	ldr	r3, [pc, #40]	; (801378c <vPortFree+0xbc>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	4413      	add	r3, r2
 8013766:	4a09      	ldr	r2, [pc, #36]	; (801378c <vPortFree+0xbc>)
 8013768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801376a:	6938      	ldr	r0, [r7, #16]
 801376c:	f000 f874 	bl	8013858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013770:	4b07      	ldr	r3, [pc, #28]	; (8013790 <vPortFree+0xc0>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	3301      	adds	r3, #1
 8013776:	4a06      	ldr	r2, [pc, #24]	; (8013790 <vPortFree+0xc0>)
 8013778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801377a:	f7fe fbb7 	bl	8011eec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801377e:	bf00      	nop
 8013780:	3718      	adds	r7, #24
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
 8013786:	bf00      	nop
 8013788:	240050a8 	.word	0x240050a8
 801378c:	24005098 	.word	0x24005098
 8013790:	240050a4 	.word	0x240050a4

08013794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013794:	b480      	push	{r7}
 8013796:	b085      	sub	sp, #20
 8013798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801379a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801379e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80137a0:	4b27      	ldr	r3, [pc, #156]	; (8013840 <prvHeapInit+0xac>)
 80137a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	f003 0307 	and.w	r3, r3, #7
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00c      	beq.n	80137c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	3307      	adds	r3, #7
 80137b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	f023 0307 	bic.w	r3, r3, #7
 80137ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80137bc:	68ba      	ldr	r2, [r7, #8]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	1ad3      	subs	r3, r2, r3
 80137c2:	4a1f      	ldr	r2, [pc, #124]	; (8013840 <prvHeapInit+0xac>)
 80137c4:	4413      	add	r3, r2
 80137c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80137cc:	4a1d      	ldr	r2, [pc, #116]	; (8013844 <prvHeapInit+0xb0>)
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80137d2:	4b1c      	ldr	r3, [pc, #112]	; (8013844 <prvHeapInit+0xb0>)
 80137d4:	2200      	movs	r2, #0
 80137d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	68ba      	ldr	r2, [r7, #8]
 80137dc:	4413      	add	r3, r2
 80137de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80137e0:	2208      	movs	r2, #8
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	1a9b      	subs	r3, r3, r2
 80137e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f023 0307 	bic.w	r3, r3, #7
 80137ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	4a15      	ldr	r2, [pc, #84]	; (8013848 <prvHeapInit+0xb4>)
 80137f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80137f6:	4b14      	ldr	r3, [pc, #80]	; (8013848 <prvHeapInit+0xb4>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	2200      	movs	r2, #0
 80137fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80137fe:	4b12      	ldr	r3, [pc, #72]	; (8013848 <prvHeapInit+0xb4>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	2200      	movs	r2, #0
 8013804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	68fa      	ldr	r2, [r7, #12]
 801380e:	1ad2      	subs	r2, r2, r3
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013814:	4b0c      	ldr	r3, [pc, #48]	; (8013848 <prvHeapInit+0xb4>)
 8013816:	681a      	ldr	r2, [r3, #0]
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	685b      	ldr	r3, [r3, #4]
 8013820:	4a0a      	ldr	r2, [pc, #40]	; (801384c <prvHeapInit+0xb8>)
 8013822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	685b      	ldr	r3, [r3, #4]
 8013828:	4a09      	ldr	r2, [pc, #36]	; (8013850 <prvHeapInit+0xbc>)
 801382a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801382c:	4b09      	ldr	r3, [pc, #36]	; (8013854 <prvHeapInit+0xc0>)
 801382e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013832:	601a      	str	r2, [r3, #0]
}
 8013834:	bf00      	nop
 8013836:	3714      	adds	r7, #20
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr
 8013840:	2400148c 	.word	0x2400148c
 8013844:	2400508c 	.word	0x2400508c
 8013848:	24005094 	.word	0x24005094
 801384c:	2400509c 	.word	0x2400509c
 8013850:	24005098 	.word	0x24005098
 8013854:	240050a8 	.word	0x240050a8

08013858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013858:	b480      	push	{r7}
 801385a:	b085      	sub	sp, #20
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013860:	4b28      	ldr	r3, [pc, #160]	; (8013904 <prvInsertBlockIntoFreeList+0xac>)
 8013862:	60fb      	str	r3, [r7, #12]
 8013864:	e002      	b.n	801386c <prvInsertBlockIntoFreeList+0x14>
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	60fb      	str	r3, [r7, #12]
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	687a      	ldr	r2, [r7, #4]
 8013872:	429a      	cmp	r2, r3
 8013874:	d8f7      	bhi.n	8013866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	685b      	ldr	r3, [r3, #4]
 801387e:	68ba      	ldr	r2, [r7, #8]
 8013880:	4413      	add	r3, r2
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	429a      	cmp	r2, r3
 8013886:	d108      	bne.n	801389a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	685a      	ldr	r2, [r3, #4]
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	441a      	add	r2, r3
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	685b      	ldr	r3, [r3, #4]
 80138a2:	68ba      	ldr	r2, [r7, #8]
 80138a4:	441a      	add	r2, r3
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d118      	bne.n	80138e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	681a      	ldr	r2, [r3, #0]
 80138b2:	4b15      	ldr	r3, [pc, #84]	; (8013908 <prvInsertBlockIntoFreeList+0xb0>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d00d      	beq.n	80138d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	685a      	ldr	r2, [r3, #4]
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	441a      	add	r2, r3
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	601a      	str	r2, [r3, #0]
 80138d4:	e008      	b.n	80138e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80138d6:	4b0c      	ldr	r3, [pc, #48]	; (8013908 <prvInsertBlockIntoFreeList+0xb0>)
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	601a      	str	r2, [r3, #0]
 80138de:	e003      	b.n	80138e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	681a      	ldr	r2, [r3, #0]
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80138e8:	68fa      	ldr	r2, [r7, #12]
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d002      	beq.n	80138f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	687a      	ldr	r2, [r7, #4]
 80138f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80138f6:	bf00      	nop
 80138f8:	3714      	adds	r7, #20
 80138fa:	46bd      	mov	sp, r7
 80138fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013900:	4770      	bx	lr
 8013902:	bf00      	nop
 8013904:	2400508c 	.word	0x2400508c
 8013908:	24005094 	.word	0x24005094

0801390c <__errno>:
 801390c:	4b01      	ldr	r3, [pc, #4]	; (8013914 <__errno+0x8>)
 801390e:	6818      	ldr	r0, [r3, #0]
 8013910:	4770      	bx	lr
 8013912:	bf00      	nop
 8013914:	2400009c 	.word	0x2400009c

08013918 <__libc_init_array>:
 8013918:	b570      	push	{r4, r5, r6, lr}
 801391a:	4d0d      	ldr	r5, [pc, #52]	; (8013950 <__libc_init_array+0x38>)
 801391c:	4c0d      	ldr	r4, [pc, #52]	; (8013954 <__libc_init_array+0x3c>)
 801391e:	1b64      	subs	r4, r4, r5
 8013920:	10a4      	asrs	r4, r4, #2
 8013922:	2600      	movs	r6, #0
 8013924:	42a6      	cmp	r6, r4
 8013926:	d109      	bne.n	801393c <__libc_init_array+0x24>
 8013928:	4d0b      	ldr	r5, [pc, #44]	; (8013958 <__libc_init_array+0x40>)
 801392a:	4c0c      	ldr	r4, [pc, #48]	; (801395c <__libc_init_array+0x44>)
 801392c:	f001 f842 	bl	80149b4 <_init>
 8013930:	1b64      	subs	r4, r4, r5
 8013932:	10a4      	asrs	r4, r4, #2
 8013934:	2600      	movs	r6, #0
 8013936:	42a6      	cmp	r6, r4
 8013938:	d105      	bne.n	8013946 <__libc_init_array+0x2e>
 801393a:	bd70      	pop	{r4, r5, r6, pc}
 801393c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013940:	4798      	blx	r3
 8013942:	3601      	adds	r6, #1
 8013944:	e7ee      	b.n	8013924 <__libc_init_array+0xc>
 8013946:	f855 3b04 	ldr.w	r3, [r5], #4
 801394a:	4798      	blx	r3
 801394c:	3601      	adds	r6, #1
 801394e:	e7f2      	b.n	8013936 <__libc_init_array+0x1e>
 8013950:	08014d84 	.word	0x08014d84
 8013954:	08014d84 	.word	0x08014d84
 8013958:	08014d84 	.word	0x08014d84
 801395c:	08014d88 	.word	0x08014d88

08013960 <malloc>:
 8013960:	4b02      	ldr	r3, [pc, #8]	; (801396c <malloc+0xc>)
 8013962:	4601      	mov	r1, r0
 8013964:	6818      	ldr	r0, [r3, #0]
 8013966:	f000 b88d 	b.w	8013a84 <_malloc_r>
 801396a:	bf00      	nop
 801396c:	2400009c 	.word	0x2400009c

08013970 <free>:
 8013970:	4b02      	ldr	r3, [pc, #8]	; (801397c <free+0xc>)
 8013972:	4601      	mov	r1, r0
 8013974:	6818      	ldr	r0, [r3, #0]
 8013976:	f000 b819 	b.w	80139ac <_free_r>
 801397a:	bf00      	nop
 801397c:	2400009c 	.word	0x2400009c

08013980 <memcpy>:
 8013980:	440a      	add	r2, r1
 8013982:	4291      	cmp	r1, r2
 8013984:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013988:	d100      	bne.n	801398c <memcpy+0xc>
 801398a:	4770      	bx	lr
 801398c:	b510      	push	{r4, lr}
 801398e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013996:	4291      	cmp	r1, r2
 8013998:	d1f9      	bne.n	801398e <memcpy+0xe>
 801399a:	bd10      	pop	{r4, pc}

0801399c <memset>:
 801399c:	4402      	add	r2, r0
 801399e:	4603      	mov	r3, r0
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d100      	bne.n	80139a6 <memset+0xa>
 80139a4:	4770      	bx	lr
 80139a6:	f803 1b01 	strb.w	r1, [r3], #1
 80139aa:	e7f9      	b.n	80139a0 <memset+0x4>

080139ac <_free_r>:
 80139ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80139ae:	2900      	cmp	r1, #0
 80139b0:	d044      	beq.n	8013a3c <_free_r+0x90>
 80139b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139b6:	9001      	str	r0, [sp, #4]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	f1a1 0404 	sub.w	r4, r1, #4
 80139be:	bfb8      	it	lt
 80139c0:	18e4      	addlt	r4, r4, r3
 80139c2:	f000 fc51 	bl	8014268 <__malloc_lock>
 80139c6:	4a1e      	ldr	r2, [pc, #120]	; (8013a40 <_free_r+0x94>)
 80139c8:	9801      	ldr	r0, [sp, #4]
 80139ca:	6813      	ldr	r3, [r2, #0]
 80139cc:	b933      	cbnz	r3, 80139dc <_free_r+0x30>
 80139ce:	6063      	str	r3, [r4, #4]
 80139d0:	6014      	str	r4, [r2, #0]
 80139d2:	b003      	add	sp, #12
 80139d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139d8:	f000 bc4c 	b.w	8014274 <__malloc_unlock>
 80139dc:	42a3      	cmp	r3, r4
 80139de:	d908      	bls.n	80139f2 <_free_r+0x46>
 80139e0:	6825      	ldr	r5, [r4, #0]
 80139e2:	1961      	adds	r1, r4, r5
 80139e4:	428b      	cmp	r3, r1
 80139e6:	bf01      	itttt	eq
 80139e8:	6819      	ldreq	r1, [r3, #0]
 80139ea:	685b      	ldreq	r3, [r3, #4]
 80139ec:	1949      	addeq	r1, r1, r5
 80139ee:	6021      	streq	r1, [r4, #0]
 80139f0:	e7ed      	b.n	80139ce <_free_r+0x22>
 80139f2:	461a      	mov	r2, r3
 80139f4:	685b      	ldr	r3, [r3, #4]
 80139f6:	b10b      	cbz	r3, 80139fc <_free_r+0x50>
 80139f8:	42a3      	cmp	r3, r4
 80139fa:	d9fa      	bls.n	80139f2 <_free_r+0x46>
 80139fc:	6811      	ldr	r1, [r2, #0]
 80139fe:	1855      	adds	r5, r2, r1
 8013a00:	42a5      	cmp	r5, r4
 8013a02:	d10b      	bne.n	8013a1c <_free_r+0x70>
 8013a04:	6824      	ldr	r4, [r4, #0]
 8013a06:	4421      	add	r1, r4
 8013a08:	1854      	adds	r4, r2, r1
 8013a0a:	42a3      	cmp	r3, r4
 8013a0c:	6011      	str	r1, [r2, #0]
 8013a0e:	d1e0      	bne.n	80139d2 <_free_r+0x26>
 8013a10:	681c      	ldr	r4, [r3, #0]
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	6053      	str	r3, [r2, #4]
 8013a16:	4421      	add	r1, r4
 8013a18:	6011      	str	r1, [r2, #0]
 8013a1a:	e7da      	b.n	80139d2 <_free_r+0x26>
 8013a1c:	d902      	bls.n	8013a24 <_free_r+0x78>
 8013a1e:	230c      	movs	r3, #12
 8013a20:	6003      	str	r3, [r0, #0]
 8013a22:	e7d6      	b.n	80139d2 <_free_r+0x26>
 8013a24:	6825      	ldr	r5, [r4, #0]
 8013a26:	1961      	adds	r1, r4, r5
 8013a28:	428b      	cmp	r3, r1
 8013a2a:	bf04      	itt	eq
 8013a2c:	6819      	ldreq	r1, [r3, #0]
 8013a2e:	685b      	ldreq	r3, [r3, #4]
 8013a30:	6063      	str	r3, [r4, #4]
 8013a32:	bf04      	itt	eq
 8013a34:	1949      	addeq	r1, r1, r5
 8013a36:	6021      	streq	r1, [r4, #0]
 8013a38:	6054      	str	r4, [r2, #4]
 8013a3a:	e7ca      	b.n	80139d2 <_free_r+0x26>
 8013a3c:	b003      	add	sp, #12
 8013a3e:	bd30      	pop	{r4, r5, pc}
 8013a40:	240050ac 	.word	0x240050ac

08013a44 <sbrk_aligned>:
 8013a44:	b570      	push	{r4, r5, r6, lr}
 8013a46:	4e0e      	ldr	r6, [pc, #56]	; (8013a80 <sbrk_aligned+0x3c>)
 8013a48:	460c      	mov	r4, r1
 8013a4a:	6831      	ldr	r1, [r6, #0]
 8013a4c:	4605      	mov	r5, r0
 8013a4e:	b911      	cbnz	r1, 8013a56 <sbrk_aligned+0x12>
 8013a50:	f000 f91a 	bl	8013c88 <_sbrk_r>
 8013a54:	6030      	str	r0, [r6, #0]
 8013a56:	4621      	mov	r1, r4
 8013a58:	4628      	mov	r0, r5
 8013a5a:	f000 f915 	bl	8013c88 <_sbrk_r>
 8013a5e:	1c43      	adds	r3, r0, #1
 8013a60:	d00a      	beq.n	8013a78 <sbrk_aligned+0x34>
 8013a62:	1cc4      	adds	r4, r0, #3
 8013a64:	f024 0403 	bic.w	r4, r4, #3
 8013a68:	42a0      	cmp	r0, r4
 8013a6a:	d007      	beq.n	8013a7c <sbrk_aligned+0x38>
 8013a6c:	1a21      	subs	r1, r4, r0
 8013a6e:	4628      	mov	r0, r5
 8013a70:	f000 f90a 	bl	8013c88 <_sbrk_r>
 8013a74:	3001      	adds	r0, #1
 8013a76:	d101      	bne.n	8013a7c <sbrk_aligned+0x38>
 8013a78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	bd70      	pop	{r4, r5, r6, pc}
 8013a80:	240050b0 	.word	0x240050b0

08013a84 <_malloc_r>:
 8013a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a88:	1ccd      	adds	r5, r1, #3
 8013a8a:	f025 0503 	bic.w	r5, r5, #3
 8013a8e:	3508      	adds	r5, #8
 8013a90:	2d0c      	cmp	r5, #12
 8013a92:	bf38      	it	cc
 8013a94:	250c      	movcc	r5, #12
 8013a96:	2d00      	cmp	r5, #0
 8013a98:	4607      	mov	r7, r0
 8013a9a:	db01      	blt.n	8013aa0 <_malloc_r+0x1c>
 8013a9c:	42a9      	cmp	r1, r5
 8013a9e:	d905      	bls.n	8013aac <_malloc_r+0x28>
 8013aa0:	230c      	movs	r3, #12
 8013aa2:	603b      	str	r3, [r7, #0]
 8013aa4:	2600      	movs	r6, #0
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aac:	4e2e      	ldr	r6, [pc, #184]	; (8013b68 <_malloc_r+0xe4>)
 8013aae:	f000 fbdb 	bl	8014268 <__malloc_lock>
 8013ab2:	6833      	ldr	r3, [r6, #0]
 8013ab4:	461c      	mov	r4, r3
 8013ab6:	bb34      	cbnz	r4, 8013b06 <_malloc_r+0x82>
 8013ab8:	4629      	mov	r1, r5
 8013aba:	4638      	mov	r0, r7
 8013abc:	f7ff ffc2 	bl	8013a44 <sbrk_aligned>
 8013ac0:	1c43      	adds	r3, r0, #1
 8013ac2:	4604      	mov	r4, r0
 8013ac4:	d14d      	bne.n	8013b62 <_malloc_r+0xde>
 8013ac6:	6834      	ldr	r4, [r6, #0]
 8013ac8:	4626      	mov	r6, r4
 8013aca:	2e00      	cmp	r6, #0
 8013acc:	d140      	bne.n	8013b50 <_malloc_r+0xcc>
 8013ace:	6823      	ldr	r3, [r4, #0]
 8013ad0:	4631      	mov	r1, r6
 8013ad2:	4638      	mov	r0, r7
 8013ad4:	eb04 0803 	add.w	r8, r4, r3
 8013ad8:	f000 f8d6 	bl	8013c88 <_sbrk_r>
 8013adc:	4580      	cmp	r8, r0
 8013ade:	d13a      	bne.n	8013b56 <_malloc_r+0xd2>
 8013ae0:	6821      	ldr	r1, [r4, #0]
 8013ae2:	3503      	adds	r5, #3
 8013ae4:	1a6d      	subs	r5, r5, r1
 8013ae6:	f025 0503 	bic.w	r5, r5, #3
 8013aea:	3508      	adds	r5, #8
 8013aec:	2d0c      	cmp	r5, #12
 8013aee:	bf38      	it	cc
 8013af0:	250c      	movcc	r5, #12
 8013af2:	4629      	mov	r1, r5
 8013af4:	4638      	mov	r0, r7
 8013af6:	f7ff ffa5 	bl	8013a44 <sbrk_aligned>
 8013afa:	3001      	adds	r0, #1
 8013afc:	d02b      	beq.n	8013b56 <_malloc_r+0xd2>
 8013afe:	6823      	ldr	r3, [r4, #0]
 8013b00:	442b      	add	r3, r5
 8013b02:	6023      	str	r3, [r4, #0]
 8013b04:	e00e      	b.n	8013b24 <_malloc_r+0xa0>
 8013b06:	6822      	ldr	r2, [r4, #0]
 8013b08:	1b52      	subs	r2, r2, r5
 8013b0a:	d41e      	bmi.n	8013b4a <_malloc_r+0xc6>
 8013b0c:	2a0b      	cmp	r2, #11
 8013b0e:	d916      	bls.n	8013b3e <_malloc_r+0xba>
 8013b10:	1961      	adds	r1, r4, r5
 8013b12:	42a3      	cmp	r3, r4
 8013b14:	6025      	str	r5, [r4, #0]
 8013b16:	bf18      	it	ne
 8013b18:	6059      	strne	r1, [r3, #4]
 8013b1a:	6863      	ldr	r3, [r4, #4]
 8013b1c:	bf08      	it	eq
 8013b1e:	6031      	streq	r1, [r6, #0]
 8013b20:	5162      	str	r2, [r4, r5]
 8013b22:	604b      	str	r3, [r1, #4]
 8013b24:	4638      	mov	r0, r7
 8013b26:	f104 060b 	add.w	r6, r4, #11
 8013b2a:	f000 fba3 	bl	8014274 <__malloc_unlock>
 8013b2e:	f026 0607 	bic.w	r6, r6, #7
 8013b32:	1d23      	adds	r3, r4, #4
 8013b34:	1af2      	subs	r2, r6, r3
 8013b36:	d0b6      	beq.n	8013aa6 <_malloc_r+0x22>
 8013b38:	1b9b      	subs	r3, r3, r6
 8013b3a:	50a3      	str	r3, [r4, r2]
 8013b3c:	e7b3      	b.n	8013aa6 <_malloc_r+0x22>
 8013b3e:	6862      	ldr	r2, [r4, #4]
 8013b40:	42a3      	cmp	r3, r4
 8013b42:	bf0c      	ite	eq
 8013b44:	6032      	streq	r2, [r6, #0]
 8013b46:	605a      	strne	r2, [r3, #4]
 8013b48:	e7ec      	b.n	8013b24 <_malloc_r+0xa0>
 8013b4a:	4623      	mov	r3, r4
 8013b4c:	6864      	ldr	r4, [r4, #4]
 8013b4e:	e7b2      	b.n	8013ab6 <_malloc_r+0x32>
 8013b50:	4634      	mov	r4, r6
 8013b52:	6876      	ldr	r6, [r6, #4]
 8013b54:	e7b9      	b.n	8013aca <_malloc_r+0x46>
 8013b56:	230c      	movs	r3, #12
 8013b58:	603b      	str	r3, [r7, #0]
 8013b5a:	4638      	mov	r0, r7
 8013b5c:	f000 fb8a 	bl	8014274 <__malloc_unlock>
 8013b60:	e7a1      	b.n	8013aa6 <_malloc_r+0x22>
 8013b62:	6025      	str	r5, [r4, #0]
 8013b64:	e7de      	b.n	8013b24 <_malloc_r+0xa0>
 8013b66:	bf00      	nop
 8013b68:	240050ac 	.word	0x240050ac

08013b6c <iprintf>:
 8013b6c:	b40f      	push	{r0, r1, r2, r3}
 8013b6e:	4b0a      	ldr	r3, [pc, #40]	; (8013b98 <iprintf+0x2c>)
 8013b70:	b513      	push	{r0, r1, r4, lr}
 8013b72:	681c      	ldr	r4, [r3, #0]
 8013b74:	b124      	cbz	r4, 8013b80 <iprintf+0x14>
 8013b76:	69a3      	ldr	r3, [r4, #24]
 8013b78:	b913      	cbnz	r3, 8013b80 <iprintf+0x14>
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f000 fa6e 	bl	801405c <__sinit>
 8013b80:	ab05      	add	r3, sp, #20
 8013b82:	9a04      	ldr	r2, [sp, #16]
 8013b84:	68a1      	ldr	r1, [r4, #8]
 8013b86:	9301      	str	r3, [sp, #4]
 8013b88:	4620      	mov	r0, r4
 8013b8a:	f000 fba3 	bl	80142d4 <_vfiprintf_r>
 8013b8e:	b002      	add	sp, #8
 8013b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b94:	b004      	add	sp, #16
 8013b96:	4770      	bx	lr
 8013b98:	2400009c 	.word	0x2400009c

08013b9c <_puts_r>:
 8013b9c:	b570      	push	{r4, r5, r6, lr}
 8013b9e:	460e      	mov	r6, r1
 8013ba0:	4605      	mov	r5, r0
 8013ba2:	b118      	cbz	r0, 8013bac <_puts_r+0x10>
 8013ba4:	6983      	ldr	r3, [r0, #24]
 8013ba6:	b90b      	cbnz	r3, 8013bac <_puts_r+0x10>
 8013ba8:	f000 fa58 	bl	801405c <__sinit>
 8013bac:	69ab      	ldr	r3, [r5, #24]
 8013bae:	68ac      	ldr	r4, [r5, #8]
 8013bb0:	b913      	cbnz	r3, 8013bb8 <_puts_r+0x1c>
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	f000 fa52 	bl	801405c <__sinit>
 8013bb8:	4b2c      	ldr	r3, [pc, #176]	; (8013c6c <_puts_r+0xd0>)
 8013bba:	429c      	cmp	r4, r3
 8013bbc:	d120      	bne.n	8013c00 <_puts_r+0x64>
 8013bbe:	686c      	ldr	r4, [r5, #4]
 8013bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013bc2:	07db      	lsls	r3, r3, #31
 8013bc4:	d405      	bmi.n	8013bd2 <_puts_r+0x36>
 8013bc6:	89a3      	ldrh	r3, [r4, #12]
 8013bc8:	0598      	lsls	r0, r3, #22
 8013bca:	d402      	bmi.n	8013bd2 <_puts_r+0x36>
 8013bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bce:	f000 fae3 	bl	8014198 <__retarget_lock_acquire_recursive>
 8013bd2:	89a3      	ldrh	r3, [r4, #12]
 8013bd4:	0719      	lsls	r1, r3, #28
 8013bd6:	d51d      	bpl.n	8013c14 <_puts_r+0x78>
 8013bd8:	6923      	ldr	r3, [r4, #16]
 8013bda:	b1db      	cbz	r3, 8013c14 <_puts_r+0x78>
 8013bdc:	3e01      	subs	r6, #1
 8013bde:	68a3      	ldr	r3, [r4, #8]
 8013be0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013be4:	3b01      	subs	r3, #1
 8013be6:	60a3      	str	r3, [r4, #8]
 8013be8:	bb39      	cbnz	r1, 8013c3a <_puts_r+0x9e>
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	da38      	bge.n	8013c60 <_puts_r+0xc4>
 8013bee:	4622      	mov	r2, r4
 8013bf0:	210a      	movs	r1, #10
 8013bf2:	4628      	mov	r0, r5
 8013bf4:	f000 f858 	bl	8013ca8 <__swbuf_r>
 8013bf8:	3001      	adds	r0, #1
 8013bfa:	d011      	beq.n	8013c20 <_puts_r+0x84>
 8013bfc:	250a      	movs	r5, #10
 8013bfe:	e011      	b.n	8013c24 <_puts_r+0x88>
 8013c00:	4b1b      	ldr	r3, [pc, #108]	; (8013c70 <_puts_r+0xd4>)
 8013c02:	429c      	cmp	r4, r3
 8013c04:	d101      	bne.n	8013c0a <_puts_r+0x6e>
 8013c06:	68ac      	ldr	r4, [r5, #8]
 8013c08:	e7da      	b.n	8013bc0 <_puts_r+0x24>
 8013c0a:	4b1a      	ldr	r3, [pc, #104]	; (8013c74 <_puts_r+0xd8>)
 8013c0c:	429c      	cmp	r4, r3
 8013c0e:	bf08      	it	eq
 8013c10:	68ec      	ldreq	r4, [r5, #12]
 8013c12:	e7d5      	b.n	8013bc0 <_puts_r+0x24>
 8013c14:	4621      	mov	r1, r4
 8013c16:	4628      	mov	r0, r5
 8013c18:	f000 f898 	bl	8013d4c <__swsetup_r>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	d0dd      	beq.n	8013bdc <_puts_r+0x40>
 8013c20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c26:	07da      	lsls	r2, r3, #31
 8013c28:	d405      	bmi.n	8013c36 <_puts_r+0x9a>
 8013c2a:	89a3      	ldrh	r3, [r4, #12]
 8013c2c:	059b      	lsls	r3, r3, #22
 8013c2e:	d402      	bmi.n	8013c36 <_puts_r+0x9a>
 8013c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c32:	f000 fab2 	bl	801419a <__retarget_lock_release_recursive>
 8013c36:	4628      	mov	r0, r5
 8013c38:	bd70      	pop	{r4, r5, r6, pc}
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	da04      	bge.n	8013c48 <_puts_r+0xac>
 8013c3e:	69a2      	ldr	r2, [r4, #24]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	dc06      	bgt.n	8013c52 <_puts_r+0xb6>
 8013c44:	290a      	cmp	r1, #10
 8013c46:	d004      	beq.n	8013c52 <_puts_r+0xb6>
 8013c48:	6823      	ldr	r3, [r4, #0]
 8013c4a:	1c5a      	adds	r2, r3, #1
 8013c4c:	6022      	str	r2, [r4, #0]
 8013c4e:	7019      	strb	r1, [r3, #0]
 8013c50:	e7c5      	b.n	8013bde <_puts_r+0x42>
 8013c52:	4622      	mov	r2, r4
 8013c54:	4628      	mov	r0, r5
 8013c56:	f000 f827 	bl	8013ca8 <__swbuf_r>
 8013c5a:	3001      	adds	r0, #1
 8013c5c:	d1bf      	bne.n	8013bde <_puts_r+0x42>
 8013c5e:	e7df      	b.n	8013c20 <_puts_r+0x84>
 8013c60:	6823      	ldr	r3, [r4, #0]
 8013c62:	250a      	movs	r5, #10
 8013c64:	1c5a      	adds	r2, r3, #1
 8013c66:	6022      	str	r2, [r4, #0]
 8013c68:	701d      	strb	r5, [r3, #0]
 8013c6a:	e7db      	b.n	8013c24 <_puts_r+0x88>
 8013c6c:	08014d08 	.word	0x08014d08
 8013c70:	08014d28 	.word	0x08014d28
 8013c74:	08014ce8 	.word	0x08014ce8

08013c78 <puts>:
 8013c78:	4b02      	ldr	r3, [pc, #8]	; (8013c84 <puts+0xc>)
 8013c7a:	4601      	mov	r1, r0
 8013c7c:	6818      	ldr	r0, [r3, #0]
 8013c7e:	f7ff bf8d 	b.w	8013b9c <_puts_r>
 8013c82:	bf00      	nop
 8013c84:	2400009c 	.word	0x2400009c

08013c88 <_sbrk_r>:
 8013c88:	b538      	push	{r3, r4, r5, lr}
 8013c8a:	4d06      	ldr	r5, [pc, #24]	; (8013ca4 <_sbrk_r+0x1c>)
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	4604      	mov	r4, r0
 8013c90:	4608      	mov	r0, r1
 8013c92:	602b      	str	r3, [r5, #0]
 8013c94:	f7ee ff46 	bl	8002b24 <_sbrk>
 8013c98:	1c43      	adds	r3, r0, #1
 8013c9a:	d102      	bne.n	8013ca2 <_sbrk_r+0x1a>
 8013c9c:	682b      	ldr	r3, [r5, #0]
 8013c9e:	b103      	cbz	r3, 8013ca2 <_sbrk_r+0x1a>
 8013ca0:	6023      	str	r3, [r4, #0]
 8013ca2:	bd38      	pop	{r3, r4, r5, pc}
 8013ca4:	240050b8 	.word	0x240050b8

08013ca8 <__swbuf_r>:
 8013ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013caa:	460e      	mov	r6, r1
 8013cac:	4614      	mov	r4, r2
 8013cae:	4605      	mov	r5, r0
 8013cb0:	b118      	cbz	r0, 8013cba <__swbuf_r+0x12>
 8013cb2:	6983      	ldr	r3, [r0, #24]
 8013cb4:	b90b      	cbnz	r3, 8013cba <__swbuf_r+0x12>
 8013cb6:	f000 f9d1 	bl	801405c <__sinit>
 8013cba:	4b21      	ldr	r3, [pc, #132]	; (8013d40 <__swbuf_r+0x98>)
 8013cbc:	429c      	cmp	r4, r3
 8013cbe:	d12b      	bne.n	8013d18 <__swbuf_r+0x70>
 8013cc0:	686c      	ldr	r4, [r5, #4]
 8013cc2:	69a3      	ldr	r3, [r4, #24]
 8013cc4:	60a3      	str	r3, [r4, #8]
 8013cc6:	89a3      	ldrh	r3, [r4, #12]
 8013cc8:	071a      	lsls	r2, r3, #28
 8013cca:	d52f      	bpl.n	8013d2c <__swbuf_r+0x84>
 8013ccc:	6923      	ldr	r3, [r4, #16]
 8013cce:	b36b      	cbz	r3, 8013d2c <__swbuf_r+0x84>
 8013cd0:	6923      	ldr	r3, [r4, #16]
 8013cd2:	6820      	ldr	r0, [r4, #0]
 8013cd4:	1ac0      	subs	r0, r0, r3
 8013cd6:	6963      	ldr	r3, [r4, #20]
 8013cd8:	b2f6      	uxtb	r6, r6
 8013cda:	4283      	cmp	r3, r0
 8013cdc:	4637      	mov	r7, r6
 8013cde:	dc04      	bgt.n	8013cea <__swbuf_r+0x42>
 8013ce0:	4621      	mov	r1, r4
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	f000 f926 	bl	8013f34 <_fflush_r>
 8013ce8:	bb30      	cbnz	r0, 8013d38 <__swbuf_r+0x90>
 8013cea:	68a3      	ldr	r3, [r4, #8]
 8013cec:	3b01      	subs	r3, #1
 8013cee:	60a3      	str	r3, [r4, #8]
 8013cf0:	6823      	ldr	r3, [r4, #0]
 8013cf2:	1c5a      	adds	r2, r3, #1
 8013cf4:	6022      	str	r2, [r4, #0]
 8013cf6:	701e      	strb	r6, [r3, #0]
 8013cf8:	6963      	ldr	r3, [r4, #20]
 8013cfa:	3001      	adds	r0, #1
 8013cfc:	4283      	cmp	r3, r0
 8013cfe:	d004      	beq.n	8013d0a <__swbuf_r+0x62>
 8013d00:	89a3      	ldrh	r3, [r4, #12]
 8013d02:	07db      	lsls	r3, r3, #31
 8013d04:	d506      	bpl.n	8013d14 <__swbuf_r+0x6c>
 8013d06:	2e0a      	cmp	r6, #10
 8013d08:	d104      	bne.n	8013d14 <__swbuf_r+0x6c>
 8013d0a:	4621      	mov	r1, r4
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	f000 f911 	bl	8013f34 <_fflush_r>
 8013d12:	b988      	cbnz	r0, 8013d38 <__swbuf_r+0x90>
 8013d14:	4638      	mov	r0, r7
 8013d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d18:	4b0a      	ldr	r3, [pc, #40]	; (8013d44 <__swbuf_r+0x9c>)
 8013d1a:	429c      	cmp	r4, r3
 8013d1c:	d101      	bne.n	8013d22 <__swbuf_r+0x7a>
 8013d1e:	68ac      	ldr	r4, [r5, #8]
 8013d20:	e7cf      	b.n	8013cc2 <__swbuf_r+0x1a>
 8013d22:	4b09      	ldr	r3, [pc, #36]	; (8013d48 <__swbuf_r+0xa0>)
 8013d24:	429c      	cmp	r4, r3
 8013d26:	bf08      	it	eq
 8013d28:	68ec      	ldreq	r4, [r5, #12]
 8013d2a:	e7ca      	b.n	8013cc2 <__swbuf_r+0x1a>
 8013d2c:	4621      	mov	r1, r4
 8013d2e:	4628      	mov	r0, r5
 8013d30:	f000 f80c 	bl	8013d4c <__swsetup_r>
 8013d34:	2800      	cmp	r0, #0
 8013d36:	d0cb      	beq.n	8013cd0 <__swbuf_r+0x28>
 8013d38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013d3c:	e7ea      	b.n	8013d14 <__swbuf_r+0x6c>
 8013d3e:	bf00      	nop
 8013d40:	08014d08 	.word	0x08014d08
 8013d44:	08014d28 	.word	0x08014d28
 8013d48:	08014ce8 	.word	0x08014ce8

08013d4c <__swsetup_r>:
 8013d4c:	4b32      	ldr	r3, [pc, #200]	; (8013e18 <__swsetup_r+0xcc>)
 8013d4e:	b570      	push	{r4, r5, r6, lr}
 8013d50:	681d      	ldr	r5, [r3, #0]
 8013d52:	4606      	mov	r6, r0
 8013d54:	460c      	mov	r4, r1
 8013d56:	b125      	cbz	r5, 8013d62 <__swsetup_r+0x16>
 8013d58:	69ab      	ldr	r3, [r5, #24]
 8013d5a:	b913      	cbnz	r3, 8013d62 <__swsetup_r+0x16>
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	f000 f97d 	bl	801405c <__sinit>
 8013d62:	4b2e      	ldr	r3, [pc, #184]	; (8013e1c <__swsetup_r+0xd0>)
 8013d64:	429c      	cmp	r4, r3
 8013d66:	d10f      	bne.n	8013d88 <__swsetup_r+0x3c>
 8013d68:	686c      	ldr	r4, [r5, #4]
 8013d6a:	89a3      	ldrh	r3, [r4, #12]
 8013d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013d70:	0719      	lsls	r1, r3, #28
 8013d72:	d42c      	bmi.n	8013dce <__swsetup_r+0x82>
 8013d74:	06dd      	lsls	r5, r3, #27
 8013d76:	d411      	bmi.n	8013d9c <__swsetup_r+0x50>
 8013d78:	2309      	movs	r3, #9
 8013d7a:	6033      	str	r3, [r6, #0]
 8013d7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013d80:	81a3      	strh	r3, [r4, #12]
 8013d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d86:	e03e      	b.n	8013e06 <__swsetup_r+0xba>
 8013d88:	4b25      	ldr	r3, [pc, #148]	; (8013e20 <__swsetup_r+0xd4>)
 8013d8a:	429c      	cmp	r4, r3
 8013d8c:	d101      	bne.n	8013d92 <__swsetup_r+0x46>
 8013d8e:	68ac      	ldr	r4, [r5, #8]
 8013d90:	e7eb      	b.n	8013d6a <__swsetup_r+0x1e>
 8013d92:	4b24      	ldr	r3, [pc, #144]	; (8013e24 <__swsetup_r+0xd8>)
 8013d94:	429c      	cmp	r4, r3
 8013d96:	bf08      	it	eq
 8013d98:	68ec      	ldreq	r4, [r5, #12]
 8013d9a:	e7e6      	b.n	8013d6a <__swsetup_r+0x1e>
 8013d9c:	0758      	lsls	r0, r3, #29
 8013d9e:	d512      	bpl.n	8013dc6 <__swsetup_r+0x7a>
 8013da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013da2:	b141      	cbz	r1, 8013db6 <__swsetup_r+0x6a>
 8013da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013da8:	4299      	cmp	r1, r3
 8013daa:	d002      	beq.n	8013db2 <__swsetup_r+0x66>
 8013dac:	4630      	mov	r0, r6
 8013dae:	f7ff fdfd 	bl	80139ac <_free_r>
 8013db2:	2300      	movs	r3, #0
 8013db4:	6363      	str	r3, [r4, #52]	; 0x34
 8013db6:	89a3      	ldrh	r3, [r4, #12]
 8013db8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013dbc:	81a3      	strh	r3, [r4, #12]
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	6063      	str	r3, [r4, #4]
 8013dc2:	6923      	ldr	r3, [r4, #16]
 8013dc4:	6023      	str	r3, [r4, #0]
 8013dc6:	89a3      	ldrh	r3, [r4, #12]
 8013dc8:	f043 0308 	orr.w	r3, r3, #8
 8013dcc:	81a3      	strh	r3, [r4, #12]
 8013dce:	6923      	ldr	r3, [r4, #16]
 8013dd0:	b94b      	cbnz	r3, 8013de6 <__swsetup_r+0x9a>
 8013dd2:	89a3      	ldrh	r3, [r4, #12]
 8013dd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ddc:	d003      	beq.n	8013de6 <__swsetup_r+0x9a>
 8013dde:	4621      	mov	r1, r4
 8013de0:	4630      	mov	r0, r6
 8013de2:	f000 fa01 	bl	80141e8 <__smakebuf_r>
 8013de6:	89a0      	ldrh	r0, [r4, #12]
 8013de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013dec:	f010 0301 	ands.w	r3, r0, #1
 8013df0:	d00a      	beq.n	8013e08 <__swsetup_r+0xbc>
 8013df2:	2300      	movs	r3, #0
 8013df4:	60a3      	str	r3, [r4, #8]
 8013df6:	6963      	ldr	r3, [r4, #20]
 8013df8:	425b      	negs	r3, r3
 8013dfa:	61a3      	str	r3, [r4, #24]
 8013dfc:	6923      	ldr	r3, [r4, #16]
 8013dfe:	b943      	cbnz	r3, 8013e12 <__swsetup_r+0xc6>
 8013e00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013e04:	d1ba      	bne.n	8013d7c <__swsetup_r+0x30>
 8013e06:	bd70      	pop	{r4, r5, r6, pc}
 8013e08:	0781      	lsls	r1, r0, #30
 8013e0a:	bf58      	it	pl
 8013e0c:	6963      	ldrpl	r3, [r4, #20]
 8013e0e:	60a3      	str	r3, [r4, #8]
 8013e10:	e7f4      	b.n	8013dfc <__swsetup_r+0xb0>
 8013e12:	2000      	movs	r0, #0
 8013e14:	e7f7      	b.n	8013e06 <__swsetup_r+0xba>
 8013e16:	bf00      	nop
 8013e18:	2400009c 	.word	0x2400009c
 8013e1c:	08014d08 	.word	0x08014d08
 8013e20:	08014d28 	.word	0x08014d28
 8013e24:	08014ce8 	.word	0x08014ce8

08013e28 <__sflush_r>:
 8013e28:	898a      	ldrh	r2, [r1, #12]
 8013e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e2e:	4605      	mov	r5, r0
 8013e30:	0710      	lsls	r0, r2, #28
 8013e32:	460c      	mov	r4, r1
 8013e34:	d458      	bmi.n	8013ee8 <__sflush_r+0xc0>
 8013e36:	684b      	ldr	r3, [r1, #4]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	dc05      	bgt.n	8013e48 <__sflush_r+0x20>
 8013e3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	dc02      	bgt.n	8013e48 <__sflush_r+0x20>
 8013e42:	2000      	movs	r0, #0
 8013e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e4a:	2e00      	cmp	r6, #0
 8013e4c:	d0f9      	beq.n	8013e42 <__sflush_r+0x1a>
 8013e4e:	2300      	movs	r3, #0
 8013e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013e54:	682f      	ldr	r7, [r5, #0]
 8013e56:	602b      	str	r3, [r5, #0]
 8013e58:	d032      	beq.n	8013ec0 <__sflush_r+0x98>
 8013e5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013e5c:	89a3      	ldrh	r3, [r4, #12]
 8013e5e:	075a      	lsls	r2, r3, #29
 8013e60:	d505      	bpl.n	8013e6e <__sflush_r+0x46>
 8013e62:	6863      	ldr	r3, [r4, #4]
 8013e64:	1ac0      	subs	r0, r0, r3
 8013e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e68:	b10b      	cbz	r3, 8013e6e <__sflush_r+0x46>
 8013e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e6c:	1ac0      	subs	r0, r0, r3
 8013e6e:	2300      	movs	r3, #0
 8013e70:	4602      	mov	r2, r0
 8013e72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e74:	6a21      	ldr	r1, [r4, #32]
 8013e76:	4628      	mov	r0, r5
 8013e78:	47b0      	blx	r6
 8013e7a:	1c43      	adds	r3, r0, #1
 8013e7c:	89a3      	ldrh	r3, [r4, #12]
 8013e7e:	d106      	bne.n	8013e8e <__sflush_r+0x66>
 8013e80:	6829      	ldr	r1, [r5, #0]
 8013e82:	291d      	cmp	r1, #29
 8013e84:	d82c      	bhi.n	8013ee0 <__sflush_r+0xb8>
 8013e86:	4a2a      	ldr	r2, [pc, #168]	; (8013f30 <__sflush_r+0x108>)
 8013e88:	40ca      	lsrs	r2, r1
 8013e8a:	07d6      	lsls	r6, r2, #31
 8013e8c:	d528      	bpl.n	8013ee0 <__sflush_r+0xb8>
 8013e8e:	2200      	movs	r2, #0
 8013e90:	6062      	str	r2, [r4, #4]
 8013e92:	04d9      	lsls	r1, r3, #19
 8013e94:	6922      	ldr	r2, [r4, #16]
 8013e96:	6022      	str	r2, [r4, #0]
 8013e98:	d504      	bpl.n	8013ea4 <__sflush_r+0x7c>
 8013e9a:	1c42      	adds	r2, r0, #1
 8013e9c:	d101      	bne.n	8013ea2 <__sflush_r+0x7a>
 8013e9e:	682b      	ldr	r3, [r5, #0]
 8013ea0:	b903      	cbnz	r3, 8013ea4 <__sflush_r+0x7c>
 8013ea2:	6560      	str	r0, [r4, #84]	; 0x54
 8013ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ea6:	602f      	str	r7, [r5, #0]
 8013ea8:	2900      	cmp	r1, #0
 8013eaa:	d0ca      	beq.n	8013e42 <__sflush_r+0x1a>
 8013eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013eb0:	4299      	cmp	r1, r3
 8013eb2:	d002      	beq.n	8013eba <__sflush_r+0x92>
 8013eb4:	4628      	mov	r0, r5
 8013eb6:	f7ff fd79 	bl	80139ac <_free_r>
 8013eba:	2000      	movs	r0, #0
 8013ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8013ebe:	e7c1      	b.n	8013e44 <__sflush_r+0x1c>
 8013ec0:	6a21      	ldr	r1, [r4, #32]
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	4628      	mov	r0, r5
 8013ec6:	47b0      	blx	r6
 8013ec8:	1c41      	adds	r1, r0, #1
 8013eca:	d1c7      	bne.n	8013e5c <__sflush_r+0x34>
 8013ecc:	682b      	ldr	r3, [r5, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d0c4      	beq.n	8013e5c <__sflush_r+0x34>
 8013ed2:	2b1d      	cmp	r3, #29
 8013ed4:	d001      	beq.n	8013eda <__sflush_r+0xb2>
 8013ed6:	2b16      	cmp	r3, #22
 8013ed8:	d101      	bne.n	8013ede <__sflush_r+0xb6>
 8013eda:	602f      	str	r7, [r5, #0]
 8013edc:	e7b1      	b.n	8013e42 <__sflush_r+0x1a>
 8013ede:	89a3      	ldrh	r3, [r4, #12]
 8013ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ee4:	81a3      	strh	r3, [r4, #12]
 8013ee6:	e7ad      	b.n	8013e44 <__sflush_r+0x1c>
 8013ee8:	690f      	ldr	r7, [r1, #16]
 8013eea:	2f00      	cmp	r7, #0
 8013eec:	d0a9      	beq.n	8013e42 <__sflush_r+0x1a>
 8013eee:	0793      	lsls	r3, r2, #30
 8013ef0:	680e      	ldr	r6, [r1, #0]
 8013ef2:	bf08      	it	eq
 8013ef4:	694b      	ldreq	r3, [r1, #20]
 8013ef6:	600f      	str	r7, [r1, #0]
 8013ef8:	bf18      	it	ne
 8013efa:	2300      	movne	r3, #0
 8013efc:	eba6 0807 	sub.w	r8, r6, r7
 8013f00:	608b      	str	r3, [r1, #8]
 8013f02:	f1b8 0f00 	cmp.w	r8, #0
 8013f06:	dd9c      	ble.n	8013e42 <__sflush_r+0x1a>
 8013f08:	6a21      	ldr	r1, [r4, #32]
 8013f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013f0c:	4643      	mov	r3, r8
 8013f0e:	463a      	mov	r2, r7
 8013f10:	4628      	mov	r0, r5
 8013f12:	47b0      	blx	r6
 8013f14:	2800      	cmp	r0, #0
 8013f16:	dc06      	bgt.n	8013f26 <__sflush_r+0xfe>
 8013f18:	89a3      	ldrh	r3, [r4, #12]
 8013f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f1e:	81a3      	strh	r3, [r4, #12]
 8013f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f24:	e78e      	b.n	8013e44 <__sflush_r+0x1c>
 8013f26:	4407      	add	r7, r0
 8013f28:	eba8 0800 	sub.w	r8, r8, r0
 8013f2c:	e7e9      	b.n	8013f02 <__sflush_r+0xda>
 8013f2e:	bf00      	nop
 8013f30:	20400001 	.word	0x20400001

08013f34 <_fflush_r>:
 8013f34:	b538      	push	{r3, r4, r5, lr}
 8013f36:	690b      	ldr	r3, [r1, #16]
 8013f38:	4605      	mov	r5, r0
 8013f3a:	460c      	mov	r4, r1
 8013f3c:	b913      	cbnz	r3, 8013f44 <_fflush_r+0x10>
 8013f3e:	2500      	movs	r5, #0
 8013f40:	4628      	mov	r0, r5
 8013f42:	bd38      	pop	{r3, r4, r5, pc}
 8013f44:	b118      	cbz	r0, 8013f4e <_fflush_r+0x1a>
 8013f46:	6983      	ldr	r3, [r0, #24]
 8013f48:	b90b      	cbnz	r3, 8013f4e <_fflush_r+0x1a>
 8013f4a:	f000 f887 	bl	801405c <__sinit>
 8013f4e:	4b14      	ldr	r3, [pc, #80]	; (8013fa0 <_fflush_r+0x6c>)
 8013f50:	429c      	cmp	r4, r3
 8013f52:	d11b      	bne.n	8013f8c <_fflush_r+0x58>
 8013f54:	686c      	ldr	r4, [r5, #4]
 8013f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d0ef      	beq.n	8013f3e <_fflush_r+0xa>
 8013f5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013f60:	07d0      	lsls	r0, r2, #31
 8013f62:	d404      	bmi.n	8013f6e <_fflush_r+0x3a>
 8013f64:	0599      	lsls	r1, r3, #22
 8013f66:	d402      	bmi.n	8013f6e <_fflush_r+0x3a>
 8013f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f6a:	f000 f915 	bl	8014198 <__retarget_lock_acquire_recursive>
 8013f6e:	4628      	mov	r0, r5
 8013f70:	4621      	mov	r1, r4
 8013f72:	f7ff ff59 	bl	8013e28 <__sflush_r>
 8013f76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f78:	07da      	lsls	r2, r3, #31
 8013f7a:	4605      	mov	r5, r0
 8013f7c:	d4e0      	bmi.n	8013f40 <_fflush_r+0xc>
 8013f7e:	89a3      	ldrh	r3, [r4, #12]
 8013f80:	059b      	lsls	r3, r3, #22
 8013f82:	d4dd      	bmi.n	8013f40 <_fflush_r+0xc>
 8013f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f86:	f000 f908 	bl	801419a <__retarget_lock_release_recursive>
 8013f8a:	e7d9      	b.n	8013f40 <_fflush_r+0xc>
 8013f8c:	4b05      	ldr	r3, [pc, #20]	; (8013fa4 <_fflush_r+0x70>)
 8013f8e:	429c      	cmp	r4, r3
 8013f90:	d101      	bne.n	8013f96 <_fflush_r+0x62>
 8013f92:	68ac      	ldr	r4, [r5, #8]
 8013f94:	e7df      	b.n	8013f56 <_fflush_r+0x22>
 8013f96:	4b04      	ldr	r3, [pc, #16]	; (8013fa8 <_fflush_r+0x74>)
 8013f98:	429c      	cmp	r4, r3
 8013f9a:	bf08      	it	eq
 8013f9c:	68ec      	ldreq	r4, [r5, #12]
 8013f9e:	e7da      	b.n	8013f56 <_fflush_r+0x22>
 8013fa0:	08014d08 	.word	0x08014d08
 8013fa4:	08014d28 	.word	0x08014d28
 8013fa8:	08014ce8 	.word	0x08014ce8

08013fac <std>:
 8013fac:	2300      	movs	r3, #0
 8013fae:	b510      	push	{r4, lr}
 8013fb0:	4604      	mov	r4, r0
 8013fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8013fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013fba:	6083      	str	r3, [r0, #8]
 8013fbc:	8181      	strh	r1, [r0, #12]
 8013fbe:	6643      	str	r3, [r0, #100]	; 0x64
 8013fc0:	81c2      	strh	r2, [r0, #14]
 8013fc2:	6183      	str	r3, [r0, #24]
 8013fc4:	4619      	mov	r1, r3
 8013fc6:	2208      	movs	r2, #8
 8013fc8:	305c      	adds	r0, #92	; 0x5c
 8013fca:	f7ff fce7 	bl	801399c <memset>
 8013fce:	4b05      	ldr	r3, [pc, #20]	; (8013fe4 <std+0x38>)
 8013fd0:	6263      	str	r3, [r4, #36]	; 0x24
 8013fd2:	4b05      	ldr	r3, [pc, #20]	; (8013fe8 <std+0x3c>)
 8013fd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013fd6:	4b05      	ldr	r3, [pc, #20]	; (8013fec <std+0x40>)
 8013fd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013fda:	4b05      	ldr	r3, [pc, #20]	; (8013ff0 <std+0x44>)
 8013fdc:	6224      	str	r4, [r4, #32]
 8013fde:	6323      	str	r3, [r4, #48]	; 0x30
 8013fe0:	bd10      	pop	{r4, pc}
 8013fe2:	bf00      	nop
 8013fe4:	0801485d 	.word	0x0801485d
 8013fe8:	0801487f 	.word	0x0801487f
 8013fec:	080148b7 	.word	0x080148b7
 8013ff0:	080148db 	.word	0x080148db

08013ff4 <_cleanup_r>:
 8013ff4:	4901      	ldr	r1, [pc, #4]	; (8013ffc <_cleanup_r+0x8>)
 8013ff6:	f000 b8af 	b.w	8014158 <_fwalk_reent>
 8013ffa:	bf00      	nop
 8013ffc:	08013f35 	.word	0x08013f35

08014000 <__sfmoreglue>:
 8014000:	b570      	push	{r4, r5, r6, lr}
 8014002:	2268      	movs	r2, #104	; 0x68
 8014004:	1e4d      	subs	r5, r1, #1
 8014006:	4355      	muls	r5, r2
 8014008:	460e      	mov	r6, r1
 801400a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801400e:	f7ff fd39 	bl	8013a84 <_malloc_r>
 8014012:	4604      	mov	r4, r0
 8014014:	b140      	cbz	r0, 8014028 <__sfmoreglue+0x28>
 8014016:	2100      	movs	r1, #0
 8014018:	e9c0 1600 	strd	r1, r6, [r0]
 801401c:	300c      	adds	r0, #12
 801401e:	60a0      	str	r0, [r4, #8]
 8014020:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014024:	f7ff fcba 	bl	801399c <memset>
 8014028:	4620      	mov	r0, r4
 801402a:	bd70      	pop	{r4, r5, r6, pc}

0801402c <__sfp_lock_acquire>:
 801402c:	4801      	ldr	r0, [pc, #4]	; (8014034 <__sfp_lock_acquire+0x8>)
 801402e:	f000 b8b3 	b.w	8014198 <__retarget_lock_acquire_recursive>
 8014032:	bf00      	nop
 8014034:	240050b5 	.word	0x240050b5

08014038 <__sfp_lock_release>:
 8014038:	4801      	ldr	r0, [pc, #4]	; (8014040 <__sfp_lock_release+0x8>)
 801403a:	f000 b8ae 	b.w	801419a <__retarget_lock_release_recursive>
 801403e:	bf00      	nop
 8014040:	240050b5 	.word	0x240050b5

08014044 <__sinit_lock_acquire>:
 8014044:	4801      	ldr	r0, [pc, #4]	; (801404c <__sinit_lock_acquire+0x8>)
 8014046:	f000 b8a7 	b.w	8014198 <__retarget_lock_acquire_recursive>
 801404a:	bf00      	nop
 801404c:	240050b6 	.word	0x240050b6

08014050 <__sinit_lock_release>:
 8014050:	4801      	ldr	r0, [pc, #4]	; (8014058 <__sinit_lock_release+0x8>)
 8014052:	f000 b8a2 	b.w	801419a <__retarget_lock_release_recursive>
 8014056:	bf00      	nop
 8014058:	240050b6 	.word	0x240050b6

0801405c <__sinit>:
 801405c:	b510      	push	{r4, lr}
 801405e:	4604      	mov	r4, r0
 8014060:	f7ff fff0 	bl	8014044 <__sinit_lock_acquire>
 8014064:	69a3      	ldr	r3, [r4, #24]
 8014066:	b11b      	cbz	r3, 8014070 <__sinit+0x14>
 8014068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801406c:	f7ff bff0 	b.w	8014050 <__sinit_lock_release>
 8014070:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014074:	6523      	str	r3, [r4, #80]	; 0x50
 8014076:	4b13      	ldr	r3, [pc, #76]	; (80140c4 <__sinit+0x68>)
 8014078:	4a13      	ldr	r2, [pc, #76]	; (80140c8 <__sinit+0x6c>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	62a2      	str	r2, [r4, #40]	; 0x28
 801407e:	42a3      	cmp	r3, r4
 8014080:	bf04      	itt	eq
 8014082:	2301      	moveq	r3, #1
 8014084:	61a3      	streq	r3, [r4, #24]
 8014086:	4620      	mov	r0, r4
 8014088:	f000 f820 	bl	80140cc <__sfp>
 801408c:	6060      	str	r0, [r4, #4]
 801408e:	4620      	mov	r0, r4
 8014090:	f000 f81c 	bl	80140cc <__sfp>
 8014094:	60a0      	str	r0, [r4, #8]
 8014096:	4620      	mov	r0, r4
 8014098:	f000 f818 	bl	80140cc <__sfp>
 801409c:	2200      	movs	r2, #0
 801409e:	60e0      	str	r0, [r4, #12]
 80140a0:	2104      	movs	r1, #4
 80140a2:	6860      	ldr	r0, [r4, #4]
 80140a4:	f7ff ff82 	bl	8013fac <std>
 80140a8:	68a0      	ldr	r0, [r4, #8]
 80140aa:	2201      	movs	r2, #1
 80140ac:	2109      	movs	r1, #9
 80140ae:	f7ff ff7d 	bl	8013fac <std>
 80140b2:	68e0      	ldr	r0, [r4, #12]
 80140b4:	2202      	movs	r2, #2
 80140b6:	2112      	movs	r1, #18
 80140b8:	f7ff ff78 	bl	8013fac <std>
 80140bc:	2301      	movs	r3, #1
 80140be:	61a3      	str	r3, [r4, #24]
 80140c0:	e7d2      	b.n	8014068 <__sinit+0xc>
 80140c2:	bf00      	nop
 80140c4:	08014ce4 	.word	0x08014ce4
 80140c8:	08013ff5 	.word	0x08013ff5

080140cc <__sfp>:
 80140cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ce:	4607      	mov	r7, r0
 80140d0:	f7ff ffac 	bl	801402c <__sfp_lock_acquire>
 80140d4:	4b1e      	ldr	r3, [pc, #120]	; (8014150 <__sfp+0x84>)
 80140d6:	681e      	ldr	r6, [r3, #0]
 80140d8:	69b3      	ldr	r3, [r6, #24]
 80140da:	b913      	cbnz	r3, 80140e2 <__sfp+0x16>
 80140dc:	4630      	mov	r0, r6
 80140de:	f7ff ffbd 	bl	801405c <__sinit>
 80140e2:	3648      	adds	r6, #72	; 0x48
 80140e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80140e8:	3b01      	subs	r3, #1
 80140ea:	d503      	bpl.n	80140f4 <__sfp+0x28>
 80140ec:	6833      	ldr	r3, [r6, #0]
 80140ee:	b30b      	cbz	r3, 8014134 <__sfp+0x68>
 80140f0:	6836      	ldr	r6, [r6, #0]
 80140f2:	e7f7      	b.n	80140e4 <__sfp+0x18>
 80140f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80140f8:	b9d5      	cbnz	r5, 8014130 <__sfp+0x64>
 80140fa:	4b16      	ldr	r3, [pc, #88]	; (8014154 <__sfp+0x88>)
 80140fc:	60e3      	str	r3, [r4, #12]
 80140fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014102:	6665      	str	r5, [r4, #100]	; 0x64
 8014104:	f000 f847 	bl	8014196 <__retarget_lock_init_recursive>
 8014108:	f7ff ff96 	bl	8014038 <__sfp_lock_release>
 801410c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014114:	6025      	str	r5, [r4, #0]
 8014116:	61a5      	str	r5, [r4, #24]
 8014118:	2208      	movs	r2, #8
 801411a:	4629      	mov	r1, r5
 801411c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014120:	f7ff fc3c 	bl	801399c <memset>
 8014124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801412c:	4620      	mov	r0, r4
 801412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014130:	3468      	adds	r4, #104	; 0x68
 8014132:	e7d9      	b.n	80140e8 <__sfp+0x1c>
 8014134:	2104      	movs	r1, #4
 8014136:	4638      	mov	r0, r7
 8014138:	f7ff ff62 	bl	8014000 <__sfmoreglue>
 801413c:	4604      	mov	r4, r0
 801413e:	6030      	str	r0, [r6, #0]
 8014140:	2800      	cmp	r0, #0
 8014142:	d1d5      	bne.n	80140f0 <__sfp+0x24>
 8014144:	f7ff ff78 	bl	8014038 <__sfp_lock_release>
 8014148:	230c      	movs	r3, #12
 801414a:	603b      	str	r3, [r7, #0]
 801414c:	e7ee      	b.n	801412c <__sfp+0x60>
 801414e:	bf00      	nop
 8014150:	08014ce4 	.word	0x08014ce4
 8014154:	ffff0001 	.word	0xffff0001

08014158 <_fwalk_reent>:
 8014158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801415c:	4606      	mov	r6, r0
 801415e:	4688      	mov	r8, r1
 8014160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014164:	2700      	movs	r7, #0
 8014166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801416a:	f1b9 0901 	subs.w	r9, r9, #1
 801416e:	d505      	bpl.n	801417c <_fwalk_reent+0x24>
 8014170:	6824      	ldr	r4, [r4, #0]
 8014172:	2c00      	cmp	r4, #0
 8014174:	d1f7      	bne.n	8014166 <_fwalk_reent+0xe>
 8014176:	4638      	mov	r0, r7
 8014178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801417c:	89ab      	ldrh	r3, [r5, #12]
 801417e:	2b01      	cmp	r3, #1
 8014180:	d907      	bls.n	8014192 <_fwalk_reent+0x3a>
 8014182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014186:	3301      	adds	r3, #1
 8014188:	d003      	beq.n	8014192 <_fwalk_reent+0x3a>
 801418a:	4629      	mov	r1, r5
 801418c:	4630      	mov	r0, r6
 801418e:	47c0      	blx	r8
 8014190:	4307      	orrs	r7, r0
 8014192:	3568      	adds	r5, #104	; 0x68
 8014194:	e7e9      	b.n	801416a <_fwalk_reent+0x12>

08014196 <__retarget_lock_init_recursive>:
 8014196:	4770      	bx	lr

08014198 <__retarget_lock_acquire_recursive>:
 8014198:	4770      	bx	lr

0801419a <__retarget_lock_release_recursive>:
 801419a:	4770      	bx	lr

0801419c <__swhatbuf_r>:
 801419c:	b570      	push	{r4, r5, r6, lr}
 801419e:	460e      	mov	r6, r1
 80141a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141a4:	2900      	cmp	r1, #0
 80141a6:	b096      	sub	sp, #88	; 0x58
 80141a8:	4614      	mov	r4, r2
 80141aa:	461d      	mov	r5, r3
 80141ac:	da08      	bge.n	80141c0 <__swhatbuf_r+0x24>
 80141ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80141b2:	2200      	movs	r2, #0
 80141b4:	602a      	str	r2, [r5, #0]
 80141b6:	061a      	lsls	r2, r3, #24
 80141b8:	d410      	bmi.n	80141dc <__swhatbuf_r+0x40>
 80141ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141be:	e00e      	b.n	80141de <__swhatbuf_r+0x42>
 80141c0:	466a      	mov	r2, sp
 80141c2:	f000 fbb1 	bl	8014928 <_fstat_r>
 80141c6:	2800      	cmp	r0, #0
 80141c8:	dbf1      	blt.n	80141ae <__swhatbuf_r+0x12>
 80141ca:	9a01      	ldr	r2, [sp, #4]
 80141cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80141d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80141d4:	425a      	negs	r2, r3
 80141d6:	415a      	adcs	r2, r3
 80141d8:	602a      	str	r2, [r5, #0]
 80141da:	e7ee      	b.n	80141ba <__swhatbuf_r+0x1e>
 80141dc:	2340      	movs	r3, #64	; 0x40
 80141de:	2000      	movs	r0, #0
 80141e0:	6023      	str	r3, [r4, #0]
 80141e2:	b016      	add	sp, #88	; 0x58
 80141e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080141e8 <__smakebuf_r>:
 80141e8:	898b      	ldrh	r3, [r1, #12]
 80141ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141ec:	079d      	lsls	r5, r3, #30
 80141ee:	4606      	mov	r6, r0
 80141f0:	460c      	mov	r4, r1
 80141f2:	d507      	bpl.n	8014204 <__smakebuf_r+0x1c>
 80141f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80141f8:	6023      	str	r3, [r4, #0]
 80141fa:	6123      	str	r3, [r4, #16]
 80141fc:	2301      	movs	r3, #1
 80141fe:	6163      	str	r3, [r4, #20]
 8014200:	b002      	add	sp, #8
 8014202:	bd70      	pop	{r4, r5, r6, pc}
 8014204:	ab01      	add	r3, sp, #4
 8014206:	466a      	mov	r2, sp
 8014208:	f7ff ffc8 	bl	801419c <__swhatbuf_r>
 801420c:	9900      	ldr	r1, [sp, #0]
 801420e:	4605      	mov	r5, r0
 8014210:	4630      	mov	r0, r6
 8014212:	f7ff fc37 	bl	8013a84 <_malloc_r>
 8014216:	b948      	cbnz	r0, 801422c <__smakebuf_r+0x44>
 8014218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801421c:	059a      	lsls	r2, r3, #22
 801421e:	d4ef      	bmi.n	8014200 <__smakebuf_r+0x18>
 8014220:	f023 0303 	bic.w	r3, r3, #3
 8014224:	f043 0302 	orr.w	r3, r3, #2
 8014228:	81a3      	strh	r3, [r4, #12]
 801422a:	e7e3      	b.n	80141f4 <__smakebuf_r+0xc>
 801422c:	4b0d      	ldr	r3, [pc, #52]	; (8014264 <__smakebuf_r+0x7c>)
 801422e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014230:	89a3      	ldrh	r3, [r4, #12]
 8014232:	6020      	str	r0, [r4, #0]
 8014234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014238:	81a3      	strh	r3, [r4, #12]
 801423a:	9b00      	ldr	r3, [sp, #0]
 801423c:	6163      	str	r3, [r4, #20]
 801423e:	9b01      	ldr	r3, [sp, #4]
 8014240:	6120      	str	r0, [r4, #16]
 8014242:	b15b      	cbz	r3, 801425c <__smakebuf_r+0x74>
 8014244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014248:	4630      	mov	r0, r6
 801424a:	f000 fb7f 	bl	801494c <_isatty_r>
 801424e:	b128      	cbz	r0, 801425c <__smakebuf_r+0x74>
 8014250:	89a3      	ldrh	r3, [r4, #12]
 8014252:	f023 0303 	bic.w	r3, r3, #3
 8014256:	f043 0301 	orr.w	r3, r3, #1
 801425a:	81a3      	strh	r3, [r4, #12]
 801425c:	89a0      	ldrh	r0, [r4, #12]
 801425e:	4305      	orrs	r5, r0
 8014260:	81a5      	strh	r5, [r4, #12]
 8014262:	e7cd      	b.n	8014200 <__smakebuf_r+0x18>
 8014264:	08013ff5 	.word	0x08013ff5

08014268 <__malloc_lock>:
 8014268:	4801      	ldr	r0, [pc, #4]	; (8014270 <__malloc_lock+0x8>)
 801426a:	f7ff bf95 	b.w	8014198 <__retarget_lock_acquire_recursive>
 801426e:	bf00      	nop
 8014270:	240050b4 	.word	0x240050b4

08014274 <__malloc_unlock>:
 8014274:	4801      	ldr	r0, [pc, #4]	; (801427c <__malloc_unlock+0x8>)
 8014276:	f7ff bf90 	b.w	801419a <__retarget_lock_release_recursive>
 801427a:	bf00      	nop
 801427c:	240050b4 	.word	0x240050b4

08014280 <__sfputc_r>:
 8014280:	6893      	ldr	r3, [r2, #8]
 8014282:	3b01      	subs	r3, #1
 8014284:	2b00      	cmp	r3, #0
 8014286:	b410      	push	{r4}
 8014288:	6093      	str	r3, [r2, #8]
 801428a:	da08      	bge.n	801429e <__sfputc_r+0x1e>
 801428c:	6994      	ldr	r4, [r2, #24]
 801428e:	42a3      	cmp	r3, r4
 8014290:	db01      	blt.n	8014296 <__sfputc_r+0x16>
 8014292:	290a      	cmp	r1, #10
 8014294:	d103      	bne.n	801429e <__sfputc_r+0x1e>
 8014296:	f85d 4b04 	ldr.w	r4, [sp], #4
 801429a:	f7ff bd05 	b.w	8013ca8 <__swbuf_r>
 801429e:	6813      	ldr	r3, [r2, #0]
 80142a0:	1c58      	adds	r0, r3, #1
 80142a2:	6010      	str	r0, [r2, #0]
 80142a4:	7019      	strb	r1, [r3, #0]
 80142a6:	4608      	mov	r0, r1
 80142a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142ac:	4770      	bx	lr

080142ae <__sfputs_r>:
 80142ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142b0:	4606      	mov	r6, r0
 80142b2:	460f      	mov	r7, r1
 80142b4:	4614      	mov	r4, r2
 80142b6:	18d5      	adds	r5, r2, r3
 80142b8:	42ac      	cmp	r4, r5
 80142ba:	d101      	bne.n	80142c0 <__sfputs_r+0x12>
 80142bc:	2000      	movs	r0, #0
 80142be:	e007      	b.n	80142d0 <__sfputs_r+0x22>
 80142c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142c4:	463a      	mov	r2, r7
 80142c6:	4630      	mov	r0, r6
 80142c8:	f7ff ffda 	bl	8014280 <__sfputc_r>
 80142cc:	1c43      	adds	r3, r0, #1
 80142ce:	d1f3      	bne.n	80142b8 <__sfputs_r+0xa>
 80142d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080142d4 <_vfiprintf_r>:
 80142d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d8:	460d      	mov	r5, r1
 80142da:	b09d      	sub	sp, #116	; 0x74
 80142dc:	4614      	mov	r4, r2
 80142de:	4698      	mov	r8, r3
 80142e0:	4606      	mov	r6, r0
 80142e2:	b118      	cbz	r0, 80142ec <_vfiprintf_r+0x18>
 80142e4:	6983      	ldr	r3, [r0, #24]
 80142e6:	b90b      	cbnz	r3, 80142ec <_vfiprintf_r+0x18>
 80142e8:	f7ff feb8 	bl	801405c <__sinit>
 80142ec:	4b89      	ldr	r3, [pc, #548]	; (8014514 <_vfiprintf_r+0x240>)
 80142ee:	429d      	cmp	r5, r3
 80142f0:	d11b      	bne.n	801432a <_vfiprintf_r+0x56>
 80142f2:	6875      	ldr	r5, [r6, #4]
 80142f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142f6:	07d9      	lsls	r1, r3, #31
 80142f8:	d405      	bmi.n	8014306 <_vfiprintf_r+0x32>
 80142fa:	89ab      	ldrh	r3, [r5, #12]
 80142fc:	059a      	lsls	r2, r3, #22
 80142fe:	d402      	bmi.n	8014306 <_vfiprintf_r+0x32>
 8014300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014302:	f7ff ff49 	bl	8014198 <__retarget_lock_acquire_recursive>
 8014306:	89ab      	ldrh	r3, [r5, #12]
 8014308:	071b      	lsls	r3, r3, #28
 801430a:	d501      	bpl.n	8014310 <_vfiprintf_r+0x3c>
 801430c:	692b      	ldr	r3, [r5, #16]
 801430e:	b9eb      	cbnz	r3, 801434c <_vfiprintf_r+0x78>
 8014310:	4629      	mov	r1, r5
 8014312:	4630      	mov	r0, r6
 8014314:	f7ff fd1a 	bl	8013d4c <__swsetup_r>
 8014318:	b1c0      	cbz	r0, 801434c <_vfiprintf_r+0x78>
 801431a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801431c:	07dc      	lsls	r4, r3, #31
 801431e:	d50e      	bpl.n	801433e <_vfiprintf_r+0x6a>
 8014320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014324:	b01d      	add	sp, #116	; 0x74
 8014326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801432a:	4b7b      	ldr	r3, [pc, #492]	; (8014518 <_vfiprintf_r+0x244>)
 801432c:	429d      	cmp	r5, r3
 801432e:	d101      	bne.n	8014334 <_vfiprintf_r+0x60>
 8014330:	68b5      	ldr	r5, [r6, #8]
 8014332:	e7df      	b.n	80142f4 <_vfiprintf_r+0x20>
 8014334:	4b79      	ldr	r3, [pc, #484]	; (801451c <_vfiprintf_r+0x248>)
 8014336:	429d      	cmp	r5, r3
 8014338:	bf08      	it	eq
 801433a:	68f5      	ldreq	r5, [r6, #12]
 801433c:	e7da      	b.n	80142f4 <_vfiprintf_r+0x20>
 801433e:	89ab      	ldrh	r3, [r5, #12]
 8014340:	0598      	lsls	r0, r3, #22
 8014342:	d4ed      	bmi.n	8014320 <_vfiprintf_r+0x4c>
 8014344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014346:	f7ff ff28 	bl	801419a <__retarget_lock_release_recursive>
 801434a:	e7e9      	b.n	8014320 <_vfiprintf_r+0x4c>
 801434c:	2300      	movs	r3, #0
 801434e:	9309      	str	r3, [sp, #36]	; 0x24
 8014350:	2320      	movs	r3, #32
 8014352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014356:	f8cd 800c 	str.w	r8, [sp, #12]
 801435a:	2330      	movs	r3, #48	; 0x30
 801435c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014520 <_vfiprintf_r+0x24c>
 8014360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014364:	f04f 0901 	mov.w	r9, #1
 8014368:	4623      	mov	r3, r4
 801436a:	469a      	mov	sl, r3
 801436c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014370:	b10a      	cbz	r2, 8014376 <_vfiprintf_r+0xa2>
 8014372:	2a25      	cmp	r2, #37	; 0x25
 8014374:	d1f9      	bne.n	801436a <_vfiprintf_r+0x96>
 8014376:	ebba 0b04 	subs.w	fp, sl, r4
 801437a:	d00b      	beq.n	8014394 <_vfiprintf_r+0xc0>
 801437c:	465b      	mov	r3, fp
 801437e:	4622      	mov	r2, r4
 8014380:	4629      	mov	r1, r5
 8014382:	4630      	mov	r0, r6
 8014384:	f7ff ff93 	bl	80142ae <__sfputs_r>
 8014388:	3001      	adds	r0, #1
 801438a:	f000 80aa 	beq.w	80144e2 <_vfiprintf_r+0x20e>
 801438e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014390:	445a      	add	r2, fp
 8014392:	9209      	str	r2, [sp, #36]	; 0x24
 8014394:	f89a 3000 	ldrb.w	r3, [sl]
 8014398:	2b00      	cmp	r3, #0
 801439a:	f000 80a2 	beq.w	80144e2 <_vfiprintf_r+0x20e>
 801439e:	2300      	movs	r3, #0
 80143a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80143a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143a8:	f10a 0a01 	add.w	sl, sl, #1
 80143ac:	9304      	str	r3, [sp, #16]
 80143ae:	9307      	str	r3, [sp, #28]
 80143b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143b4:	931a      	str	r3, [sp, #104]	; 0x68
 80143b6:	4654      	mov	r4, sl
 80143b8:	2205      	movs	r2, #5
 80143ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143be:	4858      	ldr	r0, [pc, #352]	; (8014520 <_vfiprintf_r+0x24c>)
 80143c0:	f7eb ff8e 	bl	80002e0 <memchr>
 80143c4:	9a04      	ldr	r2, [sp, #16]
 80143c6:	b9d8      	cbnz	r0, 8014400 <_vfiprintf_r+0x12c>
 80143c8:	06d1      	lsls	r1, r2, #27
 80143ca:	bf44      	itt	mi
 80143cc:	2320      	movmi	r3, #32
 80143ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143d2:	0713      	lsls	r3, r2, #28
 80143d4:	bf44      	itt	mi
 80143d6:	232b      	movmi	r3, #43	; 0x2b
 80143d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143dc:	f89a 3000 	ldrb.w	r3, [sl]
 80143e0:	2b2a      	cmp	r3, #42	; 0x2a
 80143e2:	d015      	beq.n	8014410 <_vfiprintf_r+0x13c>
 80143e4:	9a07      	ldr	r2, [sp, #28]
 80143e6:	4654      	mov	r4, sl
 80143e8:	2000      	movs	r0, #0
 80143ea:	f04f 0c0a 	mov.w	ip, #10
 80143ee:	4621      	mov	r1, r4
 80143f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143f4:	3b30      	subs	r3, #48	; 0x30
 80143f6:	2b09      	cmp	r3, #9
 80143f8:	d94e      	bls.n	8014498 <_vfiprintf_r+0x1c4>
 80143fa:	b1b0      	cbz	r0, 801442a <_vfiprintf_r+0x156>
 80143fc:	9207      	str	r2, [sp, #28]
 80143fe:	e014      	b.n	801442a <_vfiprintf_r+0x156>
 8014400:	eba0 0308 	sub.w	r3, r0, r8
 8014404:	fa09 f303 	lsl.w	r3, r9, r3
 8014408:	4313      	orrs	r3, r2
 801440a:	9304      	str	r3, [sp, #16]
 801440c:	46a2      	mov	sl, r4
 801440e:	e7d2      	b.n	80143b6 <_vfiprintf_r+0xe2>
 8014410:	9b03      	ldr	r3, [sp, #12]
 8014412:	1d19      	adds	r1, r3, #4
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	9103      	str	r1, [sp, #12]
 8014418:	2b00      	cmp	r3, #0
 801441a:	bfbb      	ittet	lt
 801441c:	425b      	neglt	r3, r3
 801441e:	f042 0202 	orrlt.w	r2, r2, #2
 8014422:	9307      	strge	r3, [sp, #28]
 8014424:	9307      	strlt	r3, [sp, #28]
 8014426:	bfb8      	it	lt
 8014428:	9204      	strlt	r2, [sp, #16]
 801442a:	7823      	ldrb	r3, [r4, #0]
 801442c:	2b2e      	cmp	r3, #46	; 0x2e
 801442e:	d10c      	bne.n	801444a <_vfiprintf_r+0x176>
 8014430:	7863      	ldrb	r3, [r4, #1]
 8014432:	2b2a      	cmp	r3, #42	; 0x2a
 8014434:	d135      	bne.n	80144a2 <_vfiprintf_r+0x1ce>
 8014436:	9b03      	ldr	r3, [sp, #12]
 8014438:	1d1a      	adds	r2, r3, #4
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	9203      	str	r2, [sp, #12]
 801443e:	2b00      	cmp	r3, #0
 8014440:	bfb8      	it	lt
 8014442:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014446:	3402      	adds	r4, #2
 8014448:	9305      	str	r3, [sp, #20]
 801444a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014530 <_vfiprintf_r+0x25c>
 801444e:	7821      	ldrb	r1, [r4, #0]
 8014450:	2203      	movs	r2, #3
 8014452:	4650      	mov	r0, sl
 8014454:	f7eb ff44 	bl	80002e0 <memchr>
 8014458:	b140      	cbz	r0, 801446c <_vfiprintf_r+0x198>
 801445a:	2340      	movs	r3, #64	; 0x40
 801445c:	eba0 000a 	sub.w	r0, r0, sl
 8014460:	fa03 f000 	lsl.w	r0, r3, r0
 8014464:	9b04      	ldr	r3, [sp, #16]
 8014466:	4303      	orrs	r3, r0
 8014468:	3401      	adds	r4, #1
 801446a:	9304      	str	r3, [sp, #16]
 801446c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014470:	482c      	ldr	r0, [pc, #176]	; (8014524 <_vfiprintf_r+0x250>)
 8014472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014476:	2206      	movs	r2, #6
 8014478:	f7eb ff32 	bl	80002e0 <memchr>
 801447c:	2800      	cmp	r0, #0
 801447e:	d03f      	beq.n	8014500 <_vfiprintf_r+0x22c>
 8014480:	4b29      	ldr	r3, [pc, #164]	; (8014528 <_vfiprintf_r+0x254>)
 8014482:	bb1b      	cbnz	r3, 80144cc <_vfiprintf_r+0x1f8>
 8014484:	9b03      	ldr	r3, [sp, #12]
 8014486:	3307      	adds	r3, #7
 8014488:	f023 0307 	bic.w	r3, r3, #7
 801448c:	3308      	adds	r3, #8
 801448e:	9303      	str	r3, [sp, #12]
 8014490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014492:	443b      	add	r3, r7
 8014494:	9309      	str	r3, [sp, #36]	; 0x24
 8014496:	e767      	b.n	8014368 <_vfiprintf_r+0x94>
 8014498:	fb0c 3202 	mla	r2, ip, r2, r3
 801449c:	460c      	mov	r4, r1
 801449e:	2001      	movs	r0, #1
 80144a0:	e7a5      	b.n	80143ee <_vfiprintf_r+0x11a>
 80144a2:	2300      	movs	r3, #0
 80144a4:	3401      	adds	r4, #1
 80144a6:	9305      	str	r3, [sp, #20]
 80144a8:	4619      	mov	r1, r3
 80144aa:	f04f 0c0a 	mov.w	ip, #10
 80144ae:	4620      	mov	r0, r4
 80144b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144b4:	3a30      	subs	r2, #48	; 0x30
 80144b6:	2a09      	cmp	r2, #9
 80144b8:	d903      	bls.n	80144c2 <_vfiprintf_r+0x1ee>
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d0c5      	beq.n	801444a <_vfiprintf_r+0x176>
 80144be:	9105      	str	r1, [sp, #20]
 80144c0:	e7c3      	b.n	801444a <_vfiprintf_r+0x176>
 80144c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80144c6:	4604      	mov	r4, r0
 80144c8:	2301      	movs	r3, #1
 80144ca:	e7f0      	b.n	80144ae <_vfiprintf_r+0x1da>
 80144cc:	ab03      	add	r3, sp, #12
 80144ce:	9300      	str	r3, [sp, #0]
 80144d0:	462a      	mov	r2, r5
 80144d2:	4b16      	ldr	r3, [pc, #88]	; (801452c <_vfiprintf_r+0x258>)
 80144d4:	a904      	add	r1, sp, #16
 80144d6:	4630      	mov	r0, r6
 80144d8:	f3af 8000 	nop.w
 80144dc:	4607      	mov	r7, r0
 80144de:	1c78      	adds	r0, r7, #1
 80144e0:	d1d6      	bne.n	8014490 <_vfiprintf_r+0x1bc>
 80144e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144e4:	07d9      	lsls	r1, r3, #31
 80144e6:	d405      	bmi.n	80144f4 <_vfiprintf_r+0x220>
 80144e8:	89ab      	ldrh	r3, [r5, #12]
 80144ea:	059a      	lsls	r2, r3, #22
 80144ec:	d402      	bmi.n	80144f4 <_vfiprintf_r+0x220>
 80144ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144f0:	f7ff fe53 	bl	801419a <__retarget_lock_release_recursive>
 80144f4:	89ab      	ldrh	r3, [r5, #12]
 80144f6:	065b      	lsls	r3, r3, #25
 80144f8:	f53f af12 	bmi.w	8014320 <_vfiprintf_r+0x4c>
 80144fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144fe:	e711      	b.n	8014324 <_vfiprintf_r+0x50>
 8014500:	ab03      	add	r3, sp, #12
 8014502:	9300      	str	r3, [sp, #0]
 8014504:	462a      	mov	r2, r5
 8014506:	4b09      	ldr	r3, [pc, #36]	; (801452c <_vfiprintf_r+0x258>)
 8014508:	a904      	add	r1, sp, #16
 801450a:	4630      	mov	r0, r6
 801450c:	f000 f880 	bl	8014610 <_printf_i>
 8014510:	e7e4      	b.n	80144dc <_vfiprintf_r+0x208>
 8014512:	bf00      	nop
 8014514:	08014d08 	.word	0x08014d08
 8014518:	08014d28 	.word	0x08014d28
 801451c:	08014ce8 	.word	0x08014ce8
 8014520:	08014d48 	.word	0x08014d48
 8014524:	08014d52 	.word	0x08014d52
 8014528:	00000000 	.word	0x00000000
 801452c:	080142af 	.word	0x080142af
 8014530:	08014d4e 	.word	0x08014d4e

08014534 <_printf_common>:
 8014534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014538:	4616      	mov	r6, r2
 801453a:	4699      	mov	r9, r3
 801453c:	688a      	ldr	r2, [r1, #8]
 801453e:	690b      	ldr	r3, [r1, #16]
 8014540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014544:	4293      	cmp	r3, r2
 8014546:	bfb8      	it	lt
 8014548:	4613      	movlt	r3, r2
 801454a:	6033      	str	r3, [r6, #0]
 801454c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014550:	4607      	mov	r7, r0
 8014552:	460c      	mov	r4, r1
 8014554:	b10a      	cbz	r2, 801455a <_printf_common+0x26>
 8014556:	3301      	adds	r3, #1
 8014558:	6033      	str	r3, [r6, #0]
 801455a:	6823      	ldr	r3, [r4, #0]
 801455c:	0699      	lsls	r1, r3, #26
 801455e:	bf42      	ittt	mi
 8014560:	6833      	ldrmi	r3, [r6, #0]
 8014562:	3302      	addmi	r3, #2
 8014564:	6033      	strmi	r3, [r6, #0]
 8014566:	6825      	ldr	r5, [r4, #0]
 8014568:	f015 0506 	ands.w	r5, r5, #6
 801456c:	d106      	bne.n	801457c <_printf_common+0x48>
 801456e:	f104 0a19 	add.w	sl, r4, #25
 8014572:	68e3      	ldr	r3, [r4, #12]
 8014574:	6832      	ldr	r2, [r6, #0]
 8014576:	1a9b      	subs	r3, r3, r2
 8014578:	42ab      	cmp	r3, r5
 801457a:	dc26      	bgt.n	80145ca <_printf_common+0x96>
 801457c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014580:	1e13      	subs	r3, r2, #0
 8014582:	6822      	ldr	r2, [r4, #0]
 8014584:	bf18      	it	ne
 8014586:	2301      	movne	r3, #1
 8014588:	0692      	lsls	r2, r2, #26
 801458a:	d42b      	bmi.n	80145e4 <_printf_common+0xb0>
 801458c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014590:	4649      	mov	r1, r9
 8014592:	4638      	mov	r0, r7
 8014594:	47c0      	blx	r8
 8014596:	3001      	adds	r0, #1
 8014598:	d01e      	beq.n	80145d8 <_printf_common+0xa4>
 801459a:	6823      	ldr	r3, [r4, #0]
 801459c:	68e5      	ldr	r5, [r4, #12]
 801459e:	6832      	ldr	r2, [r6, #0]
 80145a0:	f003 0306 	and.w	r3, r3, #6
 80145a4:	2b04      	cmp	r3, #4
 80145a6:	bf08      	it	eq
 80145a8:	1aad      	subeq	r5, r5, r2
 80145aa:	68a3      	ldr	r3, [r4, #8]
 80145ac:	6922      	ldr	r2, [r4, #16]
 80145ae:	bf0c      	ite	eq
 80145b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80145b4:	2500      	movne	r5, #0
 80145b6:	4293      	cmp	r3, r2
 80145b8:	bfc4      	itt	gt
 80145ba:	1a9b      	subgt	r3, r3, r2
 80145bc:	18ed      	addgt	r5, r5, r3
 80145be:	2600      	movs	r6, #0
 80145c0:	341a      	adds	r4, #26
 80145c2:	42b5      	cmp	r5, r6
 80145c4:	d11a      	bne.n	80145fc <_printf_common+0xc8>
 80145c6:	2000      	movs	r0, #0
 80145c8:	e008      	b.n	80145dc <_printf_common+0xa8>
 80145ca:	2301      	movs	r3, #1
 80145cc:	4652      	mov	r2, sl
 80145ce:	4649      	mov	r1, r9
 80145d0:	4638      	mov	r0, r7
 80145d2:	47c0      	blx	r8
 80145d4:	3001      	adds	r0, #1
 80145d6:	d103      	bne.n	80145e0 <_printf_common+0xac>
 80145d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145e0:	3501      	adds	r5, #1
 80145e2:	e7c6      	b.n	8014572 <_printf_common+0x3e>
 80145e4:	18e1      	adds	r1, r4, r3
 80145e6:	1c5a      	adds	r2, r3, #1
 80145e8:	2030      	movs	r0, #48	; 0x30
 80145ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80145ee:	4422      	add	r2, r4
 80145f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80145f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80145f8:	3302      	adds	r3, #2
 80145fa:	e7c7      	b.n	801458c <_printf_common+0x58>
 80145fc:	2301      	movs	r3, #1
 80145fe:	4622      	mov	r2, r4
 8014600:	4649      	mov	r1, r9
 8014602:	4638      	mov	r0, r7
 8014604:	47c0      	blx	r8
 8014606:	3001      	adds	r0, #1
 8014608:	d0e6      	beq.n	80145d8 <_printf_common+0xa4>
 801460a:	3601      	adds	r6, #1
 801460c:	e7d9      	b.n	80145c2 <_printf_common+0x8e>
	...

08014610 <_printf_i>:
 8014610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014614:	7e0f      	ldrb	r7, [r1, #24]
 8014616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014618:	2f78      	cmp	r7, #120	; 0x78
 801461a:	4691      	mov	r9, r2
 801461c:	4680      	mov	r8, r0
 801461e:	460c      	mov	r4, r1
 8014620:	469a      	mov	sl, r3
 8014622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014626:	d807      	bhi.n	8014638 <_printf_i+0x28>
 8014628:	2f62      	cmp	r7, #98	; 0x62
 801462a:	d80a      	bhi.n	8014642 <_printf_i+0x32>
 801462c:	2f00      	cmp	r7, #0
 801462e:	f000 80d8 	beq.w	80147e2 <_printf_i+0x1d2>
 8014632:	2f58      	cmp	r7, #88	; 0x58
 8014634:	f000 80a3 	beq.w	801477e <_printf_i+0x16e>
 8014638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801463c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014640:	e03a      	b.n	80146b8 <_printf_i+0xa8>
 8014642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014646:	2b15      	cmp	r3, #21
 8014648:	d8f6      	bhi.n	8014638 <_printf_i+0x28>
 801464a:	a101      	add	r1, pc, #4	; (adr r1, 8014650 <_printf_i+0x40>)
 801464c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014650:	080146a9 	.word	0x080146a9
 8014654:	080146bd 	.word	0x080146bd
 8014658:	08014639 	.word	0x08014639
 801465c:	08014639 	.word	0x08014639
 8014660:	08014639 	.word	0x08014639
 8014664:	08014639 	.word	0x08014639
 8014668:	080146bd 	.word	0x080146bd
 801466c:	08014639 	.word	0x08014639
 8014670:	08014639 	.word	0x08014639
 8014674:	08014639 	.word	0x08014639
 8014678:	08014639 	.word	0x08014639
 801467c:	080147c9 	.word	0x080147c9
 8014680:	080146ed 	.word	0x080146ed
 8014684:	080147ab 	.word	0x080147ab
 8014688:	08014639 	.word	0x08014639
 801468c:	08014639 	.word	0x08014639
 8014690:	080147eb 	.word	0x080147eb
 8014694:	08014639 	.word	0x08014639
 8014698:	080146ed 	.word	0x080146ed
 801469c:	08014639 	.word	0x08014639
 80146a0:	08014639 	.word	0x08014639
 80146a4:	080147b3 	.word	0x080147b3
 80146a8:	682b      	ldr	r3, [r5, #0]
 80146aa:	1d1a      	adds	r2, r3, #4
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	602a      	str	r2, [r5, #0]
 80146b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80146b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80146b8:	2301      	movs	r3, #1
 80146ba:	e0a3      	b.n	8014804 <_printf_i+0x1f4>
 80146bc:	6820      	ldr	r0, [r4, #0]
 80146be:	6829      	ldr	r1, [r5, #0]
 80146c0:	0606      	lsls	r6, r0, #24
 80146c2:	f101 0304 	add.w	r3, r1, #4
 80146c6:	d50a      	bpl.n	80146de <_printf_i+0xce>
 80146c8:	680e      	ldr	r6, [r1, #0]
 80146ca:	602b      	str	r3, [r5, #0]
 80146cc:	2e00      	cmp	r6, #0
 80146ce:	da03      	bge.n	80146d8 <_printf_i+0xc8>
 80146d0:	232d      	movs	r3, #45	; 0x2d
 80146d2:	4276      	negs	r6, r6
 80146d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146d8:	485e      	ldr	r0, [pc, #376]	; (8014854 <_printf_i+0x244>)
 80146da:	230a      	movs	r3, #10
 80146dc:	e019      	b.n	8014712 <_printf_i+0x102>
 80146de:	680e      	ldr	r6, [r1, #0]
 80146e0:	602b      	str	r3, [r5, #0]
 80146e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80146e6:	bf18      	it	ne
 80146e8:	b236      	sxthne	r6, r6
 80146ea:	e7ef      	b.n	80146cc <_printf_i+0xbc>
 80146ec:	682b      	ldr	r3, [r5, #0]
 80146ee:	6820      	ldr	r0, [r4, #0]
 80146f0:	1d19      	adds	r1, r3, #4
 80146f2:	6029      	str	r1, [r5, #0]
 80146f4:	0601      	lsls	r1, r0, #24
 80146f6:	d501      	bpl.n	80146fc <_printf_i+0xec>
 80146f8:	681e      	ldr	r6, [r3, #0]
 80146fa:	e002      	b.n	8014702 <_printf_i+0xf2>
 80146fc:	0646      	lsls	r6, r0, #25
 80146fe:	d5fb      	bpl.n	80146f8 <_printf_i+0xe8>
 8014700:	881e      	ldrh	r6, [r3, #0]
 8014702:	4854      	ldr	r0, [pc, #336]	; (8014854 <_printf_i+0x244>)
 8014704:	2f6f      	cmp	r7, #111	; 0x6f
 8014706:	bf0c      	ite	eq
 8014708:	2308      	moveq	r3, #8
 801470a:	230a      	movne	r3, #10
 801470c:	2100      	movs	r1, #0
 801470e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014712:	6865      	ldr	r5, [r4, #4]
 8014714:	60a5      	str	r5, [r4, #8]
 8014716:	2d00      	cmp	r5, #0
 8014718:	bfa2      	ittt	ge
 801471a:	6821      	ldrge	r1, [r4, #0]
 801471c:	f021 0104 	bicge.w	r1, r1, #4
 8014720:	6021      	strge	r1, [r4, #0]
 8014722:	b90e      	cbnz	r6, 8014728 <_printf_i+0x118>
 8014724:	2d00      	cmp	r5, #0
 8014726:	d04d      	beq.n	80147c4 <_printf_i+0x1b4>
 8014728:	4615      	mov	r5, r2
 801472a:	fbb6 f1f3 	udiv	r1, r6, r3
 801472e:	fb03 6711 	mls	r7, r3, r1, r6
 8014732:	5dc7      	ldrb	r7, [r0, r7]
 8014734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014738:	4637      	mov	r7, r6
 801473a:	42bb      	cmp	r3, r7
 801473c:	460e      	mov	r6, r1
 801473e:	d9f4      	bls.n	801472a <_printf_i+0x11a>
 8014740:	2b08      	cmp	r3, #8
 8014742:	d10b      	bne.n	801475c <_printf_i+0x14c>
 8014744:	6823      	ldr	r3, [r4, #0]
 8014746:	07de      	lsls	r6, r3, #31
 8014748:	d508      	bpl.n	801475c <_printf_i+0x14c>
 801474a:	6923      	ldr	r3, [r4, #16]
 801474c:	6861      	ldr	r1, [r4, #4]
 801474e:	4299      	cmp	r1, r3
 8014750:	bfde      	ittt	le
 8014752:	2330      	movle	r3, #48	; 0x30
 8014754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014758:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801475c:	1b52      	subs	r2, r2, r5
 801475e:	6122      	str	r2, [r4, #16]
 8014760:	f8cd a000 	str.w	sl, [sp]
 8014764:	464b      	mov	r3, r9
 8014766:	aa03      	add	r2, sp, #12
 8014768:	4621      	mov	r1, r4
 801476a:	4640      	mov	r0, r8
 801476c:	f7ff fee2 	bl	8014534 <_printf_common>
 8014770:	3001      	adds	r0, #1
 8014772:	d14c      	bne.n	801480e <_printf_i+0x1fe>
 8014774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014778:	b004      	add	sp, #16
 801477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801477e:	4835      	ldr	r0, [pc, #212]	; (8014854 <_printf_i+0x244>)
 8014780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014784:	6829      	ldr	r1, [r5, #0]
 8014786:	6823      	ldr	r3, [r4, #0]
 8014788:	f851 6b04 	ldr.w	r6, [r1], #4
 801478c:	6029      	str	r1, [r5, #0]
 801478e:	061d      	lsls	r5, r3, #24
 8014790:	d514      	bpl.n	80147bc <_printf_i+0x1ac>
 8014792:	07df      	lsls	r7, r3, #31
 8014794:	bf44      	itt	mi
 8014796:	f043 0320 	orrmi.w	r3, r3, #32
 801479a:	6023      	strmi	r3, [r4, #0]
 801479c:	b91e      	cbnz	r6, 80147a6 <_printf_i+0x196>
 801479e:	6823      	ldr	r3, [r4, #0]
 80147a0:	f023 0320 	bic.w	r3, r3, #32
 80147a4:	6023      	str	r3, [r4, #0]
 80147a6:	2310      	movs	r3, #16
 80147a8:	e7b0      	b.n	801470c <_printf_i+0xfc>
 80147aa:	6823      	ldr	r3, [r4, #0]
 80147ac:	f043 0320 	orr.w	r3, r3, #32
 80147b0:	6023      	str	r3, [r4, #0]
 80147b2:	2378      	movs	r3, #120	; 0x78
 80147b4:	4828      	ldr	r0, [pc, #160]	; (8014858 <_printf_i+0x248>)
 80147b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80147ba:	e7e3      	b.n	8014784 <_printf_i+0x174>
 80147bc:	0659      	lsls	r1, r3, #25
 80147be:	bf48      	it	mi
 80147c0:	b2b6      	uxthmi	r6, r6
 80147c2:	e7e6      	b.n	8014792 <_printf_i+0x182>
 80147c4:	4615      	mov	r5, r2
 80147c6:	e7bb      	b.n	8014740 <_printf_i+0x130>
 80147c8:	682b      	ldr	r3, [r5, #0]
 80147ca:	6826      	ldr	r6, [r4, #0]
 80147cc:	6961      	ldr	r1, [r4, #20]
 80147ce:	1d18      	adds	r0, r3, #4
 80147d0:	6028      	str	r0, [r5, #0]
 80147d2:	0635      	lsls	r5, r6, #24
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	d501      	bpl.n	80147dc <_printf_i+0x1cc>
 80147d8:	6019      	str	r1, [r3, #0]
 80147da:	e002      	b.n	80147e2 <_printf_i+0x1d2>
 80147dc:	0670      	lsls	r0, r6, #25
 80147de:	d5fb      	bpl.n	80147d8 <_printf_i+0x1c8>
 80147e0:	8019      	strh	r1, [r3, #0]
 80147e2:	2300      	movs	r3, #0
 80147e4:	6123      	str	r3, [r4, #16]
 80147e6:	4615      	mov	r5, r2
 80147e8:	e7ba      	b.n	8014760 <_printf_i+0x150>
 80147ea:	682b      	ldr	r3, [r5, #0]
 80147ec:	1d1a      	adds	r2, r3, #4
 80147ee:	602a      	str	r2, [r5, #0]
 80147f0:	681d      	ldr	r5, [r3, #0]
 80147f2:	6862      	ldr	r2, [r4, #4]
 80147f4:	2100      	movs	r1, #0
 80147f6:	4628      	mov	r0, r5
 80147f8:	f7eb fd72 	bl	80002e0 <memchr>
 80147fc:	b108      	cbz	r0, 8014802 <_printf_i+0x1f2>
 80147fe:	1b40      	subs	r0, r0, r5
 8014800:	6060      	str	r0, [r4, #4]
 8014802:	6863      	ldr	r3, [r4, #4]
 8014804:	6123      	str	r3, [r4, #16]
 8014806:	2300      	movs	r3, #0
 8014808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801480c:	e7a8      	b.n	8014760 <_printf_i+0x150>
 801480e:	6923      	ldr	r3, [r4, #16]
 8014810:	462a      	mov	r2, r5
 8014812:	4649      	mov	r1, r9
 8014814:	4640      	mov	r0, r8
 8014816:	47d0      	blx	sl
 8014818:	3001      	adds	r0, #1
 801481a:	d0ab      	beq.n	8014774 <_printf_i+0x164>
 801481c:	6823      	ldr	r3, [r4, #0]
 801481e:	079b      	lsls	r3, r3, #30
 8014820:	d413      	bmi.n	801484a <_printf_i+0x23a>
 8014822:	68e0      	ldr	r0, [r4, #12]
 8014824:	9b03      	ldr	r3, [sp, #12]
 8014826:	4298      	cmp	r0, r3
 8014828:	bfb8      	it	lt
 801482a:	4618      	movlt	r0, r3
 801482c:	e7a4      	b.n	8014778 <_printf_i+0x168>
 801482e:	2301      	movs	r3, #1
 8014830:	4632      	mov	r2, r6
 8014832:	4649      	mov	r1, r9
 8014834:	4640      	mov	r0, r8
 8014836:	47d0      	blx	sl
 8014838:	3001      	adds	r0, #1
 801483a:	d09b      	beq.n	8014774 <_printf_i+0x164>
 801483c:	3501      	adds	r5, #1
 801483e:	68e3      	ldr	r3, [r4, #12]
 8014840:	9903      	ldr	r1, [sp, #12]
 8014842:	1a5b      	subs	r3, r3, r1
 8014844:	42ab      	cmp	r3, r5
 8014846:	dcf2      	bgt.n	801482e <_printf_i+0x21e>
 8014848:	e7eb      	b.n	8014822 <_printf_i+0x212>
 801484a:	2500      	movs	r5, #0
 801484c:	f104 0619 	add.w	r6, r4, #25
 8014850:	e7f5      	b.n	801483e <_printf_i+0x22e>
 8014852:	bf00      	nop
 8014854:	08014d59 	.word	0x08014d59
 8014858:	08014d6a 	.word	0x08014d6a

0801485c <__sread>:
 801485c:	b510      	push	{r4, lr}
 801485e:	460c      	mov	r4, r1
 8014860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014864:	f000 f894 	bl	8014990 <_read_r>
 8014868:	2800      	cmp	r0, #0
 801486a:	bfab      	itete	ge
 801486c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801486e:	89a3      	ldrhlt	r3, [r4, #12]
 8014870:	181b      	addge	r3, r3, r0
 8014872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014876:	bfac      	ite	ge
 8014878:	6563      	strge	r3, [r4, #84]	; 0x54
 801487a:	81a3      	strhlt	r3, [r4, #12]
 801487c:	bd10      	pop	{r4, pc}

0801487e <__swrite>:
 801487e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014882:	461f      	mov	r7, r3
 8014884:	898b      	ldrh	r3, [r1, #12]
 8014886:	05db      	lsls	r3, r3, #23
 8014888:	4605      	mov	r5, r0
 801488a:	460c      	mov	r4, r1
 801488c:	4616      	mov	r6, r2
 801488e:	d505      	bpl.n	801489c <__swrite+0x1e>
 8014890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014894:	2302      	movs	r3, #2
 8014896:	2200      	movs	r2, #0
 8014898:	f000 f868 	bl	801496c <_lseek_r>
 801489c:	89a3      	ldrh	r3, [r4, #12]
 801489e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80148a6:	81a3      	strh	r3, [r4, #12]
 80148a8:	4632      	mov	r2, r6
 80148aa:	463b      	mov	r3, r7
 80148ac:	4628      	mov	r0, r5
 80148ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148b2:	f000 b817 	b.w	80148e4 <_write_r>

080148b6 <__sseek>:
 80148b6:	b510      	push	{r4, lr}
 80148b8:	460c      	mov	r4, r1
 80148ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148be:	f000 f855 	bl	801496c <_lseek_r>
 80148c2:	1c43      	adds	r3, r0, #1
 80148c4:	89a3      	ldrh	r3, [r4, #12]
 80148c6:	bf15      	itete	ne
 80148c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80148ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80148ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80148d2:	81a3      	strheq	r3, [r4, #12]
 80148d4:	bf18      	it	ne
 80148d6:	81a3      	strhne	r3, [r4, #12]
 80148d8:	bd10      	pop	{r4, pc}

080148da <__sclose>:
 80148da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148de:	f000 b813 	b.w	8014908 <_close_r>
	...

080148e4 <_write_r>:
 80148e4:	b538      	push	{r3, r4, r5, lr}
 80148e6:	4d07      	ldr	r5, [pc, #28]	; (8014904 <_write_r+0x20>)
 80148e8:	4604      	mov	r4, r0
 80148ea:	4608      	mov	r0, r1
 80148ec:	4611      	mov	r1, r2
 80148ee:	2200      	movs	r2, #0
 80148f0:	602a      	str	r2, [r5, #0]
 80148f2:	461a      	mov	r2, r3
 80148f4:	f7ee f8c5 	bl	8002a82 <_write>
 80148f8:	1c43      	adds	r3, r0, #1
 80148fa:	d102      	bne.n	8014902 <_write_r+0x1e>
 80148fc:	682b      	ldr	r3, [r5, #0]
 80148fe:	b103      	cbz	r3, 8014902 <_write_r+0x1e>
 8014900:	6023      	str	r3, [r4, #0]
 8014902:	bd38      	pop	{r3, r4, r5, pc}
 8014904:	240050b8 	.word	0x240050b8

08014908 <_close_r>:
 8014908:	b538      	push	{r3, r4, r5, lr}
 801490a:	4d06      	ldr	r5, [pc, #24]	; (8014924 <_close_r+0x1c>)
 801490c:	2300      	movs	r3, #0
 801490e:	4604      	mov	r4, r0
 8014910:	4608      	mov	r0, r1
 8014912:	602b      	str	r3, [r5, #0]
 8014914:	f7ee f8d1 	bl	8002aba <_close>
 8014918:	1c43      	adds	r3, r0, #1
 801491a:	d102      	bne.n	8014922 <_close_r+0x1a>
 801491c:	682b      	ldr	r3, [r5, #0]
 801491e:	b103      	cbz	r3, 8014922 <_close_r+0x1a>
 8014920:	6023      	str	r3, [r4, #0]
 8014922:	bd38      	pop	{r3, r4, r5, pc}
 8014924:	240050b8 	.word	0x240050b8

08014928 <_fstat_r>:
 8014928:	b538      	push	{r3, r4, r5, lr}
 801492a:	4d07      	ldr	r5, [pc, #28]	; (8014948 <_fstat_r+0x20>)
 801492c:	2300      	movs	r3, #0
 801492e:	4604      	mov	r4, r0
 8014930:	4608      	mov	r0, r1
 8014932:	4611      	mov	r1, r2
 8014934:	602b      	str	r3, [r5, #0]
 8014936:	f7ee f8cc 	bl	8002ad2 <_fstat>
 801493a:	1c43      	adds	r3, r0, #1
 801493c:	d102      	bne.n	8014944 <_fstat_r+0x1c>
 801493e:	682b      	ldr	r3, [r5, #0]
 8014940:	b103      	cbz	r3, 8014944 <_fstat_r+0x1c>
 8014942:	6023      	str	r3, [r4, #0]
 8014944:	bd38      	pop	{r3, r4, r5, pc}
 8014946:	bf00      	nop
 8014948:	240050b8 	.word	0x240050b8

0801494c <_isatty_r>:
 801494c:	b538      	push	{r3, r4, r5, lr}
 801494e:	4d06      	ldr	r5, [pc, #24]	; (8014968 <_isatty_r+0x1c>)
 8014950:	2300      	movs	r3, #0
 8014952:	4604      	mov	r4, r0
 8014954:	4608      	mov	r0, r1
 8014956:	602b      	str	r3, [r5, #0]
 8014958:	f7ee f8cb 	bl	8002af2 <_isatty>
 801495c:	1c43      	adds	r3, r0, #1
 801495e:	d102      	bne.n	8014966 <_isatty_r+0x1a>
 8014960:	682b      	ldr	r3, [r5, #0]
 8014962:	b103      	cbz	r3, 8014966 <_isatty_r+0x1a>
 8014964:	6023      	str	r3, [r4, #0]
 8014966:	bd38      	pop	{r3, r4, r5, pc}
 8014968:	240050b8 	.word	0x240050b8

0801496c <_lseek_r>:
 801496c:	b538      	push	{r3, r4, r5, lr}
 801496e:	4d07      	ldr	r5, [pc, #28]	; (801498c <_lseek_r+0x20>)
 8014970:	4604      	mov	r4, r0
 8014972:	4608      	mov	r0, r1
 8014974:	4611      	mov	r1, r2
 8014976:	2200      	movs	r2, #0
 8014978:	602a      	str	r2, [r5, #0]
 801497a:	461a      	mov	r2, r3
 801497c:	f7ee f8c4 	bl	8002b08 <_lseek>
 8014980:	1c43      	adds	r3, r0, #1
 8014982:	d102      	bne.n	801498a <_lseek_r+0x1e>
 8014984:	682b      	ldr	r3, [r5, #0]
 8014986:	b103      	cbz	r3, 801498a <_lseek_r+0x1e>
 8014988:	6023      	str	r3, [r4, #0]
 801498a:	bd38      	pop	{r3, r4, r5, pc}
 801498c:	240050b8 	.word	0x240050b8

08014990 <_read_r>:
 8014990:	b538      	push	{r3, r4, r5, lr}
 8014992:	4d07      	ldr	r5, [pc, #28]	; (80149b0 <_read_r+0x20>)
 8014994:	4604      	mov	r4, r0
 8014996:	4608      	mov	r0, r1
 8014998:	4611      	mov	r1, r2
 801499a:	2200      	movs	r2, #0
 801499c:	602a      	str	r2, [r5, #0]
 801499e:	461a      	mov	r2, r3
 80149a0:	f7ee f852 	bl	8002a48 <_read>
 80149a4:	1c43      	adds	r3, r0, #1
 80149a6:	d102      	bne.n	80149ae <_read_r+0x1e>
 80149a8:	682b      	ldr	r3, [r5, #0]
 80149aa:	b103      	cbz	r3, 80149ae <_read_r+0x1e>
 80149ac:	6023      	str	r3, [r4, #0]
 80149ae:	bd38      	pop	{r3, r4, r5, pc}
 80149b0:	240050b8 	.word	0x240050b8

080149b4 <_init>:
 80149b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b6:	bf00      	nop
 80149b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149ba:	bc08      	pop	{r3}
 80149bc:	469e      	mov	lr, r3
 80149be:	4770      	bx	lr

080149c0 <_fini>:
 80149c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149c2:	bf00      	nop
 80149c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149c6:	bc08      	pop	{r3}
 80149c8:	469e      	mov	lr, r3
 80149ca:	4770      	bx	lr
