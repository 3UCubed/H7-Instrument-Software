
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017180  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08017420  08017420  00027420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080178ec  080178ec  000278ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080178f4  080178f4  000278f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080178f8  080178f8  000278f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  080178fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054f0  24000100  080179fc  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240055f0  080179fc  000355f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a229  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006f2d  00000000  00000000  0006a357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002828  00000000  00000000  00071288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002550  00000000  00000000  00073ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044774  00000000  00000000  00076000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003be77  00000000  00000000  000ba774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b58  00000000  00000000  000f65eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028b143  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000afb8  00000000  00000000  0028b194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017408 	.word	0x08017408

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08017408 	.word	0x08017408

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f004 f8c7 	bl	80047fc <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fdee 	bl	8002254 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 f9e2 	bl	8005a4c <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fde1 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 fb25 	bl	8004d04 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fdc8 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 fb17 	bl	8004d04 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fdba 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 fb09 	bl	8004d04 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fdac 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 fafb 	bl	8004d04 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fd9e 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 faec 	bl	8004d04 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fd8f 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 fadd 	bl	8004d04 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fd80 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 face 	bl	8004d04 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fd71 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 fabf 	bl	8004d04 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fd62 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 fab0 	bl	8004d04 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fd53 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 faa1 	bl	8004d04 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fd44 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 fa92 	bl	8004d04 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fd35 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 ffaf 	bl	80047fc <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fcd6 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 fa1a 	bl	8004d04 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fcbd 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 fa0c 	bl	8004d04 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fcaf 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 f9fe 	bl	8004d04 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fca1 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 f9f0 	bl	8004d04 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fc93 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 fc32 	bl	8009264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 fc26 	bl	8009264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 fc1a 	bl	8009264 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fdad 	bl	80065d4 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fbe8 	bl	8002254 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fc68 	bl	80043b4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fc62 	bl	80043b4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fd4d 	bl	80065d4 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fb88 	bl	8002254 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f015 ff35 	bl	80169fc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f005 f915 	bl	8005dc8 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fb56 	bl	8002254 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 fb30 	bl	8006228 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 fb41 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 fb05 	bl	8009264 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fc98 	bl	80065d4 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fad3 	bl	8002254 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f005 f85a 	bl	8005d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f005 f871 	bl	8005dac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f005 f831 	bl	8005d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f005 f848 	bl	8005dac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f005 f829 	bl	8005d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f005 f840 	bl	8005dac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f005 f821 	bl	8005d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f005 f838 	bl	8005dac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f005 f819 	bl	8005d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f005 f830 	bl	8005dac <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24000818 	.word	0x24000818

08000d74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_FREERTOS_Init+0xa8>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_FREERTOS_Init+0xac>)
 8000d7e:	f012 facf 	bl	8013320 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <MX_FREERTOS_Init+0xb0>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <MX_FREERTOS_Init+0xb4>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4827      	ldr	r0, [pc, #156]	; (8000e2c <MX_FREERTOS_Init+0xb8>)
 8000d8e:	f012 fac7 	bl	8013320 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <MX_FREERTOS_Init+0xbc>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <MX_FREERTOS_Init+0xc0>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_FREERTOS_Init+0xc4>)
 8000d9e:	f012 fabf 	bl	8013320 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <MX_FREERTOS_Init+0xc8>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <MX_FREERTOS_Init+0xcc>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <MX_FREERTOS_Init+0xd0>)
 8000dae:	f012 fab7 	bl	8013320 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <MX_FREERTOS_Init+0xd4>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <MX_FREERTOS_Init+0xd8>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <MX_FREERTOS_Init+0xdc>)
 8000dbe:	f012 faaf 	bl	8013320 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_FREERTOS_Init+0xe0>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dc8:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_FREERTOS_Init+0xe4>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_FREERTOS_Init+0xe8>)
 8000dce:	f012 faa7 	bl	8013320 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <MX_FREERTOS_Init+0xec>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_FREERTOS_Init+0xf0>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <MX_FREERTOS_Init+0xf4>)
 8000dde:	f012 fa9f 	bl	8013320 <osThreadNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_FREERTOS_Init+0xf8>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_FREERTOS_Init+0xfc>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <MX_FREERTOS_Init+0x100>)
 8000dee:	f012 fa97 	bl	8013320 <osThreadNew>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <MX_FREERTOS_Init+0x104>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_FREERTOS_Init+0x108>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4820      	ldr	r0, [pc, #128]	; (8000e80 <MX_FREERTOS_Init+0x10c>)
 8000dfe:	f012 fa8f 	bl	8013320 <osThreadNew>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <MX_FREERTOS_Init+0x110>)
 8000e06:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <MX_FREERTOS_Init+0x114>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	481f      	ldr	r0, [pc, #124]	; (8000e8c <MX_FREERTOS_Init+0x118>)
 8000e0e:	f012 fa87 	bl	8013320 <osThreadNew>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <MX_FREERTOS_Init+0x11c>)
 8000e16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08017698 	.word	0x08017698
 8000e20:	08000e95 	.word	0x08000e95
 8000e24:	24000360 	.word	0x24000360
 8000e28:	080176bc 	.word	0x080176bc
 8000e2c:	08000ebd 	.word	0x08000ebd
 8000e30:	24000364 	.word	0x24000364
 8000e34:	080176e0 	.word	0x080176e0
 8000e38:	08000ee5 	.word	0x08000ee5
 8000e3c:	24000368 	.word	0x24000368
 8000e40:	08017704 	.word	0x08017704
 8000e44:	08000f0d 	.word	0x08000f0d
 8000e48:	2400036c 	.word	0x2400036c
 8000e4c:	08017728 	.word	0x08017728
 8000e50:	08000f85 	.word	0x08000f85
 8000e54:	24000370 	.word	0x24000370
 8000e58:	0801774c 	.word	0x0801774c
 8000e5c:	08000ffd 	.word	0x08000ffd
 8000e60:	24000374 	.word	0x24000374
 8000e64:	08017770 	.word	0x08017770
 8000e68:	080010b5 	.word	0x080010b5
 8000e6c:	24000378 	.word	0x24000378
 8000e70:	08017794 	.word	0x08017794
 8000e74:	08001161 	.word	0x08001161
 8000e78:	2400037c 	.word	0x2400037c
 8000e7c:	080177b8 	.word	0x080177b8
 8000e80:	08001171 	.word	0x08001171
 8000e84:	24000380 	.word	0x24000380
 8000e88:	080177dc 	.word	0x080177dc
 8000e8c:	08001251 	.word	0x08001251
 8000e90:	24000384 	.word	0x24000384

08000e94 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <PMT_init+0x24>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f012 fb8a 	bl	80135c0 <osEventFlagsWait>

		create_pmt_packet();
 8000eac:	f001 f9f8 	bl	80022a0 <create_pmt_packet>

		osThreadYield();
 8000eb0:	f012 fac8 	bl	8013444 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb4:	e7f2      	b.n	8000e9c <PMT_init+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	240007c4 	.word	0x240007c4

08000ebc <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <ERPA_init+0x24>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2102      	movs	r1, #2
 8000ed0:	f012 fb76 	bl	80135c0 <osEventFlagsWait>

		create_erpa_packet();
 8000ed4:	f001 fa5e 	bl	8002394 <create_erpa_packet>

		osThreadYield();
 8000ed8:	f012 fab4 	bl	8013444 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000edc:	e7f2      	b.n	8000ec4 <ERPA_init+0x8>
 8000ede:	bf00      	nop
 8000ee0:	240007c4 	.word	0x240007c4

08000ee4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HK_init+0x24>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	f012 fb62 	bl	80135c0 <osEventFlagsWait>

		create_hk_packet();
 8000efc:	f001 faec 	bl	80024d8 <create_hk_packet>

		osThreadYield();
 8000f00:	f012 faa0 	bl	8013444 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f04:	e7f2      	b.n	8000eec <HK_init+0x8>
 8000f06:	bf00      	nop
 8000f08:	240007c4 	.word	0x240007c4

08000f0c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <AUTOINIT_init+0x70>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	f012 fb4e 	bl	80135c0 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e012      	b.n	8000f50 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <AUTOINIT_init+0x74>)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <AUTOINIT_init+0x74>)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f008 fb58 	bl	80095f4 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f012 fa9d 	bl	8013484 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	dde9      	ble.n	8000f2a <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f56:	2308      	movs	r3, #8
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	e008      	b.n	8000f6e <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 f8c4 	bl	80040f0 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b0d      	cmp	r3, #13
 8000f72:	ddf3      	ble.n	8000f5c <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f74:	f012 fa66 	bl	8013444 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f78:	e7cc      	b.n	8000f14 <AUTOINIT_init+0x8>
 8000f7a:	bf00      	nop
 8000f7c:	240007c8 	.word	0x240007c8
 8000f80:	08017800 	.word	0x08017800

08000f84 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <AUTODEINIT_init+0x70>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	2200      	movs	r2, #0
 8000f96:	2108      	movs	r1, #8
 8000f98:	f012 fb12 	bl	80135c0 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f9c:	230d      	movs	r3, #13
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e008      	b.n	8000fb4 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 f8a1 	bl	80040f0 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	dcf3      	bgt.n	8000fa2 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fba:	2306      	movs	r3, #6
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	e012      	b.n	8000fe6 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <AUTODEINIT_init+0x74>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <AUTODEINIT_init+0x74>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f008 fb0d 	bl	80095f4 <HAL_GPIO_WritePin>
			osDelay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f012 fa52 	bl	8013484 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	dae9      	bge.n	8000fc0 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fec:	f012 fa2a 	bl	8013444 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000ff0:	e7cc      	b.n	8000f8c <AUTODEINIT_init+0x8>
 8000ff2:	bf00      	nop
 8000ff4:	240007c8 	.word	0x240007c8
 8000ff8:	08017800 	.word	0x08017800

08000ffc <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
	osStatus_t status;
	packet_t msg;

	while (1) {
		total_size = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <UART_TX_init+0xa8>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	f107 0108 	add.w	r1, r7, #8
 8001014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001018:	2200      	movs	r2, #0
 800101a:	f012 fc0b 	bl	8013834 <osMessageQueueGet>
 800101e:	6138      	str	r0, [r7, #16]
			if (status == osOK) {
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d11c      	bne.n	8001060 <UART_TX_init+0x64>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	461a      	mov	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	4413      	add	r3, r2
 800102e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001032:	d215      	bcs.n	8001060 <UART_TX_init+0x64>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <UART_TX_init+0xac>)
 8001038:	4413      	add	r3, r2
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	89ba      	ldrh	r2, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f015 fcce 	bl	80169e0 <memcpy>
					free(msg.array);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4618      	mov	r0, r3
 8001048:	f015 fcc2 	bl	80169d0 <free>
					total_size += msg.size;
 800104c:	89bb      	ldrh	r3, [r7, #12]
 800104e:	461a      	mov	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	4413      	add	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f240 32b1 	movw	r2, #945	; 0x3b1
 800105c:	4293      	cmp	r3, r2
 800105e:	d808      	bhi.n	8001072 <UART_TX_init+0x76>
						break;
					}
				}
			}
		} while (osMessageQueueGetCount(mid_MsgQueue));
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <UART_TX_init+0xa8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f012 fc43 	bl	80138f0 <osMessageQueueGetCount>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1cd      	bne.n	800100c <UART_TX_init+0x10>
 8001070:	e000      	b.n	8001074 <UART_TX_init+0x78>
						break;
 8001072:	bf00      	nop

		if (total_size > 0) {
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d011      	beq.n	800109e <UART_TX_init+0xa2>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	4909      	ldr	r1, [pc, #36]	; (80010a8 <UART_TX_init+0xac>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <UART_TX_init+0xb0>)
 8001084:	f00f fbaa 	bl	80107dc <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8001088:	e001      	b.n	800108e <UART_TX_init+0x92>
				osThreadYield();
 800108a:	f012 f9db 	bl	8013444 <osThreadYield>
			while (tx_flag == 0) {
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <UART_TX_init+0xb4>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f8      	beq.n	800108a <UART_TX_init+0x8e>
			}

			// Reset the flag
			tx_flag = 0;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <UART_TX_init+0xb4>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 800109e:	f012 f9d1 	bl	8013444 <osThreadYield>
		total_size = 0;
 80010a2:	e7b1      	b.n	8001008 <UART_TX_init+0xc>
 80010a4:	240007d0 	.word	0x240007d0
 80010a8:	24000388 	.word	0x24000388
 80010ac:	24000acc 	.word	0x24000acc
 80010b0:	24000084 	.word	0x24000084

080010b4 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <Voltage_Monitor_init+0xa8>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	f012 fa7a 	bl	80135c0 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 80010cc:	f003 f83a 	bl	8004144 <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 80010d0:	f003 f82e 	bl	8004130 <get_rail_monitor>
 80010d4:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e03b      	b.n	8001154 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	461a      	mov	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d02d      	beq.n	800114e <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	461a      	mov	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	8898      	ldrh	r0, [r3, #4]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	891b      	ldrh	r3, [r3, #8]
 8001116:	4619      	mov	r1, r3
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	461a      	mov	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4413      	add	r3, r2
 8001128:	88db      	ldrh	r3, [r3, #6]
 800112a:	461a      	mov	r2, r3
 800112c:	f003 f898 	bl	8004260 <in_range>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10b      	bne.n	800114e <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4413      	add	r3, r2
 8001146:	785a      	ldrb	r2, [r3, #1]
 8001148:	3201      	adds	r2, #1
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3301      	adds	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b11      	cmp	r3, #17
 8001158:	ddc0      	ble.n	80010dc <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800115a:	e7af      	b.n	80010bc <Voltage_Monitor_init+0x8>
 800115c:	240007c8 	.word	0x240007c8

08001160 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001168:	2001      	movs	r0, #1
 800116a:	f012 f98b 	bl	8013484 <osDelay>
 800116e:	e7fb      	b.n	8001168 <STOP_init+0x8>

08001170 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af02      	add	r7, sp, #8
 8001176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <Science_init+0xc0>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001180:	2200      	movs	r2, #0
 8001182:	2101      	movs	r1, #1
 8001184:	f012 fa1c 	bl	80135c0 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e012      	b.n	80011b4 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800118e:	4a29      	ldr	r2, [pc, #164]	; (8001234 <Science_init+0xc4>)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001196:	4a27      	ldr	r2, [pc, #156]	; (8001234 <Science_init+0xc4>)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	889b      	ldrh	r3, [r3, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	4619      	mov	r1, r3
 80011a4:	f008 fa26 	bl	80095f4 <HAL_GPIO_WritePin>
			osDelay(200);
 80011a8:	20c8      	movs	r0, #200	; 0xc8
 80011aa:	f012 f96b 	bl	8013484 <osDelay>
		for (int i = 0; i < 9; i++) {
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3301      	adds	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	dde9      	ble.n	800118e <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80011ba:	2308      	movs	r3, #8
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	e008      	b.n	80011d2 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2101      	movs	r1, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 ff92 	bl	80040f0 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b10      	cmp	r3, #16
 80011d6:	ddf3      	ble.n	80011c0 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2320      	movs	r3, #32
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <Science_init+0xc8>)
 80011e4:	2100      	movs	r1, #0
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <Science_init+0xcc>)
 80011e8:	f004 fe68 	bl	8005ebc <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <Science_init+0xd0>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 80011f2:	210c      	movs	r1, #12
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <Science_init+0xd4>)
 80011f6:	f00d fdc5 	bl	800ed84 <HAL_TIM_OC_Start_IT>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 80011fa:	2100      	movs	r1, #0
 80011fc:	4812      	ldr	r0, [pc, #72]	; (8001248 <Science_init+0xd8>)
 80011fe:	f00d fdc1 	bl	800ed84 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <Science_init+0xdc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2104      	movs	r1, #4
 8001208:	4618      	mov	r0, r3
 800120a:	f012 f995 	bl	8013538 <osEventFlagsSet>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <Science_init+0xdc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2102      	movs	r1, #2
 8001214:	4618      	mov	r0, r3
 8001216:	f012 f98f 	bl	8013538 <osEventFlagsSet>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <Science_init+0xdc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2101      	movs	r1, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f012 f989 	bl	8013538 <osEventFlagsSet>
  __ASM volatile ("cpsie i" : : : "memory");
 8001226:	b662      	cpsie	i
}
 8001228:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 800122a:	f012 f90b 	bl	8013444 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800122e:	e7a3      	b.n	8001178 <Science_init+0x8>
 8001230:	240007cc 	.word	0x240007cc
 8001234:	08017800 	.word	0x08017800
 8001238:	24000000 	.word	0x24000000
 800123c:	240002d4 	.word	0x240002d4
 8001240:	24000814 	.word	0x24000814
 8001244:	24000a34 	.word	0x24000a34
 8001248:	240009e8 	.word	0x240009e8
 800124c:	240007c4 	.word	0x240007c4

08001250 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <Idle_init+0x8c>)
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001260:	2200      	movs	r2, #0
 8001262:	2102      	movs	r1, #2
 8001264:	f012 f9ac 	bl	80135c0 <osEventFlagsWait>


		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet off
 8001268:	210c      	movs	r1, #12
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <Idle_init+0x90>)
 800126c:	f00d fee4 	bl	800f038 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 8001270:	2100      	movs	r1, #0
 8001272:	481c      	ldr	r0, [pc, #112]	; (80012e4 <Idle_init+0x94>)
 8001274:	f00d fee0 	bl	800f038 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <Idle_init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 800127e:	2100      	movs	r1, #0
 8001280:	481a      	ldr	r0, [pc, #104]	; (80012ec <Idle_init+0x9c>)
 8001282:	f004 fedb 	bl	800603c <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001286:	2310      	movs	r3, #16
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e008      	b.n	800129e <Idle_init+0x4e>
			set_rail_monitor_enable(i, 0);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f002 ff2c 	bl	80040f0 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3b01      	subs	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b07      	cmp	r3, #7
 80012a2:	dcf3      	bgt.n	800128c <Idle_init+0x3c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80012a4:	2308      	movs	r3, #8
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	e012      	b.n	80012d0 <Idle_init+0x80>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <Idle_init+0xa0>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <Idle_init+0xa0>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4413      	add	r3, r2
 80012ba:	889b      	ldrh	r3, [r3, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	f008 f998 	bl	80095f4 <HAL_GPIO_WritePin>
			osDelay(200);
 80012c4:	20c8      	movs	r0, #200	; 0xc8
 80012c6:	f012 f8dd 	bl	8013484 <osDelay>
		for (int i = 8; i >= 0; i--) {
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dae9      	bge.n	80012aa <Idle_init+0x5a>
		}

		// Yield thread control
		osThreadYield();
 80012d6:	f012 f8b5 	bl	8013444 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80012da:	e7bd      	b.n	8001258 <Idle_init+0x8>
 80012dc:	240007cc 	.word	0x240007cc
 80012e0:	24000a34 	.word	0x24000a34
 80012e4:	240009e8 	.word	0x240009e8
 80012e8:	24000814 	.word	0x24000814
 80012ec:	240002d4 	.word	0x240002d4
 80012f0:	08017800 	.word	0x08017800

080012f4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	4b34      	ldr	r3, [pc, #208]	; (80013dc <MX_GPIO_Init+0xe8>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	4a32      	ldr	r2, [pc, #200]	; (80013dc <MX_GPIO_Init+0xe8>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131a:	4b30      	ldr	r3, [pc, #192]	; (80013dc <MX_GPIO_Init+0xe8>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001328:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <MX_GPIO_Init+0xe8>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	4a2b      	ldr	r2, [pc, #172]	; (80013dc <MX_GPIO_Init+0xe8>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <MX_GPIO_Init+0xe8>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <MX_GPIO_Init+0xe8>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a23      	ldr	r2, [pc, #140]	; (80013dc <MX_GPIO_Init+0xe8>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_GPIO_Init+0xe8>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_GPIO_Init+0xe8>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <MX_GPIO_Init+0xe8>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_GPIO_Init+0xe8>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001388:	4815      	ldr	r0, [pc, #84]	; (80013e0 <MX_GPIO_Init+0xec>)
 800138a:	f008 f933 	bl	80095f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2164      	movs	r1, #100	; 0x64
 8001392:	4814      	ldr	r0, [pc, #80]	; (80013e4 <MX_GPIO_Init+0xf0>)
 8001394:	f008 f92e 	bl	80095f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001398:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 800139c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <MX_GPIO_Init+0xec>)
 80013b2:	f007 ff57 	bl	8009264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80013b6:	2364      	movs	r3, #100	; 0x64
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013be:	2302      	movs	r3, #2
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_GPIO_Init+0xf0>)
 80013ce:	f007 ff49 	bl	8009264 <HAL_GPIO_Init>

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	58024400 	.word	0x58024400
 80013e0:	58020800 	.word	0x58020800
 80013e4:	58020400 	.word	0x58020400

080013e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_I2C1_Init+0x78>)
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <MX_I2C1_Init+0x7c>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <MX_I2C1_Init+0x78>)
 80013f4:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <MX_I2C1_Init+0x80>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_I2C1_Init+0x78>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <MX_I2C1_Init+0x78>)
 8001400:	2201      	movs	r2, #1
 8001402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_I2C1_Init+0x78>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_I2C1_Init+0x78>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_I2C1_Init+0x78>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <MX_I2C1_Init+0x78>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_I2C1_Init+0x78>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001422:	480f      	ldr	r0, [pc, #60]	; (8001460 <MX_I2C1_Init+0x78>)
 8001424:	f008 f900 	bl	8009628 <HAL_I2C_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800142e:	f000 ff11 	bl	8002254 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	480a      	ldr	r0, [pc, #40]	; (8001460 <MX_I2C1_Init+0x78>)
 8001436:	f008 fe47 	bl	800a0c8 <HAL_I2CEx_ConfigAnalogFilter>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001440:	f000 ff08 	bl	8002254 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <MX_I2C1_Init+0x78>)
 8001448:	f008 fe89 	bl	800a15e <HAL_I2CEx_ConfigDigitalFilter>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 feff 	bl	8002254 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001456:	2001      	movs	r0, #1
 8001458:	f008 fece 	bl	800a1f8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	24000770 	.word	0x24000770
 8001464:	40005400 	.word	0x40005400
 8001468:	0020081f 	.word	0x0020081f

0800146c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0ba      	sub	sp, #232	; 0xe8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	22c0      	movs	r2, #192	; 0xc0
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f015 fab5 	bl	80169fc <memset>
  if(i2cHandle->Instance==I2C1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a27      	ldr	r2, [pc, #156]	; (8001534 <HAL_I2C_MspInit+0xc8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d146      	bne.n	800152a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800149c:	f04f 0208 	mov.w	r2, #8
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4618      	mov	r0, r3
 80014b4:	f009 ff26 	bl	800b304 <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014be:	f000 fec9 	bl	8002254 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_I2C_MspInit+0xcc>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <HAL_I2C_MspInit+0xcc>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_I2C_MspInit+0xcc>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e8:	2312      	movs	r3, #18
 80014ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014fa:	2304      	movs	r3, #4
 80014fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <HAL_I2C_MspInit+0xd0>)
 8001508:	f007 feac 	bl	8009264 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_I2C_MspInit+0xcc>)
 800150e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <HAL_I2C_MspInit+0xcc>)
 8001514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001518:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_I2C_MspInit+0xcc>)
 800151e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800152a:	bf00      	nop
 800152c:	37e8      	adds	r7, #232	; 0xe8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40005400 	.word	0x40005400
 8001538:	58024400 	.word	0x58024400
 800153c:	58020400 	.word	0x58020400

08001540 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d106      	bne.n	800155e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f011 ffee 	bl	8013538 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800155c:	e023      	b.n	80015a6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	else if (htim == &htim2) {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d106      	bne.n	8001574 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2102      	movs	r1, #2
 800156c:	4618      	mov	r0, r3
 800156e:	f011 ffe3 	bl	8013538 <osEventFlagsSet>
}
 8001572:	e018      	b.n	80015a6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d111      	bne.n	80015a0 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2101      	movs	r1, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f011 ffd8 	bl	8013538 <osEventFlagsSet>
		if (HK_ENABLED){
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2104      	movs	r1, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f011 ffcd 	bl	8013538 <osEventFlagsSet>
}
 800159e:	e002      	b.n	80015a6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80015a2:	f015 fb81 	bl	8016ca8 <puts>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	240009e8 	.word	0x240009e8
 80015b4:	240007c4 	.word	0x240007c4
 80015b8:	24000a34 	.word	0x24000a34
 80015bc:	24000a80 	.word	0x24000a80
 80015c0:	240007c8 	.word	0x240007c8
 80015c4:	24000814 	.word	0x24000814
 80015c8:	080174a8 	.word	0x080174a8

080015cc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	49f2      	ldr	r1, [pc, #968]	; (80019a0 <HAL_UART_RxCpltCallback+0x3d4>)
 80015d8:	48f2      	ldr	r0, [pc, #968]	; (80019a4 <HAL_UART_RxCpltCallback+0x3d8>)
 80015da:	f00f f8b3 	bl	8010744 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 80015de:	4bf0      	ldr	r3, [pc, #960]	; (80019a0 <HAL_UART_RxCpltCallback+0x3d4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2be0      	cmp	r3, #224	; 0xe0
 80015e8:	f200 8419 	bhi.w	8001e1e <HAL_UART_RxCpltCallback+0x852>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <HAL_UART_RxCpltCallback+0x28>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	0800198d 	.word	0x0800198d
 80015f8:	080019d1 	.word	0x080019d1
 80015fc:	08001a41 	.word	0x08001a41
 8001600:	08001a7b 	.word	0x08001a7b
 8001604:	08001ab3 	.word	0x08001ab3
 8001608:	08001aed 	.word	0x08001aed
 800160c:	08001b29 	.word	0x08001b29
 8001610:	08001b65 	.word	0x08001b65
 8001614:	08001b9f 	.word	0x08001b9f
 8001618:	08001bd3 	.word	0x08001bd3
 800161c:	08001bff 	.word	0x08001bff
 8001620:	08001c2b 	.word	0x08001c2b
 8001624:	08001c55 	.word	0x08001c55
 8001628:	08001d31 	.word	0x08001d31
 800162c:	08001d99 	.word	0x08001d99
 8001630:	08001dc1 	.word	0x08001dc1
 8001634:	08001979 	.word	0x08001979
 8001638:	080019b5 	.word	0x080019b5
 800163c:	08001a23 	.word	0x08001a23
 8001640:	08001a5f 	.word	0x08001a5f
 8001644:	08001a97 	.word	0x08001a97
 8001648:	08001acf 	.word	0x08001acf
 800164c:	08001b0b 	.word	0x08001b0b
 8001650:	08001b47 	.word	0x08001b47
 8001654:	08001b83 	.word	0x08001b83
 8001658:	08001bbb 	.word	0x08001bbb
 800165c:	08001be3 	.word	0x08001be3
 8001660:	08001c0f 	.word	0x08001c0f
 8001664:	08001c3b 	.word	0x08001c3b
 8001668:	08001c63 	.word	0x08001c63
 800166c:	08001d71 	.word	0x08001d71
 8001670:	08001e1f 	.word	0x08001e1f
 8001674:	08001e1f 	.word	0x08001e1f
 8001678:	08001e1f 	.word	0x08001e1f
 800167c:	08001e1f 	.word	0x08001e1f
 8001680:	08001e1f 	.word	0x08001e1f
 8001684:	08001e1f 	.word	0x08001e1f
 8001688:	08001e1f 	.word	0x08001e1f
 800168c:	08001e1f 	.word	0x08001e1f
 8001690:	08001e1f 	.word	0x08001e1f
 8001694:	08001e1f 	.word	0x08001e1f
 8001698:	08001e1f 	.word	0x08001e1f
 800169c:	08001e1f 	.word	0x08001e1f
 80016a0:	08001e1f 	.word	0x08001e1f
 80016a4:	08001e1f 	.word	0x08001e1f
 80016a8:	08001e1f 	.word	0x08001e1f
 80016ac:	08001e1f 	.word	0x08001e1f
 80016b0:	08001e1f 	.word	0x08001e1f
 80016b4:	08001e1f 	.word	0x08001e1f
 80016b8:	08001e1f 	.word	0x08001e1f
 80016bc:	08001e1f 	.word	0x08001e1f
 80016c0:	08001e1f 	.word	0x08001e1f
 80016c4:	08001e1f 	.word	0x08001e1f
 80016c8:	08001e1f 	.word	0x08001e1f
 80016cc:	08001e1f 	.word	0x08001e1f
 80016d0:	08001e1f 	.word	0x08001e1f
 80016d4:	08001e1f 	.word	0x08001e1f
 80016d8:	08001e1f 	.word	0x08001e1f
 80016dc:	08001e1f 	.word	0x08001e1f
 80016e0:	08001e1f 	.word	0x08001e1f
 80016e4:	08001e1f 	.word	0x08001e1f
 80016e8:	08001e1f 	.word	0x08001e1f
 80016ec:	08001e1f 	.word	0x08001e1f
 80016f0:	08001e1f 	.word	0x08001e1f
 80016f4:	08001e1f 	.word	0x08001e1f
 80016f8:	08001e1f 	.word	0x08001e1f
 80016fc:	08001e1f 	.word	0x08001e1f
 8001700:	08001e1f 	.word	0x08001e1f
 8001704:	08001e1f 	.word	0x08001e1f
 8001708:	08001e1f 	.word	0x08001e1f
 800170c:	08001e1f 	.word	0x08001e1f
 8001710:	08001e1f 	.word	0x08001e1f
 8001714:	08001e1f 	.word	0x08001e1f
 8001718:	08001e1f 	.word	0x08001e1f
 800171c:	08001e1f 	.word	0x08001e1f
 8001720:	08001e1f 	.word	0x08001e1f
 8001724:	08001e1f 	.word	0x08001e1f
 8001728:	08001e1f 	.word	0x08001e1f
 800172c:	08001e1f 	.word	0x08001e1f
 8001730:	08001e1f 	.word	0x08001e1f
 8001734:	08001e1f 	.word	0x08001e1f
 8001738:	08001e1f 	.word	0x08001e1f
 800173c:	08001e1f 	.word	0x08001e1f
 8001740:	08001e1f 	.word	0x08001e1f
 8001744:	08001e1f 	.word	0x08001e1f
 8001748:	08001e1f 	.word	0x08001e1f
 800174c:	08001e1f 	.word	0x08001e1f
 8001750:	08001e1f 	.word	0x08001e1f
 8001754:	08001e1f 	.word	0x08001e1f
 8001758:	08001e1f 	.word	0x08001e1f
 800175c:	08001e1f 	.word	0x08001e1f
 8001760:	08001e1f 	.word	0x08001e1f
 8001764:	08001e1f 	.word	0x08001e1f
 8001768:	08001e1f 	.word	0x08001e1f
 800176c:	08001e1f 	.word	0x08001e1f
 8001770:	08001e1f 	.word	0x08001e1f
 8001774:	08001e1f 	.word	0x08001e1f
 8001778:	08001e1f 	.word	0x08001e1f
 800177c:	08001e1f 	.word	0x08001e1f
 8001780:	08001e1f 	.word	0x08001e1f
 8001784:	08001e1f 	.word	0x08001e1f
 8001788:	08001e1f 	.word	0x08001e1f
 800178c:	08001e1f 	.word	0x08001e1f
 8001790:	08001e1f 	.word	0x08001e1f
 8001794:	08001e1f 	.word	0x08001e1f
 8001798:	08001e1f 	.word	0x08001e1f
 800179c:	08001e1f 	.word	0x08001e1f
 80017a0:	08001e1f 	.word	0x08001e1f
 80017a4:	08001e1f 	.word	0x08001e1f
 80017a8:	08001e1f 	.word	0x08001e1f
 80017ac:	08001e1f 	.word	0x08001e1f
 80017b0:	08001e1f 	.word	0x08001e1f
 80017b4:	08001e1f 	.word	0x08001e1f
 80017b8:	08001e1f 	.word	0x08001e1f
 80017bc:	08001e1f 	.word	0x08001e1f
 80017c0:	08001e1f 	.word	0x08001e1f
 80017c4:	08001e1f 	.word	0x08001e1f
 80017c8:	08001e1f 	.word	0x08001e1f
 80017cc:	08001e1f 	.word	0x08001e1f
 80017d0:	08001e1f 	.word	0x08001e1f
 80017d4:	08001e1f 	.word	0x08001e1f
 80017d8:	08001e1f 	.word	0x08001e1f
 80017dc:	08001e1f 	.word	0x08001e1f
 80017e0:	08001e1f 	.word	0x08001e1f
 80017e4:	08001e1f 	.word	0x08001e1f
 80017e8:	08001e1f 	.word	0x08001e1f
 80017ec:	08001e1f 	.word	0x08001e1f
 80017f0:	08001e1f 	.word	0x08001e1f
 80017f4:	08001e1f 	.word	0x08001e1f
 80017f8:	08001e1f 	.word	0x08001e1f
 80017fc:	08001e1f 	.word	0x08001e1f
 8001800:	08001e1f 	.word	0x08001e1f
 8001804:	08001e1f 	.word	0x08001e1f
 8001808:	08001e1f 	.word	0x08001e1f
 800180c:	08001e1f 	.word	0x08001e1f
 8001810:	08001e1f 	.word	0x08001e1f
 8001814:	08001e1f 	.word	0x08001e1f
 8001818:	08001e1f 	.word	0x08001e1f
 800181c:	08001e1f 	.word	0x08001e1f
 8001820:	08001e1f 	.word	0x08001e1f
 8001824:	08001e1f 	.word	0x08001e1f
 8001828:	08001e1f 	.word	0x08001e1f
 800182c:	08001e1f 	.word	0x08001e1f
 8001830:	08001e1f 	.word	0x08001e1f
 8001834:	08001e1f 	.word	0x08001e1f
 8001838:	08001e1f 	.word	0x08001e1f
 800183c:	08001e1f 	.word	0x08001e1f
 8001840:	08001e1f 	.word	0x08001e1f
 8001844:	08001e1f 	.word	0x08001e1f
 8001848:	08001e1f 	.word	0x08001e1f
 800184c:	08001e1f 	.word	0x08001e1f
 8001850:	08001e1f 	.word	0x08001e1f
 8001854:	08001e1f 	.word	0x08001e1f
 8001858:	08001e1f 	.word	0x08001e1f
 800185c:	08001e1f 	.word	0x08001e1f
 8001860:	08001e1f 	.word	0x08001e1f
 8001864:	08001e1f 	.word	0x08001e1f
 8001868:	08001e1f 	.word	0x08001e1f
 800186c:	08001e1f 	.word	0x08001e1f
 8001870:	08001e1f 	.word	0x08001e1f
 8001874:	08001e1f 	.word	0x08001e1f
 8001878:	08001e1f 	.word	0x08001e1f
 800187c:	08001e1f 	.word	0x08001e1f
 8001880:	08001e1f 	.word	0x08001e1f
 8001884:	08001e1f 	.word	0x08001e1f
 8001888:	08001e1f 	.word	0x08001e1f
 800188c:	08001e1f 	.word	0x08001e1f
 8001890:	08001e1f 	.word	0x08001e1f
 8001894:	08001e1f 	.word	0x08001e1f
 8001898:	08001e1f 	.word	0x08001e1f
 800189c:	08001e1f 	.word	0x08001e1f
 80018a0:	08001e1f 	.word	0x08001e1f
 80018a4:	08001e1f 	.word	0x08001e1f
 80018a8:	08001e1f 	.word	0x08001e1f
 80018ac:	08001e1f 	.word	0x08001e1f
 80018b0:	08001dfd 	.word	0x08001dfd
 80018b4:	08001e1f 	.word	0x08001e1f
 80018b8:	08001e1f 	.word	0x08001e1f
 80018bc:	08001e1f 	.word	0x08001e1f
 80018c0:	08001e1f 	.word	0x08001e1f
 80018c4:	08001e1f 	.word	0x08001e1f
 80018c8:	08001e1f 	.word	0x08001e1f
 80018cc:	08001e1f 	.word	0x08001e1f
 80018d0:	08001e1f 	.word	0x08001e1f
 80018d4:	08001e1f 	.word	0x08001e1f
 80018d8:	08001e1f 	.word	0x08001e1f
 80018dc:	08001e1f 	.word	0x08001e1f
 80018e0:	08001e1f 	.word	0x08001e1f
 80018e4:	08001e1f 	.word	0x08001e1f
 80018e8:	08001e1f 	.word	0x08001e1f
 80018ec:	08001e1f 	.word	0x08001e1f
 80018f0:	08001e03 	.word	0x08001e03
 80018f4:	08001e1f 	.word	0x08001e1f
 80018f8:	08001e1f 	.word	0x08001e1f
 80018fc:	08001e1f 	.word	0x08001e1f
 8001900:	08001e1f 	.word	0x08001e1f
 8001904:	08001e1f 	.word	0x08001e1f
 8001908:	08001e1f 	.word	0x08001e1f
 800190c:	08001e1f 	.word	0x08001e1f
 8001910:	08001e1f 	.word	0x08001e1f
 8001914:	08001e1f 	.word	0x08001e1f
 8001918:	08001e1f 	.word	0x08001e1f
 800191c:	08001e1f 	.word	0x08001e1f
 8001920:	08001e1f 	.word	0x08001e1f
 8001924:	08001e1f 	.word	0x08001e1f
 8001928:	08001e1f 	.word	0x08001e1f
 800192c:	08001e1f 	.word	0x08001e1f
 8001930:	08001e11 	.word	0x08001e11
 8001934:	08001de9 	.word	0x08001de9
 8001938:	08001e1f 	.word	0x08001e1f
 800193c:	08001e1f 	.word	0x08001e1f
 8001940:	08001e1f 	.word	0x08001e1f
 8001944:	08001e1f 	.word	0x08001e1f
 8001948:	08001e1f 	.word	0x08001e1f
 800194c:	08001e1f 	.word	0x08001e1f
 8001950:	08001e1f 	.word	0x08001e1f
 8001954:	08001e1f 	.word	0x08001e1f
 8001958:	08001e1f 	.word	0x08001e1f
 800195c:	08001e1f 	.word	0x08001e1f
 8001960:	08001e1f 	.word	0x08001e1f
 8001964:	08001e1f 	.word	0x08001e1f
 8001968:	08001e1f 	.word	0x08001e1f
 800196c:	08001e1f 	.word	0x08001e1f
 8001970:	08001e1f 	.word	0x08001e1f
 8001974:	08001dd5 	.word	0x08001dd5
	case 0x10: {
		printf("SDN1 ON\n");
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <HAL_UART_RxCpltCallback+0x3dc>)
 800197a:	f015 f995 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_UART_RxCpltCallback+0x3e0>)
 8001980:	2104      	movs	r1, #4
 8001982:	2201      	movs	r2, #1
 8001984:	4618      	mov	r0, r3
 8001986:	f007 fe35 	bl	80095f4 <HAL_GPIO_WritePin>
		break;
 800198a:	e253      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 800198c:	4808      	ldr	r0, [pc, #32]	; (80019b0 <HAL_UART_RxCpltCallback+0x3e4>)
 800198e:	f015 f98b 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_UART_RxCpltCallback+0x3e0>)
 8001994:	2104      	movs	r1, #4
 8001996:	2200      	movs	r2, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f007 fe2b 	bl	80095f4 <HAL_GPIO_WritePin>
		break;
 800199e:	e249      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
 80019a0:	240007d4 	.word	0x240007d4
 80019a4:	24000acc 	.word	0x24000acc
 80019a8:	080174c0 	.word	0x080174c0
 80019ac:	58020400 	.word	0x58020400
 80019b0:	080174c8 	.word	0x080174c8
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 80019b4:	48bb      	ldr	r0, [pc, #748]	; (8001ca4 <HAL_UART_RxCpltCallback+0x6d8>)
 80019b6:	f015 f977 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 80019ba:	4bbb      	ldr	r3, [pc, #748]	; (8001ca8 <HAL_UART_RxCpltCallback+0x6dc>)
 80019bc:	2120      	movs	r1, #32
 80019be:	2201      	movs	r2, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f007 fe17 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 80019c6:	2101      	movs	r1, #1
 80019c8:	2008      	movs	r0, #8
 80019ca:	f002 fb91 	bl	80040f0 <set_rail_monitor_enable>
		break;
 80019ce:	e231      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 80019d0:	48b6      	ldr	r0, [pc, #728]	; (8001cac <HAL_UART_RxCpltCallback+0x6e0>)
 80019d2:	f015 f969 	bl	8016ca8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 80019d6:	2308      	movs	r3, #8
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e00f      	b.n	80019fc <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80019dc:	4ab4      	ldr	r2, [pc, #720]	; (8001cb0 <HAL_UART_RxCpltCallback+0x6e4>)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80019e4:	4ab2      	ldr	r2, [pc, #712]	; (8001cb0 <HAL_UART_RxCpltCallback+0x6e4>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	889b      	ldrh	r3, [r3, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	4619      	mov	r1, r3
 80019f2:	f007 fdff 	bl	80095f4 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	dcec      	bgt.n	80019dc <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001a02:	2310      	movs	r3, #16
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	e008      	b.n	8001a1a <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fb6e 	bl	80040f0 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b07      	cmp	r3, #7
 8001a1e:	dcf3      	bgt.n	8001a08 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8001a20:	e208      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8001a22:	48a4      	ldr	r0, [pc, #656]	; (8001cb4 <HAL_UART_RxCpltCallback+0x6e8>)
 8001a24:	f015 f940 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8001a28:	4ba3      	ldr	r3, [pc, #652]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4618      	mov	r0, r3
 8001a32:	f007 fddf 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8001a36:	2101      	movs	r1, #1
 8001a38:	2009      	movs	r0, #9
 8001a3a:	f002 fb59 	bl	80040f0 <set_rail_monitor_enable>

		break;
 8001a3e:	e1f9      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8001a40:	489e      	ldr	r0, [pc, #632]	; (8001cbc <HAL_UART_RxCpltCallback+0x6f0>)
 8001a42:	f015 f931 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8001a46:	4b9c      	ldr	r3, [pc, #624]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f007 fdd0 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8001a54:	2100      	movs	r1, #0
 8001a56:	2009      	movs	r0, #9
 8001a58:	f002 fb4a 	bl	80040f0 <set_rail_monitor_enable>
		break;
 8001a5c:	e1ea      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8001a5e:	4898      	ldr	r0, [pc, #608]	; (8001cc0 <HAL_UART_RxCpltCallback+0x6f4>)
 8001a60:	f015 f922 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8001a64:	4b94      	ldr	r3, [pc, #592]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f007 fdc2 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001a70:	2101      	movs	r1, #1
 8001a72:	200a      	movs	r0, #10
 8001a74:	f002 fb3c 	bl	80040f0 <set_rail_monitor_enable>

		break;
 8001a78:	e1dc      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001a7a:	4892      	ldr	r0, [pc, #584]	; (8001cc4 <HAL_UART_RxCpltCallback+0x6f8>)
 8001a7c:	f015 f914 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001a80:	4b8d      	ldr	r3, [pc, #564]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	2200      	movs	r2, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f007 fdb4 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	200a      	movs	r0, #10
 8001a90:	f002 fb2e 	bl	80040f0 <set_rail_monitor_enable>
		break;
 8001a94:	e1ce      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001a96:	488c      	ldr	r0, [pc, #560]	; (8001cc8 <HAL_UART_RxCpltCallback+0x6fc>)
 8001a98:	f015 f906 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001a9c:	4b86      	ldr	r3, [pc, #536]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a9e:	2140      	movs	r1, #64	; 0x40
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f007 fda6 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	200b      	movs	r0, #11
 8001aac:	f002 fb20 	bl	80040f0 <set_rail_monitor_enable>

		break;
 8001ab0:	e1c0      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001ab2:	4886      	ldr	r0, [pc, #536]	; (8001ccc <HAL_UART_RxCpltCallback+0x700>)
 8001ab4:	f015 f8f8 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001ab8:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001aba:	2140      	movs	r1, #64	; 0x40
 8001abc:	2200      	movs	r2, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f007 fd98 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	200b      	movs	r0, #11
 8001ac8:	f002 fb12 	bl	80040f0 <set_rail_monitor_enable>
		break;
 8001acc:	e1b2      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001ace:	4880      	ldr	r0, [pc, #512]	; (8001cd0 <HAL_UART_RxCpltCallback+0x704>)
 8001ad0:	f015 f8ea 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001ad4:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ada:	2201      	movs	r2, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	f007 fd89 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	200c      	movs	r0, #12
 8001ae6:	f002 fb03 	bl	80040f0 <set_rail_monitor_enable>

		break;
 8001aea:	e1a3      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001aec:	4879      	ldr	r0, [pc, #484]	; (8001cd4 <HAL_UART_RxCpltCallback+0x708>)
 8001aee:	f015 f8db 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001af2:	4b71      	ldr	r3, [pc, #452]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af8:	2200      	movs	r2, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 fd7a 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001b00:	2100      	movs	r1, #0
 8001b02:	200c      	movs	r0, #12
 8001b04:	f002 faf4 	bl	80040f0 <set_rail_monitor_enable>
		break;
 8001b08:	e194      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001b0a:	4873      	ldr	r0, [pc, #460]	; (8001cd8 <HAL_UART_RxCpltCallback+0x70c>)
 8001b0c:	f015 f8cc 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001b10:	4b69      	ldr	r3, [pc, #420]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b16:	2201      	movs	r2, #1
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f007 fd6b 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001b1e:	2101      	movs	r1, #1
 8001b20:	200d      	movs	r0, #13
 8001b22:	f002 fae5 	bl	80040f0 <set_rail_monitor_enable>

		break;
 8001b26:	e185      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001b28:	486c      	ldr	r0, [pc, #432]	; (8001cdc <HAL_UART_RxCpltCallback+0x710>)
 8001b2a:	f015 f8bd 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001b2e:	4b62      	ldr	r3, [pc, #392]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b34:	2200      	movs	r2, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f007 fd5c 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	200d      	movs	r0, #13
 8001b40:	f002 fad6 	bl	80040f0 <set_rail_monitor_enable>
		break;
 8001b44:	e176      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001b46:	4866      	ldr	r0, [pc, #408]	; (8001ce0 <HAL_UART_RxCpltCallback+0x714>)
 8001b48:	f015 f8ae 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001b4c:	4b5a      	ldr	r3, [pc, #360]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b52:	2201      	movs	r2, #1
 8001b54:	4618      	mov	r0, r3
 8001b56:	f007 fd4d 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	200f      	movs	r0, #15
 8001b5e:	f002 fac7 	bl	80040f0 <set_rail_monitor_enable>

		break;
 8001b62:	e167      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001b64:	485f      	ldr	r0, [pc, #380]	; (8001ce4 <HAL_UART_RxCpltCallback+0x718>)
 8001b66:	f015 f89f 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001b6a:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b70:	2200      	movs	r2, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 fd3e 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	200f      	movs	r0, #15
 8001b7c:	f002 fab8 	bl	80040f0 <set_rail_monitor_enable>
		break;
 8001b80:	e158      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001b82:	4859      	ldr	r0, [pc, #356]	; (8001ce8 <HAL_UART_RxCpltCallback+0x71c>)
 8001b84:	f015 f890 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001b88:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b8a:	2140      	movs	r1, #64	; 0x40
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f007 fd30 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001b94:	2101      	movs	r1, #1
 8001b96:	2010      	movs	r0, #16
 8001b98:	f002 faaa 	bl	80040f0 <set_rail_monitor_enable>

		break;
 8001b9c:	e14a      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001b9e:	4853      	ldr	r0, [pc, #332]	; (8001cec <HAL_UART_RxCpltCallback+0x720>)
 8001ba0:	f015 f882 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001ba4:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <HAL_UART_RxCpltCallback+0x6dc>)
 8001ba6:	2140      	movs	r1, #64	; 0x40
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f007 fd22 	bl	80095f4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2010      	movs	r0, #16
 8001bb4:	f002 fa9c 	bl	80040f0 <set_rail_monitor_enable>
		break;
 8001bb8:	e13c      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001bba:	484d      	ldr	r0, [pc, #308]	; (8001cf0 <HAL_UART_RxCpltCallback+0x724>)
 8001bbc:	f015 f874 	bl	8016ca8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	4a4b      	ldr	r2, [pc, #300]	; (8001cf4 <HAL_UART_RxCpltCallback+0x728>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	484b      	ldr	r0, [pc, #300]	; (8001cf8 <HAL_UART_RxCpltCallback+0x72c>)
 8001bcc:	f004 f976 	bl	8005ebc <HAL_DAC_Start_DMA>
		break;
 8001bd0:	e130      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001bd2:	484a      	ldr	r0, [pc, #296]	; (8001cfc <HAL_UART_RxCpltCallback+0x730>)
 8001bd4:	f015 f868 	bl	8016ca8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4847      	ldr	r0, [pc, #284]	; (8001cf8 <HAL_UART_RxCpltCallback+0x72c>)
 8001bdc:	f004 fa2e 	bl	800603c <HAL_DAC_Stop_DMA>
		break;
 8001be0:	e128      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001be2:	4847      	ldr	r0, [pc, #284]	; (8001d00 <HAL_UART_RxCpltCallback+0x734>)
 8001be4:	f015 f860 	bl	8016ca8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001be8:	210c      	movs	r1, #12
 8001bea:	4846      	ldr	r0, [pc, #280]	; (8001d04 <HAL_UART_RxCpltCallback+0x738>)
 8001bec:	f00d f8ca 	bl	800ed84 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001bf0:	4b45      	ldr	r3, [pc, #276]	; (8001d08 <HAL_UART_RxCpltCallback+0x73c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f011 fc9e 	bl	8013538 <osEventFlagsSet>
		break;
 8001bfc:	e11a      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001bfe:	4843      	ldr	r0, [pc, #268]	; (8001d0c <HAL_UART_RxCpltCallback+0x740>)
 8001c00:	f015 f852 	bl	8016ca8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001c04:	210c      	movs	r1, #12
 8001c06:	483f      	ldr	r0, [pc, #252]	; (8001d04 <HAL_UART_RxCpltCallback+0x738>)
 8001c08:	f00d fa16 	bl	800f038 <HAL_TIM_OC_Stop_IT>
		break;
 8001c0c:	e112      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001c0e:	4840      	ldr	r0, [pc, #256]	; (8001d10 <HAL_UART_RxCpltCallback+0x744>)
 8001c10:	f015 f84a 	bl	8016ca8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001c14:	2100      	movs	r1, #0
 8001c16:	483f      	ldr	r0, [pc, #252]	; (8001d14 <HAL_UART_RxCpltCallback+0x748>)
 8001c18:	f00d f8b4 	bl	800ed84 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <HAL_UART_RxCpltCallback+0x73c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	f011 fc88 	bl	8013538 <osEventFlagsSet>
		break;
 8001c28:	e104      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001c2a:	483b      	ldr	r0, [pc, #236]	; (8001d18 <HAL_UART_RxCpltCallback+0x74c>)
 8001c2c:	f015 f83c 	bl	8016ca8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001c30:	2100      	movs	r1, #0
 8001c32:	4838      	ldr	r0, [pc, #224]	; (8001d14 <HAL_UART_RxCpltCallback+0x748>)
 8001c34:	f00d fa00 	bl	800f038 <HAL_TIM_OC_Stop_IT>
		break;
 8001c38:	e0fc      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001c3a:	4838      	ldr	r0, [pc, #224]	; (8001d1c <HAL_UART_RxCpltCallback+0x750>)
 8001c3c:	f015 f834 	bl	8016ca8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_UART_RxCpltCallback+0x73c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2104      	movs	r1, #4
 8001c46:	4618      	mov	r0, r3
 8001c48:	f011 fc76 	bl	8013538 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001c4c:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <HAL_UART_RxCpltCallback+0x754>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
		break;
 8001c52:	e0ef      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001c54:	4833      	ldr	r0, [pc, #204]	; (8001d24 <HAL_UART_RxCpltCallback+0x758>)
 8001c56:	f015 f827 	bl	8016ca8 <puts>
		HK_ENABLED = 0;
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <HAL_UART_RxCpltCallback+0x754>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
		break;
 8001c60:	e0e8      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001c62:	4831      	ldr	r0, [pc, #196]	; (8001d28 <HAL_UART_RxCpltCallback+0x75c>)
 8001c64:	f015 f820 	bl	8016ca8 <puts>
		if (step < 14) {
 8001c68:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_UART_RxCpltCallback+0x760>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b0d      	cmp	r3, #13
 8001c70:	f200 80d9 	bhi.w	8001e26 <HAL_UART_RxCpltCallback+0x85a>
			step += 2;
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_UART_RxCpltCallback+0x760>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_UART_RxCpltCallback+0x760>)
 8001c80:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001c82:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_UART_RxCpltCallback+0x760>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_UART_RxCpltCallback+0x728>)
 8001c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	4818      	ldr	r0, [pc, #96]	; (8001cf8 <HAL_UART_RxCpltCallback+0x72c>)
 8001c96:	f004 fa74 	bl	8006182 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <HAL_UART_RxCpltCallback+0x72c>)
 8001c9e:	f004 f8b5 	bl	8005e0c <HAL_DAC_Start>
		}
		break;
 8001ca2:	e0c0      	b.n	8001e26 <HAL_UART_RxCpltCallback+0x85a>
 8001ca4:	080174d4 	.word	0x080174d4
 8001ca8:	58020400 	.word	0x58020400
 8001cac:	080174e0 	.word	0x080174e0
 8001cb0:	08017800 	.word	0x08017800
 8001cb4:	080174ec 	.word	0x080174ec
 8001cb8:	58020800 	.word	0x58020800
 8001cbc:	080174f8 	.word	0x080174f8
 8001cc0:	08017508 	.word	0x08017508
 8001cc4:	08017514 	.word	0x08017514
 8001cc8:	08017520 	.word	0x08017520
 8001ccc:	0801752c 	.word	0x0801752c
 8001cd0:	0801753c 	.word	0x0801753c
 8001cd4:	08017548 	.word	0x08017548
 8001cd8:	08017554 	.word	0x08017554
 8001cdc:	08017560 	.word	0x08017560
 8001ce0:	0801756c 	.word	0x0801756c
 8001ce4:	0801757c 	.word	0x0801757c
 8001ce8:	0801758c 	.word	0x0801758c
 8001cec:	08017598 	.word	0x08017598
 8001cf0:	080175a8 	.word	0x080175a8
 8001cf4:	24000000 	.word	0x24000000
 8001cf8:	240002d4 	.word	0x240002d4
 8001cfc:	080175b8 	.word	0x080175b8
 8001d00:	080175c8 	.word	0x080175c8
 8001d04:	24000a34 	.word	0x24000a34
 8001d08:	240007c4 	.word	0x240007c4
 8001d0c:	080175d0 	.word	0x080175d0
 8001d10:	080175dc 	.word	0x080175dc
 8001d14:	240009e8 	.word	0x240009e8
 8001d18:	080175e4 	.word	0x080175e4
 8001d1c:	080175ec 	.word	0x080175ec
 8001d20:	24000814 	.word	0x24000814
 8001d24:	080175f4 	.word	0x080175f4
 8001d28:	080175fc 	.word	0x080175fc
 8001d2c:	24000815 	.word	0x24000815
	}
	case 0x0D: {
		printf("Step Down\n");
 8001d30:	4842      	ldr	r0, [pc, #264]	; (8001e3c <HAL_UART_RxCpltCallback+0x870>)
 8001d32:	f014 ffb9 	bl	8016ca8 <puts>
		if (step > 1) {
 8001d36:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <HAL_UART_RxCpltCallback+0x874>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d974      	bls.n	8001e2a <HAL_UART_RxCpltCallback+0x85e>
			step -= 2;
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_UART_RxCpltCallback+0x874>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	3b02      	subs	r3, #2
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_UART_RxCpltCallback+0x874>)
 8001d4c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001d4e:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <HAL_UART_RxCpltCallback+0x874>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_UART_RxCpltCallback+0x878>)
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4839      	ldr	r0, [pc, #228]	; (8001e48 <HAL_UART_RxCpltCallback+0x87c>)
 8001d62:	f004 fa0e 	bl	8006182 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001d66:	2100      	movs	r1, #0
 8001d68:	4837      	ldr	r0, [pc, #220]	; (8001e48 <HAL_UART_RxCpltCallback+0x87c>)
 8001d6a:	f004 f84f 	bl	8005e0c <HAL_DAC_Start>
		}
		break;
 8001d6e:	e05c      	b.n	8001e2a <HAL_UART_RxCpltCallback+0x85e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001d70:	4836      	ldr	r0, [pc, #216]	; (8001e4c <HAL_UART_RxCpltCallback+0x880>)
 8001d72:	f014 ff99 	bl	8016ca8 <puts>
		if (cadence <= 50000) {
 8001d76:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_UART_RxCpltCallback+0x884>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d855      	bhi.n	8001e2e <HAL_UART_RxCpltCallback+0x862>
			cadence *= 2;
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_UART_RxCpltCallback+0x884>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4a31      	ldr	r2, [pc, #196]	; (8001e50 <HAL_UART_RxCpltCallback+0x884>)
 8001d8a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_UART_RxCpltCallback+0x884>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d96:	e04a      	b.n	8001e2e <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001d98:	482e      	ldr	r0, [pc, #184]	; (8001e54 <HAL_UART_RxCpltCallback+0x888>)
 8001d9a:	f014 ff85 	bl	8016ca8 <puts>
		if (cadence >= 6250) {
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <HAL_UART_RxCpltCallback+0x884>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f641 0269 	movw	r2, #6249	; 0x1869
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d943      	bls.n	8001e32 <HAL_UART_RxCpltCallback+0x866>
			cadence /= 2;
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_UART_RxCpltCallback+0x884>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <HAL_UART_RxCpltCallback+0x884>)
 8001db2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_UART_RxCpltCallback+0x884>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001dbe:	e038      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x866>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001dc0:	4825      	ldr	r0, [pc, #148]	; (8001e58 <HAL_UART_RxCpltCallback+0x88c>)
 8001dc2:	f014 ff71 	bl	8016ca8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_UART_RxCpltCallback+0x890>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2102      	movs	r1, #2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f011 fbb3 	bl	8013538 <osEventFlagsSet>
		break;
 8001dd2:	e02f      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001dd4:	4822      	ldr	r0, [pc, #136]	; (8001e60 <HAL_UART_RxCpltCallback+0x894>)
 8001dd6:	f014 ff67 	bl	8016ca8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_UART_RxCpltCallback+0x890>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2104      	movs	r1, #4
 8001de0:	4618      	mov	r0, r3
 8001de2:	f011 fba9 	bl	8013538 <osEventFlagsSet>
		break;
 8001de6:	e025      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001de8:	481e      	ldr	r0, [pc, #120]	; (8001e64 <HAL_UART_RxCpltCallback+0x898>)
 8001dea:	f014 ff5d 	bl	8016ca8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_UART_RxCpltCallback+0x890>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2108      	movs	r1, #8
 8001df4:	4618      	mov	r0, r3
 8001df6:	f011 fb9f 	bl	8013538 <osEventFlagsSet>
		break;
 8001dfa:	e01b      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xAF: {
		sync();
 8001dfc:	f000 f97e 	bl	80020fc <sync>
		break;
 8001e00:	e018      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_UART_RxCpltCallback+0x89c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f011 fb95 	bl	8013538 <osEventFlagsSet>
		break;
 8001e0e:	e011      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_UART_RxCpltCallback+0x89c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2102      	movs	r1, #2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f011 fb8e 	bl	8013538 <osEventFlagsSet>
		break;
 8001e1c:	e00a      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
	}
	default: {
		printf("Unknown Command\n");
 8001e1e:	4813      	ldr	r0, [pc, #76]	; (8001e6c <HAL_UART_RxCpltCallback+0x8a0>)
 8001e20:	f014 ff42 	bl	8016ca8 <puts>
		break;
 8001e24:	e006      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e26:	bf00      	nop
 8001e28:	e004      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e2a:	bf00      	nop
 8001e2c:	e002      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e2e:	bf00      	nop
 8001e30:	e000      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e32:	bf00      	nop
	}
	}
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	08017604 	.word	0x08017604
 8001e40:	24000815 	.word	0x24000815
 8001e44:	24000000 	.word	0x24000000
 8001e48:	240002d4 	.word	0x240002d4
 8001e4c:	08017610 	.word	0x08017610
 8001e50:	24000080 	.word	0x24000080
 8001e54:	0801761c 	.word	0x0801761c
 8001e58:	08017628 	.word	0x08017628
 8001e5c:	240007c8 	.word	0x240007c8
 8001e60:	08017638 	.word	0x08017638
 8001e64:	08017644 	.word	0x08017644
 8001e68:	240007cc 	.word	0x240007cc
 8001e6c:	08017650 	.word	0x08017650

08001e70 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <HAL_UART_TxCpltCallback+0x1c>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	24000084 	.word	0x24000084

08001e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e94:	f002 fa26 	bl	80042e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e98:	f000 f826 	bl	8001ee8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e9c:	f000 f8a4 	bl	8001fe8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ea0:	f7ff fa28 	bl	80012f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ea4:	f7fe ff20 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001ea8:	f001 fbec 	bl	8003684 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001eac:	f001 fe74 	bl	8003b98 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001eb0:	f7ff fa9a 	bl	80013e8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001eb4:	f000 ff3e 	bl	8002d34 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001eb8:	f001 fb6e 	bl	8003598 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001ebc:	f001 fabe 	bl	800343c <MX_TIM1_Init>
  MX_ADC3_Init();
 8001ec0:	f7fe fcb2 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001ec4:	f7fe fb8e 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001ec8:	f7fe fe5a 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001ecc:	f000 feda 	bl	8002c84 <MX_SPI1_Init>
  MX_RTC_Init();
 8001ed0:	f000 fcbe 	bl	8002850 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001ed4:	f000 f8b8 	bl	8002048 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001ed8:	f011 f9d8 	bl	801328c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001edc:	f7fe ff4a 	bl	8000d74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ee0:	f011 f9f8 	bl	80132d4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001ee4:	e7fe      	b.n	8001ee4 <main+0x54>
	...

08001ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b09c      	sub	sp, #112	; 0x70
 8001eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	224c      	movs	r2, #76	; 0x4c
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f014 fd80 	bl	80169fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2220      	movs	r2, #32
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f014 fd7a 	bl	80169fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f008 f999 	bl	800a240 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <SystemClock_Config+0xf8>)
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	4a32      	ldr	r2, [pc, #200]	; (8001fe0 <SystemClock_Config+0xf8>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f1e:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <SystemClock_Config+0xf8>)
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <SystemClock_Config+0xfc>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f30:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <SystemClock_Config+0xfc>)
 8001f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <SystemClock_Config+0xfc>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f44:	bf00      	nop
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <SystemClock_Config+0xfc>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f52:	d1f8      	bne.n	8001f46 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001f54:	2303      	movs	r3, #3
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001f5e:	2309      	movs	r3, #9
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f62:	2340      	movs	r3, #64	; 0x40
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f66:	2302      	movs	r3, #2
 8001f68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001f72:	2320      	movs	r3, #32
 8001f74:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001f76:	2304      	movs	r3, #4
 8001f78:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001f82:	2308      	movs	r3, #8
 8001f84:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f92:	4618      	mov	r0, r3
 8001f94:	f008 f98e 	bl	800a2b4 <HAL_RCC_OscConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001f9e:	f000 f959 	bl	8002254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa2:	233f      	movs	r3, #63	; 0x3f
 8001fa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f008 fdce 	bl	800ab68 <HAL_RCC_ClockConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001fd2:	f000 f93f 	bl	8002254 <Error_Handler>
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3770      	adds	r7, #112	; 0x70
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	58000400 	.word	0x58000400
 8001fe4:	58024800 	.word	0x58024800

08001fe8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0b0      	sub	sp, #192	; 0xc0
 8001fec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fee:	463b      	mov	r3, r7
 8001ff0:	22c0      	movs	r2, #192	; 0xc0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f014 fd01 	bl	80169fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ffa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002006:	2304      	movs	r3, #4
 8002008:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800200a:	2320      	movs	r3, #32
 800200c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800200e:	2308      	movs	r3, #8
 8002010:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8002012:	2304      	movs	r3, #4
 8002014:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002016:	2302      	movs	r3, #2
 8002018:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202c:	463b      	mov	r3, r7
 800202e:	4618      	mov	r0, r3
 8002030:	f009 f968 	bl	800b304 <HAL_RCCEx_PeriphCLKConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800203a:	f000 f90b 	bl	8002254 <Error_Handler>
  }
}
 800203e:	bf00      	nop
 8002040:	37c0      	adds	r7, #192	; 0xc0
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 800204c:	2000      	movs	r0, #0
 800204e:	f011 fa34 	bl	80134ba <osEventFlagsNew>
 8002052:	4603      	mov	r3, r0
 8002054:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <system_setup+0x98>)
 8002056:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <system_setup+0x98>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d100      	bne.n	8002062 <system_setup+0x1a>
        while (1);
 8002060:	e7fe      	b.n	8002060 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8002062:	2000      	movs	r0, #0
 8002064:	f011 fa29 	bl	80134ba <osEventFlagsNew>
 8002068:	4603      	mov	r3, r0
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <system_setup+0x9c>)
 800206c:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <system_setup+0x9c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <system_setup+0x30>
        while (1);
 8002076:	e7fe      	b.n	8002076 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8002078:	2000      	movs	r0, #0
 800207a:	f011 fa1e 	bl	80134ba <osEventFlagsNew>
 800207e:	4603      	mov	r3, r0
 8002080:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <system_setup+0xa0>)
 8002082:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <system_setup+0xa0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d100      	bne.n	800208e <system_setup+0x46>
        while (1);
 800208c:	e7fe      	b.n	800208c <system_setup+0x44>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 800208e:	2200      	movs	r2, #0
 8002090:	2108      	movs	r1, #8
 8002092:	2080      	movs	r0, #128	; 0x80
 8002094:	f011 fafa 	bl	801368c <osMessageQueueNew>
 8002098:	4603      	mov	r3, r0
 800209a:	4a14      	ldr	r2, [pc, #80]	; (80020ec <system_setup+0xa4>)
 800209c:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <system_setup+0xa4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d100      	bne.n	80020a8 <system_setup+0x60>
		while (1);
 80020a6:	e7fe      	b.n	80020a6 <system_setup+0x5e>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 80020a8:	f001 fe64 	bl	8003d74 <voltage_monitor_init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d100      	bne.n	80020b4 <system_setup+0x6c>
		while (1);
 80020b2:	e7fe      	b.n	80020b2 <system_setup+0x6a>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80020b4:	2100      	movs	r1, #0
 80020b6:	480e      	ldr	r0, [pc, #56]	; (80020f0 <system_setup+0xa8>)
 80020b8:	f00c fe64 	bl	800ed84 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 80020bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 80020c6:	f000 fc55 	bl	8002974 <init_adc_dma>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d100      	bne.n	80020d2 <system_setup+0x8a>
		while (1);
 80020d0:	e7fe      	b.n	80020d0 <system_setup+0x88>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80020d2:	2201      	movs	r2, #1
 80020d4:	4907      	ldr	r1, [pc, #28]	; (80020f4 <system_setup+0xac>)
 80020d6:	4808      	ldr	r0, [pc, #32]	; (80020f8 <system_setup+0xb0>)
 80020d8:	f00e fb34 	bl	8010744 <HAL_UART_Receive_IT>

}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	240007c4 	.word	0x240007c4
 80020e4:	240007c8 	.word	0x240007c8
 80020e8:	240007cc 	.word	0x240007cc
 80020ec:	240007d0 	.word	0x240007d0
 80020f0:	24000a80 	.word	0x24000a80
 80020f4:	240007d4 	.word	0x240007d4
 80020f8:	24000acc 	.word	0x24000acc

080020fc <sync>:

void sync() {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
	send_ACK();
 8002102:	f000 f821 	bl	8002148 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002106:	480e      	ldr	r0, [pc, #56]	; (8002140 <sync+0x44>)
 8002108:	f00e fbe8 	bl	80108dc <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 800210c:	2364      	movs	r3, #100	; 0x64
 800210e:	2209      	movs	r2, #9
 8002110:	490c      	ldr	r1, [pc, #48]	; (8002144 <sync+0x48>)
 8002112:	480b      	ldr	r0, [pc, #44]	; (8002140 <sync+0x44>)
 8002114:	f00e fa4e 	bl	80105b4 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <sync+0x48>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	2bff      	cmp	r3, #255	; 0xff
 8002122:	d1f3      	bne.n	800210c <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8002124:	4807      	ldr	r0, [pc, #28]	; (8002144 <sync+0x48>)
 8002126:	f001 fc75 	bl	8003a14 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800212a:	2201      	movs	r2, #1
 800212c:	4905      	ldr	r1, [pc, #20]	; (8002144 <sync+0x48>)
 800212e:	4804      	ldr	r0, [pc, #16]	; (8002140 <sync+0x44>)
 8002130:	f00e fb08 	bl	8010744 <HAL_UART_Receive_IT>

	send_ACK();
 8002134:	f000 f808 	bl	8002148 <send_ACK>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	24000acc 	.word	0x24000acc
 8002144:	240007d4 	.word	0x240007d4

08002148 <send_ACK>:

void send_ACK() {
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <send_ACK+0x1c>)
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002152:	2364      	movs	r3, #100	; 0x64
 8002154:	2201      	movs	r2, #1
 8002156:	4903      	ldr	r1, [pc, #12]	; (8002164 <send_ACK+0x1c>)
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <send_ACK+0x20>)
 800215a:	f00e f99d 	bl	8010498 <HAL_UART_Transmit>
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2400081c 	.word	0x2400081c
 8002168:	24000acc 	.word	0x24000acc

0800216c <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8002172:	4b2e      	ldr	r3, [pc, #184]	; (800222c <get_current_step+0xc0>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800217e:	4293      	cmp	r3, r2
 8002180:	d04a      	beq.n	8002218 <get_current_step+0xac>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002188:	da48      	bge.n	800221c <get_current_step+0xb0>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002190:	4293      	cmp	r3, r2
 8002192:	d03f      	beq.n	8002214 <get_current_step+0xa8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f640 628b 	movw	r2, #3723	; 0xe8b
 800219a:	4293      	cmp	r3, r2
 800219c:	dc3e      	bgt.n	800221c <get_current_step+0xb0>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f640 421f 	movw	r2, #3103	; 0xc1f
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d033      	beq.n	8002210 <get_current_step+0xa4>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80021ae:	da35      	bge.n	800221c <get_current_step+0xb0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d028      	beq.n	800220c <get_current_step+0xa0>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021c0:	4293      	cmp	r3, r2
 80021c2:	dc2b      	bgt.n	800221c <get_current_step+0xb0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f240 7245 	movw	r2, #1861	; 0x745
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01c      	beq.n	8002208 <get_current_step+0x9c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f240 7245 	movw	r2, #1861	; 0x745
 80021d4:	4293      	cmp	r3, r2
 80021d6:	dc21      	bgt.n	800221c <get_current_step+0xb0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80021de:	4293      	cmp	r3, r2
 80021e0:	d010      	beq.n	8002204 <get_current_step+0x98>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80021e8:	4293      	cmp	r3, r2
 80021ea:	dc17      	bgt.n	800221c <get_current_step+0xb0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <get_current_step+0x90>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80021f8:	d002      	beq.n	8002200 <get_current_step+0x94>
 80021fa:	e00f      	b.n	800221c <get_current_step+0xb0>
	case 0:
		return 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e00e      	b.n	800221e <get_current_step+0xb2>
	case 620:
		return 1;
 8002200:	2301      	movs	r3, #1
 8002202:	e00c      	b.n	800221e <get_current_step+0xb2>
	case 1241:
		return 2;
 8002204:	2302      	movs	r3, #2
 8002206:	e00a      	b.n	800221e <get_current_step+0xb2>
	case 1861:
		return 3;
 8002208:	2303      	movs	r3, #3
 800220a:	e008      	b.n	800221e <get_current_step+0xb2>
	case 2482:
		return 4;
 800220c:	2304      	movs	r3, #4
 800220e:	e006      	b.n	800221e <get_current_step+0xb2>
	case 3103:
		return 5;
 8002210:	2305      	movs	r3, #5
 8002212:	e004      	b.n	800221e <get_current_step+0xb2>
	case 3723:
		return 6;
 8002214:	2306      	movs	r3, #6
 8002216:	e002      	b.n	800221e <get_current_step+0xb2>
	case 4095:
		return 7;
 8002218:	2307      	movs	r3, #7
 800221a:	e000      	b.n	800221e <get_current_step+0xb2>
	default:
		return -1;
 800221c:	23ff      	movs	r3, #255	; 0xff
	}
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40007400 	.word	0x40007400

08002230 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002242:	f002 f88b 	bl	800435c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40001000 	.word	0x40001000

08002254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800225c:	e7fe      	b.n	800225c <Error_Handler+0x8>

0800225e <packetize>:

uint16_t pmt_seq = 0;
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;

packet_t packetize(const uint8_t *data, uint16_t size) {
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	4613      	mov	r3, r2
 800226a:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	4618      	mov	r0, r3
 8002270:	f014 fba6 	bl	80169c0 <malloc>
 8002274:	4603      	mov	r3, r0
 8002276:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	4618      	mov	r0, r3
 8002280:	f014 fbae 	bl	80169e0 <memcpy>
	packet.size = size;
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	82bb      	strh	r3, [r7, #20]
	return packet;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	461a      	mov	r2, r3
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002294:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <create_pmt_packet>:

void create_pmt_packet() {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80022a6:	bf00      	nop
 80022a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ac:	4836      	ldr	r0, [pc, #216]	; (8002388 <create_pmt_packet+0xe8>)
 80022ae:	f007 f989 	bl	80095c4 <HAL_GPIO_ReadPin>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f7      	bne.n	80022a8 <create_pmt_packet+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 80022b8:	200a      	movs	r0, #10
 80022ba:	f014 fb81 	bl	80169c0 <malloc>
 80022be:	4603      	mov	r3, r0
 80022c0:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80022c2:	2002      	movs	r0, #2
 80022c4:	f014 fb7c 	bl	80169c0 <malloc>
 80022c8:	4603      	mov	r3, r0
 80022ca:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80022cc:	2004      	movs	r0, #4
 80022ce:	f014 fb77 	bl	80169c0 <malloc>
 80022d2:	4603      	mov	r3, r0
 80022d4:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f001 fb02 	bl	80038e0 <get_uptime>

	sample_pmt_spi(pmt_spi);
 80022dc:	6938      	ldr	r0, [r7, #16]
 80022de:	f000 fb89 	bl	80029f4 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	22bb      	movs	r2, #187	; 0xbb
 80022e6:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3301      	adds	r3, #1
 80022ec:	22bb      	movs	r2, #187	; 0xbb
 80022ee:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80022f0:	4b26      	ldr	r3, [pc, #152]	; (800238c <create_pmt_packet+0xec>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3302      	adds	r3, #2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <create_pmt_packet+0xec>)
 8002302:	881a      	ldrh	r2, [r3, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3303      	adds	r3, #3
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3304      	adds	r3, #4
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	7812      	ldrb	r2, [r2, #0]
 8002314:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3305      	adds	r3, #5
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	7852      	ldrb	r2, [r2, #1]
 800231e:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3306      	adds	r3, #6
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3307      	adds	r3, #7
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	7852      	ldrb	r2, [r2, #1]
 8002332:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3308      	adds	r3, #8
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	7892      	ldrb	r2, [r2, #2]
 800233c:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3309      	adds	r3, #9
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	78d2      	ldrb	r2, [r2, #3]
 8002346:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = packetize(buffer, PMT_DATA_SIZE);
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	220a      	movs	r2, #10
 800234c:	6979      	ldr	r1, [r7, #20]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff85 	bl	800225e <packetize>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <create_pmt_packet+0xf0>)
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	1d39      	adds	r1, r7, #4
 800235a:	2300      	movs	r3, #0
 800235c:	2200      	movs	r2, #0
 800235e:	f011 fa09 	bl	8013774 <osMessageQueuePut>
	pmt_seq++;
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <create_pmt_packet+0xec>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <create_pmt_packet+0xec>)
 800236c:	801a      	strh	r2, [r3, #0]
	free(buffer);
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f014 fb2e 	bl	80169d0 <free>
	free(pmt_spi);
 8002374:	6938      	ldr	r0, [r7, #16]
 8002376:	f014 fb2b 	bl	80169d0 <free>
	free(uptime);
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f014 fb28 	bl	80169d0 <free>
}
 8002380:	bf00      	nop
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	58020000 	.word	0x58020000
 800238c:	2400081e 	.word	0x2400081e
 8002390:	240007d0 	.word	0x240007d0

08002394 <create_erpa_packet>:


void create_erpa_packet() {
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800239a:	bf00      	nop
 800239c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a0:	484a      	ldr	r0, [pc, #296]	; (80024cc <create_erpa_packet+0x138>)
 80023a2:	f007 f90f 	bl	80095c4 <HAL_GPIO_ReadPin>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f7      	bne.n	800239c <create_erpa_packet+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80023ac:	200e      	movs	r0, #14
 80023ae:	f014 fb07 	bl	80169c0 <malloc>
 80023b2:	4603      	mov	r3, r0
 80023b4:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80023b6:	2002      	movs	r0, #2
 80023b8:	f014 fb02 	bl	80169c0 <malloc>
 80023bc:	4603      	mov	r3, r0
 80023be:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 80023c0:	2002      	movs	r0, #2
 80023c2:	f014 fafd 	bl	80169c0 <malloc>
 80023c6:	4603      	mov	r3, r0
 80023c8:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80023ca:	2004      	movs	r0, #4
 80023cc:	f014 faf8 	bl	80169c0 <malloc>
 80023d0:	4603      	mov	r3, r0
 80023d2:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 80023d4:	23ff      	movs	r3, #255	; 0xff
 80023d6:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 80023d8:	6938      	ldr	r0, [r7, #16]
 80023da:	f001 fa81 	bl	80038e0 <get_uptime>
	sweep_step = get_current_step();
 80023de:	f7ff fec5 	bl	800216c <get_current_step>
 80023e2:	4603      	mov	r3, r0
 80023e4:	73fb      	strb	r3, [r7, #15]

	sample_erpa_spi(erpa_spi);
 80023e6:	69b8      	ldr	r0, [r7, #24]
 80023e8:	f000 fb28 	bl	8002a3c <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 80023ec:	6978      	ldr	r0, [r7, #20]
 80023ee:	f000 fb49 	bl	8002a84 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	22aa      	movs	r2, #170	; 0xaa
 80023f6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	3301      	adds	r3, #1
 80023fc:	22aa      	movs	r2, #170	; 0xaa
 80023fe:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002400:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <create_erpa_packet+0x13c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0c1a      	lsrs	r2, r3, #16
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3302      	adds	r3, #2
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 800240e:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <create_erpa_packet+0x13c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0a1a      	lsrs	r2, r3, #8
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3303      	adds	r3, #3
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 800241c:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <create_erpa_packet+0x13c>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	3304      	adds	r3, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	3305      	adds	r3, #5
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b29a      	uxth	r2, r3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	3306      	adds	r3, #6
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	881a      	ldrh	r2, [r3, #0]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	3307      	adds	r3, #7
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	3308      	adds	r3, #8
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	7812      	ldrb	r2, [r2, #0]
 8002454:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3309      	adds	r3, #9
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	7852      	ldrb	r2, [r2, #1]
 800245e:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	330a      	adds	r3, #10
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	330b      	adds	r3, #11
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	7852      	ldrb	r2, [r2, #1]
 8002472:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	330c      	adds	r3, #12
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	7892      	ldrb	r2, [r2, #2]
 800247c:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	330d      	adds	r3, #13
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	78d2      	ldrb	r2, [r2, #3]
 8002486:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = packetize(buffer, ERPA_DATA_SIZE);
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	220e      	movs	r2, #14
 800248c:	69f9      	ldr	r1, [r7, #28]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fee5 	bl	800225e <packetize>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <create_erpa_packet+0x140>)
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	1d39      	adds	r1, r7, #4
 800249a:	2300      	movs	r3, #0
 800249c:	2200      	movs	r2, #0
 800249e:	f011 f969 	bl	8013774 <osMessageQueuePut>
	erpa_seq++;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <create_erpa_packet+0x13c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <create_erpa_packet+0x13c>)
 80024aa:	6013      	str	r3, [r2, #0]
	free(buffer);
 80024ac:	69f8      	ldr	r0, [r7, #28]
 80024ae:	f014 fa8f 	bl	80169d0 <free>
	free(erpa_spi);
 80024b2:	69b8      	ldr	r0, [r7, #24]
 80024b4:	f014 fa8c 	bl	80169d0 <free>
	free(erpa_adc);
 80024b8:	6978      	ldr	r0, [r7, #20]
 80024ba:	f014 fa89 	bl	80169d0 <free>
	free(uptime);
 80024be:	6938      	ldr	r0, [r7, #16]
 80024c0:	f014 fa86 	bl	80169d0 <free>
}
 80024c4:	bf00      	nop
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	58020400 	.word	0x58020400
 80024d0:	24000820 	.word	0x24000820
 80024d4:	240007d0 	.word	0x240007d0

080024d8 <create_hk_packet>:


void create_hk_packet() {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 80024de:	2036      	movs	r0, #54	; 0x36
 80024e0:	f014 fa6e 	bl	80169c0 <malloc>
 80024e4:	4603      	mov	r3, r0
 80024e6:	617b      	str	r3, [r7, #20]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 80024e8:	200a      	movs	r0, #10
 80024ea:	f014 fa69 	bl	80169c0 <malloc>
 80024ee:	4603      	mov	r3, r0
 80024f0:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80024f2:	2004      	movs	r0, #4
 80024f4:	f014 fa64 	bl	80169c0 <malloc>
 80024f8:	4603      	mov	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f001 f9ef 	bl	80038e0 <get_uptime>
	get_timestamp(timestamp);
 8002502:	6938      	ldr	r0, [r7, #16]
 8002504:	f001 fa36 	bl	8003974 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002508:	f001 fe12 	bl	8004130 <get_rail_monitor>
 800250c:	60b8      	str	r0, [r7, #8]


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	22cc      	movs	r2, #204	; 0xcc
 8002512:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	22cc      	movs	r2, #204	; 0xcc
 800251a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800251c:	4ba1      	ldr	r3, [pc, #644]	; (80027a4 <create_hk_packet+0x2cc>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	b29a      	uxth	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3302      	adds	r3, #2
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800252c:	4b9d      	ldr	r3, [pc, #628]	; (80027a4 <create_hk_packet+0x2cc>)
 800252e:	881a      	ldrh	r2, [r3, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3303      	adds	r3, #3
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	889b      	ldrh	r3, [r3, #4]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	b29a      	uxth	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3304      	adds	r3, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	889a      	ldrh	r2, [r3, #4]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3305      	adds	r3, #5
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	330a      	adds	r3, #10
 8002558:	889b      	ldrh	r3, [r3, #4]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	b29a      	uxth	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3306      	adds	r3, #6
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	330a      	adds	r3, #10
 800256a:	889a      	ldrh	r2, [r3, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3307      	adds	r3, #7
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	3314      	adds	r3, #20
 8002578:	889b      	ldrh	r3, [r3, #4]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	b29a      	uxth	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3308      	adds	r3, #8
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3314      	adds	r3, #20
 800258a:	889a      	ldrh	r2, [r3, #4]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3309      	adds	r3, #9
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	331e      	adds	r3, #30
 8002598:	889b      	ldrh	r3, [r3, #4]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	b29a      	uxth	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	330a      	adds	r3, #10
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	331e      	adds	r3, #30
 80025aa:	889a      	ldrh	r2, [r3, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	330b      	adds	r3, #11
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	3328      	adds	r3, #40	; 0x28
 80025b8:	889b      	ldrh	r3, [r3, #4]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	b29a      	uxth	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	330c      	adds	r3, #12
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3328      	adds	r3, #40	; 0x28
 80025ca:	889a      	ldrh	r2, [r3, #4]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	330d      	adds	r3, #13
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3332      	adds	r3, #50	; 0x32
 80025d8:	889b      	ldrh	r3, [r3, #4]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	b29a      	uxth	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	330e      	adds	r3, #14
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3332      	adds	r3, #50	; 0x32
 80025ea:	889a      	ldrh	r2, [r3, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	330f      	adds	r3, #15
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	333c      	adds	r3, #60	; 0x3c
 80025f8:	889b      	ldrh	r3, [r3, #4]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3310      	adds	r3, #16
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	333c      	adds	r3, #60	; 0x3c
 800260a:	889a      	ldrh	r2, [r3, #4]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3311      	adds	r3, #17
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	3346      	adds	r3, #70	; 0x46
 8002618:	889b      	ldrh	r3, [r3, #4]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	b29a      	uxth	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3312      	adds	r3, #18
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3346      	adds	r3, #70	; 0x46
 800262a:	889a      	ldrh	r2, [r3, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3313      	adds	r3, #19
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	3350      	adds	r3, #80	; 0x50
 8002638:	889b      	ldrh	r3, [r3, #4]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	b29a      	uxth	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3314      	adds	r3, #20
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3350      	adds	r3, #80	; 0x50
 800264a:	889a      	ldrh	r2, [r3, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3315      	adds	r3, #21
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	335a      	adds	r3, #90	; 0x5a
 8002658:	889b      	ldrh	r3, [r3, #4]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	b29a      	uxth	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3316      	adds	r3, #22
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	335a      	adds	r3, #90	; 0x5a
 800266a:	889a      	ldrh	r2, [r3, #4]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3317      	adds	r3, #23
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	3364      	adds	r3, #100	; 0x64
 8002678:	889b      	ldrh	r3, [r3, #4]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	b29a      	uxth	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3318      	adds	r3, #24
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3364      	adds	r3, #100	; 0x64
 800268a:	889a      	ldrh	r2, [r3, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3319      	adds	r3, #25
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	336e      	adds	r3, #110	; 0x6e
 8002698:	889b      	ldrh	r3, [r3, #4]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b29a      	uxth	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	331a      	adds	r3, #26
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	336e      	adds	r3, #110	; 0x6e
 80026aa:	889a      	ldrh	r2, [r3, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	331b      	adds	r3, #27
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	3378      	adds	r3, #120	; 0x78
 80026b8:	889b      	ldrh	r3, [r3, #4]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	b29a      	uxth	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	331c      	adds	r3, #28
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3378      	adds	r3, #120	; 0x78
 80026ca:	889a      	ldrh	r2, [r3, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	331d      	adds	r3, #29
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	3382      	adds	r3, #130	; 0x82
 80026d8:	889b      	ldrh	r3, [r3, #4]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	331e      	adds	r3, #30
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	3382      	adds	r3, #130	; 0x82
 80026ea:	889a      	ldrh	r2, [r3, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	331f      	adds	r3, #31
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	338c      	adds	r3, #140	; 0x8c
 80026f8:	889b      	ldrh	r3, [r3, #4]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3320      	adds	r3, #32
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	338c      	adds	r3, #140	; 0x8c
 800270a:	889a      	ldrh	r2, [r3, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	3321      	adds	r3, #33	; 0x21
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3396      	adds	r3, #150	; 0x96
 8002718:	889b      	ldrh	r3, [r3, #4]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	b29a      	uxth	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3322      	adds	r3, #34	; 0x22
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3396      	adds	r3, #150	; 0x96
 800272a:	889a      	ldrh	r2, [r3, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3323      	adds	r3, #35	; 0x23
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	33a0      	adds	r3, #160	; 0xa0
 8002738:	889b      	ldrh	r3, [r3, #4]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	b29a      	uxth	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3324      	adds	r3, #36	; 0x24
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	33a0      	adds	r3, #160	; 0xa0
 800274a:	889a      	ldrh	r2, [r3, #4]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	3325      	adds	r3, #37	; 0x25
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	33aa      	adds	r3, #170	; 0xaa
 8002758:	889b      	ldrh	r3, [r3, #4]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	b29a      	uxth	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3326      	adds	r3, #38	; 0x26
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	33aa      	adds	r3, #170	; 0xaa
 800276a:	889a      	ldrh	r2, [r3, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3327      	adds	r3, #39	; 0x27
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3328      	adds	r3, #40	; 0x28
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3329      	adds	r3, #41	; 0x29
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	7852      	ldrb	r2, [r2, #1]
 8002786:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	332a      	adds	r3, #42	; 0x2a
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	7892      	ldrb	r2, [r2, #2]
 8002790:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	332b      	adds	r3, #43	; 0x2b
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	78d2      	ldrb	r2, [r2, #3]
 800279a:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	332c      	adds	r3, #44	; 0x2c
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	e001      	b.n	80027a8 <create_hk_packet+0x2d0>
 80027a4:	24000824 	.word	0x24000824
 80027a8:	7912      	ldrb	r2, [r2, #4]
 80027aa:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	332d      	adds	r3, #45	; 0x2d
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	7952      	ldrb	r2, [r2, #5]
 80027b4:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	332e      	adds	r3, #46	; 0x2e
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	7992      	ldrb	r2, [r2, #6]
 80027be:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	332f      	adds	r3, #47	; 0x2f
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	79d2      	ldrb	r2, [r2, #7]
 80027c8:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3330      	adds	r3, #48	; 0x30
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	7a12      	ldrb	r2, [r2, #8]
 80027d2:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3331      	adds	r3, #49	; 0x31
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	7a52      	ldrb	r2, [r2, #9]
 80027dc:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3332      	adds	r3, #50	; 0x32
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3333      	adds	r3, #51	; 0x33
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	7852      	ldrb	r2, [r2, #1]
 80027f0:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3334      	adds	r3, #52	; 0x34
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	7892      	ldrb	r2, [r2, #2]
 80027fa:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	3335      	adds	r3, #53	; 0x35
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	78d2      	ldrb	r2, [r2, #3]
 8002804:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = packetize(buffer, HK_DATA_SIZE);
 8002806:	463b      	mov	r3, r7
 8002808:	2236      	movs	r2, #54	; 0x36
 800280a:	6979      	ldr	r1, [r7, #20]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fd26 	bl	800225e <packetize>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <create_hk_packet+0x370>)
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	4639      	mov	r1, r7
 8002818:	2300      	movs	r3, #0
 800281a:	2200      	movs	r2, #0
 800281c:	f010 ffaa 	bl	8013774 <osMessageQueuePut>
	hk_seq++;
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <create_hk_packet+0x374>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <create_hk_packet+0x374>)
 800282a:	801a      	strh	r2, [r3, #0]
	free(buffer);
 800282c:	6978      	ldr	r0, [r7, #20]
 800282e:	f014 f8cf 	bl	80169d0 <free>
	free(timestamp);
 8002832:	6938      	ldr	r0, [r7, #16]
 8002834:	f014 f8cc 	bl	80169d0 <free>
	free(uptime);
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f014 f8c9 	bl	80169d0 <free>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	240007d0 	.word	0x240007d0
 800284c:	24000824 	.word	0x24000824

08002850 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002864:	2300      	movs	r3, #0
 8002866:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002868:	4b26      	ldr	r3, [pc, #152]	; (8002904 <MX_RTC_Init+0xb4>)
 800286a:	4a27      	ldr	r2, [pc, #156]	; (8002908 <MX_RTC_Init+0xb8>)
 800286c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <MX_RTC_Init+0xb4>)
 8002870:	2200      	movs	r2, #0
 8002872:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <MX_RTC_Init+0xb4>)
 8002876:	2263      	movs	r2, #99	; 0x63
 8002878:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <MX_RTC_Init+0xb4>)
 800287c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002880:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <MX_RTC_Init+0xb4>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <MX_RTC_Init+0xb4>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <MX_RTC_Init+0xb4>)
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <MX_RTC_Init+0xb4>)
 8002896:	2200      	movs	r2, #0
 8002898:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800289a:	481a      	ldr	r0, [pc, #104]	; (8002904 <MX_RTC_Init+0xb4>)
 800289c:	f00b fa30 	bl	800dd00 <HAL_RTC_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80028a6:	f7ff fcd5 	bl	8002254 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2201      	movs	r2, #1
 80028c2:	4619      	mov	r1, r3
 80028c4:	480f      	ldr	r0, [pc, #60]	; (8002904 <MX_RTC_Init+0xb4>)
 80028c6:	f00b fa9d 	bl	800de04 <HAL_RTC_SetTime>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80028d0:	f7ff fcc0 	bl	8002254 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80028d4:	2301      	movs	r3, #1
 80028d6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80028d8:	2301      	movs	r3, #1
 80028da:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80028dc:	2301      	movs	r3, #1
 80028de:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80028e4:	463b      	mov	r3, r7
 80028e6:	2201      	movs	r2, #1
 80028e8:	4619      	mov	r1, r3
 80028ea:	4806      	ldr	r0, [pc, #24]	; (8002904 <MX_RTC_Init+0xb4>)
 80028ec:	f00b fb84 	bl	800dff8 <HAL_RTC_SetDate>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80028f6:	f7ff fcad 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	24000828 	.word	0x24000828
 8002908:	58004000 	.word	0x58004000

0800290c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b0b2      	sub	sp, #200	; 0xc8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002914:	f107 0308 	add.w	r3, r7, #8
 8002918:	22c0      	movs	r2, #192	; 0xc0
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f014 f86d 	bl	80169fc <memset>
  if(rtcHandle->Instance==RTC)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <HAL_RTC_MspInit+0x5c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d118      	bne.n	800295e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800292c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_RTC_MspInit+0x60>)
 800293a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800293e:	f107 0308 	add.w	r3, r7, #8
 8002942:	4618      	mov	r0, r3
 8002944:	f008 fcde 	bl	800b304 <HAL_RCCEx_PeriphCLKConfig>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 800294e:	f7ff fc81 	bl	8002254 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_RTC_MspInit+0x64>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	4a06      	ldr	r2, [pc, #24]	; (8002970 <HAL_RTC_MspInit+0x64>)
 8002958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800295e:	bf00      	nop
 8002960:	37c8      	adds	r7, #200	; 0xc8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	58004000 	.word	0x58004000
 800296c:	00019300 	.word	0x00019300
 8002970:	58024400 	.word	0x58024400

08002974 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800297e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002982:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002986:	4817      	ldr	r0, [pc, #92]	; (80029e4 <init_adc_dma+0x70>)
 8002988:	f002 fffc 	bl	8005984 <HAL_ADCEx_Calibration_Start>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002992:	f7ff fc5f 	bl	8002254 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002996:	220b      	movs	r2, #11
 8002998:	4913      	ldr	r1, [pc, #76]	; (80029e8 <init_adc_dma+0x74>)
 800299a:	4812      	ldr	r0, [pc, #72]	; (80029e4 <init_adc_dma+0x70>)
 800299c:	f002 f8d0 	bl	8004b40 <HAL_ADC_Start_DMA>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80029a6:	f7ff fc55 	bl	8002254 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80029aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80029ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029b2:	480e      	ldr	r0, [pc, #56]	; (80029ec <init_adc_dma+0x78>)
 80029b4:	f002 ffe6 	bl	8005984 <HAL_ADCEx_Calibration_Start>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80029be:	f7ff fc49 	bl	8002254 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80029c2:	2204      	movs	r2, #4
 80029c4:	490a      	ldr	r1, [pc, #40]	; (80029f0 <init_adc_dma+0x7c>)
 80029c6:	4809      	ldr	r0, [pc, #36]	; (80029ec <init_adc_dma+0x78>)
 80029c8:	f002 f8ba 	bl	8004b40 <HAL_ADC_Start_DMA>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80029d2:	f7ff fc3f 	bl	8002254 <Error_Handler>
	}
	status = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	71fb      	strb	r3, [r7, #7]

	return status;
 80029da:	79fb      	ldrb	r3, [r7, #7]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2400011c 	.word	0x2400011c
 80029e8:	24000860 	.word	0x24000860
 80029ec:	24000180 	.word	0x24000180
 80029f0:	24000880 	.word	0x24000880

080029f4 <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 80029fc:	f107 010c 	add.w	r1, r7, #12
 8002a00:	2301      	movs	r3, #1
 8002a02:	2201      	movs	r2, #1
 8002a04:	480c      	ldr	r0, [pc, #48]	; (8002a38 <sample_pmt_spi+0x44>)
 8002a06:	f00b fdc1 	bl	800e58c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002a0e:	7b7b      	ldrb	r3, [r7, #13]
 8002a10:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <sample_pmt_spi+0x44>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <sample_pmt_spi+0x44>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a20:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7bba      	ldrb	r2, [r7, #14]
 8002a26:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	701a      	strb	r2, [r3, #0]
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	24000888 	.word	0x24000888

08002a3c <sample_erpa_spi>:

void sample_erpa_spi(uint8_t *buffer) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8002a44:	f107 010c 	add.w	r1, r7, #12
 8002a48:	2364      	movs	r3, #100	; 0x64
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	480c      	ldr	r0, [pc, #48]	; (8002a80 <sample_erpa_spi+0x44>)
 8002a4e:	f00b fd9d 	bl	800e58c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002a56:	7b7b      	ldrb	r3, [r7, #13]
 8002a58:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <sample_erpa_spi+0x44>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <sample_erpa_spi+0x44>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a68:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7bba      	ldrb	r2, [r7, #14]
 8002a6e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3301      	adds	r3, #1
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	701a      	strb	r2, [r3, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	24000910 	.word	0x24000910

08002a84 <sample_erpa_adc>:

void sample_erpa_adc(uint16_t *buffer) {
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <sample_erpa_adc+0x20>)
 8002a8e:	885b      	ldrh	r3, [r3, #2]
 8002a90:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	89fa      	ldrh	r2, [r7, #14]
 8002a96:	801a      	strh	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	24000860 	.word	0x24000860

08002aa8 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002ab0:	2390      	movs	r3, #144	; 0x90
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f8a2 	bl	8002bfc <poll_i2c_sensor>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8002abc:	2394      	movs	r3, #148	; 0x94
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f89c 	bl	8002bfc <poll_i2c_sensor>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8002ac8:	2392      	movs	r3, #146	; 0x92
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f896 	bl	8002bfc <poll_i2c_sensor>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002ad4:	2396      	movs	r3, #150	; 0x96
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f890 	bl	8002bfc <poll_i2c_sensor>
 8002adc:	4603      	mov	r3, r0
 8002ade:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	89fa      	ldrh	r2, [r7, #14]
 8002ae4:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3302      	adds	r3, #2
 8002aea:	89ba      	ldrh	r2, [r7, #12]
 8002aec:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	897a      	ldrh	r2, [r7, #10]
 8002af4:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3306      	adds	r3, #6
 8002afa:	893a      	ldrh	r2, [r7, #8]
 8002afc:	801a      	strh	r2, [r3, #0]
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <sample_hk_adc1+0xa0>)
 8002b12:	8a9b      	ldrh	r3, [r3, #20]
 8002b14:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <sample_hk_adc1+0xa0>)
 8002b18:	8a1b      	ldrh	r3, [r3, #16]
 8002b1a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <sample_hk_adc1+0xa0>)
 8002b1e:	899b      	ldrh	r3, [r3, #12]
 8002b20:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <sample_hk_adc1+0xa0>)
 8002b24:	8a5b      	ldrh	r3, [r3, #18]
 8002b26:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002b28:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <sample_hk_adc1+0xa0>)
 8002b2a:	889b      	ldrh	r3, [r3, #4]
 8002b2c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <sample_hk_adc1+0xa0>)
 8002b30:	88db      	ldrh	r3, [r3, #6]
 8002b32:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <sample_hk_adc1+0xa0>)
 8002b36:	89db      	ldrh	r3, [r3, #14]
 8002b38:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <sample_hk_adc1+0xa0>)
 8002b3c:	891b      	ldrh	r3, [r3, #8]
 8002b3e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <sample_hk_adc1+0xa0>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <sample_hk_adc1+0xa0>)
 8002b48:	895b      	ldrh	r3, [r3, #10]
 8002b4a:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	8bfa      	ldrh	r2, [r7, #30]
 8002b50:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3302      	adds	r3, #2
 8002b56:	8bba      	ldrh	r2, [r7, #28]
 8002b58:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	8b7a      	ldrh	r2, [r7, #26]
 8002b60:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3306      	adds	r3, #6
 8002b66:	8b3a      	ldrh	r2, [r7, #24]
 8002b68:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	8afa      	ldrh	r2, [r7, #22]
 8002b70:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	330a      	adds	r3, #10
 8002b76:	8aba      	ldrh	r2, [r7, #20]
 8002b78:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	330c      	adds	r3, #12
 8002b7e:	8a7a      	ldrh	r2, [r7, #18]
 8002b80:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	330e      	adds	r3, #14
 8002b86:	8a3a      	ldrh	r2, [r7, #16]
 8002b88:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3310      	adds	r3, #16
 8002b8e:	89fa      	ldrh	r2, [r7, #14]
 8002b90:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3312      	adds	r3, #18
 8002b96:	89ba      	ldrh	r2, [r7, #12]
 8002b98:	801a      	strh	r2, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	24000860 	.word	0x24000860

08002bac <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <sample_hk_adc3+0x4c>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <sample_hk_adc3+0x4c>)
 8002bbc:	885b      	ldrh	r3, [r3, #2]
 8002bbe:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <sample_hk_adc3+0x4c>)
 8002bc2:	889b      	ldrh	r3, [r3, #4]
 8002bc4:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <sample_hk_adc3+0x4c>)
 8002bc8:	88db      	ldrh	r3, [r3, #6]
 8002bca:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	89fa      	ldrh	r2, [r7, #14]
 8002bd0:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	89ba      	ldrh	r2, [r7, #12]
 8002bd8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	897a      	ldrh	r2, [r7, #10]
 8002be0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3306      	adds	r3, #6
 8002be6:	893a      	ldrh	r2, [r7, #8]
 8002be8:	801a      	strh	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	24000880 	.word	0x24000880

08002bfc <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8002c06:	2300      	movs	r3, #0
 8002c08:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	b299      	uxth	r1, r3
 8002c0e:	f107 0208 	add.w	r2, r7, #8
 8002c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	4817      	ldr	r0, [pc, #92]	; (8002c78 <poll_i2c_sensor+0x7c>)
 8002c1c:	f006 fda0 	bl	8009760 <HAL_I2C_Master_Transmit>
 8002c20:	4603      	mov	r3, r0
 8002c22:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002c24:	7b7b      	ldrb	r3, [r7, #13]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8002c2a:	4814      	ldr	r0, [pc, #80]	; (8002c7c <poll_i2c_sensor+0x80>)
 8002c2c:	f014 f83c 	bl	8016ca8 <puts>
 8002c30:	e01c      	b.n	8002c6c <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	b299      	uxth	r1, r3
 8002c36:	f107 0208 	add.w	r2, r7, #8
 8002c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2302      	movs	r3, #2
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <poll_i2c_sensor+0x7c>)
 8002c44:	f006 fea4 	bl	8009990 <HAL_I2C_Master_Receive>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8002c4c:	7b7b      	ldrb	r3, [r7, #13]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8002c52:	480b      	ldr	r0, [pc, #44]	; (8002c80 <poll_i2c_sensor+0x84>)
 8002c54:	f014 f828 	bl	8016ca8 <puts>
 8002c58:	e008      	b.n	8002c6c <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8002c5a:	7a3b      	ldrb	r3, [r7, #8]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8002c60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c64:	7a7a      	ldrb	r2, [r7, #9]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	10db      	asrs	r3, r3, #3
 8002c6a:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8002c6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	24000770 	.word	0x24000770
 8002c7c:	08017660 	.word	0x08017660
 8002c80:	08017670 	.word	0x08017670

08002c84 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c88:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002c8a:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <MX_SPI1_Init+0xac>)
 8002c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c8e:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002c90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002c96:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002c98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c9c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c9e:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cba:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc6:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d16:	4805      	ldr	r0, [pc, #20]	; (8002d2c <MX_SPI1_Init+0xa8>)
 8002d18:	f00b fb14 	bl	800e344 <HAL_SPI_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002d22:	f7ff fa97 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	24000888 	.word	0x24000888
 8002d30:	40013000 	.word	0x40013000

08002d34 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002d38:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d3a:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <MX_SPI2_Init+0xac>)
 8002d3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d3e:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002d44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002d46:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d4c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d50:	220f      	movs	r2, #15
 8002d52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d60:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002d68:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d6a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002d6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002d82:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d88:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d8e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002dba:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002dc6:	4805      	ldr	r0, [pc, #20]	; (8002ddc <MX_SPI2_Init+0xa8>)
 8002dc8:	f00b fabc 	bl	800e344 <HAL_SPI_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002dd2:	f7ff fa3f 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	24000910 	.word	0x24000910
 8002de0:	40003800 	.word	0x40003800

08002de4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b0bc      	sub	sp, #240	; 0xf0
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dfc:	f107 0318 	add.w	r3, r7, #24
 8002e00:	22c0      	movs	r2, #192	; 0xc0
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f013 fdf9 	bl	80169fc <memset>
  if(spiHandle->Instance==SPI1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a4c      	ldr	r2, [pc, #304]	; (8002f40 <HAL_SPI_MspInit+0x15c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d145      	bne.n	8002ea0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e24:	f107 0318 	add.w	r3, r7, #24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f008 fa6b 	bl	800b304 <HAL_RCCEx_PeriphCLKConfig>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002e34:	f7ff fa0e 	bl	8002254 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e38:	4b42      	ldr	r3, [pc, #264]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e3e:	4a41      	ldr	r2, [pc, #260]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e48:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5c:	4a39      	ldr	r2, [pc, #228]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002e74:	2318      	movs	r3, #24
 8002e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e8c:	2305      	movs	r3, #5
 8002e8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e92:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e96:	4619      	mov	r1, r3
 8002e98:	482b      	ldr	r0, [pc, #172]	; (8002f48 <HAL_SPI_MspInit+0x164>)
 8002e9a:	f006 f9e3 	bl	8009264 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002e9e:	e04a      	b.n	8002f36 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <HAL_SPI_MspInit+0x168>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d145      	bne.n	8002f36 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002eaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eba:	f107 0318 	add.w	r3, r7, #24
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f008 fa20 	bl	800b304 <HAL_RCCEx_PeriphCLKConfig>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002eca:	f7ff f9c3 	bl	8002254 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002f0a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f24:	2305      	movs	r3, #5
 8002f26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4805      	ldr	r0, [pc, #20]	; (8002f48 <HAL_SPI_MspInit+0x164>)
 8002f32:	f006 f997 	bl	8009264 <HAL_GPIO_Init>
}
 8002f36:	bf00      	nop
 8002f38:	37f0      	adds	r7, #240	; 0xf0
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40013000 	.word	0x40013000
 8002f44:	58024400 	.word	0x58024400
 8002f48:	58020400 	.word	0x58020400
 8002f4c:	40003800 	.word	0x40003800

08002f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <HAL_MspInit+0x38>)
 8002f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <HAL_MspInit+0x38>)
 8002f5e:	f043 0302 	orr.w	r3, r3, #2
 8002f62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_MspInit+0x38>)
 8002f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	210f      	movs	r1, #15
 8002f78:	f06f 0001 	mvn.w	r0, #1
 8002f7c:	f002 fefc 	bl	8005d78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	58024400 	.word	0x58024400

08002f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b090      	sub	sp, #64	; 0x40
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b0f      	cmp	r3, #15
 8002f98:	d827      	bhi.n	8002fea <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	2036      	movs	r0, #54	; 0x36
 8002fa0:	f002 feea 	bl	8005d78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fa4:	2036      	movs	r0, #54	; 0x36
 8002fa6:	f002 ff01 	bl	8005dac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002faa:	4a29      	ldr	r2, [pc, #164]	; (8003050 <HAL_InitTick+0xc4>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fb0:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_InitTick+0xc8>)
 8002fb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb6:	4a27      	ldr	r2, [pc, #156]	; (8003054 <HAL_InitTick+0xc8>)
 8002fb8:	f043 0310 	orr.w	r3, r3, #16
 8002fbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fc0:	4b24      	ldr	r3, [pc, #144]	; (8003054 <HAL_InitTick+0xc8>)
 8002fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fce:	f107 0210 	add.w	r2, r7, #16
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f008 f951 	bl	800b280 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_InitTick+0x6a>
 8002fe8:	e001      	b.n	8002fee <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e02b      	b.n	8003046 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fee:	f008 f91b 	bl	800b228 <HAL_RCC_GetPCLK1Freq>
 8002ff2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002ff4:	e004      	b.n	8003000 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ff6:	f008 f917 	bl	800b228 <HAL_RCC_GetPCLK1Freq>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003002:	4a15      	ldr	r2, [pc, #84]	; (8003058 <HAL_InitTick+0xcc>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	0c9b      	lsrs	r3, r3, #18
 800300a:	3b01      	subs	r3, #1
 800300c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_InitTick+0xd0>)
 8003010:	4a13      	ldr	r2, [pc, #76]	; (8003060 <HAL_InitTick+0xd4>)
 8003012:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_InitTick+0xd0>)
 8003016:	f240 32e7 	movw	r2, #999	; 0x3e7
 800301a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800301c:	4a0f      	ldr	r2, [pc, #60]	; (800305c <HAL_InitTick+0xd0>)
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_InitTick+0xd0>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_InitTick+0xd0>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800302e:	480b      	ldr	r0, [pc, #44]	; (800305c <HAL_InitTick+0xd0>)
 8003030:	f00b fdd9 	bl	800ebe6 <HAL_TIM_Base_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800303a:	4808      	ldr	r0, [pc, #32]	; (800305c <HAL_InitTick+0xd0>)
 800303c:	f00b fe2a 	bl	800ec94 <HAL_TIM_Base_Start_IT>
 8003040:	4603      	mov	r3, r0
 8003042:	e000      	b.n	8003046 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
}
 8003046:	4618      	mov	r0, r3
 8003048:	3740      	adds	r7, #64	; 0x40
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	24000090 	.word	0x24000090
 8003054:	58024400 	.word	0x58024400
 8003058:	431bde83 	.word	0x431bde83
 800305c:	24000998 	.word	0x24000998
 8003060:	40001000 	.word	0x40001000

08003064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003068:	e7fe      	b.n	8003068 <NMI_Handler+0x4>

0800306a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306e:	e7fe      	b.n	800306e <HardFault_Handler+0x4>

08003070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <MemManage_Handler+0x4>

08003076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307a:	e7fe      	b.n	800307a <BusFault_Handler+0x4>

0800307c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <UsageFault_Handler+0x4>

08003082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <DMA1_Stream0_IRQHandler+0x10>)
 8003096:	f004 fdc7 	bl	8007c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	240001e4 	.word	0x240001e4

080030a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <DMA1_Stream1_IRQHandler+0x10>)
 80030aa:	f004 fdbd 	bl	8007c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	2400025c 	.word	0x2400025c

080030b8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <DMA1_Stream2_IRQHandler+0x10>)
 80030be:	f004 fdb3 	bl	8007c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	24000b60 	.word	0x24000b60

080030cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <DMA1_Stream5_IRQHandler+0x10>)
 80030d2:	f004 fda9 	bl	8007c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	240002e8 	.word	0x240002e8

080030e0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <TIM1_BRK_IRQHandler+0x10>)
 80030e6:	f00c f8ec 	bl	800f2c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	240009e8 	.word	0x240009e8

080030f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <TIM1_UP_IRQHandler+0x10>)
 80030fa:	f00c f8e2 	bl	800f2c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	240009e8 	.word	0x240009e8

08003108 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <TIM1_TRG_COM_IRQHandler+0x10>)
 800310e:	f00c f8d8 	bl	800f2c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	240009e8 	.word	0x240009e8

0800311c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <TIM1_CC_IRQHandler+0x10>)
 8003122:	f00c f8ce 	bl	800f2c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	240009e8 	.word	0x240009e8

08003130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <TIM2_IRQHandler+0x10>)
 8003136:	f00c f8c4 	bl	800f2c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	24000a34 	.word	0x24000a34

08003144 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <TIM3_IRQHandler+0x10>)
 800314a:	f00c f8ba 	bl	800f2c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	24000a80 	.word	0x24000a80

08003158 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <USART1_IRQHandler+0x10>)
 800315e:	f00d fc73 	bl	8010a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	24000acc 	.word	0x24000acc

0800316c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <TIM6_DAC_IRQHandler+0x20>)
 8003172:	791b      	ldrb	r3, [r3, #4]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800317a:	4804      	ldr	r0, [pc, #16]	; (800318c <TIM6_DAC_IRQHandler+0x20>)
 800317c:	f002 ffab 	bl	80060d6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003180:	4803      	ldr	r0, [pc, #12]	; (8003190 <TIM6_DAC_IRQHandler+0x24>)
 8003182:	f00c f89e 	bl	800f2c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	240002d4 	.word	0x240002d4
 8003190:	24000998 	.word	0x24000998

08003194 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <ITM_SendChar+0x48>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <ITM_SendChar+0x48>)
 80031a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a8:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <ITM_SendChar+0x4c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <ITM_SendChar+0x4c>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80031b6:	bf00      	nop
 80031b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f8      	beq.n	80031b8 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80031c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	6013      	str	r3, [r2, #0]
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000edfc 	.word	0xe000edfc
 80031e0:	e0000e00 	.word	0xe0000e00

080031e4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e00a      	b.n	800320c <_read+0x28>
		*ptr++ = __io_getchar();
 80031f6:	f3af 8000 	nop.w
 80031fa:	4601      	mov	r1, r0
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	60ba      	str	r2, [r7, #8]
 8003202:	b2ca      	uxtb	r2, r1
 8003204:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3301      	adds	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	dbf0      	blt.n	80031f6 <_read+0x12>
	}

	return len;
 8003214:	687b      	ldr	r3, [r7, #4]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e009      	b.n	8003244 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	60ba      	str	r2, [r7, #8]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ffab 	bl	8003194 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	3301      	adds	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	dbf1      	blt.n	8003230 <_write+0x12>
	}
	return len;
 800324c:	687b      	ldr	r3, [r7, #4]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_close>:

int _close(int file) {
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800325e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <_fstat>:

int _fstat(int file, struct stat *st) {
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800327e:	605a      	str	r2, [r3, #4]
	return 0;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <_isatty>:

int _isatty(int file) {
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003296:	2301      	movs	r3, #1
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80032c8:	4a14      	ldr	r2, [pc, #80]	; (800331c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <_sbrk+0x64>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <_sbrk+0x64>)
 80032de:	4a12      	ldr	r2, [pc, #72]	; (8003328 <_sbrk+0x68>)
 80032e0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <_sbrk+0x64>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d207      	bcs.n	8003300 <_sbrk+0x40>
		errno = ENOMEM;
 80032f0:	f013 fb3c 	bl	801696c <__errno>
 80032f4:	4603      	mov	r3, r0
 80032f6:	220c      	movs	r2, #12
 80032f8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032fe:	e009      	b.n	8003314 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <_sbrk+0x64>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003306:	4b07      	ldr	r3, [pc, #28]	; (8003324 <_sbrk+0x64>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	4a05      	ldr	r2, [pc, #20]	; (8003324 <_sbrk+0x64>)
 8003310:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003312:	68fb      	ldr	r3, [r7, #12]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	24080000 	.word	0x24080000
 8003320:	00000400 	.word	0x00000400
 8003324:	240009e4 	.word	0x240009e4
 8003328:	240055f0 	.word	0x240055f0

0800332c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003330:	4b37      	ldr	r3, [pc, #220]	; (8003410 <SystemInit+0xe4>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	4a36      	ldr	r2, [pc, #216]	; (8003410 <SystemInit+0xe4>)
 8003338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800333c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003340:	4b34      	ldr	r3, [pc, #208]	; (8003414 <SystemInit+0xe8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	2b06      	cmp	r3, #6
 800334a:	d807      	bhi.n	800335c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800334c:	4b31      	ldr	r3, [pc, #196]	; (8003414 <SystemInit+0xe8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 030f 	bic.w	r3, r3, #15
 8003354:	4a2f      	ldr	r2, [pc, #188]	; (8003414 <SystemInit+0xe8>)
 8003356:	f043 0307 	orr.w	r3, r3, #7
 800335a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 800335c:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <SystemInit+0xec>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a2d      	ldr	r2, [pc, #180]	; (8003418 <SystemInit+0xec>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <SystemInit+0xec>)
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800336e:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <SystemInit+0xec>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4929      	ldr	r1, [pc, #164]	; (8003418 <SystemInit+0xec>)
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <SystemInit+0xf0>)
 8003376:	4013      	ands	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800337a:	4b26      	ldr	r3, [pc, #152]	; (8003414 <SystemInit+0xe8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <SystemInit+0xe8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 030f 	bic.w	r3, r3, #15
 800338e:	4a21      	ldr	r2, [pc, #132]	; (8003414 <SystemInit+0xe8>)
 8003390:	f043 0307 	orr.w	r3, r3, #7
 8003394:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <SystemInit+0xec>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <SystemInit+0xec>)
 800339e:	2200      	movs	r2, #0
 80033a0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <SystemInit+0xec>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <SystemInit+0xec>)
 80033aa:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <SystemInit+0xf4>)
 80033ac:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <SystemInit+0xec>)
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <SystemInit+0xf8>)
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80033b4:	4b18      	ldr	r3, [pc, #96]	; (8003418 <SystemInit+0xec>)
 80033b6:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <SystemInit+0xfc>)
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <SystemInit+0xec>)
 80033bc:	2200      	movs	r2, #0
 80033be:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <SystemInit+0xec>)
 80033c2:	4a19      	ldr	r2, [pc, #100]	; (8003428 <SystemInit+0xfc>)
 80033c4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <SystemInit+0xec>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <SystemInit+0xec>)
 80033ce:	4a16      	ldr	r2, [pc, #88]	; (8003428 <SystemInit+0xfc>)
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <SystemInit+0xec>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <SystemInit+0xec>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <SystemInit+0xec>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <SystemInit+0xec>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <SystemInit+0x100>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <SystemInit+0x104>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f6:	d202      	bcs.n	80033fe <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <SystemInit+0x108>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033fe:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <SystemInit+0x10c>)
 8003400:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003404:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00
 8003414:	52002000 	.word	0x52002000
 8003418:	58024400 	.word	0x58024400
 800341c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003420:	02020200 	.word	0x02020200
 8003424:	01ff0000 	.word	0x01ff0000
 8003428:	01010280 	.word	0x01010280
 800342c:	5c001000 	.word	0x5c001000
 8003430:	ffff0000 	.word	0xffff0000
 8003434:	51008108 	.word	0x51008108
 8003438:	52004000 	.word	0x52004000

0800343c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b09a      	sub	sp, #104	; 0x68
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003442:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003450:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800345c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	611a      	str	r2, [r3, #16]
 800346c:	615a      	str	r2, [r3, #20]
 800346e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	222c      	movs	r2, #44	; 0x2c
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f013 fac0 	bl	80169fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800347c:	4b44      	ldr	r3, [pc, #272]	; (8003590 <MX_TIM1_Init+0x154>)
 800347e:	4a45      	ldr	r2, [pc, #276]	; (8003594 <MX_TIM1_Init+0x158>)
 8003480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <MX_TIM1_Init+0x154>)
 8003484:	2231      	movs	r2, #49	; 0x31
 8003486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003488:	4b41      	ldr	r3, [pc, #260]	; (8003590 <MX_TIM1_Init+0x154>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800348e:	4b40      	ldr	r3, [pc, #256]	; (8003590 <MX_TIM1_Init+0x154>)
 8003490:	f24f 4223 	movw	r2, #62499	; 0xf423
 8003494:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003496:	4b3e      	ldr	r3, [pc, #248]	; (8003590 <MX_TIM1_Init+0x154>)
 8003498:	2200      	movs	r2, #0
 800349a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800349c:	4b3c      	ldr	r3, [pc, #240]	; (8003590 <MX_TIM1_Init+0x154>)
 800349e:	2200      	movs	r2, #0
 80034a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a2:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <MX_TIM1_Init+0x154>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034a8:	4839      	ldr	r0, [pc, #228]	; (8003590 <MX_TIM1_Init+0x154>)
 80034aa:	f00b fb9c 	bl	800ebe6 <HAL_TIM_Base_Init>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80034b4:	f7fe fece 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034bc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034c2:	4619      	mov	r1, r3
 80034c4:	4832      	ldr	r0, [pc, #200]	; (8003590 <MX_TIM1_Init+0x154>)
 80034c6:	f00c f917 	bl	800f6f8 <HAL_TIM_ConfigClockSource>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80034d0:	f7fe fec0 	bl	8002254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80034d4:	482e      	ldr	r0, [pc, #184]	; (8003590 <MX_TIM1_Init+0x154>)
 80034d6:	f00b fe93 	bl	800f200 <HAL_TIM_PWM_Init>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80034e0:	f7fe feb8 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e4:	2300      	movs	r3, #0
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80034e8:	2300      	movs	r3, #0
 80034ea:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80034f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034f4:	4619      	mov	r1, r3
 80034f6:	4826      	ldr	r0, [pc, #152]	; (8003590 <MX_TIM1_Init+0x154>)
 80034f8:	f00c fe54 	bl	80101a4 <HAL_TIMEx_MasterConfigSynchronization>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003502:	f7fe fea7 	bl	8002254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003506:	2360      	movs	r3, #96	; 0x60
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800350a:	f240 13df 	movw	r3, #479	; 0x1df
 800350e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003510:	2300      	movs	r3, #0
 8003512:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003514:	2300      	movs	r3, #0
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003518:	2300      	movs	r3, #0
 800351a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800351c:	2300      	movs	r3, #0
 800351e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003520:	2300      	movs	r3, #0
 8003522:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003528:	2200      	movs	r2, #0
 800352a:	4619      	mov	r1, r3
 800352c:	4818      	ldr	r0, [pc, #96]	; (8003590 <MX_TIM1_Init+0x154>)
 800352e:	f00b ffcf 	bl	800f4d0 <HAL_TIM_PWM_ConfigChannel>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003538:	f7fe fe8c 	bl	8002254 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800353c:	2300      	movs	r3, #0
 800353e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003554:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800355e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003568:	2300      	movs	r3, #0
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	4619      	mov	r1, r3
 8003570:	4807      	ldr	r0, [pc, #28]	; (8003590 <MX_TIM1_Init+0x154>)
 8003572:	f00c fea5 	bl	80102c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800357c:	f7fe fe6a 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003580:	4803      	ldr	r0, [pc, #12]	; (8003590 <MX_TIM1_Init+0x154>)
 8003582:	f000 f949 	bl	8003818 <HAL_TIM_MspPostInit>

}
 8003586:	bf00      	nop
 8003588:	3768      	adds	r7, #104	; 0x68
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	240009e8 	.word	0x240009e8
 8003594:	40010000 	.word	0x40010000

08003598 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	; 0x38
 800359c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800359e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ac:	f107 031c 	add.w	r3, r7, #28
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035b8:	463b      	mov	r3, r7
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	611a      	str	r2, [r3, #16]
 80035c6:	615a      	str	r2, [r3, #20]
 80035c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035ca:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <MX_TIM2_Init+0xe8>)
 80035cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 80035d2:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <MX_TIM2_Init+0xe8>)
 80035d4:	2231      	movs	r2, #49	; 0x31
 80035d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <MX_TIM2_Init+0xe8>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80035de:	4b28      	ldr	r3, [pc, #160]	; (8003680 <MX_TIM2_Init+0xe8>)
 80035e0:	f640 4234 	movw	r2, #3124	; 0xc34
 80035e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <MX_TIM2_Init+0xe8>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035ec:	4b24      	ldr	r3, [pc, #144]	; (8003680 <MX_TIM2_Init+0xe8>)
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035f2:	4823      	ldr	r0, [pc, #140]	; (8003680 <MX_TIM2_Init+0xe8>)
 80035f4:	f00b faf7 	bl	800ebe6 <HAL_TIM_Base_Init>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80035fe:	f7fe fe29 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800360c:	4619      	mov	r1, r3
 800360e:	481c      	ldr	r0, [pc, #112]	; (8003680 <MX_TIM2_Init+0xe8>)
 8003610:	f00c f872 	bl	800f6f8 <HAL_TIM_ConfigClockSource>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800361a:	f7fe fe1b 	bl	8002254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800361e:	4818      	ldr	r0, [pc, #96]	; (8003680 <MX_TIM2_Init+0xe8>)
 8003620:	f00b fdee 	bl	800f200 <HAL_TIM_PWM_Init>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800362a:	f7fe fe13 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800362e:	2320      	movs	r3, #32
 8003630:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003636:	f107 031c 	add.w	r3, r7, #28
 800363a:	4619      	mov	r1, r3
 800363c:	4810      	ldr	r0, [pc, #64]	; (8003680 <MX_TIM2_Init+0xe8>)
 800363e:	f00c fdb1 	bl	80101a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003648:	f7fe fe04 	bl	8002254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800364c:	2360      	movs	r3, #96	; 0x60
 800364e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003654:	2300      	movs	r3, #0
 8003656:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800365c:	463b      	mov	r3, r7
 800365e:	220c      	movs	r2, #12
 8003660:	4619      	mov	r1, r3
 8003662:	4807      	ldr	r0, [pc, #28]	; (8003680 <MX_TIM2_Init+0xe8>)
 8003664:	f00b ff34 	bl	800f4d0 <HAL_TIM_PWM_ConfigChannel>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800366e:	f7fe fdf1 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003672:	4803      	ldr	r0, [pc, #12]	; (8003680 <MX_TIM2_Init+0xe8>)
 8003674:	f000 f8d0 	bl	8003818 <HAL_TIM_MspPostInit>

}
 8003678:	bf00      	nop
 800367a:	3738      	adds	r7, #56	; 0x38
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	24000a34 	.word	0x24000a34

08003684 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003698:	1d3b      	adds	r3, r7, #4
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <MX_TIM3_Init+0x94>)
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <MX_TIM3_Init+0x98>)
 80036a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <MX_TIM3_Init+0x94>)
 80036aa:	2263      	movs	r2, #99	; 0x63
 80036ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ae:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <MX_TIM3_Init+0x94>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80036b4:	4b18      	ldr	r3, [pc, #96]	; (8003718 <MX_TIM3_Init+0x94>)
 80036b6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80036ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036bc:	4b16      	ldr	r3, [pc, #88]	; (8003718 <MX_TIM3_Init+0x94>)
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <MX_TIM3_Init+0x94>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036c8:	4813      	ldr	r0, [pc, #76]	; (8003718 <MX_TIM3_Init+0x94>)
 80036ca:	f00b fa8c 	bl	800ebe6 <HAL_TIM_Base_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80036d4:	f7fe fdbe 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036de:	f107 0310 	add.w	r3, r7, #16
 80036e2:	4619      	mov	r1, r3
 80036e4:	480c      	ldr	r0, [pc, #48]	; (8003718 <MX_TIM3_Init+0x94>)
 80036e6:	f00c f807 	bl	800f6f8 <HAL_TIM_ConfigClockSource>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80036f0:	f7fe fdb0 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036f4:	2300      	movs	r3, #0
 80036f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036fc:	1d3b      	adds	r3, r7, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	4805      	ldr	r0, [pc, #20]	; (8003718 <MX_TIM3_Init+0x94>)
 8003702:	f00c fd4f 	bl	80101a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800370c:	f7fe fda2 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003710:	bf00      	nop
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	24000a80 	.word	0x24000a80
 800371c:	40000400 	.word	0x40000400

08003720 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a37      	ldr	r2, [pc, #220]	; (800380c <HAL_TIM_Base_MspInit+0xec>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d12f      	bne.n	8003792 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <HAL_TIM_Base_MspInit+0xf0>)
 8003734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003738:	4a35      	ldr	r2, [pc, #212]	; (8003810 <HAL_TIM_Base_MspInit+0xf0>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003742:	4b33      	ldr	r3, [pc, #204]	; (8003810 <HAL_TIM_Base_MspInit+0xf0>)
 8003744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003750:	2200      	movs	r2, #0
 8003752:	2105      	movs	r1, #5
 8003754:	2018      	movs	r0, #24
 8003756:	f002 fb0f 	bl	8005d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800375a:	2018      	movs	r0, #24
 800375c:	f002 fb26 	bl	8005dac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003760:	2200      	movs	r2, #0
 8003762:	2105      	movs	r1, #5
 8003764:	2019      	movs	r0, #25
 8003766:	f002 fb07 	bl	8005d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800376a:	2019      	movs	r0, #25
 800376c:	f002 fb1e 	bl	8005dac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2105      	movs	r1, #5
 8003774:	201a      	movs	r0, #26
 8003776:	f002 faff 	bl	8005d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800377a:	201a      	movs	r0, #26
 800377c:	f002 fb16 	bl	8005dac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003780:	2200      	movs	r2, #0
 8003782:	2105      	movs	r1, #5
 8003784:	201b      	movs	r0, #27
 8003786:	f002 faf7 	bl	8005d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800378a:	201b      	movs	r0, #27
 800378c:	f002 fb0e 	bl	8005dac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003790:	e038      	b.n	8003804 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379a:	d117      	bne.n	80037cc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800379c:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <HAL_TIM_Base_MspInit+0xf0>)
 800379e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037a2:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <HAL_TIM_Base_MspInit+0xf0>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037ac:	4b18      	ldr	r3, [pc, #96]	; (8003810 <HAL_TIM_Base_MspInit+0xf0>)
 80037ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2105      	movs	r1, #5
 80037be:	201c      	movs	r0, #28
 80037c0:	f002 fada 	bl	8005d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037c4:	201c      	movs	r0, #28
 80037c6:	f002 faf1 	bl	8005dac <HAL_NVIC_EnableIRQ>
}
 80037ca:	e01b      	b.n	8003804 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a10      	ldr	r2, [pc, #64]	; (8003814 <HAL_TIM_Base_MspInit+0xf4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d116      	bne.n	8003804 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <HAL_TIM_Base_MspInit+0xf0>)
 80037d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037dc:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <HAL_TIM_Base_MspInit+0xf0>)
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <HAL_TIM_Base_MspInit+0xf0>)
 80037e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	2105      	movs	r1, #5
 80037f8:	201d      	movs	r0, #29
 80037fa:	f002 fabd 	bl	8005d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037fe:	201d      	movs	r0, #29
 8003800:	f002 fad4 	bl	8005dac <HAL_NVIC_EnableIRQ>
}
 8003804:	bf00      	nop
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40010000 	.word	0x40010000
 8003810:	58024400 	.word	0x58024400
 8003814:	40000400 	.word	0x40000400

08003818 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a26      	ldr	r2, [pc, #152]	; (80038d0 <HAL_TIM_MspPostInit+0xb8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d120      	bne.n	800387c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383a:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <HAL_TIM_MspPostInit+0xbc>)
 800383c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003840:	4a24      	ldr	r2, [pc, #144]	; (80038d4 <HAL_TIM_MspPostInit+0xbc>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_TIM_MspPostInit+0xbc>)
 800384c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800385c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385e:	2302      	movs	r3, #2
 8003860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800386a:	2301      	movs	r3, #1
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386e:	f107 0314 	add.w	r3, r7, #20
 8003872:	4619      	mov	r1, r3
 8003874:	4818      	ldr	r0, [pc, #96]	; (80038d8 <HAL_TIM_MspPostInit+0xc0>)
 8003876:	f005 fcf5 	bl	8009264 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800387a:	e024      	b.n	80038c6 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003884:	d11f      	bne.n	80038c6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_TIM_MspPostInit+0xbc>)
 8003888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800388c:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <HAL_TIM_MspPostInit+0xbc>)
 800388e:	f043 0302 	orr.w	r3, r3, #2
 8003892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_TIM_MspPostInit+0xbc>)
 8003898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80038a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	2302      	movs	r3, #2
 80038ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038b6:	2301      	movs	r3, #1
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ba:	f107 0314 	add.w	r3, r7, #20
 80038be:	4619      	mov	r1, r3
 80038c0:	4806      	ldr	r0, [pc, #24]	; (80038dc <HAL_TIM_MspPostInit+0xc4>)
 80038c2:	f005 fccf 	bl	8009264 <HAL_GPIO_Init>
}
 80038c6:	bf00      	nop
 80038c8:	3728      	adds	r7, #40	; 0x28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	58024400 	.word	0x58024400
 80038d8:	58020000 	.word	0x58020000
 80038dc:	58020400 	.word	0x58020400

080038e0 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 80038ec:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <get_uptime+0x88>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 80038f2:	4b1e      	ldr	r3, [pc, #120]	; (800396c <get_uptime+0x8c>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <get_uptime+0x88>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d005      	beq.n	800390e <get_uptime+0x2e>
		ms = uptime_millis;
 8003902:	4b19      	ldr	r3, [pc, #100]	; (8003968 <get_uptime+0x88>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8003908:	4b18      	ldr	r3, [pc, #96]	; (800396c <get_uptime+0x8c>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003914:	fb03 f202 	mul.w	r2, r3, r2
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <get_uptime+0x8c>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	3301      	adds	r3, #1
 800391e:	4914      	ldr	r1, [pc, #80]	; (8003970 <get_uptime+0x90>)
 8003920:	fba1 1303 	umull	r1, r3, r1, r3
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	6939      	ldr	r1, [r7, #16]
 8003928:	fbb1 f3f3 	udiv	r3, r1, r3
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	0e1b      	lsrs	r3, r3, #24
 8003934:	b2da      	uxtb	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	0c1a      	lsrs	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3301      	adds	r3, #1
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	0a1a      	lsrs	r2, r3, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3302      	adds	r3, #2
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3303      	adds	r3, #3
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	24000818 	.word	0x24000818
 800396c:	e000e010 	.word	0xe000e010
 8003970:	10624dd3 	.word	0x10624dd3

08003974 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800397c:	f107 0310 	add.w	r3, r7, #16
 8003980:	2200      	movs	r2, #0
 8003982:	4619      	mov	r1, r3
 8003984:	4821      	ldr	r0, [pc, #132]	; (8003a0c <get_timestamp+0x98>)
 8003986:	f00a fadb 	bl	800df40 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800398a:	f107 030c 	add.w	r3, r7, #12
 800398e:	2200      	movs	r2, #0
 8003990:	4619      	mov	r1, r3
 8003992:	481e      	ldr	r0, [pc, #120]	; (8003a0c <get_timestamp+0x98>)
 8003994:	f00a fbb8 	bl	800e108 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2264      	movs	r2, #100	; 0x64
 800399c:	fb03 f202 	mul.w	r2, r3, r2
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <get_timestamp+0x9c>)
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 80039a6:	7bfa      	ldrb	r2, [r7, #15]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3301      	adds	r3, #1
 80039b0:	7b7a      	ldrb	r2, [r7, #13]
 80039b2:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3302      	adds	r3, #2
 80039b8:	7bba      	ldrb	r2, [r7, #14]
 80039ba:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3303      	adds	r3, #3
 80039c0:	7c3a      	ldrb	r2, [r7, #16]
 80039c2:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	7c7a      	ldrb	r2, [r7, #17]
 80039ca:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3305      	adds	r3, #5
 80039d0:	7cba      	ldrb	r2, [r7, #18]
 80039d2:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	0e1a      	lsrs	r2, r3, #24
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3306      	adds	r3, #6
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	0c1a      	lsrs	r2, r3, #16
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3307      	adds	r3, #7
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	0a1a      	lsrs	r2, r3, #8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3308      	adds	r3, #8
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3309      	adds	r3, #9
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]
}
 8003a02:	bf00      	nop
 8003a04:	3728      	adds	r7, #40	; 0x28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	24000828 	.word	0x24000828
 8003a10:	000f4240 	.word	0x000f4240

08003a14 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08c      	sub	sp, #48	; 0x30
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	789b      	ldrb	r3, [r3, #2]
 8003a28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	78db      	ldrb	r3, [r3, #3]
 8003a30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	791b      	ldrb	r3, [r3, #4]
 8003a38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	795b      	ldrb	r3, [r3, #5]
 8003a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	799b      	ldrb	r3, [r3, #6]
 8003a48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3307      	adds	r3, #7
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	b21a      	sxth	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b21b      	sxth	r3, r3
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	b21b      	sxth	r3, r3
 8003a62:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8003a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8003a6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8003a74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8003a7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a80:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8003a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a86:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8003a88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a8c:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8003a8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003a90:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8003a92:	f107 0320 	add.w	r3, r7, #32
 8003a96:	2200      	movs	r2, #0
 8003a98:	4619      	mov	r1, r3
 8003a9a:	480b      	ldr	r0, [pc, #44]	; (8003ac8 <calibrateRTC+0xb4>)
 8003a9c:	f00a faac 	bl	800dff8 <HAL_RTC_SetDate>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8003aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <calibrateRTC+0x9e>
		Error_Handler();
 8003aae:	f7fe fbd1 	bl	8002254 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8003ab2:	f107 030c 	add.w	r3, r7, #12
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4803      	ldr	r0, [pc, #12]	; (8003ac8 <calibrateRTC+0xb4>)
 8003abc:	f000 f806 	bl	8003acc <RTC_SetTime>
}
 8003ac0:	bf00      	nop
 8003ac2:	3730      	adds	r7, #48	; 0x30
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	24000828 	.word	0x24000828

08003acc <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <RTC_SetTime+0x1a>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e051      	b.n	8003b8a <RTC_SetTime+0xbe>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	22ca      	movs	r2, #202	; 0xca
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2253      	movs	r2, #83	; 0x53
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f00a fb70 	bl	800e1ec <RTC_EnterInitMode>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d129      	bne.n	8003b6a <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f00a fbd5 	bl	800e2d0 <RTC_ByteToBcd2>
 8003b26:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8003b28:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f00a fbce 	bl	800e2d0 <RTC_ByteToBcd2>
 8003b34:	4603      	mov	r3, r0
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	789b      	ldrb	r3, [r3, #2]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f00a fbc6 	bl	800e2d0 <RTC_ByteToBcd2>
 8003b44:	4603      	mov	r3, r0
 8003b46:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	78db      	ldrb	r3, [r3, #3]
 8003b4e:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	6939      	ldr	r1, [r7, #16]
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <RTC_SetTime+0xc8>)
 8003b5c:	400b      	ands	r3, r1
 8003b5e:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f00a fb77 	bl	800e254 <RTC_ExitInitMode>
 8003b66:	4603      	mov	r3, r0
 8003b68:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	22ff      	movs	r2, #255	; 0xff
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d103      	bne.n	8003b80 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8003b88:	7dfb      	ldrb	r3, [r7, #23]

}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd90      	pop	{r4, r7, pc}
 8003b92:	bf00      	nop
 8003b94:	007f7f7f 	.word	0x007f7f7f

08003b98 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003b9e:	4a23      	ldr	r2, [pc, #140]	; (8003c2c <MX_USART1_UART_Init+0x94>)
 8003ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003ba2:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003ba4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003baa:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bc2:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc8:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003be0:	4811      	ldr	r0, [pc, #68]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003be2:	f00c fc09 	bl	80103f8 <HAL_UART_Init>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003bec:	f7fe fb32 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	480d      	ldr	r0, [pc, #52]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003bf4:	f00f fa3b 	bl	801306e <HAL_UARTEx_SetTxFifoThreshold>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003bfe:	f7fe fb29 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c02:	2100      	movs	r1, #0
 8003c04:	4808      	ldr	r0, [pc, #32]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003c06:	f00f fa70 	bl	80130ea <HAL_UARTEx_SetRxFifoThreshold>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003c10:	f7fe fb20 	bl	8002254 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003c14:	4804      	ldr	r0, [pc, #16]	; (8003c28 <MX_USART1_UART_Init+0x90>)
 8003c16:	f00f f9f1 	bl	8012ffc <HAL_UARTEx_DisableFifoMode>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003c20:	f7fe fb18 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c24:	bf00      	nop
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	24000acc 	.word	0x24000acc
 8003c2c:	40011000 	.word	0x40011000

08003c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b0ba      	sub	sp, #232	; 0xe8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c48:	f107 0310 	add.w	r3, r7, #16
 8003c4c:	22c0      	movs	r2, #192	; 0xc0
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f012 fed3 	bl	80169fc <memset>
  if(uartHandle->Instance==USART1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a41      	ldr	r2, [pc, #260]	; (8003d60 <HAL_UART_MspInit+0x130>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d17b      	bne.n	8003d58 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c60:	f04f 0201 	mov.w	r2, #1
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003c6c:	2318      	movs	r3, #24
 8003c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c72:	f107 0310 	add.w	r3, r7, #16
 8003c76:	4618      	mov	r0, r3
 8003c78:	f007 fb44 	bl	800b304 <HAL_RCCEx_PeriphCLKConfig>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003c82:	f7fe fae7 	bl	8002254 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c86:	4b37      	ldr	r3, [pc, #220]	; (8003d64 <HAL_UART_MspInit+0x134>)
 8003c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c8c:	4a35      	ldr	r2, [pc, #212]	; (8003d64 <HAL_UART_MspInit+0x134>)
 8003c8e:	f043 0310 	orr.w	r3, r3, #16
 8003c92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c96:	4b33      	ldr	r3, [pc, #204]	; (8003d64 <HAL_UART_MspInit+0x134>)
 8003c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca4:	4b2f      	ldr	r3, [pc, #188]	; (8003d64 <HAL_UART_MspInit+0x134>)
 8003ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003caa:	4a2e      	ldr	r2, [pc, #184]	; (8003d64 <HAL_UART_MspInit+0x134>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cb4:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <HAL_UART_MspInit+0x134>)
 8003cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003cc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cdc:	2307      	movs	r3, #7
 8003cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	481f      	ldr	r0, [pc, #124]	; (8003d68 <HAL_UART_MspInit+0x138>)
 8003cea:	f005 fabb 	bl	8009264 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003cee:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <HAL_UART_MspInit+0x140>)
 8003cf2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003cf4:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003cf6:	222a      	movs	r2, #42	; 0x2a
 8003cf8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003cfc:	2240      	movs	r2, #64	; 0x40
 8003cfe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d06:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d0c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d14:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003d2c:	480f      	ldr	r0, [pc, #60]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003d2e:	f002 fc51 	bl	80065d4 <HAL_DMA_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003d38:	f7fe fa8c 	bl	8002254 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a0b      	ldr	r2, [pc, #44]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003d40:	67da      	str	r2, [r3, #124]	; 0x7c
 8003d42:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <HAL_UART_MspInit+0x13c>)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2105      	movs	r1, #5
 8003d4c:	2025      	movs	r0, #37	; 0x25
 8003d4e:	f002 f813 	bl	8005d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d52:	2025      	movs	r0, #37	; 0x25
 8003d54:	f002 f82a 	bl	8005dac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003d58:	bf00      	nop
 8003d5a:	37e8      	adds	r7, #232	; 0xe8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40011000 	.word	0x40011000
 8003d64:	58024400 	.word	0x58024400
 8003d68:	58020000 	.word	0x58020000
 8003d6c:	24000b60 	.word	0x24000b60
 8003d70:	40020040 	.word	0x40020040

08003d74 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003d7e:	4bc2      	ldr	r3, [pc, #776]	; (8004088 <voltage_monitor_init+0x314>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003d84:	4bc0      	ldr	r3, [pc, #768]	; (8004088 <voltage_monitor_init+0x314>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003d8a:	4bbf      	ldr	r3, [pc, #764]	; (8004088 <voltage_monitor_init+0x314>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003d90:	4bbd      	ldr	r3, [pc, #756]	; (8004088 <voltage_monitor_init+0x314>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003d96:	4bbc      	ldr	r3, [pc, #752]	; (8004088 <voltage_monitor_init+0x314>)
 8003d98:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d9c:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003d9e:	4bba      	ldr	r3, [pc, #744]	; (8004088 <voltage_monitor_init+0x314>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003da4:	4bb8      	ldr	r3, [pc, #736]	; (8004088 <voltage_monitor_init+0x314>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003daa:	4bb7      	ldr	r3, [pc, #732]	; (8004088 <voltage_monitor_init+0x314>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003db0:	4bb5      	ldr	r3, [pc, #724]	; (8004088 <voltage_monitor_init+0x314>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003db6:	4bb4      	ldr	r3, [pc, #720]	; (8004088 <voltage_monitor_init+0x314>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003dbc:	4bb2      	ldr	r3, [pc, #712]	; (8004088 <voltage_monitor_init+0x314>)
 8003dbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dc2:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003dc4:	4bb0      	ldr	r3, [pc, #704]	; (8004088 <voltage_monitor_init+0x314>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003dca:	4baf      	ldr	r3, [pc, #700]	; (8004088 <voltage_monitor_init+0x314>)
 8003dcc:	2202      	movs	r2, #2
 8003dce:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003dd0:	4bad      	ldr	r3, [pc, #692]	; (8004088 <voltage_monitor_init+0x314>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003dd6:	4bac      	ldr	r3, [pc, #688]	; (8004088 <voltage_monitor_init+0x314>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003ddc:	4baa      	ldr	r3, [pc, #680]	; (8004088 <voltage_monitor_init+0x314>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003de2:	4ba9      	ldr	r3, [pc, #676]	; (8004088 <voltage_monitor_init+0x314>)
 8003de4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003de8:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003dea:	4ba7      	ldr	r3, [pc, #668]	; (8004088 <voltage_monitor_init+0x314>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003df0:	4ba5      	ldr	r3, [pc, #660]	; (8004088 <voltage_monitor_init+0x314>)
 8003df2:	2203      	movs	r2, #3
 8003df4:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003df6:	4ba4      	ldr	r3, [pc, #656]	; (8004088 <voltage_monitor_init+0x314>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003dfc:	4ba2      	ldr	r3, [pc, #648]	; (8004088 <voltage_monitor_init+0x314>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003e04:	4ba0      	ldr	r3, [pc, #640]	; (8004088 <voltage_monitor_init+0x314>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e0a:	4b9f      	ldr	r3, [pc, #636]	; (8004088 <voltage_monitor_init+0x314>)
 8003e0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e10:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003e12:	4b9d      	ldr	r3, [pc, #628]	; (8004088 <voltage_monitor_init+0x314>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003e18:	4b9b      	ldr	r3, [pc, #620]	; (8004088 <voltage_monitor_init+0x314>)
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003e20:	4b99      	ldr	r3, [pc, #612]	; (8004088 <voltage_monitor_init+0x314>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003e28:	4b97      	ldr	r3, [pc, #604]	; (8004088 <voltage_monitor_init+0x314>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003e30:	4b95      	ldr	r3, [pc, #596]	; (8004088 <voltage_monitor_init+0x314>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e36:	4b94      	ldr	r3, [pc, #592]	; (8004088 <voltage_monitor_init+0x314>)
 8003e38:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e3c:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003e3e:	4b92      	ldr	r3, [pc, #584]	; (8004088 <voltage_monitor_init+0x314>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003e44:	4b90      	ldr	r3, [pc, #576]	; (8004088 <voltage_monitor_init+0x314>)
 8003e46:	2205      	movs	r2, #5
 8003e48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003e4c:	4b8e      	ldr	r3, [pc, #568]	; (8004088 <voltage_monitor_init+0x314>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003e54:	4b8c      	ldr	r3, [pc, #560]	; (8004088 <voltage_monitor_init+0x314>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003e5c:	4b8a      	ldr	r3, [pc, #552]	; (8004088 <voltage_monitor_init+0x314>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e62:	4b89      	ldr	r3, [pc, #548]	; (8004088 <voltage_monitor_init+0x314>)
 8003e64:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e68:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003e6a:	4b87      	ldr	r3, [pc, #540]	; (8004088 <voltage_monitor_init+0x314>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003e70:	4b85      	ldr	r3, [pc, #532]	; (8004088 <voltage_monitor_init+0x314>)
 8003e72:	2206      	movs	r2, #6
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003e78:	4b83      	ldr	r3, [pc, #524]	; (8004088 <voltage_monitor_init+0x314>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003e80:	4b81      	ldr	r3, [pc, #516]	; (8004088 <voltage_monitor_init+0x314>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003e88:	4b7f      	ldr	r3, [pc, #508]	; (8004088 <voltage_monitor_init+0x314>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e90:	4b7d      	ldr	r3, [pc, #500]	; (8004088 <voltage_monitor_init+0x314>)
 8003e92:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e96:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003e9a:	4b7b      	ldr	r3, [pc, #492]	; (8004088 <voltage_monitor_init+0x314>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003ea2:	4b79      	ldr	r3, [pc, #484]	; (8004088 <voltage_monitor_init+0x314>)
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003eaa:	4b77      	ldr	r3, [pc, #476]	; (8004088 <voltage_monitor_init+0x314>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003eb2:	4b75      	ldr	r3, [pc, #468]	; (8004088 <voltage_monitor_init+0x314>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003eba:	4b73      	ldr	r3, [pc, #460]	; (8004088 <voltage_monitor_init+0x314>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003ec2:	4b71      	ldr	r3, [pc, #452]	; (8004088 <voltage_monitor_init+0x314>)
 8003ec4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ec8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003ecc:	4b6e      	ldr	r3, [pc, #440]	; (8004088 <voltage_monitor_init+0x314>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003ed4:	4b6c      	ldr	r3, [pc, #432]	; (8004088 <voltage_monitor_init+0x314>)
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003edc:	4b6a      	ldr	r3, [pc, #424]	; (8004088 <voltage_monitor_init+0x314>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003ee4:	4b68      	ldr	r3, [pc, #416]	; (8004088 <voltage_monitor_init+0x314>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003eec:	4b66      	ldr	r3, [pc, #408]	; (8004088 <voltage_monitor_init+0x314>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003ef4:	4b64      	ldr	r3, [pc, #400]	; (8004088 <voltage_monitor_init+0x314>)
 8003ef6:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003efa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003efe:	4b62      	ldr	r3, [pc, #392]	; (8004088 <voltage_monitor_init+0x314>)
 8003f00:	f640 3283 	movw	r2, #2947	; 0xb83
 8003f04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003f08:	4b5f      	ldr	r3, [pc, #380]	; (8004088 <voltage_monitor_init+0x314>)
 8003f0a:	2209      	movs	r2, #9
 8003f0c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003f10:	4b5d      	ldr	r3, [pc, #372]	; (8004088 <voltage_monitor_init+0x314>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003f18:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <voltage_monitor_init+0x314>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003f20:	4b59      	ldr	r3, [pc, #356]	; (8004088 <voltage_monitor_init+0x314>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003f28:	4b57      	ldr	r3, [pc, #348]	; (8004088 <voltage_monitor_init+0x314>)
 8003f2a:	f640 7245 	movw	r2, #3909	; 0xf45
 8003f2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003f32:	4b55      	ldr	r3, [pc, #340]	; (8004088 <voltage_monitor_init+0x314>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003f3a:	4b53      	ldr	r3, [pc, #332]	; (8004088 <voltage_monitor_init+0x314>)
 8003f3c:	220a      	movs	r2, #10
 8003f3e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003f42:	4b51      	ldr	r3, [pc, #324]	; (8004088 <voltage_monitor_init+0x314>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003f4a:	4b4f      	ldr	r3, [pc, #316]	; (8004088 <voltage_monitor_init+0x314>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003f52:	4b4d      	ldr	r3, [pc, #308]	; (8004088 <voltage_monitor_init+0x314>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003f5a:	4b4b      	ldr	r3, [pc, #300]	; (8004088 <voltage_monitor_init+0x314>)
 8003f5c:	f640 7245 	movw	r2, #3909	; 0xf45
 8003f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003f64:	4b48      	ldr	r3, [pc, #288]	; (8004088 <voltage_monitor_init+0x314>)
 8003f66:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003f6a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003f6e:	4b46      	ldr	r3, [pc, #280]	; (8004088 <voltage_monitor_init+0x314>)
 8003f70:	220b      	movs	r2, #11
 8003f72:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003f76:	4b44      	ldr	r3, [pc, #272]	; (8004088 <voltage_monitor_init+0x314>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003f7e:	4b42      	ldr	r3, [pc, #264]	; (8004088 <voltage_monitor_init+0x314>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003f86:	4b40      	ldr	r3, [pc, #256]	; (8004088 <voltage_monitor_init+0x314>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003f8e:	4b3e      	ldr	r3, [pc, #248]	; (8004088 <voltage_monitor_init+0x314>)
 8003f90:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003f94:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003f98:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <voltage_monitor_init+0x314>)
 8003f9a:	f640 6276 	movw	r2, #3702	; 0xe76
 8003f9e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003fa2:	4b39      	ldr	r3, [pc, #228]	; (8004088 <voltage_monitor_init+0x314>)
 8003fa4:	220c      	movs	r2, #12
 8003fa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003faa:	4b37      	ldr	r3, [pc, #220]	; (8004088 <voltage_monitor_init+0x314>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003fb2:	4b35      	ldr	r3, [pc, #212]	; (8004088 <voltage_monitor_init+0x314>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003fba:	4b33      	ldr	r3, [pc, #204]	; (8004088 <voltage_monitor_init+0x314>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <voltage_monitor_init+0x314>)
 8003fc4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003fc8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003fcc:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <voltage_monitor_init+0x314>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <voltage_monitor_init+0x314>)
 8003fd6:	220d      	movs	r2, #13
 8003fd8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003fdc:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <voltage_monitor_init+0x314>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003fe4:	4b28      	ldr	r3, [pc, #160]	; (8004088 <voltage_monitor_init+0x314>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003fec:	4b26      	ldr	r3, [pc, #152]	; (8004088 <voltage_monitor_init+0x314>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003ff4:	4b24      	ldr	r3, [pc, #144]	; (8004088 <voltage_monitor_init+0x314>)
 8003ff6:	f640 7238 	movw	r2, #3896	; 0xf38
 8003ffa:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003ffe:	4b22      	ldr	r3, [pc, #136]	; (8004088 <voltage_monitor_init+0x314>)
 8004000:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8004004:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8004008:	4b1f      	ldr	r3, [pc, #124]	; (8004088 <voltage_monitor_init+0x314>)
 800400a:	220e      	movs	r2, #14
 800400c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <voltage_monitor_init+0x314>)
 8004012:	2200      	movs	r2, #0
 8004014:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <voltage_monitor_init+0x314>)
 800401a:	2200      	movs	r2, #0
 800401c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <voltage_monitor_init+0x314>)
 8004022:	2200      	movs	r2, #0
 8004024:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <voltage_monitor_init+0x314>)
 800402a:	f640 7245 	movw	r2, #3909	; 0xf45
 800402e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <voltage_monitor_init+0x314>)
 8004034:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8004038:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <voltage_monitor_init+0x314>)
 800403e:	220f      	movs	r2, #15
 8004040:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <voltage_monitor_init+0x314>)
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <voltage_monitor_init+0x314>)
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <voltage_monitor_init+0x314>)
 8004056:	2200      	movs	r2, #0
 8004058:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <voltage_monitor_init+0x314>)
 800405e:	f241 0264 	movw	r2, #4196	; 0x1064
 8004062:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <voltage_monitor_init+0x314>)
 8004068:	2200      	movs	r2, #0
 800406a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <voltage_monitor_init+0x314>)
 8004070:	2210      	movs	r2, #16
 8004072:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8004076:	4b04      	ldr	r3, [pc, #16]	; (8004088 <voltage_monitor_init+0x314>)
 8004078:	2200      	movs	r2, #0
 800407a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 800407e:	4b02      	ldr	r3, [pc, #8]	; (8004088 <voltage_monitor_init+0x314>)
 8004080:	2200      	movs	r2, #0
 8004082:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8004086:	e001      	b.n	800408c <voltage_monitor_init+0x318>
 8004088:	24000bd8 	.word	0x24000bd8
	rail_monitor[RAIL_n800v].data = 0;
 800408c:	4b17      	ldr	r3, [pc, #92]	; (80040ec <voltage_monitor_init+0x378>)
 800408e:	2200      	movs	r2, #0
 8004090:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8004094:	4b15      	ldr	r3, [pc, #84]	; (80040ec <voltage_monitor_init+0x378>)
 8004096:	f640 5208 	movw	r2, #3336	; 0xd08
 800409a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 800409e:	4b13      	ldr	r3, [pc, #76]	; (80040ec <voltage_monitor_init+0x378>)
 80040a0:	f640 32ca 	movw	r2, #3018	; 0xbca
 80040a4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80040a8:	4b10      	ldr	r3, [pc, #64]	; (80040ec <voltage_monitor_init+0x378>)
 80040aa:	2211      	movs	r2, #17
 80040ac:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 80040b0:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <voltage_monitor_init+0x378>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <voltage_monitor_init+0x378>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <voltage_monitor_init+0x378>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80040c8:	4b08      	ldr	r3, [pc, #32]	; (80040ec <voltage_monitor_init+0x378>)
 80040ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80040ce:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <voltage_monitor_init+0x378>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	71fb      	strb	r3, [r7, #7]

	return status;
 80040de:	79fb      	ldrb	r3, [r7, #7]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	24000bd8 	.word	0x24000bd8

080040f0 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	460a      	mov	r2, r1
 80040fa:	71fb      	strb	r3, [r7, #7]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8004104:	79fa      	ldrb	r2, [r7, #7]
 8004106:	4909      	ldr	r1, [pc, #36]	; (800412c <set_rail_monitor_enable+0x3c>)
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	440b      	add	r3, r1
 8004112:	3302      	adds	r3, #2
 8004114:	79ba      	ldrb	r2, [r7, #6]
 8004116:	701a      	strb	r2, [r3, #0]
	status = 1;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]

	return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	24000bd8 	.word	0x24000bd8

08004130 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
	return rail_monitor;
 8004134:	4b02      	ldr	r3, [pc, #8]	; (8004140 <get_rail_monitor+0x10>)
}
 8004136:	4618      	mov	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	24000bd8 	.word	0x24000bd8

08004144 <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
	uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 800414e:	2014      	movs	r0, #20
 8004150:	f012 fc36 	bl	80169c0 <malloc>
 8004154:	4603      	mov	r3, r0
 8004156:	60bb      	str	r3, [r7, #8]
	uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8004158:	2008      	movs	r0, #8
 800415a:	f012 fc31 	bl	80169c0 <malloc>
 800415e:	4603      	mov	r3, r0
 8004160:	607b      	str	r3, [r7, #4]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8004162:	2008      	movs	r0, #8
 8004164:	f012 fc2c 	bl	80169c0 <malloc>
 8004168:	4603      	mov	r3, r0
 800416a:	603b      	str	r3, [r7, #0]

	sample_hk_i2c(hk_i2c);
 800416c:	6838      	ldr	r0, [r7, #0]
 800416e:	f7fe fc9b 	bl	8002aa8 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8004172:	68b8      	ldr	r0, [r7, #8]
 8004174:	f7fe fcc8 	bl	8002b08 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fe fd17 	bl	8002bac <sample_hk_adc3>

	rail_monitor[RAIL_vsense].data = hk_adc3[1];
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	885a      	ldrh	r2, [r3, #2]
 8004182:	4b36      	ldr	r3, [pc, #216]	; (800425c <set_rail_monitor+0x118>)
 8004184:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vrefint].data = hk_adc3[0];
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	881a      	ldrh	r2, [r3, #0]
 800418a:	4b34      	ldr	r3, [pc, #208]	; (800425c <set_rail_monitor+0x118>)
 800418c:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_TEMP1].data = hk_i2c[0];
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004194:	b29a      	uxth	r2, r3
 8004196:	4b31      	ldr	r3, [pc, #196]	; (800425c <set_rail_monitor+0x118>)
 8004198:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP2].data = hk_i2c[1];
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	3302      	adds	r3, #2
 800419e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	4b2d      	ldr	r3, [pc, #180]	; (800425c <set_rail_monitor+0x118>)
 80041a6:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP3].data = hk_i2c[2];
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	3304      	adds	r3, #4
 80041ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	4b2a      	ldr	r3, [pc, #168]	; (800425c <set_rail_monitor+0x118>)
 80041b4:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP4].data = hk_i2c[3];
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	3306      	adds	r3, #6
 80041ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041be:	b29a      	uxth	r2, r3
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <set_rail_monitor+0x118>)
 80041c2:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_busvmon].data = hk_adc1[0];
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	881a      	ldrh	r2, [r3, #0]
 80041c8:	4b24      	ldr	r3, [pc, #144]	; (800425c <set_rail_monitor+0x118>)
 80041ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busimon].data = hk_adc1[1];
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	885a      	ldrh	r2, [r3, #2]
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <set_rail_monitor+0x118>)
 80041d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_2v5].data = hk_adc1[2];
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	889a      	ldrh	r2, [r3, #4]
 80041dc:	4b1f      	ldr	r3, [pc, #124]	; (800425c <set_rail_monitor+0x118>)
 80041de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_3v3].data = hk_adc3[3];
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	88da      	ldrh	r2, [r3, #6]
 80041e6:	4b1d      	ldr	r3, [pc, #116]	; (800425c <set_rail_monitor+0x118>)
 80041e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_5v].data = hk_adc1[6];
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	899a      	ldrh	r2, [r3, #12]
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <set_rail_monitor+0x118>)
 80041f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_n3v3].data = hk_adc1[3];
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	88da      	ldrh	r2, [r3, #6]
 80041fa:	4b18      	ldr	r3, [pc, #96]	; (800425c <set_rail_monitor+0x118>)
 80041fc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n5v].data = hk_adc3[2];
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	889a      	ldrh	r2, [r3, #4]
 8004204:	4b15      	ldr	r3, [pc, #84]	; (800425c <set_rail_monitor+0x118>)
 8004206:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_15v].data = hk_adc1[7];
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	89da      	ldrh	r2, [r3, #14]
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <set_rail_monitor+0x118>)
 8004210:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_5vref].data = hk_adc1[8];
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	8a1a      	ldrh	r2, [r3, #16]
 8004218:	4b10      	ldr	r3, [pc, #64]	; (800425c <set_rail_monitor+0x118>)
 800421a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_n200v].data = hk_adc1[4];
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	891a      	ldrh	r2, [r3, #8]
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <set_rail_monitor+0x118>)
 8004224:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n800v].data = hk_adc1[5];
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	895a      	ldrh	r2, [r3, #10]
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <set_rail_monitor+0x118>)
 800422e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_TMP1].data = hk_adc1[9];
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	8a5a      	ldrh	r2, [r3, #18]
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <set_rail_monitor+0x118>)
 8004238:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	free(hk_adc1);
 800423c:	68b8      	ldr	r0, [r7, #8]
 800423e:	f012 fbc7 	bl	80169d0 <free>
	free(hk_adc3);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f012 fbc4 	bl	80169d0 <free>
	free(hk_i2c);
 8004248:	6838      	ldr	r0, [r7, #0]
 800424a:	f012 fbc1 	bl	80169d0 <free>

	status = 1;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]

	return status;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	24000bd8 	.word	0x24000bd8

08004260 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 800426e:	89fb      	ldrh	r3, [r7, #14]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	429a      	cmp	r2, r3
 8004274:	db05      	blt.n	8004282 <in_range+0x22>
 8004276:	89fb      	ldrh	r3, [r7, #14]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	429a      	cmp	r2, r3
 800427c:	dc01      	bgt.n	8004282 <in_range+0x22>
		return 1;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <in_range+0x24>
	}
	return 0;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004294:	f7ff f84a 	bl	800332c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004298:	480c      	ldr	r0, [pc, #48]	; (80042cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800429a:	490d      	ldr	r1, [pc, #52]	; (80042d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800429c:	4a0d      	ldr	r2, [pc, #52]	; (80042d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800429e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042a0:	e002      	b.n	80042a8 <LoopCopyDataInit>

080042a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042a6:	3304      	adds	r3, #4

080042a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042ac:	d3f9      	bcc.n	80042a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042b0:	4c0a      	ldr	r4, [pc, #40]	; (80042dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80042b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042b4:	e001      	b.n	80042ba <LoopFillZerobss>

080042b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b8:	3204      	adds	r2, #4

080042ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042bc:	d3fb      	bcc.n	80042b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042be:	f012 fb5b 	bl	8016978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042c2:	f7fd fde5 	bl	8001e90 <main>
  bx  lr
 80042c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80042cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80042d0:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 80042d4:	080178fc 	.word	0x080178fc
  ldr r2, =_sbss
 80042d8:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 80042dc:	240055f0 	.word	0x240055f0

080042e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042e0:	e7fe      	b.n	80042e0 <ADC3_IRQHandler>
	...

080042e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042ea:	2003      	movs	r0, #3
 80042ec:	f001 fd39 	bl	8005d62 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042f0:	f006 fdf0 	bl	800aed4 <HAL_RCC_GetSysClockFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <HAL_Init+0x68>)
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	4913      	ldr	r1, [pc, #76]	; (8004350 <HAL_Init+0x6c>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
 800430c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <HAL_Init+0x68>)
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <HAL_Init+0x6c>)
 8004318:	5cd3      	ldrb	r3, [r2, r3]
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
 8004324:	4a0b      	ldr	r2, [pc, #44]	; (8004354 <HAL_Init+0x70>)
 8004326:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004328:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <HAL_Init+0x74>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800432e:	2005      	movs	r0, #5
 8004330:	f7fe fe2c 	bl	8002f8c <HAL_InitTick>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e002      	b.n	8004344 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800433e:	f7fe fe07 	bl	8002f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	58024400 	.word	0x58024400
 8004350:	08017848 	.word	0x08017848
 8004354:	2400008c 	.word	0x2400008c
 8004358:	24000088 	.word	0x24000088

0800435c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_IncTick+0x20>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_IncTick+0x24>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4413      	add	r3, r2
 800436c:	4a04      	ldr	r2, [pc, #16]	; (8004380 <HAL_IncTick+0x24>)
 800436e:	6013      	str	r3, [r2, #0]
}
 8004370:	bf00      	nop
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	24000094 	.word	0x24000094
 8004380:	24000c8c 	.word	0x24000c8c

08004384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return uwTick;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_GetTick+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	24000c8c 	.word	0x24000c8c

0800439c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <HAL_GetREVID+0x14>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	0c1b      	lsrs	r3, r3, #16
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	5c001000 	.word	0x5c001000

080043b4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80043be:	4b07      	ldr	r3, [pc, #28]	; (80043dc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	401a      	ands	r2, r3
 80043c8:	4904      	ldr	r1, [pc, #16]	; (80043dc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	604b      	str	r3, [r1, #4]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	58000400 	.word	0x58000400

080043e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	609a      	str	r2, [r3, #8]
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3360      	adds	r3, #96	; 0x60
 800445a:	461a      	mov	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	430b      	orrs	r3, r1
 8004476:	431a      	orrs	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	431a      	orrs	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	611a      	str	r2, [r3, #16]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3360      	adds	r3, #96	; 0x60
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	431a      	orrs	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	601a      	str	r2, [r3, #0]
  }
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004516:	b480      	push	{r7}
 8004518:	b087      	sub	sp, #28
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3330      	adds	r3, #48	; 0x30
 8004526:	461a      	mov	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	0a1b      	lsrs	r3, r3, #8
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	4413      	add	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	211f      	movs	r1, #31
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	401a      	ands	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	f003 011f 	and.w	r1, r3, #31
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	fa01 f303 	lsl.w	r3, r1, r3
 800455c:	431a      	orrs	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f023 0203 	bic.w	r2, r3, #3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60da      	str	r2, [r3, #12]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3314      	adds	r3, #20
 80045a4:	461a      	mov	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	0e5b      	lsrs	r3, r3, #25
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	4413      	add	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	0d1b      	lsrs	r3, r3, #20
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2107      	movs	r1, #7
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	401a      	ands	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	0d1b      	lsrs	r3, r3, #20
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	431a      	orrs	r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004604:	43db      	mvns	r3, r3
 8004606:	401a      	ands	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0318 	and.w	r3, r3, #24
 800460e:	4908      	ldr	r1, [pc, #32]	; (8004630 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004610:	40d9      	lsrs	r1, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	400b      	ands	r3, r1
 8004616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800461a:	431a      	orrs	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	000fffff 	.word	0x000fffff

08004634 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 031f 	and.w	r3, r3, #31
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <LL_ADC_DisableDeepPowerDown+0x20>)
 800465e:	4013      	ands	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6093      	str	r3, [r2, #8]
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	5fffffc0 	.word	0x5fffffc0

08004674 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004688:	d101      	bne.n	800468e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	6fffffc0 	.word	0x6fffffc0

080046c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d8:	d101      	bne.n	80046de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <LL_ADC_Enable+0x24>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	f043 0201 	orr.w	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	7fffffc0 	.word	0x7fffffc0

08004714 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <LL_ADC_Disable+0x24>)
 8004722:	4013      	ands	r3, r2
 8004724:	f043 0202 	orr.w	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	7fffffc0 	.word	0x7fffffc0

0800473c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <LL_ADC_IsEnabled+0x18>
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <LL_ADC_IsEnabled+0x1a>
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	d101      	bne.n	800477a <LL_ADC_IsDisableOngoing+0x18>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <LL_ADC_IsDisableOngoing+0x1a>
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <LL_ADC_REG_StartConversion+0x24>)
 8004796:	4013      	ands	r3, r2
 8004798:	f043 0204 	orr.w	r2, r3, #4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	7fffffc0 	.word	0x7fffffc0

080047b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d101      	bne.n	80047c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d101      	bne.n	80047ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004808:	2300      	movs	r3, #0
 800480a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e18f      	b.n	8004b36 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fc f891 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ff19 	bl	8004674 <LL_ADC_IsDeepPowerDownEnabled>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff feff 	bl	8004650 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff ff34 	bl	80046c4 <LL_ADC_IsInternalRegulatorEnabled>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d114      	bne.n	800488c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff ff18 	bl	800469c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800486c:	4b87      	ldr	r3, [pc, #540]	; (8004a8c <HAL_ADC_Init+0x290>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	4a87      	ldr	r2, [pc, #540]	; (8004a90 <HAL_ADC_Init+0x294>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	099b      	lsrs	r3, r3, #6
 800487a:	3301      	adds	r3, #1
 800487c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800487e:	e002      	b.n	8004886 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	3b01      	subs	r3, #1
 8004884:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f9      	bne.n	8004880 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff ff17 	bl	80046c4 <LL_ADC_IsInternalRegulatorEnabled>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10d      	bne.n	80048b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f043 0210 	orr.w	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f043 0201 	orr.w	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff ff77 	bl	80047b0 <LL_ADC_REG_IsConversionOngoing>
 80048c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f040 8129 	bne.w	8004b24 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 8125 	bne.w	8004b24 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048e2:	f043 0202 	orr.w	r2, r3, #2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff ff24 	bl	800473c <LL_ADC_IsEnabled>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d136      	bne.n	8004968 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a65      	ldr	r2, [pc, #404]	; (8004a94 <HAL_ADC_Init+0x298>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_ADC_Init+0x112>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a63      	ldr	r2, [pc, #396]	; (8004a98 <HAL_ADC_Init+0x29c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d10e      	bne.n	800492c <HAL_ADC_Init+0x130>
 800490e:	4861      	ldr	r0, [pc, #388]	; (8004a94 <HAL_ADC_Init+0x298>)
 8004910:	f7ff ff14 	bl	800473c <LL_ADC_IsEnabled>
 8004914:	4604      	mov	r4, r0
 8004916:	4860      	ldr	r0, [pc, #384]	; (8004a98 <HAL_ADC_Init+0x29c>)
 8004918:	f7ff ff10 	bl	800473c <LL_ADC_IsEnabled>
 800491c:	4603      	mov	r3, r0
 800491e:	4323      	orrs	r3, r4
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e008      	b.n	800493e <HAL_ADC_Init+0x142>
 800492c:	485b      	ldr	r0, [pc, #364]	; (8004a9c <HAL_ADC_Init+0x2a0>)
 800492e:	f7ff ff05 	bl	800473c <LL_ADC_IsEnabled>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d012      	beq.n	8004968 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a53      	ldr	r2, [pc, #332]	; (8004a94 <HAL_ADC_Init+0x298>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_ADC_Init+0x15a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a51      	ldr	r2, [pc, #324]	; (8004a98 <HAL_ADC_Init+0x29c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d101      	bne.n	800495a <HAL_ADC_Init+0x15e>
 8004956:	4a52      	ldr	r2, [pc, #328]	; (8004aa0 <HAL_ADC_Init+0x2a4>)
 8004958:	e000      	b.n	800495c <HAL_ADC_Init+0x160>
 800495a:	4a52      	ldr	r2, [pc, #328]	; (8004aa4 <HAL_ADC_Init+0x2a8>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f7ff fd3c 	bl	80043e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004968:	f7ff fd18 	bl	800439c <HAL_GetREVID>
 800496c:	4603      	mov	r3, r0
 800496e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004972:	4293      	cmp	r3, r2
 8004974:	d914      	bls.n	80049a0 <HAL_ADC_Init+0x1a4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b10      	cmp	r3, #16
 800497c:	d110      	bne.n	80049a0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	7d5b      	ldrb	r3, [r3, #21]
 8004982:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004988:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800498e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	7f1b      	ldrb	r3, [r3, #28]
 8004994:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004996:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004998:	f043 030c 	orr.w	r3, r3, #12
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	e00d      	b.n	80049bc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	7d5b      	ldrb	r3, [r3, #21]
 80049a4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049aa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80049b0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	7f1b      	ldrb	r3, [r3, #28]
 80049b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	7f1b      	ldrb	r3, [r3, #28]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d106      	bne.n	80049d2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	045b      	lsls	r3, r3, #17
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	4b2c      	ldr	r3, [pc, #176]	; (8004aa8 <HAL_ADC_Init+0x2ac>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	69b9      	ldr	r1, [r7, #24]
 80049fe:	430b      	orrs	r3, r1
 8004a00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fed2 	bl	80047b0 <LL_ADC_REG_IsConversionOngoing>
 8004a0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fedf 	bl	80047d6 <LL_ADC_INJ_IsConversionOngoing>
 8004a18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d15f      	bne.n	8004ae0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d15c      	bne.n	8004ae0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	7d1b      	ldrb	r3, [r3, #20]
 8004a2a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <HAL_ADC_Init+0x2b0>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	69b9      	ldr	r1, [r7, #24]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d130      	bne.n	8004ab4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_ADC_Init+0x2b4>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a66:	3a01      	subs	r2, #1
 8004a68:	0411      	lsls	r1, r2, #16
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a6e:	4311      	orrs	r1, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a74:	4311      	orrs	r1, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	611a      	str	r2, [r3, #16]
 8004a88:	e01c      	b.n	8004ac4 <HAL_ADC_Init+0x2c8>
 8004a8a:	bf00      	nop
 8004a8c:	24000088 	.word	0x24000088
 8004a90:	053e2d63 	.word	0x053e2d63
 8004a94:	40022000 	.word	0x40022000
 8004a98:	40022100 	.word	0x40022100
 8004a9c:	58026000 	.word	0x58026000
 8004aa0:	40022300 	.word	0x40022300
 8004aa4:	58026300 	.word	0x58026300
 8004aa8:	fff0c003 	.word	0xfff0c003
 8004aac:	ffffbffc 	.word	0xffffbffc
 8004ab0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fdec 	bl	80056b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d10c      	bne.n	8004b02 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f023 010f 	bic.w	r1, r3, #15
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	1e5a      	subs	r2, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
 8004b00:	e007      	b.n	8004b12 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 020f 	bic.w	r2, r2, #15
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	f023 0303 	bic.w	r3, r3, #3
 8004b1a:	f043 0201 	orr.w	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
 8004b22:	e007      	b.n	8004b34 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b28:	f043 0210 	orr.w	r2, r3, #16
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3724      	adds	r7, #36	; 0x24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd90      	pop	{r4, r7, pc}
 8004b3e:	bf00      	nop

08004b40 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a55      	ldr	r2, [pc, #340]	; (8004ca8 <HAL_ADC_Start_DMA+0x168>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_ADC_Start_DMA+0x20>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a54      	ldr	r2, [pc, #336]	; (8004cac <HAL_ADC_Start_DMA+0x16c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d101      	bne.n	8004b64 <HAL_ADC_Start_DMA+0x24>
 8004b60:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <HAL_ADC_Start_DMA+0x170>)
 8004b62:	e000      	b.n	8004b66 <HAL_ADC_Start_DMA+0x26>
 8004b64:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <HAL_ADC_Start_DMA+0x174>)
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fd64 	bl	8004634 <LL_ADC_GetMultimode>
 8004b6c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff fe1c 	bl	80047b0 <LL_ADC_REG_IsConversionOngoing>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 808c 	bne.w	8004c98 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_ADC_Start_DMA+0x4e>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e087      	b.n	8004c9e <HAL_ADC_Start_DMA+0x15e>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d002      	beq.n	8004ba8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b09      	cmp	r3, #9
 8004ba6:	d170      	bne.n	8004c8a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fc07 	bl	80053bc <ADC_Enable>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d163      	bne.n	8004c80 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bbc:	4b3e      	ldr	r3, [pc, #248]	; (8004cb8 <HAL_ADC_Start_DMA+0x178>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a37      	ldr	r2, [pc, #220]	; (8004cac <HAL_ADC_Start_DMA+0x16c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d002      	beq.n	8004bd8 <HAL_ADC_Start_DMA+0x98>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	e000      	b.n	8004bda <HAL_ADC_Start_DMA+0x9a>
 8004bd8:	4b33      	ldr	r3, [pc, #204]	; (8004ca8 <HAL_ADC_Start_DMA+0x168>)
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d002      	beq.n	8004be8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c04:	f023 0206 	bic.w	r2, r3, #6
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c0c:	e002      	b.n	8004c14 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c18:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <HAL_ADC_Start_DMA+0x17c>)
 8004c1a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c20:	4a27      	ldr	r2, [pc, #156]	; (8004cc0 <HAL_ADC_Start_DMA+0x180>)
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c28:	4a26      	ldr	r2, [pc, #152]	; (8004cc4 <HAL_ADC_Start_DMA+0x184>)
 8004c2a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	221c      	movs	r2, #28
 8004c32:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0210 	orr.w	r2, r2, #16
 8004c4a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f7ff fc89 	bl	800456e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3340      	adds	r3, #64	; 0x40
 8004c66:	4619      	mov	r1, r3
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f002 f80e 	bl	8006c8c <HAL_DMA_Start_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fd85 	bl	8004788 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004c7e:	e00d      	b.n	8004c9c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004c88:	e008      	b.n	8004c9c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c96:	e001      	b.n	8004c9c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40022000 	.word	0x40022000
 8004cac:	40022100 	.word	0x40022100
 8004cb0:	40022300 	.word	0x40022300
 8004cb4:	58026300 	.word	0x58026300
 8004cb8:	fffff0fe 	.word	0xfffff0fe
 8004cbc:	0800558f 	.word	0x0800558f
 8004cc0:	08005667 	.word	0x08005667
 8004cc4:	08005683 	.word	0x08005683

08004cc8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b0a1      	sub	sp, #132	; 0x84
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a65      	ldr	r2, [pc, #404]	; (8004eb4 <HAL_ADC_ConfigChannel+0x1b0>)
 8004d1e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x2a>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e32e      	b.n	800538c <HAL_ADC_ConfigChannel+0x688>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fd38 	bl	80047b0 <LL_ADC_REG_IsConversionOngoing>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 8313 	bne.w	800536e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	db2c      	blt.n	8004daa <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d108      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x6a>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0e9b      	lsrs	r3, r3, #26
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	2201      	movs	r2, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	e016      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x98>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004d86:	2320      	movs	r3, #32
 8004d88:	e003      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d8c:	fab3 f383 	clz	r3, r3
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2201      	movs	r2, #1
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	69d1      	ldr	r1, [r2, #28]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	430b      	orrs	r3, r1
 8004da8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7ff fbad 	bl	8004516 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fcf5 	bl	80047b0 <LL_ADC_REG_IsConversionOngoing>
 8004dc6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fd02 	bl	80047d6 <LL_ADC_INJ_IsConversionOngoing>
 8004dd2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f040 80b8 	bne.w	8004f4c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f040 80b4 	bne.w	8004f4c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6819      	ldr	r1, [r3, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	461a      	mov	r2, r3
 8004df2:	f7ff fbcf 	bl	8004594 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004df6:	4b30      	ldr	r3, [pc, #192]	; (8004eb8 <HAL_ADC_ConfigChannel+0x1b4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e02:	d10b      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x118>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	e01d      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x154>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10b      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x13e>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	089b      	lsrs	r3, r3, #2
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	e00a      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x154>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	089b      	lsrs	r3, r3, #2
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d02c      	beq.n	8004ebc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6919      	ldr	r1, [r3, #16]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e70:	f7ff faea 	bl	8004448 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6919      	ldr	r1, [r3, #16]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	7e5b      	ldrb	r3, [r3, #25]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d102      	bne.n	8004e8a <HAL_ADC_ConfigChannel+0x186>
 8004e84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e88:	e000      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x188>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f7ff fb14 	bl	80044ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6919      	ldr	r1, [r3, #16]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	7e1b      	ldrb	r3, [r3, #24]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d102      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x1a4>
 8004ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ea6:	e000      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x1a6>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7ff faec 	bl	8004488 <LL_ADC_SetDataRightShift>
 8004eb0:	e04c      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x248>
 8004eb2:	bf00      	nop
 8004eb4:	47ff0000 	.word	0x47ff0000
 8004eb8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	069b      	lsls	r3, r3, #26
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d107      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ede:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	069b      	lsls	r3, r3, #26
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d107      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f02:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	069b      	lsls	r3, r3, #26
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d107      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f26:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	069b      	lsls	r3, r3, #26
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d107      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f4a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fbf3 	bl	800473c <LL_ADC_IsEnabled>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 8211 	bne.w	8005380 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f7ff fb3e 	bl	80045ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4aa1      	ldr	r2, [pc, #644]	; (80051fc <HAL_ADC_ConfigChannel+0x4f8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	f040 812e 	bne.w	80051d8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10b      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x2a0>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	0e9b      	lsrs	r3, r3, #26
 8004f92:	3301      	adds	r3, #1
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	2b09      	cmp	r3, #9
 8004f9a:	bf94      	ite	ls
 8004f9c:	2301      	movls	r3, #1
 8004f9e:	2300      	movhi	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	e019      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x2d4>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fac:	fa93 f3a3 	rbit	r3, r3
 8004fb0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	e003      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	2b09      	cmp	r3, #9
 8004fd0:	bf94      	ite	ls
 8004fd2:	2301      	movls	r3, #1
 8004fd4:	2300      	movhi	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d079      	beq.n	80050d0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d107      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x2f4>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	0e9b      	lsrs	r3, r3, #26
 8004fee:	3301      	adds	r3, #1
 8004ff0:	069b      	lsls	r3, r3, #26
 8004ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ff6:	e015      	b.n	8005024 <HAL_ADC_ConfigChannel+0x320>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005000:	fa93 f3a3 	rbit	r3, r3
 8005004:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005008:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800500a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8005010:	2320      	movs	r3, #32
 8005012:	e003      	b.n	800501c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8005014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005016:	fab3 f383 	clz	r3, r3
 800501a:	b2db      	uxtb	r3, r3
 800501c:	3301      	adds	r3, #1
 800501e:	069b      	lsls	r3, r3, #26
 8005020:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <HAL_ADC_ConfigChannel+0x340>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	0e9b      	lsrs	r3, r3, #26
 8005036:	3301      	adds	r3, #1
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f303 	lsl.w	r3, r1, r3
 8005042:	e017      	b.n	8005074 <HAL_ADC_ConfigChannel+0x370>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504c:	fa93 f3a3 	rbit	r3, r3
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005054:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800505c:	2320      	movs	r3, #32
 800505e:	e003      	b.n	8005068 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8005060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005062:	fab3 f383 	clz	r3, r3
 8005066:	b2db      	uxtb	r3, r3
 8005068:	3301      	adds	r3, #1
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	2101      	movs	r1, #1
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	ea42 0103 	orr.w	r1, r2, r3
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <HAL_ADC_ConfigChannel+0x396>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	0e9b      	lsrs	r3, r3, #26
 800508a:	3301      	adds	r3, #1
 800508c:	f003 021f 	and.w	r2, r3, #31
 8005090:	4613      	mov	r3, r2
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	4413      	add	r3, r2
 8005096:	051b      	lsls	r3, r3, #20
 8005098:	e018      	b.n	80050cc <HAL_ADC_ConfigChannel+0x3c8>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	fa93 f3a3 	rbit	r3, r3
 80050a6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80050ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80050b2:	2320      	movs	r3, #32
 80050b4:	e003      	b.n	80050be <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	fab3 f383 	clz	r3, r3
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	3301      	adds	r3, #1
 80050c0:	f003 021f 	and.w	r2, r3, #31
 80050c4:	4613      	mov	r3, r2
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4413      	add	r3, r2
 80050ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050cc:	430b      	orrs	r3, r1
 80050ce:	e07e      	b.n	80051ce <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d107      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x3e8>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	0e9b      	lsrs	r3, r3, #26
 80050e2:	3301      	adds	r3, #1
 80050e4:	069b      	lsls	r3, r3, #26
 80050e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050ea:	e015      	b.n	8005118 <HAL_ADC_ConfigChannel+0x414>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	fa93 f3a3 	rbit	r3, r3
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8005104:	2320      	movs	r3, #32
 8005106:	e003      	b.n	8005110 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	fab3 f383 	clz	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	3301      	adds	r3, #1
 8005112:	069b      	lsls	r3, r3, #26
 8005114:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <HAL_ADC_ConfigChannel+0x434>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	0e9b      	lsrs	r3, r3, #26
 800512a:	3301      	adds	r3, #1
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	e017      	b.n	8005168 <HAL_ADC_ConfigChannel+0x464>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	fa93 f3a3 	rbit	r3, r3
 8005144:	61bb      	str	r3, [r7, #24]
  return result;
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8005150:	2320      	movs	r3, #32
 8005152:	e003      	b.n	800515c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	fab3 f383 	clz	r3, r3
 800515a:	b2db      	uxtb	r3, r3
 800515c:	3301      	adds	r3, #1
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2101      	movs	r1, #1
 8005164:	fa01 f303 	lsl.w	r3, r1, r3
 8005168:	ea42 0103 	orr.w	r1, r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10d      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x490>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0e9b      	lsrs	r3, r3, #26
 800517e:	3301      	adds	r3, #1
 8005180:	f003 021f 	and.w	r2, r3, #31
 8005184:	4613      	mov	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4413      	add	r3, r2
 800518a:	3b1e      	subs	r3, #30
 800518c:	051b      	lsls	r3, r3, #20
 800518e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005192:	e01b      	b.n	80051cc <HAL_ADC_ConfigChannel+0x4c8>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	fa93 f3a3 	rbit	r3, r3
 80051a0:	60fb      	str	r3, [r7, #12]
  return result;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80051ac:	2320      	movs	r3, #32
 80051ae:	e003      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	fab3 f383 	clz	r3, r3
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	3301      	adds	r3, #1
 80051ba:	f003 021f 	and.w	r2, r3, #31
 80051be:	4613      	mov	r3, r2
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	4413      	add	r3, r2
 80051c4:	3b1e      	subs	r3, #30
 80051c6:	051b      	lsls	r3, r3, #20
 80051c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051cc:	430b      	orrs	r3, r1
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	6892      	ldr	r2, [r2, #8]
 80051d2:	4619      	mov	r1, r3
 80051d4:	f7ff f9de 	bl	8004594 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f280 80cf 	bge.w	8005380 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a06      	ldr	r2, [pc, #24]	; (8005200 <HAL_ADC_ConfigChannel+0x4fc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_ADC_ConfigChannel+0x4f2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a04      	ldr	r2, [pc, #16]	; (8005204 <HAL_ADC_ConfigChannel+0x500>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10a      	bne.n	800520c <HAL_ADC_ConfigChannel+0x508>
 80051f6:	4b04      	ldr	r3, [pc, #16]	; (8005208 <HAL_ADC_ConfigChannel+0x504>)
 80051f8:	e009      	b.n	800520e <HAL_ADC_ConfigChannel+0x50a>
 80051fa:	bf00      	nop
 80051fc:	47ff0000 	.word	0x47ff0000
 8005200:	40022000 	.word	0x40022000
 8005204:	40022100 	.word	0x40022100
 8005208:	40022300 	.word	0x40022300
 800520c:	4b61      	ldr	r3, [pc, #388]	; (8005394 <HAL_ADC_ConfigChannel+0x690>)
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff f90c 	bl	800442c <LL_ADC_GetCommonPathInternalCh>
 8005214:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a5f      	ldr	r2, [pc, #380]	; (8005398 <HAL_ADC_ConfigChannel+0x694>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_ADC_ConfigChannel+0x526>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a5d      	ldr	r2, [pc, #372]	; (800539c <HAL_ADC_ConfigChannel+0x698>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d10e      	bne.n	8005248 <HAL_ADC_ConfigChannel+0x544>
 800522a:	485b      	ldr	r0, [pc, #364]	; (8005398 <HAL_ADC_ConfigChannel+0x694>)
 800522c:	f7ff fa86 	bl	800473c <LL_ADC_IsEnabled>
 8005230:	4604      	mov	r4, r0
 8005232:	485a      	ldr	r0, [pc, #360]	; (800539c <HAL_ADC_ConfigChannel+0x698>)
 8005234:	f7ff fa82 	bl	800473c <LL_ADC_IsEnabled>
 8005238:	4603      	mov	r3, r0
 800523a:	4323      	orrs	r3, r4
 800523c:	2b00      	cmp	r3, #0
 800523e:	bf0c      	ite	eq
 8005240:	2301      	moveq	r3, #1
 8005242:	2300      	movne	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	e008      	b.n	800525a <HAL_ADC_ConfigChannel+0x556>
 8005248:	4855      	ldr	r0, [pc, #340]	; (80053a0 <HAL_ADC_ConfigChannel+0x69c>)
 800524a:	f7ff fa77 	bl	800473c <LL_ADC_IsEnabled>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf0c      	ite	eq
 8005254:	2301      	moveq	r3, #1
 8005256:	2300      	movne	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d07d      	beq.n	800535a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a50      	ldr	r2, [pc, #320]	; (80053a4 <HAL_ADC_ConfigChannel+0x6a0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d130      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x5c6>
 8005268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d12b      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a4a      	ldr	r2, [pc, #296]	; (80053a0 <HAL_ADC_ConfigChannel+0x69c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	f040 8081 	bne.w	8005380 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a45      	ldr	r2, [pc, #276]	; (8005398 <HAL_ADC_ConfigChannel+0x694>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_ADC_ConfigChannel+0x58e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a43      	ldr	r2, [pc, #268]	; (800539c <HAL_ADC_ConfigChannel+0x698>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d101      	bne.n	8005296 <HAL_ADC_ConfigChannel+0x592>
 8005292:	4a45      	ldr	r2, [pc, #276]	; (80053a8 <HAL_ADC_ConfigChannel+0x6a4>)
 8005294:	e000      	b.n	8005298 <HAL_ADC_ConfigChannel+0x594>
 8005296:	4a3f      	ldr	r2, [pc, #252]	; (8005394 <HAL_ADC_ConfigChannel+0x690>)
 8005298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f7ff f8b0 	bl	8004406 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052a6:	4b41      	ldr	r3, [pc, #260]	; (80053ac <HAL_ADC_ConfigChannel+0x6a8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	099b      	lsrs	r3, r3, #6
 80052ac:	4a40      	ldr	r2, [pc, #256]	; (80053b0 <HAL_ADC_ConfigChannel+0x6ac>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	099b      	lsrs	r3, r3, #6
 80052b4:	3301      	adds	r3, #1
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80052ba:	e002      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	3b01      	subs	r3, #1
 80052c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f9      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052c8:	e05a      	b.n	8005380 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a39      	ldr	r2, [pc, #228]	; (80053b4 <HAL_ADC_ConfigChannel+0x6b0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d11e      	bne.n	8005312 <HAL_ADC_ConfigChannel+0x60e>
 80052d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d119      	bne.n	8005312 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <HAL_ADC_ConfigChannel+0x69c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d14b      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <HAL_ADC_ConfigChannel+0x694>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_ADC_ConfigChannel+0x5f8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a29      	ldr	r2, [pc, #164]	; (800539c <HAL_ADC_ConfigChannel+0x698>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d101      	bne.n	8005300 <HAL_ADC_ConfigChannel+0x5fc>
 80052fc:	4a2a      	ldr	r2, [pc, #168]	; (80053a8 <HAL_ADC_ConfigChannel+0x6a4>)
 80052fe:	e000      	b.n	8005302 <HAL_ADC_ConfigChannel+0x5fe>
 8005300:	4a24      	ldr	r2, [pc, #144]	; (8005394 <HAL_ADC_ConfigChannel+0x690>)
 8005302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005304:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f7ff f87b 	bl	8004406 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005310:	e036      	b.n	8005380 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a28      	ldr	r2, [pc, #160]	; (80053b8 <HAL_ADC_ConfigChannel+0x6b4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d131      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x67c>
 800531c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d12c      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <HAL_ADC_ConfigChannel+0x69c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d127      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_ADC_ConfigChannel+0x694>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <HAL_ADC_ConfigChannel+0x640>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a17      	ldr	r2, [pc, #92]	; (800539c <HAL_ADC_ConfigChannel+0x698>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <HAL_ADC_ConfigChannel+0x644>
 8005344:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <HAL_ADC_ConfigChannel+0x6a4>)
 8005346:	e000      	b.n	800534a <HAL_ADC_ConfigChannel+0x646>
 8005348:	4a12      	ldr	r2, [pc, #72]	; (8005394 <HAL_ADC_ConfigChannel+0x690>)
 800534a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f7ff f857 	bl	8004406 <LL_ADC_SetCommonPathInternalCh>
 8005358:	e012      	b.n	8005380 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800536c:	e008      	b.n	8005380 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	f043 0220 	orr.w	r2, r3, #32
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005388:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800538c:	4618      	mov	r0, r3
 800538e:	3784      	adds	r7, #132	; 0x84
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}
 8005394:	58026300 	.word	0x58026300
 8005398:	40022000 	.word	0x40022000
 800539c:	40022100 	.word	0x40022100
 80053a0:	58026000 	.word	0x58026000
 80053a4:	cb840000 	.word	0xcb840000
 80053a8:	40022300 	.word	0x40022300
 80053ac:	24000088 	.word	0x24000088
 80053b0:	053e2d63 	.word	0x053e2d63
 80053b4:	c7520000 	.word	0xc7520000
 80053b8:	cfb80000 	.word	0xcfb80000

080053bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff f9b7 	bl	800473c <LL_ADC_IsEnabled>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d16e      	bne.n	80054b2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	4b38      	ldr	r3, [pc, #224]	; (80054bc <ADC_Enable+0x100>)
 80053dc:	4013      	ands	r3, r2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00d      	beq.n	80053fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	f043 0210 	orr.w	r2, r3, #16
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	f043 0201 	orr.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e05a      	b.n	80054b4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff f972 	bl	80046ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005408:	f7fe ffbc 	bl	8004384 <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2b      	ldr	r2, [pc, #172]	; (80054c0 <ADC_Enable+0x104>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <ADC_Enable+0x66>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <ADC_Enable+0x108>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <ADC_Enable+0x6a>
 8005422:	4b29      	ldr	r3, [pc, #164]	; (80054c8 <ADC_Enable+0x10c>)
 8005424:	e000      	b.n	8005428 <ADC_Enable+0x6c>
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <ADC_Enable+0x110>)
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff f903 	bl	8004634 <LL_ADC_GetMultimode>
 800542e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a23      	ldr	r2, [pc, #140]	; (80054c4 <ADC_Enable+0x108>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d002      	beq.n	8005440 <ADC_Enable+0x84>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	e000      	b.n	8005442 <ADC_Enable+0x86>
 8005440:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <ADC_Enable+0x104>)
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	4293      	cmp	r3, r2
 8005448:	d02c      	beq.n	80054a4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d130      	bne.n	80054b2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005450:	e028      	b.n	80054a4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff f970 	bl	800473c <LL_ADC_IsEnabled>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff f940 	bl	80046ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800546c:	f7fe ff8a 	bl	8004384 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d914      	bls.n	80054a4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d00d      	beq.n	80054a4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f043 0210 	orr.w	r2, r3, #16
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	f043 0201 	orr.w	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e007      	b.n	80054b4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d1cf      	bne.n	8005452 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	8000003f 	.word	0x8000003f
 80054c0:	40022000 	.word	0x40022000
 80054c4:	40022100 	.word	0x40022100
 80054c8:	40022300 	.word	0x40022300
 80054cc:	58026300 	.word	0x58026300

080054d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff f940 	bl	8004762 <LL_ADC_IsDisableOngoing>
 80054e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff f927 	bl	800473c <LL_ADC_IsEnabled>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d047      	beq.n	8005584 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d144      	bne.n	8005584 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 030d 	and.w	r3, r3, #13
 8005504:	2b01      	cmp	r3, #1
 8005506:	d10c      	bne.n	8005522 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff f901 	bl	8004714 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2203      	movs	r2, #3
 8005518:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800551a:	f7fe ff33 	bl	8004384 <HAL_GetTick>
 800551e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005520:	e029      	b.n	8005576 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	f043 0210 	orr.w	r2, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e023      	b.n	8005586 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800553e:	f7fe ff21 	bl	8004384 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d914      	bls.n	8005576 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	f043 0210 	orr.w	r2, r3, #16
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556a:	f043 0201 	orr.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e007      	b.n	8005586 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1dc      	bne.n	800553e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d14b      	bne.n	8005640 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d021      	beq.n	8005606 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe ff92 	bl	80044f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d032      	beq.n	8005638 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d12b      	bne.n	8005638 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d11f      	bne.n	8005638 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	f043 0201 	orr.w	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54
 8005604:	e018      	b.n	8005638 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d111      	bne.n	8005638 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d105      	bne.n	8005638 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005630:	f043 0201 	orr.w	r2, r3, #1
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff fb45 	bl	8004cc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800563e:	e00e      	b.n	800565e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff fb4f 	bl	8004cf0 <HAL_ADC_ErrorCallback>
}
 8005652:	e004      	b.n	800565e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	4798      	blx	r3
}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff fb31 	bl	8004cdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a0:	f043 0204 	orr.w	r2, r3, #4
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fb21 	bl	8004cf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a7a      	ldr	r2, [pc, #488]	; (80058b0 <ADC_ConfigureBoostMode+0x1f8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <ADC_ConfigureBoostMode+0x1c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a79      	ldr	r2, [pc, #484]	; (80058b4 <ADC_ConfigureBoostMode+0x1fc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d109      	bne.n	80056e8 <ADC_ConfigureBoostMode+0x30>
 80056d4:	4b78      	ldr	r3, [pc, #480]	; (80058b8 <ADC_ConfigureBoostMode+0x200>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	e008      	b.n	80056fa <ADC_ConfigureBoostMode+0x42>
 80056e8:	4b74      	ldr	r3, [pc, #464]	; (80058bc <ADC_ConfigureBoostMode+0x204>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01c      	beq.n	8005738 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80056fe:	f005 fd63 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 8005702:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800570c:	d010      	beq.n	8005730 <ADC_ConfigureBoostMode+0x78>
 800570e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005712:	d873      	bhi.n	80057fc <ADC_ConfigureBoostMode+0x144>
 8005714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005718:	d002      	beq.n	8005720 <ADC_ConfigureBoostMode+0x68>
 800571a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800571e:	d16d      	bne.n	80057fc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	0c1b      	lsrs	r3, r3, #16
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	60fb      	str	r3, [r7, #12]
        break;
 800572e:	e068      	b.n	8005802 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	089b      	lsrs	r3, r3, #2
 8005734:	60fb      	str	r3, [r7, #12]
        break;
 8005736:	e064      	b.n	8005802 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005738:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800573c:	f04f 0100 	mov.w	r1, #0
 8005740:	f006 ffea 	bl	800c718 <HAL_RCCEx_GetPeriphCLKFreq>
 8005744:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800574e:	d051      	beq.n	80057f4 <ADC_ConfigureBoostMode+0x13c>
 8005750:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005754:	d854      	bhi.n	8005800 <ADC_ConfigureBoostMode+0x148>
 8005756:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800575a:	d047      	beq.n	80057ec <ADC_ConfigureBoostMode+0x134>
 800575c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005760:	d84e      	bhi.n	8005800 <ADC_ConfigureBoostMode+0x148>
 8005762:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005766:	d03d      	beq.n	80057e4 <ADC_ConfigureBoostMode+0x12c>
 8005768:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800576c:	d848      	bhi.n	8005800 <ADC_ConfigureBoostMode+0x148>
 800576e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005772:	d033      	beq.n	80057dc <ADC_ConfigureBoostMode+0x124>
 8005774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005778:	d842      	bhi.n	8005800 <ADC_ConfigureBoostMode+0x148>
 800577a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800577e:	d029      	beq.n	80057d4 <ADC_ConfigureBoostMode+0x11c>
 8005780:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005784:	d83c      	bhi.n	8005800 <ADC_ConfigureBoostMode+0x148>
 8005786:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800578a:	d01a      	beq.n	80057c2 <ADC_ConfigureBoostMode+0x10a>
 800578c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005790:	d836      	bhi.n	8005800 <ADC_ConfigureBoostMode+0x148>
 8005792:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005796:	d014      	beq.n	80057c2 <ADC_ConfigureBoostMode+0x10a>
 8005798:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800579c:	d830      	bhi.n	8005800 <ADC_ConfigureBoostMode+0x148>
 800579e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057a2:	d00e      	beq.n	80057c2 <ADC_ConfigureBoostMode+0x10a>
 80057a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057a8:	d82a      	bhi.n	8005800 <ADC_ConfigureBoostMode+0x148>
 80057aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80057ae:	d008      	beq.n	80057c2 <ADC_ConfigureBoostMode+0x10a>
 80057b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80057b4:	d824      	bhi.n	8005800 <ADC_ConfigureBoostMode+0x148>
 80057b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057ba:	d002      	beq.n	80057c2 <ADC_ConfigureBoostMode+0x10a>
 80057bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057c0:	d11e      	bne.n	8005800 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	0c9b      	lsrs	r3, r3, #18
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	60fb      	str	r3, [r7, #12]
        break;
 80057d2:	e016      	b.n	8005802 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	091b      	lsrs	r3, r3, #4
 80057d8:	60fb      	str	r3, [r7, #12]
        break;
 80057da:	e012      	b.n	8005802 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	60fb      	str	r3, [r7, #12]
        break;
 80057e2:	e00e      	b.n	8005802 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	099b      	lsrs	r3, r3, #6
 80057e8:	60fb      	str	r3, [r7, #12]
        break;
 80057ea:	e00a      	b.n	8005802 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	09db      	lsrs	r3, r3, #7
 80057f0:	60fb      	str	r3, [r7, #12]
        break;
 80057f2:	e006      	b.n	8005802 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	60fb      	str	r3, [r7, #12]
        break;
 80057fa:	e002      	b.n	8005802 <ADC_ConfigureBoostMode+0x14a>
        break;
 80057fc:	bf00      	nop
 80057fe:	e000      	b.n	8005802 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005800:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005802:	f7fe fdcb 	bl	800439c <HAL_GetREVID>
 8005806:	4603      	mov	r3, r0
 8005808:	f241 0203 	movw	r2, #4099	; 0x1003
 800580c:	4293      	cmp	r3, r2
 800580e:	d815      	bhi.n	800583c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a2b      	ldr	r2, [pc, #172]	; (80058c0 <ADC_ConfigureBoostMode+0x208>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d908      	bls.n	800582a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005826:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005828:	e03e      	b.n	80058a8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005838:	609a      	str	r2, [r3, #8]
}
 800583a:	e035      	b.n	80058a8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <ADC_ConfigureBoostMode+0x20c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d808      	bhi.n	800585c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005858:	609a      	str	r2, [r3, #8]
}
 800585a:	e025      	b.n	80058a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a1a      	ldr	r2, [pc, #104]	; (80058c8 <ADC_ConfigureBoostMode+0x210>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d80a      	bhi.n	800587a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005876:	609a      	str	r2, [r3, #8]
}
 8005878:	e016      	b.n	80058a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a13      	ldr	r2, [pc, #76]	; (80058cc <ADC_ConfigureBoostMode+0x214>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d80a      	bhi.n	8005898 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005894:	609a      	str	r2, [r3, #8]
}
 8005896:	e007      	b.n	80058a8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80058a6:	609a      	str	r2, [r3, #8]
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40022000 	.word	0x40022000
 80058b4:	40022100 	.word	0x40022100
 80058b8:	40022300 	.word	0x40022300
 80058bc:	58026300 	.word	0x58026300
 80058c0:	01312d00 	.word	0x01312d00
 80058c4:	005f5e10 	.word	0x005f5e10
 80058c8:	00bebc20 	.word	0x00bebc20
 80058cc:	017d7840 	.word	0x017d7840

080058d0 <LL_ADC_IsEnabled>:
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <LL_ADC_IsEnabled+0x18>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <LL_ADC_IsEnabled+0x1a>
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <LL_ADC_StartCalibration>:
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	4b09      	ldr	r3, [pc, #36]	; (8005930 <LL_ADC_StartCalibration+0x38>)
 800590a:	4013      	ands	r3, r2
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005918:	430a      	orrs	r2, r1
 800591a:	4313      	orrs	r3, r2
 800591c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	3ffeffc0 	.word	0x3ffeffc0

08005934 <LL_ADC_IsCalibrationOnGoing>:
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005948:	d101      	bne.n	800594e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <LL_ADC_REG_IsConversionOngoing>:
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b04      	cmp	r3, #4
 800596e:	d101      	bne.n	8005974 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_ADCEx_Calibration_Start+0x1e>
 800599e:	2302      	movs	r3, #2
 80059a0:	e04c      	b.n	8005a3c <HAL_ADCEx_Calibration_Start+0xb8>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7ff fd90 	bl	80054d0 <ADC_Disable>
 80059b0:	4603      	mov	r3, r0
 80059b2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d135      	bne.n	8005a26 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059be:	4b21      	ldr	r3, [pc, #132]	; (8005a44 <HAL_ADCEx_Calibration_Start+0xc0>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	f043 0202 	orr.w	r2, r3, #2
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff ff90 	bl	80058f8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80059d8:	e014      	b.n	8005a04 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	3301      	adds	r3, #1
 80059de:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <HAL_ADCEx_Calibration_Start+0xc4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d30d      	bcc.n	8005a04 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ec:	f023 0312 	bic.w	r3, r3, #18
 80059f0:	f043 0210 	orr.w	r2, r3, #16
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e01b      	b.n	8005a3c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff ff93 	bl	8005934 <LL_ADC_IsCalibrationOnGoing>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e2      	bne.n	80059da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a18:	f023 0303 	bic.w	r3, r3, #3
 8005a1c:	f043 0201 	orr.w	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
 8005a24:	e005      	b.n	8005a32 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	f043 0210 	orr.w	r2, r3, #16
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	ffffeefd 	.word	0xffffeefd
 8005a48:	25c3f800 	.word	0x25c3f800

08005a4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	b09f      	sub	sp, #124	; 0x7c
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e0be      	b.n	8005be8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005a72:	2300      	movs	r3, #0
 8005a74:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a5c      	ldr	r2, [pc, #368]	; (8005bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d102      	bne.n	8005a8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005a84:	4b5b      	ldr	r3, [pc, #364]	; (8005bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005a86:	60bb      	str	r3, [r7, #8]
 8005a88:	e001      	b.n	8005a8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10b      	bne.n	8005aac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a98:	f043 0220 	orr.w	r2, r3, #32
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e09d      	b.n	8005be8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff ff54 	bl	800595c <LL_ADC_REG_IsConversionOngoing>
 8005ab4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff ff4e 	bl	800595c <LL_ADC_REG_IsConversionOngoing>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d17f      	bne.n	8005bc6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d17c      	bne.n	8005bc6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a47      	ldr	r2, [pc, #284]	; (8005bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a46      	ldr	r2, [pc, #280]	; (8005bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d101      	bne.n	8005ae4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005ae0:	4b45      	ldr	r3, [pc, #276]	; (8005bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ae2:	e000      	b.n	8005ae6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005ae4:	4b45      	ldr	r3, [pc, #276]	; (8005bfc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ae6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d039      	beq.n	8005b64 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a3a      	ldr	r2, [pc, #232]	; (8005bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d004      	beq.n	8005b16 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a38      	ldr	r2, [pc, #224]	; (8005bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d10e      	bne.n	8005b34 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005b16:	4836      	ldr	r0, [pc, #216]	; (8005bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b18:	f7ff feda 	bl	80058d0 <LL_ADC_IsEnabled>
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	4835      	ldr	r0, [pc, #212]	; (8005bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b20:	f7ff fed6 	bl	80058d0 <LL_ADC_IsEnabled>
 8005b24:	4603      	mov	r3, r0
 8005b26:	4323      	orrs	r3, r4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	bf0c      	ite	eq
 8005b2c:	2301      	moveq	r3, #1
 8005b2e:	2300      	movne	r3, #0
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	e008      	b.n	8005b46 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005b34:	4832      	ldr	r0, [pc, #200]	; (8005c00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005b36:	f7ff fecb 	bl	80058d0 <LL_ADC_IsEnabled>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf0c      	ite	eq
 8005b40:	2301      	moveq	r3, #1
 8005b42:	2300      	movne	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d047      	beq.n	8005bda <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	6811      	ldr	r1, [r2, #0]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	6892      	ldr	r2, [r2, #8]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b60:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b62:	e03a      	b.n	8005bda <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1d      	ldr	r2, [pc, #116]	; (8005bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d10e      	bne.n	8005ba2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005b84:	481a      	ldr	r0, [pc, #104]	; (8005bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b86:	f7ff fea3 	bl	80058d0 <LL_ADC_IsEnabled>
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4819      	ldr	r0, [pc, #100]	; (8005bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b8e:	f7ff fe9f 	bl	80058d0 <LL_ADC_IsEnabled>
 8005b92:	4603      	mov	r3, r0
 8005b94:	4323      	orrs	r3, r4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bf0c      	ite	eq
 8005b9a:	2301      	moveq	r3, #1
 8005b9c:	2300      	movne	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	e008      	b.n	8005bb4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005ba2:	4817      	ldr	r0, [pc, #92]	; (8005c00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005ba4:	f7ff fe94 	bl	80058d0 <LL_ADC_IsEnabled>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	bf0c      	ite	eq
 8005bae:	2301      	moveq	r3, #1
 8005bb0:	2300      	movne	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d010      	beq.n	8005bda <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	4b11      	ldr	r3, [pc, #68]	; (8005c04 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bc2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bc4:	e009      	b.n	8005bda <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bca:	f043 0220 	orr.w	r2, r3, #32
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005bd8:	e000      	b.n	8005bdc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bda:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005be4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	377c      	adds	r7, #124	; 0x7c
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd90      	pop	{r4, r7, pc}
 8005bf0:	40022000 	.word	0x40022000
 8005bf4:	40022100 	.word	0x40022100
 8005bf8:	40022300 	.word	0x40022300
 8005bfc:	58026300 	.word	0x58026300
 8005c00:	58026000 	.word	0x58026000
 8005c04:	fffff0e0 	.word	0xfffff0e0

08005c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c18:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <__NVIC_SetPriorityGrouping+0x40>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c24:	4013      	ands	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c30:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <__NVIC_SetPriorityGrouping+0x44>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c36:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <__NVIC_SetPriorityGrouping+0x40>)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	60d3      	str	r3, [r2, #12]
}
 8005c3c:	bf00      	nop
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	e000ed00 	.word	0xe000ed00
 8005c4c:	05fa0000 	.word	0x05fa0000

08005c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c54:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <__NVIC_GetPriorityGrouping+0x18>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	0a1b      	lsrs	r3, r3, #8
 8005c5a:	f003 0307 	and.w	r3, r3, #7
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	e000ed00 	.word	0xe000ed00

08005c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	db0b      	blt.n	8005c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	f003 021f 	and.w	r2, r3, #31
 8005c84:	4907      	ldr	r1, [pc, #28]	; (8005ca4 <__NVIC_EnableIRQ+0x38>)
 8005c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	e000e100 	.word	0xe000e100

08005ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	6039      	str	r1, [r7, #0]
 8005cb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	db0a      	blt.n	8005cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	490c      	ldr	r1, [pc, #48]	; (8005cf4 <__NVIC_SetPriority+0x4c>)
 8005cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cc6:	0112      	lsls	r2, r2, #4
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	440b      	add	r3, r1
 8005ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cd0:	e00a      	b.n	8005ce8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4908      	ldr	r1, [pc, #32]	; (8005cf8 <__NVIC_SetPriority+0x50>)
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	3b04      	subs	r3, #4
 8005ce0:	0112      	lsls	r2, r2, #4
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	761a      	strb	r2, [r3, #24]
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	e000e100 	.word	0xe000e100
 8005cf8:	e000ed00 	.word	0xe000ed00

08005cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b089      	sub	sp, #36	; 0x24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f1c3 0307 	rsb	r3, r3, #7
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	bf28      	it	cs
 8005d1a:	2304      	movcs	r3, #4
 8005d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	3304      	adds	r3, #4
 8005d22:	2b06      	cmp	r3, #6
 8005d24:	d902      	bls.n	8005d2c <NVIC_EncodePriority+0x30>
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	3b03      	subs	r3, #3
 8005d2a:	e000      	b.n	8005d2e <NVIC_EncodePriority+0x32>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	43da      	mvns	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	401a      	ands	r2, r3
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4e:	43d9      	mvns	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d54:	4313      	orrs	r3, r2
         );
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3724      	adds	r7, #36	; 0x24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff ff4c 	bl	8005c08 <__NVIC_SetPriorityGrouping>
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d86:	f7ff ff63 	bl	8005c50 <__NVIC_GetPriorityGrouping>
 8005d8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	6978      	ldr	r0, [r7, #20]
 8005d92:	f7ff ffb3 	bl	8005cfc <NVIC_EncodePriority>
 8005d96:	4602      	mov	r2, r0
 8005d98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff ff82 	bl	8005ca8 <__NVIC_SetPriority>
}
 8005da4:	bf00      	nop
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff ff56 	bl	8005c6c <__NVIC_EnableIRQ>
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e014      	b.n	8005e04 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	791b      	ldrb	r3, [r3, #4]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fa fefa 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e046      	b.n	8005eae <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	795b      	ldrb	r3, [r3, #5]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_DAC_Start+0x20>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e040      	b.n	8005eae <HAL_DAC_Start+0xa2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	2201      	movs	r2, #1
 8005e46:	409a      	lsls	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10f      	bne.n	8005e76 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d11d      	bne.n	8005ea0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	605a      	str	r2, [r3, #4]
 8005e74:	e014      	b.n	8005ea0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2102      	movs	r1, #2
 8005e88:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d107      	bne.n	8005ea0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0202 	orr.w	r2, r2, #2
 8005e9e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e0a2      	b.n	800601a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	795b      	ldrb	r3, [r3, #5]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_DAC_Start_DMA+0x24>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e09c      	b.n	800601a <HAL_DAC_Start_DMA+0x15e>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d129      	bne.n	8005f46 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4a4b      	ldr	r2, [pc, #300]	; (8006024 <HAL_DAC_Start_DMA+0x168>)
 8005ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	4a4a      	ldr	r2, [pc, #296]	; (8006028 <HAL_DAC_Start_DMA+0x16c>)
 8005f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	4a49      	ldr	r2, [pc, #292]	; (800602c <HAL_DAC_Start_DMA+0x170>)
 8005f08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f18:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_DAC_Start_DMA+0x6c>
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d005      	beq.n	8005f32 <HAL_DAC_Start_DMA+0x76>
 8005f26:	e009      	b.n	8005f3c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	613b      	str	r3, [r7, #16]
        break;
 8005f30:	e033      	b.n	8005f9a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	613b      	str	r3, [r7, #16]
        break;
 8005f3a:	e02e      	b.n	8005f9a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3310      	adds	r3, #16
 8005f42:	613b      	str	r3, [r7, #16]
        break;
 8005f44:	e029      	b.n	8005f9a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	4a39      	ldr	r2, [pc, #228]	; (8006030 <HAL_DAC_Start_DMA+0x174>)
 8005f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	4a38      	ldr	r2, [pc, #224]	; (8006034 <HAL_DAC_Start_DMA+0x178>)
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	4a37      	ldr	r2, [pc, #220]	; (8006038 <HAL_DAC_Start_DMA+0x17c>)
 8005f5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f6c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_DAC_Start_DMA+0xc0>
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d005      	beq.n	8005f86 <HAL_DAC_Start_DMA+0xca>
 8005f7a:	e009      	b.n	8005f90 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3314      	adds	r3, #20
 8005f82:	613b      	str	r3, [r7, #16]
        break;
 8005f84:	e009      	b.n	8005f9a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	613b      	str	r3, [r7, #16]
        break;
 8005f8e:	e004      	b.n	8005f9a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	331c      	adds	r3, #28
 8005f96:	613b      	str	r3, [r7, #16]
        break;
 8005f98:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d111      	bne.n	8005fc4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6898      	ldr	r0, [r3, #8]
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	f000 fe67 	bl	8006c8c <HAL_DMA_Start_IT>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75fb      	strb	r3, [r7, #23]
 8005fc2:	e010      	b.n	8005fe6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005fd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	68d8      	ldr	r0, [r3, #12]
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	f000 fe55 	bl	8006c8c <HAL_DMA_Start_IT>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10c      	bne.n	800600c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6819      	ldr	r1, [r3, #0]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2201      	movs	r2, #1
 8006000:	409a      	lsls	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	e005      	b.n	8006018 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f043 0204 	orr.w	r2, r3, #4
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006018:	7dfb      	ldrb	r3, [r7, #23]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	080064ad 	.word	0x080064ad
 8006028:	080064cf 	.word	0x080064cf
 800602c:	080064eb 	.word	0x080064eb
 8006030:	08006569 	.word	0x08006569
 8006034:	0800658b 	.word	0x0800658b
 8006038:	080065a7 	.word	0x080065a7

0800603c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e03e      	b.n	80060ce <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6819      	ldr	r1, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	43da      	mvns	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	400a      	ands	r2, r1
 800606c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	f003 0310 	and.w	r3, r3, #16
 800607a:	2201      	movs	r2, #1
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	43da      	mvns	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	400a      	ands	r2, r1
 8006088:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10d      	bne.n	80060ac <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f001 f863 	bl	8007160 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	e00c      	b.n	80060c6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 f855 	bl	8007160 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80060c4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ec:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01d      	beq.n	8006134 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d018      	beq.n	8006134 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2204      	movs	r2, #4
 8006106:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f043 0201 	orr.w	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800611c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800612c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f86f 	bl	8006212 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01d      	beq.n	800617a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d018      	beq.n	800617a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2204      	movs	r2, #4
 800614c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f043 0202 	orr.w	r2, r3, #2
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f9ed 	bl	8006554 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006182:	b480      	push	{r7}
 8006184:	b087      	sub	sp, #28
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
 800618e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e015      	b.n	80061ca <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d105      	bne.n	80061b6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4413      	add	r3, r2
 80061b0:	3308      	adds	r3, #8
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	e004      	b.n	80061c0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4413      	add	r3, r2
 80061bc:	3314      	adds	r3, #20
 80061be:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	461a      	mov	r2, r3
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	; 0x28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_DAC_ConfigChannel+0x1e>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e12a      	b.n	80064a0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	795b      	ldrb	r3, [r3, #5]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_DAC_ConfigChannel+0x2e>
 8006252:	2302      	movs	r3, #2
 8006254:	e124      	b.n	80064a0 <HAL_DAC_ConfigChannel+0x278>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2202      	movs	r2, #2
 8006260:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b04      	cmp	r3, #4
 8006268:	d17a      	bne.n	8006360 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800626a:	f7fe f88b 	bl	8004384 <HAL_GetTick>
 800626e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d13d      	bne.n	80062f2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006276:	e018      	b.n	80062aa <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006278:	f7fe f884 	bl	8004384 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d911      	bls.n	80062aa <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800628c:	4b86      	ldr	r3, [pc, #536]	; (80064a8 <HAL_DAC_ConfigChannel+0x280>)
 800628e:	4013      	ands	r3, r2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f043 0208 	orr.w	r2, r3, #8
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2203      	movs	r2, #3
 80062a4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e0fa      	b.n	80064a0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b0:	4b7d      	ldr	r3, [pc, #500]	; (80064a8 <HAL_DAC_ConfigChannel+0x280>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1df      	bne.n	8006278 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	6992      	ldr	r2, [r2, #24]
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
 80062c2:	e020      	b.n	8006306 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062c4:	f7fe f85e 	bl	8004384 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d90f      	bls.n	80062f2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da0a      	bge.n	80062f2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f043 0208 	orr.w	r2, r3, #8
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2203      	movs	r2, #3
 80062ec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e0d6      	b.n	80064a0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dbe3      	blt.n	80062c4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	6992      	ldr	r2, [r2, #24]
 8006304:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006316:	fa01 f303 	lsl.w	r3, r1, r3
 800631a:	43db      	mvns	r3, r3
 800631c:	ea02 0103 	and.w	r1, r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	69da      	ldr	r2, [r3, #28]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f003 0310 	and.w	r3, r3, #16
 800632a:	409a      	lsls	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	21ff      	movs	r1, #255	; 0xff
 8006342:	fa01 f303 	lsl.w	r3, r1, r3
 8006346:	43db      	mvns	r3, r3
 8006348:	ea02 0103 	and.w	r1, r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6a1a      	ldr	r2, [r3, #32]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	409a      	lsls	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d11d      	bne.n	80063a4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	221f      	movs	r2, #31
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	43db      	mvns	r3, r3
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	4013      	ands	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f003 0310 	and.w	r3, r3, #16
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	4313      	orrs	r3, r2
 800639a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063aa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	2207      	movs	r2, #7
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	43db      	mvns	r3, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	4013      	ands	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d102      	bne.n	80063ce <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
 80063cc:	e00f      	b.n	80063ee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d102      	bne.n	80063dc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80063d6:	2301      	movs	r3, #1
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
 80063da:	e008      	b.n	80063ee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80063e4:	2301      	movs	r3, #1
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
 80063e8:	e001      	b.n	80063ee <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	fa02 f303 	lsl.w	r3, r2, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4313      	orrs	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6819      	ldr	r1, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	43da      	mvns	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	400a      	ands	r2, r1
 8006434:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	43db      	mvns	r3, r3
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4013      	ands	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	4313      	orrs	r3, r2
 800646a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6819      	ldr	r1, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	22c0      	movs	r2, #192	; 0xc0
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43da      	mvns	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	400a      	ands	r2, r1
 800648e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800649c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3728      	adds	r7, #40	; 0x28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20008000 	.word	0x20008000

080064ac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f7ff fe8b 	bl	80061d6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	711a      	strb	r2, [r3, #4]
}
 80064c6:	bf00      	nop
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fe84 	bl	80061ea <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f043 0204 	orr.w	r2, r3, #4
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7ff fe7a 	bl	80061fe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	711a      	strb	r2, [r3, #4]
}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7ff ffce 	bl	8006518 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2201      	movs	r2, #1
 8006580:	711a      	strb	r2, [r3, #4]
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff ffc7 	bl	800652c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800659e:	bf00      	nop
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f043 0204 	orr.w	r2, r3, #4
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f7ff ffbd 	bl	8006540 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	711a      	strb	r2, [r3, #4]
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80065dc:	f7fd fed2 	bl	8004384 <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e316      	b.n	8006c1a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a66      	ldr	r2, [pc, #408]	; (800678c <HAL_DMA_Init+0x1b8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d04a      	beq.n	800668c <HAL_DMA_Init+0xb8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a65      	ldr	r2, [pc, #404]	; (8006790 <HAL_DMA_Init+0x1bc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d045      	beq.n	800668c <HAL_DMA_Init+0xb8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a63      	ldr	r2, [pc, #396]	; (8006794 <HAL_DMA_Init+0x1c0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d040      	beq.n	800668c <HAL_DMA_Init+0xb8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a62      	ldr	r2, [pc, #392]	; (8006798 <HAL_DMA_Init+0x1c4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d03b      	beq.n	800668c <HAL_DMA_Init+0xb8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a60      	ldr	r2, [pc, #384]	; (800679c <HAL_DMA_Init+0x1c8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d036      	beq.n	800668c <HAL_DMA_Init+0xb8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a5f      	ldr	r2, [pc, #380]	; (80067a0 <HAL_DMA_Init+0x1cc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d031      	beq.n	800668c <HAL_DMA_Init+0xb8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a5d      	ldr	r2, [pc, #372]	; (80067a4 <HAL_DMA_Init+0x1d0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d02c      	beq.n	800668c <HAL_DMA_Init+0xb8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a5c      	ldr	r2, [pc, #368]	; (80067a8 <HAL_DMA_Init+0x1d4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d027      	beq.n	800668c <HAL_DMA_Init+0xb8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a5a      	ldr	r2, [pc, #360]	; (80067ac <HAL_DMA_Init+0x1d8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d022      	beq.n	800668c <HAL_DMA_Init+0xb8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a59      	ldr	r2, [pc, #356]	; (80067b0 <HAL_DMA_Init+0x1dc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d01d      	beq.n	800668c <HAL_DMA_Init+0xb8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a57      	ldr	r2, [pc, #348]	; (80067b4 <HAL_DMA_Init+0x1e0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d018      	beq.n	800668c <HAL_DMA_Init+0xb8>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a56      	ldr	r2, [pc, #344]	; (80067b8 <HAL_DMA_Init+0x1e4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d013      	beq.n	800668c <HAL_DMA_Init+0xb8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a54      	ldr	r2, [pc, #336]	; (80067bc <HAL_DMA_Init+0x1e8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00e      	beq.n	800668c <HAL_DMA_Init+0xb8>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a53      	ldr	r2, [pc, #332]	; (80067c0 <HAL_DMA_Init+0x1ec>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_DMA_Init+0xb8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a51      	ldr	r2, [pc, #324]	; (80067c4 <HAL_DMA_Init+0x1f0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_DMA_Init+0xb8>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a50      	ldr	r2, [pc, #320]	; (80067c8 <HAL_DMA_Init+0x1f4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d101      	bne.n	8006690 <HAL_DMA_Init+0xbc>
 800668c:	2301      	movs	r3, #1
 800668e:	e000      	b.n	8006692 <HAL_DMA_Init+0xbe>
 8006690:	2300      	movs	r3, #0
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 813b 	beq.w	800690e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a37      	ldr	r2, [pc, #220]	; (800678c <HAL_DMA_Init+0x1b8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d04a      	beq.n	8006748 <HAL_DMA_Init+0x174>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a36      	ldr	r2, [pc, #216]	; (8006790 <HAL_DMA_Init+0x1bc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d045      	beq.n	8006748 <HAL_DMA_Init+0x174>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a34      	ldr	r2, [pc, #208]	; (8006794 <HAL_DMA_Init+0x1c0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d040      	beq.n	8006748 <HAL_DMA_Init+0x174>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a33      	ldr	r2, [pc, #204]	; (8006798 <HAL_DMA_Init+0x1c4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d03b      	beq.n	8006748 <HAL_DMA_Init+0x174>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a31      	ldr	r2, [pc, #196]	; (800679c <HAL_DMA_Init+0x1c8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d036      	beq.n	8006748 <HAL_DMA_Init+0x174>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a30      	ldr	r2, [pc, #192]	; (80067a0 <HAL_DMA_Init+0x1cc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d031      	beq.n	8006748 <HAL_DMA_Init+0x174>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2e      	ldr	r2, [pc, #184]	; (80067a4 <HAL_DMA_Init+0x1d0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d02c      	beq.n	8006748 <HAL_DMA_Init+0x174>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2d      	ldr	r2, [pc, #180]	; (80067a8 <HAL_DMA_Init+0x1d4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d027      	beq.n	8006748 <HAL_DMA_Init+0x174>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a2b      	ldr	r2, [pc, #172]	; (80067ac <HAL_DMA_Init+0x1d8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d022      	beq.n	8006748 <HAL_DMA_Init+0x174>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a2a      	ldr	r2, [pc, #168]	; (80067b0 <HAL_DMA_Init+0x1dc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d01d      	beq.n	8006748 <HAL_DMA_Init+0x174>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a28      	ldr	r2, [pc, #160]	; (80067b4 <HAL_DMA_Init+0x1e0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d018      	beq.n	8006748 <HAL_DMA_Init+0x174>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a27      	ldr	r2, [pc, #156]	; (80067b8 <HAL_DMA_Init+0x1e4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <HAL_DMA_Init+0x174>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a25      	ldr	r2, [pc, #148]	; (80067bc <HAL_DMA_Init+0x1e8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_DMA_Init+0x174>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a24      	ldr	r2, [pc, #144]	; (80067c0 <HAL_DMA_Init+0x1ec>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d009      	beq.n	8006748 <HAL_DMA_Init+0x174>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <HAL_DMA_Init+0x1f0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_DMA_Init+0x174>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a21      	ldr	r2, [pc, #132]	; (80067c8 <HAL_DMA_Init+0x1f4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d108      	bne.n	800675a <HAL_DMA_Init+0x186>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0201 	bic.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	e007      	b.n	800676a <HAL_DMA_Init+0x196>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0201 	bic.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800676a:	e02f      	b.n	80067cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800676c:	f7fd fe0a 	bl	8004384 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b05      	cmp	r3, #5
 8006778:	d928      	bls.n	80067cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2203      	movs	r2, #3
 8006784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e246      	b.n	8006c1a <HAL_DMA_Init+0x646>
 800678c:	40020010 	.word	0x40020010
 8006790:	40020028 	.word	0x40020028
 8006794:	40020040 	.word	0x40020040
 8006798:	40020058 	.word	0x40020058
 800679c:	40020070 	.word	0x40020070
 80067a0:	40020088 	.word	0x40020088
 80067a4:	400200a0 	.word	0x400200a0
 80067a8:	400200b8 	.word	0x400200b8
 80067ac:	40020410 	.word	0x40020410
 80067b0:	40020428 	.word	0x40020428
 80067b4:	40020440 	.word	0x40020440
 80067b8:	40020458 	.word	0x40020458
 80067bc:	40020470 	.word	0x40020470
 80067c0:	40020488 	.word	0x40020488
 80067c4:	400204a0 	.word	0x400204a0
 80067c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1c8      	bne.n	800676c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4b83      	ldr	r3, [pc, #524]	; (80069f4 <HAL_DMA_Init+0x420>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80067f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800680a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	2b04      	cmp	r3, #4
 800681e:	d107      	bne.n	8006830 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006828:	4313      	orrs	r3, r2
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006830:	4b71      	ldr	r3, [pc, #452]	; (80069f8 <HAL_DMA_Init+0x424>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	4b71      	ldr	r3, [pc, #452]	; (80069fc <HAL_DMA_Init+0x428>)
 8006836:	4013      	ands	r3, r2
 8006838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800683c:	d328      	bcc.n	8006890 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b28      	cmp	r3, #40	; 0x28
 8006844:	d903      	bls.n	800684e <HAL_DMA_Init+0x27a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b2e      	cmp	r3, #46	; 0x2e
 800684c:	d917      	bls.n	800687e <HAL_DMA_Init+0x2aa>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2b3e      	cmp	r3, #62	; 0x3e
 8006854:	d903      	bls.n	800685e <HAL_DMA_Init+0x28a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b42      	cmp	r3, #66	; 0x42
 800685c:	d90f      	bls.n	800687e <HAL_DMA_Init+0x2aa>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b46      	cmp	r3, #70	; 0x46
 8006864:	d903      	bls.n	800686e <HAL_DMA_Init+0x29a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b48      	cmp	r3, #72	; 0x48
 800686c:	d907      	bls.n	800687e <HAL_DMA_Init+0x2aa>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b4e      	cmp	r3, #78	; 0x4e
 8006874:	d905      	bls.n	8006882 <HAL_DMA_Init+0x2ae>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b52      	cmp	r3, #82	; 0x52
 800687c:	d801      	bhi.n	8006882 <HAL_DMA_Init+0x2ae>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <HAL_DMA_Init+0x2b0>
 8006882:	2300      	movs	r3, #0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800688e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0307 	bic.w	r3, r3, #7
 80068a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d117      	bne.n	80068ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00e      	beq.n	80068ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f002 fb3f 	bl	8008f50 <DMA_CheckFifoParam>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d008      	beq.n	80068ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2240      	movs	r2, #64	; 0x40
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e197      	b.n	8006c1a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f002 fa7a 	bl	8008dec <DMA_CalcBaseAndBitshift>
 80068f8:	4603      	mov	r3, r0
 80068fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	223f      	movs	r2, #63	; 0x3f
 8006906:	409a      	lsls	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	609a      	str	r2, [r3, #8]
 800690c:	e0cd      	b.n	8006aaa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a3b      	ldr	r2, [pc, #236]	; (8006a00 <HAL_DMA_Init+0x42c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d022      	beq.n	800695e <HAL_DMA_Init+0x38a>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a39      	ldr	r2, [pc, #228]	; (8006a04 <HAL_DMA_Init+0x430>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01d      	beq.n	800695e <HAL_DMA_Init+0x38a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a38      	ldr	r2, [pc, #224]	; (8006a08 <HAL_DMA_Init+0x434>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d018      	beq.n	800695e <HAL_DMA_Init+0x38a>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a36      	ldr	r2, [pc, #216]	; (8006a0c <HAL_DMA_Init+0x438>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <HAL_DMA_Init+0x38a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a35      	ldr	r2, [pc, #212]	; (8006a10 <HAL_DMA_Init+0x43c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00e      	beq.n	800695e <HAL_DMA_Init+0x38a>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a33      	ldr	r2, [pc, #204]	; (8006a14 <HAL_DMA_Init+0x440>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d009      	beq.n	800695e <HAL_DMA_Init+0x38a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a32      	ldr	r2, [pc, #200]	; (8006a18 <HAL_DMA_Init+0x444>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_DMA_Init+0x38a>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a30      	ldr	r2, [pc, #192]	; (8006a1c <HAL_DMA_Init+0x448>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d101      	bne.n	8006962 <HAL_DMA_Init+0x38e>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <HAL_DMA_Init+0x390>
 8006962:	2300      	movs	r3, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 8097 	beq.w	8006a98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a24      	ldr	r2, [pc, #144]	; (8006a00 <HAL_DMA_Init+0x42c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d021      	beq.n	80069b8 <HAL_DMA_Init+0x3e4>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a22      	ldr	r2, [pc, #136]	; (8006a04 <HAL_DMA_Init+0x430>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d01c      	beq.n	80069b8 <HAL_DMA_Init+0x3e4>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a21      	ldr	r2, [pc, #132]	; (8006a08 <HAL_DMA_Init+0x434>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d017      	beq.n	80069b8 <HAL_DMA_Init+0x3e4>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1f      	ldr	r2, [pc, #124]	; (8006a0c <HAL_DMA_Init+0x438>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d012      	beq.n	80069b8 <HAL_DMA_Init+0x3e4>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <HAL_DMA_Init+0x43c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00d      	beq.n	80069b8 <HAL_DMA_Init+0x3e4>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1c      	ldr	r2, [pc, #112]	; (8006a14 <HAL_DMA_Init+0x440>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d008      	beq.n	80069b8 <HAL_DMA_Init+0x3e4>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1b      	ldr	r2, [pc, #108]	; (8006a18 <HAL_DMA_Init+0x444>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <HAL_DMA_Init+0x3e4>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <HAL_DMA_Init+0x448>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2202      	movs	r2, #2
 80069be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <HAL_DMA_Init+0x44c>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d020      	beq.n	8006a24 <HAL_DMA_Init+0x450>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b80      	cmp	r3, #128	; 0x80
 80069e8:	d102      	bne.n	80069f0 <HAL_DMA_Init+0x41c>
 80069ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069ee:	e01a      	b.n	8006a26 <HAL_DMA_Init+0x452>
 80069f0:	2300      	movs	r3, #0
 80069f2:	e018      	b.n	8006a26 <HAL_DMA_Init+0x452>
 80069f4:	fe10803f 	.word	0xfe10803f
 80069f8:	5c001000 	.word	0x5c001000
 80069fc:	ffff0000 	.word	0xffff0000
 8006a00:	58025408 	.word	0x58025408
 8006a04:	5802541c 	.word	0x5802541c
 8006a08:	58025430 	.word	0x58025430
 8006a0c:	58025444 	.word	0x58025444
 8006a10:	58025458 	.word	0x58025458
 8006a14:	5802546c 	.word	0x5802546c
 8006a18:	58025480 	.word	0x58025480
 8006a1c:	58025494 	.word	0x58025494
 8006a20:	fffe000f 	.word	0xfffe000f
 8006a24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	68d2      	ldr	r2, [r2, #12]
 8006a2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006a2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006a34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006a3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006a44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006a4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006a54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4b6e      	ldr	r3, [pc, #440]	; (8006c24 <HAL_DMA_Init+0x650>)
 8006a6c:	4413      	add	r3, r2
 8006a6e:	4a6e      	ldr	r2, [pc, #440]	; (8006c28 <HAL_DMA_Init+0x654>)
 8006a70:	fba2 2303 	umull	r2, r3, r2, r3
 8006a74:	091b      	lsrs	r3, r3, #4
 8006a76:	009a      	lsls	r2, r3, #2
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f002 f9b5 	bl	8008dec <DMA_CalcBaseAndBitshift>
 8006a82:	4603      	mov	r3, r0
 8006a84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2201      	movs	r2, #1
 8006a90:	409a      	lsls	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	605a      	str	r2, [r3, #4]
 8006a96:	e008      	b.n	8006aaa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2240      	movs	r2, #64	; 0x40
 8006a9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2203      	movs	r2, #3
 8006aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e0b7      	b.n	8006c1a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a5f      	ldr	r2, [pc, #380]	; (8006c2c <HAL_DMA_Init+0x658>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d072      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a5d      	ldr	r2, [pc, #372]	; (8006c30 <HAL_DMA_Init+0x65c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d06d      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a5c      	ldr	r2, [pc, #368]	; (8006c34 <HAL_DMA_Init+0x660>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d068      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a5a      	ldr	r2, [pc, #360]	; (8006c38 <HAL_DMA_Init+0x664>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d063      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a59      	ldr	r2, [pc, #356]	; (8006c3c <HAL_DMA_Init+0x668>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d05e      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a57      	ldr	r2, [pc, #348]	; (8006c40 <HAL_DMA_Init+0x66c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d059      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a56      	ldr	r2, [pc, #344]	; (8006c44 <HAL_DMA_Init+0x670>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d054      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a54      	ldr	r2, [pc, #336]	; (8006c48 <HAL_DMA_Init+0x674>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d04f      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a53      	ldr	r2, [pc, #332]	; (8006c4c <HAL_DMA_Init+0x678>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d04a      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a51      	ldr	r2, [pc, #324]	; (8006c50 <HAL_DMA_Init+0x67c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d045      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a50      	ldr	r2, [pc, #320]	; (8006c54 <HAL_DMA_Init+0x680>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d040      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a4e      	ldr	r2, [pc, #312]	; (8006c58 <HAL_DMA_Init+0x684>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d03b      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a4d      	ldr	r2, [pc, #308]	; (8006c5c <HAL_DMA_Init+0x688>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d036      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a4b      	ldr	r2, [pc, #300]	; (8006c60 <HAL_DMA_Init+0x68c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d031      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a4a      	ldr	r2, [pc, #296]	; (8006c64 <HAL_DMA_Init+0x690>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d02c      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a48      	ldr	r2, [pc, #288]	; (8006c68 <HAL_DMA_Init+0x694>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d027      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a47      	ldr	r2, [pc, #284]	; (8006c6c <HAL_DMA_Init+0x698>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d022      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a45      	ldr	r2, [pc, #276]	; (8006c70 <HAL_DMA_Init+0x69c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01d      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a44      	ldr	r2, [pc, #272]	; (8006c74 <HAL_DMA_Init+0x6a0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d018      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a42      	ldr	r2, [pc, #264]	; (8006c78 <HAL_DMA_Init+0x6a4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d013      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a41      	ldr	r2, [pc, #260]	; (8006c7c <HAL_DMA_Init+0x6a8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00e      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a3f      	ldr	r2, [pc, #252]	; (8006c80 <HAL_DMA_Init+0x6ac>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d009      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a3e      	ldr	r2, [pc, #248]	; (8006c84 <HAL_DMA_Init+0x6b0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d004      	beq.n	8006b9a <HAL_DMA_Init+0x5c6>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a3c      	ldr	r2, [pc, #240]	; (8006c88 <HAL_DMA_Init+0x6b4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d101      	bne.n	8006b9e <HAL_DMA_Init+0x5ca>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e000      	b.n	8006ba0 <HAL_DMA_Init+0x5cc>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d032      	beq.n	8006c0a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f002 fa4f 	bl	8009048 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b80      	cmp	r3, #128	; 0x80
 8006bb0:	d102      	bne.n	8006bb8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006bcc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d010      	beq.n	8006bf8 <HAL_DMA_Init+0x624>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d80c      	bhi.n	8006bf8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f002 facc 	bl	800917c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	e008      	b.n	8006c0a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	a7fdabf8 	.word	0xa7fdabf8
 8006c28:	cccccccd 	.word	0xcccccccd
 8006c2c:	40020010 	.word	0x40020010
 8006c30:	40020028 	.word	0x40020028
 8006c34:	40020040 	.word	0x40020040
 8006c38:	40020058 	.word	0x40020058
 8006c3c:	40020070 	.word	0x40020070
 8006c40:	40020088 	.word	0x40020088
 8006c44:	400200a0 	.word	0x400200a0
 8006c48:	400200b8 	.word	0x400200b8
 8006c4c:	40020410 	.word	0x40020410
 8006c50:	40020428 	.word	0x40020428
 8006c54:	40020440 	.word	0x40020440
 8006c58:	40020458 	.word	0x40020458
 8006c5c:	40020470 	.word	0x40020470
 8006c60:	40020488 	.word	0x40020488
 8006c64:	400204a0 	.word	0x400204a0
 8006c68:	400204b8 	.word	0x400204b8
 8006c6c:	58025408 	.word	0x58025408
 8006c70:	5802541c 	.word	0x5802541c
 8006c74:	58025430 	.word	0x58025430
 8006c78:	58025444 	.word	0x58025444
 8006c7c:	58025458 	.word	0x58025458
 8006c80:	5802546c 	.word	0x5802546c
 8006c84:	58025480 	.word	0x58025480
 8006c88:	58025494 	.word	0x58025494

08006c8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e226      	b.n	80070f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_DMA_Start_IT+0x2a>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e21f      	b.n	80070f6 <HAL_DMA_Start_IT+0x46a>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	f040 820a 	bne.w	80070e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a68      	ldr	r2, [pc, #416]	; (8006e80 <HAL_DMA_Start_IT+0x1f4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d04a      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a66      	ldr	r2, [pc, #408]	; (8006e84 <HAL_DMA_Start_IT+0x1f8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d045      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a65      	ldr	r2, [pc, #404]	; (8006e88 <HAL_DMA_Start_IT+0x1fc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d040      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a63      	ldr	r2, [pc, #396]	; (8006e8c <HAL_DMA_Start_IT+0x200>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d03b      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a62      	ldr	r2, [pc, #392]	; (8006e90 <HAL_DMA_Start_IT+0x204>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d036      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a60      	ldr	r2, [pc, #384]	; (8006e94 <HAL_DMA_Start_IT+0x208>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d031      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a5f      	ldr	r2, [pc, #380]	; (8006e98 <HAL_DMA_Start_IT+0x20c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d02c      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a5d      	ldr	r2, [pc, #372]	; (8006e9c <HAL_DMA_Start_IT+0x210>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d027      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a5c      	ldr	r2, [pc, #368]	; (8006ea0 <HAL_DMA_Start_IT+0x214>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d022      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a5a      	ldr	r2, [pc, #360]	; (8006ea4 <HAL_DMA_Start_IT+0x218>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d01d      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a59      	ldr	r2, [pc, #356]	; (8006ea8 <HAL_DMA_Start_IT+0x21c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d018      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a57      	ldr	r2, [pc, #348]	; (8006eac <HAL_DMA_Start_IT+0x220>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d013      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a56      	ldr	r2, [pc, #344]	; (8006eb0 <HAL_DMA_Start_IT+0x224>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00e      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a54      	ldr	r2, [pc, #336]	; (8006eb4 <HAL_DMA_Start_IT+0x228>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d009      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a53      	ldr	r2, [pc, #332]	; (8006eb8 <HAL_DMA_Start_IT+0x22c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d004      	beq.n	8006d7a <HAL_DMA_Start_IT+0xee>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a51      	ldr	r2, [pc, #324]	; (8006ebc <HAL_DMA_Start_IT+0x230>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d108      	bne.n	8006d8c <HAL_DMA_Start_IT+0x100>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0201 	bic.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	e007      	b.n	8006d9c <HAL_DMA_Start_IT+0x110>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0201 	bic.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f001 fe76 	bl	8008a94 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a34      	ldr	r2, [pc, #208]	; (8006e80 <HAL_DMA_Start_IT+0x1f4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d04a      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a33      	ldr	r2, [pc, #204]	; (8006e84 <HAL_DMA_Start_IT+0x1f8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d045      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a31      	ldr	r2, [pc, #196]	; (8006e88 <HAL_DMA_Start_IT+0x1fc>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d040      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a30      	ldr	r2, [pc, #192]	; (8006e8c <HAL_DMA_Start_IT+0x200>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d03b      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a2e      	ldr	r2, [pc, #184]	; (8006e90 <HAL_DMA_Start_IT+0x204>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d036      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a2d      	ldr	r2, [pc, #180]	; (8006e94 <HAL_DMA_Start_IT+0x208>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d031      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a2b      	ldr	r2, [pc, #172]	; (8006e98 <HAL_DMA_Start_IT+0x20c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d02c      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a2a      	ldr	r2, [pc, #168]	; (8006e9c <HAL_DMA_Start_IT+0x210>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d027      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a28      	ldr	r2, [pc, #160]	; (8006ea0 <HAL_DMA_Start_IT+0x214>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d022      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a27      	ldr	r2, [pc, #156]	; (8006ea4 <HAL_DMA_Start_IT+0x218>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d01d      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a25      	ldr	r2, [pc, #148]	; (8006ea8 <HAL_DMA_Start_IT+0x21c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d018      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a24      	ldr	r2, [pc, #144]	; (8006eac <HAL_DMA_Start_IT+0x220>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d013      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <HAL_DMA_Start_IT+0x224>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00e      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a21      	ldr	r2, [pc, #132]	; (8006eb4 <HAL_DMA_Start_IT+0x228>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d009      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1f      	ldr	r2, [pc, #124]	; (8006eb8 <HAL_DMA_Start_IT+0x22c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d004      	beq.n	8006e48 <HAL_DMA_Start_IT+0x1bc>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1e      	ldr	r2, [pc, #120]	; (8006ebc <HAL_DMA_Start_IT+0x230>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d101      	bne.n	8006e4c <HAL_DMA_Start_IT+0x1c0>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <HAL_DMA_Start_IT+0x1c2>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d036      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f023 021e 	bic.w	r2, r3, #30
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0216 	orr.w	r2, r2, #22
 8006e64:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d03e      	beq.n	8006eec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0208 	orr.w	r2, r2, #8
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e035      	b.n	8006eec <HAL_DMA_Start_IT+0x260>
 8006e80:	40020010 	.word	0x40020010
 8006e84:	40020028 	.word	0x40020028
 8006e88:	40020040 	.word	0x40020040
 8006e8c:	40020058 	.word	0x40020058
 8006e90:	40020070 	.word	0x40020070
 8006e94:	40020088 	.word	0x40020088
 8006e98:	400200a0 	.word	0x400200a0
 8006e9c:	400200b8 	.word	0x400200b8
 8006ea0:	40020410 	.word	0x40020410
 8006ea4:	40020428 	.word	0x40020428
 8006ea8:	40020440 	.word	0x40020440
 8006eac:	40020458 	.word	0x40020458
 8006eb0:	40020470 	.word	0x40020470
 8006eb4:	40020488 	.word	0x40020488
 8006eb8:	400204a0 	.word	0x400204a0
 8006ebc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f023 020e 	bic.w	r2, r3, #14
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 020a 	orr.w	r2, r2, #10
 8006ed2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0204 	orr.w	r2, r2, #4
 8006eea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a83      	ldr	r2, [pc, #524]	; (8007100 <HAL_DMA_Start_IT+0x474>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d072      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a82      	ldr	r2, [pc, #520]	; (8007104 <HAL_DMA_Start_IT+0x478>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d06d      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a80      	ldr	r2, [pc, #512]	; (8007108 <HAL_DMA_Start_IT+0x47c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d068      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a7f      	ldr	r2, [pc, #508]	; (800710c <HAL_DMA_Start_IT+0x480>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d063      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a7d      	ldr	r2, [pc, #500]	; (8007110 <HAL_DMA_Start_IT+0x484>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d05e      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a7c      	ldr	r2, [pc, #496]	; (8007114 <HAL_DMA_Start_IT+0x488>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d059      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a7a      	ldr	r2, [pc, #488]	; (8007118 <HAL_DMA_Start_IT+0x48c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d054      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a79      	ldr	r2, [pc, #484]	; (800711c <HAL_DMA_Start_IT+0x490>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d04f      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a77      	ldr	r2, [pc, #476]	; (8007120 <HAL_DMA_Start_IT+0x494>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d04a      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a76      	ldr	r2, [pc, #472]	; (8007124 <HAL_DMA_Start_IT+0x498>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d045      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a74      	ldr	r2, [pc, #464]	; (8007128 <HAL_DMA_Start_IT+0x49c>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d040      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a73      	ldr	r2, [pc, #460]	; (800712c <HAL_DMA_Start_IT+0x4a0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d03b      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a71      	ldr	r2, [pc, #452]	; (8007130 <HAL_DMA_Start_IT+0x4a4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d036      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a70      	ldr	r2, [pc, #448]	; (8007134 <HAL_DMA_Start_IT+0x4a8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d031      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a6e      	ldr	r2, [pc, #440]	; (8007138 <HAL_DMA_Start_IT+0x4ac>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d02c      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a6d      	ldr	r2, [pc, #436]	; (800713c <HAL_DMA_Start_IT+0x4b0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d027      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a6b      	ldr	r2, [pc, #428]	; (8007140 <HAL_DMA_Start_IT+0x4b4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d022      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a6a      	ldr	r2, [pc, #424]	; (8007144 <HAL_DMA_Start_IT+0x4b8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d01d      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a68      	ldr	r2, [pc, #416]	; (8007148 <HAL_DMA_Start_IT+0x4bc>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d018      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a67      	ldr	r2, [pc, #412]	; (800714c <HAL_DMA_Start_IT+0x4c0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d013      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a65      	ldr	r2, [pc, #404]	; (8007150 <HAL_DMA_Start_IT+0x4c4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00e      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a64      	ldr	r2, [pc, #400]	; (8007154 <HAL_DMA_Start_IT+0x4c8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d009      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a62      	ldr	r2, [pc, #392]	; (8007158 <HAL_DMA_Start_IT+0x4cc>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <HAL_DMA_Start_IT+0x350>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a61      	ldr	r2, [pc, #388]	; (800715c <HAL_DMA_Start_IT+0x4d0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d101      	bne.n	8006fe0 <HAL_DMA_Start_IT+0x354>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <HAL_DMA_Start_IT+0x356>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d01a      	beq.n	800701c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007002:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007008:	2b00      	cmp	r3, #0
 800700a:	d007      	beq.n	800701c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800701a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a37      	ldr	r2, [pc, #220]	; (8007100 <HAL_DMA_Start_IT+0x474>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d04a      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a36      	ldr	r2, [pc, #216]	; (8007104 <HAL_DMA_Start_IT+0x478>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d045      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a34      	ldr	r2, [pc, #208]	; (8007108 <HAL_DMA_Start_IT+0x47c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d040      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a33      	ldr	r2, [pc, #204]	; (800710c <HAL_DMA_Start_IT+0x480>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d03b      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a31      	ldr	r2, [pc, #196]	; (8007110 <HAL_DMA_Start_IT+0x484>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d036      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a30      	ldr	r2, [pc, #192]	; (8007114 <HAL_DMA_Start_IT+0x488>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d031      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2e      	ldr	r2, [pc, #184]	; (8007118 <HAL_DMA_Start_IT+0x48c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d02c      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2d      	ldr	r2, [pc, #180]	; (800711c <HAL_DMA_Start_IT+0x490>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d027      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2b      	ldr	r2, [pc, #172]	; (8007120 <HAL_DMA_Start_IT+0x494>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d022      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2a      	ldr	r2, [pc, #168]	; (8007124 <HAL_DMA_Start_IT+0x498>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d01d      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a28      	ldr	r2, [pc, #160]	; (8007128 <HAL_DMA_Start_IT+0x49c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d018      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a27      	ldr	r2, [pc, #156]	; (800712c <HAL_DMA_Start_IT+0x4a0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d013      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a25      	ldr	r2, [pc, #148]	; (8007130 <HAL_DMA_Start_IT+0x4a4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00e      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a24      	ldr	r2, [pc, #144]	; (8007134 <HAL_DMA_Start_IT+0x4a8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d009      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a22      	ldr	r2, [pc, #136]	; (8007138 <HAL_DMA_Start_IT+0x4ac>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d004      	beq.n	80070bc <HAL_DMA_Start_IT+0x430>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a21      	ldr	r2, [pc, #132]	; (800713c <HAL_DMA_Start_IT+0x4b0>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d108      	bne.n	80070ce <HAL_DMA_Start_IT+0x442>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e012      	b.n	80070f4 <HAL_DMA_Start_IT+0x468>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f042 0201 	orr.w	r2, r2, #1
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	e009      	b.n	80070f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40020010 	.word	0x40020010
 8007104:	40020028 	.word	0x40020028
 8007108:	40020040 	.word	0x40020040
 800710c:	40020058 	.word	0x40020058
 8007110:	40020070 	.word	0x40020070
 8007114:	40020088 	.word	0x40020088
 8007118:	400200a0 	.word	0x400200a0
 800711c:	400200b8 	.word	0x400200b8
 8007120:	40020410 	.word	0x40020410
 8007124:	40020428 	.word	0x40020428
 8007128:	40020440 	.word	0x40020440
 800712c:	40020458 	.word	0x40020458
 8007130:	40020470 	.word	0x40020470
 8007134:	40020488 	.word	0x40020488
 8007138:	400204a0 	.word	0x400204a0
 800713c:	400204b8 	.word	0x400204b8
 8007140:	58025408 	.word	0x58025408
 8007144:	5802541c 	.word	0x5802541c
 8007148:	58025430 	.word	0x58025430
 800714c:	58025444 	.word	0x58025444
 8007150:	58025458 	.word	0x58025458
 8007154:	5802546c 	.word	0x5802546c
 8007158:	58025480 	.word	0x58025480
 800715c:	58025494 	.word	0x58025494

08007160 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007168:	f7fd f90c 	bl	8004384 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e2dc      	b.n	8007732 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d008      	beq.n	8007196 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2280      	movs	r2, #128	; 0x80
 8007188:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e2cd      	b.n	8007732 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a76      	ldr	r2, [pc, #472]	; (8007374 <HAL_DMA_Abort+0x214>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d04a      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a74      	ldr	r2, [pc, #464]	; (8007378 <HAL_DMA_Abort+0x218>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d045      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a73      	ldr	r2, [pc, #460]	; (800737c <HAL_DMA_Abort+0x21c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d040      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a71      	ldr	r2, [pc, #452]	; (8007380 <HAL_DMA_Abort+0x220>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d03b      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a70      	ldr	r2, [pc, #448]	; (8007384 <HAL_DMA_Abort+0x224>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d036      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a6e      	ldr	r2, [pc, #440]	; (8007388 <HAL_DMA_Abort+0x228>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d031      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a6d      	ldr	r2, [pc, #436]	; (800738c <HAL_DMA_Abort+0x22c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d02c      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a6b      	ldr	r2, [pc, #428]	; (8007390 <HAL_DMA_Abort+0x230>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d027      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a6a      	ldr	r2, [pc, #424]	; (8007394 <HAL_DMA_Abort+0x234>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d022      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a68      	ldr	r2, [pc, #416]	; (8007398 <HAL_DMA_Abort+0x238>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01d      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a67      	ldr	r2, [pc, #412]	; (800739c <HAL_DMA_Abort+0x23c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d018      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a65      	ldr	r2, [pc, #404]	; (80073a0 <HAL_DMA_Abort+0x240>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d013      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a64      	ldr	r2, [pc, #400]	; (80073a4 <HAL_DMA_Abort+0x244>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00e      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a62      	ldr	r2, [pc, #392]	; (80073a8 <HAL_DMA_Abort+0x248>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d009      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a61      	ldr	r2, [pc, #388]	; (80073ac <HAL_DMA_Abort+0x24c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d004      	beq.n	8007236 <HAL_DMA_Abort+0xd6>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a5f      	ldr	r2, [pc, #380]	; (80073b0 <HAL_DMA_Abort+0x250>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d101      	bne.n	800723a <HAL_DMA_Abort+0xda>
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <HAL_DMA_Abort+0xdc>
 800723a:	2300      	movs	r3, #0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d013      	beq.n	8007268 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 021e 	bic.w	r2, r2, #30
 800724e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695a      	ldr	r2, [r3, #20]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800725e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e00a      	b.n	800727e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 020e 	bic.w	r2, r2, #14
 8007276:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a3c      	ldr	r2, [pc, #240]	; (8007374 <HAL_DMA_Abort+0x214>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d072      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a3a      	ldr	r2, [pc, #232]	; (8007378 <HAL_DMA_Abort+0x218>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d06d      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a39      	ldr	r2, [pc, #228]	; (800737c <HAL_DMA_Abort+0x21c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d068      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a37      	ldr	r2, [pc, #220]	; (8007380 <HAL_DMA_Abort+0x220>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d063      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a36      	ldr	r2, [pc, #216]	; (8007384 <HAL_DMA_Abort+0x224>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d05e      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a34      	ldr	r2, [pc, #208]	; (8007388 <HAL_DMA_Abort+0x228>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d059      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a33      	ldr	r2, [pc, #204]	; (800738c <HAL_DMA_Abort+0x22c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d054      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a31      	ldr	r2, [pc, #196]	; (8007390 <HAL_DMA_Abort+0x230>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d04f      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a30      	ldr	r2, [pc, #192]	; (8007394 <HAL_DMA_Abort+0x234>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d04a      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a2e      	ldr	r2, [pc, #184]	; (8007398 <HAL_DMA_Abort+0x238>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d045      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a2d      	ldr	r2, [pc, #180]	; (800739c <HAL_DMA_Abort+0x23c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d040      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2b      	ldr	r2, [pc, #172]	; (80073a0 <HAL_DMA_Abort+0x240>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d03b      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2a      	ldr	r2, [pc, #168]	; (80073a4 <HAL_DMA_Abort+0x244>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d036      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a28      	ldr	r2, [pc, #160]	; (80073a8 <HAL_DMA_Abort+0x248>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d031      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a27      	ldr	r2, [pc, #156]	; (80073ac <HAL_DMA_Abort+0x24c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d02c      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a25      	ldr	r2, [pc, #148]	; (80073b0 <HAL_DMA_Abort+0x250>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d027      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <HAL_DMA_Abort+0x254>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d022      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a22      	ldr	r2, [pc, #136]	; (80073b8 <HAL_DMA_Abort+0x258>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d01d      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a21      	ldr	r2, [pc, #132]	; (80073bc <HAL_DMA_Abort+0x25c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d018      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a1f      	ldr	r2, [pc, #124]	; (80073c0 <HAL_DMA_Abort+0x260>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d013      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a1e      	ldr	r2, [pc, #120]	; (80073c4 <HAL_DMA_Abort+0x264>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00e      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a1c      	ldr	r2, [pc, #112]	; (80073c8 <HAL_DMA_Abort+0x268>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d009      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <HAL_DMA_Abort+0x26c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d004      	beq.n	800736e <HAL_DMA_Abort+0x20e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a19      	ldr	r2, [pc, #100]	; (80073d0 <HAL_DMA_Abort+0x270>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d132      	bne.n	80073d4 <HAL_DMA_Abort+0x274>
 800736e:	2301      	movs	r3, #1
 8007370:	e031      	b.n	80073d6 <HAL_DMA_Abort+0x276>
 8007372:	bf00      	nop
 8007374:	40020010 	.word	0x40020010
 8007378:	40020028 	.word	0x40020028
 800737c:	40020040 	.word	0x40020040
 8007380:	40020058 	.word	0x40020058
 8007384:	40020070 	.word	0x40020070
 8007388:	40020088 	.word	0x40020088
 800738c:	400200a0 	.word	0x400200a0
 8007390:	400200b8 	.word	0x400200b8
 8007394:	40020410 	.word	0x40020410
 8007398:	40020428 	.word	0x40020428
 800739c:	40020440 	.word	0x40020440
 80073a0:	40020458 	.word	0x40020458
 80073a4:	40020470 	.word	0x40020470
 80073a8:	40020488 	.word	0x40020488
 80073ac:	400204a0 	.word	0x400204a0
 80073b0:	400204b8 	.word	0x400204b8
 80073b4:	58025408 	.word	0x58025408
 80073b8:	5802541c 	.word	0x5802541c
 80073bc:	58025430 	.word	0x58025430
 80073c0:	58025444 	.word	0x58025444
 80073c4:	58025458 	.word	0x58025458
 80073c8:	5802546c 	.word	0x5802546c
 80073cc:	58025480 	.word	0x58025480
 80073d0:	58025494 	.word	0x58025494
 80073d4:	2300      	movs	r3, #0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a6d      	ldr	r2, [pc, #436]	; (80075a4 <HAL_DMA_Abort+0x444>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d04a      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a6b      	ldr	r2, [pc, #428]	; (80075a8 <HAL_DMA_Abort+0x448>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d045      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a6a      	ldr	r2, [pc, #424]	; (80075ac <HAL_DMA_Abort+0x44c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d040      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a68      	ldr	r2, [pc, #416]	; (80075b0 <HAL_DMA_Abort+0x450>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d03b      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a67      	ldr	r2, [pc, #412]	; (80075b4 <HAL_DMA_Abort+0x454>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d036      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a65      	ldr	r2, [pc, #404]	; (80075b8 <HAL_DMA_Abort+0x458>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d031      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a64      	ldr	r2, [pc, #400]	; (80075bc <HAL_DMA_Abort+0x45c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d02c      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a62      	ldr	r2, [pc, #392]	; (80075c0 <HAL_DMA_Abort+0x460>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d027      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a61      	ldr	r2, [pc, #388]	; (80075c4 <HAL_DMA_Abort+0x464>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d022      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a5f      	ldr	r2, [pc, #380]	; (80075c8 <HAL_DMA_Abort+0x468>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01d      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a5e      	ldr	r2, [pc, #376]	; (80075cc <HAL_DMA_Abort+0x46c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d018      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a5c      	ldr	r2, [pc, #368]	; (80075d0 <HAL_DMA_Abort+0x470>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a5b      	ldr	r2, [pc, #364]	; (80075d4 <HAL_DMA_Abort+0x474>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a59      	ldr	r2, [pc, #356]	; (80075d8 <HAL_DMA_Abort+0x478>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a58      	ldr	r2, [pc, #352]	; (80075dc <HAL_DMA_Abort+0x47c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_DMA_Abort+0x32a>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a56      	ldr	r2, [pc, #344]	; (80075e0 <HAL_DMA_Abort+0x480>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d108      	bne.n	800749c <HAL_DMA_Abort+0x33c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0201 	bic.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	e007      	b.n	80074ac <HAL_DMA_Abort+0x34c>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0201 	bic.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80074ac:	e013      	b.n	80074d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074ae:	f7fc ff69 	bl	8004384 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b05      	cmp	r3, #5
 80074ba:	d90c      	bls.n	80074d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2203      	movs	r2, #3
 80074c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e12d      	b.n	8007732 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e5      	bne.n	80074ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a2f      	ldr	r2, [pc, #188]	; (80075a4 <HAL_DMA_Abort+0x444>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d04a      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a2d      	ldr	r2, [pc, #180]	; (80075a8 <HAL_DMA_Abort+0x448>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d045      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a2c      	ldr	r2, [pc, #176]	; (80075ac <HAL_DMA_Abort+0x44c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d040      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a2a      	ldr	r2, [pc, #168]	; (80075b0 <HAL_DMA_Abort+0x450>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d03b      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a29      	ldr	r2, [pc, #164]	; (80075b4 <HAL_DMA_Abort+0x454>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d036      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a27      	ldr	r2, [pc, #156]	; (80075b8 <HAL_DMA_Abort+0x458>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d031      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a26      	ldr	r2, [pc, #152]	; (80075bc <HAL_DMA_Abort+0x45c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d02c      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a24      	ldr	r2, [pc, #144]	; (80075c0 <HAL_DMA_Abort+0x460>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d027      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a23      	ldr	r2, [pc, #140]	; (80075c4 <HAL_DMA_Abort+0x464>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d022      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a21      	ldr	r2, [pc, #132]	; (80075c8 <HAL_DMA_Abort+0x468>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01d      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a20      	ldr	r2, [pc, #128]	; (80075cc <HAL_DMA_Abort+0x46c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d018      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1e      	ldr	r2, [pc, #120]	; (80075d0 <HAL_DMA_Abort+0x470>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1d      	ldr	r2, [pc, #116]	; (80075d4 <HAL_DMA_Abort+0x474>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1b      	ldr	r2, [pc, #108]	; (80075d8 <HAL_DMA_Abort+0x478>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1a      	ldr	r2, [pc, #104]	; (80075dc <HAL_DMA_Abort+0x47c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_DMA_Abort+0x422>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a18      	ldr	r2, [pc, #96]	; (80075e0 <HAL_DMA_Abort+0x480>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d101      	bne.n	8007586 <HAL_DMA_Abort+0x426>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <HAL_DMA_Abort+0x428>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d02b      	beq.n	80075e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007590:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007596:	f003 031f 	and.w	r3, r3, #31
 800759a:	223f      	movs	r2, #63	; 0x3f
 800759c:	409a      	lsls	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	609a      	str	r2, [r3, #8]
 80075a2:	e02a      	b.n	80075fa <HAL_DMA_Abort+0x49a>
 80075a4:	40020010 	.word	0x40020010
 80075a8:	40020028 	.word	0x40020028
 80075ac:	40020040 	.word	0x40020040
 80075b0:	40020058 	.word	0x40020058
 80075b4:	40020070 	.word	0x40020070
 80075b8:	40020088 	.word	0x40020088
 80075bc:	400200a0 	.word	0x400200a0
 80075c0:	400200b8 	.word	0x400200b8
 80075c4:	40020410 	.word	0x40020410
 80075c8:	40020428 	.word	0x40020428
 80075cc:	40020440 	.word	0x40020440
 80075d0:	40020458 	.word	0x40020458
 80075d4:	40020470 	.word	0x40020470
 80075d8:	40020488 	.word	0x40020488
 80075dc:	400204a0 	.word	0x400204a0
 80075e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2201      	movs	r2, #1
 80075f4:	409a      	lsls	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a4f      	ldr	r2, [pc, #316]	; (800773c <HAL_DMA_Abort+0x5dc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d072      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a4d      	ldr	r2, [pc, #308]	; (8007740 <HAL_DMA_Abort+0x5e0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d06d      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a4c      	ldr	r2, [pc, #304]	; (8007744 <HAL_DMA_Abort+0x5e4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d068      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a4a      	ldr	r2, [pc, #296]	; (8007748 <HAL_DMA_Abort+0x5e8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d063      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a49      	ldr	r2, [pc, #292]	; (800774c <HAL_DMA_Abort+0x5ec>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d05e      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a47      	ldr	r2, [pc, #284]	; (8007750 <HAL_DMA_Abort+0x5f0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d059      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a46      	ldr	r2, [pc, #280]	; (8007754 <HAL_DMA_Abort+0x5f4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d054      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a44      	ldr	r2, [pc, #272]	; (8007758 <HAL_DMA_Abort+0x5f8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d04f      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a43      	ldr	r2, [pc, #268]	; (800775c <HAL_DMA_Abort+0x5fc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d04a      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a41      	ldr	r2, [pc, #260]	; (8007760 <HAL_DMA_Abort+0x600>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d045      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a40      	ldr	r2, [pc, #256]	; (8007764 <HAL_DMA_Abort+0x604>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d040      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a3e      	ldr	r2, [pc, #248]	; (8007768 <HAL_DMA_Abort+0x608>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d03b      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a3d      	ldr	r2, [pc, #244]	; (800776c <HAL_DMA_Abort+0x60c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d036      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a3b      	ldr	r2, [pc, #236]	; (8007770 <HAL_DMA_Abort+0x610>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d031      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a3a      	ldr	r2, [pc, #232]	; (8007774 <HAL_DMA_Abort+0x614>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d02c      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a38      	ldr	r2, [pc, #224]	; (8007778 <HAL_DMA_Abort+0x618>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d027      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a37      	ldr	r2, [pc, #220]	; (800777c <HAL_DMA_Abort+0x61c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d022      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a35      	ldr	r2, [pc, #212]	; (8007780 <HAL_DMA_Abort+0x620>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d01d      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a34      	ldr	r2, [pc, #208]	; (8007784 <HAL_DMA_Abort+0x624>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d018      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a32      	ldr	r2, [pc, #200]	; (8007788 <HAL_DMA_Abort+0x628>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a31      	ldr	r2, [pc, #196]	; (800778c <HAL_DMA_Abort+0x62c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00e      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a2f      	ldr	r2, [pc, #188]	; (8007790 <HAL_DMA_Abort+0x630>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d009      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a2e      	ldr	r2, [pc, #184]	; (8007794 <HAL_DMA_Abort+0x634>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d004      	beq.n	80076ea <HAL_DMA_Abort+0x58a>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a2c      	ldr	r2, [pc, #176]	; (8007798 <HAL_DMA_Abort+0x638>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d101      	bne.n	80076ee <HAL_DMA_Abort+0x58e>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <HAL_DMA_Abort+0x590>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d015      	beq.n	8007720 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00c      	beq.n	8007720 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007714:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800771e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	40020010 	.word	0x40020010
 8007740:	40020028 	.word	0x40020028
 8007744:	40020040 	.word	0x40020040
 8007748:	40020058 	.word	0x40020058
 800774c:	40020070 	.word	0x40020070
 8007750:	40020088 	.word	0x40020088
 8007754:	400200a0 	.word	0x400200a0
 8007758:	400200b8 	.word	0x400200b8
 800775c:	40020410 	.word	0x40020410
 8007760:	40020428 	.word	0x40020428
 8007764:	40020440 	.word	0x40020440
 8007768:	40020458 	.word	0x40020458
 800776c:	40020470 	.word	0x40020470
 8007770:	40020488 	.word	0x40020488
 8007774:	400204a0 	.word	0x400204a0
 8007778:	400204b8 	.word	0x400204b8
 800777c:	58025408 	.word	0x58025408
 8007780:	5802541c 	.word	0x5802541c
 8007784:	58025430 	.word	0x58025430
 8007788:	58025444 	.word	0x58025444
 800778c:	58025458 	.word	0x58025458
 8007790:	5802546c 	.word	0x5802546c
 8007794:	58025480 	.word	0x58025480
 8007798:	58025494 	.word	0x58025494

0800779c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e237      	b.n	8007c1e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d004      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2280      	movs	r2, #128	; 0x80
 80077be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e22c      	b.n	8007c1e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a5c      	ldr	r2, [pc, #368]	; (800793c <HAL_DMA_Abort_IT+0x1a0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d04a      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a5b      	ldr	r2, [pc, #364]	; (8007940 <HAL_DMA_Abort_IT+0x1a4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d045      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a59      	ldr	r2, [pc, #356]	; (8007944 <HAL_DMA_Abort_IT+0x1a8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d040      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a58      	ldr	r2, [pc, #352]	; (8007948 <HAL_DMA_Abort_IT+0x1ac>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d03b      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a56      	ldr	r2, [pc, #344]	; (800794c <HAL_DMA_Abort_IT+0x1b0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d036      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a55      	ldr	r2, [pc, #340]	; (8007950 <HAL_DMA_Abort_IT+0x1b4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d031      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a53      	ldr	r2, [pc, #332]	; (8007954 <HAL_DMA_Abort_IT+0x1b8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d02c      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a52      	ldr	r2, [pc, #328]	; (8007958 <HAL_DMA_Abort_IT+0x1bc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d027      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a50      	ldr	r2, [pc, #320]	; (800795c <HAL_DMA_Abort_IT+0x1c0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d022      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a4f      	ldr	r2, [pc, #316]	; (8007960 <HAL_DMA_Abort_IT+0x1c4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d01d      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a4d      	ldr	r2, [pc, #308]	; (8007964 <HAL_DMA_Abort_IT+0x1c8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d018      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a4c      	ldr	r2, [pc, #304]	; (8007968 <HAL_DMA_Abort_IT+0x1cc>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d013      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a4a      	ldr	r2, [pc, #296]	; (800796c <HAL_DMA_Abort_IT+0x1d0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00e      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a49      	ldr	r2, [pc, #292]	; (8007970 <HAL_DMA_Abort_IT+0x1d4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d009      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a47      	ldr	r2, [pc, #284]	; (8007974 <HAL_DMA_Abort_IT+0x1d8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <HAL_DMA_Abort_IT+0xc8>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a46      	ldr	r2, [pc, #280]	; (8007978 <HAL_DMA_Abort_IT+0x1dc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d101      	bne.n	8007868 <HAL_DMA_Abort_IT+0xcc>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <HAL_DMA_Abort_IT+0xce>
 8007868:	2300      	movs	r3, #0
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8086 	beq.w	800797c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2204      	movs	r2, #4
 8007874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2f      	ldr	r2, [pc, #188]	; (800793c <HAL_DMA_Abort_IT+0x1a0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d04a      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a2e      	ldr	r2, [pc, #184]	; (8007940 <HAL_DMA_Abort_IT+0x1a4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d045      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2c      	ldr	r2, [pc, #176]	; (8007944 <HAL_DMA_Abort_IT+0x1a8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d040      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a2b      	ldr	r2, [pc, #172]	; (8007948 <HAL_DMA_Abort_IT+0x1ac>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d03b      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a29      	ldr	r2, [pc, #164]	; (800794c <HAL_DMA_Abort_IT+0x1b0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d036      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a28      	ldr	r2, [pc, #160]	; (8007950 <HAL_DMA_Abort_IT+0x1b4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d031      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a26      	ldr	r2, [pc, #152]	; (8007954 <HAL_DMA_Abort_IT+0x1b8>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d02c      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a25      	ldr	r2, [pc, #148]	; (8007958 <HAL_DMA_Abort_IT+0x1bc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d027      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a23      	ldr	r2, [pc, #140]	; (800795c <HAL_DMA_Abort_IT+0x1c0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d022      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a22      	ldr	r2, [pc, #136]	; (8007960 <HAL_DMA_Abort_IT+0x1c4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d01d      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a20      	ldr	r2, [pc, #128]	; (8007964 <HAL_DMA_Abort_IT+0x1c8>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1f      	ldr	r2, [pc, #124]	; (8007968 <HAL_DMA_Abort_IT+0x1cc>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1d      	ldr	r2, [pc, #116]	; (800796c <HAL_DMA_Abort_IT+0x1d0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1c      	ldr	r2, [pc, #112]	; (8007970 <HAL_DMA_Abort_IT+0x1d4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a1a      	ldr	r2, [pc, #104]	; (8007974 <HAL_DMA_Abort_IT+0x1d8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_DMA_Abort_IT+0x17c>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a19      	ldr	r2, [pc, #100]	; (8007978 <HAL_DMA_Abort_IT+0x1dc>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d108      	bne.n	800792a <HAL_DMA_Abort_IT+0x18e>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0201 	bic.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e178      	b.n	8007c1c <HAL_DMA_Abort_IT+0x480>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0201 	bic.w	r2, r2, #1
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e16f      	b.n	8007c1c <HAL_DMA_Abort_IT+0x480>
 800793c:	40020010 	.word	0x40020010
 8007940:	40020028 	.word	0x40020028
 8007944:	40020040 	.word	0x40020040
 8007948:	40020058 	.word	0x40020058
 800794c:	40020070 	.word	0x40020070
 8007950:	40020088 	.word	0x40020088
 8007954:	400200a0 	.word	0x400200a0
 8007958:	400200b8 	.word	0x400200b8
 800795c:	40020410 	.word	0x40020410
 8007960:	40020428 	.word	0x40020428
 8007964:	40020440 	.word	0x40020440
 8007968:	40020458 	.word	0x40020458
 800796c:	40020470 	.word	0x40020470
 8007970:	40020488 	.word	0x40020488
 8007974:	400204a0 	.word	0x400204a0
 8007978:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 020e 	bic.w	r2, r2, #14
 800798a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a6c      	ldr	r2, [pc, #432]	; (8007b44 <HAL_DMA_Abort_IT+0x3a8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d04a      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a6b      	ldr	r2, [pc, #428]	; (8007b48 <HAL_DMA_Abort_IT+0x3ac>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d045      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a69      	ldr	r2, [pc, #420]	; (8007b4c <HAL_DMA_Abort_IT+0x3b0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d040      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a68      	ldr	r2, [pc, #416]	; (8007b50 <HAL_DMA_Abort_IT+0x3b4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d03b      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a66      	ldr	r2, [pc, #408]	; (8007b54 <HAL_DMA_Abort_IT+0x3b8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d036      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a65      	ldr	r2, [pc, #404]	; (8007b58 <HAL_DMA_Abort_IT+0x3bc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d031      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a63      	ldr	r2, [pc, #396]	; (8007b5c <HAL_DMA_Abort_IT+0x3c0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d02c      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a62      	ldr	r2, [pc, #392]	; (8007b60 <HAL_DMA_Abort_IT+0x3c4>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d027      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a60      	ldr	r2, [pc, #384]	; (8007b64 <HAL_DMA_Abort_IT+0x3c8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d022      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a5f      	ldr	r2, [pc, #380]	; (8007b68 <HAL_DMA_Abort_IT+0x3cc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d01d      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a5d      	ldr	r2, [pc, #372]	; (8007b6c <HAL_DMA_Abort_IT+0x3d0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d018      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a5c      	ldr	r2, [pc, #368]	; (8007b70 <HAL_DMA_Abort_IT+0x3d4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d013      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a5a      	ldr	r2, [pc, #360]	; (8007b74 <HAL_DMA_Abort_IT+0x3d8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00e      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a59      	ldr	r2, [pc, #356]	; (8007b78 <HAL_DMA_Abort_IT+0x3dc>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d009      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a57      	ldr	r2, [pc, #348]	; (8007b7c <HAL_DMA_Abort_IT+0x3e0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <HAL_DMA_Abort_IT+0x290>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a56      	ldr	r2, [pc, #344]	; (8007b80 <HAL_DMA_Abort_IT+0x3e4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d108      	bne.n	8007a3e <HAL_DMA_Abort_IT+0x2a2>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0201 	bic.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e007      	b.n	8007a4e <HAL_DMA_Abort_IT+0x2b2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0201 	bic.w	r2, r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a3c      	ldr	r2, [pc, #240]	; (8007b44 <HAL_DMA_Abort_IT+0x3a8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d072      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a3a      	ldr	r2, [pc, #232]	; (8007b48 <HAL_DMA_Abort_IT+0x3ac>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d06d      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a39      	ldr	r2, [pc, #228]	; (8007b4c <HAL_DMA_Abort_IT+0x3b0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d068      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a37      	ldr	r2, [pc, #220]	; (8007b50 <HAL_DMA_Abort_IT+0x3b4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d063      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a36      	ldr	r2, [pc, #216]	; (8007b54 <HAL_DMA_Abort_IT+0x3b8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d05e      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a34      	ldr	r2, [pc, #208]	; (8007b58 <HAL_DMA_Abort_IT+0x3bc>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d059      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a33      	ldr	r2, [pc, #204]	; (8007b5c <HAL_DMA_Abort_IT+0x3c0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d054      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a31      	ldr	r2, [pc, #196]	; (8007b60 <HAL_DMA_Abort_IT+0x3c4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d04f      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a30      	ldr	r2, [pc, #192]	; (8007b64 <HAL_DMA_Abort_IT+0x3c8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d04a      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a2e      	ldr	r2, [pc, #184]	; (8007b68 <HAL_DMA_Abort_IT+0x3cc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d045      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a2d      	ldr	r2, [pc, #180]	; (8007b6c <HAL_DMA_Abort_IT+0x3d0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d040      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a2b      	ldr	r2, [pc, #172]	; (8007b70 <HAL_DMA_Abort_IT+0x3d4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d03b      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a2a      	ldr	r2, [pc, #168]	; (8007b74 <HAL_DMA_Abort_IT+0x3d8>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d036      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a28      	ldr	r2, [pc, #160]	; (8007b78 <HAL_DMA_Abort_IT+0x3dc>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d031      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a27      	ldr	r2, [pc, #156]	; (8007b7c <HAL_DMA_Abort_IT+0x3e0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d02c      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a25      	ldr	r2, [pc, #148]	; (8007b80 <HAL_DMA_Abort_IT+0x3e4>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d027      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a24      	ldr	r2, [pc, #144]	; (8007b84 <HAL_DMA_Abort_IT+0x3e8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d022      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a22      	ldr	r2, [pc, #136]	; (8007b88 <HAL_DMA_Abort_IT+0x3ec>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d01d      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a21      	ldr	r2, [pc, #132]	; (8007b8c <HAL_DMA_Abort_IT+0x3f0>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d018      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <HAL_DMA_Abort_IT+0x3f4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d013      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a1e      	ldr	r2, [pc, #120]	; (8007b94 <HAL_DMA_Abort_IT+0x3f8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00e      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1c      	ldr	r2, [pc, #112]	; (8007b98 <HAL_DMA_Abort_IT+0x3fc>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d009      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1b      	ldr	r2, [pc, #108]	; (8007b9c <HAL_DMA_Abort_IT+0x400>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d004      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x3a2>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a19      	ldr	r2, [pc, #100]	; (8007ba0 <HAL_DMA_Abort_IT+0x404>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d132      	bne.n	8007ba4 <HAL_DMA_Abort_IT+0x408>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e031      	b.n	8007ba6 <HAL_DMA_Abort_IT+0x40a>
 8007b42:	bf00      	nop
 8007b44:	40020010 	.word	0x40020010
 8007b48:	40020028 	.word	0x40020028
 8007b4c:	40020040 	.word	0x40020040
 8007b50:	40020058 	.word	0x40020058
 8007b54:	40020070 	.word	0x40020070
 8007b58:	40020088 	.word	0x40020088
 8007b5c:	400200a0 	.word	0x400200a0
 8007b60:	400200b8 	.word	0x400200b8
 8007b64:	40020410 	.word	0x40020410
 8007b68:	40020428 	.word	0x40020428
 8007b6c:	40020440 	.word	0x40020440
 8007b70:	40020458 	.word	0x40020458
 8007b74:	40020470 	.word	0x40020470
 8007b78:	40020488 	.word	0x40020488
 8007b7c:	400204a0 	.word	0x400204a0
 8007b80:	400204b8 	.word	0x400204b8
 8007b84:	58025408 	.word	0x58025408
 8007b88:	5802541c 	.word	0x5802541c
 8007b8c:	58025430 	.word	0x58025430
 8007b90:	58025444 	.word	0x58025444
 8007b94:	58025458 	.word	0x58025458
 8007b98:	5802546c 	.word	0x5802546c
 8007b9c:	58025480 	.word	0x58025480
 8007ba0:	58025494 	.word	0x58025494
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d028      	beq.n	8007bfc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bb8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc4:	f003 031f 	and.w	r3, r3, #31
 8007bc8:	2201      	movs	r2, #1
 8007bca:	409a      	lsls	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007bd8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00c      	beq.n	8007bfc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bf0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007bfa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop

08007c28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08a      	sub	sp, #40	; 0x28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007c34:	4b67      	ldr	r3, [pc, #412]	; (8007dd4 <HAL_DMA_IRQHandler+0x1ac>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a67      	ldr	r2, [pc, #412]	; (8007dd8 <HAL_DMA_IRQHandler+0x1b0>)
 8007c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3e:	0a9b      	lsrs	r3, r3, #10
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a5f      	ldr	r2, [pc, #380]	; (8007ddc <HAL_DMA_IRQHandler+0x1b4>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d04a      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a5d      	ldr	r2, [pc, #372]	; (8007de0 <HAL_DMA_IRQHandler+0x1b8>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d045      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a5c      	ldr	r2, [pc, #368]	; (8007de4 <HAL_DMA_IRQHandler+0x1bc>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d040      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a5a      	ldr	r2, [pc, #360]	; (8007de8 <HAL_DMA_IRQHandler+0x1c0>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d03b      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a59      	ldr	r2, [pc, #356]	; (8007dec <HAL_DMA_IRQHandler+0x1c4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d036      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a57      	ldr	r2, [pc, #348]	; (8007df0 <HAL_DMA_IRQHandler+0x1c8>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d031      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a56      	ldr	r2, [pc, #344]	; (8007df4 <HAL_DMA_IRQHandler+0x1cc>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d02c      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a54      	ldr	r2, [pc, #336]	; (8007df8 <HAL_DMA_IRQHandler+0x1d0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d027      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a53      	ldr	r2, [pc, #332]	; (8007dfc <HAL_DMA_IRQHandler+0x1d4>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d022      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a51      	ldr	r2, [pc, #324]	; (8007e00 <HAL_DMA_IRQHandler+0x1d8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d01d      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a50      	ldr	r2, [pc, #320]	; (8007e04 <HAL_DMA_IRQHandler+0x1dc>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d018      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a4e      	ldr	r2, [pc, #312]	; (8007e08 <HAL_DMA_IRQHandler+0x1e0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d013      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a4d      	ldr	r2, [pc, #308]	; (8007e0c <HAL_DMA_IRQHandler+0x1e4>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00e      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a4b      	ldr	r2, [pc, #300]	; (8007e10 <HAL_DMA_IRQHandler+0x1e8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d009      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a4a      	ldr	r2, [pc, #296]	; (8007e14 <HAL_DMA_IRQHandler+0x1ec>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d004      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xd2>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a48      	ldr	r2, [pc, #288]	; (8007e18 <HAL_DMA_IRQHandler+0x1f0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d101      	bne.n	8007cfe <HAL_DMA_IRQHandler+0xd6>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e000      	b.n	8007d00 <HAL_DMA_IRQHandler+0xd8>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 842b 	beq.w	800855c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d0a:	f003 031f 	and.w	r3, r3, #31
 8007d0e:	2208      	movs	r2, #8
 8007d10:	409a      	lsls	r2, r3
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	4013      	ands	r3, r2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 80a2 	beq.w	8007e60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a2e      	ldr	r2, [pc, #184]	; (8007ddc <HAL_DMA_IRQHandler+0x1b4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d04a      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a2d      	ldr	r2, [pc, #180]	; (8007de0 <HAL_DMA_IRQHandler+0x1b8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d045      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a2b      	ldr	r2, [pc, #172]	; (8007de4 <HAL_DMA_IRQHandler+0x1bc>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d040      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a2a      	ldr	r2, [pc, #168]	; (8007de8 <HAL_DMA_IRQHandler+0x1c0>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d03b      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a28      	ldr	r2, [pc, #160]	; (8007dec <HAL_DMA_IRQHandler+0x1c4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d036      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a27      	ldr	r2, [pc, #156]	; (8007df0 <HAL_DMA_IRQHandler+0x1c8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d031      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a25      	ldr	r2, [pc, #148]	; (8007df4 <HAL_DMA_IRQHandler+0x1cc>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d02c      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a24      	ldr	r2, [pc, #144]	; (8007df8 <HAL_DMA_IRQHandler+0x1d0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d027      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a22      	ldr	r2, [pc, #136]	; (8007dfc <HAL_DMA_IRQHandler+0x1d4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d022      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <HAL_DMA_IRQHandler+0x1d8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d01d      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1f      	ldr	r2, [pc, #124]	; (8007e04 <HAL_DMA_IRQHandler+0x1dc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d018      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1e      	ldr	r2, [pc, #120]	; (8007e08 <HAL_DMA_IRQHandler+0x1e0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d013      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a1c      	ldr	r2, [pc, #112]	; (8007e0c <HAL_DMA_IRQHandler+0x1e4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00e      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <HAL_DMA_IRQHandler+0x1e8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d009      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a19      	ldr	r2, [pc, #100]	; (8007e14 <HAL_DMA_IRQHandler+0x1ec>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x194>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <HAL_DMA_IRQHandler+0x1f0>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d12f      	bne.n	8007e1c <HAL_DMA_IRQHandler+0x1f4>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bf14      	ite	ne
 8007dca:	2301      	movne	r3, #1
 8007dcc:	2300      	moveq	r3, #0
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	e02e      	b.n	8007e30 <HAL_DMA_IRQHandler+0x208>
 8007dd2:	bf00      	nop
 8007dd4:	24000088 	.word	0x24000088
 8007dd8:	1b4e81b5 	.word	0x1b4e81b5
 8007ddc:	40020010 	.word	0x40020010
 8007de0:	40020028 	.word	0x40020028
 8007de4:	40020040 	.word	0x40020040
 8007de8:	40020058 	.word	0x40020058
 8007dec:	40020070 	.word	0x40020070
 8007df0:	40020088 	.word	0x40020088
 8007df4:	400200a0 	.word	0x400200a0
 8007df8:	400200b8 	.word	0x400200b8
 8007dfc:	40020410 	.word	0x40020410
 8007e00:	40020428 	.word	0x40020428
 8007e04:	40020440 	.word	0x40020440
 8007e08:	40020458 	.word	0x40020458
 8007e0c:	40020470 	.word	0x40020470
 8007e10:	40020488 	.word	0x40020488
 8007e14:	400204a0 	.word	0x400204a0
 8007e18:	400204b8 	.word	0x400204b8
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bf14      	ite	ne
 8007e2a:	2301      	movne	r3, #1
 8007e2c:	2300      	moveq	r3, #0
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d015      	beq.n	8007e60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0204 	bic.w	r2, r2, #4
 8007e42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e48:	f003 031f 	and.w	r3, r3, #31
 8007e4c:	2208      	movs	r2, #8
 8007e4e:	409a      	lsls	r2, r3
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e58:	f043 0201 	orr.w	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e64:	f003 031f 	and.w	r3, r3, #31
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d06e      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a69      	ldr	r2, [pc, #420]	; (8008020 <HAL_DMA_IRQHandler+0x3f8>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d04a      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a67      	ldr	r2, [pc, #412]	; (8008024 <HAL_DMA_IRQHandler+0x3fc>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d045      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a66      	ldr	r2, [pc, #408]	; (8008028 <HAL_DMA_IRQHandler+0x400>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d040      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a64      	ldr	r2, [pc, #400]	; (800802c <HAL_DMA_IRQHandler+0x404>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d03b      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a63      	ldr	r2, [pc, #396]	; (8008030 <HAL_DMA_IRQHandler+0x408>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d036      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a61      	ldr	r2, [pc, #388]	; (8008034 <HAL_DMA_IRQHandler+0x40c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d031      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a60      	ldr	r2, [pc, #384]	; (8008038 <HAL_DMA_IRQHandler+0x410>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d02c      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a5e      	ldr	r2, [pc, #376]	; (800803c <HAL_DMA_IRQHandler+0x414>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d027      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a5d      	ldr	r2, [pc, #372]	; (8008040 <HAL_DMA_IRQHandler+0x418>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d022      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a5b      	ldr	r2, [pc, #364]	; (8008044 <HAL_DMA_IRQHandler+0x41c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d01d      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a5a      	ldr	r2, [pc, #360]	; (8008048 <HAL_DMA_IRQHandler+0x420>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d018      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a58      	ldr	r2, [pc, #352]	; (800804c <HAL_DMA_IRQHandler+0x424>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a57      	ldr	r2, [pc, #348]	; (8008050 <HAL_DMA_IRQHandler+0x428>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00e      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a55      	ldr	r2, [pc, #340]	; (8008054 <HAL_DMA_IRQHandler+0x42c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d009      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a54      	ldr	r2, [pc, #336]	; (8008058 <HAL_DMA_IRQHandler+0x430>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d004      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x2ee>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a52      	ldr	r2, [pc, #328]	; (800805c <HAL_DMA_IRQHandler+0x434>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d10a      	bne.n	8007f2c <HAL_DMA_IRQHandler+0x304>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	bf14      	ite	ne
 8007f24:	2301      	movne	r3, #1
 8007f26:	2300      	moveq	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	e003      	b.n	8007f34 <HAL_DMA_IRQHandler+0x30c>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2300      	movs	r3, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00d      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f3c:	f003 031f 	and.w	r3, r3, #31
 8007f40:	2201      	movs	r2, #1
 8007f42:	409a      	lsls	r2, r3
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4c:	f043 0202 	orr.w	r2, r3, #2
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f58:	f003 031f 	and.w	r3, r3, #31
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	409a      	lsls	r2, r3
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	4013      	ands	r3, r2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 808f 	beq.w	8008088 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a2c      	ldr	r2, [pc, #176]	; (8008020 <HAL_DMA_IRQHandler+0x3f8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d04a      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a2a      	ldr	r2, [pc, #168]	; (8008024 <HAL_DMA_IRQHandler+0x3fc>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d045      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a29      	ldr	r2, [pc, #164]	; (8008028 <HAL_DMA_IRQHandler+0x400>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d040      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a27      	ldr	r2, [pc, #156]	; (800802c <HAL_DMA_IRQHandler+0x404>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d03b      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a26      	ldr	r2, [pc, #152]	; (8008030 <HAL_DMA_IRQHandler+0x408>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d036      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a24      	ldr	r2, [pc, #144]	; (8008034 <HAL_DMA_IRQHandler+0x40c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d031      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a23      	ldr	r2, [pc, #140]	; (8008038 <HAL_DMA_IRQHandler+0x410>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d02c      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a21      	ldr	r2, [pc, #132]	; (800803c <HAL_DMA_IRQHandler+0x414>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d027      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a20      	ldr	r2, [pc, #128]	; (8008040 <HAL_DMA_IRQHandler+0x418>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d022      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1e      	ldr	r2, [pc, #120]	; (8008044 <HAL_DMA_IRQHandler+0x41c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d01d      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1d      	ldr	r2, [pc, #116]	; (8008048 <HAL_DMA_IRQHandler+0x420>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d018      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1b      	ldr	r2, [pc, #108]	; (800804c <HAL_DMA_IRQHandler+0x424>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1a      	ldr	r2, [pc, #104]	; (8008050 <HAL_DMA_IRQHandler+0x428>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00e      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a18      	ldr	r2, [pc, #96]	; (8008054 <HAL_DMA_IRQHandler+0x42c>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d009      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <HAL_DMA_IRQHandler+0x430>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d004      	beq.n	800800a <HAL_DMA_IRQHandler+0x3e2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a15      	ldr	r2, [pc, #84]	; (800805c <HAL_DMA_IRQHandler+0x434>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d12a      	bne.n	8008060 <HAL_DMA_IRQHandler+0x438>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	bf14      	ite	ne
 8008018:	2301      	movne	r3, #1
 800801a:	2300      	moveq	r3, #0
 800801c:	b2db      	uxtb	r3, r3
 800801e:	e023      	b.n	8008068 <HAL_DMA_IRQHandler+0x440>
 8008020:	40020010 	.word	0x40020010
 8008024:	40020028 	.word	0x40020028
 8008028:	40020040 	.word	0x40020040
 800802c:	40020058 	.word	0x40020058
 8008030:	40020070 	.word	0x40020070
 8008034:	40020088 	.word	0x40020088
 8008038:	400200a0 	.word	0x400200a0
 800803c:	400200b8 	.word	0x400200b8
 8008040:	40020410 	.word	0x40020410
 8008044:	40020428 	.word	0x40020428
 8008048:	40020440 	.word	0x40020440
 800804c:	40020458 	.word	0x40020458
 8008050:	40020470 	.word	0x40020470
 8008054:	40020488 	.word	0x40020488
 8008058:	400204a0 	.word	0x400204a0
 800805c:	400204b8 	.word	0x400204b8
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00d      	beq.n	8008088 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	2204      	movs	r2, #4
 8008076:	409a      	lsls	r2, r3
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008080:	f043 0204 	orr.w	r2, r3, #4
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808c:	f003 031f 	and.w	r3, r3, #31
 8008090:	2210      	movs	r2, #16
 8008092:	409a      	lsls	r2, r3
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	4013      	ands	r3, r2
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80a6 	beq.w	80081ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a85      	ldr	r2, [pc, #532]	; (80082b8 <HAL_DMA_IRQHandler+0x690>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d04a      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a83      	ldr	r2, [pc, #524]	; (80082bc <HAL_DMA_IRQHandler+0x694>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d045      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a82      	ldr	r2, [pc, #520]	; (80082c0 <HAL_DMA_IRQHandler+0x698>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d040      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a80      	ldr	r2, [pc, #512]	; (80082c4 <HAL_DMA_IRQHandler+0x69c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d03b      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a7f      	ldr	r2, [pc, #508]	; (80082c8 <HAL_DMA_IRQHandler+0x6a0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d036      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a7d      	ldr	r2, [pc, #500]	; (80082cc <HAL_DMA_IRQHandler+0x6a4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d031      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a7c      	ldr	r2, [pc, #496]	; (80082d0 <HAL_DMA_IRQHandler+0x6a8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d02c      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a7a      	ldr	r2, [pc, #488]	; (80082d4 <HAL_DMA_IRQHandler+0x6ac>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d027      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a79      	ldr	r2, [pc, #484]	; (80082d8 <HAL_DMA_IRQHandler+0x6b0>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d022      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a77      	ldr	r2, [pc, #476]	; (80082dc <HAL_DMA_IRQHandler+0x6b4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01d      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a76      	ldr	r2, [pc, #472]	; (80082e0 <HAL_DMA_IRQHandler+0x6b8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d018      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a74      	ldr	r2, [pc, #464]	; (80082e4 <HAL_DMA_IRQHandler+0x6bc>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d013      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a73      	ldr	r2, [pc, #460]	; (80082e8 <HAL_DMA_IRQHandler+0x6c0>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00e      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a71      	ldr	r2, [pc, #452]	; (80082ec <HAL_DMA_IRQHandler+0x6c4>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d009      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a70      	ldr	r2, [pc, #448]	; (80082f0 <HAL_DMA_IRQHandler+0x6c8>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d004      	beq.n	800813e <HAL_DMA_IRQHandler+0x516>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a6e      	ldr	r2, [pc, #440]	; (80082f4 <HAL_DMA_IRQHandler+0x6cc>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d10a      	bne.n	8008154 <HAL_DMA_IRQHandler+0x52c>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0308 	and.w	r3, r3, #8
 8008148:	2b00      	cmp	r3, #0
 800814a:	bf14      	ite	ne
 800814c:	2301      	movne	r3, #1
 800814e:	2300      	moveq	r3, #0
 8008150:	b2db      	uxtb	r3, r3
 8008152:	e009      	b.n	8008168 <HAL_DMA_IRQHandler+0x540>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	bf14      	ite	ne
 8008162:	2301      	movne	r3, #1
 8008164:	2300      	moveq	r3, #0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d03e      	beq.n	80081ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008170:	f003 031f 	and.w	r3, r3, #31
 8008174:	2210      	movs	r2, #16
 8008176:	409a      	lsls	r2, r3
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d018      	beq.n	80081bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d108      	bne.n	80081aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d024      	beq.n	80081ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
 80081a8:	e01f      	b.n	80081ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d01b      	beq.n	80081ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
 80081ba:	e016      	b.n	80081ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d107      	bne.n	80081da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0208 	bic.w	r2, r2, #8
 80081d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ee:	f003 031f 	and.w	r3, r3, #31
 80081f2:	2220      	movs	r2, #32
 80081f4:	409a      	lsls	r2, r3
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	4013      	ands	r3, r2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8110 	beq.w	8008420 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a2c      	ldr	r2, [pc, #176]	; (80082b8 <HAL_DMA_IRQHandler+0x690>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d04a      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a2b      	ldr	r2, [pc, #172]	; (80082bc <HAL_DMA_IRQHandler+0x694>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d045      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a29      	ldr	r2, [pc, #164]	; (80082c0 <HAL_DMA_IRQHandler+0x698>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d040      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a28      	ldr	r2, [pc, #160]	; (80082c4 <HAL_DMA_IRQHandler+0x69c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d03b      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a26      	ldr	r2, [pc, #152]	; (80082c8 <HAL_DMA_IRQHandler+0x6a0>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d036      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a25      	ldr	r2, [pc, #148]	; (80082cc <HAL_DMA_IRQHandler+0x6a4>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d031      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a23      	ldr	r2, [pc, #140]	; (80082d0 <HAL_DMA_IRQHandler+0x6a8>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d02c      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a22      	ldr	r2, [pc, #136]	; (80082d4 <HAL_DMA_IRQHandler+0x6ac>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d027      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a20      	ldr	r2, [pc, #128]	; (80082d8 <HAL_DMA_IRQHandler+0x6b0>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d022      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a1f      	ldr	r2, [pc, #124]	; (80082dc <HAL_DMA_IRQHandler+0x6b4>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d01d      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a1d      	ldr	r2, [pc, #116]	; (80082e0 <HAL_DMA_IRQHandler+0x6b8>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d018      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a1c      	ldr	r2, [pc, #112]	; (80082e4 <HAL_DMA_IRQHandler+0x6bc>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d013      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a1a      	ldr	r2, [pc, #104]	; (80082e8 <HAL_DMA_IRQHandler+0x6c0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00e      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a19      	ldr	r2, [pc, #100]	; (80082ec <HAL_DMA_IRQHandler+0x6c4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d009      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a17      	ldr	r2, [pc, #92]	; (80082f0 <HAL_DMA_IRQHandler+0x6c8>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d004      	beq.n	80082a0 <HAL_DMA_IRQHandler+0x678>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a16      	ldr	r2, [pc, #88]	; (80082f4 <HAL_DMA_IRQHandler+0x6cc>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d12b      	bne.n	80082f8 <HAL_DMA_IRQHandler+0x6d0>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0310 	and.w	r3, r3, #16
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bf14      	ite	ne
 80082ae:	2301      	movne	r3, #1
 80082b0:	2300      	moveq	r3, #0
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	e02a      	b.n	800830c <HAL_DMA_IRQHandler+0x6e4>
 80082b6:	bf00      	nop
 80082b8:	40020010 	.word	0x40020010
 80082bc:	40020028 	.word	0x40020028
 80082c0:	40020040 	.word	0x40020040
 80082c4:	40020058 	.word	0x40020058
 80082c8:	40020070 	.word	0x40020070
 80082cc:	40020088 	.word	0x40020088
 80082d0:	400200a0 	.word	0x400200a0
 80082d4:	400200b8 	.word	0x400200b8
 80082d8:	40020410 	.word	0x40020410
 80082dc:	40020428 	.word	0x40020428
 80082e0:	40020440 	.word	0x40020440
 80082e4:	40020458 	.word	0x40020458
 80082e8:	40020470 	.word	0x40020470
 80082ec:	40020488 	.word	0x40020488
 80082f0:	400204a0 	.word	0x400204a0
 80082f4:	400204b8 	.word	0x400204b8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	bf14      	ite	ne
 8008306:	2301      	movne	r3, #1
 8008308:	2300      	moveq	r3, #0
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8087 	beq.w	8008420 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008316:	f003 031f 	and.w	r3, r3, #31
 800831a:	2220      	movs	r2, #32
 800831c:	409a      	lsls	r2, r3
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b04      	cmp	r3, #4
 800832c:	d139      	bne.n	80083a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0216 	bic.w	r2, r2, #22
 800833c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	695a      	ldr	r2, [r3, #20]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800834c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d103      	bne.n	800835e <HAL_DMA_IRQHandler+0x736>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0208 	bic.w	r2, r2, #8
 800836c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008372:	f003 031f 	and.w	r3, r3, #31
 8008376:	223f      	movs	r2, #63	; 0x3f
 8008378:	409a      	lsls	r2, r3
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 834a 	beq.w	8008a2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4798      	blx	r3
          }
          return;
 80083a0:	e344      	b.n	8008a2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d018      	beq.n	80083e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d108      	bne.n	80083d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d02c      	beq.n	8008420 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
 80083ce:	e027      	b.n	8008420 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d023      	beq.n	8008420 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	4798      	blx	r3
 80083e0:	e01e      	b.n	8008420 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10f      	bne.n	8008410 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0210 	bic.w	r2, r2, #16
 80083fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 8306 	beq.w	8008a36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 8088 	beq.w	8008548 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2204      	movs	r2, #4
 800843c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a7a      	ldr	r2, [pc, #488]	; (8008630 <HAL_DMA_IRQHandler+0xa08>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d04a      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a79      	ldr	r2, [pc, #484]	; (8008634 <HAL_DMA_IRQHandler+0xa0c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d045      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a77      	ldr	r2, [pc, #476]	; (8008638 <HAL_DMA_IRQHandler+0xa10>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d040      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a76      	ldr	r2, [pc, #472]	; (800863c <HAL_DMA_IRQHandler+0xa14>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d03b      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a74      	ldr	r2, [pc, #464]	; (8008640 <HAL_DMA_IRQHandler+0xa18>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d036      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a73      	ldr	r2, [pc, #460]	; (8008644 <HAL_DMA_IRQHandler+0xa1c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d031      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a71      	ldr	r2, [pc, #452]	; (8008648 <HAL_DMA_IRQHandler+0xa20>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d02c      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a70      	ldr	r2, [pc, #448]	; (800864c <HAL_DMA_IRQHandler+0xa24>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d027      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a6e      	ldr	r2, [pc, #440]	; (8008650 <HAL_DMA_IRQHandler+0xa28>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d022      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a6d      	ldr	r2, [pc, #436]	; (8008654 <HAL_DMA_IRQHandler+0xa2c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d01d      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a6b      	ldr	r2, [pc, #428]	; (8008658 <HAL_DMA_IRQHandler+0xa30>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d018      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a6a      	ldr	r2, [pc, #424]	; (800865c <HAL_DMA_IRQHandler+0xa34>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d013      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a68      	ldr	r2, [pc, #416]	; (8008660 <HAL_DMA_IRQHandler+0xa38>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00e      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a67      	ldr	r2, [pc, #412]	; (8008664 <HAL_DMA_IRQHandler+0xa3c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d009      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a65      	ldr	r2, [pc, #404]	; (8008668 <HAL_DMA_IRQHandler+0xa40>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d004      	beq.n	80084e0 <HAL_DMA_IRQHandler+0x8b8>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a64      	ldr	r2, [pc, #400]	; (800866c <HAL_DMA_IRQHandler+0xa44>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d108      	bne.n	80084f2 <HAL_DMA_IRQHandler+0x8ca>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	e007      	b.n	8008502 <HAL_DMA_IRQHandler+0x8da>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 0201 	bic.w	r2, r2, #1
 8008500:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3301      	adds	r3, #1
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850a:	429a      	cmp	r2, r3
 800850c:	d307      	bcc.n	800851e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1f2      	bne.n	8008502 <HAL_DMA_IRQHandler+0x8da>
 800851c:	e000      	b.n	8008520 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800851e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d004      	beq.n	8008538 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2203      	movs	r2, #3
 8008532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008536:	e003      	b.n	8008540 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 8272 	beq.w	8008a36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
 800855a:	e26c      	b.n	8008a36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a43      	ldr	r2, [pc, #268]	; (8008670 <HAL_DMA_IRQHandler+0xa48>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d022      	beq.n	80085ac <HAL_DMA_IRQHandler+0x984>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a42      	ldr	r2, [pc, #264]	; (8008674 <HAL_DMA_IRQHandler+0xa4c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d01d      	beq.n	80085ac <HAL_DMA_IRQHandler+0x984>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a40      	ldr	r2, [pc, #256]	; (8008678 <HAL_DMA_IRQHandler+0xa50>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d018      	beq.n	80085ac <HAL_DMA_IRQHandler+0x984>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a3f      	ldr	r2, [pc, #252]	; (800867c <HAL_DMA_IRQHandler+0xa54>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d013      	beq.n	80085ac <HAL_DMA_IRQHandler+0x984>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a3d      	ldr	r2, [pc, #244]	; (8008680 <HAL_DMA_IRQHandler+0xa58>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00e      	beq.n	80085ac <HAL_DMA_IRQHandler+0x984>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a3c      	ldr	r2, [pc, #240]	; (8008684 <HAL_DMA_IRQHandler+0xa5c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d009      	beq.n	80085ac <HAL_DMA_IRQHandler+0x984>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a3a      	ldr	r2, [pc, #232]	; (8008688 <HAL_DMA_IRQHandler+0xa60>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d004      	beq.n	80085ac <HAL_DMA_IRQHandler+0x984>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a39      	ldr	r2, [pc, #228]	; (800868c <HAL_DMA_IRQHandler+0xa64>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d101      	bne.n	80085b0 <HAL_DMA_IRQHandler+0x988>
 80085ac:	2301      	movs	r3, #1
 80085ae:	e000      	b.n	80085b2 <HAL_DMA_IRQHandler+0x98a>
 80085b0:	2300      	movs	r3, #0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 823f 	beq.w	8008a36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c4:	f003 031f 	and.w	r3, r3, #31
 80085c8:	2204      	movs	r2, #4
 80085ca:	409a      	lsls	r2, r3
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	4013      	ands	r3, r2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 80cd 	beq.w	8008770 <HAL_DMA_IRQHandler+0xb48>
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 80c7 	beq.w	8008770 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	2204      	movs	r2, #4
 80085ec:	409a      	lsls	r2, r3
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d049      	beq.n	8008690 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d109      	bne.n	800861a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 8210 	beq.w	8008a30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008618:	e20a      	b.n	8008a30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 8206 	beq.w	8008a30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800862c:	e200      	b.n	8008a30 <HAL_DMA_IRQHandler+0xe08>
 800862e:	bf00      	nop
 8008630:	40020010 	.word	0x40020010
 8008634:	40020028 	.word	0x40020028
 8008638:	40020040 	.word	0x40020040
 800863c:	40020058 	.word	0x40020058
 8008640:	40020070 	.word	0x40020070
 8008644:	40020088 	.word	0x40020088
 8008648:	400200a0 	.word	0x400200a0
 800864c:	400200b8 	.word	0x400200b8
 8008650:	40020410 	.word	0x40020410
 8008654:	40020428 	.word	0x40020428
 8008658:	40020440 	.word	0x40020440
 800865c:	40020458 	.word	0x40020458
 8008660:	40020470 	.word	0x40020470
 8008664:	40020488 	.word	0x40020488
 8008668:	400204a0 	.word	0x400204a0
 800866c:	400204b8 	.word	0x400204b8
 8008670:	58025408 	.word	0x58025408
 8008674:	5802541c 	.word	0x5802541c
 8008678:	58025430 	.word	0x58025430
 800867c:	58025444 	.word	0x58025444
 8008680:	58025458 	.word	0x58025458
 8008684:	5802546c 	.word	0x5802546c
 8008688:	58025480 	.word	0x58025480
 800868c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d160      	bne.n	800875c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a7f      	ldr	r2, [pc, #508]	; (800889c <HAL_DMA_IRQHandler+0xc74>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d04a      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a7d      	ldr	r2, [pc, #500]	; (80088a0 <HAL_DMA_IRQHandler+0xc78>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d045      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a7c      	ldr	r2, [pc, #496]	; (80088a4 <HAL_DMA_IRQHandler+0xc7c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d040      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a7a      	ldr	r2, [pc, #488]	; (80088a8 <HAL_DMA_IRQHandler+0xc80>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d03b      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a79      	ldr	r2, [pc, #484]	; (80088ac <HAL_DMA_IRQHandler+0xc84>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d036      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a77      	ldr	r2, [pc, #476]	; (80088b0 <HAL_DMA_IRQHandler+0xc88>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d031      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a76      	ldr	r2, [pc, #472]	; (80088b4 <HAL_DMA_IRQHandler+0xc8c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d02c      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a74      	ldr	r2, [pc, #464]	; (80088b8 <HAL_DMA_IRQHandler+0xc90>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d027      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a73      	ldr	r2, [pc, #460]	; (80088bc <HAL_DMA_IRQHandler+0xc94>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d022      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a71      	ldr	r2, [pc, #452]	; (80088c0 <HAL_DMA_IRQHandler+0xc98>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d01d      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a70      	ldr	r2, [pc, #448]	; (80088c4 <HAL_DMA_IRQHandler+0xc9c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d018      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a6e      	ldr	r2, [pc, #440]	; (80088c8 <HAL_DMA_IRQHandler+0xca0>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d013      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a6d      	ldr	r2, [pc, #436]	; (80088cc <HAL_DMA_IRQHandler+0xca4>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d00e      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a6b      	ldr	r2, [pc, #428]	; (80088d0 <HAL_DMA_IRQHandler+0xca8>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d009      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a6a      	ldr	r2, [pc, #424]	; (80088d4 <HAL_DMA_IRQHandler+0xcac>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d004      	beq.n	800873a <HAL_DMA_IRQHandler+0xb12>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a68      	ldr	r2, [pc, #416]	; (80088d8 <HAL_DMA_IRQHandler+0xcb0>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d108      	bne.n	800874c <HAL_DMA_IRQHandler+0xb24>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0208 	bic.w	r2, r2, #8
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	e007      	b.n	800875c <HAL_DMA_IRQHandler+0xb34>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0204 	bic.w	r2, r2, #4
 800875a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 8165 	beq.w	8008a30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800876e:	e15f      	b.n	8008a30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	2202      	movs	r2, #2
 800877a:	409a      	lsls	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	4013      	ands	r3, r2
 8008780:	2b00      	cmp	r3, #0
 8008782:	f000 80c5 	beq.w	8008910 <HAL_DMA_IRQHandler+0xce8>
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80bf 	beq.w	8008910 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008796:	f003 031f 	and.w	r3, r3, #31
 800879a:	2202      	movs	r2, #2
 800879c:	409a      	lsls	r2, r3
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d018      	beq.n	80087de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 813a 	beq.w	8008a34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087c8:	e134      	b.n	8008a34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 8130 	beq.w	8008a34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087dc:	e12a      	b.n	8008a34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f003 0320 	and.w	r3, r3, #32
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f040 8089 	bne.w	80088fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a2b      	ldr	r2, [pc, #172]	; (800889c <HAL_DMA_IRQHandler+0xc74>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d04a      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a29      	ldr	r2, [pc, #164]	; (80088a0 <HAL_DMA_IRQHandler+0xc78>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d045      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a28      	ldr	r2, [pc, #160]	; (80088a4 <HAL_DMA_IRQHandler+0xc7c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d040      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a26      	ldr	r2, [pc, #152]	; (80088a8 <HAL_DMA_IRQHandler+0xc80>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d03b      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a25      	ldr	r2, [pc, #148]	; (80088ac <HAL_DMA_IRQHandler+0xc84>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d036      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a23      	ldr	r2, [pc, #140]	; (80088b0 <HAL_DMA_IRQHandler+0xc88>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d031      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a22      	ldr	r2, [pc, #136]	; (80088b4 <HAL_DMA_IRQHandler+0xc8c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d02c      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a20      	ldr	r2, [pc, #128]	; (80088b8 <HAL_DMA_IRQHandler+0xc90>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d027      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a1f      	ldr	r2, [pc, #124]	; (80088bc <HAL_DMA_IRQHandler+0xc94>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d022      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a1d      	ldr	r2, [pc, #116]	; (80088c0 <HAL_DMA_IRQHandler+0xc98>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d01d      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a1c      	ldr	r2, [pc, #112]	; (80088c4 <HAL_DMA_IRQHandler+0xc9c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d018      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1a      	ldr	r2, [pc, #104]	; (80088c8 <HAL_DMA_IRQHandler+0xca0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d013      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a19      	ldr	r2, [pc, #100]	; (80088cc <HAL_DMA_IRQHandler+0xca4>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00e      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a17      	ldr	r2, [pc, #92]	; (80088d0 <HAL_DMA_IRQHandler+0xca8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d009      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a16      	ldr	r2, [pc, #88]	; (80088d4 <HAL_DMA_IRQHandler+0xcac>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d004      	beq.n	800888a <HAL_DMA_IRQHandler+0xc62>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a14      	ldr	r2, [pc, #80]	; (80088d8 <HAL_DMA_IRQHandler+0xcb0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d128      	bne.n	80088dc <HAL_DMA_IRQHandler+0xcb4>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0214 	bic.w	r2, r2, #20
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	e027      	b.n	80088ec <HAL_DMA_IRQHandler+0xcc4>
 800889c:	40020010 	.word	0x40020010
 80088a0:	40020028 	.word	0x40020028
 80088a4:	40020040 	.word	0x40020040
 80088a8:	40020058 	.word	0x40020058
 80088ac:	40020070 	.word	0x40020070
 80088b0:	40020088 	.word	0x40020088
 80088b4:	400200a0 	.word	0x400200a0
 80088b8:	400200b8 	.word	0x400200b8
 80088bc:	40020410 	.word	0x40020410
 80088c0:	40020428 	.word	0x40020428
 80088c4:	40020440 	.word	0x40020440
 80088c8:	40020458 	.word	0x40020458
 80088cc:	40020470 	.word	0x40020470
 80088d0:	40020488 	.word	0x40020488
 80088d4:	400204a0 	.word	0x400204a0
 80088d8:	400204b8 	.word	0x400204b8
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 020a 	bic.w	r2, r2, #10
 80088ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8097 	beq.w	8008a34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800890e:	e091      	b.n	8008a34 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008914:	f003 031f 	and.w	r3, r3, #31
 8008918:	2208      	movs	r2, #8
 800891a:	409a      	lsls	r2, r3
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	4013      	ands	r3, r2
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 8088 	beq.w	8008a36 <HAL_DMA_IRQHandler+0xe0e>
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f003 0308 	and.w	r3, r3, #8
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8082 	beq.w	8008a36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a41      	ldr	r2, [pc, #260]	; (8008a3c <HAL_DMA_IRQHandler+0xe14>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d04a      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a3f      	ldr	r2, [pc, #252]	; (8008a40 <HAL_DMA_IRQHandler+0xe18>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d045      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a3e      	ldr	r2, [pc, #248]	; (8008a44 <HAL_DMA_IRQHandler+0xe1c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d040      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a3c      	ldr	r2, [pc, #240]	; (8008a48 <HAL_DMA_IRQHandler+0xe20>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d03b      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a3b      	ldr	r2, [pc, #236]	; (8008a4c <HAL_DMA_IRQHandler+0xe24>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d036      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a39      	ldr	r2, [pc, #228]	; (8008a50 <HAL_DMA_IRQHandler+0xe28>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d031      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a38      	ldr	r2, [pc, #224]	; (8008a54 <HAL_DMA_IRQHandler+0xe2c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d02c      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a36      	ldr	r2, [pc, #216]	; (8008a58 <HAL_DMA_IRQHandler+0xe30>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d027      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a35      	ldr	r2, [pc, #212]	; (8008a5c <HAL_DMA_IRQHandler+0xe34>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d022      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a33      	ldr	r2, [pc, #204]	; (8008a60 <HAL_DMA_IRQHandler+0xe38>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d01d      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a32      	ldr	r2, [pc, #200]	; (8008a64 <HAL_DMA_IRQHandler+0xe3c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d018      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a30      	ldr	r2, [pc, #192]	; (8008a68 <HAL_DMA_IRQHandler+0xe40>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d013      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a2f      	ldr	r2, [pc, #188]	; (8008a6c <HAL_DMA_IRQHandler+0xe44>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00e      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a2d      	ldr	r2, [pc, #180]	; (8008a70 <HAL_DMA_IRQHandler+0xe48>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d009      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a2c      	ldr	r2, [pc, #176]	; (8008a74 <HAL_DMA_IRQHandler+0xe4c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d004      	beq.n	80089d2 <HAL_DMA_IRQHandler+0xdaa>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a2a      	ldr	r2, [pc, #168]	; (8008a78 <HAL_DMA_IRQHandler+0xe50>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d108      	bne.n	80089e4 <HAL_DMA_IRQHandler+0xdbc>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 021c 	bic.w	r2, r2, #28
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	e007      	b.n	80089f4 <HAL_DMA_IRQHandler+0xdcc>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 020e 	bic.w	r2, r2, #14
 80089f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089f8:	f003 031f 	and.w	r3, r3, #31
 80089fc:	2201      	movs	r2, #1
 80089fe:	409a      	lsls	r2, r3
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d009      	beq.n	8008a36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	4798      	blx	r3
 8008a2a:	e004      	b.n	8008a36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008a2c:	bf00      	nop
 8008a2e:	e002      	b.n	8008a36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a30:	bf00      	nop
 8008a32:	e000      	b.n	8008a36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008a36:	3728      	adds	r7, #40	; 0x28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	40020010 	.word	0x40020010
 8008a40:	40020028 	.word	0x40020028
 8008a44:	40020040 	.word	0x40020040
 8008a48:	40020058 	.word	0x40020058
 8008a4c:	40020070 	.word	0x40020070
 8008a50:	40020088 	.word	0x40020088
 8008a54:	400200a0 	.word	0x400200a0
 8008a58:	400200b8 	.word	0x400200b8
 8008a5c:	40020410 	.word	0x40020410
 8008a60:	40020428 	.word	0x40020428
 8008a64:	40020440 	.word	0x40020440
 8008a68:	40020458 	.word	0x40020458
 8008a6c:	40020470 	.word	0x40020470
 8008a70:	40020488 	.word	0x40020488
 8008a74:	400204a0 	.word	0x400204a0
 8008a78:	400204b8 	.word	0x400204b8

08008a7c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a7f      	ldr	r2, [pc, #508]	; (8008cb0 <DMA_SetConfig+0x21c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d072      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a7d      	ldr	r2, [pc, #500]	; (8008cb4 <DMA_SetConfig+0x220>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d06d      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a7c      	ldr	r2, [pc, #496]	; (8008cb8 <DMA_SetConfig+0x224>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d068      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a7a      	ldr	r2, [pc, #488]	; (8008cbc <DMA_SetConfig+0x228>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d063      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a79      	ldr	r2, [pc, #484]	; (8008cc0 <DMA_SetConfig+0x22c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d05e      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a77      	ldr	r2, [pc, #476]	; (8008cc4 <DMA_SetConfig+0x230>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d059      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a76      	ldr	r2, [pc, #472]	; (8008cc8 <DMA_SetConfig+0x234>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d054      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a74      	ldr	r2, [pc, #464]	; (8008ccc <DMA_SetConfig+0x238>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d04f      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a73      	ldr	r2, [pc, #460]	; (8008cd0 <DMA_SetConfig+0x23c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d04a      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a71      	ldr	r2, [pc, #452]	; (8008cd4 <DMA_SetConfig+0x240>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d045      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a70      	ldr	r2, [pc, #448]	; (8008cd8 <DMA_SetConfig+0x244>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d040      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a6e      	ldr	r2, [pc, #440]	; (8008cdc <DMA_SetConfig+0x248>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d03b      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a6d      	ldr	r2, [pc, #436]	; (8008ce0 <DMA_SetConfig+0x24c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d036      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a6b      	ldr	r2, [pc, #428]	; (8008ce4 <DMA_SetConfig+0x250>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d031      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a6a      	ldr	r2, [pc, #424]	; (8008ce8 <DMA_SetConfig+0x254>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d02c      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a68      	ldr	r2, [pc, #416]	; (8008cec <DMA_SetConfig+0x258>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d027      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a67      	ldr	r2, [pc, #412]	; (8008cf0 <DMA_SetConfig+0x25c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d022      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a65      	ldr	r2, [pc, #404]	; (8008cf4 <DMA_SetConfig+0x260>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d01d      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a64      	ldr	r2, [pc, #400]	; (8008cf8 <DMA_SetConfig+0x264>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d018      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a62      	ldr	r2, [pc, #392]	; (8008cfc <DMA_SetConfig+0x268>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d013      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a61      	ldr	r2, [pc, #388]	; (8008d00 <DMA_SetConfig+0x26c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00e      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a5f      	ldr	r2, [pc, #380]	; (8008d04 <DMA_SetConfig+0x270>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d009      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a5e      	ldr	r2, [pc, #376]	; (8008d08 <DMA_SetConfig+0x274>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d004      	beq.n	8008b9e <DMA_SetConfig+0x10a>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a5c      	ldr	r2, [pc, #368]	; (8008d0c <DMA_SetConfig+0x278>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d101      	bne.n	8008ba2 <DMA_SetConfig+0x10e>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <DMA_SetConfig+0x110>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00d      	beq.n	8008bc4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008bb0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d004      	beq.n	8008bc4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008bc2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a39      	ldr	r2, [pc, #228]	; (8008cb0 <DMA_SetConfig+0x21c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d04a      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a38      	ldr	r2, [pc, #224]	; (8008cb4 <DMA_SetConfig+0x220>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d045      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a36      	ldr	r2, [pc, #216]	; (8008cb8 <DMA_SetConfig+0x224>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d040      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a35      	ldr	r2, [pc, #212]	; (8008cbc <DMA_SetConfig+0x228>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d03b      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a33      	ldr	r2, [pc, #204]	; (8008cc0 <DMA_SetConfig+0x22c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d036      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a32      	ldr	r2, [pc, #200]	; (8008cc4 <DMA_SetConfig+0x230>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d031      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a30      	ldr	r2, [pc, #192]	; (8008cc8 <DMA_SetConfig+0x234>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d02c      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a2f      	ldr	r2, [pc, #188]	; (8008ccc <DMA_SetConfig+0x238>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d027      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a2d      	ldr	r2, [pc, #180]	; (8008cd0 <DMA_SetConfig+0x23c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d022      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a2c      	ldr	r2, [pc, #176]	; (8008cd4 <DMA_SetConfig+0x240>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d01d      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a2a      	ldr	r2, [pc, #168]	; (8008cd8 <DMA_SetConfig+0x244>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d018      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a29      	ldr	r2, [pc, #164]	; (8008cdc <DMA_SetConfig+0x248>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d013      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a27      	ldr	r2, [pc, #156]	; (8008ce0 <DMA_SetConfig+0x24c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00e      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a26      	ldr	r2, [pc, #152]	; (8008ce4 <DMA_SetConfig+0x250>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d009      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a24      	ldr	r2, [pc, #144]	; (8008ce8 <DMA_SetConfig+0x254>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d004      	beq.n	8008c64 <DMA_SetConfig+0x1d0>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a23      	ldr	r2, [pc, #140]	; (8008cec <DMA_SetConfig+0x258>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d101      	bne.n	8008c68 <DMA_SetConfig+0x1d4>
 8008c64:	2301      	movs	r3, #1
 8008c66:	e000      	b.n	8008c6a <DMA_SetConfig+0x1d6>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d059      	beq.n	8008d22 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c72:	f003 031f 	and.w	r3, r3, #31
 8008c76:	223f      	movs	r2, #63	; 0x3f
 8008c78:	409a      	lsls	r2, r3
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c8c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	2b40      	cmp	r3, #64	; 0x40
 8008c9c:	d138      	bne.n	8008d10 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008cae:	e086      	b.n	8008dbe <DMA_SetConfig+0x32a>
 8008cb0:	40020010 	.word	0x40020010
 8008cb4:	40020028 	.word	0x40020028
 8008cb8:	40020040 	.word	0x40020040
 8008cbc:	40020058 	.word	0x40020058
 8008cc0:	40020070 	.word	0x40020070
 8008cc4:	40020088 	.word	0x40020088
 8008cc8:	400200a0 	.word	0x400200a0
 8008ccc:	400200b8 	.word	0x400200b8
 8008cd0:	40020410 	.word	0x40020410
 8008cd4:	40020428 	.word	0x40020428
 8008cd8:	40020440 	.word	0x40020440
 8008cdc:	40020458 	.word	0x40020458
 8008ce0:	40020470 	.word	0x40020470
 8008ce4:	40020488 	.word	0x40020488
 8008ce8:	400204a0 	.word	0x400204a0
 8008cec:	400204b8 	.word	0x400204b8
 8008cf0:	58025408 	.word	0x58025408
 8008cf4:	5802541c 	.word	0x5802541c
 8008cf8:	58025430 	.word	0x58025430
 8008cfc:	58025444 	.word	0x58025444
 8008d00:	58025458 	.word	0x58025458
 8008d04:	5802546c 	.word	0x5802546c
 8008d08:	58025480 	.word	0x58025480
 8008d0c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	60da      	str	r2, [r3, #12]
}
 8008d20:	e04d      	b.n	8008dbe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a29      	ldr	r2, [pc, #164]	; (8008dcc <DMA_SetConfig+0x338>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d022      	beq.n	8008d72 <DMA_SetConfig+0x2de>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a27      	ldr	r2, [pc, #156]	; (8008dd0 <DMA_SetConfig+0x33c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d01d      	beq.n	8008d72 <DMA_SetConfig+0x2de>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a26      	ldr	r2, [pc, #152]	; (8008dd4 <DMA_SetConfig+0x340>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d018      	beq.n	8008d72 <DMA_SetConfig+0x2de>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a24      	ldr	r2, [pc, #144]	; (8008dd8 <DMA_SetConfig+0x344>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d013      	beq.n	8008d72 <DMA_SetConfig+0x2de>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a23      	ldr	r2, [pc, #140]	; (8008ddc <DMA_SetConfig+0x348>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d00e      	beq.n	8008d72 <DMA_SetConfig+0x2de>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a21      	ldr	r2, [pc, #132]	; (8008de0 <DMA_SetConfig+0x34c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d009      	beq.n	8008d72 <DMA_SetConfig+0x2de>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a20      	ldr	r2, [pc, #128]	; (8008de4 <DMA_SetConfig+0x350>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d004      	beq.n	8008d72 <DMA_SetConfig+0x2de>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a1e      	ldr	r2, [pc, #120]	; (8008de8 <DMA_SetConfig+0x354>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d101      	bne.n	8008d76 <DMA_SetConfig+0x2e2>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <DMA_SetConfig+0x2e4>
 8008d76:	2300      	movs	r3, #0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d020      	beq.n	8008dbe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d80:	f003 031f 	and.w	r3, r3, #31
 8008d84:	2201      	movs	r2, #1
 8008d86:	409a      	lsls	r2, r3
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	2b40      	cmp	r3, #64	; 0x40
 8008d9a:	d108      	bne.n	8008dae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	60da      	str	r2, [r3, #12]
}
 8008dac:	e007      	b.n	8008dbe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	60da      	str	r2, [r3, #12]
}
 8008dbe:	bf00      	nop
 8008dc0:	371c      	adds	r7, #28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	58025408 	.word	0x58025408
 8008dd0:	5802541c 	.word	0x5802541c
 8008dd4:	58025430 	.word	0x58025430
 8008dd8:	58025444 	.word	0x58025444
 8008ddc:	58025458 	.word	0x58025458
 8008de0:	5802546c 	.word	0x5802546c
 8008de4:	58025480 	.word	0x58025480
 8008de8:	58025494 	.word	0x58025494

08008dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a42      	ldr	r2, [pc, #264]	; (8008f04 <DMA_CalcBaseAndBitshift+0x118>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d04a      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a41      	ldr	r2, [pc, #260]	; (8008f08 <DMA_CalcBaseAndBitshift+0x11c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d045      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a3f      	ldr	r2, [pc, #252]	; (8008f0c <DMA_CalcBaseAndBitshift+0x120>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d040      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a3e      	ldr	r2, [pc, #248]	; (8008f10 <DMA_CalcBaseAndBitshift+0x124>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d03b      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a3c      	ldr	r2, [pc, #240]	; (8008f14 <DMA_CalcBaseAndBitshift+0x128>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d036      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a3b      	ldr	r2, [pc, #236]	; (8008f18 <DMA_CalcBaseAndBitshift+0x12c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d031      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a39      	ldr	r2, [pc, #228]	; (8008f1c <DMA_CalcBaseAndBitshift+0x130>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d02c      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a38      	ldr	r2, [pc, #224]	; (8008f20 <DMA_CalcBaseAndBitshift+0x134>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d027      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a36      	ldr	r2, [pc, #216]	; (8008f24 <DMA_CalcBaseAndBitshift+0x138>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d022      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a35      	ldr	r2, [pc, #212]	; (8008f28 <DMA_CalcBaseAndBitshift+0x13c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d01d      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a33      	ldr	r2, [pc, #204]	; (8008f2c <DMA_CalcBaseAndBitshift+0x140>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d018      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a32      	ldr	r2, [pc, #200]	; (8008f30 <DMA_CalcBaseAndBitshift+0x144>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d013      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a30      	ldr	r2, [pc, #192]	; (8008f34 <DMA_CalcBaseAndBitshift+0x148>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00e      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a2f      	ldr	r2, [pc, #188]	; (8008f38 <DMA_CalcBaseAndBitshift+0x14c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d009      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a2d      	ldr	r2, [pc, #180]	; (8008f3c <DMA_CalcBaseAndBitshift+0x150>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d004      	beq.n	8008e94 <DMA_CalcBaseAndBitshift+0xa8>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a2c      	ldr	r2, [pc, #176]	; (8008f40 <DMA_CalcBaseAndBitshift+0x154>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d101      	bne.n	8008e98 <DMA_CalcBaseAndBitshift+0xac>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e000      	b.n	8008e9a <DMA_CalcBaseAndBitshift+0xae>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d024      	beq.n	8008ee8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	3b10      	subs	r3, #16
 8008ea6:	4a27      	ldr	r2, [pc, #156]	; (8008f44 <DMA_CalcBaseAndBitshift+0x158>)
 8008ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8008eac:	091b      	lsrs	r3, r3, #4
 8008eae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f003 0307 	and.w	r3, r3, #7
 8008eb6:	4a24      	ldr	r2, [pc, #144]	; (8008f48 <DMA_CalcBaseAndBitshift+0x15c>)
 8008eb8:	5cd3      	ldrb	r3, [r2, r3]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d908      	bls.n	8008ed8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4b1f      	ldr	r3, [pc, #124]	; (8008f4c <DMA_CalcBaseAndBitshift+0x160>)
 8008ece:	4013      	ands	r3, r2
 8008ed0:	1d1a      	adds	r2, r3, #4
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	659a      	str	r2, [r3, #88]	; 0x58
 8008ed6:	e00d      	b.n	8008ef4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	4b1b      	ldr	r3, [pc, #108]	; (8008f4c <DMA_CalcBaseAndBitshift+0x160>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ee6:	e005      	b.n	8008ef4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	40020010 	.word	0x40020010
 8008f08:	40020028 	.word	0x40020028
 8008f0c:	40020040 	.word	0x40020040
 8008f10:	40020058 	.word	0x40020058
 8008f14:	40020070 	.word	0x40020070
 8008f18:	40020088 	.word	0x40020088
 8008f1c:	400200a0 	.word	0x400200a0
 8008f20:	400200b8 	.word	0x400200b8
 8008f24:	40020410 	.word	0x40020410
 8008f28:	40020428 	.word	0x40020428
 8008f2c:	40020440 	.word	0x40020440
 8008f30:	40020458 	.word	0x40020458
 8008f34:	40020470 	.word	0x40020470
 8008f38:	40020488 	.word	0x40020488
 8008f3c:	400204a0 	.word	0x400204a0
 8008f40:	400204b8 	.word	0x400204b8
 8008f44:	aaaaaaab 	.word	0xaaaaaaab
 8008f48:	08017858 	.word	0x08017858
 8008f4c:	fffffc00 	.word	0xfffffc00

08008f50 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d120      	bne.n	8008fa6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	d858      	bhi.n	800901e <DMA_CheckFifoParam+0xce>
 8008f6c:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <DMA_CheckFifoParam+0x24>)
 8008f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f72:	bf00      	nop
 8008f74:	08008f85 	.word	0x08008f85
 8008f78:	08008f97 	.word	0x08008f97
 8008f7c:	08008f85 	.word	0x08008f85
 8008f80:	0800901f 	.word	0x0800901f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d048      	beq.n	8009022 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f94:	e045      	b.n	8009022 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008f9e:	d142      	bne.n	8009026 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008fa4:	e03f      	b.n	8009026 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fae:	d123      	bne.n	8008ff8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d838      	bhi.n	800902a <DMA_CheckFifoParam+0xda>
 8008fb8:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <DMA_CheckFifoParam+0x70>)
 8008fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbe:	bf00      	nop
 8008fc0:	08008fd1 	.word	0x08008fd1
 8008fc4:	08008fd7 	.word	0x08008fd7
 8008fc8:	08008fd1 	.word	0x08008fd1
 8008fcc:	08008fe9 	.word	0x08008fe9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	73fb      	strb	r3, [r7, #15]
        break;
 8008fd4:	e030      	b.n	8009038 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d025      	beq.n	800902e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008fe6:	e022      	b.n	800902e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ff0:	d11f      	bne.n	8009032 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ff6:	e01c      	b.n	8009032 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d902      	bls.n	8009006 <DMA_CheckFifoParam+0xb6>
 8009000:	2b03      	cmp	r3, #3
 8009002:	d003      	beq.n	800900c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009004:	e018      	b.n	8009038 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	73fb      	strb	r3, [r7, #15]
        break;
 800900a:	e015      	b.n	8009038 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00e      	beq.n	8009036 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
    break;
 800901c:	e00b      	b.n	8009036 <DMA_CheckFifoParam+0xe6>
        break;
 800901e:	bf00      	nop
 8009020:	e00a      	b.n	8009038 <DMA_CheckFifoParam+0xe8>
        break;
 8009022:	bf00      	nop
 8009024:	e008      	b.n	8009038 <DMA_CheckFifoParam+0xe8>
        break;
 8009026:	bf00      	nop
 8009028:	e006      	b.n	8009038 <DMA_CheckFifoParam+0xe8>
        break;
 800902a:	bf00      	nop
 800902c:	e004      	b.n	8009038 <DMA_CheckFifoParam+0xe8>
        break;
 800902e:	bf00      	nop
 8009030:	e002      	b.n	8009038 <DMA_CheckFifoParam+0xe8>
        break;
 8009032:	bf00      	nop
 8009034:	e000      	b.n	8009038 <DMA_CheckFifoParam+0xe8>
    break;
 8009036:	bf00      	nop
    }
  }

  return status;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop

08009048 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a38      	ldr	r2, [pc, #224]	; (800913c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d022      	beq.n	80090a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a36      	ldr	r2, [pc, #216]	; (8009140 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d01d      	beq.n	80090a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a35      	ldr	r2, [pc, #212]	; (8009144 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d018      	beq.n	80090a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a33      	ldr	r2, [pc, #204]	; (8009148 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d013      	beq.n	80090a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a32      	ldr	r2, [pc, #200]	; (800914c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d00e      	beq.n	80090a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a30      	ldr	r2, [pc, #192]	; (8009150 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d009      	beq.n	80090a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a2f      	ldr	r2, [pc, #188]	; (8009154 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d004      	beq.n	80090a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a2d      	ldr	r2, [pc, #180]	; (8009158 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d101      	bne.n	80090aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80090a6:	2301      	movs	r3, #1
 80090a8:	e000      	b.n	80090ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80090aa:	2300      	movs	r3, #0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01a      	beq.n	80090e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	3b08      	subs	r3, #8
 80090b8:	4a28      	ldr	r2, [pc, #160]	; (800915c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80090ba:	fba2 2303 	umull	r2, r3, r2, r3
 80090be:	091b      	lsrs	r3, r3, #4
 80090c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4b26      	ldr	r3, [pc, #152]	; (8009160 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	461a      	mov	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a24      	ldr	r2, [pc, #144]	; (8009164 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80090d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f003 031f 	and.w	r3, r3, #31
 80090dc:	2201      	movs	r2, #1
 80090de:	409a      	lsls	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80090e4:	e024      	b.n	8009130 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	3b10      	subs	r3, #16
 80090ee:	4a1e      	ldr	r2, [pc, #120]	; (8009168 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80090f0:	fba2 2303 	umull	r2, r3, r2, r3
 80090f4:	091b      	lsrs	r3, r3, #4
 80090f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4a1c      	ldr	r2, [pc, #112]	; (800916c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d806      	bhi.n	800910e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	4a1b      	ldr	r2, [pc, #108]	; (8009170 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d902      	bls.n	800910e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3308      	adds	r3, #8
 800910c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4b18      	ldr	r3, [pc, #96]	; (8009174 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	461a      	mov	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a16      	ldr	r2, [pc, #88]	; (8009178 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009120:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f003 031f 	and.w	r3, r3, #31
 8009128:	2201      	movs	r2, #1
 800912a:	409a      	lsls	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009130:	bf00      	nop
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	58025408 	.word	0x58025408
 8009140:	5802541c 	.word	0x5802541c
 8009144:	58025430 	.word	0x58025430
 8009148:	58025444 	.word	0x58025444
 800914c:	58025458 	.word	0x58025458
 8009150:	5802546c 	.word	0x5802546c
 8009154:	58025480 	.word	0x58025480
 8009158:	58025494 	.word	0x58025494
 800915c:	cccccccd 	.word	0xcccccccd
 8009160:	16009600 	.word	0x16009600
 8009164:	58025880 	.word	0x58025880
 8009168:	aaaaaaab 	.word	0xaaaaaaab
 800916c:	400204b8 	.word	0x400204b8
 8009170:	4002040f 	.word	0x4002040f
 8009174:	10008200 	.word	0x10008200
 8009178:	40020880 	.word	0x40020880

0800917c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	b2db      	uxtb	r3, r3
 800918a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d04a      	beq.n	8009228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b08      	cmp	r3, #8
 8009196:	d847      	bhi.n	8009228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a25      	ldr	r2, [pc, #148]	; (8009234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d022      	beq.n	80091e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a24      	ldr	r2, [pc, #144]	; (8009238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d01d      	beq.n	80091e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a22      	ldr	r2, [pc, #136]	; (800923c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d018      	beq.n	80091e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a21      	ldr	r2, [pc, #132]	; (8009240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d013      	beq.n	80091e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a1f      	ldr	r2, [pc, #124]	; (8009244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00e      	beq.n	80091e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a1e      	ldr	r2, [pc, #120]	; (8009248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d009      	beq.n	80091e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a1c      	ldr	r2, [pc, #112]	; (800924c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d004      	beq.n	80091e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a1b      	ldr	r2, [pc, #108]	; (8009250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d101      	bne.n	80091ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80091e8:	2301      	movs	r3, #1
 80091ea:	e000      	b.n	80091ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80091ec:	2300      	movs	r3, #0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	4b17      	ldr	r3, [pc, #92]	; (8009254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	461a      	mov	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a15      	ldr	r2, [pc, #84]	; (8009258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009204:	671a      	str	r2, [r3, #112]	; 0x70
 8009206:	e009      	b.n	800921c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4b14      	ldr	r3, [pc, #80]	; (800925c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	461a      	mov	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a11      	ldr	r2, [pc, #68]	; (8009260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800921a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3b01      	subs	r3, #1
 8009220:	2201      	movs	r2, #1
 8009222:	409a      	lsls	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009228:	bf00      	nop
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	58025408 	.word	0x58025408
 8009238:	5802541c 	.word	0x5802541c
 800923c:	58025430 	.word	0x58025430
 8009240:	58025444 	.word	0x58025444
 8009244:	58025458 	.word	0x58025458
 8009248:	5802546c 	.word	0x5802546c
 800924c:	58025480 	.word	0x58025480
 8009250:	58025494 	.word	0x58025494
 8009254:	1600963f 	.word	0x1600963f
 8009258:	58025940 	.word	0x58025940
 800925c:	1000823f 	.word	0x1000823f
 8009260:	40020940 	.word	0x40020940

08009264 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009264:	b480      	push	{r7}
 8009266:	b089      	sub	sp, #36	; 0x24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800926e:	2300      	movs	r3, #0
 8009270:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009272:	4b89      	ldr	r3, [pc, #548]	; (8009498 <HAL_GPIO_Init+0x234>)
 8009274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009276:	e194      	b.n	80095a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	2101      	movs	r1, #1
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	fa01 f303 	lsl.w	r3, r1, r3
 8009284:	4013      	ands	r3, r2
 8009286:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 8186 	beq.w	800959c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f003 0303 	and.w	r3, r3, #3
 8009298:	2b01      	cmp	r3, #1
 800929a:	d005      	beq.n	80092a8 <HAL_GPIO_Init+0x44>
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f003 0303 	and.w	r3, r3, #3
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d130      	bne.n	800930a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	2203      	movs	r2, #3
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	43db      	mvns	r3, r3
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	4013      	ands	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	fa02 f303 	lsl.w	r3, r2, r3
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80092de:	2201      	movs	r2, #1
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	fa02 f303 	lsl.w	r3, r2, r3
 80092e6:	43db      	mvns	r3, r3
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	4013      	ands	r3, r2
 80092ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	091b      	lsrs	r3, r3, #4
 80092f4:	f003 0201 	and.w	r2, r3, #1
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	fa02 f303 	lsl.w	r3, r2, r3
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	4313      	orrs	r3, r2
 8009302:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	2b03      	cmp	r3, #3
 8009314:	d017      	beq.n	8009346 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	2203      	movs	r2, #3
 8009322:	fa02 f303 	lsl.w	r3, r2, r3
 8009326:	43db      	mvns	r3, r3
 8009328:	69ba      	ldr	r2, [r7, #24]
 800932a:	4013      	ands	r3, r2
 800932c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	fa02 f303 	lsl.w	r3, r2, r3
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	4313      	orrs	r3, r2
 800933e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d123      	bne.n	800939a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	08da      	lsrs	r2, r3, #3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	3208      	adds	r2, #8
 800935a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	220f      	movs	r2, #15
 800936a:	fa02 f303 	lsl.w	r3, r2, r3
 800936e:	43db      	mvns	r3, r3
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	4013      	ands	r3, r2
 8009374:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	691a      	ldr	r2, [r3, #16]
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	f003 0307 	and.w	r3, r3, #7
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	fa02 f303 	lsl.w	r3, r2, r3
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	4313      	orrs	r3, r2
 800938a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	08da      	lsrs	r2, r3, #3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3208      	adds	r2, #8
 8009394:	69b9      	ldr	r1, [r7, #24]
 8009396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	2203      	movs	r2, #3
 80093a6:	fa02 f303 	lsl.w	r3, r2, r3
 80093aa:	43db      	mvns	r3, r3
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	4013      	ands	r3, r2
 80093b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	f003 0203 	and.w	r2, r3, #3
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	005b      	lsls	r3, r3, #1
 80093be:	fa02 f303 	lsl.w	r3, r2, r3
 80093c2:	69ba      	ldr	r2, [r7, #24]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 80e0 	beq.w	800959c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093dc:	4b2f      	ldr	r3, [pc, #188]	; (800949c <HAL_GPIO_Init+0x238>)
 80093de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80093e2:	4a2e      	ldr	r2, [pc, #184]	; (800949c <HAL_GPIO_Init+0x238>)
 80093e4:	f043 0302 	orr.w	r3, r3, #2
 80093e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80093ec:	4b2b      	ldr	r3, [pc, #172]	; (800949c <HAL_GPIO_Init+0x238>)
 80093ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80093fa:	4a29      	ldr	r2, [pc, #164]	; (80094a0 <HAL_GPIO_Init+0x23c>)
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	089b      	lsrs	r3, r3, #2
 8009400:	3302      	adds	r3, #2
 8009402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	f003 0303 	and.w	r3, r3, #3
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	220f      	movs	r2, #15
 8009412:	fa02 f303 	lsl.w	r3, r2, r3
 8009416:	43db      	mvns	r3, r3
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	4013      	ands	r3, r2
 800941c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a20      	ldr	r2, [pc, #128]	; (80094a4 <HAL_GPIO_Init+0x240>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d052      	beq.n	80094cc <HAL_GPIO_Init+0x268>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a1f      	ldr	r2, [pc, #124]	; (80094a8 <HAL_GPIO_Init+0x244>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d031      	beq.n	8009492 <HAL_GPIO_Init+0x22e>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a1e      	ldr	r2, [pc, #120]	; (80094ac <HAL_GPIO_Init+0x248>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d02b      	beq.n	800948e <HAL_GPIO_Init+0x22a>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a1d      	ldr	r2, [pc, #116]	; (80094b0 <HAL_GPIO_Init+0x24c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d025      	beq.n	800948a <HAL_GPIO_Init+0x226>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a1c      	ldr	r2, [pc, #112]	; (80094b4 <HAL_GPIO_Init+0x250>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d01f      	beq.n	8009486 <HAL_GPIO_Init+0x222>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a1b      	ldr	r2, [pc, #108]	; (80094b8 <HAL_GPIO_Init+0x254>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d019      	beq.n	8009482 <HAL_GPIO_Init+0x21e>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a1a      	ldr	r2, [pc, #104]	; (80094bc <HAL_GPIO_Init+0x258>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d013      	beq.n	800947e <HAL_GPIO_Init+0x21a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a19      	ldr	r2, [pc, #100]	; (80094c0 <HAL_GPIO_Init+0x25c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d00d      	beq.n	800947a <HAL_GPIO_Init+0x216>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a18      	ldr	r2, [pc, #96]	; (80094c4 <HAL_GPIO_Init+0x260>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d007      	beq.n	8009476 <HAL_GPIO_Init+0x212>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a17      	ldr	r2, [pc, #92]	; (80094c8 <HAL_GPIO_Init+0x264>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d101      	bne.n	8009472 <HAL_GPIO_Init+0x20e>
 800946e:	2309      	movs	r3, #9
 8009470:	e02d      	b.n	80094ce <HAL_GPIO_Init+0x26a>
 8009472:	230a      	movs	r3, #10
 8009474:	e02b      	b.n	80094ce <HAL_GPIO_Init+0x26a>
 8009476:	2308      	movs	r3, #8
 8009478:	e029      	b.n	80094ce <HAL_GPIO_Init+0x26a>
 800947a:	2307      	movs	r3, #7
 800947c:	e027      	b.n	80094ce <HAL_GPIO_Init+0x26a>
 800947e:	2306      	movs	r3, #6
 8009480:	e025      	b.n	80094ce <HAL_GPIO_Init+0x26a>
 8009482:	2305      	movs	r3, #5
 8009484:	e023      	b.n	80094ce <HAL_GPIO_Init+0x26a>
 8009486:	2304      	movs	r3, #4
 8009488:	e021      	b.n	80094ce <HAL_GPIO_Init+0x26a>
 800948a:	2303      	movs	r3, #3
 800948c:	e01f      	b.n	80094ce <HAL_GPIO_Init+0x26a>
 800948e:	2302      	movs	r3, #2
 8009490:	e01d      	b.n	80094ce <HAL_GPIO_Init+0x26a>
 8009492:	2301      	movs	r3, #1
 8009494:	e01b      	b.n	80094ce <HAL_GPIO_Init+0x26a>
 8009496:	bf00      	nop
 8009498:	58000080 	.word	0x58000080
 800949c:	58024400 	.word	0x58024400
 80094a0:	58000400 	.word	0x58000400
 80094a4:	58020000 	.word	0x58020000
 80094a8:	58020400 	.word	0x58020400
 80094ac:	58020800 	.word	0x58020800
 80094b0:	58020c00 	.word	0x58020c00
 80094b4:	58021000 	.word	0x58021000
 80094b8:	58021400 	.word	0x58021400
 80094bc:	58021800 	.word	0x58021800
 80094c0:	58021c00 	.word	0x58021c00
 80094c4:	58022000 	.word	0x58022000
 80094c8:	58022400 	.word	0x58022400
 80094cc:	2300      	movs	r3, #0
 80094ce:	69fa      	ldr	r2, [r7, #28]
 80094d0:	f002 0203 	and.w	r2, r2, #3
 80094d4:	0092      	lsls	r2, r2, #2
 80094d6:	4093      	lsls	r3, r2
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	4313      	orrs	r3, r2
 80094dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80094de:	4938      	ldr	r1, [pc, #224]	; (80095c0 <HAL_GPIO_Init+0x35c>)
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	089b      	lsrs	r3, r3, #2
 80094e4:	3302      	adds	r3, #2
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80094ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	43db      	mvns	r3, r3
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	4013      	ands	r3, r2
 80094fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800950a:	69ba      	ldr	r2, [r7, #24]
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	4313      	orrs	r3, r2
 8009510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800951a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	43db      	mvns	r3, r3
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	4013      	ands	r3, r2
 800952a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	4313      	orrs	r3, r2
 800953e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	43db      	mvns	r3, r3
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	4013      	ands	r3, r2
 8009556:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	4313      	orrs	r3, r2
 800956a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	43db      	mvns	r3, r3
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	4013      	ands	r3, r2
 8009580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	4313      	orrs	r3, r2
 8009594:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	69ba      	ldr	r2, [r7, #24]
 800959a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	3301      	adds	r3, #1
 80095a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	fa22 f303 	lsr.w	r3, r2, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f47f ae63 	bne.w	8009278 <HAL_GPIO_Init+0x14>
  }
}
 80095b2:	bf00      	nop
 80095b4:	bf00      	nop
 80095b6:	3724      	adds	r7, #36	; 0x24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	58000400 	.word	0x58000400

080095c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	691a      	ldr	r2, [r3, #16]
 80095d4:	887b      	ldrh	r3, [r7, #2]
 80095d6:	4013      	ands	r3, r2
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80095dc:	2301      	movs	r3, #1
 80095de:	73fb      	strb	r3, [r7, #15]
 80095e0:	e001      	b.n	80095e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	807b      	strh	r3, [r7, #2]
 8009600:	4613      	mov	r3, r2
 8009602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009604:	787b      	ldrb	r3, [r7, #1]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d003      	beq.n	8009612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800960a:	887a      	ldrh	r2, [r7, #2]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009610:	e003      	b.n	800961a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009612:	887b      	ldrh	r3, [r7, #2]
 8009614:	041a      	lsls	r2, r3, #16
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	619a      	str	r2, [r3, #24]
}
 800961a:	bf00      	nop
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
	...

08009628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e08b      	b.n	8009752 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d106      	bne.n	8009654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7f7 ff0c 	bl	800146c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2224      	movs	r2, #36	; 0x24
 8009658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0201 	bic.w	r2, r2, #1
 800966a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009678:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009688:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d107      	bne.n	80096a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800969e:	609a      	str	r2, [r3, #8]
 80096a0:	e006      	b.n	80096b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	689a      	ldr	r2, [r3, #8]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80096ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d108      	bne.n	80096ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096c6:	605a      	str	r2, [r3, #4]
 80096c8:	e007      	b.n	80096da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6859      	ldr	r1, [r3, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4b1d      	ldr	r3, [pc, #116]	; (800975c <HAL_I2C_Init+0x134>)
 80096e6:	430b      	orrs	r3, r1
 80096e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68da      	ldr	r2, [r3, #12]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	691a      	ldr	r2, [r3, #16]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	430a      	orrs	r2, r1
 8009712:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	69d9      	ldr	r1, [r3, #28]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a1a      	ldr	r2, [r3, #32]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0201 	orr.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	02008000 	.word	0x02008000

08009760 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af02      	add	r7, sp, #8
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	607a      	str	r2, [r7, #4]
 800976a:	461a      	mov	r2, r3
 800976c:	460b      	mov	r3, r1
 800976e:	817b      	strh	r3, [r7, #10]
 8009770:	4613      	mov	r3, r2
 8009772:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b20      	cmp	r3, #32
 800977e:	f040 80fd 	bne.w	800997c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009788:	2b01      	cmp	r3, #1
 800978a:	d101      	bne.n	8009790 <HAL_I2C_Master_Transmit+0x30>
 800978c:	2302      	movs	r3, #2
 800978e:	e0f6      	b.n	800997e <HAL_I2C_Master_Transmit+0x21e>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009798:	f7fa fdf4 	bl	8004384 <HAL_GetTick>
 800979c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	2319      	movs	r3, #25
 80097a4:	2201      	movs	r2, #1
 80097a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 fa0a 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e0e1      	b.n	800997e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2221      	movs	r2, #33	; 0x21
 80097be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2210      	movs	r2, #16
 80097c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	893a      	ldrh	r2, [r7, #8]
 80097da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	2bff      	cmp	r3, #255	; 0xff
 80097ea:	d906      	bls.n	80097fa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	22ff      	movs	r2, #255	; 0xff
 80097f0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80097f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	e007      	b.n	800980a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097fe:	b29a      	uxth	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009808:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800980e:	2b00      	cmp	r3, #0
 8009810:	d024      	beq.n	800985c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009816:	781a      	ldrb	r2, [r3, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982c:	b29b      	uxth	r3, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800983a:	3b01      	subs	r3, #1
 800983c:	b29a      	uxth	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009846:	b2db      	uxtb	r3, r3
 8009848:	3301      	adds	r3, #1
 800984a:	b2da      	uxtb	r2, r3
 800984c:	8979      	ldrh	r1, [r7, #10]
 800984e:	4b4e      	ldr	r3, [pc, #312]	; (8009988 <HAL_I2C_Master_Transmit+0x228>)
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 fc05 	bl	800a064 <I2C_TransferConfig>
 800985a:	e066      	b.n	800992a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009860:	b2da      	uxtb	r2, r3
 8009862:	8979      	ldrh	r1, [r7, #10]
 8009864:	4b48      	ldr	r3, [pc, #288]	; (8009988 <HAL_I2C_Master_Transmit+0x228>)
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fbfa 	bl	800a064 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009870:	e05b      	b.n	800992a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	6a39      	ldr	r1, [r7, #32]
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 f9fd 	bl	8009c76 <I2C_WaitOnTXISFlagUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e07b      	b.n	800997e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	781a      	ldrb	r2, [r3, #0]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	3b01      	subs	r3, #1
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ae:	3b01      	subs	r3, #1
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d034      	beq.n	800992a <HAL_I2C_Master_Transmit+0x1ca>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d130      	bne.n	800992a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	2200      	movs	r2, #0
 80098d0:	2180      	movs	r1, #128	; 0x80
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 f976 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e04d      	b.n	800997e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	2bff      	cmp	r3, #255	; 0xff
 80098ea:	d90e      	bls.n	800990a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	22ff      	movs	r2, #255	; 0xff
 80098f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	8979      	ldrh	r1, [r7, #10]
 80098fa:	2300      	movs	r3, #0
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 fbae 	bl	800a064 <I2C_TransferConfig>
 8009908:	e00f      	b.n	800992a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990e:	b29a      	uxth	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009918:	b2da      	uxtb	r2, r3
 800991a:	8979      	ldrh	r1, [r7, #10]
 800991c:	2300      	movs	r3, #0
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 fb9d 	bl	800a064 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800992e:	b29b      	uxth	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d19e      	bne.n	8009872 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	6a39      	ldr	r1, [r7, #32]
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 f9e3 	bl	8009d04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e01a      	b.n	800997e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2220      	movs	r2, #32
 800994e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6859      	ldr	r1, [r3, #4]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	4b0c      	ldr	r3, [pc, #48]	; (800998c <HAL_I2C_Master_Transmit+0x22c>)
 800995c:	400b      	ands	r3, r1
 800995e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	e000      	b.n	800997e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800997c:	2302      	movs	r3, #2
  }
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	80002000 	.word	0x80002000
 800998c:	fe00e800 	.word	0xfe00e800

08009990 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af02      	add	r7, sp, #8
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	461a      	mov	r2, r3
 800999c:	460b      	mov	r3, r1
 800999e:	817b      	strh	r3, [r7, #10]
 80099a0:	4613      	mov	r3, r2
 80099a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b20      	cmp	r3, #32
 80099ae:	f040 80db 	bne.w	8009b68 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d101      	bne.n	80099c0 <HAL_I2C_Master_Receive+0x30>
 80099bc:	2302      	movs	r3, #2
 80099be:	e0d4      	b.n	8009b6a <HAL_I2C_Master_Receive+0x1da>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80099c8:	f7fa fcdc 	bl	8004384 <HAL_GetTick>
 80099cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	2319      	movs	r3, #25
 80099d4:	2201      	movs	r2, #1
 80099d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 f8f2 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e0bf      	b.n	8009b6a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2222      	movs	r2, #34	; 0x22
 80099ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2210      	movs	r2, #16
 80099f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	893a      	ldrh	r2, [r7, #8]
 8009a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	2bff      	cmp	r3, #255	; 0xff
 8009a1a:	d90e      	bls.n	8009a3a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	22ff      	movs	r2, #255	; 0xff
 8009a20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	8979      	ldrh	r1, [r7, #10]
 8009a2a:	4b52      	ldr	r3, [pc, #328]	; (8009b74 <HAL_I2C_Master_Receive+0x1e4>)
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 fb16 	bl	800a064 <I2C_TransferConfig>
 8009a38:	e06d      	b.n	8009b16 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	8979      	ldrh	r1, [r7, #10]
 8009a4c:	4b49      	ldr	r3, [pc, #292]	; (8009b74 <HAL_I2C_Master_Receive+0x1e4>)
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 fb05 	bl	800a064 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009a5a:	e05c      	b.n	8009b16 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	6a39      	ldr	r1, [r7, #32]
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f993 	bl	8009d8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e07c      	b.n	8009b6a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d034      	beq.n	8009b16 <HAL_I2C_Master_Receive+0x186>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d130      	bne.n	8009b16 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	2200      	movs	r2, #0
 8009abc:	2180      	movs	r1, #128	; 0x80
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 f880 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e04d      	b.n	8009b6a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	2bff      	cmp	r3, #255	; 0xff
 8009ad6:	d90e      	bls.n	8009af6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	22ff      	movs	r2, #255	; 0xff
 8009adc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	8979      	ldrh	r1, [r7, #10]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 fab8 	bl	800a064 <I2C_TransferConfig>
 8009af4:	e00f      	b.n	8009b16 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	8979      	ldrh	r1, [r7, #10]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 faa7 	bl	800a064 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d19d      	bne.n	8009a5c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	6a39      	ldr	r1, [r7, #32]
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 f8ed 	bl	8009d04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e01a      	b.n	8009b6a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6859      	ldr	r1, [r3, #4]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <HAL_I2C_Master_Receive+0x1e8>)
 8009b48:	400b      	ands	r3, r1
 8009b4a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e000      	b.n	8009b6a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009b68:	2302      	movs	r3, #2
  }
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3718      	adds	r7, #24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	80002400 	.word	0x80002400
 8009b78:	fe00e800 	.word	0xfe00e800

08009b7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d103      	bne.n	8009b9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2200      	movs	r2, #0
 8009b98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d007      	beq.n	8009bb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	699a      	ldr	r2, [r3, #24]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0201 	orr.w	r2, r2, #1
 8009bb6:	619a      	str	r2, [r3, #24]
  }
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bd4:	e03b      	b.n	8009c4e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 f962 	bl	8009ea4 <I2C_IsErrorOccurred>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e041      	b.n	8009c6e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bf0:	d02d      	beq.n	8009c4e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bf2:	f7fa fbc7 	bl	8004384 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d302      	bcc.n	8009c08 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d122      	bne.n	8009c4e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	699a      	ldr	r2, [r3, #24]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	4013      	ands	r3, r2
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	bf0c      	ite	eq
 8009c18:	2301      	moveq	r3, #1
 8009c1a:	2300      	movne	r3, #0
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	461a      	mov	r2, r3
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d113      	bne.n	8009c4e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c2a:	f043 0220 	orr.w	r2, r3, #32
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2220      	movs	r2, #32
 8009c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e00f      	b.n	8009c6e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	699a      	ldr	r2, [r3, #24]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	4013      	ands	r3, r2
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	bf0c      	ite	eq
 8009c5e:	2301      	moveq	r3, #1
 8009c60:	2300      	movne	r3, #0
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	461a      	mov	r2, r3
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d0b4      	beq.n	8009bd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	60b9      	str	r1, [r7, #8]
 8009c80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c82:	e033      	b.n	8009cec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	68b9      	ldr	r1, [r7, #8]
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 f90b 	bl	8009ea4 <I2C_IsErrorOccurred>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e031      	b.n	8009cfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c9e:	d025      	beq.n	8009cec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ca0:	f7fa fb70 	bl	8004384 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d302      	bcc.n	8009cb6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d11a      	bne.n	8009cec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	f003 0302 	and.w	r3, r3, #2
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d013      	beq.n	8009cec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc8:	f043 0220 	orr.w	r2, r3, #32
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e007      	b.n	8009cfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	f003 0302 	and.w	r3, r3, #2
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d1c4      	bne.n	8009c84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d10:	e02f      	b.n	8009d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f8c4 	bl	8009ea4 <I2C_IsErrorOccurred>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e02d      	b.n	8009d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d26:	f7fa fb2d 	bl	8004384 <HAL_GetTick>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d302      	bcc.n	8009d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d11a      	bne.n	8009d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b20      	cmp	r3, #32
 8009d48:	d013      	beq.n	8009d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d4e:	f043 0220 	orr.w	r2, r3, #32
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e007      	b.n	8009d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f003 0320 	and.w	r3, r3, #32
 8009d7c:	2b20      	cmp	r3, #32
 8009d7e:	d1c8      	bne.n	8009d12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009d9c:	e071      	b.n	8009e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	68b9      	ldr	r1, [r7, #8]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 f87e 	bl	8009ea4 <I2C_IsErrorOccurred>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b20      	cmp	r3, #32
 8009dbe:	d13b      	bne.n	8009e38 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d138      	bne.n	8009e38 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d105      	bne.n	8009de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	f003 0310 	and.w	r3, r3, #16
 8009dea:	2b10      	cmp	r3, #16
 8009dec:	d121      	bne.n	8009e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2210      	movs	r2, #16
 8009df4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2204      	movs	r2, #4
 8009dfa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2220      	movs	r2, #32
 8009e02:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6859      	ldr	r1, [r3, #4]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	4b24      	ldr	r3, [pc, #144]	; (8009ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009e10:	400b      	ands	r3, r1
 8009e12:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	75fb      	strb	r3, [r7, #23]
 8009e30:	e002      	b.n	8009e38 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009e38:	f7fa faa4 	bl	8004384 <HAL_GetTick>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d302      	bcc.n	8009e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d119      	bne.n	8009e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d116      	bne.n	8009e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	d00f      	beq.n	8009e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e66:	f043 0220 	orr.w	r2, r3, #32
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d002      	beq.n	8009e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d083      	beq.n	8009d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	fe00e800 	.word	0xfe00e800

08009ea4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08a      	sub	sp, #40	; 0x28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	f003 0310 	and.w	r3, r3, #16
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d068      	beq.n	8009fa2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2210      	movs	r2, #16
 8009ed6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ed8:	e049      	b.n	8009f6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ee0:	d045      	beq.n	8009f6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ee2:	f7fa fa4f 	bl	8004384 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d302      	bcc.n	8009ef8 <I2C_IsErrorOccurred+0x54>
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d13a      	bne.n	8009f6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f1a:	d121      	bne.n	8009f60 <I2C_IsErrorOccurred+0xbc>
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f22:	d01d      	beq.n	8009f60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009f24:	7cfb      	ldrb	r3, [r7, #19]
 8009f26:	2b20      	cmp	r3, #32
 8009f28:	d01a      	beq.n	8009f60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009f3a:	f7fa fa23 	bl	8004384 <HAL_GetTick>
 8009f3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f40:	e00e      	b.n	8009f60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009f42:	f7fa fa1f 	bl	8004384 <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	2b19      	cmp	r3, #25
 8009f4e:	d907      	bls.n	8009f60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	f043 0320 	orr.w	r3, r3, #32
 8009f56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009f5e:	e006      	b.n	8009f6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	f003 0320 	and.w	r3, r3, #32
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	d1e9      	bne.n	8009f42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	f003 0320 	and.w	r3, r3, #32
 8009f78:	2b20      	cmp	r3, #32
 8009f7a:	d003      	beq.n	8009f84 <I2C_IsErrorOccurred+0xe0>
 8009f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0aa      	beq.n	8009eda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d103      	bne.n	8009f94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2220      	movs	r2, #32
 8009f92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	f043 0304 	orr.w	r3, r3, #4
 8009f9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	f043 0301 	orr.w	r3, r3, #1
 8009fba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00b      	beq.n	8009fee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	f043 0308 	orr.w	r3, r3, #8
 8009fdc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009fe6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00b      	beq.n	800a010 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ff8:	6a3b      	ldr	r3, [r7, #32]
 8009ffa:	f043 0302 	orr.w	r3, r3, #2
 8009ffe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a008:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a014:	2b00      	cmp	r3, #0
 800a016:	d01c      	beq.n	800a052 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f7ff fdaf 	bl	8009b7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6859      	ldr	r1, [r3, #4]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	4b0d      	ldr	r3, [pc, #52]	; (800a060 <I2C_IsErrorOccurred+0x1bc>)
 800a02a:	400b      	ands	r3, r1
 800a02c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	431a      	orrs	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2220      	movs	r2, #32
 800a03e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a056:	4618      	mov	r0, r3
 800a058:	3728      	adds	r7, #40	; 0x28
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	fe00e800 	.word	0xfe00e800

0800a064 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	607b      	str	r3, [r7, #4]
 800a06e:	460b      	mov	r3, r1
 800a070:	817b      	strh	r3, [r7, #10]
 800a072:	4613      	mov	r3, r2
 800a074:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a076:	897b      	ldrh	r3, [r7, #10]
 800a078:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a07c:	7a7b      	ldrb	r3, [r7, #9]
 800a07e:	041b      	lsls	r3, r3, #16
 800a080:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a084:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a092:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	0d5b      	lsrs	r3, r3, #21
 800a09e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a0a2:	4b08      	ldr	r3, [pc, #32]	; (800a0c4 <I2C_TransferConfig+0x60>)
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	43db      	mvns	r3, r3
 800a0a8:	ea02 0103 	and.w	r1, r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a0b6:	bf00      	nop
 800a0b8:	371c      	adds	r7, #28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	03ff63ff 	.word	0x03ff63ff

0800a0c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	2b20      	cmp	r3, #32
 800a0dc:	d138      	bne.n	800a150 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d101      	bne.n	800a0ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	e032      	b.n	800a152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2224      	movs	r2, #36	; 0x24
 800a0f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 0201 	bic.w	r2, r2, #1
 800a10a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a11a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6819      	ldr	r1, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f042 0201 	orr.w	r2, r2, #1
 800a13a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2220      	movs	r2, #32
 800a140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	e000      	b.n	800a152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a150:	2302      	movs	r3, #2
  }
}
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a15e:	b480      	push	{r7}
 800a160:	b085      	sub	sp, #20
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b20      	cmp	r3, #32
 800a172:	d139      	bne.n	800a1e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a17e:	2302      	movs	r3, #2
 800a180:	e033      	b.n	800a1ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2224      	movs	r2, #36	; 0x24
 800a18e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f022 0201 	bic.w	r2, r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a1b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	021b      	lsls	r3, r3, #8
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f042 0201 	orr.w	r2, r2, #1
 800a1d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2220      	movs	r2, #32
 800a1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e000      	b.n	800a1ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a1e8:	2302      	movs	r3, #2
  }
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
	...

0800a1f8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a200:	4b0d      	ldr	r3, [pc, #52]	; (800a238 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a206:	4a0c      	ldr	r2, [pc, #48]	; (800a238 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a208:	f043 0302 	orr.w	r3, r3, #2
 800a20c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a210:	4b09      	ldr	r3, [pc, #36]	; (800a238 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	4906      	ldr	r1, [pc, #24]	; (800a23c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4313      	orrs	r3, r2
 800a228:	604b      	str	r3, [r1, #4]
}
 800a22a:	bf00      	nop
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	58024400 	.word	0x58024400
 800a23c:	58000400 	.word	0x58000400

0800a240 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a248:	4b19      	ldr	r3, [pc, #100]	; (800a2b0 <HAL_PWREx_ConfigSupply+0x70>)
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b04      	cmp	r3, #4
 800a252:	d00a      	beq.n	800a26a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a254:	4b16      	ldr	r3, [pc, #88]	; (800a2b0 <HAL_PWREx_ConfigSupply+0x70>)
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f003 0307 	and.w	r3, r3, #7
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d001      	beq.n	800a266 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e01f      	b.n	800a2a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	e01d      	b.n	800a2a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a26a:	4b11      	ldr	r3, [pc, #68]	; (800a2b0 <HAL_PWREx_ConfigSupply+0x70>)
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	f023 0207 	bic.w	r2, r3, #7
 800a272:	490f      	ldr	r1, [pc, #60]	; (800a2b0 <HAL_PWREx_ConfigSupply+0x70>)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4313      	orrs	r3, r2
 800a278:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a27a:	f7fa f883 	bl	8004384 <HAL_GetTick>
 800a27e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a280:	e009      	b.n	800a296 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a282:	f7fa f87f 	bl	8004384 <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a290:	d901      	bls.n	800a296 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e007      	b.n	800a2a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a296:	4b06      	ldr	r3, [pc, #24]	; (800a2b0 <HAL_PWREx_ConfigSupply+0x70>)
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a29e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2a2:	d1ee      	bne.n	800a282 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	58024800 	.word	0x58024800

0800a2b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08c      	sub	sp, #48	; 0x30
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d102      	bne.n	800a2c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	f000 bc48 	b.w	800ab58 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 0301 	and.w	r3, r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 8088 	beq.w	800a3e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2d6:	4b99      	ldr	r3, [pc, #612]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2e0:	4b96      	ldr	r3, [pc, #600]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e8:	2b10      	cmp	r3, #16
 800a2ea:	d007      	beq.n	800a2fc <HAL_RCC_OscConfig+0x48>
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	2b18      	cmp	r3, #24
 800a2f0:	d111      	bne.n	800a316 <HAL_RCC_OscConfig+0x62>
 800a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f4:	f003 0303 	and.w	r3, r3, #3
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d10c      	bne.n	800a316 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2fc:	4b8f      	ldr	r3, [pc, #572]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d06d      	beq.n	800a3e4 <HAL_RCC_OscConfig+0x130>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d169      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	f000 bc21 	b.w	800ab58 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a31e:	d106      	bne.n	800a32e <HAL_RCC_OscConfig+0x7a>
 800a320:	4b86      	ldr	r3, [pc, #536]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a85      	ldr	r2, [pc, #532]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	e02e      	b.n	800a38c <HAL_RCC_OscConfig+0xd8>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10c      	bne.n	800a350 <HAL_RCC_OscConfig+0x9c>
 800a336:	4b81      	ldr	r3, [pc, #516]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a80      	ldr	r2, [pc, #512]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a33c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	4b7e      	ldr	r3, [pc, #504]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a7d      	ldr	r2, [pc, #500]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a34c:	6013      	str	r3, [r2, #0]
 800a34e:	e01d      	b.n	800a38c <HAL_RCC_OscConfig+0xd8>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a358:	d10c      	bne.n	800a374 <HAL_RCC_OscConfig+0xc0>
 800a35a:	4b78      	ldr	r3, [pc, #480]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a77      	ldr	r2, [pc, #476]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a364:	6013      	str	r3, [r2, #0]
 800a366:	4b75      	ldr	r3, [pc, #468]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a74      	ldr	r2, [pc, #464]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a36c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a370:	6013      	str	r3, [r2, #0]
 800a372:	e00b      	b.n	800a38c <HAL_RCC_OscConfig+0xd8>
 800a374:	4b71      	ldr	r3, [pc, #452]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a70      	ldr	r2, [pc, #448]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a37a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	4b6e      	ldr	r3, [pc, #440]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a6d      	ldr	r2, [pc, #436]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a38a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d013      	beq.n	800a3bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a394:	f7f9 fff6 	bl	8004384 <HAL_GetTick>
 800a398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a39a:	e008      	b.n	800a3ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a39c:	f7f9 fff2 	bl	8004384 <HAL_GetTick>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	2b64      	cmp	r3, #100	; 0x64
 800a3a8:	d901      	bls.n	800a3ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	e3d4      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a3ae:	4b63      	ldr	r3, [pc, #396]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0f0      	beq.n	800a39c <HAL_RCC_OscConfig+0xe8>
 800a3ba:	e014      	b.n	800a3e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3bc:	f7f9 ffe2 	bl	8004384 <HAL_GetTick>
 800a3c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a3c2:	e008      	b.n	800a3d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3c4:	f7f9 ffde 	bl	8004384 <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	2b64      	cmp	r3, #100	; 0x64
 800a3d0:	d901      	bls.n	800a3d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e3c0      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a3d6:	4b59      	ldr	r3, [pc, #356]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1f0      	bne.n	800a3c4 <HAL_RCC_OscConfig+0x110>
 800a3e2:	e000      	b.n	800a3e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0302 	and.w	r3, r3, #2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 80ca 	beq.w	800a588 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3f4:	4b51      	ldr	r3, [pc, #324]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3fe:	4b4f      	ldr	r3, [pc, #316]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a402:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d007      	beq.n	800a41a <HAL_RCC_OscConfig+0x166>
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	2b18      	cmp	r3, #24
 800a40e:	d156      	bne.n	800a4be <HAL_RCC_OscConfig+0x20a>
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	f003 0303 	and.w	r3, r3, #3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d151      	bne.n	800a4be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a41a:	4b48      	ldr	r3, [pc, #288]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0304 	and.w	r3, r3, #4
 800a422:	2b00      	cmp	r3, #0
 800a424:	d005      	beq.n	800a432 <HAL_RCC_OscConfig+0x17e>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e392      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a432:	4b42      	ldr	r3, [pc, #264]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f023 0219 	bic.w	r2, r3, #25
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	493f      	ldr	r1, [pc, #252]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a440:	4313      	orrs	r3, r2
 800a442:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a444:	f7f9 ff9e 	bl	8004384 <HAL_GetTick>
 800a448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a44a:	e008      	b.n	800a45e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a44c:	f7f9 ff9a 	bl	8004384 <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	2b02      	cmp	r3, #2
 800a458:	d901      	bls.n	800a45e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e37c      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a45e:	4b37      	ldr	r3, [pc, #220]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0304 	and.w	r3, r3, #4
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0f0      	beq.n	800a44c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a46a:	f7f9 ff97 	bl	800439c <HAL_GetREVID>
 800a46e:	4603      	mov	r3, r0
 800a470:	f241 0203 	movw	r2, #4099	; 0x1003
 800a474:	4293      	cmp	r3, r2
 800a476:	d817      	bhi.n	800a4a8 <HAL_RCC_OscConfig+0x1f4>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	2b40      	cmp	r3, #64	; 0x40
 800a47e:	d108      	bne.n	800a492 <HAL_RCC_OscConfig+0x1de>
 800a480:	4b2e      	ldr	r3, [pc, #184]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a488:	4a2c      	ldr	r2, [pc, #176]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a48a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a48e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a490:	e07a      	b.n	800a588 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a492:	4b2a      	ldr	r3, [pc, #168]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	031b      	lsls	r3, r3, #12
 800a4a0:	4926      	ldr	r1, [pc, #152]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4a6:	e06f      	b.n	800a588 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4a8:	4b24      	ldr	r3, [pc, #144]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	061b      	lsls	r3, r3, #24
 800a4b6:	4921      	ldr	r1, [pc, #132]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4bc:	e064      	b.n	800a588 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d047      	beq.n	800a556 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a4c6:	4b1d      	ldr	r3, [pc, #116]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f023 0219 	bic.w	r2, r3, #25
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	491a      	ldr	r1, [pc, #104]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4d8:	f7f9 ff54 	bl	8004384 <HAL_GetTick>
 800a4dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4de:	e008      	b.n	800a4f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4e0:	f7f9 ff50 	bl	8004384 <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d901      	bls.n	800a4f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e332      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4f2:	4b12      	ldr	r3, [pc, #72]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0304 	and.w	r3, r3, #4
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0f0      	beq.n	800a4e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4fe:	f7f9 ff4d 	bl	800439c <HAL_GetREVID>
 800a502:	4603      	mov	r3, r0
 800a504:	f241 0203 	movw	r2, #4099	; 0x1003
 800a508:	4293      	cmp	r3, r2
 800a50a:	d819      	bhi.n	800a540 <HAL_RCC_OscConfig+0x28c>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	2b40      	cmp	r3, #64	; 0x40
 800a512:	d108      	bne.n	800a526 <HAL_RCC_OscConfig+0x272>
 800a514:	4b09      	ldr	r3, [pc, #36]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a51c:	4a07      	ldr	r2, [pc, #28]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a51e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a522:	6053      	str	r3, [r2, #4]
 800a524:	e030      	b.n	800a588 <HAL_RCC_OscConfig+0x2d4>
 800a526:	4b05      	ldr	r3, [pc, #20]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	031b      	lsls	r3, r3, #12
 800a534:	4901      	ldr	r1, [pc, #4]	; (800a53c <HAL_RCC_OscConfig+0x288>)
 800a536:	4313      	orrs	r3, r2
 800a538:	604b      	str	r3, [r1, #4]
 800a53a:	e025      	b.n	800a588 <HAL_RCC_OscConfig+0x2d4>
 800a53c:	58024400 	.word	0x58024400
 800a540:	4b9a      	ldr	r3, [pc, #616]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	061b      	lsls	r3, r3, #24
 800a54e:	4997      	ldr	r1, [pc, #604]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a550:	4313      	orrs	r3, r2
 800a552:	604b      	str	r3, [r1, #4]
 800a554:	e018      	b.n	800a588 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a556:	4b95      	ldr	r3, [pc, #596]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a94      	ldr	r2, [pc, #592]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a55c:	f023 0301 	bic.w	r3, r3, #1
 800a560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a562:	f7f9 ff0f 	bl	8004384 <HAL_GetTick>
 800a566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a568:	e008      	b.n	800a57c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a56a:	f7f9 ff0b 	bl	8004384 <HAL_GetTick>
 800a56e:	4602      	mov	r2, r0
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	2b02      	cmp	r3, #2
 800a576:	d901      	bls.n	800a57c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e2ed      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a57c:	4b8b      	ldr	r3, [pc, #556]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1f0      	bne.n	800a56a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0310 	and.w	r3, r3, #16
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 80a9 	beq.w	800a6e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a596:	4b85      	ldr	r3, [pc, #532]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a59e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5a0:	4b82      	ldr	r3, [pc, #520]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	2b08      	cmp	r3, #8
 800a5aa:	d007      	beq.n	800a5bc <HAL_RCC_OscConfig+0x308>
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	2b18      	cmp	r3, #24
 800a5b0:	d13a      	bne.n	800a628 <HAL_RCC_OscConfig+0x374>
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f003 0303 	and.w	r3, r3, #3
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d135      	bne.n	800a628 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5bc:	4b7b      	ldr	r3, [pc, #492]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <HAL_RCC_OscConfig+0x320>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	2b80      	cmp	r3, #128	; 0x80
 800a5ce:	d001      	beq.n	800a5d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e2c1      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5d4:	f7f9 fee2 	bl	800439c <HAL_GetREVID>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d817      	bhi.n	800a612 <HAL_RCC_OscConfig+0x35e>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d108      	bne.n	800a5fc <HAL_RCC_OscConfig+0x348>
 800a5ea:	4b70      	ldr	r3, [pc, #448]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a5f2:	4a6e      	ldr	r2, [pc, #440]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a5f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5fa:	e075      	b.n	800a6e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5fc:	4b6b      	ldr	r3, [pc, #428]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a1b      	ldr	r3, [r3, #32]
 800a608:	069b      	lsls	r3, r3, #26
 800a60a:	4968      	ldr	r1, [pc, #416]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a610:	e06a      	b.n	800a6e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a612:	4b66      	ldr	r3, [pc, #408]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	061b      	lsls	r3, r3, #24
 800a620:	4962      	ldr	r1, [pc, #392]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a622:	4313      	orrs	r3, r2
 800a624:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a626:	e05f      	b.n	800a6e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d042      	beq.n	800a6b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a630:	4b5e      	ldr	r3, [pc, #376]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a5d      	ldr	r2, [pc, #372]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a63a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a63c:	f7f9 fea2 	bl	8004384 <HAL_GetTick>
 800a640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a642:	e008      	b.n	800a656 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a644:	f7f9 fe9e 	bl	8004384 <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d901      	bls.n	800a656 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e280      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a656:	4b55      	ldr	r3, [pc, #340]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0f0      	beq.n	800a644 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a662:	f7f9 fe9b 	bl	800439c <HAL_GetREVID>
 800a666:	4603      	mov	r3, r0
 800a668:	f241 0203 	movw	r2, #4099	; 0x1003
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d817      	bhi.n	800a6a0 <HAL_RCC_OscConfig+0x3ec>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a1b      	ldr	r3, [r3, #32]
 800a674:	2b20      	cmp	r3, #32
 800a676:	d108      	bne.n	800a68a <HAL_RCC_OscConfig+0x3d6>
 800a678:	4b4c      	ldr	r3, [pc, #304]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a680:	4a4a      	ldr	r2, [pc, #296]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a686:	6053      	str	r3, [r2, #4]
 800a688:	e02e      	b.n	800a6e8 <HAL_RCC_OscConfig+0x434>
 800a68a:	4b48      	ldr	r3, [pc, #288]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	069b      	lsls	r3, r3, #26
 800a698:	4944      	ldr	r1, [pc, #272]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a69a:	4313      	orrs	r3, r2
 800a69c:	604b      	str	r3, [r1, #4]
 800a69e:	e023      	b.n	800a6e8 <HAL_RCC_OscConfig+0x434>
 800a6a0:	4b42      	ldr	r3, [pc, #264]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	061b      	lsls	r3, r3, #24
 800a6ae:	493f      	ldr	r1, [pc, #252]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	60cb      	str	r3, [r1, #12]
 800a6b4:	e018      	b.n	800a6e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a6b6:	4b3d      	ldr	r3, [pc, #244]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a3c      	ldr	r2, [pc, #240]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a6bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c2:	f7f9 fe5f 	bl	8004384 <HAL_GetTick>
 800a6c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a6c8:	e008      	b.n	800a6dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a6ca:	f7f9 fe5b 	bl	8004384 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d901      	bls.n	800a6dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a6d8:	2303      	movs	r3, #3
 800a6da:	e23d      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a6dc:	4b33      	ldr	r3, [pc, #204]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1f0      	bne.n	800a6ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0308 	and.w	r3, r3, #8
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d036      	beq.n	800a762 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d019      	beq.n	800a730 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6fc:	4b2b      	ldr	r3, [pc, #172]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a700:	4a2a      	ldr	r2, [pc, #168]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a702:	f043 0301 	orr.w	r3, r3, #1
 800a706:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a708:	f7f9 fe3c 	bl	8004384 <HAL_GetTick>
 800a70c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a70e:	e008      	b.n	800a722 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a710:	f7f9 fe38 	bl	8004384 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d901      	bls.n	800a722 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e21a      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a722:	4b22      	ldr	r3, [pc, #136]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a726:	f003 0302 	and.w	r3, r3, #2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0f0      	beq.n	800a710 <HAL_RCC_OscConfig+0x45c>
 800a72e:	e018      	b.n	800a762 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a730:	4b1e      	ldr	r3, [pc, #120]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a734:	4a1d      	ldr	r2, [pc, #116]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a736:	f023 0301 	bic.w	r3, r3, #1
 800a73a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a73c:	f7f9 fe22 	bl	8004384 <HAL_GetTick>
 800a740:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a742:	e008      	b.n	800a756 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a744:	f7f9 fe1e 	bl	8004384 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d901      	bls.n	800a756 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e200      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a756:	4b15      	ldr	r3, [pc, #84]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1f0      	bne.n	800a744 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 0320 	and.w	r3, r3, #32
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d039      	beq.n	800a7e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d01c      	beq.n	800a7b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a776:	4b0d      	ldr	r3, [pc, #52]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a0c      	ldr	r2, [pc, #48]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a77c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a780:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a782:	f7f9 fdff 	bl	8004384 <HAL_GetTick>
 800a786:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a788:	e008      	b.n	800a79c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a78a:	f7f9 fdfb 	bl	8004384 <HAL_GetTick>
 800a78e:	4602      	mov	r2, r0
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	2b02      	cmp	r3, #2
 800a796:	d901      	bls.n	800a79c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e1dd      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a79c:	4b03      	ldr	r3, [pc, #12]	; (800a7ac <HAL_RCC_OscConfig+0x4f8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d0f0      	beq.n	800a78a <HAL_RCC_OscConfig+0x4d6>
 800a7a8:	e01b      	b.n	800a7e2 <HAL_RCC_OscConfig+0x52e>
 800a7aa:	bf00      	nop
 800a7ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a7b0:	4b9b      	ldr	r3, [pc, #620]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a9a      	ldr	r2, [pc, #616]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a7b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a7bc:	f7f9 fde2 	bl	8004384 <HAL_GetTick>
 800a7c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a7c2:	e008      	b.n	800a7d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7c4:	f7f9 fdde 	bl	8004384 <HAL_GetTick>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d901      	bls.n	800a7d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e1c0      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a7d6:	4b92      	ldr	r3, [pc, #584]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1f0      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0304 	and.w	r3, r3, #4
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 8081 	beq.w	800a8f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a7f0:	4b8c      	ldr	r3, [pc, #560]	; (800aa24 <HAL_RCC_OscConfig+0x770>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a8b      	ldr	r2, [pc, #556]	; (800aa24 <HAL_RCC_OscConfig+0x770>)
 800a7f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7fc:	f7f9 fdc2 	bl	8004384 <HAL_GetTick>
 800a800:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a802:	e008      	b.n	800a816 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a804:	f7f9 fdbe 	bl	8004384 <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	2b64      	cmp	r3, #100	; 0x64
 800a810:	d901      	bls.n	800a816 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e1a0      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a816:	4b83      	ldr	r3, [pc, #524]	; (800aa24 <HAL_RCC_OscConfig+0x770>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d0f0      	beq.n	800a804 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d106      	bne.n	800a838 <HAL_RCC_OscConfig+0x584>
 800a82a:	4b7d      	ldr	r3, [pc, #500]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a82e:	4a7c      	ldr	r2, [pc, #496]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	6713      	str	r3, [r2, #112]	; 0x70
 800a836:	e02d      	b.n	800a894 <HAL_RCC_OscConfig+0x5e0>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10c      	bne.n	800a85a <HAL_RCC_OscConfig+0x5a6>
 800a840:	4b77      	ldr	r3, [pc, #476]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a844:	4a76      	ldr	r2, [pc, #472]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a846:	f023 0301 	bic.w	r3, r3, #1
 800a84a:	6713      	str	r3, [r2, #112]	; 0x70
 800a84c:	4b74      	ldr	r3, [pc, #464]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a84e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a850:	4a73      	ldr	r2, [pc, #460]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a852:	f023 0304 	bic.w	r3, r3, #4
 800a856:	6713      	str	r3, [r2, #112]	; 0x70
 800a858:	e01c      	b.n	800a894 <HAL_RCC_OscConfig+0x5e0>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	2b05      	cmp	r3, #5
 800a860:	d10c      	bne.n	800a87c <HAL_RCC_OscConfig+0x5c8>
 800a862:	4b6f      	ldr	r3, [pc, #444]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a866:	4a6e      	ldr	r2, [pc, #440]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a868:	f043 0304 	orr.w	r3, r3, #4
 800a86c:	6713      	str	r3, [r2, #112]	; 0x70
 800a86e:	4b6c      	ldr	r3, [pc, #432]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a872:	4a6b      	ldr	r2, [pc, #428]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a874:	f043 0301 	orr.w	r3, r3, #1
 800a878:	6713      	str	r3, [r2, #112]	; 0x70
 800a87a:	e00b      	b.n	800a894 <HAL_RCC_OscConfig+0x5e0>
 800a87c:	4b68      	ldr	r3, [pc, #416]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a87e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a880:	4a67      	ldr	r2, [pc, #412]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a882:	f023 0301 	bic.w	r3, r3, #1
 800a886:	6713      	str	r3, [r2, #112]	; 0x70
 800a888:	4b65      	ldr	r3, [pc, #404]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a88a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a88c:	4a64      	ldr	r2, [pc, #400]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a88e:	f023 0304 	bic.w	r3, r3, #4
 800a892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d015      	beq.n	800a8c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a89c:	f7f9 fd72 	bl	8004384 <HAL_GetTick>
 800a8a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8a2:	e00a      	b.n	800a8ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8a4:	f7f9 fd6e 	bl	8004384 <HAL_GetTick>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d901      	bls.n	800a8ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e14e      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8ba:	4b59      	ldr	r3, [pc, #356]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0ee      	beq.n	800a8a4 <HAL_RCC_OscConfig+0x5f0>
 800a8c6:	e014      	b.n	800a8f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8c8:	f7f9 fd5c 	bl	8004384 <HAL_GetTick>
 800a8cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8ce:	e00a      	b.n	800a8e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8d0:	f7f9 fd58 	bl	8004384 <HAL_GetTick>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d901      	bls.n	800a8e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e138      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8e6:	4b4e      	ldr	r3, [pc, #312]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1ee      	bne.n	800a8d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 812d 	beq.w	800ab56 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a8fc:	4b48      	ldr	r3, [pc, #288]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a904:	2b18      	cmp	r3, #24
 800a906:	f000 80bd 	beq.w	800aa84 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	2b02      	cmp	r3, #2
 800a910:	f040 809e 	bne.w	800aa50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a914:	4b42      	ldr	r3, [pc, #264]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a41      	ldr	r2, [pc, #260]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a91a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a91e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a920:	f7f9 fd30 	bl	8004384 <HAL_GetTick>
 800a924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a926:	e008      	b.n	800a93a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a928:	f7f9 fd2c 	bl	8004384 <HAL_GetTick>
 800a92c:	4602      	mov	r2, r0
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	2b02      	cmp	r3, #2
 800a934:	d901      	bls.n	800a93a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	e10e      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a93a:	4b39      	ldr	r3, [pc, #228]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1f0      	bne.n	800a928 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a946:	4b36      	ldr	r3, [pc, #216]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a94a:	4b37      	ldr	r3, [pc, #220]	; (800aa28 <HAL_RCC_OscConfig+0x774>)
 800a94c:	4013      	ands	r3, r2
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a956:	0112      	lsls	r2, r2, #4
 800a958:	430a      	orrs	r2, r1
 800a95a:	4931      	ldr	r1, [pc, #196]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a95c:	4313      	orrs	r3, r2
 800a95e:	628b      	str	r3, [r1, #40]	; 0x28
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a964:	3b01      	subs	r3, #1
 800a966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96e:	3b01      	subs	r3, #1
 800a970:	025b      	lsls	r3, r3, #9
 800a972:	b29b      	uxth	r3, r3
 800a974:	431a      	orrs	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	3b01      	subs	r3, #1
 800a97c:	041b      	lsls	r3, r3, #16
 800a97e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a982:	431a      	orrs	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a988:	3b01      	subs	r3, #1
 800a98a:	061b      	lsls	r3, r3, #24
 800a98c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a990:	4923      	ldr	r1, [pc, #140]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a992:	4313      	orrs	r3, r2
 800a994:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a996:	4b22      	ldr	r3, [pc, #136]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99a:	4a21      	ldr	r2, [pc, #132]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a99c:	f023 0301 	bic.w	r3, r3, #1
 800a9a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a9a2:	4b1f      	ldr	r3, [pc, #124]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9a6:	4b21      	ldr	r3, [pc, #132]	; (800aa2c <HAL_RCC_OscConfig+0x778>)
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a9ae:	00d2      	lsls	r2, r2, #3
 800a9b0:	491b      	ldr	r1, [pc, #108]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a9b6:	4b1a      	ldr	r3, [pc, #104]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ba:	f023 020c 	bic.w	r2, r3, #12
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c2:	4917      	ldr	r1, [pc, #92]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a9c8:	4b15      	ldr	r3, [pc, #84]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	f023 0202 	bic.w	r2, r3, #2
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9d4:	4912      	ldr	r1, [pc, #72]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a9da:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9de:	4a10      	ldr	r2, [pc, #64]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9e6:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ea:	4a0d      	ldr	r2, [pc, #52]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a9f2:	4b0b      	ldr	r3, [pc, #44]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f6:	4a0a      	ldr	r2, [pc, #40]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800a9f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a9fe:	4b08      	ldr	r3, [pc, #32]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800aa00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa02:	4a07      	ldr	r2, [pc, #28]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800aa04:	f043 0301 	orr.w	r3, r3, #1
 800aa08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa0a:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a04      	ldr	r2, [pc, #16]	; (800aa20 <HAL_RCC_OscConfig+0x76c>)
 800aa10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa16:	f7f9 fcb5 	bl	8004384 <HAL_GetTick>
 800aa1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa1c:	e011      	b.n	800aa42 <HAL_RCC_OscConfig+0x78e>
 800aa1e:	bf00      	nop
 800aa20:	58024400 	.word	0x58024400
 800aa24:	58024800 	.word	0x58024800
 800aa28:	fffffc0c 	.word	0xfffffc0c
 800aa2c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa30:	f7f9 fca8 	bl	8004384 <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d901      	bls.n	800aa42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e08a      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa42:	4b47      	ldr	r3, [pc, #284]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0f0      	beq.n	800aa30 <HAL_RCC_OscConfig+0x77c>
 800aa4e:	e082      	b.n	800ab56 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa50:	4b43      	ldr	r3, [pc, #268]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a42      	ldr	r2, [pc, #264]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800aa56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa5c:	f7f9 fc92 	bl	8004384 <HAL_GetTick>
 800aa60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa62:	e008      	b.n	800aa76 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa64:	f7f9 fc8e 	bl	8004384 <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d901      	bls.n	800aa76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e070      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa76:	4b3a      	ldr	r3, [pc, #232]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1f0      	bne.n	800aa64 <HAL_RCC_OscConfig+0x7b0>
 800aa82:	e068      	b.n	800ab56 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aa84:	4b36      	ldr	r3, [pc, #216]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800aa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aa8a:	4b35      	ldr	r3, [pc, #212]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800aa8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d031      	beq.n	800aafc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	f003 0203 	and.w	r2, r3, #3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d12a      	bne.n	800aafc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	091b      	lsrs	r3, r3, #4
 800aaaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d122      	bne.n	800aafc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d11a      	bne.n	800aafc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	0a5b      	lsrs	r3, r3, #9
 800aaca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d111      	bne.n	800aafc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	0c1b      	lsrs	r3, r3, #16
 800aadc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d108      	bne.n	800aafc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	0e1b      	lsrs	r3, r3, #24
 800aaee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d001      	beq.n	800ab00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e02b      	b.n	800ab58 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ab00:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800ab02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab04:	08db      	lsrs	r3, r3, #3
 800ab06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d01f      	beq.n	800ab56 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ab16:	4b12      	ldr	r3, [pc, #72]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800ab18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1a:	4a11      	ldr	r2, [pc, #68]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800ab1c:	f023 0301 	bic.w	r3, r3, #1
 800ab20:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ab22:	f7f9 fc2f 	bl	8004384 <HAL_GetTick>
 800ab26:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ab28:	bf00      	nop
 800ab2a:	f7f9 fc2b 	bl	8004384 <HAL_GetTick>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d0f9      	beq.n	800ab2a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ab36:	4b0a      	ldr	r3, [pc, #40]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800ab38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab3a:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <HAL_RCC_OscConfig+0x8b0>)
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab42:	00d2      	lsls	r2, r2, #3
 800ab44:	4906      	ldr	r1, [pc, #24]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ab4a:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800ab4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4e:	4a04      	ldr	r2, [pc, #16]	; (800ab60 <HAL_RCC_OscConfig+0x8ac>)
 800ab50:	f043 0301 	orr.w	r3, r3, #1
 800ab54:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3730      	adds	r7, #48	; 0x30
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	58024400 	.word	0x58024400
 800ab64:	ffff0007 	.word	0xffff0007

0800ab68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e19c      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab7c:	4b8a      	ldr	r3, [pc, #552]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 030f 	and.w	r3, r3, #15
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d910      	bls.n	800abac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab8a:	4b87      	ldr	r3, [pc, #540]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f023 020f 	bic.w	r2, r3, #15
 800ab92:	4985      	ldr	r1, [pc, #532]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab9a:	4b83      	ldr	r3, [pc, #524]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 030f 	and.w	r3, r3, #15
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d001      	beq.n	800abac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e184      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d010      	beq.n	800abda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691a      	ldr	r2, [r3, #16]
 800abbc:	4b7b      	ldr	r3, [pc, #492]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d908      	bls.n	800abda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800abc8:	4b78      	ldr	r3, [pc, #480]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	4975      	ldr	r1, [pc, #468]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 0308 	and.w	r3, r3, #8
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d010      	beq.n	800ac08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	695a      	ldr	r2, [r3, #20]
 800abea:	4b70      	ldr	r3, [pc, #448]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d908      	bls.n	800ac08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800abf6:	4b6d      	ldr	r3, [pc, #436]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	496a      	ldr	r1, [pc, #424]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0310 	and.w	r3, r3, #16
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d010      	beq.n	800ac36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	699a      	ldr	r2, [r3, #24]
 800ac18:	4b64      	ldr	r3, [pc, #400]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac1a:	69db      	ldr	r3, [r3, #28]
 800ac1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d908      	bls.n	800ac36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ac24:	4b61      	ldr	r3, [pc, #388]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	495e      	ldr	r1, [pc, #376]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac32:	4313      	orrs	r3, r2
 800ac34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0320 	and.w	r3, r3, #32
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d010      	beq.n	800ac64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	69da      	ldr	r2, [r3, #28]
 800ac46:	4b59      	ldr	r3, [pc, #356]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d908      	bls.n	800ac64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac52:	4b56      	ldr	r3, [pc, #344]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	69db      	ldr	r3, [r3, #28]
 800ac5e:	4953      	ldr	r1, [pc, #332]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac60:	4313      	orrs	r3, r2
 800ac62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0302 	and.w	r3, r3, #2
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d010      	beq.n	800ac92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68da      	ldr	r2, [r3, #12]
 800ac74:	4b4d      	ldr	r3, [pc, #308]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	f003 030f 	and.w	r3, r3, #15
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d908      	bls.n	800ac92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac80:	4b4a      	ldr	r3, [pc, #296]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	f023 020f 	bic.w	r2, r3, #15
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	4947      	ldr	r1, [pc, #284]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d055      	beq.n	800ad4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ac9e:	4b43      	ldr	r3, [pc, #268]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	4940      	ldr	r1, [pc, #256]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800acac:	4313      	orrs	r3, r2
 800acae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d107      	bne.n	800acc8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acb8:	4b3c      	ldr	r3, [pc, #240]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d121      	bne.n	800ad08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e0f6      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2b03      	cmp	r3, #3
 800acce:	d107      	bne.n	800ace0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acd0:	4b36      	ldr	r3, [pc, #216]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d115      	bne.n	800ad08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e0ea      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d107      	bne.n	800acf8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ace8:	4b30      	ldr	r3, [pc, #192]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d109      	bne.n	800ad08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e0de      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800acf8:	4b2c      	ldr	r3, [pc, #176]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e0d6      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad08:	4b28      	ldr	r3, [pc, #160]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	f023 0207 	bic.w	r2, r3, #7
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	4925      	ldr	r1, [pc, #148]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad16:	4313      	orrs	r3, r2
 800ad18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad1a:	f7f9 fb33 	bl	8004384 <HAL_GetTick>
 800ad1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad20:	e00a      	b.n	800ad38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad22:	f7f9 fb2f 	bl	8004384 <HAL_GetTick>
 800ad26:	4602      	mov	r2, r0
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d901      	bls.n	800ad38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e0be      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad38:	4b1c      	ldr	r3, [pc, #112]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d1eb      	bne.n	800ad22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d010      	beq.n	800ad78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68da      	ldr	r2, [r3, #12]
 800ad5a:	4b14      	ldr	r3, [pc, #80]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	f003 030f 	and.w	r3, r3, #15
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d208      	bcs.n	800ad78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad66:	4b11      	ldr	r3, [pc, #68]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	f023 020f 	bic.w	r2, r3, #15
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	490e      	ldr	r1, [pc, #56]	; (800adac <HAL_RCC_ClockConfig+0x244>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad78:	4b0b      	ldr	r3, [pc, #44]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d214      	bcs.n	800adb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad86:	4b08      	ldr	r3, [pc, #32]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f023 020f 	bic.w	r2, r3, #15
 800ad8e:	4906      	ldr	r1, [pc, #24]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad96:	4b04      	ldr	r3, [pc, #16]	; (800ada8 <HAL_RCC_ClockConfig+0x240>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 030f 	and.w	r3, r3, #15
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d005      	beq.n	800adb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e086      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x34e>
 800ada8:	52002000 	.word	0x52002000
 800adac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d010      	beq.n	800adde <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	691a      	ldr	r2, [r3, #16]
 800adc0:	4b3f      	ldr	r3, [pc, #252]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adc8:	429a      	cmp	r2, r3
 800adca:	d208      	bcs.n	800adde <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800adcc:	4b3c      	ldr	r3, [pc, #240]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	4939      	ldr	r1, [pc, #228]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800adda:	4313      	orrs	r3, r2
 800addc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d010      	beq.n	800ae0c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	695a      	ldr	r2, [r3, #20]
 800adee:	4b34      	ldr	r3, [pc, #208]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d208      	bcs.n	800ae0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800adfa:	4b31      	ldr	r3, [pc, #196]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	492e      	ldr	r1, [pc, #184]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0310 	and.w	r3, r3, #16
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d010      	beq.n	800ae3a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	699a      	ldr	r2, [r3, #24]
 800ae1c:	4b28      	ldr	r3, [pc, #160]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae1e:	69db      	ldr	r3, [r3, #28]
 800ae20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d208      	bcs.n	800ae3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae28:	4b25      	ldr	r3, [pc, #148]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	4922      	ldr	r1, [pc, #136]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d010      	beq.n	800ae68 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	69da      	ldr	r2, [r3, #28]
 800ae4a:	4b1d      	ldr	r3, [pc, #116]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d208      	bcs.n	800ae68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae56:	4b1a      	ldr	r3, [pc, #104]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	4917      	ldr	r1, [pc, #92]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ae68:	f000 f834 	bl	800aed4 <HAL_RCC_GetSysClockFreq>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	0a1b      	lsrs	r3, r3, #8
 800ae74:	f003 030f 	and.w	r3, r3, #15
 800ae78:	4912      	ldr	r1, [pc, #72]	; (800aec4 <HAL_RCC_ClockConfig+0x35c>)
 800ae7a:	5ccb      	ldrb	r3, [r1, r3]
 800ae7c:	f003 031f 	and.w	r3, r3, #31
 800ae80:	fa22 f303 	lsr.w	r3, r2, r3
 800ae84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae86:	4b0e      	ldr	r3, [pc, #56]	; (800aec0 <HAL_RCC_ClockConfig+0x358>)
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	f003 030f 	and.w	r3, r3, #15
 800ae8e:	4a0d      	ldr	r2, [pc, #52]	; (800aec4 <HAL_RCC_ClockConfig+0x35c>)
 800ae90:	5cd3      	ldrb	r3, [r2, r3]
 800ae92:	f003 031f 	and.w	r3, r3, #31
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	fa22 f303 	lsr.w	r3, r2, r3
 800ae9c:	4a0a      	ldr	r2, [pc, #40]	; (800aec8 <HAL_RCC_ClockConfig+0x360>)
 800ae9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aea0:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <HAL_RCC_ClockConfig+0x364>)
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aea6:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <HAL_RCC_ClockConfig+0x368>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7f8 f86e 	bl	8002f8c <HAL_InitTick>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	58024400 	.word	0x58024400
 800aec4:	08017848 	.word	0x08017848
 800aec8:	2400008c 	.word	0x2400008c
 800aecc:	24000088 	.word	0x24000088
 800aed0:	24000090 	.word	0x24000090

0800aed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b089      	sub	sp, #36	; 0x24
 800aed8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aeda:	4bb3      	ldr	r3, [pc, #716]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aee2:	2b18      	cmp	r3, #24
 800aee4:	f200 8155 	bhi.w	800b192 <HAL_RCC_GetSysClockFreq+0x2be>
 800aee8:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeee:	bf00      	nop
 800aef0:	0800af55 	.word	0x0800af55
 800aef4:	0800b193 	.word	0x0800b193
 800aef8:	0800b193 	.word	0x0800b193
 800aefc:	0800b193 	.word	0x0800b193
 800af00:	0800b193 	.word	0x0800b193
 800af04:	0800b193 	.word	0x0800b193
 800af08:	0800b193 	.word	0x0800b193
 800af0c:	0800b193 	.word	0x0800b193
 800af10:	0800af7b 	.word	0x0800af7b
 800af14:	0800b193 	.word	0x0800b193
 800af18:	0800b193 	.word	0x0800b193
 800af1c:	0800b193 	.word	0x0800b193
 800af20:	0800b193 	.word	0x0800b193
 800af24:	0800b193 	.word	0x0800b193
 800af28:	0800b193 	.word	0x0800b193
 800af2c:	0800b193 	.word	0x0800b193
 800af30:	0800af81 	.word	0x0800af81
 800af34:	0800b193 	.word	0x0800b193
 800af38:	0800b193 	.word	0x0800b193
 800af3c:	0800b193 	.word	0x0800b193
 800af40:	0800b193 	.word	0x0800b193
 800af44:	0800b193 	.word	0x0800b193
 800af48:	0800b193 	.word	0x0800b193
 800af4c:	0800b193 	.word	0x0800b193
 800af50:	0800af87 	.word	0x0800af87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af54:	4b94      	ldr	r3, [pc, #592]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 0320 	and.w	r3, r3, #32
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d009      	beq.n	800af74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af60:	4b91      	ldr	r3, [pc, #580]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	08db      	lsrs	r3, r3, #3
 800af66:	f003 0303 	and.w	r3, r3, #3
 800af6a:	4a90      	ldr	r2, [pc, #576]	; (800b1ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af6c:	fa22 f303 	lsr.w	r3, r2, r3
 800af70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800af72:	e111      	b.n	800b198 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800af74:	4b8d      	ldr	r3, [pc, #564]	; (800b1ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af76:	61bb      	str	r3, [r7, #24]
      break;
 800af78:	e10e      	b.n	800b198 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800af7a:	4b8d      	ldr	r3, [pc, #564]	; (800b1b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800af7c:	61bb      	str	r3, [r7, #24]
      break;
 800af7e:	e10b      	b.n	800b198 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800af80:	4b8c      	ldr	r3, [pc, #560]	; (800b1b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800af82:	61bb      	str	r3, [r7, #24]
      break;
 800af84:	e108      	b.n	800b198 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af86:	4b88      	ldr	r3, [pc, #544]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800af90:	4b85      	ldr	r3, [pc, #532]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af94:	091b      	lsrs	r3, r3, #4
 800af96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800af9c:	4b82      	ldr	r3, [pc, #520]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	f003 0301 	and.w	r3, r3, #1
 800afa4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800afa6:	4b80      	ldr	r3, [pc, #512]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afaa:	08db      	lsrs	r3, r3, #3
 800afac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	fb02 f303 	mul.w	r3, r2, r3
 800afb6:	ee07 3a90 	vmov	s15, r3
 800afba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afbe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f000 80e1 	beq.w	800b18c <HAL_RCC_GetSysClockFreq+0x2b8>
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2b02      	cmp	r3, #2
 800afce:	f000 8083 	beq.w	800b0d8 <HAL_RCC_GetSysClockFreq+0x204>
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	f200 80a1 	bhi.w	800b11c <HAL_RCC_GetSysClockFreq+0x248>
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d003      	beq.n	800afe8 <HAL_RCC_GetSysClockFreq+0x114>
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d056      	beq.n	800b094 <HAL_RCC_GetSysClockFreq+0x1c0>
 800afe6:	e099      	b.n	800b11c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afe8:	4b6f      	ldr	r3, [pc, #444]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 0320 	and.w	r3, r3, #32
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d02d      	beq.n	800b050 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aff4:	4b6c      	ldr	r3, [pc, #432]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	08db      	lsrs	r3, r3, #3
 800affa:	f003 0303 	and.w	r3, r3, #3
 800affe:	4a6b      	ldr	r2, [pc, #428]	; (800b1ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b000:	fa22 f303 	lsr.w	r3, r2, r3
 800b004:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	ee07 3a90 	vmov	s15, r3
 800b00c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	ee07 3a90 	vmov	s15, r3
 800b016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b01e:	4b62      	ldr	r3, [pc, #392]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b02e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b032:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b1b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b03a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b03e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b04a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b04e:	e087      	b.n	800b160 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	ee07 3a90 	vmov	s15, r3
 800b056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b1bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800b05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b062:	4b51      	ldr	r3, [pc, #324]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b072:	ed97 6a02 	vldr	s12, [r7, #8]
 800b076:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b1b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b092:	e065      	b.n	800b160 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b1c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a6:	4b40      	ldr	r3, [pc, #256]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ae:	ee07 3a90 	vmov	s15, r3
 800b0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b1b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b0d6:	e043      	b.n	800b160 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	ee07 3a90 	vmov	s15, r3
 800b0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b1c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b0e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ea:	4b2f      	ldr	r3, [pc, #188]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f2:	ee07 3a90 	vmov	s15, r3
 800b0f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b1b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b10a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b10e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b112:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b116:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b11a:	e021      	b.n	800b160 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	ee07 3a90 	vmov	s15, r3
 800b122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b126:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b1c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b12a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b12e:	4b1e      	ldr	r3, [pc, #120]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b13e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b142:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b1b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b14a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b14e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b15a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b15e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b160:	4b11      	ldr	r3, [pc, #68]	; (800b1a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b164:	0a5b      	lsrs	r3, r3, #9
 800b166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b16a:	3301      	adds	r3, #1
 800b16c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	ee07 3a90 	vmov	s15, r3
 800b174:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b178:	edd7 6a07 	vldr	s13, [r7, #28]
 800b17c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b184:	ee17 3a90 	vmov	r3, s15
 800b188:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b18a:	e005      	b.n	800b198 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b18c:	2300      	movs	r3, #0
 800b18e:	61bb      	str	r3, [r7, #24]
      break;
 800b190:	e002      	b.n	800b198 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b192:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b194:	61bb      	str	r3, [r7, #24]
      break;
 800b196:	bf00      	nop
  }

  return sysclockfreq;
 800b198:	69bb      	ldr	r3, [r7, #24]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3724      	adds	r7, #36	; 0x24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	58024400 	.word	0x58024400
 800b1ac:	03d09000 	.word	0x03d09000
 800b1b0:	003d0900 	.word	0x003d0900
 800b1b4:	017d7840 	.word	0x017d7840
 800b1b8:	46000000 	.word	0x46000000
 800b1bc:	4c742400 	.word	0x4c742400
 800b1c0:	4a742400 	.word	0x4a742400
 800b1c4:	4bbebc20 	.word	0x4bbebc20

0800b1c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b1ce:	f7ff fe81 	bl	800aed4 <HAL_RCC_GetSysClockFreq>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	4b10      	ldr	r3, [pc, #64]	; (800b218 <HAL_RCC_GetHCLKFreq+0x50>)
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	0a1b      	lsrs	r3, r3, #8
 800b1da:	f003 030f 	and.w	r3, r3, #15
 800b1de:	490f      	ldr	r1, [pc, #60]	; (800b21c <HAL_RCC_GetHCLKFreq+0x54>)
 800b1e0:	5ccb      	ldrb	r3, [r1, r3]
 800b1e2:	f003 031f 	and.w	r3, r3, #31
 800b1e6:	fa22 f303 	lsr.w	r3, r2, r3
 800b1ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <HAL_RCC_GetHCLKFreq+0x50>)
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	f003 030f 	and.w	r3, r3, #15
 800b1f4:	4a09      	ldr	r2, [pc, #36]	; (800b21c <HAL_RCC_GetHCLKFreq+0x54>)
 800b1f6:	5cd3      	ldrb	r3, [r2, r3]
 800b1f8:	f003 031f 	and.w	r3, r3, #31
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b202:	4a07      	ldr	r2, [pc, #28]	; (800b220 <HAL_RCC_GetHCLKFreq+0x58>)
 800b204:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b206:	4a07      	ldr	r2, [pc, #28]	; (800b224 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b20c:	4b04      	ldr	r3, [pc, #16]	; (800b220 <HAL_RCC_GetHCLKFreq+0x58>)
 800b20e:	681b      	ldr	r3, [r3, #0]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	58024400 	.word	0x58024400
 800b21c:	08017848 	.word	0x08017848
 800b220:	2400008c 	.word	0x2400008c
 800b224:	24000088 	.word	0x24000088

0800b228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b22c:	f7ff ffcc 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 800b230:	4602      	mov	r2, r0
 800b232:	4b06      	ldr	r3, [pc, #24]	; (800b24c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	091b      	lsrs	r3, r3, #4
 800b238:	f003 0307 	and.w	r3, r3, #7
 800b23c:	4904      	ldr	r1, [pc, #16]	; (800b250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b23e:	5ccb      	ldrb	r3, [r1, r3]
 800b240:	f003 031f 	and.w	r3, r3, #31
 800b244:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b248:	4618      	mov	r0, r3
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	58024400 	.word	0x58024400
 800b250:	08017848 	.word	0x08017848

0800b254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b258:	f7ff ffb6 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 800b25c:	4602      	mov	r2, r0
 800b25e:	4b06      	ldr	r3, [pc, #24]	; (800b278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b260:	69db      	ldr	r3, [r3, #28]
 800b262:	0a1b      	lsrs	r3, r3, #8
 800b264:	f003 0307 	and.w	r3, r3, #7
 800b268:	4904      	ldr	r1, [pc, #16]	; (800b27c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b26a:	5ccb      	ldrb	r3, [r1, r3]
 800b26c:	f003 031f 	and.w	r3, r3, #31
 800b270:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b274:	4618      	mov	r0, r3
 800b276:	bd80      	pop	{r7, pc}
 800b278:	58024400 	.word	0x58024400
 800b27c:	08017848 	.word	0x08017848

0800b280 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	223f      	movs	r2, #63	; 0x3f
 800b28e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b290:	4b1a      	ldr	r3, [pc, #104]	; (800b2fc <HAL_RCC_GetClockConfig+0x7c>)
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	f003 0207 	and.w	r2, r3, #7
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b29c:	4b17      	ldr	r3, [pc, #92]	; (800b2fc <HAL_RCC_GetClockConfig+0x7c>)
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b2a8:	4b14      	ldr	r3, [pc, #80]	; (800b2fc <HAL_RCC_GetClockConfig+0x7c>)
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	f003 020f 	and.w	r2, r3, #15
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b2b4:	4b11      	ldr	r3, [pc, #68]	; (800b2fc <HAL_RCC_GetClockConfig+0x7c>)
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b2c0:	4b0e      	ldr	r3, [pc, #56]	; (800b2fc <HAL_RCC_GetClockConfig+0x7c>)
 800b2c2:	69db      	ldr	r3, [r3, #28]
 800b2c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b2cc:	4b0b      	ldr	r3, [pc, #44]	; (800b2fc <HAL_RCC_GetClockConfig+0x7c>)
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b2d8:	4b08      	ldr	r3, [pc, #32]	; (800b2fc <HAL_RCC_GetClockConfig+0x7c>)
 800b2da:	6a1b      	ldr	r3, [r3, #32]
 800b2dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b2e4:	4b06      	ldr	r3, [pc, #24]	; (800b300 <HAL_RCC_GetClockConfig+0x80>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 020f 	and.w	r2, r3, #15
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	601a      	str	r2, [r3, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	58024400 	.word	0x58024400
 800b300:	52002000 	.word	0x52002000

0800b304 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b308:	b0ca      	sub	sp, #296	; 0x128
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b310:	2300      	movs	r3, #0
 800b312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b316:	2300      	movs	r3, #0
 800b318:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b324:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b328:	2500      	movs	r5, #0
 800b32a:	ea54 0305 	orrs.w	r3, r4, r5
 800b32e:	d049      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b336:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b33a:	d02f      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b33c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b340:	d828      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b346:	d01a      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b348:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b34c:	d822      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b356:	d007      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b358:	e01c      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b35a:	4bb8      	ldr	r3, [pc, #736]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35e:	4ab7      	ldr	r2, [pc, #732]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b366:	e01a      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b36c:	3308      	adds	r3, #8
 800b36e:	2102      	movs	r1, #2
 800b370:	4618      	mov	r0, r3
 800b372:	f002 fb61 	bl	800da38 <RCCEx_PLL2_Config>
 800b376:	4603      	mov	r3, r0
 800b378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b37c:	e00f      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b382:	3328      	adds	r3, #40	; 0x28
 800b384:	2102      	movs	r1, #2
 800b386:	4618      	mov	r0, r3
 800b388:	f002 fc08 	bl	800db9c <RCCEx_PLL3_Config>
 800b38c:	4603      	mov	r3, r0
 800b38e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b392:	e004      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b39a:	e000      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b39c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b39e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10a      	bne.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b3a6:	4ba5      	ldr	r3, [pc, #660]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3b4:	4aa1      	ldr	r2, [pc, #644]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3b6:	430b      	orrs	r3, r1
 800b3b8:	6513      	str	r3, [r2, #80]	; 0x50
 800b3ba:	e003      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b3d0:	f04f 0900 	mov.w	r9, #0
 800b3d4:	ea58 0309 	orrs.w	r3, r8, r9
 800b3d8:	d047      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	d82a      	bhi.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b3e4:	a201      	add	r2, pc, #4	; (adr r2, 800b3ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ea:	bf00      	nop
 800b3ec:	0800b401 	.word	0x0800b401
 800b3f0:	0800b40f 	.word	0x0800b40f
 800b3f4:	0800b425 	.word	0x0800b425
 800b3f8:	0800b443 	.word	0x0800b443
 800b3fc:	0800b443 	.word	0x0800b443
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b400:	4b8e      	ldr	r3, [pc, #568]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b404:	4a8d      	ldr	r2, [pc, #564]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b40a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b40c:	e01a      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b412:	3308      	adds	r3, #8
 800b414:	2100      	movs	r1, #0
 800b416:	4618      	mov	r0, r3
 800b418:	f002 fb0e 	bl	800da38 <RCCEx_PLL2_Config>
 800b41c:	4603      	mov	r3, r0
 800b41e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b422:	e00f      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b428:	3328      	adds	r3, #40	; 0x28
 800b42a:	2100      	movs	r1, #0
 800b42c:	4618      	mov	r0, r3
 800b42e:	f002 fbb5 	bl	800db9c <RCCEx_PLL3_Config>
 800b432:	4603      	mov	r3, r0
 800b434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b438:	e004      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b440:	e000      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b442:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10a      	bne.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b44c:	4b7b      	ldr	r3, [pc, #492]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b450:	f023 0107 	bic.w	r1, r3, #7
 800b454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b45a:	4a78      	ldr	r2, [pc, #480]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b45c:	430b      	orrs	r3, r1
 800b45e:	6513      	str	r3, [r2, #80]	; 0x50
 800b460:	e003      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b476:	f04f 0b00 	mov.w	fp, #0
 800b47a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b47e:	d04c      	beq.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b48a:	d030      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b48c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b490:	d829      	bhi.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b492:	2bc0      	cmp	r3, #192	; 0xc0
 800b494:	d02d      	beq.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b496:	2bc0      	cmp	r3, #192	; 0xc0
 800b498:	d825      	bhi.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b49a:	2b80      	cmp	r3, #128	; 0x80
 800b49c:	d018      	beq.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b49e:	2b80      	cmp	r3, #128	; 0x80
 800b4a0:	d821      	bhi.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b4a6:	2b40      	cmp	r3, #64	; 0x40
 800b4a8:	d007      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b4aa:	e01c      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ac:	4b63      	ldr	r3, [pc, #396]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b0:	4a62      	ldr	r2, [pc, #392]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b4b8:	e01c      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4be:	3308      	adds	r3, #8
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f002 fab8 	bl	800da38 <RCCEx_PLL2_Config>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b4ce:	e011      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d4:	3328      	adds	r3, #40	; 0x28
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f002 fb5f 	bl	800db9c <RCCEx_PLL3_Config>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b4e4:	e006      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4ec:	e002      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b4ee:	bf00      	nop
 800b4f0:	e000      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b4f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10a      	bne.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b4fc:	4b4f      	ldr	r3, [pc, #316]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b500:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b50a:	4a4c      	ldr	r2, [pc, #304]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b50c:	430b      	orrs	r3, r1
 800b50e:	6513      	str	r3, [r2, #80]	; 0x50
 800b510:	e003      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b516:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b526:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b52a:	2300      	movs	r3, #0
 800b52c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b530:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b534:	460b      	mov	r3, r1
 800b536:	4313      	orrs	r3, r2
 800b538:	d053      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b542:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b546:	d035      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b54c:	d82e      	bhi.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b54e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b552:	d031      	beq.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b554:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b558:	d828      	bhi.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b55a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b55e:	d01a      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b564:	d822      	bhi.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b56a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b56e:	d007      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b570:	e01c      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b572:	4b32      	ldr	r3, [pc, #200]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b576:	4a31      	ldr	r2, [pc, #196]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b57c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b57e:	e01c      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b584:	3308      	adds	r3, #8
 800b586:	2100      	movs	r1, #0
 800b588:	4618      	mov	r0, r3
 800b58a:	f002 fa55 	bl	800da38 <RCCEx_PLL2_Config>
 800b58e:	4603      	mov	r3, r0
 800b590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b594:	e011      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b59a:	3328      	adds	r3, #40	; 0x28
 800b59c:	2100      	movs	r1, #0
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f002 fafc 	bl	800db9c <RCCEx_PLL3_Config>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5aa:	e006      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5b2:	e002      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b5b4:	bf00      	nop
 800b5b6:	e000      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b5b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10b      	bne.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b5c2:	4b1e      	ldr	r3, [pc, #120]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b5d2:	4a1a      	ldr	r2, [pc, #104]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5d4:	430b      	orrs	r3, r1
 800b5d6:	6593      	str	r3, [r2, #88]	; 0x58
 800b5d8:	e003      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b5ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b5f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4313      	orrs	r3, r2
 800b600:	d056      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b60a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b60e:	d038      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b614:	d831      	bhi.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b616:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b61a:	d034      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b61c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b620:	d82b      	bhi.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b626:	d01d      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b62c:	d825      	bhi.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d006      	beq.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b632:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b636:	d00a      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b638:	e01f      	b.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b63a:	bf00      	nop
 800b63c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b640:	4ba2      	ldr	r3, [pc, #648]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b644:	4aa1      	ldr	r2, [pc, #644]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b64a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b64c:	e01c      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b652:	3308      	adds	r3, #8
 800b654:	2100      	movs	r1, #0
 800b656:	4618      	mov	r0, r3
 800b658:	f002 f9ee 	bl	800da38 <RCCEx_PLL2_Config>
 800b65c:	4603      	mov	r3, r0
 800b65e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b662:	e011      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b668:	3328      	adds	r3, #40	; 0x28
 800b66a:	2100      	movs	r1, #0
 800b66c:	4618      	mov	r0, r3
 800b66e:	f002 fa95 	bl	800db9c <RCCEx_PLL3_Config>
 800b672:	4603      	mov	r3, r0
 800b674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b678:	e006      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b680:	e002      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b682:	bf00      	nop
 800b684:	e000      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b686:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b688:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10b      	bne.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b690:	4b8e      	ldr	r3, [pc, #568]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b694:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b69c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b6a0:	4a8a      	ldr	r2, [pc, #552]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6a2:	430b      	orrs	r3, r1
 800b6a4:	6593      	str	r3, [r2, #88]	; 0x58
 800b6a6:	e003      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b6bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b6c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	d03a      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6d6:	2b30      	cmp	r3, #48	; 0x30
 800b6d8:	d01f      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b6da:	2b30      	cmp	r3, #48	; 0x30
 800b6dc:	d819      	bhi.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	d00c      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b6e2:	2b20      	cmp	r3, #32
 800b6e4:	d815      	bhi.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d019      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b6ea:	2b10      	cmp	r3, #16
 800b6ec:	d111      	bne.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6ee:	4b77      	ldr	r3, [pc, #476]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f2:	4a76      	ldr	r2, [pc, #472]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b6fa:	e011      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b700:	3308      	adds	r3, #8
 800b702:	2102      	movs	r1, #2
 800b704:	4618      	mov	r0, r3
 800b706:	f002 f997 	bl	800da38 <RCCEx_PLL2_Config>
 800b70a:	4603      	mov	r3, r0
 800b70c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b710:	e006      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b718:	e002      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b71a:	bf00      	nop
 800b71c:	e000      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b71e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10a      	bne.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b728:	4b68      	ldr	r3, [pc, #416]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b72a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b72c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b736:	4a65      	ldr	r2, [pc, #404]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b738:	430b      	orrs	r3, r1
 800b73a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b73c:	e003      	b.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b73e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b752:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b756:	2300      	movs	r3, #0
 800b758:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b75c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b760:	460b      	mov	r3, r1
 800b762:	4313      	orrs	r3, r2
 800b764:	d051      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b76a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b76c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b770:	d035      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b776:	d82e      	bhi.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b77c:	d031      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b77e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b782:	d828      	bhi.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b788:	d01a      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b78a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b78e:	d822      	bhi.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b790:	2b00      	cmp	r3, #0
 800b792:	d003      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b798:	d007      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b79a:	e01c      	b.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b79c:	4b4b      	ldr	r3, [pc, #300]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a0:	4a4a      	ldr	r2, [pc, #296]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b7a8:	e01c      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f002 f940 	bl	800da38 <RCCEx_PLL2_Config>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b7be:	e011      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c4:	3328      	adds	r3, #40	; 0x28
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f002 f9e7 	bl	800db9c <RCCEx_PLL3_Config>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b7d4:	e006      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7dc:	e002      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b7de:	bf00      	nop
 800b7e0:	e000      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b7e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10a      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b7ec:	4b37      	ldr	r3, [pc, #220]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7fa:	4a34      	ldr	r2, [pc, #208]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7fc:	430b      	orrs	r3, r1
 800b7fe:	6513      	str	r3, [r2, #80]	; 0x50
 800b800:	e003      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b806:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b81a:	2300      	movs	r3, #0
 800b81c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b820:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b824:	460b      	mov	r3, r1
 800b826:	4313      	orrs	r3, r2
 800b828:	d056      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b82e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b834:	d033      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b83a:	d82c      	bhi.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b83c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b840:	d02f      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b846:	d826      	bhi.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b848:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b84c:	d02b      	beq.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b84e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b852:	d820      	bhi.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b858:	d012      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b85a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b85e:	d81a      	bhi.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b860:	2b00      	cmp	r3, #0
 800b862:	d022      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b868:	d115      	bne.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86e:	3308      	adds	r3, #8
 800b870:	2101      	movs	r1, #1
 800b872:	4618      	mov	r0, r3
 800b874:	f002 f8e0 	bl	800da38 <RCCEx_PLL2_Config>
 800b878:	4603      	mov	r3, r0
 800b87a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b87e:	e015      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b884:	3328      	adds	r3, #40	; 0x28
 800b886:	2101      	movs	r1, #1
 800b888:	4618      	mov	r0, r3
 800b88a:	f002 f987 	bl	800db9c <RCCEx_PLL3_Config>
 800b88e:	4603      	mov	r3, r0
 800b890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b894:	e00a      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b89c:	e006      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b89e:	bf00      	nop
 800b8a0:	e004      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b8a2:	bf00      	nop
 800b8a4:	e002      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b8a6:	bf00      	nop
 800b8a8:	e000      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b8aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10d      	bne.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b8b4:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b8b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8c2:	4a02      	ldr	r2, [pc, #8]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b8c4:	430b      	orrs	r3, r1
 800b8c6:	6513      	str	r3, [r2, #80]	; 0x50
 800b8c8:	e006      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b8ca:	bf00      	nop
 800b8cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b8e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b8ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	d055      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b904:	d033      	beq.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b90a:	d82c      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b90c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b910:	d02f      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b916:	d826      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b918:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b91c:	d02b      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b91e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b922:	d820      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b928:	d012      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b92a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b92e:	d81a      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b930:	2b00      	cmp	r3, #0
 800b932:	d022      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b938:	d115      	bne.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93e:	3308      	adds	r3, #8
 800b940:	2101      	movs	r1, #1
 800b942:	4618      	mov	r0, r3
 800b944:	f002 f878 	bl	800da38 <RCCEx_PLL2_Config>
 800b948:	4603      	mov	r3, r0
 800b94a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b94e:	e015      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b954:	3328      	adds	r3, #40	; 0x28
 800b956:	2101      	movs	r1, #1
 800b958:	4618      	mov	r0, r3
 800b95a:	f002 f91f 	bl	800db9c <RCCEx_PLL3_Config>
 800b95e:	4603      	mov	r3, r0
 800b960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b964:	e00a      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b96c:	e006      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b96e:	bf00      	nop
 800b970:	e004      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b972:	bf00      	nop
 800b974:	e002      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b976:	bf00      	nop
 800b978:	e000      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b97a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b97c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10b      	bne.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b984:	4ba3      	ldr	r3, [pc, #652]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b988:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b994:	4a9f      	ldr	r2, [pc, #636]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b996:	430b      	orrs	r3, r1
 800b998:	6593      	str	r3, [r2, #88]	; 0x58
 800b99a:	e003      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b99c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b9b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b9ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	d037      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ce:	d00e      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b9d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9d4:	d816      	bhi.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d018      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b9da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9de:	d111      	bne.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9e0:	4b8c      	ldr	r3, [pc, #560]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e4:	4a8b      	ldr	r2, [pc, #556]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b9ec:	e00f      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	2101      	movs	r1, #1
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f002 f81e 	bl	800da38 <RCCEx_PLL2_Config>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ba02:	e004      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba0a:	e000      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ba0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10a      	bne.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ba16:	4b7f      	ldr	r3, [pc, #508]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ba1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba24:	4a7b      	ldr	r2, [pc, #492]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba26:	430b      	orrs	r3, r1
 800ba28:	6513      	str	r3, [r2, #80]	; 0x50
 800ba2a:	e003      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ba34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ba40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba44:	2300      	movs	r3, #0
 800ba46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ba4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ba4e:	460b      	mov	r3, r1
 800ba50:	4313      	orrs	r3, r2
 800ba52:	d039      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ba54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d81c      	bhi.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800ba5e:	a201      	add	r2, pc, #4	; (adr r2, 800ba64 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ba60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba64:	0800baa1 	.word	0x0800baa1
 800ba68:	0800ba75 	.word	0x0800ba75
 800ba6c:	0800ba83 	.word	0x0800ba83
 800ba70:	0800baa1 	.word	0x0800baa1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba74:	4b67      	ldr	r3, [pc, #412]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	4a66      	ldr	r2, [pc, #408]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ba80:	e00f      	b.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba86:	3308      	adds	r3, #8
 800ba88:	2102      	movs	r1, #2
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f001 ffd4 	bl	800da38 <RCCEx_PLL2_Config>
 800ba90:	4603      	mov	r3, r0
 800ba92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ba96:	e004      	b.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba9e:	e000      	b.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800baa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10a      	bne.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800baaa:	4b5a      	ldr	r3, [pc, #360]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baae:	f023 0103 	bic.w	r1, r3, #3
 800bab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bab8:	4a56      	ldr	r2, [pc, #344]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baba:	430b      	orrs	r3, r1
 800babc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800babe:	e003      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bad8:	2300      	movs	r3, #0
 800bada:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bade:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bae2:	460b      	mov	r3, r1
 800bae4:	4313      	orrs	r3, r2
 800bae6:	f000 809f 	beq.w	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800baea:	4b4b      	ldr	r3, [pc, #300]	; (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a4a      	ldr	r2, [pc, #296]	; (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800baf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800baf6:	f7f8 fc45 	bl	8004384 <HAL_GetTick>
 800bafa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bafe:	e00b      	b.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb00:	f7f8 fc40 	bl	8004384 <HAL_GetTick>
 800bb04:	4602      	mov	r2, r0
 800bb06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	2b64      	cmp	r3, #100	; 0x64
 800bb0e:	d903      	bls.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800bb10:	2303      	movs	r3, #3
 800bb12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb16:	e005      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb18:	4b3f      	ldr	r3, [pc, #252]	; (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d0ed      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800bb24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d179      	bne.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bb2c:	4b39      	ldr	r3, [pc, #228]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb38:	4053      	eors	r3, r2
 800bb3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d015      	beq.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bb42:	4b34      	ldr	r3, [pc, #208]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb4e:	4b31      	ldr	r3, [pc, #196]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb52:	4a30      	ldr	r2, [pc, #192]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb58:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb5a:	4b2e      	ldr	r3, [pc, #184]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5e:	4a2d      	ldr	r2, [pc, #180]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb64:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bb66:	4a2b      	ldr	r2, [pc, #172]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bb6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb7a:	d118      	bne.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb7c:	f7f8 fc02 	bl	8004384 <HAL_GetTick>
 800bb80:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb84:	e00d      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb86:	f7f8 fbfd 	bl	8004384 <HAL_GetTick>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bb90:	1ad2      	subs	r2, r2, r3
 800bb92:	f241 3388 	movw	r3, #5000	; 0x1388
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d903      	bls.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800bba0:	e005      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bba2:	4b1c      	ldr	r3, [pc, #112]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba6:	f003 0302 	and.w	r3, r3, #2
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0eb      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800bbae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d129      	bne.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bbbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbc6:	d10e      	bne.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bbc8:	4b12      	ldr	r3, [pc, #72]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bbd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bbd8:	091a      	lsrs	r2, r3, #4
 800bbda:	4b10      	ldr	r3, [pc, #64]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800bbdc:	4013      	ands	r3, r2
 800bbde:	4a0d      	ldr	r2, [pc, #52]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbe0:	430b      	orrs	r3, r1
 800bbe2:	6113      	str	r3, [r2, #16]
 800bbe4:	e005      	b.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800bbe6:	4b0b      	ldr	r3, [pc, #44]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	4a0a      	ldr	r2, [pc, #40]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bbf0:	6113      	str	r3, [r2, #16]
 800bbf2:	4b08      	ldr	r3, [pc, #32]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbf4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bbf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bbfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc02:	4a04      	ldr	r2, [pc, #16]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc04:	430b      	orrs	r3, r1
 800bc06:	6713      	str	r3, [r2, #112]	; 0x70
 800bc08:	e00e      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800bc12:	e009      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800bc14:	58024400 	.word	0x58024400
 800bc18:	58024800 	.word	0x58024800
 800bc1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc30:	f002 0301 	and.w	r3, r2, #1
 800bc34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc42:	460b      	mov	r3, r1
 800bc44:	4313      	orrs	r3, r2
 800bc46:	f000 8089 	beq.w	800bd5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc50:	2b28      	cmp	r3, #40	; 0x28
 800bc52:	d86b      	bhi.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800bc54:	a201      	add	r2, pc, #4	; (adr r2, 800bc5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5a:	bf00      	nop
 800bc5c:	0800bd35 	.word	0x0800bd35
 800bc60:	0800bd2d 	.word	0x0800bd2d
 800bc64:	0800bd2d 	.word	0x0800bd2d
 800bc68:	0800bd2d 	.word	0x0800bd2d
 800bc6c:	0800bd2d 	.word	0x0800bd2d
 800bc70:	0800bd2d 	.word	0x0800bd2d
 800bc74:	0800bd2d 	.word	0x0800bd2d
 800bc78:	0800bd2d 	.word	0x0800bd2d
 800bc7c:	0800bd01 	.word	0x0800bd01
 800bc80:	0800bd2d 	.word	0x0800bd2d
 800bc84:	0800bd2d 	.word	0x0800bd2d
 800bc88:	0800bd2d 	.word	0x0800bd2d
 800bc8c:	0800bd2d 	.word	0x0800bd2d
 800bc90:	0800bd2d 	.word	0x0800bd2d
 800bc94:	0800bd2d 	.word	0x0800bd2d
 800bc98:	0800bd2d 	.word	0x0800bd2d
 800bc9c:	0800bd17 	.word	0x0800bd17
 800bca0:	0800bd2d 	.word	0x0800bd2d
 800bca4:	0800bd2d 	.word	0x0800bd2d
 800bca8:	0800bd2d 	.word	0x0800bd2d
 800bcac:	0800bd2d 	.word	0x0800bd2d
 800bcb0:	0800bd2d 	.word	0x0800bd2d
 800bcb4:	0800bd2d 	.word	0x0800bd2d
 800bcb8:	0800bd2d 	.word	0x0800bd2d
 800bcbc:	0800bd35 	.word	0x0800bd35
 800bcc0:	0800bd2d 	.word	0x0800bd2d
 800bcc4:	0800bd2d 	.word	0x0800bd2d
 800bcc8:	0800bd2d 	.word	0x0800bd2d
 800bccc:	0800bd2d 	.word	0x0800bd2d
 800bcd0:	0800bd2d 	.word	0x0800bd2d
 800bcd4:	0800bd2d 	.word	0x0800bd2d
 800bcd8:	0800bd2d 	.word	0x0800bd2d
 800bcdc:	0800bd35 	.word	0x0800bd35
 800bce0:	0800bd2d 	.word	0x0800bd2d
 800bce4:	0800bd2d 	.word	0x0800bd2d
 800bce8:	0800bd2d 	.word	0x0800bd2d
 800bcec:	0800bd2d 	.word	0x0800bd2d
 800bcf0:	0800bd2d 	.word	0x0800bd2d
 800bcf4:	0800bd2d 	.word	0x0800bd2d
 800bcf8:	0800bd2d 	.word	0x0800bd2d
 800bcfc:	0800bd35 	.word	0x0800bd35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd04:	3308      	adds	r3, #8
 800bd06:	2101      	movs	r1, #1
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f001 fe95 	bl	800da38 <RCCEx_PLL2_Config>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bd14:	e00f      	b.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1a:	3328      	adds	r3, #40	; 0x28
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f001 ff3c 	bl	800db9c <RCCEx_PLL3_Config>
 800bd24:	4603      	mov	r3, r0
 800bd26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bd2a:	e004      	b.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd32:	e000      	b.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800bd34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10a      	bne.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bd3e:	4bbf      	ldr	r3, [pc, #764]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd42:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bd46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd4c:	4abb      	ldr	r2, [pc, #748]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd4e:	430b      	orrs	r3, r1
 800bd50:	6553      	str	r3, [r2, #84]	; 0x54
 800bd52:	e003      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bd5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd64:	f002 0302 	and.w	r3, r2, #2
 800bd68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bd72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bd76:	460b      	mov	r3, r1
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	d041      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bd7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd82:	2b05      	cmp	r3, #5
 800bd84:	d824      	bhi.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bd86:	a201      	add	r2, pc, #4	; (adr r2, 800bd8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8c:	0800bdd9 	.word	0x0800bdd9
 800bd90:	0800bda5 	.word	0x0800bda5
 800bd94:	0800bdbb 	.word	0x0800bdbb
 800bd98:	0800bdd9 	.word	0x0800bdd9
 800bd9c:	0800bdd9 	.word	0x0800bdd9
 800bda0:	0800bdd9 	.word	0x0800bdd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bda4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda8:	3308      	adds	r3, #8
 800bdaa:	2101      	movs	r1, #1
 800bdac:	4618      	mov	r0, r3
 800bdae:	f001 fe43 	bl	800da38 <RCCEx_PLL2_Config>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bdb8:	e00f      	b.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdbe:	3328      	adds	r3, #40	; 0x28
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f001 feea 	bl	800db9c <RCCEx_PLL3_Config>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bdce:	e004      	b.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdd6:	e000      	b.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bdd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10a      	bne.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bde2:	4b96      	ldr	r3, [pc, #600]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bde4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde6:	f023 0107 	bic.w	r1, r3, #7
 800bdea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdf0:	4a92      	ldr	r2, [pc, #584]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdf2:	430b      	orrs	r3, r1
 800bdf4:	6553      	str	r3, [r2, #84]	; 0x54
 800bdf6:	e003      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800be00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	f002 0304 	and.w	r3, r2, #4
 800be0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be10:	2300      	movs	r3, #0
 800be12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800be1a:	460b      	mov	r3, r1
 800be1c:	4313      	orrs	r3, r2
 800be1e:	d044      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800be20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be28:	2b05      	cmp	r3, #5
 800be2a:	d825      	bhi.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800be2c:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800be2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be32:	bf00      	nop
 800be34:	0800be81 	.word	0x0800be81
 800be38:	0800be4d 	.word	0x0800be4d
 800be3c:	0800be63 	.word	0x0800be63
 800be40:	0800be81 	.word	0x0800be81
 800be44:	0800be81 	.word	0x0800be81
 800be48:	0800be81 	.word	0x0800be81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be50:	3308      	adds	r3, #8
 800be52:	2101      	movs	r1, #1
 800be54:	4618      	mov	r0, r3
 800be56:	f001 fdef 	bl	800da38 <RCCEx_PLL2_Config>
 800be5a:	4603      	mov	r3, r0
 800be5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800be60:	e00f      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be66:	3328      	adds	r3, #40	; 0x28
 800be68:	2101      	movs	r1, #1
 800be6a:	4618      	mov	r0, r3
 800be6c:	f001 fe96 	bl	800db9c <RCCEx_PLL3_Config>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800be76:	e004      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be7e:	e000      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800be80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10b      	bne.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be8a:	4b6c      	ldr	r3, [pc, #432]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be8e:	f023 0107 	bic.w	r1, r3, #7
 800be92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be9a:	4a68      	ldr	r2, [pc, #416]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be9c:	430b      	orrs	r3, r1
 800be9e:	6593      	str	r3, [r2, #88]	; 0x58
 800bea0:	e003      	b.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800beaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	f002 0320 	and.w	r3, r2, #32
 800beb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800beba:	2300      	movs	r3, #0
 800bebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bec4:	460b      	mov	r3, r1
 800bec6:	4313      	orrs	r3, r2
 800bec8:	d055      	beq.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800beca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bed6:	d033      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bedc:	d82c      	bhi.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bee2:	d02f      	beq.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bee8:	d826      	bhi.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800beea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800beee:	d02b      	beq.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bef0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bef4:	d820      	bhi.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800befa:	d012      	beq.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800befc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf00:	d81a      	bhi.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d022      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bf06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf0a:	d115      	bne.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf10:	3308      	adds	r3, #8
 800bf12:	2100      	movs	r1, #0
 800bf14:	4618      	mov	r0, r3
 800bf16:	f001 fd8f 	bl	800da38 <RCCEx_PLL2_Config>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bf20:	e015      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf26:	3328      	adds	r3, #40	; 0x28
 800bf28:	2102      	movs	r1, #2
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f001 fe36 	bl	800db9c <RCCEx_PLL3_Config>
 800bf30:	4603      	mov	r3, r0
 800bf32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bf36:	e00a      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf3e:	e006      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bf40:	bf00      	nop
 800bf42:	e004      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bf44:	bf00      	nop
 800bf46:	e002      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bf48:	bf00      	nop
 800bf4a:	e000      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bf4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10b      	bne.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf56:	4b39      	ldr	r3, [pc, #228]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf5a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bf5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf66:	4a35      	ldr	r2, [pc, #212]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf68:	430b      	orrs	r3, r1
 800bf6a:	6553      	str	r3, [r2, #84]	; 0x54
 800bf6c:	e003      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bf82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf86:	2300      	movs	r3, #0
 800bf88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bf8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bf90:	460b      	mov	r3, r1
 800bf92:	4313      	orrs	r3, r2
 800bf94:	d058      	beq.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bf96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bfa2:	d033      	beq.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bfa4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bfa8:	d82c      	bhi.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bfaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfae:	d02f      	beq.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bfb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfb4:	d826      	bhi.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bfb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bfba:	d02b      	beq.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bfbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bfc0:	d820      	bhi.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bfc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfc6:	d012      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bfc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfcc:	d81a      	bhi.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d022      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bfd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfd6:	d115      	bne.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfdc:	3308      	adds	r3, #8
 800bfde:	2100      	movs	r1, #0
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f001 fd29 	bl	800da38 <RCCEx_PLL2_Config>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bfec:	e015      	b.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bff2:	3328      	adds	r3, #40	; 0x28
 800bff4:	2102      	movs	r1, #2
 800bff6:	4618      	mov	r0, r3
 800bff8:	f001 fdd0 	bl	800db9c <RCCEx_PLL3_Config>
 800bffc:	4603      	mov	r3, r0
 800bffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c002:	e00a      	b.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c00a:	e006      	b.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c00c:	bf00      	nop
 800c00e:	e004      	b.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c010:	bf00      	nop
 800c012:	e002      	b.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c014:	bf00      	nop
 800c016:	e000      	b.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c01a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10e      	bne.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c022:	4b06      	ldr	r3, [pc, #24]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c026:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c032:	4a02      	ldr	r2, [pc, #8]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c034:	430b      	orrs	r3, r1
 800c036:	6593      	str	r3, [r2, #88]	; 0x58
 800c038:	e006      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c03a:	bf00      	nop
 800c03c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c058:	2300      	movs	r3, #0
 800c05a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c05e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c062:	460b      	mov	r3, r1
 800c064:	4313      	orrs	r3, r2
 800c066:	d055      	beq.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c06c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c070:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c074:	d033      	beq.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c076:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c07a:	d82c      	bhi.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c07c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c080:	d02f      	beq.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c086:	d826      	bhi.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c088:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c08c:	d02b      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c08e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c092:	d820      	bhi.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c098:	d012      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c09a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c09e:	d81a      	bhi.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d022      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c0a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0a8:	d115      	bne.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f001 fcc0 	bl	800da38 <RCCEx_PLL2_Config>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c0be:	e015      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c4:	3328      	adds	r3, #40	; 0x28
 800c0c6:	2102      	movs	r1, #2
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f001 fd67 	bl	800db9c <RCCEx_PLL3_Config>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c0d4:	e00a      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0dc:	e006      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c0de:	bf00      	nop
 800c0e0:	e004      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c0e2:	bf00      	nop
 800c0e4:	e002      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c0e6:	bf00      	nop
 800c0e8:	e000      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c0ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10b      	bne.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c0f4:	4ba1      	ldr	r3, [pc, #644]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c100:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c104:	4a9d      	ldr	r2, [pc, #628]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c106:	430b      	orrs	r3, r1
 800c108:	6593      	str	r3, [r2, #88]	; 0x58
 800c10a:	e003      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c10c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c110:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	f002 0308 	and.w	r3, r2, #8
 800c120:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c124:	2300      	movs	r3, #0
 800c126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c12a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c12e:	460b      	mov	r3, r1
 800c130:	4313      	orrs	r3, r2
 800c132:	d01e      	beq.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c13c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c140:	d10c      	bne.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c146:	3328      	adds	r3, #40	; 0x28
 800c148:	2102      	movs	r1, #2
 800c14a:	4618      	mov	r0, r3
 800c14c:	f001 fd26 	bl	800db9c <RCCEx_PLL3_Config>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d002      	beq.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c15c:	4b87      	ldr	r3, [pc, #540]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c15e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c160:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c16c:	4a83      	ldr	r2, [pc, #524]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c16e:	430b      	orrs	r3, r1
 800c170:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	f002 0310 	and.w	r3, r2, #16
 800c17e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c182:	2300      	movs	r3, #0
 800c184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c188:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c18c:	460b      	mov	r3, r1
 800c18e:	4313      	orrs	r3, r2
 800c190:	d01e      	beq.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c19a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c19e:	d10c      	bne.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1a4:	3328      	adds	r3, #40	; 0x28
 800c1a6:	2102      	movs	r1, #2
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f001 fcf7 	bl	800db9c <RCCEx_PLL3_Config>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c1ba:	4b70      	ldr	r3, [pc, #448]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1ca:	4a6c      	ldr	r2, [pc, #432]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1cc:	430b      	orrs	r3, r1
 800c1ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c1dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c1e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	d03e      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c1f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1fc:	d022      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c1fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c202:	d81b      	bhi.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c204:	2b00      	cmp	r3, #0
 800c206:	d003      	beq.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c20c:	d00b      	beq.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c20e:	e015      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c214:	3308      	adds	r3, #8
 800c216:	2100      	movs	r1, #0
 800c218:	4618      	mov	r0, r3
 800c21a:	f001 fc0d 	bl	800da38 <RCCEx_PLL2_Config>
 800c21e:	4603      	mov	r3, r0
 800c220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c224:	e00f      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c22a:	3328      	adds	r3, #40	; 0x28
 800c22c:	2102      	movs	r1, #2
 800c22e:	4618      	mov	r0, r3
 800c230:	f001 fcb4 	bl	800db9c <RCCEx_PLL3_Config>
 800c234:	4603      	mov	r3, r0
 800c236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c23a:	e004      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c23c:	2301      	movs	r3, #1
 800c23e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c242:	e000      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c244:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10b      	bne.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c24e:	4b4b      	ldr	r3, [pc, #300]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c252:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c25e:	4a47      	ldr	r2, [pc, #284]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c260:	430b      	orrs	r3, r1
 800c262:	6593      	str	r3, [r2, #88]	; 0x58
 800c264:	e003      	b.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c26a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c276:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c27a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c27c:	2300      	movs	r3, #0
 800c27e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c280:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c284:	460b      	mov	r3, r1
 800c286:	4313      	orrs	r3, r2
 800c288:	d03b      	beq.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c296:	d01f      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c298:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c29c:	d818      	bhi.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c29e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2a2:	d003      	beq.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c2a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2a8:	d007      	beq.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c2aa:	e011      	b.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2ac:	4b33      	ldr	r3, [pc, #204]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b0:	4a32      	ldr	r2, [pc, #200]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c2b8:	e00f      	b.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2be:	3328      	adds	r3, #40	; 0x28
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f001 fc6a 	bl	800db9c <RCCEx_PLL3_Config>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c2ce:	e004      	b.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c2d6:	e000      	b.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c2d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10b      	bne.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c2e2:	4b26      	ldr	r3, [pc, #152]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2f2:	4a22      	ldr	r2, [pc, #136]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2f4:	430b      	orrs	r3, r1
 800c2f6:	6553      	str	r3, [r2, #84]	; 0x54
 800c2f8:	e003      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c30e:	673b      	str	r3, [r7, #112]	; 0x70
 800c310:	2300      	movs	r3, #0
 800c312:	677b      	str	r3, [r7, #116]	; 0x74
 800c314:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c318:	460b      	mov	r3, r1
 800c31a:	4313      	orrs	r3, r2
 800c31c:	d034      	beq.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c324:	2b00      	cmp	r3, #0
 800c326:	d003      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c32c:	d007      	beq.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c32e:	e011      	b.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c330:	4b12      	ldr	r3, [pc, #72]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c334:	4a11      	ldr	r2, [pc, #68]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c33a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c33c:	e00e      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c342:	3308      	adds	r3, #8
 800c344:	2102      	movs	r1, #2
 800c346:	4618      	mov	r0, r3
 800c348:	f001 fb76 	bl	800da38 <RCCEx_PLL2_Config>
 800c34c:	4603      	mov	r3, r0
 800c34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c352:	e003      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c35a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c35c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c360:	2b00      	cmp	r3, #0
 800c362:	d10d      	bne.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c364:	4b05      	ldr	r3, [pc, #20]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c372:	4a02      	ldr	r2, [pc, #8]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c374:	430b      	orrs	r3, r1
 800c376:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c378:	e006      	b.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c37a:	bf00      	nop
 800c37c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c390:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c394:	66bb      	str	r3, [r7, #104]	; 0x68
 800c396:	2300      	movs	r3, #0
 800c398:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c39a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	d00c      	beq.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3a8:	3328      	adds	r3, #40	; 0x28
 800c3aa:	2102      	movs	r1, #2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f001 fbf5 	bl	800db9c <RCCEx_PLL3_Config>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c3ca:	663b      	str	r3, [r7, #96]	; 0x60
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	667b      	str	r3, [r7, #100]	; 0x64
 800c3d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	d038      	beq.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3e6:	d018      	beq.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c3e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3ec:	d811      	bhi.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c3ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3f2:	d014      	beq.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c3f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3f8:	d80b      	bhi.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d011      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c402:	d106      	bne.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c404:	4bc3      	ldr	r3, [pc, #780]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c408:	4ac2      	ldr	r2, [pc, #776]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c40a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c40e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c410:	e008      	b.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c418:	e004      	b.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c41a:	bf00      	nop
 800c41c:	e002      	b.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c41e:	bf00      	nop
 800c420:	e000      	b.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c422:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10b      	bne.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c42c:	4bb9      	ldr	r3, [pc, #740]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c430:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c43c:	4ab5      	ldr	r2, [pc, #724]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c43e:	430b      	orrs	r3, r1
 800c440:	6553      	str	r3, [r2, #84]	; 0x54
 800c442:	e003      	b.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c448:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c458:	65bb      	str	r3, [r7, #88]	; 0x58
 800c45a:	2300      	movs	r3, #0
 800c45c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c45e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c462:	460b      	mov	r3, r1
 800c464:	4313      	orrs	r3, r2
 800c466:	d009      	beq.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c468:	4baa      	ldr	r3, [pc, #680]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c46c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c476:	4aa7      	ldr	r2, [pc, #668]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c478:	430b      	orrs	r3, r1
 800c47a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c488:	653b      	str	r3, [r7, #80]	; 0x50
 800c48a:	2300      	movs	r3, #0
 800c48c:	657b      	str	r3, [r7, #84]	; 0x54
 800c48e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c492:	460b      	mov	r3, r1
 800c494:	4313      	orrs	r3, r2
 800c496:	d00a      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c498:	4b9e      	ldr	r3, [pc, #632]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c4a8:	4a9a      	ldr	r2, [pc, #616]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c4aa:	430b      	orrs	r3, r1
 800c4ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c4ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4bc:	2300      	movs	r3, #0
 800c4be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	d009      	beq.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c4ca:	4b92      	ldr	r3, [pc, #584]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c4cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4ce:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d8:	4a8e      	ldr	r2, [pc, #568]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c4da:	430b      	orrs	r3, r1
 800c4dc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c4ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c4f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	d00e      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c4fa:	4b86      	ldr	r3, [pc, #536]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	4a85      	ldr	r2, [pc, #532]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c504:	6113      	str	r3, [r2, #16]
 800c506:	4b83      	ldr	r3, [pc, #524]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c508:	6919      	ldr	r1, [r3, #16]
 800c50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c50e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c512:	4a80      	ldr	r2, [pc, #512]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c514:	430b      	orrs	r3, r1
 800c516:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c524:	63bb      	str	r3, [r7, #56]	; 0x38
 800c526:	2300      	movs	r3, #0
 800c528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c52a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c52e:	460b      	mov	r3, r1
 800c530:	4313      	orrs	r3, r2
 800c532:	d009      	beq.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c534:	4b77      	ldr	r3, [pc, #476]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c538:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c542:	4a74      	ldr	r2, [pc, #464]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c544:	430b      	orrs	r3, r1
 800c546:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c554:	633b      	str	r3, [r7, #48]	; 0x30
 800c556:	2300      	movs	r3, #0
 800c558:	637b      	str	r3, [r7, #52]	; 0x34
 800c55a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c55e:	460b      	mov	r3, r1
 800c560:	4313      	orrs	r3, r2
 800c562:	d00a      	beq.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c564:	4b6b      	ldr	r3, [pc, #428]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c568:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c574:	4a67      	ldr	r2, [pc, #412]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c576:	430b      	orrs	r3, r1
 800c578:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c582:	2100      	movs	r1, #0
 800c584:	62b9      	str	r1, [r7, #40]	; 0x28
 800c586:	f003 0301 	and.w	r3, r3, #1
 800c58a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c58c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c590:	460b      	mov	r3, r1
 800c592:	4313      	orrs	r3, r2
 800c594:	d011      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c59a:	3308      	adds	r3, #8
 800c59c:	2100      	movs	r1, #0
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f001 fa4a 	bl	800da38 <RCCEx_PLL2_Config>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c5aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	6239      	str	r1, [r7, #32]
 800c5c6:	f003 0302 	and.w	r3, r3, #2
 800c5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c5cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	d011      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5da:	3308      	adds	r3, #8
 800c5dc:	2101      	movs	r1, #1
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f001 fa2a 	bl	800da38 <RCCEx_PLL2_Config>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c5ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d003      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	2100      	movs	r1, #0
 800c604:	61b9      	str	r1, [r7, #24]
 800c606:	f003 0304 	and.w	r3, r3, #4
 800c60a:	61fb      	str	r3, [r7, #28]
 800c60c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c610:	460b      	mov	r3, r1
 800c612:	4313      	orrs	r3, r2
 800c614:	d011      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c61a:	3308      	adds	r3, #8
 800c61c:	2102      	movs	r1, #2
 800c61e:	4618      	mov	r0, r3
 800c620:	f001 fa0a 	bl	800da38 <RCCEx_PLL2_Config>
 800c624:	4603      	mov	r3, r0
 800c626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c62a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c636:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c642:	2100      	movs	r1, #0
 800c644:	6139      	str	r1, [r7, #16]
 800c646:	f003 0308 	and.w	r3, r3, #8
 800c64a:	617b      	str	r3, [r7, #20]
 800c64c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c650:	460b      	mov	r3, r1
 800c652:	4313      	orrs	r3, r2
 800c654:	d011      	beq.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c65a:	3328      	adds	r3, #40	; 0x28
 800c65c:	2100      	movs	r1, #0
 800c65e:	4618      	mov	r0, r3
 800c660:	f001 fa9c 	bl	800db9c <RCCEx_PLL3_Config>
 800c664:	4603      	mov	r3, r0
 800c666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c66a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d003      	beq.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c676:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	2100      	movs	r1, #0
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	f003 0310 	and.w	r3, r3, #16
 800c68a:	60fb      	str	r3, [r7, #12]
 800c68c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c690:	460b      	mov	r3, r1
 800c692:	4313      	orrs	r3, r2
 800c694:	d011      	beq.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c69a:	3328      	adds	r3, #40	; 0x28
 800c69c:	2101      	movs	r1, #1
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f001 fa7c 	bl	800db9c <RCCEx_PLL3_Config>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	6039      	str	r1, [r7, #0]
 800c6c6:	f003 0320 	and.w	r3, r3, #32
 800c6ca:	607b      	str	r3, [r7, #4]
 800c6cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	d011      	beq.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6da:	3328      	adds	r3, #40	; 0x28
 800c6dc:	2102      	movs	r1, #2
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f001 fa5c 	bl	800db9c <RCCEx_PLL3_Config>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c6ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d003      	beq.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c6fa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	e000      	b.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c706:	2301      	movs	r3, #1
}
 800c708:	4618      	mov	r0, r3
 800c70a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c70e:	46bd      	mov	sp, r7
 800c710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c714:	58024400 	.word	0x58024400

0800c718 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b090      	sub	sp, #64	; 0x40
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c722:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c726:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c72a:	430b      	orrs	r3, r1
 800c72c:	f040 8094 	bne.w	800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c730:	4b9e      	ldr	r3, [pc, #632]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c734:	f003 0307 	and.w	r3, r3, #7
 800c738:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73c:	2b04      	cmp	r3, #4
 800c73e:	f200 8087 	bhi.w	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c742:	a201      	add	r2, pc, #4	; (adr r2, 800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c748:	0800c75d 	.word	0x0800c75d
 800c74c:	0800c785 	.word	0x0800c785
 800c750:	0800c7ad 	.word	0x0800c7ad
 800c754:	0800c849 	.word	0x0800c849
 800c758:	0800c7d5 	.word	0x0800c7d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c75c:	4b93      	ldr	r3, [pc, #588]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c768:	d108      	bne.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c76a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c76e:	4618      	mov	r0, r3
 800c770:	f001 f810 	bl	800d794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c778:	f000 bd45 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c77c:	2300      	movs	r3, #0
 800c77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c780:	f000 bd41 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c784:	4b89      	ldr	r3, [pc, #548]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c78c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c790:	d108      	bne.n	800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c792:	f107 0318 	add.w	r3, r7, #24
 800c796:	4618      	mov	r0, r3
 800c798:	f000 fd54 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7a0:	f000 bd31 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a8:	f000 bd2d 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7ac:	4b7f      	ldr	r3, [pc, #508]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7b8:	d108      	bne.n	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7ba:	f107 030c 	add.w	r3, r7, #12
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 fe94 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7c8:	f000 bd1d 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d0:	f000 bd19 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7d4:	4b75      	ldr	r3, [pc, #468]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7de:	4b73      	ldr	r3, [pc, #460]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 0304 	and.w	r3, r3, #4
 800c7e6:	2b04      	cmp	r3, #4
 800c7e8:	d10c      	bne.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d109      	bne.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7f0:	4b6e      	ldr	r3, [pc, #440]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	08db      	lsrs	r3, r3, #3
 800c7f6:	f003 0303 	and.w	r3, r3, #3
 800c7fa:	4a6d      	ldr	r2, [pc, #436]	; (800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c7fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c800:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c802:	e01f      	b.n	800c844 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c804:	4b69      	ldr	r3, [pc, #420]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c80c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c810:	d106      	bne.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c814:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c818:	d102      	bne.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c81a:	4b66      	ldr	r3, [pc, #408]	; (800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c81c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c81e:	e011      	b.n	800c844 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c820:	4b62      	ldr	r3, [pc, #392]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c82c:	d106      	bne.n	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c834:	d102      	bne.n	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c836:	4b60      	ldr	r3, [pc, #384]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c83a:	e003      	b.n	800c844 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c840:	f000 bce1 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c844:	f000 bcdf 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c848:	4b5c      	ldr	r3, [pc, #368]	; (800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c84c:	f000 bcdb 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c850:	2300      	movs	r3, #0
 800c852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c854:	f000 bcd7 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c85c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c860:	430b      	orrs	r3, r1
 800c862:	f040 80ad 	bne.w	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c866:	4b51      	ldr	r3, [pc, #324]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c86a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c86e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c876:	d056      	beq.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c87e:	f200 8090 	bhi.w	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	2bc0      	cmp	r3, #192	; 0xc0
 800c886:	f000 8088 	beq.w	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88c:	2bc0      	cmp	r3, #192	; 0xc0
 800c88e:	f200 8088 	bhi.w	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	2b80      	cmp	r3, #128	; 0x80
 800c896:	d032      	beq.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89a:	2b80      	cmp	r3, #128	; 0x80
 800c89c:	f200 8081 	bhi.w	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a8:	2b40      	cmp	r3, #64	; 0x40
 800c8aa:	d014      	beq.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c8ac:	e079      	b.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8ae:	4b3f      	ldr	r3, [pc, #252]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8ba:	d108      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f000 ff67 	bl	800d794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ca:	f000 bc9c 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d2:	f000 bc98 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8d6:	4b35      	ldr	r3, [pc, #212]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8e2:	d108      	bne.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8e4:	f107 0318 	add.w	r3, r7, #24
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f000 fcab 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8f2:	f000 bc88 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8fa:	f000 bc84 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8fe:	4b2b      	ldr	r3, [pc, #172]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c90a:	d108      	bne.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c90c:	f107 030c 	add.w	r3, r7, #12
 800c910:	4618      	mov	r0, r3
 800c912:	f000 fdeb 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c91a:	f000 bc74 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c91e:	2300      	movs	r3, #0
 800c920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c922:	f000 bc70 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c926:	4b21      	ldr	r3, [pc, #132]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c92a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c92e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c930:	4b1e      	ldr	r3, [pc, #120]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f003 0304 	and.w	r3, r3, #4
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d10c      	bne.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d109      	bne.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c942:	4b1a      	ldr	r3, [pc, #104]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	08db      	lsrs	r3, r3, #3
 800c948:	f003 0303 	and.w	r3, r3, #3
 800c94c:	4a18      	ldr	r2, [pc, #96]	; (800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c94e:	fa22 f303 	lsr.w	r3, r2, r3
 800c952:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c954:	e01f      	b.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c956:	4b15      	ldr	r3, [pc, #84]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c95e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c962:	d106      	bne.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c96a:	d102      	bne.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c96c:	4b11      	ldr	r3, [pc, #68]	; (800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c96e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c970:	e011      	b.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c972:	4b0e      	ldr	r3, [pc, #56]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c97a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c97e:	d106      	bne.n	800c98e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c986:	d102      	bne.n	800c98e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c988:	4b0b      	ldr	r3, [pc, #44]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c98a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c98c:	e003      	b.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c992:	f000 bc38 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c996:	f000 bc36 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c99a:	4b08      	ldr	r3, [pc, #32]	; (800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c99c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c99e:	f000 bc32 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a6:	f000 bc2e 	b.w	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9aa:	bf00      	nop
 800c9ac:	58024400 	.word	0x58024400
 800c9b0:	03d09000 	.word	0x03d09000
 800c9b4:	003d0900 	.word	0x003d0900
 800c9b8:	017d7840 	.word	0x017d7840
 800c9bc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9c4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c9c8:	430b      	orrs	r3, r1
 800c9ca:	f040 809c 	bne.w	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c9ce:	4b9e      	ldr	r3, [pc, #632]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c9d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c9de:	d054      	beq.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c9e6:	f200 808b 	bhi.w	800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c9f0:	f000 8083 	beq.w	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c9fa:	f200 8081 	bhi.w	800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca04:	d02f      	beq.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ca06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca0c:	d878      	bhi.n	800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d004      	beq.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ca14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca1a:	d012      	beq.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ca1c:	e070      	b.n	800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca1e:	4b8a      	ldr	r3, [pc, #552]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca2a:	d107      	bne.n	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca30:	4618      	mov	r0, r3
 800ca32:	f000 feaf 	bl	800d794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca3a:	e3e4      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca40:	e3e1      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca42:	4b81      	ldr	r3, [pc, #516]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca4e:	d107      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca50:	f107 0318 	add.w	r3, r7, #24
 800ca54:	4618      	mov	r0, r3
 800ca56:	f000 fbf5 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca5e:	e3d2      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca64:	e3cf      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca66:	4b78      	ldr	r3, [pc, #480]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca72:	d107      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca74:	f107 030c 	add.w	r3, r7, #12
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 fd37 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca82:	e3c0      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca88:	e3bd      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca8a:	4b6f      	ldr	r3, [pc, #444]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca92:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca94:	4b6c      	ldr	r3, [pc, #432]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 0304 	and.w	r3, r3, #4
 800ca9c:	2b04      	cmp	r3, #4
 800ca9e:	d10c      	bne.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800caa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d109      	bne.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800caa6:	4b68      	ldr	r3, [pc, #416]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	08db      	lsrs	r3, r3, #3
 800caac:	f003 0303 	and.w	r3, r3, #3
 800cab0:	4a66      	ldr	r2, [pc, #408]	; (800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cab2:	fa22 f303 	lsr.w	r3, r2, r3
 800cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cab8:	e01e      	b.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800caba:	4b63      	ldr	r3, [pc, #396]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cac6:	d106      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800cac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cace:	d102      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cad0:	4b5f      	ldr	r3, [pc, #380]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cad4:	e010      	b.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cad6:	4b5c      	ldr	r3, [pc, #368]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cae2:	d106      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800cae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caea:	d102      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800caec:	4b59      	ldr	r3, [pc, #356]	; (800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800caee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caf0:	e002      	b.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800caf6:	e386      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800caf8:	e385      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cafa:	4b57      	ldr	r3, [pc, #348]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cafc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cafe:	e382      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cb00:	2300      	movs	r3, #0
 800cb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb04:	e37f      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cb06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb0a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cb0e:	430b      	orrs	r3, r1
 800cb10:	f040 80a7 	bne.w	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cb14:	4b4c      	ldr	r3, [pc, #304]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb18:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cb1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb24:	d055      	beq.n	800cbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800cb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb2c:	f200 8096 	bhi.w	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cb36:	f000 8084 	beq.w	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cb40:	f200 808c 	bhi.w	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb4a:	d030      	beq.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb52:	f200 8083 	bhi.w	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d004      	beq.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cb62:	d012      	beq.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800cb64:	e07a      	b.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb66:	4b38      	ldr	r3, [pc, #224]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb72:	d107      	bne.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f000 fe0b 	bl	800d794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb82:	e340      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb84:	2300      	movs	r3, #0
 800cb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb88:	e33d      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb8a:	4b2f      	ldr	r3, [pc, #188]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb96:	d107      	bne.n	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb98:	f107 0318 	add.w	r3, r7, #24
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f000 fb51 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cba6:	e32e      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbac:	e32b      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbae:	4b26      	ldr	r3, [pc, #152]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbba:	d107      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbbc:	f107 030c 	add.w	r3, r7, #12
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fc93 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbca:	e31c      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbd0:	e319      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbd2:	4b1d      	ldr	r3, [pc, #116]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cbda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbdc:	4b1a      	ldr	r3, [pc, #104]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 0304 	and.w	r3, r3, #4
 800cbe4:	2b04      	cmp	r3, #4
 800cbe6:	d10c      	bne.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d109      	bne.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbee:	4b16      	ldr	r3, [pc, #88]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	08db      	lsrs	r3, r3, #3
 800cbf4:	f003 0303 	and.w	r3, r3, #3
 800cbf8:	4a14      	ldr	r2, [pc, #80]	; (800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cbfa:	fa22 f303 	lsr.w	r3, r2, r3
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc00:	e01e      	b.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc02:	4b11      	ldr	r3, [pc, #68]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc0e:	d106      	bne.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc16:	d102      	bne.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc18:	4b0d      	ldr	r3, [pc, #52]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc1c:	e010      	b.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc1e:	4b0a      	ldr	r3, [pc, #40]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc2a:	d106      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800cc2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc32:	d102      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc34:	4b07      	ldr	r3, [pc, #28]	; (800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cc36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc38:	e002      	b.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc3e:	e2e2      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc40:	e2e1      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc42:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc46:	e2de      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc48:	58024400 	.word	0x58024400
 800cc4c:	03d09000 	.word	0x03d09000
 800cc50:	003d0900 	.word	0x003d0900
 800cc54:	017d7840 	.word	0x017d7840
 800cc58:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc60:	e2d1      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cc62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc66:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cc6a:	430b      	orrs	r3, r1
 800cc6c:	f040 809c 	bne.w	800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cc70:	4b93      	ldr	r3, [pc, #588]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc74:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cc78:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc80:	d054      	beq.n	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800cc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc88:	f200 808b 	bhi.w	800cda2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc92:	f000 8083 	beq.w	800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800cc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc9c:	f200 8081 	bhi.w	800cda2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cca6:	d02f      	beq.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800cca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccae:	d878      	bhi.n	800cda2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d004      	beq.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccbc:	d012      	beq.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ccbe:	e070      	b.n	800cda2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccc0:	4b7f      	ldr	r3, [pc, #508]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cccc:	d107      	bne.n	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 fd5e 	bl	800d794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccdc:	e293      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce2:	e290      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cce4:	4b76      	ldr	r3, [pc, #472]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccf0:	d107      	bne.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccf2:	f107 0318 	add.w	r3, r7, #24
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f000 faa4 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd00:	e281      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd06:	e27e      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd08:	4b6d      	ldr	r3, [pc, #436]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd14:	d107      	bne.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd16:	f107 030c 	add.w	r3, r7, #12
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f000 fbe6 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd24:	e26f      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd26:	2300      	movs	r3, #0
 800cd28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2a:	e26c      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd2c:	4b64      	ldr	r3, [pc, #400]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd34:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd36:	4b62      	ldr	r3, [pc, #392]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 0304 	and.w	r3, r3, #4
 800cd3e:	2b04      	cmp	r3, #4
 800cd40:	d10c      	bne.n	800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d109      	bne.n	800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd48:	4b5d      	ldr	r3, [pc, #372]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	08db      	lsrs	r3, r3, #3
 800cd4e:	f003 0303 	and.w	r3, r3, #3
 800cd52:	4a5c      	ldr	r2, [pc, #368]	; (800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cd54:	fa22 f303 	lsr.w	r3, r2, r3
 800cd58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd5a:	e01e      	b.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd5c:	4b58      	ldr	r3, [pc, #352]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd68:	d106      	bne.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd70:	d102      	bne.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd72:	4b55      	ldr	r3, [pc, #340]	; (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cd74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd76:	e010      	b.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd78:	4b51      	ldr	r3, [pc, #324]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd84:	d106      	bne.n	800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd8c:	d102      	bne.n	800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd8e:	4b4f      	ldr	r3, [pc, #316]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cd90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd92:	e002      	b.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd94:	2300      	movs	r3, #0
 800cd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd98:	e235      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd9a:	e234      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd9c:	4b4c      	ldr	r3, [pc, #304]	; (800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda0:	e231      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda6:	e22e      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cda8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdac:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cdb0:	430b      	orrs	r3, r1
 800cdb2:	f040 808f 	bne.w	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cdb6:	4b42      	ldr	r3, [pc, #264]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cdbe:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cdc6:	d06b      	beq.n	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cdce:	d874      	bhi.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cdd6:	d056      	beq.n	800ce86 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cdde:	d86c      	bhi.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cde6:	d03b      	beq.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cdee:	d864      	bhi.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdf6:	d021      	beq.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdfe:	d85c      	bhi.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d004      	beq.n	800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ce06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce0c:	d004      	beq.n	800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ce0e:	e054      	b.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ce10:	f7fe fa0a 	bl	800b228 <HAL_RCC_GetPCLK1Freq>
 800ce14:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce16:	e1f6      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce18:	4b29      	ldr	r3, [pc, #164]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce24:	d107      	bne.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce26:	f107 0318 	add.w	r3, r7, #24
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fa0a 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce34:	e1e7      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce3a:	e1e4      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce3c:	4b20      	ldr	r3, [pc, #128]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce48:	d107      	bne.n	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce4a:	f107 030c 	add.w	r3, r7, #12
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 fb4c 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce58:	e1d5      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce5e:	e1d2      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce60:	4b17      	ldr	r3, [pc, #92]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f003 0304 	and.w	r3, r3, #4
 800ce68:	2b04      	cmp	r3, #4
 800ce6a:	d109      	bne.n	800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce6c:	4b14      	ldr	r3, [pc, #80]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	08db      	lsrs	r3, r3, #3
 800ce72:	f003 0303 	and.w	r3, r3, #3
 800ce76:	4a13      	ldr	r2, [pc, #76]	; (800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ce78:	fa22 f303 	lsr.w	r3, r2, r3
 800ce7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce7e:	e1c2      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce84:	e1bf      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ce86:	4b0e      	ldr	r3, [pc, #56]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce92:	d102      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ce94:	4b0c      	ldr	r3, [pc, #48]	; (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce98:	e1b5      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce9e:	e1b2      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cea0:	4b07      	ldr	r3, [pc, #28]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ceac:	d102      	bne.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ceae:	4b07      	ldr	r3, [pc, #28]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ceb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceb2:	e1a8      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb8:	e1a5      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cebe:	e1a2      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cec0:	58024400 	.word	0x58024400
 800cec4:	03d09000 	.word	0x03d09000
 800cec8:	003d0900 	.word	0x003d0900
 800cecc:	017d7840 	.word	0x017d7840
 800ced0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ced4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ced8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cedc:	430b      	orrs	r3, r1
 800cede:	d173      	bne.n	800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cee0:	4b9c      	ldr	r3, [pc, #624]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cee8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cef0:	d02f      	beq.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cef8:	d863      	bhi.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d004      	beq.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf06:	d012      	beq.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cf08:	e05b      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf0a:	4b92      	ldr	r3, [pc, #584]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf16:	d107      	bne.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf18:	f107 0318 	add.w	r3, r7, #24
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f000 f991 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf26:	e16e      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf2c:	e16b      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf2e:	4b89      	ldr	r3, [pc, #548]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf3a:	d107      	bne.n	800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf3c:	f107 030c 	add.w	r3, r7, #12
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 fad3 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf4a:	e15c      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf50:	e159      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf52:	4b80      	ldr	r3, [pc, #512]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf5c:	4b7d      	ldr	r3, [pc, #500]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0304 	and.w	r3, r3, #4
 800cf64:	2b04      	cmp	r3, #4
 800cf66:	d10c      	bne.n	800cf82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d109      	bne.n	800cf82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf6e:	4b79      	ldr	r3, [pc, #484]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	08db      	lsrs	r3, r3, #3
 800cf74:	f003 0303 	and.w	r3, r3, #3
 800cf78:	4a77      	ldr	r2, [pc, #476]	; (800d158 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cf7a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf80:	e01e      	b.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf82:	4b74      	ldr	r3, [pc, #464]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf8e:	d106      	bne.n	800cf9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf96:	d102      	bne.n	800cf9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf98:	4b70      	ldr	r3, [pc, #448]	; (800d15c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf9c:	e010      	b.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf9e:	4b6d      	ldr	r3, [pc, #436]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfaa:	d106      	bne.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfb2:	d102      	bne.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cfb4:	4b6a      	ldr	r3, [pc, #424]	; (800d160 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfb8:	e002      	b.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cfbe:	e122      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cfc0:	e121      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfc6:	e11e      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cfc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfcc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cfd0:	430b      	orrs	r3, r1
 800cfd2:	d133      	bne.n	800d03c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cfd4:	4b5f      	ldr	r3, [pc, #380]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cfd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfdc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d004      	beq.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfea:	d012      	beq.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cfec:	e023      	b.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cfee:	4b59      	ldr	r3, [pc, #356]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cffa:	d107      	bne.n	800d00c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d000:	4618      	mov	r0, r3
 800d002:	f000 fbc7 	bl	800d794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d00a:	e0fc      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d00c:	2300      	movs	r3, #0
 800d00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d010:	e0f9      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d012:	4b50      	ldr	r3, [pc, #320]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d01a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d01e:	d107      	bne.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d020:	f107 0318 	add.w	r3, r7, #24
 800d024:	4618      	mov	r0, r3
 800d026:	f000 f90d 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d02e:	e0ea      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d034:	e0e7      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d036:	2300      	movs	r3, #0
 800d038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d03a:	e0e4      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d03c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d040:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d044:	430b      	orrs	r3, r1
 800d046:	f040 808d 	bne.w	800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d04a:	4b42      	ldr	r3, [pc, #264]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d04e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d052:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d05a:	d06b      	beq.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800d05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d062:	d874      	bhi.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d06a:	d056      	beq.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800d06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d072:	d86c      	bhi.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d07a:	d03b      	beq.n	800d0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800d07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d082:	d864      	bhi.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d08a:	d021      	beq.n	800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800d08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d092:	d85c      	bhi.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d096:	2b00      	cmp	r3, #0
 800d098:	d004      	beq.n	800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0a0:	d004      	beq.n	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800d0a2:	e054      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d0a4:	f000 f8b8 	bl	800d218 <HAL_RCCEx_GetD3PCLK1Freq>
 800d0a8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0aa:	e0ac      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0ac:	4b29      	ldr	r3, [pc, #164]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0b8:	d107      	bne.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ba:	f107 0318 	add.w	r3, r7, #24
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 f8c0 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0c8:	e09d      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0ce:	e09a      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0d0:	4b20      	ldr	r3, [pc, #128]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0dc:	d107      	bne.n	800d0ee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0de:	f107 030c 	add.w	r3, r7, #12
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f000 fa02 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0ec:	e08b      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0f2:	e088      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d0f4:	4b17      	ldr	r3, [pc, #92]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f003 0304 	and.w	r3, r3, #4
 800d0fc:	2b04      	cmp	r3, #4
 800d0fe:	d109      	bne.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d100:	4b14      	ldr	r3, [pc, #80]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	08db      	lsrs	r3, r3, #3
 800d106:	f003 0303 	and.w	r3, r3, #3
 800d10a:	4a13      	ldr	r2, [pc, #76]	; (800d158 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d10c:	fa22 f303 	lsr.w	r3, r2, r3
 800d110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d112:	e078      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d118:	e075      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d11a:	4b0e      	ldr	r3, [pc, #56]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d126:	d102      	bne.n	800d12e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800d128:	4b0c      	ldr	r3, [pc, #48]	; (800d15c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d12c:	e06b      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d132:	e068      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d134:	4b07      	ldr	r3, [pc, #28]	; (800d154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d13c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d140:	d102      	bne.n	800d148 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800d142:	4b07      	ldr	r3, [pc, #28]	; (800d160 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d144:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d146:	e05e      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d148:	2300      	movs	r3, #0
 800d14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d14c:	e05b      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d14e:	2300      	movs	r3, #0
 800d150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d152:	e058      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d154:	58024400 	.word	0x58024400
 800d158:	03d09000 	.word	0x03d09000
 800d15c:	003d0900 	.word	0x003d0900
 800d160:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d164:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d168:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d16c:	430b      	orrs	r3, r1
 800d16e:	d148      	bne.n	800d202 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d170:	4b27      	ldr	r3, [pc, #156]	; (800d210 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d174:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d178:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d180:	d02a      	beq.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d188:	d838      	bhi.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d004      	beq.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d196:	d00d      	beq.n	800d1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d198:	e030      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d19a:	4b1d      	ldr	r3, [pc, #116]	; (800d210 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1a6:	d102      	bne.n	800d1ae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d1a8:	4b1a      	ldr	r3, [pc, #104]	; (800d214 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1ac:	e02b      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1b2:	e028      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d1b4:	4b16      	ldr	r3, [pc, #88]	; (800d210 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1c0:	d107      	bne.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 fae4 	bl	800d794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1d0:	e019      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1d6:	e016      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1d8:	4b0d      	ldr	r3, [pc, #52]	; (800d210 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1e4:	d107      	bne.n	800d1f6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1e6:	f107 0318 	add.w	r3, r7, #24
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f000 f82a 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1f4:	e007      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1fa:	e004      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d200:	e001      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3740      	adds	r7, #64	; 0x40
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	58024400 	.word	0x58024400
 800d214:	017d7840 	.word	0x017d7840

0800d218 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d21c:	f7fd ffd4 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 800d220:	4602      	mov	r2, r0
 800d222:	4b06      	ldr	r3, [pc, #24]	; (800d23c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d224:	6a1b      	ldr	r3, [r3, #32]
 800d226:	091b      	lsrs	r3, r3, #4
 800d228:	f003 0307 	and.w	r3, r3, #7
 800d22c:	4904      	ldr	r1, [pc, #16]	; (800d240 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d22e:	5ccb      	ldrb	r3, [r1, r3]
 800d230:	f003 031f 	and.w	r3, r3, #31
 800d234:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d238:	4618      	mov	r0, r3
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	58024400 	.word	0x58024400
 800d240:	08017848 	.word	0x08017848

0800d244 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d244:	b480      	push	{r7}
 800d246:	b089      	sub	sp, #36	; 0x24
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d24c:	4ba1      	ldr	r3, [pc, #644]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d250:	f003 0303 	and.w	r3, r3, #3
 800d254:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d256:	4b9f      	ldr	r3, [pc, #636]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25a:	0b1b      	lsrs	r3, r3, #12
 800d25c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d260:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d262:	4b9c      	ldr	r3, [pc, #624]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d266:	091b      	lsrs	r3, r3, #4
 800d268:	f003 0301 	and.w	r3, r3, #1
 800d26c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d26e:	4b99      	ldr	r3, [pc, #612]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d272:	08db      	lsrs	r3, r3, #3
 800d274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d278:	693a      	ldr	r2, [r7, #16]
 800d27a:	fb02 f303 	mul.w	r3, r2, r3
 800d27e:	ee07 3a90 	vmov	s15, r3
 800d282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d286:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	f000 8111 	beq.w	800d4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	2b02      	cmp	r3, #2
 800d296:	f000 8083 	beq.w	800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	f200 80a1 	bhi.w	800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d003      	beq.n	800d2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d056      	beq.n	800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d2ae:	e099      	b.n	800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2b0:	4b88      	ldr	r3, [pc, #544]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 0320 	and.w	r3, r3, #32
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d02d      	beq.n	800d318 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2bc:	4b85      	ldr	r3, [pc, #532]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	08db      	lsrs	r3, r3, #3
 800d2c2:	f003 0303 	and.w	r3, r3, #3
 800d2c6:	4a84      	ldr	r2, [pc, #528]	; (800d4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d2cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	ee07 3a90 	vmov	s15, r3
 800d2d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	ee07 3a90 	vmov	s15, r3
 800d2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2e6:	4b7b      	ldr	r3, [pc, #492]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ee:	ee07 3a90 	vmov	s15, r3
 800d2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d4dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d312:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d316:	e087      	b.n	800d428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	ee07 3a90 	vmov	s15, r3
 800d31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d322:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d32a:	4b6a      	ldr	r3, [pc, #424]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d332:	ee07 3a90 	vmov	s15, r3
 800d336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d33a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d33e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d4dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d34a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d34e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d352:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d35a:	e065      	b.n	800d428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	ee07 3a90 	vmov	s15, r3
 800d362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d366:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d36a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d36e:	4b59      	ldr	r3, [pc, #356]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d376:	ee07 3a90 	vmov	s15, r3
 800d37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d37e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d382:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d4dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d38e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d39a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d39e:	e043      	b.n	800d428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	ee07 3a90 	vmov	s15, r3
 800d3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d3ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3b2:	4b48      	ldr	r3, [pc, #288]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ba:	ee07 3a90 	vmov	s15, r3
 800d3be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d4dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3e2:	e021      	b.n	800d428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	ee07 3a90 	vmov	s15, r3
 800d3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3f6:	4b37      	ldr	r3, [pc, #220]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3fe:	ee07 3a90 	vmov	s15, r3
 800d402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d406:	ed97 6a03 	vldr	s12, [r7, #12]
 800d40a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d4dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d426:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d428:	4b2a      	ldr	r3, [pc, #168]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d42c:	0a5b      	lsrs	r3, r3, #9
 800d42e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d432:	ee07 3a90 	vmov	s15, r3
 800d436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d43a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d43e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d442:	edd7 6a07 	vldr	s13, [r7, #28]
 800d446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d44a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d44e:	ee17 2a90 	vmov	r2, s15
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d456:	4b1f      	ldr	r3, [pc, #124]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	0c1b      	lsrs	r3, r3, #16
 800d45c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d460:	ee07 3a90 	vmov	s15, r3
 800d464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d46c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d470:	edd7 6a07 	vldr	s13, [r7, #28]
 800d474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d47c:	ee17 2a90 	vmov	r2, s15
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d484:	4b13      	ldr	r3, [pc, #76]	; (800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d488:	0e1b      	lsrs	r3, r3, #24
 800d48a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d48e:	ee07 3a90 	vmov	s15, r3
 800d492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d49a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d49e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4aa:	ee17 2a90 	vmov	r2, s15
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d4b2:	e008      	b.n	800d4c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	609a      	str	r2, [r3, #8]
}
 800d4c6:	bf00      	nop
 800d4c8:	3724      	adds	r7, #36	; 0x24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	58024400 	.word	0x58024400
 800d4d8:	03d09000 	.word	0x03d09000
 800d4dc:	46000000 	.word	0x46000000
 800d4e0:	4c742400 	.word	0x4c742400
 800d4e4:	4a742400 	.word	0x4a742400
 800d4e8:	4bbebc20 	.word	0x4bbebc20

0800d4ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b089      	sub	sp, #36	; 0x24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d4f4:	4ba1      	ldr	r3, [pc, #644]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f8:	f003 0303 	and.w	r3, r3, #3
 800d4fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d4fe:	4b9f      	ldr	r3, [pc, #636]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d502:	0d1b      	lsrs	r3, r3, #20
 800d504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d508:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d50a:	4b9c      	ldr	r3, [pc, #624]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50e:	0a1b      	lsrs	r3, r3, #8
 800d510:	f003 0301 	and.w	r3, r3, #1
 800d514:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d516:	4b99      	ldr	r3, [pc, #612]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d51a:	08db      	lsrs	r3, r3, #3
 800d51c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	fb02 f303 	mul.w	r3, r2, r3
 800d526:	ee07 3a90 	vmov	s15, r3
 800d52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d52e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	2b00      	cmp	r3, #0
 800d536:	f000 8111 	beq.w	800d75c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	2b02      	cmp	r3, #2
 800d53e:	f000 8083 	beq.w	800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	2b02      	cmp	r3, #2
 800d546:	f200 80a1 	bhi.w	800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d003      	beq.n	800d558 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	2b01      	cmp	r3, #1
 800d554:	d056      	beq.n	800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d556:	e099      	b.n	800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d558:	4b88      	ldr	r3, [pc, #544]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f003 0320 	and.w	r3, r3, #32
 800d560:	2b00      	cmp	r3, #0
 800d562:	d02d      	beq.n	800d5c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d564:	4b85      	ldr	r3, [pc, #532]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	08db      	lsrs	r3, r3, #3
 800d56a:	f003 0303 	and.w	r3, r3, #3
 800d56e:	4a84      	ldr	r2, [pc, #528]	; (800d780 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d570:	fa22 f303 	lsr.w	r3, r2, r3
 800d574:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	ee07 3a90 	vmov	s15, r3
 800d57c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	ee07 3a90 	vmov	s15, r3
 800d586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d58e:	4b7b      	ldr	r3, [pc, #492]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d596:	ee07 3a90 	vmov	s15, r3
 800d59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d59e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d5be:	e087      	b.n	800d6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	ee07 3a90 	vmov	s15, r3
 800d5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d788 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d5ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5d2:	4b6a      	ldr	r3, [pc, #424]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5da:	ee07 3a90 	vmov	s15, r3
 800d5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d602:	e065      	b.n	800d6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	ee07 3a90 	vmov	s15, r3
 800d60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d60e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d78c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d616:	4b59      	ldr	r3, [pc, #356]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d61e:	ee07 3a90 	vmov	s15, r3
 800d622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d626:	ed97 6a03 	vldr	s12, [r7, #12]
 800d62a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d646:	e043      	b.n	800d6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	ee07 3a90 	vmov	s15, r3
 800d64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d652:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d65a:	4b48      	ldr	r3, [pc, #288]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d662:	ee07 3a90 	vmov	s15, r3
 800d666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d66a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d66e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d67a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d682:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d68a:	e021      	b.n	800d6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	ee07 3a90 	vmov	s15, r3
 800d692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d696:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d78c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d69a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d69e:	4b37      	ldr	r3, [pc, #220]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a6:	ee07 3a90 	vmov	s15, r3
 800d6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d6d0:	4b2a      	ldr	r3, [pc, #168]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d4:	0a5b      	lsrs	r3, r3, #9
 800d6d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6da:	ee07 3a90 	vmov	s15, r3
 800d6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6f6:	ee17 2a90 	vmov	r2, s15
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d6fe:	4b1f      	ldr	r3, [pc, #124]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d702:	0c1b      	lsrs	r3, r3, #16
 800d704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d708:	ee07 3a90 	vmov	s15, r3
 800d70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d714:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d718:	edd7 6a07 	vldr	s13, [r7, #28]
 800d71c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d724:	ee17 2a90 	vmov	r2, s15
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d72c:	4b13      	ldr	r3, [pc, #76]	; (800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d730:	0e1b      	lsrs	r3, r3, #24
 800d732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d736:	ee07 3a90 	vmov	s15, r3
 800d73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d73e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d742:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d746:	edd7 6a07 	vldr	s13, [r7, #28]
 800d74a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d74e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d752:	ee17 2a90 	vmov	r2, s15
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d75a:	e008      	b.n	800d76e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	609a      	str	r2, [r3, #8]
}
 800d76e:	bf00      	nop
 800d770:	3724      	adds	r7, #36	; 0x24
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop
 800d77c:	58024400 	.word	0x58024400
 800d780:	03d09000 	.word	0x03d09000
 800d784:	46000000 	.word	0x46000000
 800d788:	4c742400 	.word	0x4c742400
 800d78c:	4a742400 	.word	0x4a742400
 800d790:	4bbebc20 	.word	0x4bbebc20

0800d794 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d794:	b480      	push	{r7}
 800d796:	b089      	sub	sp, #36	; 0x24
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d79c:	4ba0      	ldr	r3, [pc, #640]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a0:	f003 0303 	and.w	r3, r3, #3
 800d7a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d7a6:	4b9e      	ldr	r3, [pc, #632]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7aa:	091b      	lsrs	r3, r3, #4
 800d7ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d7b2:	4b9b      	ldr	r3, [pc, #620]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b6:	f003 0301 	and.w	r3, r3, #1
 800d7ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d7bc:	4b98      	ldr	r3, [pc, #608]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c0:	08db      	lsrs	r3, r3, #3
 800d7c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d7c6:	693a      	ldr	r2, [r7, #16]
 800d7c8:	fb02 f303 	mul.w	r3, r2, r3
 800d7cc:	ee07 3a90 	vmov	s15, r3
 800d7d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f000 8111 	beq.w	800da02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	f000 8083 	beq.w	800d8ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	f200 80a1 	bhi.w	800d932 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d003      	beq.n	800d7fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d056      	beq.n	800d8aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d7fc:	e099      	b.n	800d932 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7fe:	4b88      	ldr	r3, [pc, #544]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f003 0320 	and.w	r3, r3, #32
 800d806:	2b00      	cmp	r3, #0
 800d808:	d02d      	beq.n	800d866 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d80a:	4b85      	ldr	r3, [pc, #532]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	08db      	lsrs	r3, r3, #3
 800d810:	f003 0303 	and.w	r3, r3, #3
 800d814:	4a83      	ldr	r2, [pc, #524]	; (800da24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d816:	fa22 f303 	lsr.w	r3, r2, r3
 800d81a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	ee07 3a90 	vmov	s15, r3
 800d822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	ee07 3a90 	vmov	s15, r3
 800d82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d834:	4b7a      	ldr	r3, [pc, #488]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d83c:	ee07 3a90 	vmov	s15, r3
 800d840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d844:	ed97 6a03 	vldr	s12, [r7, #12]
 800d848:	eddf 5a77 	vldr	s11, [pc, #476]	; 800da28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d84c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d85c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d860:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d864:	e087      	b.n	800d976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	ee07 3a90 	vmov	s15, r3
 800d86c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d870:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800da2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d878:	4b69      	ldr	r3, [pc, #420]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d880:	ee07 3a90 	vmov	s15, r3
 800d884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d888:	ed97 6a03 	vldr	s12, [r7, #12]
 800d88c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800da28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d89c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8a8:	e065      	b.n	800d976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	ee07 3a90 	vmov	s15, r3
 800d8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800da30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d8b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8bc:	4b58      	ldr	r3, [pc, #352]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8c4:	ee07 3a90 	vmov	s15, r3
 800d8c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800da28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d8d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8ec:	e043      	b.n	800d976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	ee07 3a90 	vmov	s15, r3
 800d8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800da34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d8fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d900:	4b47      	ldr	r3, [pc, #284]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d908:	ee07 3a90 	vmov	s15, r3
 800d90c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d910:	ed97 6a03 	vldr	s12, [r7, #12]
 800d914:	eddf 5a44 	vldr	s11, [pc, #272]	; 800da28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d91c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d92c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d930:	e021      	b.n	800d976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	ee07 3a90 	vmov	s15, r3
 800d938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d93c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800da2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d944:	4b36      	ldr	r3, [pc, #216]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d94c:	ee07 3a90 	vmov	s15, r3
 800d950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d954:	ed97 6a03 	vldr	s12, [r7, #12]
 800d958:	eddf 5a33 	vldr	s11, [pc, #204]	; 800da28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d95c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d96c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d970:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d974:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d976:	4b2a      	ldr	r3, [pc, #168]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d97a:	0a5b      	lsrs	r3, r3, #9
 800d97c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d980:	ee07 3a90 	vmov	s15, r3
 800d984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d98c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d990:	edd7 6a07 	vldr	s13, [r7, #28]
 800d994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d99c:	ee17 2a90 	vmov	r2, s15
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d9a4:	4b1e      	ldr	r3, [pc, #120]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a8:	0c1b      	lsrs	r3, r3, #16
 800d9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ae:	ee07 3a90 	vmov	s15, r3
 800d9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d9ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9be:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9ca:	ee17 2a90 	vmov	r2, s15
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d9d2:	4b13      	ldr	r3, [pc, #76]	; (800da20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d6:	0e1b      	lsrs	r3, r3, #24
 800d9d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9dc:	ee07 3a90 	vmov	s15, r3
 800d9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d9e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9f8:	ee17 2a90 	vmov	r2, s15
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800da00:	e008      	b.n	800da14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	609a      	str	r2, [r3, #8]
}
 800da14:	bf00      	nop
 800da16:	3724      	adds	r7, #36	; 0x24
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr
 800da20:	58024400 	.word	0x58024400
 800da24:	03d09000 	.word	0x03d09000
 800da28:	46000000 	.word	0x46000000
 800da2c:	4c742400 	.word	0x4c742400
 800da30:	4a742400 	.word	0x4a742400
 800da34:	4bbebc20 	.word	0x4bbebc20

0800da38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800da42:	2300      	movs	r3, #0
 800da44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800da46:	4b53      	ldr	r3, [pc, #332]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800da48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4a:	f003 0303 	and.w	r3, r3, #3
 800da4e:	2b03      	cmp	r3, #3
 800da50:	d101      	bne.n	800da56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800da52:	2301      	movs	r3, #1
 800da54:	e099      	b.n	800db8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800da56:	4b4f      	ldr	r3, [pc, #316]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a4e      	ldr	r2, [pc, #312]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800da5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800da60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da62:	f7f6 fc8f 	bl	8004384 <HAL_GetTick>
 800da66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800da68:	e008      	b.n	800da7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da6a:	f7f6 fc8b 	bl	8004384 <HAL_GetTick>
 800da6e:	4602      	mov	r2, r0
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	1ad3      	subs	r3, r2, r3
 800da74:	2b02      	cmp	r3, #2
 800da76:	d901      	bls.n	800da7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800da78:	2303      	movs	r3, #3
 800da7a:	e086      	b.n	800db8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800da7c:	4b45      	ldr	r3, [pc, #276]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1f0      	bne.n	800da6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800da88:	4b42      	ldr	r3, [pc, #264]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800da8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	031b      	lsls	r3, r3, #12
 800da96:	493f      	ldr	r1, [pc, #252]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800da98:	4313      	orrs	r3, r2
 800da9a:	628b      	str	r3, [r1, #40]	; 0x28
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	3b01      	subs	r3, #1
 800daa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	3b01      	subs	r3, #1
 800daac:	025b      	lsls	r3, r3, #9
 800daae:	b29b      	uxth	r3, r3
 800dab0:	431a      	orrs	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	3b01      	subs	r3, #1
 800dab8:	041b      	lsls	r3, r3, #16
 800daba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dabe:	431a      	orrs	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	691b      	ldr	r3, [r3, #16]
 800dac4:	3b01      	subs	r3, #1
 800dac6:	061b      	lsls	r3, r3, #24
 800dac8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dacc:	4931      	ldr	r1, [pc, #196]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800dace:	4313      	orrs	r3, r2
 800dad0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dad2:	4b30      	ldr	r3, [pc, #192]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800dad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	695b      	ldr	r3, [r3, #20]
 800dade:	492d      	ldr	r1, [pc, #180]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800dae0:	4313      	orrs	r3, r2
 800dae2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dae4:	4b2b      	ldr	r3, [pc, #172]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800dae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae8:	f023 0220 	bic.w	r2, r3, #32
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	699b      	ldr	r3, [r3, #24]
 800daf0:	4928      	ldr	r1, [pc, #160]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800daf2:	4313      	orrs	r3, r2
 800daf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800daf6:	4b27      	ldr	r3, [pc, #156]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800daf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafa:	4a26      	ldr	r2, [pc, #152]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800dafc:	f023 0310 	bic.w	r3, r3, #16
 800db00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800db02:	4b24      	ldr	r3, [pc, #144]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db06:	4b24      	ldr	r3, [pc, #144]	; (800db98 <RCCEx_PLL2_Config+0x160>)
 800db08:	4013      	ands	r3, r2
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	69d2      	ldr	r2, [r2, #28]
 800db0e:	00d2      	lsls	r2, r2, #3
 800db10:	4920      	ldr	r1, [pc, #128]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db12:	4313      	orrs	r3, r2
 800db14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800db16:	4b1f      	ldr	r3, [pc, #124]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db1a:	4a1e      	ldr	r2, [pc, #120]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db1c:	f043 0310 	orr.w	r3, r3, #16
 800db20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d106      	bne.n	800db36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800db28:	4b1a      	ldr	r3, [pc, #104]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2c:	4a19      	ldr	r2, [pc, #100]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800db34:	e00f      	b.n	800db56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d106      	bne.n	800db4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800db3c:	4b15      	ldr	r3, [pc, #84]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db40:	4a14      	ldr	r2, [pc, #80]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800db48:	e005      	b.n	800db56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800db4a:	4b12      	ldr	r3, [pc, #72]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4e:	4a11      	ldr	r2, [pc, #68]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800db54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800db56:	4b0f      	ldr	r3, [pc, #60]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a0e      	ldr	r2, [pc, #56]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800db60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db62:	f7f6 fc0f 	bl	8004384 <HAL_GetTick>
 800db66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800db68:	e008      	b.n	800db7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db6a:	f7f6 fc0b 	bl	8004384 <HAL_GetTick>
 800db6e:	4602      	mov	r2, r0
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	2b02      	cmp	r3, #2
 800db76:	d901      	bls.n	800db7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800db78:	2303      	movs	r3, #3
 800db7a:	e006      	b.n	800db8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800db7c:	4b05      	ldr	r3, [pc, #20]	; (800db94 <RCCEx_PLL2_Config+0x15c>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db84:	2b00      	cmp	r3, #0
 800db86:	d0f0      	beq.n	800db6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800db88:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	58024400 	.word	0x58024400
 800db98:	ffff0007 	.word	0xffff0007

0800db9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dbaa:	4b53      	ldr	r3, [pc, #332]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbae:	f003 0303 	and.w	r3, r3, #3
 800dbb2:	2b03      	cmp	r3, #3
 800dbb4:	d101      	bne.n	800dbba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e099      	b.n	800dcee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dbba:	4b4f      	ldr	r3, [pc, #316]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a4e      	ldr	r2, [pc, #312]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dbc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbc6:	f7f6 fbdd 	bl	8004384 <HAL_GetTick>
 800dbca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dbcc:	e008      	b.n	800dbe0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dbce:	f7f6 fbd9 	bl	8004384 <HAL_GetTick>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d901      	bls.n	800dbe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dbdc:	2303      	movs	r3, #3
 800dbde:	e086      	b.n	800dcee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dbe0:	4b45      	ldr	r3, [pc, #276]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f0      	bne.n	800dbce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dbec:	4b42      	ldr	r3, [pc, #264]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	051b      	lsls	r3, r3, #20
 800dbfa:	493f      	ldr	r1, [pc, #252]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	628b      	str	r3, [r1, #40]	; 0x28
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	3b01      	subs	r3, #1
 800dc06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	025b      	lsls	r3, r3, #9
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	431a      	orrs	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	041b      	lsls	r3, r3, #16
 800dc1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dc22:	431a      	orrs	r2, r3
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	691b      	ldr	r3, [r3, #16]
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	061b      	lsls	r3, r3, #24
 800dc2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dc30:	4931      	ldr	r1, [pc, #196]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc32:	4313      	orrs	r3, r2
 800dc34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dc36:	4b30      	ldr	r3, [pc, #192]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	492d      	ldr	r1, [pc, #180]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc44:	4313      	orrs	r3, r2
 800dc46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dc48:	4b2b      	ldr	r3, [pc, #172]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	699b      	ldr	r3, [r3, #24]
 800dc54:	4928      	ldr	r1, [pc, #160]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc56:	4313      	orrs	r3, r2
 800dc58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dc5a:	4b27      	ldr	r3, [pc, #156]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5e:	4a26      	ldr	r2, [pc, #152]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dc66:	4b24      	ldr	r3, [pc, #144]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc6a:	4b24      	ldr	r3, [pc, #144]	; (800dcfc <RCCEx_PLL3_Config+0x160>)
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	69d2      	ldr	r2, [r2, #28]
 800dc72:	00d2      	lsls	r2, r2, #3
 800dc74:	4920      	ldr	r1, [pc, #128]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc76:	4313      	orrs	r3, r2
 800dc78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dc7a:	4b1f      	ldr	r3, [pc, #124]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7e:	4a1e      	ldr	r2, [pc, #120]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d106      	bne.n	800dc9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dc8c:	4b1a      	ldr	r3, [pc, #104]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc90:	4a19      	ldr	r2, [pc, #100]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dc92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dc96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc98:	e00f      	b.n	800dcba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d106      	bne.n	800dcae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dca0:	4b15      	ldr	r3, [pc, #84]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca4:	4a14      	ldr	r2, [pc, #80]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dca6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dcaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dcac:	e005      	b.n	800dcba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dcae:	4b12      	ldr	r3, [pc, #72]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dcb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb2:	4a11      	ldr	r2, [pc, #68]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dcb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dcb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dcba:	4b0f      	ldr	r3, [pc, #60]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a0e      	ldr	r2, [pc, #56]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dcc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcc6:	f7f6 fb5d 	bl	8004384 <HAL_GetTick>
 800dcca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dccc:	e008      	b.n	800dce0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dcce:	f7f6 fb59 	bl	8004384 <HAL_GetTick>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	1ad3      	subs	r3, r2, r3
 800dcd8:	2b02      	cmp	r3, #2
 800dcda:	d901      	bls.n	800dce0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dcdc:	2303      	movs	r3, #3
 800dcde:	e006      	b.n	800dcee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dce0:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <RCCEx_PLL3_Config+0x15c>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d0f0      	beq.n	800dcce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	58024400 	.word	0x58024400
 800dcfc:	ffff0007 	.word	0xffff0007

0800dd00 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d071      	beq.n	800ddf6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d106      	bne.n	800dd2c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7f4 fdf0 	bl	800290c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2202      	movs	r2, #2
 800dd30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	f003 0310 	and.w	r3, r3, #16
 800dd3e:	2b10      	cmp	r3, #16
 800dd40:	d050      	beq.n	800dde4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	22ca      	movs	r2, #202	; 0xca
 800dd48:	625a      	str	r2, [r3, #36]	; 0x24
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2253      	movs	r2, #83	; 0x53
 800dd50:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 fa4a 	bl	800e1ec <RTC_EnterInitMode>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800dd5c:	7bfb      	ldrb	r3, [r7, #15]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d124      	bne.n	800ddac <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6899      	ldr	r1, [r3, #8]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	4b24      	ldr	r3, [pc, #144]	; (800de00 <HAL_RTC_Init+0x100>)
 800dd6e:	400b      	ands	r3, r1
 800dd70:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6899      	ldr	r1, [r3, #8]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	691b      	ldr	r3, [r3, #16]
 800dd80:	431a      	orrs	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	431a      	orrs	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	430a      	orrs	r2, r1
 800dd8e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	0419      	lsls	r1, r3, #16
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	68da      	ldr	r2, [r3, #12]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	430a      	orrs	r2, r1
 800dda0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 fa56 	bl	800e254 <RTC_ExitInitMode>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800ddac:	7bfb      	ldrb	r3, [r7, #15]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d113      	bne.n	800ddda <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f022 0203 	bic.w	r2, r2, #3
 800ddc0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	69da      	ldr	r2, [r3, #28]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	695b      	ldr	r3, [r3, #20]
 800ddd0:	431a      	orrs	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	430a      	orrs	r2, r1
 800ddd8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	22ff      	movs	r2, #255	; 0xff
 800dde0:	625a      	str	r2, [r3, #36]	; 0x24
 800dde2:	e001      	b.n	800dde8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dde4:	2300      	movs	r3, #0
 800dde6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d103      	bne.n	800ddf6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800ddf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3710      	adds	r7, #16
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	ff8fffbf 	.word	0xff8fffbf

0800de04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800de04:	b590      	push	{r4, r7, lr}
 800de06:	b087      	sub	sp, #28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de16:	2b01      	cmp	r3, #1
 800de18:	d101      	bne.n	800de1e <HAL_RTC_SetTime+0x1a>
 800de1a:	2302      	movs	r3, #2
 800de1c:	e089      	b.n	800df32 <HAL_RTC_SetTime+0x12e>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2201      	movs	r2, #1
 800de22:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2202      	movs	r2, #2
 800de2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	22ca      	movs	r2, #202	; 0xca
 800de34:	625a      	str	r2, [r3, #36]	; 0x24
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2253      	movs	r2, #83	; 0x53
 800de3c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800de3e:	68f8      	ldr	r0, [r7, #12]
 800de40:	f000 f9d4 	bl	800e1ec <RTC_EnterInitMode>
 800de44:	4603      	mov	r3, r0
 800de46:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800de48:	7cfb      	ldrb	r3, [r7, #19]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d161      	bne.n	800df12 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d126      	bne.n	800dea2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d102      	bne.n	800de68 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	2200      	movs	r2, #0
 800de66:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	4618      	mov	r0, r3
 800de6e:	f000 fa2f 	bl	800e2d0 <RTC_ByteToBcd2>
 800de72:	4603      	mov	r3, r0
 800de74:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	785b      	ldrb	r3, [r3, #1]
 800de7a:	4618      	mov	r0, r3
 800de7c:	f000 fa28 	bl	800e2d0 <RTC_ByteToBcd2>
 800de80:	4603      	mov	r3, r0
 800de82:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800de84:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	789b      	ldrb	r3, [r3, #2]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 fa20 	bl	800e2d0 <RTC_ByteToBcd2>
 800de90:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800de92:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	78db      	ldrb	r3, [r3, #3]
 800de9a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800de9c:	4313      	orrs	r3, r2
 800de9e:	617b      	str	r3, [r7, #20]
 800dea0:	e018      	b.n	800ded4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deac:	2b00      	cmp	r3, #0
 800deae:	d102      	bne.n	800deb6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	2200      	movs	r2, #0
 800deb4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	785b      	ldrb	r3, [r3, #1]
 800dec0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dec2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dec4:	68ba      	ldr	r2, [r7, #8]
 800dec6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dec8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	78db      	ldrb	r3, [r3, #3]
 800dece:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ded0:	4313      	orrs	r3, r2
 800ded2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	6979      	ldr	r1, [r7, #20]
 800deda:	4b18      	ldr	r3, [pc, #96]	; (800df3c <HAL_RTC_SetTime+0x138>)
 800dedc:	400b      	ands	r3, r1
 800dede:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	689a      	ldr	r2, [r3, #8]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800deee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	6899      	ldr	r1, [r3, #8]
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	68da      	ldr	r2, [r3, #12]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	431a      	orrs	r2, r3
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	430a      	orrs	r2, r1
 800df06:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f000 f9a3 	bl	800e254 <RTC_ExitInitMode>
 800df0e:	4603      	mov	r3, r0
 800df10:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	22ff      	movs	r2, #255	; 0xff
 800df18:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800df1a:	7cfb      	ldrb	r3, [r7, #19]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d103      	bne.n	800df28 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2201      	movs	r2, #1
 800df24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2200      	movs	r2, #0
 800df2c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800df30:	7cfb      	ldrb	r3, [r7, #19]
}
 800df32:	4618      	mov	r0, r3
 800df34:	371c      	adds	r7, #28
 800df36:	46bd      	mov	sp, r7
 800df38:	bd90      	pop	{r4, r7, pc}
 800df3a:	bf00      	nop
 800df3c:	007f7f7f 	.word	0x007f7f7f

0800df40 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b086      	sub	sp, #24
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	4b22      	ldr	r3, [pc, #136]	; (800dff4 <HAL_RTC_GetTime+0xb4>)
 800df6c:	4013      	ands	r3, r2
 800df6e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	0c1b      	lsrs	r3, r3, #16
 800df74:	b2db      	uxtb	r3, r3
 800df76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	0a1b      	lsrs	r3, r3, #8
 800df84:	b2db      	uxtb	r3, r3
 800df86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df8a:	b2da      	uxtb	r2, r3
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	b2db      	uxtb	r3, r3
 800df94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	0d9b      	lsrs	r3, r3, #22
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	f003 0301 	and.w	r3, r3, #1
 800dfa8:	b2da      	uxtb	r2, r3
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d11a      	bne.n	800dfea <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f000 f9a9 	bl	800e310 <RTC_Bcd2ToByte>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	785b      	ldrb	r3, [r3, #1]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f000 f9a0 	bl	800e310 <RTC_Bcd2ToByte>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	789b      	ldrb	r3, [r3, #2]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f000 f997 	bl	800e310 <RTC_Bcd2ToByte>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dfea:	2300      	movs	r3, #0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3718      	adds	r7, #24
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	007f7f7f 	.word	0x007f7f7f

0800dff8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dff8:	b590      	push	{r4, r7, lr}
 800dffa:	b087      	sub	sp, #28
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d101      	bne.n	800e012 <HAL_RTC_SetDate+0x1a>
 800e00e:	2302      	movs	r3, #2
 800e010:	e073      	b.n	800e0fa <HAL_RTC_SetDate+0x102>
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2201      	movs	r2, #1
 800e016:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2202      	movs	r2, #2
 800e01e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10e      	bne.n	800e046 <HAL_RTC_SetDate+0x4e>
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	785b      	ldrb	r3, [r3, #1]
 800e02c:	f003 0310 	and.w	r3, r3, #16
 800e030:	2b00      	cmp	r3, #0
 800e032:	d008      	beq.n	800e046 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	785b      	ldrb	r3, [r3, #1]
 800e038:	f023 0310 	bic.w	r3, r3, #16
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	330a      	adds	r3, #10
 800e040:	b2da      	uxtb	r2, r3
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d11c      	bne.n	800e086 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	78db      	ldrb	r3, [r3, #3]
 800e050:	4618      	mov	r0, r3
 800e052:	f000 f93d 	bl	800e2d0 <RTC_ByteToBcd2>
 800e056:	4603      	mov	r3, r0
 800e058:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	785b      	ldrb	r3, [r3, #1]
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 f936 	bl	800e2d0 <RTC_ByteToBcd2>
 800e064:	4603      	mov	r3, r0
 800e066:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e068:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	789b      	ldrb	r3, [r3, #2]
 800e06e:	4618      	mov	r0, r3
 800e070:	f000 f92e 	bl	800e2d0 <RTC_ByteToBcd2>
 800e074:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e076:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e080:	4313      	orrs	r3, r2
 800e082:	617b      	str	r3, [r7, #20]
 800e084:	e00e      	b.n	800e0a4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	78db      	ldrb	r3, [r3, #3]
 800e08a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	785b      	ldrb	r3, [r3, #1]
 800e090:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e092:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800e094:	68ba      	ldr	r2, [r7, #8]
 800e096:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800e098:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	22ca      	movs	r2, #202	; 0xca
 800e0aa:	625a      	str	r2, [r3, #36]	; 0x24
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2253      	movs	r2, #83	; 0x53
 800e0b2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f000 f899 	bl	800e1ec <RTC_EnterInitMode>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e0be:	7cfb      	ldrb	r3, [r7, #19]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10a      	bne.n	800e0da <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	6979      	ldr	r1, [r7, #20]
 800e0ca:	4b0e      	ldr	r3, [pc, #56]	; (800e104 <HAL_RTC_SetDate+0x10c>)
 800e0cc:	400b      	ands	r3, r1
 800e0ce:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f000 f8bf 	bl	800e254 <RTC_ExitInitMode>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	22ff      	movs	r2, #255	; 0xff
 800e0e0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800e0e2:	7cfb      	ldrb	r3, [r7, #19]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d103      	bne.n	800e0f0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e0f8:	7cfb      	ldrb	r3, [r7, #19]


}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	371c      	adds	r7, #28
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd90      	pop	{r4, r7, pc}
 800e102:	bf00      	nop
 800e104:	00ffff3f 	.word	0x00ffff3f

0800e108 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	685a      	ldr	r2, [r3, #4]
 800e11a:	4b21      	ldr	r3, [pc, #132]	; (800e1a0 <HAL_RTC_GetDate+0x98>)
 800e11c:	4013      	ands	r3, r2
 800e11e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	0c1b      	lsrs	r3, r3, #16
 800e124:	b2da      	uxtb	r2, r3
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	0a1b      	lsrs	r3, r3, #8
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	f003 031f 	and.w	r3, r3, #31
 800e134:	b2da      	uxtb	r2, r3
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e142:	b2da      	uxtb	r2, r3
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	0b5b      	lsrs	r3, r3, #13
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	f003 0307 	and.w	r3, r3, #7
 800e152:	b2da      	uxtb	r2, r3
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d11a      	bne.n	800e194 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	78db      	ldrb	r3, [r3, #3]
 800e162:	4618      	mov	r0, r3
 800e164:	f000 f8d4 	bl	800e310 <RTC_Bcd2ToByte>
 800e168:	4603      	mov	r3, r0
 800e16a:	461a      	mov	r2, r3
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	785b      	ldrb	r3, [r3, #1]
 800e174:	4618      	mov	r0, r3
 800e176:	f000 f8cb 	bl	800e310 <RTC_Bcd2ToByte>
 800e17a:	4603      	mov	r3, r0
 800e17c:	461a      	mov	r2, r3
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	789b      	ldrb	r3, [r3, #2]
 800e186:	4618      	mov	r0, r3
 800e188:	f000 f8c2 	bl	800e310 <RTC_Bcd2ToByte>
 800e18c:	4603      	mov	r3, r0
 800e18e:	461a      	mov	r2, r3
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	00ffff3f 	.word	0x00ffff3f

0800e1a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a0d      	ldr	r2, [pc, #52]	; (800e1e8 <HAL_RTC_WaitForSynchro+0x44>)
 800e1b2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800e1b4:	f7f6 f8e6 	bl	8004384 <HAL_GetTick>
 800e1b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e1ba:	e009      	b.n	800e1d0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e1bc:	f7f6 f8e2 	bl	8004384 <HAL_GetTick>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	1ad3      	subs	r3, r2, r3
 800e1c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1ca:	d901      	bls.n	800e1d0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e007      	b.n	800e1e0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d0ee      	beq.n	800e1bc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3710      	adds	r7, #16
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	0003ff5f 	.word	0x0003ff5f

0800e1ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e202:	2b00      	cmp	r3, #0
 800e204:	d120      	bne.n	800e248 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e20e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e210:	f7f6 f8b8 	bl	8004384 <HAL_GetTick>
 800e214:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e216:	e00d      	b.n	800e234 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e218:	f7f6 f8b4 	bl	8004384 <HAL_GetTick>
 800e21c:	4602      	mov	r2, r0
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e226:	d905      	bls.n	800e234 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e228:	2303      	movs	r3, #3
 800e22a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2203      	movs	r2, #3
 800e230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d102      	bne.n	800e248 <RTC_EnterInitMode+0x5c>
 800e242:	7bfb      	ldrb	r3, [r7, #15]
 800e244:	2b03      	cmp	r3, #3
 800e246:	d1e7      	bne.n	800e218 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800e248:	7bfb      	ldrb	r3, [r7, #15]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
	...

0800e254 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e25c:	2300      	movs	r3, #0
 800e25e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e260:	4b1a      	ldr	r3, [pc, #104]	; (800e2cc <RTC_ExitInitMode+0x78>)
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	4a19      	ldr	r2, [pc, #100]	; (800e2cc <RTC_ExitInitMode+0x78>)
 800e266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e26a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e26c:	4b17      	ldr	r3, [pc, #92]	; (800e2cc <RTC_ExitInitMode+0x78>)
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	f003 0320 	and.w	r3, r3, #32
 800e274:	2b00      	cmp	r3, #0
 800e276:	d10c      	bne.n	800e292 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7ff ff93 	bl	800e1a4 <HAL_RTC_WaitForSynchro>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d01e      	beq.n	800e2c2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2203      	movs	r2, #3
 800e288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e28c:	2303      	movs	r3, #3
 800e28e:	73fb      	strb	r3, [r7, #15]
 800e290:	e017      	b.n	800e2c2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e292:	4b0e      	ldr	r3, [pc, #56]	; (800e2cc <RTC_ExitInitMode+0x78>)
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	4a0d      	ldr	r2, [pc, #52]	; (800e2cc <RTC_ExitInitMode+0x78>)
 800e298:	f023 0320 	bic.w	r3, r3, #32
 800e29c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7ff ff80 	bl	800e1a4 <HAL_RTC_WaitForSynchro>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d005      	beq.n	800e2b6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2203      	movs	r2, #3
 800e2ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e2b2:	2303      	movs	r3, #3
 800e2b4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e2b6:	4b05      	ldr	r3, [pc, #20]	; (800e2cc <RTC_ExitInitMode+0x78>)
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	4a04      	ldr	r2, [pc, #16]	; (800e2cc <RTC_ExitInitMode+0x78>)
 800e2bc:	f043 0320 	orr.w	r3, r3, #32
 800e2c0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3710      	adds	r7, #16
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	58004000 	.word	0x58004000

0800e2d0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e2e2:	e005      	b.n	800e2f0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e2ea:	7afb      	ldrb	r3, [r7, #11]
 800e2ec:	3b0a      	subs	r3, #10
 800e2ee:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e2f0:	7afb      	ldrb	r3, [r7, #11]
 800e2f2:	2b09      	cmp	r3, #9
 800e2f4:	d8f6      	bhi.n	800e2e4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	011b      	lsls	r3, r3, #4
 800e2fc:	b2da      	uxtb	r2, r3
 800e2fe:	7afb      	ldrb	r3, [r7, #11]
 800e300:	4313      	orrs	r3, r2
 800e302:	b2db      	uxtb	r3, r3
}
 800e304:	4618      	mov	r0, r3
 800e306:	3714      	adds	r7, #20
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	4603      	mov	r3, r0
 800e318:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e31a:	79fb      	ldrb	r3, [r7, #7]
 800e31c:	091b      	lsrs	r3, r3, #4
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	461a      	mov	r2, r3
 800e322:	0092      	lsls	r2, r2, #2
 800e324:	4413      	add	r3, r2
 800e326:	005b      	lsls	r3, r3, #1
 800e328:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e32a:	79fb      	ldrb	r3, [r7, #7]
 800e32c:	f003 030f 	and.w	r3, r3, #15
 800e330:	b2da      	uxtb	r2, r3
 800e332:	7bfb      	ldrb	r3, [r7, #15]
 800e334:	4413      	add	r3, r2
 800e336:	b2db      	uxtb	r3, r3
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3714      	adds	r7, #20
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d101      	bne.n	800e356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e352:	2301      	movs	r3, #1
 800e354:	e10f      	b.n	800e576 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a87      	ldr	r2, [pc, #540]	; (800e580 <HAL_SPI_Init+0x23c>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d00f      	beq.n	800e386 <HAL_SPI_Init+0x42>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4a86      	ldr	r2, [pc, #536]	; (800e584 <HAL_SPI_Init+0x240>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d00a      	beq.n	800e386 <HAL_SPI_Init+0x42>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4a84      	ldr	r2, [pc, #528]	; (800e588 <HAL_SPI_Init+0x244>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d005      	beq.n	800e386 <HAL_SPI_Init+0x42>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	2b0f      	cmp	r3, #15
 800e380:	d901      	bls.n	800e386 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e382:	2301      	movs	r3, #1
 800e384:	e0f7      	b.n	800e576 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 fc12 	bl	800ebb0 <SPI_GetPacketSize>
 800e38c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4a7b      	ldr	r2, [pc, #492]	; (800e580 <HAL_SPI_Init+0x23c>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d00c      	beq.n	800e3b2 <HAL_SPI_Init+0x6e>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a79      	ldr	r2, [pc, #484]	; (800e584 <HAL_SPI_Init+0x240>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d007      	beq.n	800e3b2 <HAL_SPI_Init+0x6e>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4a78      	ldr	r2, [pc, #480]	; (800e588 <HAL_SPI_Init+0x244>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d002      	beq.n	800e3b2 <HAL_SPI_Init+0x6e>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2b08      	cmp	r3, #8
 800e3b0:	d811      	bhi.n	800e3d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e3b6:	4a72      	ldr	r2, [pc, #456]	; (800e580 <HAL_SPI_Init+0x23c>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d009      	beq.n	800e3d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a70      	ldr	r2, [pc, #448]	; (800e584 <HAL_SPI_Init+0x240>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d004      	beq.n	800e3d0 <HAL_SPI_Init+0x8c>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4a6f      	ldr	r2, [pc, #444]	; (800e588 <HAL_SPI_Init+0x244>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d104      	bne.n	800e3da <HAL_SPI_Init+0x96>
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2b10      	cmp	r3, #16
 800e3d4:	d901      	bls.n	800e3da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	e0cd      	b.n	800e576 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7f4 fcf8 	bl	8002de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2202      	movs	r2, #2
 800e3f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f022 0201 	bic.w	r2, r2, #1
 800e40a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e416:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	699b      	ldr	r3, [r3, #24]
 800e41c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e420:	d119      	bne.n	800e456 <HAL_SPI_Init+0x112>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e42a:	d103      	bne.n	800e434 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e430:	2b00      	cmp	r3, #0
 800e432:	d008      	beq.n	800e446 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10c      	bne.n	800e456 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e444:	d107      	bne.n	800e456 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e454:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00f      	beq.n	800e482 <HAL_SPI_Init+0x13e>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	2b06      	cmp	r3, #6
 800e468:	d90b      	bls.n	800e482 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	430a      	orrs	r2, r1
 800e47e:	601a      	str	r2, [r3, #0]
 800e480:	e007      	b.n	800e492 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e490:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	69da      	ldr	r2, [r3, #28]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e49a:	431a      	orrs	r2, r3
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	431a      	orrs	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4a4:	ea42 0103 	orr.w	r1, r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	68da      	ldr	r2, [r3, #12]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	430a      	orrs	r2, r1
 800e4b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4bc:	431a      	orrs	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4c2:	431a      	orrs	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	699b      	ldr	r3, [r3, #24]
 800e4c8:	431a      	orrs	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	691b      	ldr	r3, [r3, #16]
 800e4ce:	431a      	orrs	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	695b      	ldr	r3, [r3, #20]
 800e4d4:	431a      	orrs	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6a1b      	ldr	r3, [r3, #32]
 800e4da:	431a      	orrs	r2, r3
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	431a      	orrs	r2, r3
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4e6:	431a      	orrs	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	431a      	orrs	r2, r3
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4f2:	ea42 0103 	orr.w	r1, r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	430a      	orrs	r2, r1
 800e500:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d113      	bne.n	800e532 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e51c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	689b      	ldr	r3, [r3, #8]
 800e524:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e530:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f022 0201 	bic.w	r2, r2, #1
 800e540:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00a      	beq.n	800e564 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	430a      	orrs	r2, r1
 800e562:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2201      	movs	r2, #1
 800e570:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e574:	2300      	movs	r3, #0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	40013000 	.word	0x40013000
 800e584:	40003800 	.word	0x40003800
 800e588:	40003c00 	.word	0x40003c00

0800e58c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b088      	sub	sp, #32
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	603b      	str	r3, [r7, #0]
 800e598:	4613      	mov	r3, r2
 800e59a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a0:	095b      	lsrs	r3, r3, #5
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	3330      	adds	r3, #48	; 0x30
 800e5ae:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e5b0:	f7f5 fee8 	bl	8004384 <HAL_GetTick>
 800e5b4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d001      	beq.n	800e5c6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e5c2:	2302      	movs	r3, #2
 800e5c4:	e250      	b.n	800ea68 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <HAL_SPI_Receive+0x46>
 800e5cc:	88fb      	ldrh	r3, [r7, #6]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d101      	bne.n	800e5d6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e248      	b.n	800ea68 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d101      	bne.n	800e5e4 <HAL_SPI_Receive+0x58>
 800e5e0:	2302      	movs	r3, #2
 800e5e2:	e241      	b.n	800ea68 <HAL_SPI_Receive+0x4dc>
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2204      	movs	r2, #4
 800e5f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	68ba      	ldr	r2, [r7, #8]
 800e600:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	88fa      	ldrh	r2, [r7, #6]
 800e606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	88fa      	ldrh	r2, [r7, #6]
 800e60e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2200      	movs	r2, #0
 800e616:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2200      	movs	r2, #0
 800e61c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2200      	movs	r2, #0
 800e624:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2200      	movs	r2, #0
 800e632:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e63c:	d108      	bne.n	800e650 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e64c:	601a      	str	r2, [r3, #0]
 800e64e:	e009      	b.n	800e664 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e662:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	685a      	ldr	r2, [r3, #4]
 800e66a:	4b95      	ldr	r3, [pc, #596]	; (800e8c0 <HAL_SPI_Receive+0x334>)
 800e66c:	4013      	ands	r3, r2
 800e66e:	88f9      	ldrh	r1, [r7, #6]
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	6812      	ldr	r2, [r2, #0]
 800e674:	430b      	orrs	r3, r1
 800e676:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f042 0201 	orr.w	r2, r2, #1
 800e686:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e690:	d107      	bne.n	800e6a2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e6a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	2b0f      	cmp	r3, #15
 800e6a8:	d96c      	bls.n	800e784 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e6aa:	e064      	b.n	800e776 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	695b      	ldr	r3, [r3, #20]
 800e6b2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	f003 0301 	and.w	r3, r3, #1
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d114      	bne.n	800e6ec <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e6cc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6d2:	1d1a      	adds	r2, r3, #4
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6ea:	e044      	b.n	800e776 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	8bfa      	ldrh	r2, [r7, #30]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d919      	bls.n	800e72e <HAL_SPI_Receive+0x1a2>
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e700:	2b00      	cmp	r3, #0
 800e702:	d014      	beq.n	800e72e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e70c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e70e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e714:	1d1a      	adds	r2, r3, #4
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e720:	b29b      	uxth	r3, r3
 800e722:	3b01      	subs	r3, #1
 800e724:	b29a      	uxth	r2, r3
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e72c:	e023      	b.n	800e776 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e72e:	f7f5 fe29 	bl	8004384 <HAL_GetTick>
 800e732:	4602      	mov	r2, r0
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	683a      	ldr	r2, [r7, #0]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d803      	bhi.n	800e746 <HAL_SPI_Receive+0x1ba>
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e744:	d102      	bne.n	800e74c <HAL_SPI_Receive+0x1c0>
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d114      	bne.n	800e776 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f000 f98f 	bl	800ea70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e758:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2201      	movs	r2, #1
 800e766:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2200      	movs	r2, #0
 800e76e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e772:	2303      	movs	r3, #3
 800e774:	e178      	b.n	800ea68 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d194      	bne.n	800e6ac <HAL_SPI_Receive+0x120>
 800e782:	e15e      	b.n	800ea42 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	2b07      	cmp	r3, #7
 800e78a:	f240 8153 	bls.w	800ea34 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e78e:	e08f      	b.n	800e8b0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	695b      	ldr	r3, [r3, #20]
 800e796:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	695b      	ldr	r3, [r3, #20]
 800e79e:	f003 0301 	and.w	r3, r3, #1
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d114      	bne.n	800e7d0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7aa:	69ba      	ldr	r2, [r7, #24]
 800e7ac:	8812      	ldrh	r2, [r2, #0]
 800e7ae:	b292      	uxth	r2, r2
 800e7b0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7b6:	1c9a      	adds	r2, r3, #2
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7ce:	e06f      	b.n	800e8b0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	8bfa      	ldrh	r2, [r7, #30]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d924      	bls.n	800e828 <HAL_SPI_Receive+0x29c>
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d01f      	beq.n	800e828 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ec:	69ba      	ldr	r2, [r7, #24]
 800e7ee:	8812      	ldrh	r2, [r2, #0]
 800e7f0:	b292      	uxth	r2, r2
 800e7f2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7f8:	1c9a      	adds	r2, r3, #2
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e802:	69ba      	ldr	r2, [r7, #24]
 800e804:	8812      	ldrh	r2, [r2, #0]
 800e806:	b292      	uxth	r2, r2
 800e808:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e80e:	1c9a      	adds	r2, r3, #2
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	3b02      	subs	r3, #2
 800e81e:	b29a      	uxth	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e826:	e043      	b.n	800e8b0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e82e:	b29b      	uxth	r3, r3
 800e830:	2b01      	cmp	r3, #1
 800e832:	d119      	bne.n	800e868 <HAL_SPI_Receive+0x2dc>
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d014      	beq.n	800e868 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e842:	69ba      	ldr	r2, [r7, #24]
 800e844:	8812      	ldrh	r2, [r2, #0]
 800e846:	b292      	uxth	r2, r2
 800e848:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e84e:	1c9a      	adds	r2, r3, #2
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	3b01      	subs	r3, #1
 800e85e:	b29a      	uxth	r2, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e866:	e023      	b.n	800e8b0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e868:	f7f5 fd8c 	bl	8004384 <HAL_GetTick>
 800e86c:	4602      	mov	r2, r0
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	1ad3      	subs	r3, r2, r3
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	429a      	cmp	r2, r3
 800e876:	d803      	bhi.n	800e880 <HAL_SPI_Receive+0x2f4>
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e87e:	d102      	bne.n	800e886 <HAL_SPI_Receive+0x2fa>
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d114      	bne.n	800e8b0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f000 f8f2 	bl	800ea70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e892:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e8ac:	2303      	movs	r3, #3
 800e8ae:	e0db      	b.n	800ea68 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f47f af69 	bne.w	800e790 <HAL_SPI_Receive+0x204>
 800e8be:	e0c0      	b.n	800ea42 <HAL_SPI_Receive+0x4b6>
 800e8c0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	695b      	ldr	r3, [r3, #20]
 800e8ca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	695b      	ldr	r3, [r3, #20]
 800e8d2:	f003 0301 	and.w	r3, r3, #1
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d117      	bne.n	800e90a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8e6:	7812      	ldrb	r2, [r2, #0]
 800e8e8:	b2d2      	uxtb	r2, r2
 800e8ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8f0:	1c5a      	adds	r2, r3, #1
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	3b01      	subs	r3, #1
 800e900:	b29a      	uxth	r2, r3
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e908:	e094      	b.n	800ea34 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e910:	b29b      	uxth	r3, r3
 800e912:	8bfa      	ldrh	r2, [r7, #30]
 800e914:	429a      	cmp	r2, r3
 800e916:	d946      	bls.n	800e9a6 <HAL_SPI_Receive+0x41a>
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d041      	beq.n	800e9a6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e92e:	7812      	ldrb	r2, [r2, #0]
 800e930:	b2d2      	uxtb	r2, r2
 800e932:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e94a:	7812      	ldrb	r2, [r2, #0]
 800e94c:	b2d2      	uxtb	r2, r2
 800e94e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e954:	1c5a      	adds	r2, r3, #1
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e966:	7812      	ldrb	r2, [r2, #0]
 800e968:	b2d2      	uxtb	r2, r2
 800e96a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e970:	1c5a      	adds	r2, r3, #1
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e982:	7812      	ldrb	r2, [r2, #0]
 800e984:	b2d2      	uxtb	r2, r2
 800e986:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e98c:	1c5a      	adds	r2, r3, #1
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e998:	b29b      	uxth	r3, r3
 800e99a:	3b04      	subs	r3, #4
 800e99c:	b29a      	uxth	r2, r3
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e9a4:	e046      	b.n	800ea34 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	2b03      	cmp	r3, #3
 800e9b0:	d81c      	bhi.n	800e9ec <HAL_SPI_Receive+0x460>
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d017      	beq.n	800e9ec <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9c8:	7812      	ldrb	r2, [r2, #0]
 800e9ca:	b2d2      	uxtb	r2, r2
 800e9cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9d2:	1c5a      	adds	r2, r3, #1
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e9ea:	e023      	b.n	800ea34 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9ec:	f7f5 fcca 	bl	8004384 <HAL_GetTick>
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	1ad3      	subs	r3, r2, r3
 800e9f6:	683a      	ldr	r2, [r7, #0]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d803      	bhi.n	800ea04 <HAL_SPI_Receive+0x478>
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea02:	d102      	bne.n	800ea0a <HAL_SPI_Receive+0x47e>
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d114      	bne.n	800ea34 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	f000 f830 	bl	800ea70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2201      	movs	r2, #1
 800ea24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ea30:	2303      	movs	r3, #3
 800ea32:	e019      	b.n	800ea68 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f47f af41 	bne.w	800e8c4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ea42:	68f8      	ldr	r0, [r7, #12]
 800ea44:	f000 f814 	bl	800ea70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800ea62:	2301      	movs	r3, #1
 800ea64:	e000      	b.n	800ea68 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800ea66:	2300      	movs	r3, #0
  }
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3720      	adds	r7, #32
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b085      	sub	sp, #20
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	695b      	ldr	r3, [r3, #20]
 800ea7e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	699a      	ldr	r2, [r3, #24]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f042 0208 	orr.w	r2, r2, #8
 800ea8e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	699a      	ldr	r2, [r3, #24]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f042 0210 	orr.w	r2, r2, #16
 800ea9e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f022 0201 	bic.w	r2, r2, #1
 800eaae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	6919      	ldr	r1, [r3, #16]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	4b3c      	ldr	r3, [pc, #240]	; (800ebac <SPI_CloseTransfer+0x13c>)
 800eabc:	400b      	ands	r3, r1
 800eabe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	689a      	ldr	r2, [r3, #8]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800eace:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	2b04      	cmp	r3, #4
 800eada:	d014      	beq.n	800eb06 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f003 0320 	and.w	r3, r3, #32
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d00f      	beq.n	800eb06 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	699a      	ldr	r2, [r3, #24]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f042 0220 	orr.w	r2, r2, #32
 800eb04:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	2b03      	cmp	r3, #3
 800eb10:	d014      	beq.n	800eb3c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00f      	beq.n	800eb3c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb22:	f043 0204 	orr.w	r2, r3, #4
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	699a      	ldr	r2, [r3, #24]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb3a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00f      	beq.n	800eb66 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb4c:	f043 0201 	orr.w	r2, r3, #1
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	699a      	ldr	r2, [r3, #24]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb64:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00f      	beq.n	800eb90 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb76:	f043 0208 	orr.w	r2, r3, #8
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	699a      	ldr	r2, [r3, #24]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb8e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800eba0:	bf00      	nop
 800eba2:	3714      	adds	r7, #20
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr
 800ebac:	fffffc90 	.word	0xfffffc90

0800ebb0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebbc:	095b      	lsrs	r3, r3, #5
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	3307      	adds	r3, #7
 800ebce:	08db      	lsrs	r3, r3, #3
 800ebd0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	fb02 f303 	mul.w	r3, r2, r3
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3714      	adds	r7, #20
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr

0800ebe6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b082      	sub	sp, #8
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d101      	bne.n	800ebf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	e049      	b.n	800ec8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7f4 fd87 	bl	8003720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2202      	movs	r2, #2
 800ec16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	3304      	adds	r3, #4
 800ec22:	4619      	mov	r1, r3
 800ec24:	4610      	mov	r0, r2
 800ec26:	f000 fe7d 	bl	800f924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2201      	movs	r2, #1
 800ec46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2201      	movs	r2, #1
 800ec56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2201      	movs	r2, #1
 800ec66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2201      	movs	r2, #1
 800ec86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec8a:	2300      	movs	r3, #0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d001      	beq.n	800ecac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e054      	b.n	800ed56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2202      	movs	r2, #2
 800ecb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68da      	ldr	r2, [r3, #12]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f042 0201 	orr.w	r2, r2, #1
 800ecc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a26      	ldr	r2, [pc, #152]	; (800ed64 <HAL_TIM_Base_Start_IT+0xd0>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d022      	beq.n	800ed14 <HAL_TIM_Base_Start_IT+0x80>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecd6:	d01d      	beq.n	800ed14 <HAL_TIM_Base_Start_IT+0x80>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a22      	ldr	r2, [pc, #136]	; (800ed68 <HAL_TIM_Base_Start_IT+0xd4>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d018      	beq.n	800ed14 <HAL_TIM_Base_Start_IT+0x80>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a21      	ldr	r2, [pc, #132]	; (800ed6c <HAL_TIM_Base_Start_IT+0xd8>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d013      	beq.n	800ed14 <HAL_TIM_Base_Start_IT+0x80>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a1f      	ldr	r2, [pc, #124]	; (800ed70 <HAL_TIM_Base_Start_IT+0xdc>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d00e      	beq.n	800ed14 <HAL_TIM_Base_Start_IT+0x80>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a1e      	ldr	r2, [pc, #120]	; (800ed74 <HAL_TIM_Base_Start_IT+0xe0>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d009      	beq.n	800ed14 <HAL_TIM_Base_Start_IT+0x80>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a1c      	ldr	r2, [pc, #112]	; (800ed78 <HAL_TIM_Base_Start_IT+0xe4>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d004      	beq.n	800ed14 <HAL_TIM_Base_Start_IT+0x80>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4a1b      	ldr	r2, [pc, #108]	; (800ed7c <HAL_TIM_Base_Start_IT+0xe8>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d115      	bne.n	800ed40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	689a      	ldr	r2, [r3, #8]
 800ed1a:	4b19      	ldr	r3, [pc, #100]	; (800ed80 <HAL_TIM_Base_Start_IT+0xec>)
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2b06      	cmp	r3, #6
 800ed24:	d015      	beq.n	800ed52 <HAL_TIM_Base_Start_IT+0xbe>
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed2c:	d011      	beq.n	800ed52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	681a      	ldr	r2, [r3, #0]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f042 0201 	orr.w	r2, r2, #1
 800ed3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed3e:	e008      	b.n	800ed52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f042 0201 	orr.w	r2, r2, #1
 800ed4e:	601a      	str	r2, [r3, #0]
 800ed50:	e000      	b.n	800ed54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed54:	2300      	movs	r3, #0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3714      	adds	r7, #20
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop
 800ed64:	40010000 	.word	0x40010000
 800ed68:	40000400 	.word	0x40000400
 800ed6c:	40000800 	.word	0x40000800
 800ed70:	40000c00 	.word	0x40000c00
 800ed74:	40010400 	.word	0x40010400
 800ed78:	40001800 	.word	0x40001800
 800ed7c:	40014000 	.word	0x40014000
 800ed80:	00010007 	.word	0x00010007

0800ed84 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d109      	bne.n	800edac <HAL_TIM_OC_Start_IT+0x28>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	bf14      	ite	ne
 800eda4:	2301      	movne	r3, #1
 800eda6:	2300      	moveq	r3, #0
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	e03c      	b.n	800ee26 <HAL_TIM_OC_Start_IT+0xa2>
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	2b04      	cmp	r3, #4
 800edb0:	d109      	bne.n	800edc6 <HAL_TIM_OC_Start_IT+0x42>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b01      	cmp	r3, #1
 800edbc:	bf14      	ite	ne
 800edbe:	2301      	movne	r3, #1
 800edc0:	2300      	moveq	r3, #0
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	e02f      	b.n	800ee26 <HAL_TIM_OC_Start_IT+0xa2>
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2b08      	cmp	r3, #8
 800edca:	d109      	bne.n	800ede0 <HAL_TIM_OC_Start_IT+0x5c>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	bf14      	ite	ne
 800edd8:	2301      	movne	r3, #1
 800edda:	2300      	moveq	r3, #0
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	e022      	b.n	800ee26 <HAL_TIM_OC_Start_IT+0xa2>
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	2b0c      	cmp	r3, #12
 800ede4:	d109      	bne.n	800edfa <HAL_TIM_OC_Start_IT+0x76>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800edec:	b2db      	uxtb	r3, r3
 800edee:	2b01      	cmp	r3, #1
 800edf0:	bf14      	ite	ne
 800edf2:	2301      	movne	r3, #1
 800edf4:	2300      	moveq	r3, #0
 800edf6:	b2db      	uxtb	r3, r3
 800edf8:	e015      	b.n	800ee26 <HAL_TIM_OC_Start_IT+0xa2>
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	2b10      	cmp	r3, #16
 800edfe:	d109      	bne.n	800ee14 <HAL_TIM_OC_Start_IT+0x90>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	bf14      	ite	ne
 800ee0c:	2301      	movne	r3, #1
 800ee0e:	2300      	moveq	r3, #0
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	e008      	b.n	800ee26 <HAL_TIM_OC_Start_IT+0xa2>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee1a:	b2db      	uxtb	r3, r3
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	bf14      	ite	ne
 800ee20:	2301      	movne	r3, #1
 800ee22:	2300      	moveq	r3, #0
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e0ec      	b.n	800f008 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d104      	bne.n	800ee3e <HAL_TIM_OC_Start_IT+0xba>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2202      	movs	r2, #2
 800ee38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee3c:	e023      	b.n	800ee86 <HAL_TIM_OC_Start_IT+0x102>
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	2b04      	cmp	r3, #4
 800ee42:	d104      	bne.n	800ee4e <HAL_TIM_OC_Start_IT+0xca>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2202      	movs	r2, #2
 800ee48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee4c:	e01b      	b.n	800ee86 <HAL_TIM_OC_Start_IT+0x102>
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b08      	cmp	r3, #8
 800ee52:	d104      	bne.n	800ee5e <HAL_TIM_OC_Start_IT+0xda>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2202      	movs	r2, #2
 800ee58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee5c:	e013      	b.n	800ee86 <HAL_TIM_OC_Start_IT+0x102>
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	2b0c      	cmp	r3, #12
 800ee62:	d104      	bne.n	800ee6e <HAL_TIM_OC_Start_IT+0xea>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2202      	movs	r2, #2
 800ee68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee6c:	e00b      	b.n	800ee86 <HAL_TIM_OC_Start_IT+0x102>
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	2b10      	cmp	r3, #16
 800ee72:	d104      	bne.n	800ee7e <HAL_TIM_OC_Start_IT+0xfa>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2202      	movs	r2, #2
 800ee78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee7c:	e003      	b.n	800ee86 <HAL_TIM_OC_Start_IT+0x102>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2202      	movs	r2, #2
 800ee82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	2b0c      	cmp	r3, #12
 800ee8a:	d841      	bhi.n	800ef10 <HAL_TIM_OC_Start_IT+0x18c>
 800ee8c:	a201      	add	r2, pc, #4	; (adr r2, 800ee94 <HAL_TIM_OC_Start_IT+0x110>)
 800ee8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee92:	bf00      	nop
 800ee94:	0800eec9 	.word	0x0800eec9
 800ee98:	0800ef11 	.word	0x0800ef11
 800ee9c:	0800ef11 	.word	0x0800ef11
 800eea0:	0800ef11 	.word	0x0800ef11
 800eea4:	0800eedb 	.word	0x0800eedb
 800eea8:	0800ef11 	.word	0x0800ef11
 800eeac:	0800ef11 	.word	0x0800ef11
 800eeb0:	0800ef11 	.word	0x0800ef11
 800eeb4:	0800eeed 	.word	0x0800eeed
 800eeb8:	0800ef11 	.word	0x0800ef11
 800eebc:	0800ef11 	.word	0x0800ef11
 800eec0:	0800ef11 	.word	0x0800ef11
 800eec4:	0800eeff 	.word	0x0800eeff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	68da      	ldr	r2, [r3, #12]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f042 0202 	orr.w	r2, r2, #2
 800eed6:	60da      	str	r2, [r3, #12]
      break;
 800eed8:	e01d      	b.n	800ef16 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	68da      	ldr	r2, [r3, #12]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f042 0204 	orr.w	r2, r2, #4
 800eee8:	60da      	str	r2, [r3, #12]
      break;
 800eeea:	e014      	b.n	800ef16 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	68da      	ldr	r2, [r3, #12]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f042 0208 	orr.w	r2, r2, #8
 800eefa:	60da      	str	r2, [r3, #12]
      break;
 800eefc:	e00b      	b.n	800ef16 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	68da      	ldr	r2, [r3, #12]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f042 0210 	orr.w	r2, r2, #16
 800ef0c:	60da      	str	r2, [r3, #12]
      break;
 800ef0e:	e002      	b.n	800ef16 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	73fb      	strb	r3, [r7, #15]
      break;
 800ef14:	bf00      	nop
  }

  if (status == HAL_OK)
 800ef16:	7bfb      	ldrb	r3, [r7, #15]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d174      	bne.n	800f006 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2201      	movs	r2, #1
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f001 f917 	bl	8010158 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4a38      	ldr	r2, [pc, #224]	; (800f010 <HAL_TIM_OC_Start_IT+0x28c>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d013      	beq.n	800ef5c <HAL_TIM_OC_Start_IT+0x1d8>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4a36      	ldr	r2, [pc, #216]	; (800f014 <HAL_TIM_OC_Start_IT+0x290>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d00e      	beq.n	800ef5c <HAL_TIM_OC_Start_IT+0x1d8>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4a35      	ldr	r2, [pc, #212]	; (800f018 <HAL_TIM_OC_Start_IT+0x294>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d009      	beq.n	800ef5c <HAL_TIM_OC_Start_IT+0x1d8>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a33      	ldr	r2, [pc, #204]	; (800f01c <HAL_TIM_OC_Start_IT+0x298>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d004      	beq.n	800ef5c <HAL_TIM_OC_Start_IT+0x1d8>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	4a32      	ldr	r2, [pc, #200]	; (800f020 <HAL_TIM_OC_Start_IT+0x29c>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d101      	bne.n	800ef60 <HAL_TIM_OC_Start_IT+0x1dc>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e000      	b.n	800ef62 <HAL_TIM_OC_Start_IT+0x1de>
 800ef60:	2300      	movs	r3, #0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d007      	beq.n	800ef76 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a25      	ldr	r2, [pc, #148]	; (800f010 <HAL_TIM_OC_Start_IT+0x28c>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d022      	beq.n	800efc6 <HAL_TIM_OC_Start_IT+0x242>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef88:	d01d      	beq.n	800efc6 <HAL_TIM_OC_Start_IT+0x242>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	4a25      	ldr	r2, [pc, #148]	; (800f024 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d018      	beq.n	800efc6 <HAL_TIM_OC_Start_IT+0x242>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a23      	ldr	r2, [pc, #140]	; (800f028 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d013      	beq.n	800efc6 <HAL_TIM_OC_Start_IT+0x242>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	4a22      	ldr	r2, [pc, #136]	; (800f02c <HAL_TIM_OC_Start_IT+0x2a8>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d00e      	beq.n	800efc6 <HAL_TIM_OC_Start_IT+0x242>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a19      	ldr	r2, [pc, #100]	; (800f014 <HAL_TIM_OC_Start_IT+0x290>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d009      	beq.n	800efc6 <HAL_TIM_OC_Start_IT+0x242>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a1e      	ldr	r2, [pc, #120]	; (800f030 <HAL_TIM_OC_Start_IT+0x2ac>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d004      	beq.n	800efc6 <HAL_TIM_OC_Start_IT+0x242>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a15      	ldr	r2, [pc, #84]	; (800f018 <HAL_TIM_OC_Start_IT+0x294>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d115      	bne.n	800eff2 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	689a      	ldr	r2, [r3, #8]
 800efcc:	4b19      	ldr	r3, [pc, #100]	; (800f034 <HAL_TIM_OC_Start_IT+0x2b0>)
 800efce:	4013      	ands	r3, r2
 800efd0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	2b06      	cmp	r3, #6
 800efd6:	d015      	beq.n	800f004 <HAL_TIM_OC_Start_IT+0x280>
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efde:	d011      	beq.n	800f004 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f042 0201 	orr.w	r2, r2, #1
 800efee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eff0:	e008      	b.n	800f004 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f042 0201 	orr.w	r2, r2, #1
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	e000      	b.n	800f006 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f004:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f006:	7bfb      	ldrb	r3, [r7, #15]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	40010000 	.word	0x40010000
 800f014:	40010400 	.word	0x40010400
 800f018:	40014000 	.word	0x40014000
 800f01c:	40014400 	.word	0x40014400
 800f020:	40014800 	.word	0x40014800
 800f024:	40000400 	.word	0x40000400
 800f028:	40000800 	.word	0x40000800
 800f02c:	40000c00 	.word	0x40000c00
 800f030:	40001800 	.word	0x40001800
 800f034:	00010007 	.word	0x00010007

0800f038 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	2b0c      	cmp	r3, #12
 800f04a:	d841      	bhi.n	800f0d0 <HAL_TIM_OC_Stop_IT+0x98>
 800f04c:	a201      	add	r2, pc, #4	; (adr r2, 800f054 <HAL_TIM_OC_Stop_IT+0x1c>)
 800f04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f052:	bf00      	nop
 800f054:	0800f089 	.word	0x0800f089
 800f058:	0800f0d1 	.word	0x0800f0d1
 800f05c:	0800f0d1 	.word	0x0800f0d1
 800f060:	0800f0d1 	.word	0x0800f0d1
 800f064:	0800f09b 	.word	0x0800f09b
 800f068:	0800f0d1 	.word	0x0800f0d1
 800f06c:	0800f0d1 	.word	0x0800f0d1
 800f070:	0800f0d1 	.word	0x0800f0d1
 800f074:	0800f0ad 	.word	0x0800f0ad
 800f078:	0800f0d1 	.word	0x0800f0d1
 800f07c:	0800f0d1 	.word	0x0800f0d1
 800f080:	0800f0d1 	.word	0x0800f0d1
 800f084:	0800f0bf 	.word	0x0800f0bf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68da      	ldr	r2, [r3, #12]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f022 0202 	bic.w	r2, r2, #2
 800f096:	60da      	str	r2, [r3, #12]
      break;
 800f098:	e01d      	b.n	800f0d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	68da      	ldr	r2, [r3, #12]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f022 0204 	bic.w	r2, r2, #4
 800f0a8:	60da      	str	r2, [r3, #12]
      break;
 800f0aa:	e014      	b.n	800f0d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	68da      	ldr	r2, [r3, #12]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f022 0208 	bic.w	r2, r2, #8
 800f0ba:	60da      	str	r2, [r3, #12]
      break;
 800f0bc:	e00b      	b.n	800f0d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	68da      	ldr	r2, [r3, #12]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f022 0210 	bic.w	r2, r2, #16
 800f0cc:	60da      	str	r2, [r3, #12]
      break;
 800f0ce:	e002      	b.n	800f0d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	73fb      	strb	r3, [r7, #15]
      break;
 800f0d4:	bf00      	nop
  }

  if (status == HAL_OK)
 800f0d6:	7bfb      	ldrb	r3, [r7, #15]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f040 8081 	bne.w	800f1e0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	6839      	ldr	r1, [r7, #0]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f001 f836 	bl	8010158 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4a3e      	ldr	r2, [pc, #248]	; (800f1ec <HAL_TIM_OC_Stop_IT+0x1b4>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d013      	beq.n	800f11e <HAL_TIM_OC_Stop_IT+0xe6>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4a3d      	ldr	r2, [pc, #244]	; (800f1f0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d00e      	beq.n	800f11e <HAL_TIM_OC_Stop_IT+0xe6>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a3b      	ldr	r2, [pc, #236]	; (800f1f4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d009      	beq.n	800f11e <HAL_TIM_OC_Stop_IT+0xe6>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	4a3a      	ldr	r2, [pc, #232]	; (800f1f8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800f110:	4293      	cmp	r3, r2
 800f112:	d004      	beq.n	800f11e <HAL_TIM_OC_Stop_IT+0xe6>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a38      	ldr	r2, [pc, #224]	; (800f1fc <HAL_TIM_OC_Stop_IT+0x1c4>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d101      	bne.n	800f122 <HAL_TIM_OC_Stop_IT+0xea>
 800f11e:	2301      	movs	r3, #1
 800f120:	e000      	b.n	800f124 <HAL_TIM_OC_Stop_IT+0xec>
 800f122:	2300      	movs	r3, #0
 800f124:	2b00      	cmp	r3, #0
 800f126:	d017      	beq.n	800f158 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	6a1a      	ldr	r2, [r3, #32]
 800f12e:	f241 1311 	movw	r3, #4369	; 0x1111
 800f132:	4013      	ands	r3, r2
 800f134:	2b00      	cmp	r3, #0
 800f136:	d10f      	bne.n	800f158 <HAL_TIM_OC_Stop_IT+0x120>
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6a1a      	ldr	r2, [r3, #32]
 800f13e:	f240 4344 	movw	r3, #1092	; 0x444
 800f142:	4013      	ands	r3, r2
 800f144:	2b00      	cmp	r3, #0
 800f146:	d107      	bne.n	800f158 <HAL_TIM_OC_Stop_IT+0x120>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f156:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	6a1a      	ldr	r2, [r3, #32]
 800f15e:	f241 1311 	movw	r3, #4369	; 0x1111
 800f162:	4013      	ands	r3, r2
 800f164:	2b00      	cmp	r3, #0
 800f166:	d10f      	bne.n	800f188 <HAL_TIM_OC_Stop_IT+0x150>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	6a1a      	ldr	r2, [r3, #32]
 800f16e:	f240 4344 	movw	r3, #1092	; 0x444
 800f172:	4013      	ands	r3, r2
 800f174:	2b00      	cmp	r3, #0
 800f176:	d107      	bne.n	800f188 <HAL_TIM_OC_Stop_IT+0x150>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f022 0201 	bic.w	r2, r2, #1
 800f186:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d104      	bne.n	800f198 <HAL_TIM_OC_Stop_IT+0x160>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2201      	movs	r2, #1
 800f192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f196:	e023      	b.n	800f1e0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	2b04      	cmp	r3, #4
 800f19c:	d104      	bne.n	800f1a8 <HAL_TIM_OC_Stop_IT+0x170>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f1a6:	e01b      	b.n	800f1e0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	2b08      	cmp	r3, #8
 800f1ac:	d104      	bne.n	800f1b8 <HAL_TIM_OC_Stop_IT+0x180>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f1b6:	e013      	b.n	800f1e0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b0c      	cmp	r3, #12
 800f1bc:	d104      	bne.n	800f1c8 <HAL_TIM_OC_Stop_IT+0x190>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f1c6:	e00b      	b.n	800f1e0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	2b10      	cmp	r3, #16
 800f1cc:	d104      	bne.n	800f1d8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f1d6:	e003      	b.n	800f1e0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	40010000 	.word	0x40010000
 800f1f0:	40010400 	.word	0x40010400
 800f1f4:	40014000 	.word	0x40014000
 800f1f8:	40014400 	.word	0x40014400
 800f1fc:	40014800 	.word	0x40014800

0800f200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d101      	bne.n	800f212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f20e:	2301      	movs	r3, #1
 800f210:	e049      	b.n	800f2a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d106      	bne.n	800f22c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2200      	movs	r2, #0
 800f222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 f841 	bl	800f2ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2202      	movs	r2, #2
 800f230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3304      	adds	r3, #4
 800f23c:	4619      	mov	r1, r3
 800f23e:	4610      	mov	r0, r2
 800f240:	f000 fb70 	bl	800f924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2201      	movs	r2, #1
 800f248:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2201      	movs	r2, #1
 800f250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2201      	movs	r2, #1
 800f258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2201      	movs	r2, #1
 800f260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2201      	movs	r2, #1
 800f268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2201      	movs	r2, #1
 800f270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2201      	movs	r2, #1
 800f278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2201      	movs	r2, #1
 800f280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2201      	movs	r2, #1
 800f288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2201      	movs	r2, #1
 800f290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2201      	movs	r2, #1
 800f298:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f2a4:	2300      	movs	r3, #0
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f2ae:	b480      	push	{r7}
 800f2b0:	b083      	sub	sp, #12
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f2b6:	bf00      	nop
 800f2b8:	370c      	adds	r7, #12
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr

0800f2c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b084      	sub	sp, #16
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	691b      	ldr	r3, [r3, #16]
 800f2d8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	f003 0302 	and.w	r3, r3, #2
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d020      	beq.n	800f326 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f003 0302 	and.w	r3, r3, #2
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d01b      	beq.n	800f326 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f06f 0202 	mvn.w	r2, #2
 800f2f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	699b      	ldr	r3, [r3, #24]
 800f304:	f003 0303 	and.w	r3, r3, #3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d003      	beq.n	800f314 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f000 faeb 	bl	800f8e8 <HAL_TIM_IC_CaptureCallback>
 800f312:	e005      	b.n	800f320 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7f2 f913 	bl	8001540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 faee 	bl	800f8fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	f003 0304 	and.w	r3, r3, #4
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d020      	beq.n	800f372 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f003 0304 	and.w	r3, r3, #4
 800f336:	2b00      	cmp	r3, #0
 800f338:	d01b      	beq.n	800f372 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f06f 0204 	mvn.w	r2, #4
 800f342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2202      	movs	r2, #2
 800f348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	699b      	ldr	r3, [r3, #24]
 800f350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f354:	2b00      	cmp	r3, #0
 800f356:	d003      	beq.n	800f360 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 fac5 	bl	800f8e8 <HAL_TIM_IC_CaptureCallback>
 800f35e:	e005      	b.n	800f36c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7f2 f8ed 	bl	8001540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 fac8 	bl	800f8fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	f003 0308 	and.w	r3, r3, #8
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d020      	beq.n	800f3be <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f003 0308 	and.w	r3, r3, #8
 800f382:	2b00      	cmp	r3, #0
 800f384:	d01b      	beq.n	800f3be <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f06f 0208 	mvn.w	r2, #8
 800f38e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2204      	movs	r2, #4
 800f394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	69db      	ldr	r3, [r3, #28]
 800f39c:	f003 0303 	and.w	r3, r3, #3
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d003      	beq.n	800f3ac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 fa9f 	bl	800f8e8 <HAL_TIM_IC_CaptureCallback>
 800f3aa:	e005      	b.n	800f3b8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f7f2 f8c7 	bl	8001540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f000 faa2 	bl	800f8fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	f003 0310 	and.w	r3, r3, #16
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d020      	beq.n	800f40a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f003 0310 	and.w	r3, r3, #16
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d01b      	beq.n	800f40a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f06f 0210 	mvn.w	r2, #16
 800f3da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2208      	movs	r2, #8
 800f3e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	69db      	ldr	r3, [r3, #28]
 800f3e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d003      	beq.n	800f3f8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 fa79 	bl	800f8e8 <HAL_TIM_IC_CaptureCallback>
 800f3f6:	e005      	b.n	800f404 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f7f2 f8a1 	bl	8001540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fa7c 	bl	800f8fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	f003 0301 	and.w	r3, r3, #1
 800f410:	2b00      	cmp	r3, #0
 800f412:	d00c      	beq.n	800f42e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f003 0301 	and.w	r3, r3, #1
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d007      	beq.n	800f42e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f06f 0201 	mvn.w	r2, #1
 800f426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f7f2 ff01 	bl	8002230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f434:	2b00      	cmp	r3, #0
 800f436:	d104      	bne.n	800f442 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d00c      	beq.n	800f45c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d007      	beq.n	800f45c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 ffba 	bl	80103d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f462:	2b00      	cmp	r3, #0
 800f464:	d00c      	beq.n	800f480 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d007      	beq.n	800f480 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 ffb2 	bl	80103e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f486:	2b00      	cmp	r3, #0
 800f488:	d00c      	beq.n	800f4a4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f490:	2b00      	cmp	r3, #0
 800f492:	d007      	beq.n	800f4a4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f49c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 fa36 	bl	800f910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	f003 0320 	and.w	r3, r3, #32
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00c      	beq.n	800f4c8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f003 0320 	and.w	r3, r3, #32
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d007      	beq.n	800f4c8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f06f 0220 	mvn.w	r2, #32
 800f4c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 ff7a 	bl	80103bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f4c8:	bf00      	nop
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b086      	sub	sp, #24
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d101      	bne.n	800f4ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f4ea:	2302      	movs	r3, #2
 800f4ec:	e0ff      	b.n	800f6ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2b14      	cmp	r3, #20
 800f4fa:	f200 80f0 	bhi.w	800f6de <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f4fe:	a201      	add	r2, pc, #4	; (adr r2, 800f504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f504:	0800f559 	.word	0x0800f559
 800f508:	0800f6df 	.word	0x0800f6df
 800f50c:	0800f6df 	.word	0x0800f6df
 800f510:	0800f6df 	.word	0x0800f6df
 800f514:	0800f599 	.word	0x0800f599
 800f518:	0800f6df 	.word	0x0800f6df
 800f51c:	0800f6df 	.word	0x0800f6df
 800f520:	0800f6df 	.word	0x0800f6df
 800f524:	0800f5db 	.word	0x0800f5db
 800f528:	0800f6df 	.word	0x0800f6df
 800f52c:	0800f6df 	.word	0x0800f6df
 800f530:	0800f6df 	.word	0x0800f6df
 800f534:	0800f61b 	.word	0x0800f61b
 800f538:	0800f6df 	.word	0x0800f6df
 800f53c:	0800f6df 	.word	0x0800f6df
 800f540:	0800f6df 	.word	0x0800f6df
 800f544:	0800f65d 	.word	0x0800f65d
 800f548:	0800f6df 	.word	0x0800f6df
 800f54c:	0800f6df 	.word	0x0800f6df
 800f550:	0800f6df 	.word	0x0800f6df
 800f554:	0800f69d 	.word	0x0800f69d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	68b9      	ldr	r1, [r7, #8]
 800f55e:	4618      	mov	r0, r3
 800f560:	f000 fa86 	bl	800fa70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	699a      	ldr	r2, [r3, #24]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f042 0208 	orr.w	r2, r2, #8
 800f572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	699a      	ldr	r2, [r3, #24]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f022 0204 	bic.w	r2, r2, #4
 800f582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	6999      	ldr	r1, [r3, #24]
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	691a      	ldr	r2, [r3, #16]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	430a      	orrs	r2, r1
 800f594:	619a      	str	r2, [r3, #24]
      break;
 800f596:	e0a5      	b.n	800f6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	68b9      	ldr	r1, [r7, #8]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f000 faf6 	bl	800fb90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	699a      	ldr	r2, [r3, #24]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	699a      	ldr	r2, [r3, #24]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	6999      	ldr	r1, [r3, #24]
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	691b      	ldr	r3, [r3, #16]
 800f5ce:	021a      	lsls	r2, r3, #8
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	430a      	orrs	r2, r1
 800f5d6:	619a      	str	r2, [r3, #24]
      break;
 800f5d8:	e084      	b.n	800f6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	68b9      	ldr	r1, [r7, #8]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f000 fb5f 	bl	800fca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	69da      	ldr	r2, [r3, #28]
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f042 0208 	orr.w	r2, r2, #8
 800f5f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	69da      	ldr	r2, [r3, #28]
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f022 0204 	bic.w	r2, r2, #4
 800f604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	69d9      	ldr	r1, [r3, #28]
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	691a      	ldr	r2, [r3, #16]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	430a      	orrs	r2, r1
 800f616:	61da      	str	r2, [r3, #28]
      break;
 800f618:	e064      	b.n	800f6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	68b9      	ldr	r1, [r7, #8]
 800f620:	4618      	mov	r0, r3
 800f622:	f000 fbc7 	bl	800fdb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	69da      	ldr	r2, [r3, #28]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	69da      	ldr	r2, [r3, #28]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	69d9      	ldr	r1, [r3, #28]
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	021a      	lsls	r2, r3, #8
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	430a      	orrs	r2, r1
 800f658:	61da      	str	r2, [r3, #28]
      break;
 800f65a:	e043      	b.n	800f6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	68b9      	ldr	r1, [r7, #8]
 800f662:	4618      	mov	r0, r3
 800f664:	f000 fc10 	bl	800fe88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f042 0208 	orr.w	r2, r2, #8
 800f676:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f022 0204 	bic.w	r2, r2, #4
 800f686:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	691a      	ldr	r2, [r3, #16]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	430a      	orrs	r2, r1
 800f698:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f69a:	e023      	b.n	800f6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	68b9      	ldr	r1, [r7, #8]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 fc54 	bl	800ff50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	691b      	ldr	r3, [r3, #16]
 800f6d2:	021a      	lsls	r2, r3, #8
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	430a      	orrs	r2, r1
 800f6da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f6dc:	e002      	b.n	800f6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	75fb      	strb	r3, [r7, #23]
      break;
 800f6e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3718      	adds	r7, #24
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop

0800f6f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f702:	2300      	movs	r3, #0
 800f704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d101      	bne.n	800f714 <HAL_TIM_ConfigClockSource+0x1c>
 800f710:	2302      	movs	r3, #2
 800f712:	e0dc      	b.n	800f8ce <HAL_TIM_ConfigClockSource+0x1d6>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2201      	movs	r2, #1
 800f718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2202      	movs	r2, #2
 800f720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f72c:	68ba      	ldr	r2, [r7, #8]
 800f72e:	4b6a      	ldr	r3, [pc, #424]	; (800f8d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f730:	4013      	ands	r3, r2
 800f732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f73a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a64      	ldr	r2, [pc, #400]	; (800f8dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	f000 80a9 	beq.w	800f8a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f750:	4a62      	ldr	r2, [pc, #392]	; (800f8dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800f752:	4293      	cmp	r3, r2
 800f754:	f200 80ae 	bhi.w	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f758:	4a61      	ldr	r2, [pc, #388]	; (800f8e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	f000 80a1 	beq.w	800f8a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f760:	4a5f      	ldr	r2, [pc, #380]	; (800f8e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f762:	4293      	cmp	r3, r2
 800f764:	f200 80a6 	bhi.w	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f768:	4a5e      	ldr	r2, [pc, #376]	; (800f8e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	f000 8099 	beq.w	800f8a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f770:	4a5c      	ldr	r2, [pc, #368]	; (800f8e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f772:	4293      	cmp	r3, r2
 800f774:	f200 809e 	bhi.w	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f778:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f77c:	f000 8091 	beq.w	800f8a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f780:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f784:	f200 8096 	bhi.w	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f78c:	f000 8089 	beq.w	800f8a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f794:	f200 808e 	bhi.w	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f79c:	d03e      	beq.n	800f81c <HAL_TIM_ConfigClockSource+0x124>
 800f79e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7a2:	f200 8087 	bhi.w	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f7a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7aa:	f000 8086 	beq.w	800f8ba <HAL_TIM_ConfigClockSource+0x1c2>
 800f7ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7b2:	d87f      	bhi.n	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f7b4:	2b70      	cmp	r3, #112	; 0x70
 800f7b6:	d01a      	beq.n	800f7ee <HAL_TIM_ConfigClockSource+0xf6>
 800f7b8:	2b70      	cmp	r3, #112	; 0x70
 800f7ba:	d87b      	bhi.n	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f7bc:	2b60      	cmp	r3, #96	; 0x60
 800f7be:	d050      	beq.n	800f862 <HAL_TIM_ConfigClockSource+0x16a>
 800f7c0:	2b60      	cmp	r3, #96	; 0x60
 800f7c2:	d877      	bhi.n	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f7c4:	2b50      	cmp	r3, #80	; 0x50
 800f7c6:	d03c      	beq.n	800f842 <HAL_TIM_ConfigClockSource+0x14a>
 800f7c8:	2b50      	cmp	r3, #80	; 0x50
 800f7ca:	d873      	bhi.n	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f7cc:	2b40      	cmp	r3, #64	; 0x40
 800f7ce:	d058      	beq.n	800f882 <HAL_TIM_ConfigClockSource+0x18a>
 800f7d0:	2b40      	cmp	r3, #64	; 0x40
 800f7d2:	d86f      	bhi.n	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f7d4:	2b30      	cmp	r3, #48	; 0x30
 800f7d6:	d064      	beq.n	800f8a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f7d8:	2b30      	cmp	r3, #48	; 0x30
 800f7da:	d86b      	bhi.n	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f7dc:	2b20      	cmp	r3, #32
 800f7de:	d060      	beq.n	800f8a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f7e0:	2b20      	cmp	r3, #32
 800f7e2:	d867      	bhi.n	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d05c      	beq.n	800f8a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f7e8:	2b10      	cmp	r3, #16
 800f7ea:	d05a      	beq.n	800f8a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f7ec:	e062      	b.n	800f8b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6818      	ldr	r0, [r3, #0]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	6899      	ldr	r1, [r3, #8]
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	685a      	ldr	r2, [r3, #4]
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	68db      	ldr	r3, [r3, #12]
 800f7fe:	f000 fc8b 	bl	8010118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f810:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	68ba      	ldr	r2, [r7, #8]
 800f818:	609a      	str	r2, [r3, #8]
      break;
 800f81a:	e04f      	b.n	800f8bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6818      	ldr	r0, [r3, #0]
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	6899      	ldr	r1, [r3, #8]
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	685a      	ldr	r2, [r3, #4]
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	f000 fc74 	bl	8010118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	689a      	ldr	r2, [r3, #8]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f83e:	609a      	str	r2, [r3, #8]
      break;
 800f840:	e03c      	b.n	800f8bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6818      	ldr	r0, [r3, #0]
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	6859      	ldr	r1, [r3, #4]
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	461a      	mov	r2, r3
 800f850:	f000 fbe4 	bl	801001c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2150      	movs	r1, #80	; 0x50
 800f85a:	4618      	mov	r0, r3
 800f85c:	f000 fc3e 	bl	80100dc <TIM_ITRx_SetConfig>
      break;
 800f860:	e02c      	b.n	800f8bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6818      	ldr	r0, [r3, #0]
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	6859      	ldr	r1, [r3, #4]
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	461a      	mov	r2, r3
 800f870:	f000 fc03 	bl	801007a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2160      	movs	r1, #96	; 0x60
 800f87a:	4618      	mov	r0, r3
 800f87c:	f000 fc2e 	bl	80100dc <TIM_ITRx_SetConfig>
      break;
 800f880:	e01c      	b.n	800f8bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6818      	ldr	r0, [r3, #0]
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	6859      	ldr	r1, [r3, #4]
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	461a      	mov	r2, r3
 800f890:	f000 fbc4 	bl	801001c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2140      	movs	r1, #64	; 0x40
 800f89a:	4618      	mov	r0, r3
 800f89c:	f000 fc1e 	bl	80100dc <TIM_ITRx_SetConfig>
      break;
 800f8a0:	e00c      	b.n	800f8bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	4610      	mov	r0, r2
 800f8ae:	f000 fc15 	bl	80100dc <TIM_ITRx_SetConfig>
      break;
 800f8b2:	e003      	b.n	800f8bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800f8b8:	e000      	b.n	800f8bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f8ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2201      	movs	r2, #1
 800f8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	ffceff88 	.word	0xffceff88
 800f8dc:	00100040 	.word	0x00100040
 800f8e0:	00100030 	.word	0x00100030
 800f8e4:	00100020 	.word	0x00100020

0800f8e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f918:	bf00      	nop
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f924:	b480      	push	{r7}
 800f926:	b085      	sub	sp, #20
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a46      	ldr	r2, [pc, #280]	; (800fa50 <TIM_Base_SetConfig+0x12c>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d013      	beq.n	800f964 <TIM_Base_SetConfig+0x40>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f942:	d00f      	beq.n	800f964 <TIM_Base_SetConfig+0x40>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a43      	ldr	r2, [pc, #268]	; (800fa54 <TIM_Base_SetConfig+0x130>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d00b      	beq.n	800f964 <TIM_Base_SetConfig+0x40>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a42      	ldr	r2, [pc, #264]	; (800fa58 <TIM_Base_SetConfig+0x134>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d007      	beq.n	800f964 <TIM_Base_SetConfig+0x40>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a41      	ldr	r2, [pc, #260]	; (800fa5c <TIM_Base_SetConfig+0x138>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d003      	beq.n	800f964 <TIM_Base_SetConfig+0x40>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a40      	ldr	r2, [pc, #256]	; (800fa60 <TIM_Base_SetConfig+0x13c>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d108      	bne.n	800f976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f96a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	4313      	orrs	r3, r2
 800f974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4a35      	ldr	r2, [pc, #212]	; (800fa50 <TIM_Base_SetConfig+0x12c>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d01f      	beq.n	800f9be <TIM_Base_SetConfig+0x9a>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f984:	d01b      	beq.n	800f9be <TIM_Base_SetConfig+0x9a>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4a32      	ldr	r2, [pc, #200]	; (800fa54 <TIM_Base_SetConfig+0x130>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d017      	beq.n	800f9be <TIM_Base_SetConfig+0x9a>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a31      	ldr	r2, [pc, #196]	; (800fa58 <TIM_Base_SetConfig+0x134>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d013      	beq.n	800f9be <TIM_Base_SetConfig+0x9a>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4a30      	ldr	r2, [pc, #192]	; (800fa5c <TIM_Base_SetConfig+0x138>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d00f      	beq.n	800f9be <TIM_Base_SetConfig+0x9a>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	4a2f      	ldr	r2, [pc, #188]	; (800fa60 <TIM_Base_SetConfig+0x13c>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d00b      	beq.n	800f9be <TIM_Base_SetConfig+0x9a>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4a2e      	ldr	r2, [pc, #184]	; (800fa64 <TIM_Base_SetConfig+0x140>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d007      	beq.n	800f9be <TIM_Base_SetConfig+0x9a>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4a2d      	ldr	r2, [pc, #180]	; (800fa68 <TIM_Base_SetConfig+0x144>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d003      	beq.n	800f9be <TIM_Base_SetConfig+0x9a>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4a2c      	ldr	r2, [pc, #176]	; (800fa6c <TIM_Base_SetConfig+0x148>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d108      	bne.n	800f9d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	68fa      	ldr	r2, [r7, #12]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	695b      	ldr	r3, [r3, #20]
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	689a      	ldr	r2, [r3, #8]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	4a16      	ldr	r2, [pc, #88]	; (800fa50 <TIM_Base_SetConfig+0x12c>)
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d00f      	beq.n	800fa1c <TIM_Base_SetConfig+0xf8>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4a18      	ldr	r2, [pc, #96]	; (800fa60 <TIM_Base_SetConfig+0x13c>)
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d00b      	beq.n	800fa1c <TIM_Base_SetConfig+0xf8>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	4a17      	ldr	r2, [pc, #92]	; (800fa64 <TIM_Base_SetConfig+0x140>)
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d007      	beq.n	800fa1c <TIM_Base_SetConfig+0xf8>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4a16      	ldr	r2, [pc, #88]	; (800fa68 <TIM_Base_SetConfig+0x144>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d003      	beq.n	800fa1c <TIM_Base_SetConfig+0xf8>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4a15      	ldr	r2, [pc, #84]	; (800fa6c <TIM_Base_SetConfig+0x148>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d103      	bne.n	800fa24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	691a      	ldr	r2, [r3, #16]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2201      	movs	r2, #1
 800fa28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	f003 0301 	and.w	r3, r3, #1
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d105      	bne.n	800fa42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	691b      	ldr	r3, [r3, #16]
 800fa3a:	f023 0201 	bic.w	r2, r3, #1
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	611a      	str	r2, [r3, #16]
  }
}
 800fa42:	bf00      	nop
 800fa44:	3714      	adds	r7, #20
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr
 800fa4e:	bf00      	nop
 800fa50:	40010000 	.word	0x40010000
 800fa54:	40000400 	.word	0x40000400
 800fa58:	40000800 	.word	0x40000800
 800fa5c:	40000c00 	.word	0x40000c00
 800fa60:	40010400 	.word	0x40010400
 800fa64:	40014000 	.word	0x40014000
 800fa68:	40014400 	.word	0x40014400
 800fa6c:	40014800 	.word	0x40014800

0800fa70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b087      	sub	sp, #28
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6a1b      	ldr	r3, [r3, #32]
 800fa7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6a1b      	ldr	r3, [r3, #32]
 800fa84:	f023 0201 	bic.w	r2, r3, #1
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	685b      	ldr	r3, [r3, #4]
 800fa90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	699b      	ldr	r3, [r3, #24]
 800fa96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	4b37      	ldr	r3, [pc, #220]	; (800fb78 <TIM_OC1_SetConfig+0x108>)
 800fa9c:	4013      	ands	r3, r2
 800fa9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f023 0303 	bic.w	r3, r3, #3
 800faa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4313      	orrs	r3, r2
 800fab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	f023 0302 	bic.w	r3, r3, #2
 800fab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	689b      	ldr	r3, [r3, #8]
 800fabe:	697a      	ldr	r2, [r7, #20]
 800fac0:	4313      	orrs	r3, r2
 800fac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4a2d      	ldr	r2, [pc, #180]	; (800fb7c <TIM_OC1_SetConfig+0x10c>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d00f      	beq.n	800faec <TIM_OC1_SetConfig+0x7c>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	4a2c      	ldr	r2, [pc, #176]	; (800fb80 <TIM_OC1_SetConfig+0x110>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d00b      	beq.n	800faec <TIM_OC1_SetConfig+0x7c>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4a2b      	ldr	r2, [pc, #172]	; (800fb84 <TIM_OC1_SetConfig+0x114>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d007      	beq.n	800faec <TIM_OC1_SetConfig+0x7c>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	4a2a      	ldr	r2, [pc, #168]	; (800fb88 <TIM_OC1_SetConfig+0x118>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d003      	beq.n	800faec <TIM_OC1_SetConfig+0x7c>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	4a29      	ldr	r2, [pc, #164]	; (800fb8c <TIM_OC1_SetConfig+0x11c>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d10c      	bne.n	800fb06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	f023 0308 	bic.w	r3, r3, #8
 800faf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	697a      	ldr	r2, [r7, #20]
 800fafa:	4313      	orrs	r3, r2
 800fafc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	f023 0304 	bic.w	r3, r3, #4
 800fb04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4a1c      	ldr	r2, [pc, #112]	; (800fb7c <TIM_OC1_SetConfig+0x10c>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d00f      	beq.n	800fb2e <TIM_OC1_SetConfig+0xbe>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4a1b      	ldr	r2, [pc, #108]	; (800fb80 <TIM_OC1_SetConfig+0x110>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d00b      	beq.n	800fb2e <TIM_OC1_SetConfig+0xbe>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4a1a      	ldr	r2, [pc, #104]	; (800fb84 <TIM_OC1_SetConfig+0x114>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d007      	beq.n	800fb2e <TIM_OC1_SetConfig+0xbe>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	4a19      	ldr	r2, [pc, #100]	; (800fb88 <TIM_OC1_SetConfig+0x118>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d003      	beq.n	800fb2e <TIM_OC1_SetConfig+0xbe>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4a18      	ldr	r2, [pc, #96]	; (800fb8c <TIM_OC1_SetConfig+0x11c>)
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d111      	bne.n	800fb52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	695b      	ldr	r3, [r3, #20]
 800fb42:	693a      	ldr	r2, [r7, #16]
 800fb44:	4313      	orrs	r3, r2
 800fb46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	699b      	ldr	r3, [r3, #24]
 800fb4c:	693a      	ldr	r2, [r7, #16]
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	693a      	ldr	r2, [r7, #16]
 800fb56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	68fa      	ldr	r2, [r7, #12]
 800fb5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	685a      	ldr	r2, [r3, #4]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	697a      	ldr	r2, [r7, #20]
 800fb6a:	621a      	str	r2, [r3, #32]
}
 800fb6c:	bf00      	nop
 800fb6e:	371c      	adds	r7, #28
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr
 800fb78:	fffeff8f 	.word	0xfffeff8f
 800fb7c:	40010000 	.word	0x40010000
 800fb80:	40010400 	.word	0x40010400
 800fb84:	40014000 	.word	0x40014000
 800fb88:	40014400 	.word	0x40014400
 800fb8c:	40014800 	.word	0x40014800

0800fb90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b087      	sub	sp, #28
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a1b      	ldr	r3, [r3, #32]
 800fb9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6a1b      	ldr	r3, [r3, #32]
 800fba4:	f023 0210 	bic.w	r2, r3, #16
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	699b      	ldr	r3, [r3, #24]
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	4b34      	ldr	r3, [pc, #208]	; (800fc8c <TIM_OC2_SetConfig+0xfc>)
 800fbbc:	4013      	ands	r3, r2
 800fbbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	021b      	lsls	r3, r3, #8
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	f023 0320 	bic.w	r3, r3, #32
 800fbda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	689b      	ldr	r3, [r3, #8]
 800fbe0:	011b      	lsls	r3, r3, #4
 800fbe2:	697a      	ldr	r2, [r7, #20]
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4a29      	ldr	r2, [pc, #164]	; (800fc90 <TIM_OC2_SetConfig+0x100>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d003      	beq.n	800fbf8 <TIM_OC2_SetConfig+0x68>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4a28      	ldr	r2, [pc, #160]	; (800fc94 <TIM_OC2_SetConfig+0x104>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d10d      	bne.n	800fc14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	011b      	lsls	r3, r3, #4
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4a1e      	ldr	r2, [pc, #120]	; (800fc90 <TIM_OC2_SetConfig+0x100>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d00f      	beq.n	800fc3c <TIM_OC2_SetConfig+0xac>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a1d      	ldr	r2, [pc, #116]	; (800fc94 <TIM_OC2_SetConfig+0x104>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d00b      	beq.n	800fc3c <TIM_OC2_SetConfig+0xac>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4a1c      	ldr	r2, [pc, #112]	; (800fc98 <TIM_OC2_SetConfig+0x108>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d007      	beq.n	800fc3c <TIM_OC2_SetConfig+0xac>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a1b      	ldr	r2, [pc, #108]	; (800fc9c <TIM_OC2_SetConfig+0x10c>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d003      	beq.n	800fc3c <TIM_OC2_SetConfig+0xac>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4a1a      	ldr	r2, [pc, #104]	; (800fca0 <TIM_OC2_SetConfig+0x110>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d113      	bne.n	800fc64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	695b      	ldr	r3, [r3, #20]
 800fc50:	009b      	lsls	r3, r3, #2
 800fc52:	693a      	ldr	r2, [r7, #16]
 800fc54:	4313      	orrs	r3, r2
 800fc56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	699b      	ldr	r3, [r3, #24]
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	693a      	ldr	r2, [r7, #16]
 800fc60:	4313      	orrs	r3, r2
 800fc62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	693a      	ldr	r2, [r7, #16]
 800fc68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	685a      	ldr	r2, [r3, #4]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	697a      	ldr	r2, [r7, #20]
 800fc7c:	621a      	str	r2, [r3, #32]
}
 800fc7e:	bf00      	nop
 800fc80:	371c      	adds	r7, #28
 800fc82:	46bd      	mov	sp, r7
 800fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop
 800fc8c:	feff8fff 	.word	0xfeff8fff
 800fc90:	40010000 	.word	0x40010000
 800fc94:	40010400 	.word	0x40010400
 800fc98:	40014000 	.word	0x40014000
 800fc9c:	40014400 	.word	0x40014400
 800fca0:	40014800 	.word	0x40014800

0800fca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b087      	sub	sp, #28
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6a1b      	ldr	r3, [r3, #32]
 800fcb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a1b      	ldr	r3, [r3, #32]
 800fcb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	69db      	ldr	r3, [r3, #28]
 800fcca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	4b33      	ldr	r3, [pc, #204]	; (800fd9c <TIM_OC3_SetConfig+0xf8>)
 800fcd0:	4013      	ands	r3, r2
 800fcd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f023 0303 	bic.w	r3, r3, #3
 800fcda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	68fa      	ldr	r2, [r7, #12]
 800fce2:	4313      	orrs	r3, r2
 800fce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fcec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	021b      	lsls	r3, r3, #8
 800fcf4:	697a      	ldr	r2, [r7, #20]
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4a28      	ldr	r2, [pc, #160]	; (800fda0 <TIM_OC3_SetConfig+0xfc>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d003      	beq.n	800fd0a <TIM_OC3_SetConfig+0x66>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4a27      	ldr	r2, [pc, #156]	; (800fda4 <TIM_OC3_SetConfig+0x100>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d10d      	bne.n	800fd26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	68db      	ldr	r3, [r3, #12]
 800fd16:	021b      	lsls	r3, r3, #8
 800fd18:	697a      	ldr	r2, [r7, #20]
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4a1d      	ldr	r2, [pc, #116]	; (800fda0 <TIM_OC3_SetConfig+0xfc>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d00f      	beq.n	800fd4e <TIM_OC3_SetConfig+0xaa>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4a1c      	ldr	r2, [pc, #112]	; (800fda4 <TIM_OC3_SetConfig+0x100>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d00b      	beq.n	800fd4e <TIM_OC3_SetConfig+0xaa>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	4a1b      	ldr	r2, [pc, #108]	; (800fda8 <TIM_OC3_SetConfig+0x104>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d007      	beq.n	800fd4e <TIM_OC3_SetConfig+0xaa>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4a1a      	ldr	r2, [pc, #104]	; (800fdac <TIM_OC3_SetConfig+0x108>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d003      	beq.n	800fd4e <TIM_OC3_SetConfig+0xaa>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4a19      	ldr	r2, [pc, #100]	; (800fdb0 <TIM_OC3_SetConfig+0x10c>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d113      	bne.n	800fd76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	695b      	ldr	r3, [r3, #20]
 800fd62:	011b      	lsls	r3, r3, #4
 800fd64:	693a      	ldr	r2, [r7, #16]
 800fd66:	4313      	orrs	r3, r2
 800fd68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	699b      	ldr	r3, [r3, #24]
 800fd6e:	011b      	lsls	r3, r3, #4
 800fd70:	693a      	ldr	r2, [r7, #16]
 800fd72:	4313      	orrs	r3, r2
 800fd74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	693a      	ldr	r2, [r7, #16]
 800fd7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	685a      	ldr	r2, [r3, #4]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	697a      	ldr	r2, [r7, #20]
 800fd8e:	621a      	str	r2, [r3, #32]
}
 800fd90:	bf00      	nop
 800fd92:	371c      	adds	r7, #28
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr
 800fd9c:	fffeff8f 	.word	0xfffeff8f
 800fda0:	40010000 	.word	0x40010000
 800fda4:	40010400 	.word	0x40010400
 800fda8:	40014000 	.word	0x40014000
 800fdac:	40014400 	.word	0x40014400
 800fdb0:	40014800 	.word	0x40014800

0800fdb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b087      	sub	sp, #28
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6a1b      	ldr	r3, [r3, #32]
 800fdc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6a1b      	ldr	r3, [r3, #32]
 800fdc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	69db      	ldr	r3, [r3, #28]
 800fdda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fddc:	68fa      	ldr	r2, [r7, #12]
 800fdde:	4b24      	ldr	r3, [pc, #144]	; (800fe70 <TIM_OC4_SetConfig+0xbc>)
 800fde0:	4013      	ands	r3, r2
 800fde2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fdea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	021b      	lsls	r3, r3, #8
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fdfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	031b      	lsls	r3, r3, #12
 800fe06:	693a      	ldr	r2, [r7, #16]
 800fe08:	4313      	orrs	r3, r2
 800fe0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	4a19      	ldr	r2, [pc, #100]	; (800fe74 <TIM_OC4_SetConfig+0xc0>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d00f      	beq.n	800fe34 <TIM_OC4_SetConfig+0x80>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	4a18      	ldr	r2, [pc, #96]	; (800fe78 <TIM_OC4_SetConfig+0xc4>)
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d00b      	beq.n	800fe34 <TIM_OC4_SetConfig+0x80>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	4a17      	ldr	r2, [pc, #92]	; (800fe7c <TIM_OC4_SetConfig+0xc8>)
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d007      	beq.n	800fe34 <TIM_OC4_SetConfig+0x80>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	4a16      	ldr	r2, [pc, #88]	; (800fe80 <TIM_OC4_SetConfig+0xcc>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d003      	beq.n	800fe34 <TIM_OC4_SetConfig+0x80>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	4a15      	ldr	r2, [pc, #84]	; (800fe84 <TIM_OC4_SetConfig+0xd0>)
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d109      	bne.n	800fe48 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fe3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	695b      	ldr	r3, [r3, #20]
 800fe40:	019b      	lsls	r3, r3, #6
 800fe42:	697a      	ldr	r2, [r7, #20]
 800fe44:	4313      	orrs	r3, r2
 800fe46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	697a      	ldr	r2, [r7, #20]
 800fe4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	68fa      	ldr	r2, [r7, #12]
 800fe52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	685a      	ldr	r2, [r3, #4]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	693a      	ldr	r2, [r7, #16]
 800fe60:	621a      	str	r2, [r3, #32]
}
 800fe62:	bf00      	nop
 800fe64:	371c      	adds	r7, #28
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop
 800fe70:	feff8fff 	.word	0xfeff8fff
 800fe74:	40010000 	.word	0x40010000
 800fe78:	40010400 	.word	0x40010400
 800fe7c:	40014000 	.word	0x40014000
 800fe80:	40014400 	.word	0x40014400
 800fe84:	40014800 	.word	0x40014800

0800fe88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b087      	sub	sp, #28
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6a1b      	ldr	r3, [r3, #32]
 800fe96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6a1b      	ldr	r3, [r3, #32]
 800fe9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800feb0:	68fa      	ldr	r2, [r7, #12]
 800feb2:	4b21      	ldr	r3, [pc, #132]	; (800ff38 <TIM_OC5_SetConfig+0xb0>)
 800feb4:	4013      	ands	r3, r2
 800feb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	68fa      	ldr	r2, [r7, #12]
 800febe:	4313      	orrs	r3, r2
 800fec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fec8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	689b      	ldr	r3, [r3, #8]
 800fece:	041b      	lsls	r3, r3, #16
 800fed0:	693a      	ldr	r2, [r7, #16]
 800fed2:	4313      	orrs	r3, r2
 800fed4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4a18      	ldr	r2, [pc, #96]	; (800ff3c <TIM_OC5_SetConfig+0xb4>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d00f      	beq.n	800fefe <TIM_OC5_SetConfig+0x76>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4a17      	ldr	r2, [pc, #92]	; (800ff40 <TIM_OC5_SetConfig+0xb8>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d00b      	beq.n	800fefe <TIM_OC5_SetConfig+0x76>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4a16      	ldr	r2, [pc, #88]	; (800ff44 <TIM_OC5_SetConfig+0xbc>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d007      	beq.n	800fefe <TIM_OC5_SetConfig+0x76>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4a15      	ldr	r2, [pc, #84]	; (800ff48 <TIM_OC5_SetConfig+0xc0>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d003      	beq.n	800fefe <TIM_OC5_SetConfig+0x76>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4a14      	ldr	r2, [pc, #80]	; (800ff4c <TIM_OC5_SetConfig+0xc4>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d109      	bne.n	800ff12 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ff04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	695b      	ldr	r3, [r3, #20]
 800ff0a:	021b      	lsls	r3, r3, #8
 800ff0c:	697a      	ldr	r2, [r7, #20]
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	697a      	ldr	r2, [r7, #20]
 800ff16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	685a      	ldr	r2, [r3, #4]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	693a      	ldr	r2, [r7, #16]
 800ff2a:	621a      	str	r2, [r3, #32]
}
 800ff2c:	bf00      	nop
 800ff2e:	371c      	adds	r7, #28
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr
 800ff38:	fffeff8f 	.word	0xfffeff8f
 800ff3c:	40010000 	.word	0x40010000
 800ff40:	40010400 	.word	0x40010400
 800ff44:	40014000 	.word	0x40014000
 800ff48:	40014400 	.word	0x40014400
 800ff4c:	40014800 	.word	0x40014800

0800ff50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b087      	sub	sp, #28
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a1b      	ldr	r3, [r3, #32]
 800ff5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6a1b      	ldr	r3, [r3, #32]
 800ff64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ff78:	68fa      	ldr	r2, [r7, #12]
 800ff7a:	4b22      	ldr	r3, [pc, #136]	; (8010004 <TIM_OC6_SetConfig+0xb4>)
 800ff7c:	4013      	ands	r3, r2
 800ff7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	021b      	lsls	r3, r3, #8
 800ff86:	68fa      	ldr	r2, [r7, #12]
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ff92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	689b      	ldr	r3, [r3, #8]
 800ff98:	051b      	lsls	r3, r3, #20
 800ff9a:	693a      	ldr	r2, [r7, #16]
 800ff9c:	4313      	orrs	r3, r2
 800ff9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4a19      	ldr	r2, [pc, #100]	; (8010008 <TIM_OC6_SetConfig+0xb8>)
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d00f      	beq.n	800ffc8 <TIM_OC6_SetConfig+0x78>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	4a18      	ldr	r2, [pc, #96]	; (801000c <TIM_OC6_SetConfig+0xbc>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d00b      	beq.n	800ffc8 <TIM_OC6_SetConfig+0x78>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4a17      	ldr	r2, [pc, #92]	; (8010010 <TIM_OC6_SetConfig+0xc0>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d007      	beq.n	800ffc8 <TIM_OC6_SetConfig+0x78>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	4a16      	ldr	r2, [pc, #88]	; (8010014 <TIM_OC6_SetConfig+0xc4>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d003      	beq.n	800ffc8 <TIM_OC6_SetConfig+0x78>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4a15      	ldr	r2, [pc, #84]	; (8010018 <TIM_OC6_SetConfig+0xc8>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d109      	bne.n	800ffdc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ffce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	695b      	ldr	r3, [r3, #20]
 800ffd4:	029b      	lsls	r3, r3, #10
 800ffd6:	697a      	ldr	r2, [r7, #20]
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	697a      	ldr	r2, [r7, #20]
 800ffe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	621a      	str	r2, [r3, #32]
}
 800fff6:	bf00      	nop
 800fff8:	371c      	adds	r7, #28
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop
 8010004:	feff8fff 	.word	0xfeff8fff
 8010008:	40010000 	.word	0x40010000
 801000c:	40010400 	.word	0x40010400
 8010010:	40014000 	.word	0x40014000
 8010014:	40014400 	.word	0x40014400
 8010018:	40014800 	.word	0x40014800

0801001c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801001c:	b480      	push	{r7}
 801001e:	b087      	sub	sp, #28
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	6a1b      	ldr	r3, [r3, #32]
 801002c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	6a1b      	ldr	r3, [r3, #32]
 8010032:	f023 0201 	bic.w	r2, r3, #1
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	699b      	ldr	r3, [r3, #24]
 801003e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	011b      	lsls	r3, r3, #4
 801004c:	693a      	ldr	r2, [r7, #16]
 801004e:	4313      	orrs	r3, r2
 8010050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	f023 030a 	bic.w	r3, r3, #10
 8010058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801005a:	697a      	ldr	r2, [r7, #20]
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	4313      	orrs	r3, r2
 8010060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	693a      	ldr	r2, [r7, #16]
 8010066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	697a      	ldr	r2, [r7, #20]
 801006c:	621a      	str	r2, [r3, #32]
}
 801006e:	bf00      	nop
 8010070:	371c      	adds	r7, #28
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr

0801007a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801007a:	b480      	push	{r7}
 801007c:	b087      	sub	sp, #28
 801007e:	af00      	add	r7, sp, #0
 8010080:	60f8      	str	r0, [r7, #12]
 8010082:	60b9      	str	r1, [r7, #8]
 8010084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6a1b      	ldr	r3, [r3, #32]
 8010090:	f023 0210 	bic.w	r2, r3, #16
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	699b      	ldr	r3, [r3, #24]
 801009c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80100a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	031b      	lsls	r3, r3, #12
 80100aa:	693a      	ldr	r2, [r7, #16]
 80100ac:	4313      	orrs	r3, r2
 80100ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80100b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	011b      	lsls	r3, r3, #4
 80100bc:	697a      	ldr	r2, [r7, #20]
 80100be:	4313      	orrs	r3, r2
 80100c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	693a      	ldr	r2, [r7, #16]
 80100c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	697a      	ldr	r2, [r7, #20]
 80100cc:	621a      	str	r2, [r3, #32]
}
 80100ce:	bf00      	nop
 80100d0:	371c      	adds	r7, #28
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr
	...

080100dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	689b      	ldr	r3, [r3, #8]
 80100ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	4b09      	ldr	r3, [pc, #36]	; (8010114 <TIM_ITRx_SetConfig+0x38>)
 80100f0:	4013      	ands	r3, r2
 80100f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80100f4:	683a      	ldr	r2, [r7, #0]
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	4313      	orrs	r3, r2
 80100fa:	f043 0307 	orr.w	r3, r3, #7
 80100fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	68fa      	ldr	r2, [r7, #12]
 8010104:	609a      	str	r2, [r3, #8]
}
 8010106:	bf00      	nop
 8010108:	3714      	adds	r7, #20
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr
 8010112:	bf00      	nop
 8010114:	ffcfff8f 	.word	0xffcfff8f

08010118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010118:	b480      	push	{r7}
 801011a:	b087      	sub	sp, #28
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]
 8010124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	689b      	ldr	r3, [r3, #8]
 801012a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	021a      	lsls	r2, r3, #8
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	431a      	orrs	r2, r3
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	4313      	orrs	r3, r2
 8010140:	697a      	ldr	r2, [r7, #20]
 8010142:	4313      	orrs	r3, r2
 8010144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	697a      	ldr	r2, [r7, #20]
 801014a:	609a      	str	r2, [r3, #8]
}
 801014c:	bf00      	nop
 801014e:	371c      	adds	r7, #28
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010158:	b480      	push	{r7}
 801015a:	b087      	sub	sp, #28
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	f003 031f 	and.w	r3, r3, #31
 801016a:	2201      	movs	r2, #1
 801016c:	fa02 f303 	lsl.w	r3, r2, r3
 8010170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	6a1a      	ldr	r2, [r3, #32]
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	43db      	mvns	r3, r3
 801017a:	401a      	ands	r2, r3
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6a1a      	ldr	r2, [r3, #32]
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	f003 031f 	and.w	r3, r3, #31
 801018a:	6879      	ldr	r1, [r7, #4]
 801018c:	fa01 f303 	lsl.w	r3, r1, r3
 8010190:	431a      	orrs	r2, r3
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	621a      	str	r2, [r3, #32]
}
 8010196:	bf00      	nop
 8010198:	371c      	adds	r7, #28
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr
	...

080101a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80101a4:	b480      	push	{r7}
 80101a6:	b085      	sub	sp, #20
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d101      	bne.n	80101bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80101b8:	2302      	movs	r3, #2
 80101ba:	e06d      	b.n	8010298 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2201      	movs	r2, #1
 80101c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2202      	movs	r2, #2
 80101c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4a30      	ldr	r2, [pc, #192]	; (80102a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d004      	beq.n	80101f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4a2f      	ldr	r2, [pc, #188]	; (80102a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d108      	bne.n	8010202 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80101f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	4313      	orrs	r3, r2
 8010200:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010208:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	68fa      	ldr	r2, [r7, #12]
 8010210:	4313      	orrs	r3, r2
 8010212:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4a20      	ldr	r2, [pc, #128]	; (80102a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d022      	beq.n	801026c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801022e:	d01d      	beq.n	801026c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4a1d      	ldr	r2, [pc, #116]	; (80102ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d018      	beq.n	801026c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	4a1c      	ldr	r2, [pc, #112]	; (80102b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d013      	beq.n	801026c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4a1a      	ldr	r2, [pc, #104]	; (80102b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d00e      	beq.n	801026c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4a15      	ldr	r2, [pc, #84]	; (80102a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010254:	4293      	cmp	r3, r2
 8010256:	d009      	beq.n	801026c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a16      	ldr	r2, [pc, #88]	; (80102b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d004      	beq.n	801026c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4a15      	ldr	r2, [pc, #84]	; (80102bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d10c      	bne.n	8010286 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	689b      	ldr	r3, [r3, #8]
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	4313      	orrs	r3, r2
 801027c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	68ba      	ldr	r2, [r7, #8]
 8010284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2201      	movs	r2, #1
 801028a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010296:	2300      	movs	r3, #0
}
 8010298:	4618      	mov	r0, r3
 801029a:	3714      	adds	r7, #20
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	40010000 	.word	0x40010000
 80102a8:	40010400 	.word	0x40010400
 80102ac:	40000400 	.word	0x40000400
 80102b0:	40000800 	.word	0x40000800
 80102b4:	40000c00 	.word	0x40000c00
 80102b8:	40001800 	.word	0x40001800
 80102bc:	40014000 	.word	0x40014000

080102c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b085      	sub	sp, #20
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80102ca:	2300      	movs	r3, #0
 80102cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	d101      	bne.n	80102dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80102d8:	2302      	movs	r3, #2
 80102da:	e065      	b.n	80103a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2201      	movs	r2, #1
 80102e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	68db      	ldr	r3, [r3, #12]
 80102ee:	4313      	orrs	r3, r2
 80102f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	4313      	orrs	r3, r2
 80102fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	4313      	orrs	r3, r2
 801030c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4313      	orrs	r3, r2
 801031a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	691b      	ldr	r3, [r3, #16]
 8010326:	4313      	orrs	r3, r2
 8010328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	695b      	ldr	r3, [r3, #20]
 8010334:	4313      	orrs	r3, r2
 8010336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010342:	4313      	orrs	r3, r2
 8010344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	699b      	ldr	r3, [r3, #24]
 8010350:	041b      	lsls	r3, r3, #16
 8010352:	4313      	orrs	r3, r2
 8010354:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	4a16      	ldr	r2, [pc, #88]	; (80103b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801035c:	4293      	cmp	r3, r2
 801035e:	d004      	beq.n	801036a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4a14      	ldr	r2, [pc, #80]	; (80103b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d115      	bne.n	8010396 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010374:	051b      	lsls	r3, r3, #20
 8010376:	4313      	orrs	r3, r2
 8010378:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	69db      	ldr	r3, [r3, #28]
 8010384:	4313      	orrs	r3, r2
 8010386:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	6a1b      	ldr	r3, [r3, #32]
 8010392:	4313      	orrs	r3, r2
 8010394:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	68fa      	ldr	r2, [r7, #12]
 801039c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80103a6:	2300      	movs	r3, #0
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3714      	adds	r7, #20
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr
 80103b4:	40010000 	.word	0x40010000
 80103b8:	40010400 	.word	0x40010400

080103bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80103c4:	bf00      	nop
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b083      	sub	sp, #12
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80103d8:	bf00      	nop
 80103da:	370c      	adds	r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80103ec:	bf00      	nop
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr

080103f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d101      	bne.n	801040a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010406:	2301      	movs	r3, #1
 8010408:	e042      	b.n	8010490 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010410:	2b00      	cmp	r3, #0
 8010412:	d106      	bne.n	8010422 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7f3 fc07 	bl	8003c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2224      	movs	r2, #36	; 0x24
 8010426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	681a      	ldr	r2, [r3, #0]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f022 0201 	bic.w	r2, r2, #1
 8010438:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801043e:	2b00      	cmp	r3, #0
 8010440:	d002      	beq.n	8010448 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f001 fc42 	bl	8011ccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 fed7 	bl	80111fc <UART_SetConfig>
 801044e:	4603      	mov	r3, r0
 8010450:	2b01      	cmp	r3, #1
 8010452:	d101      	bne.n	8010458 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010454:	2301      	movs	r3, #1
 8010456:	e01b      	b.n	8010490 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	685a      	ldr	r2, [r3, #4]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	689a      	ldr	r2, [r3, #8]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f042 0201 	orr.w	r2, r2, #1
 8010486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f001 fcc1 	bl	8011e10 <UART_CheckIdleState>
 801048e:	4603      	mov	r3, r0
}
 8010490:	4618      	mov	r0, r3
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b08a      	sub	sp, #40	; 0x28
 801049c:	af02      	add	r7, sp, #8
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	603b      	str	r3, [r7, #0]
 80104a4:	4613      	mov	r3, r2
 80104a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104ae:	2b20      	cmp	r3, #32
 80104b0:	d17b      	bne.n	80105aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d002      	beq.n	80104be <HAL_UART_Transmit+0x26>
 80104b8:	88fb      	ldrh	r3, [r7, #6]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d101      	bne.n	80104c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80104be:	2301      	movs	r3, #1
 80104c0:	e074      	b.n	80105ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2200      	movs	r2, #0
 80104c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2221      	movs	r2, #33	; 0x21
 80104ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80104d2:	f7f3 ff57 	bl	8004384 <HAL_GetTick>
 80104d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	88fa      	ldrh	r2, [r7, #6]
 80104dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	88fa      	ldrh	r2, [r7, #6]
 80104e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104f0:	d108      	bne.n	8010504 <HAL_UART_Transmit+0x6c>
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	691b      	ldr	r3, [r3, #16]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d104      	bne.n	8010504 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80104fa:	2300      	movs	r3, #0
 80104fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	61bb      	str	r3, [r7, #24]
 8010502:	e003      	b.n	801050c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010508:	2300      	movs	r3, #0
 801050a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801050c:	e030      	b.n	8010570 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	2200      	movs	r2, #0
 8010516:	2180      	movs	r1, #128	; 0x80
 8010518:	68f8      	ldr	r0, [r7, #12]
 801051a:	f001 fd23 	bl	8011f64 <UART_WaitOnFlagUntilTimeout>
 801051e:	4603      	mov	r3, r0
 8010520:	2b00      	cmp	r3, #0
 8010522:	d005      	beq.n	8010530 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2220      	movs	r2, #32
 8010528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801052c:	2303      	movs	r3, #3
 801052e:	e03d      	b.n	80105ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d10b      	bne.n	801054e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	881b      	ldrh	r3, [r3, #0]
 801053a:	461a      	mov	r2, r3
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010544:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	3302      	adds	r3, #2
 801054a:	61bb      	str	r3, [r7, #24]
 801054c:	e007      	b.n	801055e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	781a      	ldrb	r2, [r3, #0]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	3301      	adds	r3, #1
 801055c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010564:	b29b      	uxth	r3, r3
 8010566:	3b01      	subs	r3, #1
 8010568:	b29a      	uxth	r2, r3
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010576:	b29b      	uxth	r3, r3
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1c8      	bne.n	801050e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	9300      	str	r3, [sp, #0]
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	2200      	movs	r2, #0
 8010584:	2140      	movs	r1, #64	; 0x40
 8010586:	68f8      	ldr	r0, [r7, #12]
 8010588:	f001 fcec 	bl	8011f64 <UART_WaitOnFlagUntilTimeout>
 801058c:	4603      	mov	r3, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	d005      	beq.n	801059e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2220      	movs	r2, #32
 8010596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801059a:	2303      	movs	r3, #3
 801059c:	e006      	b.n	80105ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2220      	movs	r2, #32
 80105a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	e000      	b.n	80105ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80105aa:	2302      	movs	r3, #2
  }
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3720      	adds	r7, #32
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b08a      	sub	sp, #40	; 0x28
 80105b8:	af02      	add	r7, sp, #8
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	603b      	str	r3, [r7, #0]
 80105c0:	4613      	mov	r3, r2
 80105c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105ca:	2b20      	cmp	r3, #32
 80105cc:	f040 80b5 	bne.w	801073a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d002      	beq.n	80105dc <HAL_UART_Receive+0x28>
 80105d6:	88fb      	ldrh	r3, [r7, #6]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d101      	bne.n	80105e0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80105dc:	2301      	movs	r3, #1
 80105de:	e0ad      	b.n	801073c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2200      	movs	r2, #0
 80105e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2222      	movs	r2, #34	; 0x22
 80105ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2200      	movs	r2, #0
 80105f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80105f6:	f7f3 fec5 	bl	8004384 <HAL_GetTick>
 80105fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	88fa      	ldrh	r2, [r7, #6]
 8010600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	88fa      	ldrh	r2, [r7, #6]
 8010608:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	689b      	ldr	r3, [r3, #8]
 8010610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010614:	d10e      	bne.n	8010634 <HAL_UART_Receive+0x80>
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	691b      	ldr	r3, [r3, #16]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d105      	bne.n	801062a <HAL_UART_Receive+0x76>
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010624:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010628:	e02d      	b.n	8010686 <HAL_UART_Receive+0xd2>
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	22ff      	movs	r2, #255	; 0xff
 801062e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010632:	e028      	b.n	8010686 <HAL_UART_Receive+0xd2>
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	689b      	ldr	r3, [r3, #8]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d10d      	bne.n	8010658 <HAL_UART_Receive+0xa4>
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	691b      	ldr	r3, [r3, #16]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d104      	bne.n	801064e <HAL_UART_Receive+0x9a>
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	22ff      	movs	r2, #255	; 0xff
 8010648:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801064c:	e01b      	b.n	8010686 <HAL_UART_Receive+0xd2>
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	227f      	movs	r2, #127	; 0x7f
 8010652:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010656:	e016      	b.n	8010686 <HAL_UART_Receive+0xd2>
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	689b      	ldr	r3, [r3, #8]
 801065c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010660:	d10d      	bne.n	801067e <HAL_UART_Receive+0xca>
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d104      	bne.n	8010674 <HAL_UART_Receive+0xc0>
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	227f      	movs	r2, #127	; 0x7f
 801066e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010672:	e008      	b.n	8010686 <HAL_UART_Receive+0xd2>
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	223f      	movs	r2, #63	; 0x3f
 8010678:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801067c:	e003      	b.n	8010686 <HAL_UART_Receive+0xd2>
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2200      	movs	r2, #0
 8010682:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801068c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010696:	d108      	bne.n	80106aa <HAL_UART_Receive+0xf6>
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d104      	bne.n	80106aa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80106a0:	2300      	movs	r3, #0
 80106a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	61bb      	str	r3, [r7, #24]
 80106a8:	e003      	b.n	80106b2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80106ae:	2300      	movs	r3, #0
 80106b0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80106b2:	e036      	b.n	8010722 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	9300      	str	r3, [sp, #0]
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	2200      	movs	r2, #0
 80106bc:	2120      	movs	r1, #32
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f001 fc50 	bl	8011f64 <UART_WaitOnFlagUntilTimeout>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d005      	beq.n	80106d6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2220      	movs	r2, #32
 80106ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80106d2:	2303      	movs	r3, #3
 80106d4:	e032      	b.n	801073c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10c      	bne.n	80106f6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e2:	b29a      	uxth	r2, r3
 80106e4:	8a7b      	ldrh	r3, [r7, #18]
 80106e6:	4013      	ands	r3, r2
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	69bb      	ldr	r3, [r7, #24]
 80106ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80106ee:	69bb      	ldr	r3, [r7, #24]
 80106f0:	3302      	adds	r3, #2
 80106f2:	61bb      	str	r3, [r7, #24]
 80106f4:	e00c      	b.n	8010710 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106fc:	b2da      	uxtb	r2, r3
 80106fe:	8a7b      	ldrh	r3, [r7, #18]
 8010700:	b2db      	uxtb	r3, r3
 8010702:	4013      	ands	r3, r2
 8010704:	b2da      	uxtb	r2, r3
 8010706:	69fb      	ldr	r3, [r7, #28]
 8010708:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	3301      	adds	r3, #1
 801070e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010716:	b29b      	uxth	r3, r3
 8010718:	3b01      	subs	r3, #1
 801071a:	b29a      	uxth	r2, r3
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010728:	b29b      	uxth	r3, r3
 801072a:	2b00      	cmp	r3, #0
 801072c:	d1c2      	bne.n	80106b4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2220      	movs	r2, #32
 8010732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010736:	2300      	movs	r3, #0
 8010738:	e000      	b.n	801073c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801073a:	2302      	movs	r3, #2
  }
}
 801073c:	4618      	mov	r0, r3
 801073e:	3720      	adds	r7, #32
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b08a      	sub	sp, #40	; 0x28
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	4613      	mov	r3, r2
 8010750:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010758:	2b20      	cmp	r3, #32
 801075a:	d137      	bne.n	80107cc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d002      	beq.n	8010768 <HAL_UART_Receive_IT+0x24>
 8010762:	88fb      	ldrh	r3, [r7, #6]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d101      	bne.n	801076c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010768:	2301      	movs	r3, #1
 801076a:	e030      	b.n	80107ce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2200      	movs	r2, #0
 8010770:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4a18      	ldr	r2, [pc, #96]	; (80107d8 <HAL_UART_Receive_IT+0x94>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d01f      	beq.n	80107bc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010786:	2b00      	cmp	r3, #0
 8010788:	d018      	beq.n	80107bc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	e853 3f00 	ldrex	r3, [r3]
 8010796:	613b      	str	r3, [r7, #16]
   return(result);
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801079e:	627b      	str	r3, [r7, #36]	; 0x24
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	461a      	mov	r2, r3
 80107a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a8:	623b      	str	r3, [r7, #32]
 80107aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ac:	69f9      	ldr	r1, [r7, #28]
 80107ae:	6a3a      	ldr	r2, [r7, #32]
 80107b0:	e841 2300 	strex	r3, r2, [r1]
 80107b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d1e6      	bne.n	801078a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80107bc:	88fb      	ldrh	r3, [r7, #6]
 80107be:	461a      	mov	r2, r3
 80107c0:	68b9      	ldr	r1, [r7, #8]
 80107c2:	68f8      	ldr	r0, [r7, #12]
 80107c4:	f001 fc3c 	bl	8012040 <UART_Start_Receive_IT>
 80107c8:	4603      	mov	r3, r0
 80107ca:	e000      	b.n	80107ce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80107cc:	2302      	movs	r3, #2
  }
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3728      	adds	r7, #40	; 0x28
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	58000c00 	.word	0x58000c00

080107dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b08a      	sub	sp, #40	; 0x28
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	60b9      	str	r1, [r7, #8]
 80107e6:	4613      	mov	r3, r2
 80107e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107f0:	2b20      	cmp	r3, #32
 80107f2:	d167      	bne.n	80108c4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d002      	beq.n	8010800 <HAL_UART_Transmit_DMA+0x24>
 80107fa:	88fb      	ldrh	r3, [r7, #6]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d101      	bne.n	8010804 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010800:	2301      	movs	r3, #1
 8010802:	e060      	b.n	80108c6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	88fa      	ldrh	r2, [r7, #6]
 801080e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	88fa      	ldrh	r2, [r7, #6]
 8010816:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2200      	movs	r2, #0
 801081e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2221      	movs	r2, #33	; 0x21
 8010826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801082e:	2b00      	cmp	r3, #0
 8010830:	d028      	beq.n	8010884 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010836:	4a26      	ldr	r2, [pc, #152]	; (80108d0 <HAL_UART_Transmit_DMA+0xf4>)
 8010838:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801083e:	4a25      	ldr	r2, [pc, #148]	; (80108d4 <HAL_UART_Transmit_DMA+0xf8>)
 8010840:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010846:	4a24      	ldr	r2, [pc, #144]	; (80108d8 <HAL_UART_Transmit_DMA+0xfc>)
 8010848:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801084e:	2200      	movs	r2, #0
 8010850:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801085a:	4619      	mov	r1, r3
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	3328      	adds	r3, #40	; 0x28
 8010862:	461a      	mov	r2, r3
 8010864:	88fb      	ldrh	r3, [r7, #6]
 8010866:	f7f6 fa11 	bl	8006c8c <HAL_DMA_Start_IT>
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	d009      	beq.n	8010884 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2210      	movs	r2, #16
 8010874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2220      	movs	r2, #32
 801087c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010880:	2301      	movs	r3, #1
 8010882:	e020      	b.n	80108c6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2240      	movs	r2, #64	; 0x40
 801088a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	3308      	adds	r3, #8
 8010892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	e853 3f00 	ldrex	r3, [r3]
 801089a:	613b      	str	r3, [r7, #16]
   return(result);
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108a2:	627b      	str	r3, [r7, #36]	; 0x24
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	3308      	adds	r3, #8
 80108aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108ac:	623a      	str	r2, [r7, #32]
 80108ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b0:	69f9      	ldr	r1, [r7, #28]
 80108b2:	6a3a      	ldr	r2, [r7, #32]
 80108b4:	e841 2300 	strex	r3, r2, [r1]
 80108b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1e5      	bne.n	801088c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80108c0:	2300      	movs	r3, #0
 80108c2:	e000      	b.n	80108c6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80108c4:	2302      	movs	r3, #2
  }
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3728      	adds	r7, #40	; 0x28
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	080123d5 	.word	0x080123d5
 80108d4:	0801246b 	.word	0x0801246b
 80108d8:	08012487 	.word	0x08012487

080108dc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b09a      	sub	sp, #104	; 0x68
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108ec:	e853 3f00 	ldrex	r3, [r3]
 80108f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80108f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80108f8:	667b      	str	r3, [r7, #100]	; 0x64
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	461a      	mov	r2, r3
 8010900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010902:	657b      	str	r3, [r7, #84]	; 0x54
 8010904:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010906:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010908:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801090a:	e841 2300 	strex	r3, r2, [r1]
 801090e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010912:	2b00      	cmp	r3, #0
 8010914:	d1e6      	bne.n	80108e4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	3308      	adds	r3, #8
 801091c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801091e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010920:	e853 3f00 	ldrex	r3, [r3]
 8010924:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010928:	4b46      	ldr	r3, [pc, #280]	; (8010a44 <HAL_UART_AbortReceive+0x168>)
 801092a:	4013      	ands	r3, r2
 801092c:	663b      	str	r3, [r7, #96]	; 0x60
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	3308      	adds	r3, #8
 8010934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010936:	643a      	str	r2, [r7, #64]	; 0x40
 8010938:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801093a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801093c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801093e:	e841 2300 	strex	r3, r2, [r1]
 8010942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010946:	2b00      	cmp	r3, #0
 8010948:	d1e5      	bne.n	8010916 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801094e:	2b01      	cmp	r3, #1
 8010950:	d118      	bne.n	8010984 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010958:	6a3b      	ldr	r3, [r7, #32]
 801095a:	e853 3f00 	ldrex	r3, [r3]
 801095e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	f023 0310 	bic.w	r3, r3, #16
 8010966:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	461a      	mov	r2, r3
 801096e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010972:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010978:	e841 2300 	strex	r3, r2, [r1]
 801097c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010980:	2b00      	cmp	r3, #0
 8010982:	d1e6      	bne.n	8010952 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801098e:	2b40      	cmp	r3, #64	; 0x40
 8010990:	d13b      	bne.n	8010a0a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	3308      	adds	r3, #8
 8010998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	e853 3f00 	ldrex	r3, [r3]
 80109a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	3308      	adds	r3, #8
 80109b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80109b2:	61ba      	str	r2, [r7, #24]
 80109b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b6:	6979      	ldr	r1, [r7, #20]
 80109b8:	69ba      	ldr	r2, [r7, #24]
 80109ba:	e841 2300 	strex	r3, r2, [r1]
 80109be:	613b      	str	r3, [r7, #16]
   return(result);
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d1e5      	bne.n	8010992 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d01c      	beq.n	8010a0a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109d6:	2200      	movs	r2, #0
 80109d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7f6 fbbd 	bl	8007160 <HAL_DMA_Abort>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d00e      	beq.n	8010a0a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7f8 f842 	bl	8008a7c <HAL_DMA_GetError>
 80109f8:	4603      	mov	r3, r0
 80109fa:	2b20      	cmp	r3, #32
 80109fc:	d105      	bne.n	8010a0a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2210      	movs	r2, #16
 8010a02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8010a06:	2303      	movs	r3, #3
 8010a08:	e017      	b.n	8010a3a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	220f      	movs	r2, #15
 8010a18:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	699a      	ldr	r2, [r3, #24]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f042 0208 	orr.w	r2, r2, #8
 8010a28:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2220      	movs	r2, #32
 8010a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2200      	movs	r2, #0
 8010a36:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010a38:	2300      	movs	r3, #0
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3768      	adds	r7, #104	; 0x68
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	effffffe 	.word	0xeffffffe

08010a48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b0ba      	sub	sp, #232	; 0xe8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	69db      	ldr	r3, [r3, #28]
 8010a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	689b      	ldr	r3, [r3, #8]
 8010a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010a6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010a72:	f640 030f 	movw	r3, #2063	; 0x80f
 8010a76:	4013      	ands	r3, r2
 8010a78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d11b      	bne.n	8010abc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a88:	f003 0320 	and.w	r3, r3, #32
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d015      	beq.n	8010abc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a94:	f003 0320 	and.w	r3, r3, #32
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d105      	bne.n	8010aa8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d009      	beq.n	8010abc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f000 8377 	beq.w	80111a0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	4798      	blx	r3
      }
      return;
 8010aba:	e371      	b.n	80111a0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	f000 8123 	beq.w	8010d0c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010ac6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010aca:	4b8d      	ldr	r3, [pc, #564]	; (8010d00 <HAL_UART_IRQHandler+0x2b8>)
 8010acc:	4013      	ands	r3, r2
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010ad2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010ad6:	4b8b      	ldr	r3, [pc, #556]	; (8010d04 <HAL_UART_IRQHandler+0x2bc>)
 8010ad8:	4013      	ands	r3, r2
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f000 8116 	beq.w	8010d0c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ae4:	f003 0301 	and.w	r3, r3, #1
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d011      	beq.n	8010b10 <HAL_UART_IRQHandler+0xc8>
 8010aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d00b      	beq.n	8010b10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	2201      	movs	r2, #1
 8010afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b06:	f043 0201 	orr.w	r2, r3, #1
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b14:	f003 0302 	and.w	r3, r3, #2
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d011      	beq.n	8010b40 <HAL_UART_IRQHandler+0xf8>
 8010b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b20:	f003 0301 	and.w	r3, r3, #1
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00b      	beq.n	8010b40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2202      	movs	r2, #2
 8010b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b36:	f043 0204 	orr.w	r2, r3, #4
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b44:	f003 0304 	and.w	r3, r3, #4
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d011      	beq.n	8010b70 <HAL_UART_IRQHandler+0x128>
 8010b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b50:	f003 0301 	and.w	r3, r3, #1
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d00b      	beq.n	8010b70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2204      	movs	r2, #4
 8010b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b66:	f043 0202 	orr.w	r2, r3, #2
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b74:	f003 0308 	and.w	r3, r3, #8
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d017      	beq.n	8010bac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b80:	f003 0320 	and.w	r3, r3, #32
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d105      	bne.n	8010b94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010b88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010b8c:	4b5c      	ldr	r3, [pc, #368]	; (8010d00 <HAL_UART_IRQHandler+0x2b8>)
 8010b8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d00b      	beq.n	8010bac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	2208      	movs	r2, #8
 8010b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ba2:	f043 0208 	orr.w	r2, r3, #8
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d012      	beq.n	8010bde <HAL_UART_IRQHandler+0x196>
 8010bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d00c      	beq.n	8010bde <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bd4:	f043 0220 	orr.w	r2, r3, #32
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	f000 82dd 	beq.w	80111a4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bee:	f003 0320 	and.w	r3, r3, #32
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d013      	beq.n	8010c1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bfa:	f003 0320 	and.w	r3, r3, #32
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d105      	bne.n	8010c0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d007      	beq.n	8010c1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d003      	beq.n	8010c1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	689b      	ldr	r3, [r3, #8]
 8010c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c32:	2b40      	cmp	r3, #64	; 0x40
 8010c34:	d005      	beq.n	8010c42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010c3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d054      	beq.n	8010cec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f001 fb60 	bl	8012308 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c52:	2b40      	cmp	r3, #64	; 0x40
 8010c54:	d146      	bne.n	8010ce4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	3308      	adds	r3, #8
 8010c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c64:	e853 3f00 	ldrex	r3, [r3]
 8010c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	3308      	adds	r3, #8
 8010c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010c82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010c92:	e841 2300 	strex	r3, r2, [r1]
 8010c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1d9      	bne.n	8010c56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d017      	beq.n	8010cdc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cb2:	4a15      	ldr	r2, [pc, #84]	; (8010d08 <HAL_UART_IRQHandler+0x2c0>)
 8010cb4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7f6 fd6d 	bl	800779c <HAL_DMA_Abort_IT>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d019      	beq.n	8010cfc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010cd6:	4610      	mov	r0, r2
 8010cd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cda:	e00f      	b.n	8010cfc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f000 fa77 	bl	80111d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ce2:	e00b      	b.n	8010cfc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f000 fa73 	bl	80111d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cea:	e007      	b.n	8010cfc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f000 fa6f 	bl	80111d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010cfa:	e253      	b.n	80111a4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cfc:	bf00      	nop
    return;
 8010cfe:	e251      	b.n	80111a4 <HAL_UART_IRQHandler+0x75c>
 8010d00:	10000001 	.word	0x10000001
 8010d04:	04000120 	.word	0x04000120
 8010d08:	08012507 	.word	0x08012507

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d10:	2b01      	cmp	r3, #1
 8010d12:	f040 81e7 	bne.w	80110e4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d1a:	f003 0310 	and.w	r3, r3, #16
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f000 81e0 	beq.w	80110e4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d28:	f003 0310 	and.w	r3, r3, #16
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f000 81d9 	beq.w	80110e4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	2210      	movs	r2, #16
 8010d38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	689b      	ldr	r3, [r3, #8]
 8010d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d44:	2b40      	cmp	r3, #64	; 0x40
 8010d46:	f040 8151 	bne.w	8010fec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	4a96      	ldr	r2, [pc, #600]	; (8010fac <HAL_UART_IRQHandler+0x564>)
 8010d54:	4293      	cmp	r3, r2
 8010d56:	d068      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4a93      	ldr	r2, [pc, #588]	; (8010fb0 <HAL_UART_IRQHandler+0x568>)
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d061      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4a91      	ldr	r2, [pc, #580]	; (8010fb4 <HAL_UART_IRQHandler+0x56c>)
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d05a      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a8e      	ldr	r2, [pc, #568]	; (8010fb8 <HAL_UART_IRQHandler+0x570>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d053      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	4a8c      	ldr	r2, [pc, #560]	; (8010fbc <HAL_UART_IRQHandler+0x574>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d04c      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4a89      	ldr	r2, [pc, #548]	; (8010fc0 <HAL_UART_IRQHandler+0x578>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d045      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4a87      	ldr	r2, [pc, #540]	; (8010fc4 <HAL_UART_IRQHandler+0x57c>)
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d03e      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4a84      	ldr	r2, [pc, #528]	; (8010fc8 <HAL_UART_IRQHandler+0x580>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d037      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	4a82      	ldr	r2, [pc, #520]	; (8010fcc <HAL_UART_IRQHandler+0x584>)
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d030      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a7f      	ldr	r2, [pc, #508]	; (8010fd0 <HAL_UART_IRQHandler+0x588>)
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d029      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	4a7d      	ldr	r2, [pc, #500]	; (8010fd4 <HAL_UART_IRQHandler+0x58c>)
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d022      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	4a7a      	ldr	r2, [pc, #488]	; (8010fd8 <HAL_UART_IRQHandler+0x590>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d01b      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4a78      	ldr	r2, [pc, #480]	; (8010fdc <HAL_UART_IRQHandler+0x594>)
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	d014      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	4a75      	ldr	r2, [pc, #468]	; (8010fe0 <HAL_UART_IRQHandler+0x598>)
 8010e0a:	4293      	cmp	r3, r2
 8010e0c:	d00d      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	4a73      	ldr	r2, [pc, #460]	; (8010fe4 <HAL_UART_IRQHandler+0x59c>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d006      	beq.n	8010e2a <HAL_UART_IRQHandler+0x3e2>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	4a70      	ldr	r2, [pc, #448]	; (8010fe8 <HAL_UART_IRQHandler+0x5a0>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d106      	bne.n	8010e38 <HAL_UART_IRQHandler+0x3f0>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	e005      	b.n	8010e44 <HAL_UART_IRQHandler+0x3fc>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010e48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	f000 81ab 	beq.w	80111a8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010e58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	f080 81a3 	bcs.w	80111a8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010e68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e72:	69db      	ldr	r3, [r3, #28]
 8010e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e78:	f000 8087 	beq.w	8010f8a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e88:	e853 3f00 	ldrex	r3, [r3]
 8010e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010eaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010eb6:	e841 2300 	strex	r3, r2, [r1]
 8010eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d1da      	bne.n	8010e7c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	3308      	adds	r3, #8
 8010ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ed0:	e853 3f00 	ldrex	r3, [r3]
 8010ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ed8:	f023 0301 	bic.w	r3, r3, #1
 8010edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	3308      	adds	r3, #8
 8010ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010ef6:	e841 2300 	strex	r3, r2, [r1]
 8010efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1e1      	bne.n	8010ec6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	3308      	adds	r3, #8
 8010f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f0c:	e853 3f00 	ldrex	r3, [r3]
 8010f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	3308      	adds	r3, #8
 8010f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010f2e:	e841 2300 	strex	r3, r2, [r1]
 8010f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1e3      	bne.n	8010f02 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2220      	movs	r2, #32
 8010f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2200      	movs	r2, #0
 8010f46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f50:	e853 3f00 	ldrex	r3, [r3]
 8010f54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f58:	f023 0310 	bic.w	r3, r3, #16
 8010f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	461a      	mov	r2, r3
 8010f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f72:	e841 2300 	strex	r3, r2, [r1]
 8010f76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d1e4      	bne.n	8010f48 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7f6 f8eb 	bl	8007160 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2202      	movs	r2, #2
 8010f8e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	1ad3      	subs	r3, r2, r3
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f000 f91d 	bl	80111e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010faa:	e0fd      	b.n	80111a8 <HAL_UART_IRQHandler+0x760>
 8010fac:	40020010 	.word	0x40020010
 8010fb0:	40020028 	.word	0x40020028
 8010fb4:	40020040 	.word	0x40020040
 8010fb8:	40020058 	.word	0x40020058
 8010fbc:	40020070 	.word	0x40020070
 8010fc0:	40020088 	.word	0x40020088
 8010fc4:	400200a0 	.word	0x400200a0
 8010fc8:	400200b8 	.word	0x400200b8
 8010fcc:	40020410 	.word	0x40020410
 8010fd0:	40020428 	.word	0x40020428
 8010fd4:	40020440 	.word	0x40020440
 8010fd8:	40020458 	.word	0x40020458
 8010fdc:	40020470 	.word	0x40020470
 8010fe0:	40020488 	.word	0x40020488
 8010fe4:	400204a0 	.word	0x400204a0
 8010fe8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	1ad3      	subs	r3, r2, r3
 8010ffc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011006:	b29b      	uxth	r3, r3
 8011008:	2b00      	cmp	r3, #0
 801100a:	f000 80cf 	beq.w	80111ac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801100e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011012:	2b00      	cmp	r3, #0
 8011014:	f000 80ca 	beq.w	80111ac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011020:	e853 3f00 	ldrex	r3, [r3]
 8011024:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801102c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	461a      	mov	r2, r3
 8011036:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801103a:	647b      	str	r3, [r7, #68]	; 0x44
 801103c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801103e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011042:	e841 2300 	strex	r3, r2, [r1]
 8011046:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801104a:	2b00      	cmp	r3, #0
 801104c:	d1e4      	bne.n	8011018 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	3308      	adds	r3, #8
 8011054:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011058:	e853 3f00 	ldrex	r3, [r3]
 801105c:	623b      	str	r3, [r7, #32]
   return(result);
 801105e:	6a3a      	ldr	r2, [r7, #32]
 8011060:	4b55      	ldr	r3, [pc, #340]	; (80111b8 <HAL_UART_IRQHandler+0x770>)
 8011062:	4013      	ands	r3, r2
 8011064:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	3308      	adds	r3, #8
 801106e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011072:	633a      	str	r2, [r7, #48]	; 0x30
 8011074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801107a:	e841 2300 	strex	r3, r2, [r1]
 801107e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011082:	2b00      	cmp	r3, #0
 8011084:	d1e3      	bne.n	801104e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2220      	movs	r2, #32
 801108a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2200      	movs	r2, #0
 8011092:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2200      	movs	r2, #0
 8011098:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	e853 3f00 	ldrex	r3, [r3]
 80110a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f023 0310 	bic.w	r3, r3, #16
 80110ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	461a      	mov	r2, r3
 80110b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80110bc:	61fb      	str	r3, [r7, #28]
 80110be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110c0:	69b9      	ldr	r1, [r7, #24]
 80110c2:	69fa      	ldr	r2, [r7, #28]
 80110c4:	e841 2300 	strex	r3, r2, [r1]
 80110c8:	617b      	str	r3, [r7, #20]
   return(result);
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d1e4      	bne.n	801109a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2202      	movs	r2, #2
 80110d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80110d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80110da:	4619      	mov	r1, r3
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f000 f881 	bl	80111e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80110e2:	e063      	b.n	80111ac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80110e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d00e      	beq.n	801110e <HAL_UART_IRQHandler+0x6c6>
 80110f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80110f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d008      	beq.n	801110e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f001 ff5a 	bl	8012fc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801110c:	e051      	b.n	80111b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801110e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011116:	2b00      	cmp	r3, #0
 8011118:	d014      	beq.n	8011144 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801111a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801111e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011122:	2b00      	cmp	r3, #0
 8011124:	d105      	bne.n	8011132 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801112a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801112e:	2b00      	cmp	r3, #0
 8011130:	d008      	beq.n	8011144 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011136:	2b00      	cmp	r3, #0
 8011138:	d03a      	beq.n	80111b0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	4798      	blx	r3
    }
    return;
 8011142:	e035      	b.n	80111b0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801114c:	2b00      	cmp	r3, #0
 801114e:	d009      	beq.n	8011164 <HAL_UART_IRQHandler+0x71c>
 8011150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011158:	2b00      	cmp	r3, #0
 801115a:	d003      	beq.n	8011164 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f001 f9e8 	bl	8012532 <UART_EndTransmit_IT>
    return;
 8011162:	e026      	b.n	80111b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801116c:	2b00      	cmp	r3, #0
 801116e:	d009      	beq.n	8011184 <HAL_UART_IRQHandler+0x73c>
 8011170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011174:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011178:	2b00      	cmp	r3, #0
 801117a:	d003      	beq.n	8011184 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f001 ff33 	bl	8012fe8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011182:	e016      	b.n	80111b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801118c:	2b00      	cmp	r3, #0
 801118e:	d010      	beq.n	80111b2 <HAL_UART_IRQHandler+0x76a>
 8011190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011194:	2b00      	cmp	r3, #0
 8011196:	da0c      	bge.n	80111b2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f001 ff1b 	bl	8012fd4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801119e:	e008      	b.n	80111b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80111a0:	bf00      	nop
 80111a2:	e006      	b.n	80111b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80111a4:	bf00      	nop
 80111a6:	e004      	b.n	80111b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80111a8:	bf00      	nop
 80111aa:	e002      	b.n	80111b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80111ac:	bf00      	nop
 80111ae:	e000      	b.n	80111b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80111b0:	bf00      	nop
  }
}
 80111b2:	37e8      	adds	r7, #232	; 0xe8
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	effffffe 	.word	0xeffffffe

080111bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80111bc:	b480      	push	{r7}
 80111be:	b083      	sub	sp, #12
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80111c4:	bf00      	nop
 80111c6:	370c      	adds	r7, #12
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr

080111d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80111d0:	b480      	push	{r7}
 80111d2:	b083      	sub	sp, #12
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80111d8:	bf00      	nop
 80111da:	370c      	adds	r7, #12
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr

080111e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b083      	sub	sp, #12
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	460b      	mov	r3, r1
 80111ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80111f0:	bf00      	nop
 80111f2:	370c      	adds	r7, #12
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80111fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011200:	b092      	sub	sp, #72	; 0x48
 8011202:	af00      	add	r7, sp, #0
 8011204:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011206:	2300      	movs	r3, #0
 8011208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	689a      	ldr	r2, [r3, #8]
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	691b      	ldr	r3, [r3, #16]
 8011214:	431a      	orrs	r2, r3
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	695b      	ldr	r3, [r3, #20]
 801121a:	431a      	orrs	r2, r3
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	69db      	ldr	r3, [r3, #28]
 8011220:	4313      	orrs	r3, r2
 8011222:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	681a      	ldr	r2, [r3, #0]
 801122a:	4bbe      	ldr	r3, [pc, #760]	; (8011524 <UART_SetConfig+0x328>)
 801122c:	4013      	ands	r3, r2
 801122e:	697a      	ldr	r2, [r7, #20]
 8011230:	6812      	ldr	r2, [r2, #0]
 8011232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011234:	430b      	orrs	r3, r1
 8011236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	68da      	ldr	r2, [r3, #12]
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	430a      	orrs	r2, r1
 801124c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	699b      	ldr	r3, [r3, #24]
 8011252:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	4ab3      	ldr	r2, [pc, #716]	; (8011528 <UART_SetConfig+0x32c>)
 801125a:	4293      	cmp	r3, r2
 801125c:	d004      	beq.n	8011268 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	6a1b      	ldr	r3, [r3, #32]
 8011262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011264:	4313      	orrs	r3, r2
 8011266:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	689a      	ldr	r2, [r3, #8]
 801126e:	4baf      	ldr	r3, [pc, #700]	; (801152c <UART_SetConfig+0x330>)
 8011270:	4013      	ands	r3, r2
 8011272:	697a      	ldr	r2, [r7, #20]
 8011274:	6812      	ldr	r2, [r2, #0]
 8011276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011278:	430b      	orrs	r3, r1
 801127a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011282:	f023 010f 	bic.w	r1, r3, #15
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	430a      	orrs	r2, r1
 8011290:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	4aa6      	ldr	r2, [pc, #664]	; (8011530 <UART_SetConfig+0x334>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d177      	bne.n	801138c <UART_SetConfig+0x190>
 801129c:	4ba5      	ldr	r3, [pc, #660]	; (8011534 <UART_SetConfig+0x338>)
 801129e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80112a4:	2b28      	cmp	r3, #40	; 0x28
 80112a6:	d86d      	bhi.n	8011384 <UART_SetConfig+0x188>
 80112a8:	a201      	add	r2, pc, #4	; (adr r2, 80112b0 <UART_SetConfig+0xb4>)
 80112aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ae:	bf00      	nop
 80112b0:	08011355 	.word	0x08011355
 80112b4:	08011385 	.word	0x08011385
 80112b8:	08011385 	.word	0x08011385
 80112bc:	08011385 	.word	0x08011385
 80112c0:	08011385 	.word	0x08011385
 80112c4:	08011385 	.word	0x08011385
 80112c8:	08011385 	.word	0x08011385
 80112cc:	08011385 	.word	0x08011385
 80112d0:	0801135d 	.word	0x0801135d
 80112d4:	08011385 	.word	0x08011385
 80112d8:	08011385 	.word	0x08011385
 80112dc:	08011385 	.word	0x08011385
 80112e0:	08011385 	.word	0x08011385
 80112e4:	08011385 	.word	0x08011385
 80112e8:	08011385 	.word	0x08011385
 80112ec:	08011385 	.word	0x08011385
 80112f0:	08011365 	.word	0x08011365
 80112f4:	08011385 	.word	0x08011385
 80112f8:	08011385 	.word	0x08011385
 80112fc:	08011385 	.word	0x08011385
 8011300:	08011385 	.word	0x08011385
 8011304:	08011385 	.word	0x08011385
 8011308:	08011385 	.word	0x08011385
 801130c:	08011385 	.word	0x08011385
 8011310:	0801136d 	.word	0x0801136d
 8011314:	08011385 	.word	0x08011385
 8011318:	08011385 	.word	0x08011385
 801131c:	08011385 	.word	0x08011385
 8011320:	08011385 	.word	0x08011385
 8011324:	08011385 	.word	0x08011385
 8011328:	08011385 	.word	0x08011385
 801132c:	08011385 	.word	0x08011385
 8011330:	08011375 	.word	0x08011375
 8011334:	08011385 	.word	0x08011385
 8011338:	08011385 	.word	0x08011385
 801133c:	08011385 	.word	0x08011385
 8011340:	08011385 	.word	0x08011385
 8011344:	08011385 	.word	0x08011385
 8011348:	08011385 	.word	0x08011385
 801134c:	08011385 	.word	0x08011385
 8011350:	0801137d 	.word	0x0801137d
 8011354:	2301      	movs	r3, #1
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e222      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801135c:	2304      	movs	r3, #4
 801135e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011362:	e21e      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011364:	2308      	movs	r3, #8
 8011366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136a:	e21a      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801136c:	2310      	movs	r3, #16
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011372:	e216      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011374:	2320      	movs	r3, #32
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137a:	e212      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801137c:	2340      	movs	r3, #64	; 0x40
 801137e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011382:	e20e      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011384:	2380      	movs	r3, #128	; 0x80
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138a:	e20a      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	4a69      	ldr	r2, [pc, #420]	; (8011538 <UART_SetConfig+0x33c>)
 8011392:	4293      	cmp	r3, r2
 8011394:	d130      	bne.n	80113f8 <UART_SetConfig+0x1fc>
 8011396:	4b67      	ldr	r3, [pc, #412]	; (8011534 <UART_SetConfig+0x338>)
 8011398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801139a:	f003 0307 	and.w	r3, r3, #7
 801139e:	2b05      	cmp	r3, #5
 80113a0:	d826      	bhi.n	80113f0 <UART_SetConfig+0x1f4>
 80113a2:	a201      	add	r2, pc, #4	; (adr r2, 80113a8 <UART_SetConfig+0x1ac>)
 80113a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113a8:	080113c1 	.word	0x080113c1
 80113ac:	080113c9 	.word	0x080113c9
 80113b0:	080113d1 	.word	0x080113d1
 80113b4:	080113d9 	.word	0x080113d9
 80113b8:	080113e1 	.word	0x080113e1
 80113bc:	080113e9 	.word	0x080113e9
 80113c0:	2300      	movs	r3, #0
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e1ec      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80113c8:	2304      	movs	r3, #4
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ce:	e1e8      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80113d0:	2308      	movs	r3, #8
 80113d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d6:	e1e4      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80113d8:	2310      	movs	r3, #16
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113de:	e1e0      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80113e0:	2320      	movs	r3, #32
 80113e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e6:	e1dc      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80113e8:	2340      	movs	r3, #64	; 0x40
 80113ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ee:	e1d8      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80113f0:	2380      	movs	r3, #128	; 0x80
 80113f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f6:	e1d4      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a4f      	ldr	r2, [pc, #316]	; (801153c <UART_SetConfig+0x340>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d130      	bne.n	8011464 <UART_SetConfig+0x268>
 8011402:	4b4c      	ldr	r3, [pc, #304]	; (8011534 <UART_SetConfig+0x338>)
 8011404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011406:	f003 0307 	and.w	r3, r3, #7
 801140a:	2b05      	cmp	r3, #5
 801140c:	d826      	bhi.n	801145c <UART_SetConfig+0x260>
 801140e:	a201      	add	r2, pc, #4	; (adr r2, 8011414 <UART_SetConfig+0x218>)
 8011410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011414:	0801142d 	.word	0x0801142d
 8011418:	08011435 	.word	0x08011435
 801141c:	0801143d 	.word	0x0801143d
 8011420:	08011445 	.word	0x08011445
 8011424:	0801144d 	.word	0x0801144d
 8011428:	08011455 	.word	0x08011455
 801142c:	2300      	movs	r3, #0
 801142e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011432:	e1b6      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011434:	2304      	movs	r3, #4
 8011436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801143a:	e1b2      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801143c:	2308      	movs	r3, #8
 801143e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011442:	e1ae      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011444:	2310      	movs	r3, #16
 8011446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144a:	e1aa      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801144c:	2320      	movs	r3, #32
 801144e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011452:	e1a6      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011454:	2340      	movs	r3, #64	; 0x40
 8011456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145a:	e1a2      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801145c:	2380      	movs	r3, #128	; 0x80
 801145e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011462:	e19e      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4a35      	ldr	r2, [pc, #212]	; (8011540 <UART_SetConfig+0x344>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d130      	bne.n	80114d0 <UART_SetConfig+0x2d4>
 801146e:	4b31      	ldr	r3, [pc, #196]	; (8011534 <UART_SetConfig+0x338>)
 8011470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011472:	f003 0307 	and.w	r3, r3, #7
 8011476:	2b05      	cmp	r3, #5
 8011478:	d826      	bhi.n	80114c8 <UART_SetConfig+0x2cc>
 801147a:	a201      	add	r2, pc, #4	; (adr r2, 8011480 <UART_SetConfig+0x284>)
 801147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011480:	08011499 	.word	0x08011499
 8011484:	080114a1 	.word	0x080114a1
 8011488:	080114a9 	.word	0x080114a9
 801148c:	080114b1 	.word	0x080114b1
 8011490:	080114b9 	.word	0x080114b9
 8011494:	080114c1 	.word	0x080114c1
 8011498:	2300      	movs	r3, #0
 801149a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149e:	e180      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80114a0:	2304      	movs	r3, #4
 80114a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a6:	e17c      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80114a8:	2308      	movs	r3, #8
 80114aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ae:	e178      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80114b0:	2310      	movs	r3, #16
 80114b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b6:	e174      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80114b8:	2320      	movs	r3, #32
 80114ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114be:	e170      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80114c0:	2340      	movs	r3, #64	; 0x40
 80114c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c6:	e16c      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80114c8:	2380      	movs	r3, #128	; 0x80
 80114ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ce:	e168      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	4a1b      	ldr	r2, [pc, #108]	; (8011544 <UART_SetConfig+0x348>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d142      	bne.n	8011560 <UART_SetConfig+0x364>
 80114da:	4b16      	ldr	r3, [pc, #88]	; (8011534 <UART_SetConfig+0x338>)
 80114dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114de:	f003 0307 	and.w	r3, r3, #7
 80114e2:	2b05      	cmp	r3, #5
 80114e4:	d838      	bhi.n	8011558 <UART_SetConfig+0x35c>
 80114e6:	a201      	add	r2, pc, #4	; (adr r2, 80114ec <UART_SetConfig+0x2f0>)
 80114e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ec:	08011505 	.word	0x08011505
 80114f0:	0801150d 	.word	0x0801150d
 80114f4:	08011515 	.word	0x08011515
 80114f8:	0801151d 	.word	0x0801151d
 80114fc:	08011549 	.word	0x08011549
 8011500:	08011551 	.word	0x08011551
 8011504:	2300      	movs	r3, #0
 8011506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801150a:	e14a      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801150c:	2304      	movs	r3, #4
 801150e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011512:	e146      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011514:	2308      	movs	r3, #8
 8011516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801151a:	e142      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801151c:	2310      	movs	r3, #16
 801151e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011522:	e13e      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011524:	cfff69f3 	.word	0xcfff69f3
 8011528:	58000c00 	.word	0x58000c00
 801152c:	11fff4ff 	.word	0x11fff4ff
 8011530:	40011000 	.word	0x40011000
 8011534:	58024400 	.word	0x58024400
 8011538:	40004400 	.word	0x40004400
 801153c:	40004800 	.word	0x40004800
 8011540:	40004c00 	.word	0x40004c00
 8011544:	40005000 	.word	0x40005000
 8011548:	2320      	movs	r3, #32
 801154a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154e:	e128      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011550:	2340      	movs	r3, #64	; 0x40
 8011552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011556:	e124      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011558:	2380      	movs	r3, #128	; 0x80
 801155a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155e:	e120      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	4acb      	ldr	r2, [pc, #812]	; (8011894 <UART_SetConfig+0x698>)
 8011566:	4293      	cmp	r3, r2
 8011568:	d176      	bne.n	8011658 <UART_SetConfig+0x45c>
 801156a:	4bcb      	ldr	r3, [pc, #812]	; (8011898 <UART_SetConfig+0x69c>)
 801156c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801156e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011572:	2b28      	cmp	r3, #40	; 0x28
 8011574:	d86c      	bhi.n	8011650 <UART_SetConfig+0x454>
 8011576:	a201      	add	r2, pc, #4	; (adr r2, 801157c <UART_SetConfig+0x380>)
 8011578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801157c:	08011621 	.word	0x08011621
 8011580:	08011651 	.word	0x08011651
 8011584:	08011651 	.word	0x08011651
 8011588:	08011651 	.word	0x08011651
 801158c:	08011651 	.word	0x08011651
 8011590:	08011651 	.word	0x08011651
 8011594:	08011651 	.word	0x08011651
 8011598:	08011651 	.word	0x08011651
 801159c:	08011629 	.word	0x08011629
 80115a0:	08011651 	.word	0x08011651
 80115a4:	08011651 	.word	0x08011651
 80115a8:	08011651 	.word	0x08011651
 80115ac:	08011651 	.word	0x08011651
 80115b0:	08011651 	.word	0x08011651
 80115b4:	08011651 	.word	0x08011651
 80115b8:	08011651 	.word	0x08011651
 80115bc:	08011631 	.word	0x08011631
 80115c0:	08011651 	.word	0x08011651
 80115c4:	08011651 	.word	0x08011651
 80115c8:	08011651 	.word	0x08011651
 80115cc:	08011651 	.word	0x08011651
 80115d0:	08011651 	.word	0x08011651
 80115d4:	08011651 	.word	0x08011651
 80115d8:	08011651 	.word	0x08011651
 80115dc:	08011639 	.word	0x08011639
 80115e0:	08011651 	.word	0x08011651
 80115e4:	08011651 	.word	0x08011651
 80115e8:	08011651 	.word	0x08011651
 80115ec:	08011651 	.word	0x08011651
 80115f0:	08011651 	.word	0x08011651
 80115f4:	08011651 	.word	0x08011651
 80115f8:	08011651 	.word	0x08011651
 80115fc:	08011641 	.word	0x08011641
 8011600:	08011651 	.word	0x08011651
 8011604:	08011651 	.word	0x08011651
 8011608:	08011651 	.word	0x08011651
 801160c:	08011651 	.word	0x08011651
 8011610:	08011651 	.word	0x08011651
 8011614:	08011651 	.word	0x08011651
 8011618:	08011651 	.word	0x08011651
 801161c:	08011649 	.word	0x08011649
 8011620:	2301      	movs	r3, #1
 8011622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011626:	e0bc      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011628:	2304      	movs	r3, #4
 801162a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801162e:	e0b8      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011630:	2308      	movs	r3, #8
 8011632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011636:	e0b4      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011638:	2310      	movs	r3, #16
 801163a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801163e:	e0b0      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011640:	2320      	movs	r3, #32
 8011642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011646:	e0ac      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011648:	2340      	movs	r3, #64	; 0x40
 801164a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801164e:	e0a8      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011650:	2380      	movs	r3, #128	; 0x80
 8011652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011656:	e0a4      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	4a8f      	ldr	r2, [pc, #572]	; (801189c <UART_SetConfig+0x6a0>)
 801165e:	4293      	cmp	r3, r2
 8011660:	d130      	bne.n	80116c4 <UART_SetConfig+0x4c8>
 8011662:	4b8d      	ldr	r3, [pc, #564]	; (8011898 <UART_SetConfig+0x69c>)
 8011664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011666:	f003 0307 	and.w	r3, r3, #7
 801166a:	2b05      	cmp	r3, #5
 801166c:	d826      	bhi.n	80116bc <UART_SetConfig+0x4c0>
 801166e:	a201      	add	r2, pc, #4	; (adr r2, 8011674 <UART_SetConfig+0x478>)
 8011670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011674:	0801168d 	.word	0x0801168d
 8011678:	08011695 	.word	0x08011695
 801167c:	0801169d 	.word	0x0801169d
 8011680:	080116a5 	.word	0x080116a5
 8011684:	080116ad 	.word	0x080116ad
 8011688:	080116b5 	.word	0x080116b5
 801168c:	2300      	movs	r3, #0
 801168e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011692:	e086      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011694:	2304      	movs	r3, #4
 8011696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801169a:	e082      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801169c:	2308      	movs	r3, #8
 801169e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116a2:	e07e      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80116a4:	2310      	movs	r3, #16
 80116a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116aa:	e07a      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80116ac:	2320      	movs	r3, #32
 80116ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116b2:	e076      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80116b4:	2340      	movs	r3, #64	; 0x40
 80116b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ba:	e072      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80116bc:	2380      	movs	r3, #128	; 0x80
 80116be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116c2:	e06e      	b.n	80117a2 <UART_SetConfig+0x5a6>
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	4a75      	ldr	r2, [pc, #468]	; (80118a0 <UART_SetConfig+0x6a4>)
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d130      	bne.n	8011730 <UART_SetConfig+0x534>
 80116ce:	4b72      	ldr	r3, [pc, #456]	; (8011898 <UART_SetConfig+0x69c>)
 80116d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116d2:	f003 0307 	and.w	r3, r3, #7
 80116d6:	2b05      	cmp	r3, #5
 80116d8:	d826      	bhi.n	8011728 <UART_SetConfig+0x52c>
 80116da:	a201      	add	r2, pc, #4	; (adr r2, 80116e0 <UART_SetConfig+0x4e4>)
 80116dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e0:	080116f9 	.word	0x080116f9
 80116e4:	08011701 	.word	0x08011701
 80116e8:	08011709 	.word	0x08011709
 80116ec:	08011711 	.word	0x08011711
 80116f0:	08011719 	.word	0x08011719
 80116f4:	08011721 	.word	0x08011721
 80116f8:	2300      	movs	r3, #0
 80116fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116fe:	e050      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011700:	2304      	movs	r3, #4
 8011702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011706:	e04c      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011708:	2308      	movs	r3, #8
 801170a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801170e:	e048      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011710:	2310      	movs	r3, #16
 8011712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011716:	e044      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011718:	2320      	movs	r3, #32
 801171a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801171e:	e040      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011720:	2340      	movs	r3, #64	; 0x40
 8011722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011726:	e03c      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011728:	2380      	movs	r3, #128	; 0x80
 801172a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801172e:	e038      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	4a5b      	ldr	r2, [pc, #364]	; (80118a4 <UART_SetConfig+0x6a8>)
 8011736:	4293      	cmp	r3, r2
 8011738:	d130      	bne.n	801179c <UART_SetConfig+0x5a0>
 801173a:	4b57      	ldr	r3, [pc, #348]	; (8011898 <UART_SetConfig+0x69c>)
 801173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801173e:	f003 0307 	and.w	r3, r3, #7
 8011742:	2b05      	cmp	r3, #5
 8011744:	d826      	bhi.n	8011794 <UART_SetConfig+0x598>
 8011746:	a201      	add	r2, pc, #4	; (adr r2, 801174c <UART_SetConfig+0x550>)
 8011748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801174c:	08011765 	.word	0x08011765
 8011750:	0801176d 	.word	0x0801176d
 8011754:	08011775 	.word	0x08011775
 8011758:	0801177d 	.word	0x0801177d
 801175c:	08011785 	.word	0x08011785
 8011760:	0801178d 	.word	0x0801178d
 8011764:	2302      	movs	r3, #2
 8011766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801176a:	e01a      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801176c:	2304      	movs	r3, #4
 801176e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011772:	e016      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011774:	2308      	movs	r3, #8
 8011776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801177a:	e012      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801177c:	2310      	movs	r3, #16
 801177e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011782:	e00e      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011784:	2320      	movs	r3, #32
 8011786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801178a:	e00a      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801178c:	2340      	movs	r3, #64	; 0x40
 801178e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011792:	e006      	b.n	80117a2 <UART_SetConfig+0x5a6>
 8011794:	2380      	movs	r3, #128	; 0x80
 8011796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801179a:	e002      	b.n	80117a2 <UART_SetConfig+0x5a6>
 801179c:	2380      	movs	r3, #128	; 0x80
 801179e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	4a3f      	ldr	r2, [pc, #252]	; (80118a4 <UART_SetConfig+0x6a8>)
 80117a8:	4293      	cmp	r3, r2
 80117aa:	f040 80f8 	bne.w	801199e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80117ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80117b2:	2b20      	cmp	r3, #32
 80117b4:	dc46      	bgt.n	8011844 <UART_SetConfig+0x648>
 80117b6:	2b02      	cmp	r3, #2
 80117b8:	f2c0 8082 	blt.w	80118c0 <UART_SetConfig+0x6c4>
 80117bc:	3b02      	subs	r3, #2
 80117be:	2b1e      	cmp	r3, #30
 80117c0:	d87e      	bhi.n	80118c0 <UART_SetConfig+0x6c4>
 80117c2:	a201      	add	r2, pc, #4	; (adr r2, 80117c8 <UART_SetConfig+0x5cc>)
 80117c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c8:	0801184b 	.word	0x0801184b
 80117cc:	080118c1 	.word	0x080118c1
 80117d0:	08011853 	.word	0x08011853
 80117d4:	080118c1 	.word	0x080118c1
 80117d8:	080118c1 	.word	0x080118c1
 80117dc:	080118c1 	.word	0x080118c1
 80117e0:	08011863 	.word	0x08011863
 80117e4:	080118c1 	.word	0x080118c1
 80117e8:	080118c1 	.word	0x080118c1
 80117ec:	080118c1 	.word	0x080118c1
 80117f0:	080118c1 	.word	0x080118c1
 80117f4:	080118c1 	.word	0x080118c1
 80117f8:	080118c1 	.word	0x080118c1
 80117fc:	080118c1 	.word	0x080118c1
 8011800:	08011873 	.word	0x08011873
 8011804:	080118c1 	.word	0x080118c1
 8011808:	080118c1 	.word	0x080118c1
 801180c:	080118c1 	.word	0x080118c1
 8011810:	080118c1 	.word	0x080118c1
 8011814:	080118c1 	.word	0x080118c1
 8011818:	080118c1 	.word	0x080118c1
 801181c:	080118c1 	.word	0x080118c1
 8011820:	080118c1 	.word	0x080118c1
 8011824:	080118c1 	.word	0x080118c1
 8011828:	080118c1 	.word	0x080118c1
 801182c:	080118c1 	.word	0x080118c1
 8011830:	080118c1 	.word	0x080118c1
 8011834:	080118c1 	.word	0x080118c1
 8011838:	080118c1 	.word	0x080118c1
 801183c:	080118c1 	.word	0x080118c1
 8011840:	080118b3 	.word	0x080118b3
 8011844:	2b40      	cmp	r3, #64	; 0x40
 8011846:	d037      	beq.n	80118b8 <UART_SetConfig+0x6bc>
 8011848:	e03a      	b.n	80118c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801184a:	f7fb fce5 	bl	800d218 <HAL_RCCEx_GetD3PCLK1Freq>
 801184e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011850:	e03c      	b.n	80118cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011856:	4618      	mov	r0, r3
 8011858:	f7fb fcf4 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011860:	e034      	b.n	80118cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011862:	f107 0318 	add.w	r3, r7, #24
 8011866:	4618      	mov	r0, r3
 8011868:	f7fb fe40 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011870:	e02c      	b.n	80118cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011872:	4b09      	ldr	r3, [pc, #36]	; (8011898 <UART_SetConfig+0x69c>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	f003 0320 	and.w	r3, r3, #32
 801187a:	2b00      	cmp	r3, #0
 801187c:	d016      	beq.n	80118ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801187e:	4b06      	ldr	r3, [pc, #24]	; (8011898 <UART_SetConfig+0x69c>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	08db      	lsrs	r3, r3, #3
 8011884:	f003 0303 	and.w	r3, r3, #3
 8011888:	4a07      	ldr	r2, [pc, #28]	; (80118a8 <UART_SetConfig+0x6ac>)
 801188a:	fa22 f303 	lsr.w	r3, r2, r3
 801188e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011890:	e01c      	b.n	80118cc <UART_SetConfig+0x6d0>
 8011892:	bf00      	nop
 8011894:	40011400 	.word	0x40011400
 8011898:	58024400 	.word	0x58024400
 801189c:	40007800 	.word	0x40007800
 80118a0:	40007c00 	.word	0x40007c00
 80118a4:	58000c00 	.word	0x58000c00
 80118a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80118ac:	4b9d      	ldr	r3, [pc, #628]	; (8011b24 <UART_SetConfig+0x928>)
 80118ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118b0:	e00c      	b.n	80118cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80118b2:	4b9d      	ldr	r3, [pc, #628]	; (8011b28 <UART_SetConfig+0x92c>)
 80118b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118b6:	e009      	b.n	80118cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80118b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118be:	e005      	b.n	80118cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80118c0:	2300      	movs	r3, #0
 80118c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80118c4:	2301      	movs	r3, #1
 80118c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80118ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80118cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f000 81de 	beq.w	8011c90 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d8:	4a94      	ldr	r2, [pc, #592]	; (8011b2c <UART_SetConfig+0x930>)
 80118da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118de:	461a      	mov	r2, r3
 80118e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80118e6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	685a      	ldr	r2, [r3, #4]
 80118ec:	4613      	mov	r3, r2
 80118ee:	005b      	lsls	r3, r3, #1
 80118f0:	4413      	add	r3, r2
 80118f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d305      	bcc.n	8011904 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80118fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011900:	429a      	cmp	r2, r3
 8011902:	d903      	bls.n	801190c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011904:	2301      	movs	r3, #1
 8011906:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801190a:	e1c1      	b.n	8011c90 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801190c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801190e:	2200      	movs	r2, #0
 8011910:	60bb      	str	r3, [r7, #8]
 8011912:	60fa      	str	r2, [r7, #12]
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011918:	4a84      	ldr	r2, [pc, #528]	; (8011b2c <UART_SetConfig+0x930>)
 801191a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801191e:	b29b      	uxth	r3, r3
 8011920:	2200      	movs	r2, #0
 8011922:	603b      	str	r3, [r7, #0]
 8011924:	607a      	str	r2, [r7, #4]
 8011926:	e9d7 2300 	ldrd	r2, r3, [r7]
 801192a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801192e:	f7ee fcd7 	bl	80002e0 <__aeabi_uldivmod>
 8011932:	4602      	mov	r2, r0
 8011934:	460b      	mov	r3, r1
 8011936:	4610      	mov	r0, r2
 8011938:	4619      	mov	r1, r3
 801193a:	f04f 0200 	mov.w	r2, #0
 801193e:	f04f 0300 	mov.w	r3, #0
 8011942:	020b      	lsls	r3, r1, #8
 8011944:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011948:	0202      	lsls	r2, r0, #8
 801194a:	6979      	ldr	r1, [r7, #20]
 801194c:	6849      	ldr	r1, [r1, #4]
 801194e:	0849      	lsrs	r1, r1, #1
 8011950:	2000      	movs	r0, #0
 8011952:	460c      	mov	r4, r1
 8011954:	4605      	mov	r5, r0
 8011956:	eb12 0804 	adds.w	r8, r2, r4
 801195a:	eb43 0905 	adc.w	r9, r3, r5
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	469a      	mov	sl, r3
 8011966:	4693      	mov	fp, r2
 8011968:	4652      	mov	r2, sl
 801196a:	465b      	mov	r3, fp
 801196c:	4640      	mov	r0, r8
 801196e:	4649      	mov	r1, r9
 8011970:	f7ee fcb6 	bl	80002e0 <__aeabi_uldivmod>
 8011974:	4602      	mov	r2, r0
 8011976:	460b      	mov	r3, r1
 8011978:	4613      	mov	r3, r2
 801197a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801197c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011982:	d308      	bcc.n	8011996 <UART_SetConfig+0x79a>
 8011984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801198a:	d204      	bcs.n	8011996 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011992:	60da      	str	r2, [r3, #12]
 8011994:	e17c      	b.n	8011c90 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011996:	2301      	movs	r3, #1
 8011998:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801199c:	e178      	b.n	8011c90 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	69db      	ldr	r3, [r3, #28]
 80119a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119a6:	f040 80c5 	bne.w	8011b34 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80119aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80119ae:	2b20      	cmp	r3, #32
 80119b0:	dc48      	bgt.n	8011a44 <UART_SetConfig+0x848>
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	db7b      	blt.n	8011aae <UART_SetConfig+0x8b2>
 80119b6:	2b20      	cmp	r3, #32
 80119b8:	d879      	bhi.n	8011aae <UART_SetConfig+0x8b2>
 80119ba:	a201      	add	r2, pc, #4	; (adr r2, 80119c0 <UART_SetConfig+0x7c4>)
 80119bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119c0:	08011a4b 	.word	0x08011a4b
 80119c4:	08011a53 	.word	0x08011a53
 80119c8:	08011aaf 	.word	0x08011aaf
 80119cc:	08011aaf 	.word	0x08011aaf
 80119d0:	08011a5b 	.word	0x08011a5b
 80119d4:	08011aaf 	.word	0x08011aaf
 80119d8:	08011aaf 	.word	0x08011aaf
 80119dc:	08011aaf 	.word	0x08011aaf
 80119e0:	08011a6b 	.word	0x08011a6b
 80119e4:	08011aaf 	.word	0x08011aaf
 80119e8:	08011aaf 	.word	0x08011aaf
 80119ec:	08011aaf 	.word	0x08011aaf
 80119f0:	08011aaf 	.word	0x08011aaf
 80119f4:	08011aaf 	.word	0x08011aaf
 80119f8:	08011aaf 	.word	0x08011aaf
 80119fc:	08011aaf 	.word	0x08011aaf
 8011a00:	08011a7b 	.word	0x08011a7b
 8011a04:	08011aaf 	.word	0x08011aaf
 8011a08:	08011aaf 	.word	0x08011aaf
 8011a0c:	08011aaf 	.word	0x08011aaf
 8011a10:	08011aaf 	.word	0x08011aaf
 8011a14:	08011aaf 	.word	0x08011aaf
 8011a18:	08011aaf 	.word	0x08011aaf
 8011a1c:	08011aaf 	.word	0x08011aaf
 8011a20:	08011aaf 	.word	0x08011aaf
 8011a24:	08011aaf 	.word	0x08011aaf
 8011a28:	08011aaf 	.word	0x08011aaf
 8011a2c:	08011aaf 	.word	0x08011aaf
 8011a30:	08011aaf 	.word	0x08011aaf
 8011a34:	08011aaf 	.word	0x08011aaf
 8011a38:	08011aaf 	.word	0x08011aaf
 8011a3c:	08011aaf 	.word	0x08011aaf
 8011a40:	08011aa1 	.word	0x08011aa1
 8011a44:	2b40      	cmp	r3, #64	; 0x40
 8011a46:	d02e      	beq.n	8011aa6 <UART_SetConfig+0x8aa>
 8011a48:	e031      	b.n	8011aae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011a4a:	f7f9 fbed 	bl	800b228 <HAL_RCC_GetPCLK1Freq>
 8011a4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a50:	e033      	b.n	8011aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011a52:	f7f9 fbff 	bl	800b254 <HAL_RCC_GetPCLK2Freq>
 8011a56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a58:	e02f      	b.n	8011aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7fb fbf0 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a68:	e027      	b.n	8011aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a6a:	f107 0318 	add.w	r3, r7, #24
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fb fd3c 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a78:	e01f      	b.n	8011aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a7a:	4b2d      	ldr	r3, [pc, #180]	; (8011b30 <UART_SetConfig+0x934>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f003 0320 	and.w	r3, r3, #32
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d009      	beq.n	8011a9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011a86:	4b2a      	ldr	r3, [pc, #168]	; (8011b30 <UART_SetConfig+0x934>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	08db      	lsrs	r3, r3, #3
 8011a8c:	f003 0303 	and.w	r3, r3, #3
 8011a90:	4a24      	ldr	r2, [pc, #144]	; (8011b24 <UART_SetConfig+0x928>)
 8011a92:	fa22 f303 	lsr.w	r3, r2, r3
 8011a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011a98:	e00f      	b.n	8011aba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011a9a:	4b22      	ldr	r3, [pc, #136]	; (8011b24 <UART_SetConfig+0x928>)
 8011a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a9e:	e00c      	b.n	8011aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011aa0:	4b21      	ldr	r3, [pc, #132]	; (8011b28 <UART_SetConfig+0x92c>)
 8011aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aa4:	e009      	b.n	8011aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aac:	e005      	b.n	8011aba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011ab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f000 80e7 	beq.w	8011c90 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac6:	4a19      	ldr	r2, [pc, #100]	; (8011b2c <UART_SetConfig+0x930>)
 8011ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011acc:	461a      	mov	r2, r3
 8011ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ad4:	005a      	lsls	r2, r3, #1
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	085b      	lsrs	r3, r3, #1
 8011adc:	441a      	add	r2, r3
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ae6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aea:	2b0f      	cmp	r3, #15
 8011aec:	d916      	bls.n	8011b1c <UART_SetConfig+0x920>
 8011aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011af4:	d212      	bcs.n	8011b1c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	f023 030f 	bic.w	r3, r3, #15
 8011afe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b02:	085b      	lsrs	r3, r3, #1
 8011b04:	b29b      	uxth	r3, r3
 8011b06:	f003 0307 	and.w	r3, r3, #7
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011b0e:	4313      	orrs	r3, r2
 8011b10:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011b18:	60da      	str	r2, [r3, #12]
 8011b1a:	e0b9      	b.n	8011c90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011b22:	e0b5      	b.n	8011c90 <UART_SetConfig+0xa94>
 8011b24:	03d09000 	.word	0x03d09000
 8011b28:	003d0900 	.word	0x003d0900
 8011b2c:	08017860 	.word	0x08017860
 8011b30:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011b34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011b38:	2b20      	cmp	r3, #32
 8011b3a:	dc49      	bgt.n	8011bd0 <UART_SetConfig+0x9d4>
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	db7c      	blt.n	8011c3a <UART_SetConfig+0xa3e>
 8011b40:	2b20      	cmp	r3, #32
 8011b42:	d87a      	bhi.n	8011c3a <UART_SetConfig+0xa3e>
 8011b44:	a201      	add	r2, pc, #4	; (adr r2, 8011b4c <UART_SetConfig+0x950>)
 8011b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b4a:	bf00      	nop
 8011b4c:	08011bd7 	.word	0x08011bd7
 8011b50:	08011bdf 	.word	0x08011bdf
 8011b54:	08011c3b 	.word	0x08011c3b
 8011b58:	08011c3b 	.word	0x08011c3b
 8011b5c:	08011be7 	.word	0x08011be7
 8011b60:	08011c3b 	.word	0x08011c3b
 8011b64:	08011c3b 	.word	0x08011c3b
 8011b68:	08011c3b 	.word	0x08011c3b
 8011b6c:	08011bf7 	.word	0x08011bf7
 8011b70:	08011c3b 	.word	0x08011c3b
 8011b74:	08011c3b 	.word	0x08011c3b
 8011b78:	08011c3b 	.word	0x08011c3b
 8011b7c:	08011c3b 	.word	0x08011c3b
 8011b80:	08011c3b 	.word	0x08011c3b
 8011b84:	08011c3b 	.word	0x08011c3b
 8011b88:	08011c3b 	.word	0x08011c3b
 8011b8c:	08011c07 	.word	0x08011c07
 8011b90:	08011c3b 	.word	0x08011c3b
 8011b94:	08011c3b 	.word	0x08011c3b
 8011b98:	08011c3b 	.word	0x08011c3b
 8011b9c:	08011c3b 	.word	0x08011c3b
 8011ba0:	08011c3b 	.word	0x08011c3b
 8011ba4:	08011c3b 	.word	0x08011c3b
 8011ba8:	08011c3b 	.word	0x08011c3b
 8011bac:	08011c3b 	.word	0x08011c3b
 8011bb0:	08011c3b 	.word	0x08011c3b
 8011bb4:	08011c3b 	.word	0x08011c3b
 8011bb8:	08011c3b 	.word	0x08011c3b
 8011bbc:	08011c3b 	.word	0x08011c3b
 8011bc0:	08011c3b 	.word	0x08011c3b
 8011bc4:	08011c3b 	.word	0x08011c3b
 8011bc8:	08011c3b 	.word	0x08011c3b
 8011bcc:	08011c2d 	.word	0x08011c2d
 8011bd0:	2b40      	cmp	r3, #64	; 0x40
 8011bd2:	d02e      	beq.n	8011c32 <UART_SetConfig+0xa36>
 8011bd4:	e031      	b.n	8011c3a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011bd6:	f7f9 fb27 	bl	800b228 <HAL_RCC_GetPCLK1Freq>
 8011bda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011bdc:	e033      	b.n	8011c46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011bde:	f7f9 fb39 	bl	800b254 <HAL_RCC_GetPCLK2Freq>
 8011be2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011be4:	e02f      	b.n	8011c46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7fb fb2a 	bl	800d244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bf4:	e027      	b.n	8011c46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011bf6:	f107 0318 	add.w	r3, r7, #24
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7fb fc76 	bl	800d4ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011c00:	69fb      	ldr	r3, [r7, #28]
 8011c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c04:	e01f      	b.n	8011c46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011c06:	4b2d      	ldr	r3, [pc, #180]	; (8011cbc <UART_SetConfig+0xac0>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f003 0320 	and.w	r3, r3, #32
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d009      	beq.n	8011c26 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011c12:	4b2a      	ldr	r3, [pc, #168]	; (8011cbc <UART_SetConfig+0xac0>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	08db      	lsrs	r3, r3, #3
 8011c18:	f003 0303 	and.w	r3, r3, #3
 8011c1c:	4a28      	ldr	r2, [pc, #160]	; (8011cc0 <UART_SetConfig+0xac4>)
 8011c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8011c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011c24:	e00f      	b.n	8011c46 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011c26:	4b26      	ldr	r3, [pc, #152]	; (8011cc0 <UART_SetConfig+0xac4>)
 8011c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c2a:	e00c      	b.n	8011c46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011c2c:	4b25      	ldr	r3, [pc, #148]	; (8011cc4 <UART_SetConfig+0xac8>)
 8011c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c30:	e009      	b.n	8011c46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c38:	e005      	b.n	8011c46 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011c44:	bf00      	nop
    }

    if (pclk != 0U)
 8011c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d021      	beq.n	8011c90 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c50:	4a1d      	ldr	r2, [pc, #116]	; (8011cc8 <UART_SetConfig+0xacc>)
 8011c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c56:	461a      	mov	r2, r3
 8011c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	085b      	lsrs	r3, r3, #1
 8011c64:	441a      	add	r2, r3
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c72:	2b0f      	cmp	r3, #15
 8011c74:	d909      	bls.n	8011c8a <UART_SetConfig+0xa8e>
 8011c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c7c:	d205      	bcs.n	8011c8a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c80:	b29a      	uxth	r2, r3
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	60da      	str	r2, [r3, #12]
 8011c88:	e002      	b.n	8011c90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	2201      	movs	r2, #1
 8011c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	2201      	movs	r2, #1
 8011c9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011cac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3748      	adds	r7, #72	; 0x48
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011cba:	bf00      	nop
 8011cbc:	58024400 	.word	0x58024400
 8011cc0:	03d09000 	.word	0x03d09000
 8011cc4:	003d0900 	.word	0x003d0900
 8011cc8:	08017860 	.word	0x08017860

08011ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b083      	sub	sp, #12
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cd8:	f003 0308 	and.w	r3, r3, #8
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00a      	beq.n	8011cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	430a      	orrs	r2, r1
 8011cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cfa:	f003 0301 	and.w	r3, r3, #1
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00a      	beq.n	8011d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	430a      	orrs	r2, r1
 8011d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d1c:	f003 0302 	and.w	r3, r3, #2
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d00a      	beq.n	8011d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	430a      	orrs	r2, r1
 8011d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d3e:	f003 0304 	and.w	r3, r3, #4
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d00a      	beq.n	8011d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	430a      	orrs	r2, r1
 8011d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d60:	f003 0310 	and.w	r3, r3, #16
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d00a      	beq.n	8011d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	689b      	ldr	r3, [r3, #8]
 8011d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	430a      	orrs	r2, r1
 8011d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d82:	f003 0320 	and.w	r3, r3, #32
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d00a      	beq.n	8011da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	689b      	ldr	r3, [r3, #8]
 8011d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	430a      	orrs	r2, r1
 8011d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d01a      	beq.n	8011de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	430a      	orrs	r2, r1
 8011dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011dca:	d10a      	bne.n	8011de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	430a      	orrs	r2, r1
 8011de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d00a      	beq.n	8011e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	430a      	orrs	r2, r1
 8011e02:	605a      	str	r2, [r3, #4]
  }
}
 8011e04:	bf00      	nop
 8011e06:	370c      	adds	r7, #12
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr

08011e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b098      	sub	sp, #96	; 0x60
 8011e14:	af02      	add	r7, sp, #8
 8011e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011e20:	f7f2 fab0 	bl	8004384 <HAL_GetTick>
 8011e24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	f003 0308 	and.w	r3, r3, #8
 8011e30:	2b08      	cmp	r3, #8
 8011e32:	d12f      	bne.n	8011e94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011e38:	9300      	str	r3, [sp, #0]
 8011e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f000 f88e 	bl	8011f64 <UART_WaitOnFlagUntilTimeout>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d022      	beq.n	8011e94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e56:	e853 3f00 	ldrex	r3, [r3]
 8011e5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e62:	653b      	str	r3, [r7, #80]	; 0x50
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	461a      	mov	r2, r3
 8011e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8011e6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e74:	e841 2300 	strex	r3, r2, [r1]
 8011e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d1e6      	bne.n	8011e4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2220      	movs	r2, #32
 8011e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e90:	2303      	movs	r3, #3
 8011e92:	e063      	b.n	8011f5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f003 0304 	and.w	r3, r3, #4
 8011e9e:	2b04      	cmp	r3, #4
 8011ea0:	d149      	bne.n	8011f36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ea2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ea6:	9300      	str	r3, [sp, #0]
 8011ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f000 f857 	bl	8011f64 <UART_WaitOnFlagUntilTimeout>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d03c      	beq.n	8011f36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec4:	e853 3f00 	ldrex	r3, [r3]
 8011ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8011eca:	6a3b      	ldr	r3, [r7, #32]
 8011ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eda:	633b      	str	r3, [r7, #48]	; 0x30
 8011edc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ee2:	e841 2300 	strex	r3, r2, [r1]
 8011ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d1e6      	bne.n	8011ebc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	3308      	adds	r3, #8
 8011ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	e853 3f00 	ldrex	r3, [r3]
 8011efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f023 0301 	bic.w	r3, r3, #1
 8011f04:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	3308      	adds	r3, #8
 8011f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f0e:	61fa      	str	r2, [r7, #28]
 8011f10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f12:	69b9      	ldr	r1, [r7, #24]
 8011f14:	69fa      	ldr	r2, [r7, #28]
 8011f16:	e841 2300 	strex	r3, r2, [r1]
 8011f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d1e5      	bne.n	8011eee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2220      	movs	r2, #32
 8011f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f32:	2303      	movs	r3, #3
 8011f34:	e012      	b.n	8011f5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2220      	movs	r2, #32
 8011f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2220      	movs	r2, #32
 8011f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2200      	movs	r2, #0
 8011f56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011f5a:	2300      	movs	r3, #0
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3758      	adds	r7, #88	; 0x58
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b084      	sub	sp, #16
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	603b      	str	r3, [r7, #0]
 8011f70:	4613      	mov	r3, r2
 8011f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f74:	e04f      	b.n	8012016 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011f76:	69bb      	ldr	r3, [r7, #24]
 8011f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f7c:	d04b      	beq.n	8012016 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011f7e:	f7f2 fa01 	bl	8004384 <HAL_GetTick>
 8011f82:	4602      	mov	r2, r0
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	1ad3      	subs	r3, r2, r3
 8011f88:	69ba      	ldr	r2, [r7, #24]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d302      	bcc.n	8011f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8011f8e:	69bb      	ldr	r3, [r7, #24]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d101      	bne.n	8011f98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011f94:	2303      	movs	r3, #3
 8011f96:	e04e      	b.n	8012036 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	f003 0304 	and.w	r3, r3, #4
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d037      	beq.n	8012016 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	2b80      	cmp	r3, #128	; 0x80
 8011faa:	d034      	beq.n	8012016 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	2b40      	cmp	r3, #64	; 0x40
 8011fb0:	d031      	beq.n	8012016 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	69db      	ldr	r3, [r3, #28]
 8011fb8:	f003 0308 	and.w	r3, r3, #8
 8011fbc:	2b08      	cmp	r3, #8
 8011fbe:	d110      	bne.n	8011fe2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2208      	movs	r2, #8
 8011fc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011fc8:	68f8      	ldr	r0, [r7, #12]
 8011fca:	f000 f99d 	bl	8012308 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2208      	movs	r2, #8
 8011fd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e029      	b.n	8012036 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	69db      	ldr	r3, [r3, #28]
 8011fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ff0:	d111      	bne.n	8012016 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ffc:	68f8      	ldr	r0, [r7, #12]
 8011ffe:	f000 f983 	bl	8012308 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	2220      	movs	r2, #32
 8012006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	2200      	movs	r2, #0
 801200e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012012:	2303      	movs	r3, #3
 8012014:	e00f      	b.n	8012036 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	69da      	ldr	r2, [r3, #28]
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	4013      	ands	r3, r2
 8012020:	68ba      	ldr	r2, [r7, #8]
 8012022:	429a      	cmp	r2, r3
 8012024:	bf0c      	ite	eq
 8012026:	2301      	moveq	r3, #1
 8012028:	2300      	movne	r3, #0
 801202a:	b2db      	uxtb	r3, r3
 801202c:	461a      	mov	r2, r3
 801202e:	79fb      	ldrb	r3, [r7, #7]
 8012030:	429a      	cmp	r2, r3
 8012032:	d0a0      	beq.n	8011f76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012034:	2300      	movs	r3, #0
}
 8012036:	4618      	mov	r0, r3
 8012038:	3710      	adds	r7, #16
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
	...

08012040 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012040:	b480      	push	{r7}
 8012042:	b0a3      	sub	sp, #140	; 0x8c
 8012044:	af00      	add	r7, sp, #0
 8012046:	60f8      	str	r0, [r7, #12]
 8012048:	60b9      	str	r1, [r7, #8]
 801204a:	4613      	mov	r3, r2
 801204c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	88fa      	ldrh	r2, [r7, #6]
 8012058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	88fa      	ldrh	r2, [r7, #6]
 8012060:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	2200      	movs	r2, #0
 8012068:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	689b      	ldr	r3, [r3, #8]
 801206e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012072:	d10e      	bne.n	8012092 <UART_Start_Receive_IT+0x52>
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	691b      	ldr	r3, [r3, #16]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d105      	bne.n	8012088 <UART_Start_Receive_IT+0x48>
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012082:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012086:	e02d      	b.n	80120e4 <UART_Start_Receive_IT+0xa4>
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	22ff      	movs	r2, #255	; 0xff
 801208c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012090:	e028      	b.n	80120e4 <UART_Start_Receive_IT+0xa4>
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d10d      	bne.n	80120b6 <UART_Start_Receive_IT+0x76>
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	691b      	ldr	r3, [r3, #16]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d104      	bne.n	80120ac <UART_Start_Receive_IT+0x6c>
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	22ff      	movs	r2, #255	; 0xff
 80120a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80120aa:	e01b      	b.n	80120e4 <UART_Start_Receive_IT+0xa4>
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	227f      	movs	r2, #127	; 0x7f
 80120b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80120b4:	e016      	b.n	80120e4 <UART_Start_Receive_IT+0xa4>
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	689b      	ldr	r3, [r3, #8]
 80120ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80120be:	d10d      	bne.n	80120dc <UART_Start_Receive_IT+0x9c>
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	691b      	ldr	r3, [r3, #16]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d104      	bne.n	80120d2 <UART_Start_Receive_IT+0x92>
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	227f      	movs	r2, #127	; 0x7f
 80120cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80120d0:	e008      	b.n	80120e4 <UART_Start_Receive_IT+0xa4>
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	223f      	movs	r2, #63	; 0x3f
 80120d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80120da:	e003      	b.n	80120e4 <UART_Start_Receive_IT+0xa4>
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2200      	movs	r2, #0
 80120e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2200      	movs	r2, #0
 80120e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	2222      	movs	r2, #34	; 0x22
 80120f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	3308      	adds	r3, #8
 80120fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120fe:	e853 3f00 	ldrex	r3, [r3]
 8012102:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012106:	f043 0301 	orr.w	r3, r3, #1
 801210a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	3308      	adds	r3, #8
 8012114:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012118:	673a      	str	r2, [r7, #112]	; 0x70
 801211a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801211e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012120:	e841 2300 	strex	r3, r2, [r1]
 8012124:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8012126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1e3      	bne.n	80120f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012134:	d14f      	bne.n	80121d6 <UART_Start_Receive_IT+0x196>
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801213c:	88fa      	ldrh	r2, [r7, #6]
 801213e:	429a      	cmp	r2, r3
 8012140:	d349      	bcc.n	80121d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	689b      	ldr	r3, [r3, #8]
 8012146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801214a:	d107      	bne.n	801215c <UART_Start_Receive_IT+0x11c>
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	691b      	ldr	r3, [r3, #16]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d103      	bne.n	801215c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	4a47      	ldr	r2, [pc, #284]	; (8012274 <UART_Start_Receive_IT+0x234>)
 8012158:	675a      	str	r2, [r3, #116]	; 0x74
 801215a:	e002      	b.n	8012162 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	4a46      	ldr	r2, [pc, #280]	; (8012278 <UART_Start_Receive_IT+0x238>)
 8012160:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	691b      	ldr	r3, [r3, #16]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d01a      	beq.n	80121a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012172:	e853 3f00 	ldrex	r3, [r3]
 8012176:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801217e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	461a      	mov	r2, r3
 8012188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801218c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801218e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012190:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012194:	e841 2300 	strex	r3, r2, [r1]
 8012198:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801219a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801219c:	2b00      	cmp	r3, #0
 801219e:	d1e4      	bne.n	801216a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	3308      	adds	r3, #8
 80121a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121aa:	e853 3f00 	ldrex	r3, [r3]
 80121ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80121b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80121b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	3308      	adds	r3, #8
 80121be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80121c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80121c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80121c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121c8:	e841 2300 	strex	r3, r2, [r1]
 80121cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80121ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d1e5      	bne.n	80121a0 <UART_Start_Receive_IT+0x160>
 80121d4:	e046      	b.n	8012264 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121de:	d107      	bne.n	80121f0 <UART_Start_Receive_IT+0x1b0>
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	691b      	ldr	r3, [r3, #16]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d103      	bne.n	80121f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	4a24      	ldr	r2, [pc, #144]	; (801227c <UART_Start_Receive_IT+0x23c>)
 80121ec:	675a      	str	r2, [r3, #116]	; 0x74
 80121ee:	e002      	b.n	80121f6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	4a23      	ldr	r2, [pc, #140]	; (8012280 <UART_Start_Receive_IT+0x240>)
 80121f4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	691b      	ldr	r3, [r3, #16]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d019      	beq.n	8012232 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012206:	e853 3f00 	ldrex	r3, [r3]
 801220a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8012212:	677b      	str	r3, [r7, #116]	; 0x74
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	461a      	mov	r2, r3
 801221a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801221c:	637b      	str	r3, [r7, #52]	; 0x34
 801221e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012224:	e841 2300 	strex	r3, r2, [r1]
 8012228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222c:	2b00      	cmp	r3, #0
 801222e:	d1e6      	bne.n	80121fe <UART_Start_Receive_IT+0x1be>
 8012230:	e018      	b.n	8012264 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	e853 3f00 	ldrex	r3, [r3]
 801223e:	613b      	str	r3, [r7, #16]
   return(result);
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	f043 0320 	orr.w	r3, r3, #32
 8012246:	67bb      	str	r3, [r7, #120]	; 0x78
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	461a      	mov	r2, r3
 801224e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012250:	623b      	str	r3, [r7, #32]
 8012252:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012254:	69f9      	ldr	r1, [r7, #28]
 8012256:	6a3a      	ldr	r2, [r7, #32]
 8012258:	e841 2300 	strex	r3, r2, [r1]
 801225c:	61bb      	str	r3, [r7, #24]
   return(result);
 801225e:	69bb      	ldr	r3, [r7, #24]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d1e6      	bne.n	8012232 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012264:	2300      	movs	r3, #0
}
 8012266:	4618      	mov	r0, r3
 8012268:	378c      	adds	r7, #140	; 0x8c
 801226a:	46bd      	mov	sp, r7
 801226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012270:	4770      	bx	lr
 8012272:	bf00      	nop
 8012274:	08012c59 	.word	0x08012c59
 8012278:	080128f9 	.word	0x080128f9
 801227c:	08012741 	.word	0x08012741
 8012280:	08012589 	.word	0x08012589

08012284 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012284:	b480      	push	{r7}
 8012286:	b08f      	sub	sp, #60	; 0x3c
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012292:	6a3b      	ldr	r3, [r7, #32]
 8012294:	e853 3f00 	ldrex	r3, [r3]
 8012298:	61fb      	str	r3, [r7, #28]
   return(result);
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80122a0:	637b      	str	r3, [r7, #52]	; 0x34
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	461a      	mov	r2, r3
 80122a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122b2:	e841 2300 	strex	r3, r2, [r1]
 80122b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80122b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d1e6      	bne.n	801228c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	3308      	adds	r3, #8
 80122c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	e853 3f00 	ldrex	r3, [r3]
 80122cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80122d4:	633b      	str	r3, [r7, #48]	; 0x30
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	3308      	adds	r3, #8
 80122dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122de:	61ba      	str	r2, [r7, #24]
 80122e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122e2:	6979      	ldr	r1, [r7, #20]
 80122e4:	69ba      	ldr	r2, [r7, #24]
 80122e6:	e841 2300 	strex	r3, r2, [r1]
 80122ea:	613b      	str	r3, [r7, #16]
   return(result);
 80122ec:	693b      	ldr	r3, [r7, #16]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d1e5      	bne.n	80122be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2220      	movs	r2, #32
 80122f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80122fa:	bf00      	nop
 80122fc:	373c      	adds	r7, #60	; 0x3c
 80122fe:	46bd      	mov	sp, r7
 8012300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012304:	4770      	bx	lr
	...

08012308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012308:	b480      	push	{r7}
 801230a:	b095      	sub	sp, #84	; 0x54
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012318:	e853 3f00 	ldrex	r3, [r3]
 801231c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	461a      	mov	r2, r3
 801232c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801232e:	643b      	str	r3, [r7, #64]	; 0x40
 8012330:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012336:	e841 2300 	strex	r3, r2, [r1]
 801233a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233e:	2b00      	cmp	r3, #0
 8012340:	d1e6      	bne.n	8012310 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	3308      	adds	r3, #8
 8012348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801234a:	6a3b      	ldr	r3, [r7, #32]
 801234c:	e853 3f00 	ldrex	r3, [r3]
 8012350:	61fb      	str	r3, [r7, #28]
   return(result);
 8012352:	69fa      	ldr	r2, [r7, #28]
 8012354:	4b1e      	ldr	r3, [pc, #120]	; (80123d0 <UART_EndRxTransfer+0xc8>)
 8012356:	4013      	ands	r3, r2
 8012358:	64bb      	str	r3, [r7, #72]	; 0x48
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	3308      	adds	r3, #8
 8012360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012364:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801236a:	e841 2300 	strex	r3, r2, [r1]
 801236e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012372:	2b00      	cmp	r3, #0
 8012374:	d1e5      	bne.n	8012342 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801237a:	2b01      	cmp	r3, #1
 801237c:	d118      	bne.n	80123b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	e853 3f00 	ldrex	r3, [r3]
 801238a:	60bb      	str	r3, [r7, #8]
   return(result);
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	f023 0310 	bic.w	r3, r3, #16
 8012392:	647b      	str	r3, [r7, #68]	; 0x44
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	461a      	mov	r2, r3
 801239a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801239c:	61bb      	str	r3, [r7, #24]
 801239e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123a0:	6979      	ldr	r1, [r7, #20]
 80123a2:	69ba      	ldr	r2, [r7, #24]
 80123a4:	e841 2300 	strex	r3, r2, [r1]
 80123a8:	613b      	str	r3, [r7, #16]
   return(result);
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d1e6      	bne.n	801237e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2220      	movs	r2, #32
 80123b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2200      	movs	r2, #0
 80123bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2200      	movs	r2, #0
 80123c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80123c4:	bf00      	nop
 80123c6:	3754      	adds	r7, #84	; 0x54
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr
 80123d0:	effffffe 	.word	0xeffffffe

080123d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b090      	sub	sp, #64	; 0x40
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	69db      	ldr	r3, [r3, #28]
 80123e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80123ea:	d037      	beq.n	801245c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80123ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123ee:	2200      	movs	r2, #0
 80123f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80123f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	3308      	adds	r3, #8
 80123fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fe:	e853 3f00 	ldrex	r3, [r3]
 8012402:	623b      	str	r3, [r7, #32]
   return(result);
 8012404:	6a3b      	ldr	r3, [r7, #32]
 8012406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801240a:	63bb      	str	r3, [r7, #56]	; 0x38
 801240c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	3308      	adds	r3, #8
 8012412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012414:	633a      	str	r2, [r7, #48]	; 0x30
 8012416:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801241a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801241c:	e841 2300 	strex	r3, r2, [r1]
 8012420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012424:	2b00      	cmp	r3, #0
 8012426:	d1e5      	bne.n	80123f4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	e853 3f00 	ldrex	r3, [r3]
 8012434:	60fb      	str	r3, [r7, #12]
   return(result);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801243c:	637b      	str	r3, [r7, #52]	; 0x34
 801243e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	461a      	mov	r2, r3
 8012444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012446:	61fb      	str	r3, [r7, #28]
 8012448:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801244a:	69b9      	ldr	r1, [r7, #24]
 801244c:	69fa      	ldr	r2, [r7, #28]
 801244e:	e841 2300 	strex	r3, r2, [r1]
 8012452:	617b      	str	r3, [r7, #20]
   return(result);
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d1e6      	bne.n	8012428 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801245a:	e002      	b.n	8012462 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 801245c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801245e:	f7ef fd07 	bl	8001e70 <HAL_UART_TxCpltCallback>
}
 8012462:	bf00      	nop
 8012464:	3740      	adds	r7, #64	; 0x40
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}

0801246a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801246a:	b580      	push	{r7, lr}
 801246c:	b084      	sub	sp, #16
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012476:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012478:	68f8      	ldr	r0, [r7, #12]
 801247a:	f7fe fe9f 	bl	80111bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801247e:	bf00      	nop
 8012480:	3710      	adds	r7, #16
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}

08012486 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012486:	b580      	push	{r7, lr}
 8012488:	b086      	sub	sp, #24
 801248a:	af00      	add	r7, sp, #0
 801248c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012492:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801249a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80124a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	689b      	ldr	r3, [r3, #8]
 80124aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124ae:	2b80      	cmp	r3, #128	; 0x80
 80124b0:	d109      	bne.n	80124c6 <UART_DMAError+0x40>
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	2b21      	cmp	r3, #33	; 0x21
 80124b6:	d106      	bne.n	80124c6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	2200      	movs	r2, #0
 80124bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80124c0:	6978      	ldr	r0, [r7, #20]
 80124c2:	f7ff fedf 	bl	8012284 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124d0:	2b40      	cmp	r3, #64	; 0x40
 80124d2:	d109      	bne.n	80124e8 <UART_DMAError+0x62>
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2b22      	cmp	r3, #34	; 0x22
 80124d8:	d106      	bne.n	80124e8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	2200      	movs	r2, #0
 80124de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80124e2:	6978      	ldr	r0, [r7, #20]
 80124e4:	f7ff ff10 	bl	8012308 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124ee:	f043 0210 	orr.w	r2, r3, #16
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80124f8:	6978      	ldr	r0, [r7, #20]
 80124fa:	f7fe fe69 	bl	80111d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124fe:	bf00      	nop
 8012500:	3718      	adds	r7, #24
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012506:	b580      	push	{r7, lr}
 8012508:	b084      	sub	sp, #16
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012512:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2200      	movs	r2, #0
 8012518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	2200      	movs	r2, #0
 8012520:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012524:	68f8      	ldr	r0, [r7, #12]
 8012526:	f7fe fe53 	bl	80111d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801252a:	bf00      	nop
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}

08012532 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012532:	b580      	push	{r7, lr}
 8012534:	b088      	sub	sp, #32
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	e853 3f00 	ldrex	r3, [r3]
 8012546:	60bb      	str	r3, [r7, #8]
   return(result);
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801254e:	61fb      	str	r3, [r7, #28]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	461a      	mov	r2, r3
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	61bb      	str	r3, [r7, #24]
 801255a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801255c:	6979      	ldr	r1, [r7, #20]
 801255e:	69ba      	ldr	r2, [r7, #24]
 8012560:	e841 2300 	strex	r3, r2, [r1]
 8012564:	613b      	str	r3, [r7, #16]
   return(result);
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d1e6      	bne.n	801253a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2220      	movs	r2, #32
 8012570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2200      	movs	r2, #0
 8012578:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f7ef fc78 	bl	8001e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012580:	bf00      	nop
 8012582:	3720      	adds	r7, #32
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b09c      	sub	sp, #112	; 0x70
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012596:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80125a0:	2b22      	cmp	r3, #34	; 0x22
 80125a2:	f040 80be 	bne.w	8012722 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80125b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80125b4:	b2d9      	uxtb	r1, r3
 80125b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80125ba:	b2da      	uxtb	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125c0:	400a      	ands	r2, r1
 80125c2:	b2d2      	uxtb	r2, r2
 80125c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125ca:	1c5a      	adds	r2, r3, #1
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	3b01      	subs	r3, #1
 80125da:	b29a      	uxth	r2, r3
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	f040 80a1 	bne.w	8012732 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125f8:	e853 3f00 	ldrex	r3, [r3]
 80125fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80125fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012604:	66bb      	str	r3, [r7, #104]	; 0x68
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	461a      	mov	r2, r3
 801260c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801260e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012610:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012612:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012616:	e841 2300 	strex	r3, r2, [r1]
 801261a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801261c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801261e:	2b00      	cmp	r3, #0
 8012620:	d1e6      	bne.n	80125f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	3308      	adds	r3, #8
 8012628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262c:	e853 3f00 	ldrex	r3, [r3]
 8012630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012634:	f023 0301 	bic.w	r3, r3, #1
 8012638:	667b      	str	r3, [r7, #100]	; 0x64
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	3308      	adds	r3, #8
 8012640:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012642:	647a      	str	r2, [r7, #68]	; 0x44
 8012644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801264a:	e841 2300 	strex	r3, r2, [r1]
 801264e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012652:	2b00      	cmp	r3, #0
 8012654:	d1e5      	bne.n	8012622 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2220      	movs	r2, #32
 801265a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2200      	movs	r2, #0
 8012662:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	4a33      	ldr	r2, [pc, #204]	; (801273c <UART_RxISR_8BIT+0x1b4>)
 8012670:	4293      	cmp	r3, r2
 8012672:	d01f      	beq.n	80126b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	685b      	ldr	r3, [r3, #4]
 801267a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801267e:	2b00      	cmp	r3, #0
 8012680:	d018      	beq.n	80126b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268a:	e853 3f00 	ldrex	r3, [r3]
 801268e:	623b      	str	r3, [r7, #32]
   return(result);
 8012690:	6a3b      	ldr	r3, [r7, #32]
 8012692:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012696:	663b      	str	r3, [r7, #96]	; 0x60
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	461a      	mov	r2, r3
 801269e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80126a0:	633b      	str	r3, [r7, #48]	; 0x30
 80126a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80126a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126a8:	e841 2300 	strex	r3, r2, [r1]
 80126ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80126ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d1e6      	bne.n	8012682 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	d12e      	bne.n	801271a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2200      	movs	r2, #0
 80126c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	e853 3f00 	ldrex	r3, [r3]
 80126ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	f023 0310 	bic.w	r3, r3, #16
 80126d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	461a      	mov	r2, r3
 80126de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80126e0:	61fb      	str	r3, [r7, #28]
 80126e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126e4:	69b9      	ldr	r1, [r7, #24]
 80126e6:	69fa      	ldr	r2, [r7, #28]
 80126e8:	e841 2300 	strex	r3, r2, [r1]
 80126ec:	617b      	str	r3, [r7, #20]
   return(result);
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d1e6      	bne.n	80126c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	69db      	ldr	r3, [r3, #28]
 80126fa:	f003 0310 	and.w	r3, r3, #16
 80126fe:	2b10      	cmp	r3, #16
 8012700:	d103      	bne.n	801270a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	2210      	movs	r2, #16
 8012708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012710:	4619      	mov	r1, r3
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7fe fd66 	bl	80111e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012718:	e00b      	b.n	8012732 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7ee ff56 	bl	80015cc <HAL_UART_RxCpltCallback>
}
 8012720:	e007      	b.n	8012732 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	699a      	ldr	r2, [r3, #24]
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	f042 0208 	orr.w	r2, r2, #8
 8012730:	619a      	str	r2, [r3, #24]
}
 8012732:	bf00      	nop
 8012734:	3770      	adds	r7, #112	; 0x70
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}
 801273a:	bf00      	nop
 801273c:	58000c00 	.word	0x58000c00

08012740 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b09c      	sub	sp, #112	; 0x70
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801274e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012758:	2b22      	cmp	r3, #34	; 0x22
 801275a:	f040 80be 	bne.w	80128da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012764:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801276c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801276e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012772:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012776:	4013      	ands	r3, r2
 8012778:	b29a      	uxth	r2, r3
 801277a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801277c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012782:	1c9a      	adds	r2, r3, #2
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801278e:	b29b      	uxth	r3, r3
 8012790:	3b01      	subs	r3, #1
 8012792:	b29a      	uxth	r2, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127a0:	b29b      	uxth	r3, r3
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f040 80a1 	bne.w	80128ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127b0:	e853 3f00 	ldrex	r3, [r3]
 80127b4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80127b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80127bc:	667b      	str	r3, [r7, #100]	; 0x64
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	461a      	mov	r2, r3
 80127c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80127c6:	657b      	str	r3, [r7, #84]	; 0x54
 80127c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80127ce:	e841 2300 	strex	r3, r2, [r1]
 80127d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80127d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d1e6      	bne.n	80127a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	3308      	adds	r3, #8
 80127e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127e4:	e853 3f00 	ldrex	r3, [r3]
 80127e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80127ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ec:	f023 0301 	bic.w	r3, r3, #1
 80127f0:	663b      	str	r3, [r7, #96]	; 0x60
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	3308      	adds	r3, #8
 80127f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80127fa:	643a      	str	r2, [r7, #64]	; 0x40
 80127fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012802:	e841 2300 	strex	r3, r2, [r1]
 8012806:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801280a:	2b00      	cmp	r3, #0
 801280c:	d1e5      	bne.n	80127da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2220      	movs	r2, #32
 8012812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	2200      	movs	r2, #0
 801281a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2200      	movs	r2, #0
 8012820:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	4a33      	ldr	r2, [pc, #204]	; (80128f4 <UART_RxISR_16BIT+0x1b4>)
 8012828:	4293      	cmp	r3, r2
 801282a:	d01f      	beq.n	801286c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012836:	2b00      	cmp	r3, #0
 8012838:	d018      	beq.n	801286c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012840:	6a3b      	ldr	r3, [r7, #32]
 8012842:	e853 3f00 	ldrex	r3, [r3]
 8012846:	61fb      	str	r3, [r7, #28]
   return(result);
 8012848:	69fb      	ldr	r3, [r7, #28]
 801284a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801284e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	461a      	mov	r2, r3
 8012856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012858:	62fb      	str	r3, [r7, #44]	; 0x2c
 801285a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801285c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801285e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012860:	e841 2300 	strex	r3, r2, [r1]
 8012864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012868:	2b00      	cmp	r3, #0
 801286a:	d1e6      	bne.n	801283a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012870:	2b01      	cmp	r3, #1
 8012872:	d12e      	bne.n	80128d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2200      	movs	r2, #0
 8012878:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	e853 3f00 	ldrex	r3, [r3]
 8012886:	60bb      	str	r3, [r7, #8]
   return(result);
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	f023 0310 	bic.w	r3, r3, #16
 801288e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	461a      	mov	r2, r3
 8012896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012898:	61bb      	str	r3, [r7, #24]
 801289a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801289c:	6979      	ldr	r1, [r7, #20]
 801289e:	69ba      	ldr	r2, [r7, #24]
 80128a0:	e841 2300 	strex	r3, r2, [r1]
 80128a4:	613b      	str	r3, [r7, #16]
   return(result);
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d1e6      	bne.n	801287a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	69db      	ldr	r3, [r3, #28]
 80128b2:	f003 0310 	and.w	r3, r3, #16
 80128b6:	2b10      	cmp	r3, #16
 80128b8:	d103      	bne.n	80128c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	2210      	movs	r2, #16
 80128c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80128c8:	4619      	mov	r1, r3
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f7fe fc8a 	bl	80111e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80128d0:	e00b      	b.n	80128ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f7ee fe7a 	bl	80015cc <HAL_UART_RxCpltCallback>
}
 80128d8:	e007      	b.n	80128ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	699a      	ldr	r2, [r3, #24]
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	f042 0208 	orr.w	r2, r2, #8
 80128e8:	619a      	str	r2, [r3, #24]
}
 80128ea:	bf00      	nop
 80128ec:	3770      	adds	r7, #112	; 0x70
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	58000c00 	.word	0x58000c00

080128f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b0ac      	sub	sp, #176	; 0xb0
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012906:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	69db      	ldr	r3, [r3, #28]
 8012910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	689b      	ldr	r3, [r3, #8]
 8012924:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801292e:	2b22      	cmp	r3, #34	; 0x22
 8012930:	f040 8180 	bne.w	8012c34 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801293a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801293e:	e123      	b.n	8012b88 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012946:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801294a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801294e:	b2d9      	uxtb	r1, r3
 8012950:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012954:	b2da      	uxtb	r2, r3
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801295a:	400a      	ands	r2, r1
 801295c:	b2d2      	uxtb	r2, r2
 801295e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012964:	1c5a      	adds	r2, r3, #1
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012970:	b29b      	uxth	r3, r3
 8012972:	3b01      	subs	r3, #1
 8012974:	b29a      	uxth	r2, r3
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	69db      	ldr	r3, [r3, #28]
 8012982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801298a:	f003 0307 	and.w	r3, r3, #7
 801298e:	2b00      	cmp	r3, #0
 8012990:	d053      	beq.n	8012a3a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012996:	f003 0301 	and.w	r3, r3, #1
 801299a:	2b00      	cmp	r3, #0
 801299c:	d011      	beq.n	80129c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801299e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80129a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d00b      	beq.n	80129c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2201      	movs	r2, #1
 80129b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129b8:	f043 0201 	orr.w	r2, r3, #1
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80129c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80129c6:	f003 0302 	and.w	r3, r3, #2
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d011      	beq.n	80129f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80129ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80129d2:	f003 0301 	and.w	r3, r3, #1
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d00b      	beq.n	80129f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	2202      	movs	r2, #2
 80129e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129e8:	f043 0204 	orr.w	r2, r3, #4
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80129f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80129f6:	f003 0304 	and.w	r3, r3, #4
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d011      	beq.n	8012a22 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80129fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012a02:	f003 0301 	and.w	r3, r3, #1
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d00b      	beq.n	8012a22 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	2204      	movs	r2, #4
 8012a10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a18:	f043 0202 	orr.w	r2, r3, #2
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d006      	beq.n	8012a3a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f7fe fbcf 	bl	80111d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2200      	movs	r2, #0
 8012a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a40:	b29b      	uxth	r3, r3
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	f040 80a0 	bne.w	8012b88 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a50:	e853 3f00 	ldrex	r3, [r3]
 8012a54:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	461a      	mov	r2, r3
 8012a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012a6c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012a70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012a72:	e841 2300 	strex	r3, r2, [r1]
 8012a76:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d1e4      	bne.n	8012a48 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	3308      	adds	r3, #8
 8012a84:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a88:	e853 3f00 	ldrex	r3, [r3]
 8012a8c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012a8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a90:	4b6e      	ldr	r3, [pc, #440]	; (8012c4c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012a92:	4013      	ands	r3, r2
 8012a94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	3308      	adds	r3, #8
 8012a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012aa2:	66ba      	str	r2, [r7, #104]	; 0x68
 8012aa4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aa6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012aa8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012aaa:	e841 2300 	strex	r3, r2, [r1]
 8012aae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d1e3      	bne.n	8012a7e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2220      	movs	r2, #32
 8012aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	4a60      	ldr	r2, [pc, #384]	; (8012c50 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012ad0:	4293      	cmp	r3, r2
 8012ad2:	d021      	beq.n	8012b18 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d01a      	beq.n	8012b18 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012aea:	e853 3f00 	ldrex	r3, [r3]
 8012aee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012af2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	461a      	mov	r2, r3
 8012b00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012b04:	657b      	str	r3, [r7, #84]	; 0x54
 8012b06:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012b0c:	e841 2300 	strex	r3, r2, [r1]
 8012b10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d1e4      	bne.n	8012ae2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b1c:	2b01      	cmp	r3, #1
 8012b1e:	d130      	bne.n	8012b82 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2200      	movs	r2, #0
 8012b24:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b2e:	e853 3f00 	ldrex	r3, [r3]
 8012b32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b36:	f023 0310 	bic.w	r3, r3, #16
 8012b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	461a      	mov	r2, r3
 8012b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012b48:	643b      	str	r3, [r7, #64]	; 0x40
 8012b4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012b50:	e841 2300 	strex	r3, r2, [r1]
 8012b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d1e4      	bne.n	8012b26 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	69db      	ldr	r3, [r3, #28]
 8012b62:	f003 0310 	and.w	r3, r3, #16
 8012b66:	2b10      	cmp	r3, #16
 8012b68:	d103      	bne.n	8012b72 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	2210      	movs	r2, #16
 8012b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012b78:	4619      	mov	r1, r3
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f7fe fb32 	bl	80111e4 <HAL_UARTEx_RxEventCallback>
 8012b80:	e002      	b.n	8012b88 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f7ee fd22 	bl	80015cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012b88:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d006      	beq.n	8012b9e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012b94:	f003 0320 	and.w	r3, r3, #32
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	f47f aed1 	bne.w	8012940 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ba4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012ba8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d049      	beq.n	8012c44 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012bb6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d242      	bcs.n	8012c44 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	3308      	adds	r3, #8
 8012bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bc6:	6a3b      	ldr	r3, [r7, #32]
 8012bc8:	e853 3f00 	ldrex	r3, [r3]
 8012bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8012bce:	69fb      	ldr	r3, [r7, #28]
 8012bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	3308      	adds	r3, #8
 8012bde:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bea:	e841 2300 	strex	r3, r2, [r1]
 8012bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d1e3      	bne.n	8012bbe <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	4a16      	ldr	r2, [pc, #88]	; (8012c54 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012bfa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	e853 3f00 	ldrex	r3, [r3]
 8012c08:	60bb      	str	r3, [r7, #8]
   return(result);
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	f043 0320 	orr.w	r3, r3, #32
 8012c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	461a      	mov	r2, r3
 8012c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012c1e:	61bb      	str	r3, [r7, #24]
 8012c20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c22:	6979      	ldr	r1, [r7, #20]
 8012c24:	69ba      	ldr	r2, [r7, #24]
 8012c26:	e841 2300 	strex	r3, r2, [r1]
 8012c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d1e4      	bne.n	8012bfc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012c32:	e007      	b.n	8012c44 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	699a      	ldr	r2, [r3, #24]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f042 0208 	orr.w	r2, r2, #8
 8012c42:	619a      	str	r2, [r3, #24]
}
 8012c44:	bf00      	nop
 8012c46:	37b0      	adds	r7, #176	; 0xb0
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	effffffe 	.word	0xeffffffe
 8012c50:	58000c00 	.word	0x58000c00
 8012c54:	08012589 	.word	0x08012589

08012c58 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b0ae      	sub	sp, #184	; 0xb8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c66:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	69db      	ldr	r3, [r3, #28]
 8012c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	689b      	ldr	r3, [r3, #8]
 8012c84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012c8e:	2b22      	cmp	r3, #34	; 0x22
 8012c90:	f040 8184 	bne.w	8012f9c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c9a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c9e:	e127      	b.n	8012ef0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ca6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012cb2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012cb6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012cba:	4013      	ands	r3, r2
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012cc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cc8:	1c9a      	adds	r2, r3, #2
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	3b01      	subs	r3, #1
 8012cd8:	b29a      	uxth	r2, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	69db      	ldr	r3, [r3, #28]
 8012ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012cee:	f003 0307 	and.w	r3, r3, #7
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d053      	beq.n	8012d9e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012cf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012cfa:	f003 0301 	and.w	r3, r3, #1
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d011      	beq.n	8012d26 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d00b      	beq.n	8012d26 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	2201      	movs	r2, #1
 8012d14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d1c:	f043 0201 	orr.w	r2, r3, #1
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012d26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012d2a:	f003 0302 	and.w	r3, r3, #2
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d011      	beq.n	8012d56 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012d32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012d36:	f003 0301 	and.w	r3, r3, #1
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d00b      	beq.n	8012d56 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	2202      	movs	r2, #2
 8012d44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d4c:	f043 0204 	orr.w	r2, r3, #4
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012d5a:	f003 0304 	and.w	r3, r3, #4
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d011      	beq.n	8012d86 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012d62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012d66:	f003 0301 	and.w	r3, r3, #1
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d00b      	beq.n	8012d86 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2204      	movs	r2, #4
 8012d74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d7c:	f043 0202 	orr.w	r2, r3, #2
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d006      	beq.n	8012d9e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f7fe fa1d 	bl	80111d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2200      	movs	r2, #0
 8012d9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012da4:	b29b      	uxth	r3, r3
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	f040 80a2 	bne.w	8012ef0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012db4:	e853 3f00 	ldrex	r3, [r3]
 8012db8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	461a      	mov	r2, r3
 8012dca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012dda:	e841 2300 	strex	r3, r2, [r1]
 8012dde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d1e2      	bne.n	8012dac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	3308      	adds	r3, #8
 8012dec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012df0:	e853 3f00 	ldrex	r3, [r3]
 8012df4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012df6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012df8:	4b6e      	ldr	r3, [pc, #440]	; (8012fb4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012dfa:	4013      	ands	r3, r2
 8012dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	3308      	adds	r3, #8
 8012e06:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012e0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012e0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012e10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012e12:	e841 2300 	strex	r3, r2, [r1]
 8012e16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d1e3      	bne.n	8012de6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2220      	movs	r2, #32
 8012e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2200      	movs	r2, #0
 8012e30:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	4a60      	ldr	r2, [pc, #384]	; (8012fb8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d021      	beq.n	8012e80 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d01a      	beq.n	8012e80 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e52:	e853 3f00 	ldrex	r3, [r3]
 8012e56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	461a      	mov	r2, r3
 8012e68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012e6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8012e6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012e74:	e841 2300 	strex	r3, r2, [r1]
 8012e78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d1e4      	bne.n	8012e4a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	d130      	bne.n	8012eea <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e96:	e853 3f00 	ldrex	r3, [r3]
 8012e9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e9e:	f023 0310 	bic.w	r3, r3, #16
 8012ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	461a      	mov	r2, r3
 8012eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8012eb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012eb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012eb8:	e841 2300 	strex	r3, r2, [r1]
 8012ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d1e4      	bne.n	8012e8e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	69db      	ldr	r3, [r3, #28]
 8012eca:	f003 0310 	and.w	r3, r3, #16
 8012ece:	2b10      	cmp	r3, #16
 8012ed0:	d103      	bne.n	8012eda <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	2210      	movs	r2, #16
 8012ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f7fe f97e 	bl	80111e4 <HAL_UARTEx_RxEventCallback>
 8012ee8:	e002      	b.n	8012ef0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f7ee fb6e 	bl	80015cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012ef0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d006      	beq.n	8012f06 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012ef8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012efc:	f003 0320 	and.w	r3, r3, #32
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	f47f aecd 	bne.w	8012ca0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f0c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012f10:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d049      	beq.n	8012fac <UART_RxISR_16BIT_FIFOEN+0x354>
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012f1e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d242      	bcs.n	8012fac <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	3308      	adds	r3, #8
 8012f2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f30:	e853 3f00 	ldrex	r3, [r3]
 8012f34:	623b      	str	r3, [r7, #32]
   return(result);
 8012f36:	6a3b      	ldr	r3, [r7, #32]
 8012f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	3308      	adds	r3, #8
 8012f46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012f4a:	633a      	str	r2, [r7, #48]	; 0x30
 8012f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f52:	e841 2300 	strex	r3, r2, [r1]
 8012f56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d1e3      	bne.n	8012f26 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	4a16      	ldr	r2, [pc, #88]	; (8012fbc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012f62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	e853 3f00 	ldrex	r3, [r3]
 8012f70:	60fb      	str	r3, [r7, #12]
   return(result);
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	f043 0320 	orr.w	r3, r3, #32
 8012f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	461a      	mov	r2, r3
 8012f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012f86:	61fb      	str	r3, [r7, #28]
 8012f88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f8a:	69b9      	ldr	r1, [r7, #24]
 8012f8c:	69fa      	ldr	r2, [r7, #28]
 8012f8e:	e841 2300 	strex	r3, r2, [r1]
 8012f92:	617b      	str	r3, [r7, #20]
   return(result);
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d1e4      	bne.n	8012f64 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012f9a:	e007      	b.n	8012fac <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	699a      	ldr	r2, [r3, #24]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	f042 0208 	orr.w	r2, r2, #8
 8012faa:	619a      	str	r2, [r3, #24]
}
 8012fac:	bf00      	nop
 8012fae:	37b8      	adds	r7, #184	; 0xb8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	effffffe 	.word	0xeffffffe
 8012fb8:	58000c00 	.word	0x58000c00
 8012fbc:	08012741 	.word	0x08012741

08012fc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012fc0:	b480      	push	{r7}
 8012fc2:	b083      	sub	sp, #12
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012fc8:	bf00      	nop
 8012fca:	370c      	adds	r7, #12
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd2:	4770      	bx	lr

08012fd4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012fdc:	bf00      	nop
 8012fde:	370c      	adds	r7, #12
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe6:	4770      	bx	lr

08012fe8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b083      	sub	sp, #12
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012ff0:	bf00      	nop
 8012ff2:	370c      	adds	r7, #12
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr

08012ffc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012ffc:	b480      	push	{r7}
 8012ffe:	b085      	sub	sp, #20
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801300a:	2b01      	cmp	r3, #1
 801300c:	d101      	bne.n	8013012 <HAL_UARTEx_DisableFifoMode+0x16>
 801300e:	2302      	movs	r3, #2
 8013010:	e027      	b.n	8013062 <HAL_UARTEx_DisableFifoMode+0x66>
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2201      	movs	r2, #1
 8013016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2224      	movs	r2, #36	; 0x24
 801301e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	f022 0201 	bic.w	r2, r2, #1
 8013038:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013040:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2200      	movs	r2, #0
 8013046:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	68fa      	ldr	r2, [r7, #12]
 801304e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2220      	movs	r2, #32
 8013054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2200      	movs	r2, #0
 801305c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013060:	2300      	movs	r3, #0
}
 8013062:	4618      	mov	r0, r3
 8013064:	3714      	adds	r7, #20
 8013066:	46bd      	mov	sp, r7
 8013068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306c:	4770      	bx	lr

0801306e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801306e:	b580      	push	{r7, lr}
 8013070:	b084      	sub	sp, #16
 8013072:	af00      	add	r7, sp, #0
 8013074:	6078      	str	r0, [r7, #4]
 8013076:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801307e:	2b01      	cmp	r3, #1
 8013080:	d101      	bne.n	8013086 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013082:	2302      	movs	r3, #2
 8013084:	e02d      	b.n	80130e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2201      	movs	r2, #1
 801308a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2224      	movs	r2, #36	; 0x24
 8013092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f022 0201 	bic.w	r2, r2, #1
 80130ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	689b      	ldr	r3, [r3, #8]
 80130b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	683a      	ldr	r2, [r7, #0]
 80130be:	430a      	orrs	r2, r1
 80130c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f000 f850 	bl	8013168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	68fa      	ldr	r2, [r7, #12]
 80130ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2220      	movs	r2, #32
 80130d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2200      	movs	r2, #0
 80130dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80130e0:	2300      	movs	r3, #0
}
 80130e2:	4618      	mov	r0, r3
 80130e4:	3710      	adds	r7, #16
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}

080130ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80130ea:	b580      	push	{r7, lr}
 80130ec:	b084      	sub	sp, #16
 80130ee:	af00      	add	r7, sp, #0
 80130f0:	6078      	str	r0, [r7, #4]
 80130f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80130fa:	2b01      	cmp	r3, #1
 80130fc:	d101      	bne.n	8013102 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80130fe:	2302      	movs	r3, #2
 8013100:	e02d      	b.n	801315e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2201      	movs	r2, #1
 8013106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2224      	movs	r2, #36	; 0x24
 801310e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	f022 0201 	bic.w	r2, r2, #1
 8013128:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	683a      	ldr	r2, [r7, #0]
 801313a:	430a      	orrs	r2, r1
 801313c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f000 f812 	bl	8013168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2220      	movs	r2, #32
 8013150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2200      	movs	r2, #0
 8013158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801315c:	2300      	movs	r3, #0
}
 801315e:	4618      	mov	r0, r3
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}
	...

08013168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013168:	b480      	push	{r7}
 801316a:	b085      	sub	sp, #20
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013174:	2b00      	cmp	r3, #0
 8013176:	d108      	bne.n	801318a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2201      	movs	r2, #1
 801317c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2201      	movs	r2, #1
 8013184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013188:	e031      	b.n	80131ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801318a:	2310      	movs	r3, #16
 801318c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801318e:	2310      	movs	r3, #16
 8013190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	689b      	ldr	r3, [r3, #8]
 8013198:	0e5b      	lsrs	r3, r3, #25
 801319a:	b2db      	uxtb	r3, r3
 801319c:	f003 0307 	and.w	r3, r3, #7
 80131a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	689b      	ldr	r3, [r3, #8]
 80131a8:	0f5b      	lsrs	r3, r3, #29
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	f003 0307 	and.w	r3, r3, #7
 80131b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80131b2:	7bbb      	ldrb	r3, [r7, #14]
 80131b4:	7b3a      	ldrb	r2, [r7, #12]
 80131b6:	4911      	ldr	r1, [pc, #68]	; (80131fc <UARTEx_SetNbDataToProcess+0x94>)
 80131b8:	5c8a      	ldrb	r2, [r1, r2]
 80131ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80131be:	7b3a      	ldrb	r2, [r7, #12]
 80131c0:	490f      	ldr	r1, [pc, #60]	; (8013200 <UARTEx_SetNbDataToProcess+0x98>)
 80131c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80131c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80131c8:	b29a      	uxth	r2, r3
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80131d0:	7bfb      	ldrb	r3, [r7, #15]
 80131d2:	7b7a      	ldrb	r2, [r7, #13]
 80131d4:	4909      	ldr	r1, [pc, #36]	; (80131fc <UARTEx_SetNbDataToProcess+0x94>)
 80131d6:	5c8a      	ldrb	r2, [r1, r2]
 80131d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80131dc:	7b7a      	ldrb	r2, [r7, #13]
 80131de:	4908      	ldr	r1, [pc, #32]	; (8013200 <UARTEx_SetNbDataToProcess+0x98>)
 80131e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80131e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80131e6:	b29a      	uxth	r2, r3
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80131ee:	bf00      	nop
 80131f0:	3714      	adds	r7, #20
 80131f2:	46bd      	mov	sp, r7
 80131f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f8:	4770      	bx	lr
 80131fa:	bf00      	nop
 80131fc:	08017878 	.word	0x08017878
 8013200:	08017880 	.word	0x08017880

08013204 <__NVIC_SetPriority>:
{
 8013204:	b480      	push	{r7}
 8013206:	b083      	sub	sp, #12
 8013208:	af00      	add	r7, sp, #0
 801320a:	4603      	mov	r3, r0
 801320c:	6039      	str	r1, [r7, #0]
 801320e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013214:	2b00      	cmp	r3, #0
 8013216:	db0a      	blt.n	801322e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	b2da      	uxtb	r2, r3
 801321c:	490c      	ldr	r1, [pc, #48]	; (8013250 <__NVIC_SetPriority+0x4c>)
 801321e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013222:	0112      	lsls	r2, r2, #4
 8013224:	b2d2      	uxtb	r2, r2
 8013226:	440b      	add	r3, r1
 8013228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801322c:	e00a      	b.n	8013244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	b2da      	uxtb	r2, r3
 8013232:	4908      	ldr	r1, [pc, #32]	; (8013254 <__NVIC_SetPriority+0x50>)
 8013234:	88fb      	ldrh	r3, [r7, #6]
 8013236:	f003 030f 	and.w	r3, r3, #15
 801323a:	3b04      	subs	r3, #4
 801323c:	0112      	lsls	r2, r2, #4
 801323e:	b2d2      	uxtb	r2, r2
 8013240:	440b      	add	r3, r1
 8013242:	761a      	strb	r2, [r3, #24]
}
 8013244:	bf00      	nop
 8013246:	370c      	adds	r7, #12
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr
 8013250:	e000e100 	.word	0xe000e100
 8013254:	e000ed00 	.word	0xe000ed00

08013258 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013258:	b580      	push	{r7, lr}
 801325a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801325c:	4b05      	ldr	r3, [pc, #20]	; (8013274 <SysTick_Handler+0x1c>)
 801325e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013260:	f002 fae2 	bl	8015828 <xTaskGetSchedulerState>
 8013264:	4603      	mov	r3, r0
 8013266:	2b01      	cmp	r3, #1
 8013268:	d001      	beq.n	801326e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801326a:	f003 f905 	bl	8016478 <xPortSysTickHandler>
  }
}
 801326e:	bf00      	nop
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	e000e010 	.word	0xe000e010

08013278 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013278:	b580      	push	{r7, lr}
 801327a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801327c:	2100      	movs	r1, #0
 801327e:	f06f 0004 	mvn.w	r0, #4
 8013282:	f7ff ffbf 	bl	8013204 <__NVIC_SetPriority>
#endif
}
 8013286:	bf00      	nop
 8013288:	bd80      	pop	{r7, pc}
	...

0801328c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801328c:	b480      	push	{r7}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013292:	f3ef 8305 	mrs	r3, IPSR
 8013296:	603b      	str	r3, [r7, #0]
  return(result);
 8013298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801329a:	2b00      	cmp	r3, #0
 801329c:	d003      	beq.n	80132a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801329e:	f06f 0305 	mvn.w	r3, #5
 80132a2:	607b      	str	r3, [r7, #4]
 80132a4:	e00c      	b.n	80132c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80132a6:	4b0a      	ldr	r3, [pc, #40]	; (80132d0 <osKernelInitialize+0x44>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d105      	bne.n	80132ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80132ae:	4b08      	ldr	r3, [pc, #32]	; (80132d0 <osKernelInitialize+0x44>)
 80132b0:	2201      	movs	r2, #1
 80132b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80132b4:	2300      	movs	r3, #0
 80132b6:	607b      	str	r3, [r7, #4]
 80132b8:	e002      	b.n	80132c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80132ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80132c0:	687b      	ldr	r3, [r7, #4]
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	370c      	adds	r7, #12
 80132c6:	46bd      	mov	sp, r7
 80132c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132cc:	4770      	bx	lr
 80132ce:	bf00      	nop
 80132d0:	24000c90 	.word	0x24000c90

080132d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132da:	f3ef 8305 	mrs	r3, IPSR
 80132de:	603b      	str	r3, [r7, #0]
  return(result);
 80132e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d003      	beq.n	80132ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80132e6:	f06f 0305 	mvn.w	r3, #5
 80132ea:	607b      	str	r3, [r7, #4]
 80132ec:	e010      	b.n	8013310 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80132ee:	4b0b      	ldr	r3, [pc, #44]	; (801331c <osKernelStart+0x48>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b01      	cmp	r3, #1
 80132f4:	d109      	bne.n	801330a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80132f6:	f7ff ffbf 	bl	8013278 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80132fa:	4b08      	ldr	r3, [pc, #32]	; (801331c <osKernelStart+0x48>)
 80132fc:	2202      	movs	r2, #2
 80132fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013300:	f001 fda4 	bl	8014e4c <vTaskStartScheduler>
      stat = osOK;
 8013304:	2300      	movs	r3, #0
 8013306:	607b      	str	r3, [r7, #4]
 8013308:	e002      	b.n	8013310 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801330a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801330e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013310:	687b      	ldr	r3, [r7, #4]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3708      	adds	r7, #8
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	24000c90 	.word	0x24000c90

08013320 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013320:	b580      	push	{r7, lr}
 8013322:	b08e      	sub	sp, #56	; 0x38
 8013324:	af04      	add	r7, sp, #16
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801332c:	2300      	movs	r3, #0
 801332e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013330:	f3ef 8305 	mrs	r3, IPSR
 8013334:	617b      	str	r3, [r7, #20]
  return(result);
 8013336:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013338:	2b00      	cmp	r3, #0
 801333a:	d17e      	bne.n	801343a <osThreadNew+0x11a>
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d07b      	beq.n	801343a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013342:	2380      	movs	r3, #128	; 0x80
 8013344:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013346:	2318      	movs	r3, #24
 8013348:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801334a:	2300      	movs	r3, #0
 801334c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801334e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013352:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d045      	beq.n	80133e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d002      	beq.n	8013368 <osThreadNew+0x48>
        name = attr->name;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	699b      	ldr	r3, [r3, #24]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d002      	beq.n	8013376 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	699b      	ldr	r3, [r3, #24]
 8013374:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013376:	69fb      	ldr	r3, [r7, #28]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d008      	beq.n	801338e <osThreadNew+0x6e>
 801337c:	69fb      	ldr	r3, [r7, #28]
 801337e:	2b38      	cmp	r3, #56	; 0x38
 8013380:	d805      	bhi.n	801338e <osThreadNew+0x6e>
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	f003 0301 	and.w	r3, r3, #1
 801338a:	2b00      	cmp	r3, #0
 801338c:	d001      	beq.n	8013392 <osThreadNew+0x72>
        return (NULL);
 801338e:	2300      	movs	r3, #0
 8013390:	e054      	b.n	801343c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	695b      	ldr	r3, [r3, #20]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d003      	beq.n	80133a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	695b      	ldr	r3, [r3, #20]
 801339e:	089b      	lsrs	r3, r3, #2
 80133a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	689b      	ldr	r3, [r3, #8]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d00e      	beq.n	80133c8 <osThreadNew+0xa8>
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	2b5b      	cmp	r3, #91	; 0x5b
 80133b0:	d90a      	bls.n	80133c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d006      	beq.n	80133c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	695b      	ldr	r3, [r3, #20]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d002      	beq.n	80133c8 <osThreadNew+0xa8>
        mem = 1;
 80133c2:	2301      	movs	r3, #1
 80133c4:	61bb      	str	r3, [r7, #24]
 80133c6:	e010      	b.n	80133ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	689b      	ldr	r3, [r3, #8]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d10c      	bne.n	80133ea <osThreadNew+0xca>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d108      	bne.n	80133ea <osThreadNew+0xca>
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	691b      	ldr	r3, [r3, #16]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d104      	bne.n	80133ea <osThreadNew+0xca>
          mem = 0;
 80133e0:	2300      	movs	r3, #0
 80133e2:	61bb      	str	r3, [r7, #24]
 80133e4:	e001      	b.n	80133ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80133e6:	2300      	movs	r3, #0
 80133e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d110      	bne.n	8013412 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80133f8:	9202      	str	r2, [sp, #8]
 80133fa:	9301      	str	r3, [sp, #4]
 80133fc:	69fb      	ldr	r3, [r7, #28]
 80133fe:	9300      	str	r3, [sp, #0]
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	6a3a      	ldr	r2, [r7, #32]
 8013404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013406:	68f8      	ldr	r0, [r7, #12]
 8013408:	f001 fb4a 	bl	8014aa0 <xTaskCreateStatic>
 801340c:	4603      	mov	r3, r0
 801340e:	613b      	str	r3, [r7, #16]
 8013410:	e013      	b.n	801343a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d110      	bne.n	801343a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013418:	6a3b      	ldr	r3, [r7, #32]
 801341a:	b29a      	uxth	r2, r3
 801341c:	f107 0310 	add.w	r3, r7, #16
 8013420:	9301      	str	r3, [sp, #4]
 8013422:	69fb      	ldr	r3, [r7, #28]
 8013424:	9300      	str	r3, [sp, #0]
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801342a:	68f8      	ldr	r0, [r7, #12]
 801342c:	f001 fb95 	bl	8014b5a <xTaskCreate>
 8013430:	4603      	mov	r3, r0
 8013432:	2b01      	cmp	r3, #1
 8013434:	d001      	beq.n	801343a <osThreadNew+0x11a>
            hTask = NULL;
 8013436:	2300      	movs	r3, #0
 8013438:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801343a:	693b      	ldr	r3, [r7, #16]
}
 801343c:	4618      	mov	r0, r3
 801343e:	3728      	adds	r7, #40	; 0x28
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013444:	b480      	push	{r7}
 8013446:	b083      	sub	sp, #12
 8013448:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801344a:	f3ef 8305 	mrs	r3, IPSR
 801344e:	603b      	str	r3, [r7, #0]
  return(result);
 8013450:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013452:	2b00      	cmp	r3, #0
 8013454:	d003      	beq.n	801345e <osThreadYield+0x1a>
    stat = osErrorISR;
 8013456:	f06f 0305 	mvn.w	r3, #5
 801345a:	607b      	str	r3, [r7, #4]
 801345c:	e009      	b.n	8013472 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801345e:	2300      	movs	r3, #0
 8013460:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8013462:	4b07      	ldr	r3, [pc, #28]	; (8013480 <osThreadYield+0x3c>)
 8013464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013468:	601a      	str	r2, [r3, #0]
 801346a:	f3bf 8f4f 	dsb	sy
 801346e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8013472:	687b      	ldr	r3, [r7, #4]
}
 8013474:	4618      	mov	r0, r3
 8013476:	370c      	adds	r7, #12
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr
 8013480:	e000ed04 	.word	0xe000ed04

08013484 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013484:	b580      	push	{r7, lr}
 8013486:	b084      	sub	sp, #16
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801348c:	f3ef 8305 	mrs	r3, IPSR
 8013490:	60bb      	str	r3, [r7, #8]
  return(result);
 8013492:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013494:	2b00      	cmp	r3, #0
 8013496:	d003      	beq.n	80134a0 <osDelay+0x1c>
    stat = osErrorISR;
 8013498:	f06f 0305 	mvn.w	r3, #5
 801349c:	60fb      	str	r3, [r7, #12]
 801349e:	e007      	b.n	80134b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80134a0:	2300      	movs	r3, #0
 80134a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d002      	beq.n	80134b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f001 fc9a 	bl	8014de4 <vTaskDelay>
    }
  }

  return (stat);
 80134b0:	68fb      	ldr	r3, [r7, #12]
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3710      	adds	r7, #16
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}

080134ba <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80134ba:	b580      	push	{r7, lr}
 80134bc:	b086      	sub	sp, #24
 80134be:	af00      	add	r7, sp, #0
 80134c0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80134c2:	2300      	movs	r3, #0
 80134c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134c6:	f3ef 8305 	mrs	r3, IPSR
 80134ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80134cc:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d12d      	bne.n	801352e <osEventFlagsNew+0x74>
    mem = -1;
 80134d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134d6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d015      	beq.n	801350a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	689b      	ldr	r3, [r3, #8]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d006      	beq.n	80134f4 <osEventFlagsNew+0x3a>
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	68db      	ldr	r3, [r3, #12]
 80134ea:	2b1f      	cmp	r3, #31
 80134ec:	d902      	bls.n	80134f4 <osEventFlagsNew+0x3a>
        mem = 1;
 80134ee:	2301      	movs	r3, #1
 80134f0:	613b      	str	r3, [r7, #16]
 80134f2:	e00c      	b.n	801350e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	689b      	ldr	r3, [r3, #8]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d108      	bne.n	801350e <osEventFlagsNew+0x54>
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	68db      	ldr	r3, [r3, #12]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d104      	bne.n	801350e <osEventFlagsNew+0x54>
          mem = 0;
 8013504:	2300      	movs	r3, #0
 8013506:	613b      	str	r3, [r7, #16]
 8013508:	e001      	b.n	801350e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801350a:	2300      	movs	r3, #0
 801350c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	2b01      	cmp	r3, #1
 8013512:	d106      	bne.n	8013522 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	689b      	ldr	r3, [r3, #8]
 8013518:	4618      	mov	r0, r3
 801351a:	f000 fa3d 	bl	8013998 <xEventGroupCreateStatic>
 801351e:	6178      	str	r0, [r7, #20]
 8013520:	e005      	b.n	801352e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d102      	bne.n	801352e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013528:	f000 fa6d 	bl	8013a06 <xEventGroupCreate>
 801352c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801352e:	697b      	ldr	r3, [r7, #20]
}
 8013530:	4618      	mov	r0, r3
 8013532:	3718      	adds	r7, #24
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}

08013538 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013538:	b580      	push	{r7, lr}
 801353a:	b086      	sub	sp, #24
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d004      	beq.n	8013556 <osEventFlagsSet+0x1e>
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013552:	2b00      	cmp	r3, #0
 8013554:	d003      	beq.n	801355e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013556:	f06f 0303 	mvn.w	r3, #3
 801355a:	617b      	str	r3, [r7, #20]
 801355c:	e028      	b.n	80135b0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801355e:	f3ef 8305 	mrs	r3, IPSR
 8013562:	60fb      	str	r3, [r7, #12]
  return(result);
 8013564:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013566:	2b00      	cmp	r3, #0
 8013568:	d01d      	beq.n	80135a6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801356a:	2300      	movs	r3, #0
 801356c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801356e:	f107 0308 	add.w	r3, r7, #8
 8013572:	461a      	mov	r2, r3
 8013574:	6839      	ldr	r1, [r7, #0]
 8013576:	6938      	ldr	r0, [r7, #16]
 8013578:	f000 fbe8 	bl	8013d4c <xEventGroupSetBitsFromISR>
 801357c:	4603      	mov	r3, r0
 801357e:	2b00      	cmp	r3, #0
 8013580:	d103      	bne.n	801358a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8013582:	f06f 0302 	mvn.w	r3, #2
 8013586:	617b      	str	r3, [r7, #20]
 8013588:	e012      	b.n	80135b0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d00d      	beq.n	80135b0 <osEventFlagsSet+0x78>
 8013594:	4b09      	ldr	r3, [pc, #36]	; (80135bc <osEventFlagsSet+0x84>)
 8013596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801359a:	601a      	str	r2, [r3, #0]
 801359c:	f3bf 8f4f 	dsb	sy
 80135a0:	f3bf 8f6f 	isb	sy
 80135a4:	e004      	b.n	80135b0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80135a6:	6839      	ldr	r1, [r7, #0]
 80135a8:	6938      	ldr	r0, [r7, #16]
 80135aa:	f000 fb15 	bl	8013bd8 <xEventGroupSetBits>
 80135ae:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80135b0:	697b      	ldr	r3, [r7, #20]
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3718      	adds	r7, #24
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	e000ed04 	.word	0xe000ed04

080135c0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b08c      	sub	sp, #48	; 0x30
 80135c4:	af02      	add	r7, sp, #8
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	607a      	str	r2, [r7, #4]
 80135cc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80135d2:	69bb      	ldr	r3, [r7, #24]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d004      	beq.n	80135e2 <osEventFlagsWait+0x22>
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d003      	beq.n	80135ea <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80135e2:	f06f 0303 	mvn.w	r3, #3
 80135e6:	61fb      	str	r3, [r7, #28]
 80135e8:	e04b      	b.n	8013682 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80135ea:	f3ef 8305 	mrs	r3, IPSR
 80135ee:	617b      	str	r3, [r7, #20]
  return(result);
 80135f0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d003      	beq.n	80135fe <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80135f6:	f06f 0305 	mvn.w	r3, #5
 80135fa:	61fb      	str	r3, [r7, #28]
 80135fc:	e041      	b.n	8013682 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f003 0301 	and.w	r3, r3, #1
 8013604:	2b00      	cmp	r3, #0
 8013606:	d002      	beq.n	801360e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8013608:	2301      	movs	r3, #1
 801360a:	627b      	str	r3, [r7, #36]	; 0x24
 801360c:	e001      	b.n	8013612 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801360e:	2300      	movs	r3, #0
 8013610:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f003 0302 	and.w	r3, r3, #2
 8013618:	2b00      	cmp	r3, #0
 801361a:	d002      	beq.n	8013622 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 801361c:	2300      	movs	r3, #0
 801361e:	623b      	str	r3, [r7, #32]
 8013620:	e001      	b.n	8013626 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013622:	2301      	movs	r3, #1
 8013624:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	9300      	str	r3, [sp, #0]
 801362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801362c:	6a3a      	ldr	r2, [r7, #32]
 801362e:	68b9      	ldr	r1, [r7, #8]
 8013630:	69b8      	ldr	r0, [r7, #24]
 8013632:	f000 fa03 	bl	8013a3c <xEventGroupWaitBits>
 8013636:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f003 0301 	and.w	r3, r3, #1
 801363e:	2b00      	cmp	r3, #0
 8013640:	d010      	beq.n	8013664 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013642:	68ba      	ldr	r2, [r7, #8]
 8013644:	69fb      	ldr	r3, [r7, #28]
 8013646:	4013      	ands	r3, r2
 8013648:	68ba      	ldr	r2, [r7, #8]
 801364a:	429a      	cmp	r2, r3
 801364c:	d019      	beq.n	8013682 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d003      	beq.n	801365c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013654:	f06f 0301 	mvn.w	r3, #1
 8013658:	61fb      	str	r3, [r7, #28]
 801365a:	e012      	b.n	8013682 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801365c:	f06f 0302 	mvn.w	r3, #2
 8013660:	61fb      	str	r3, [r7, #28]
 8013662:	e00e      	b.n	8013682 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013664:	68ba      	ldr	r2, [r7, #8]
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	4013      	ands	r3, r2
 801366a:	2b00      	cmp	r3, #0
 801366c:	d109      	bne.n	8013682 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d003      	beq.n	801367c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8013674:	f06f 0301 	mvn.w	r3, #1
 8013678:	61fb      	str	r3, [r7, #28]
 801367a:	e002      	b.n	8013682 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801367c:	f06f 0302 	mvn.w	r3, #2
 8013680:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013682:	69fb      	ldr	r3, [r7, #28]
}
 8013684:	4618      	mov	r0, r3
 8013686:	3728      	adds	r7, #40	; 0x28
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}

0801368c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801368c:	b580      	push	{r7, lr}
 801368e:	b08a      	sub	sp, #40	; 0x28
 8013690:	af02      	add	r7, sp, #8
 8013692:	60f8      	str	r0, [r7, #12]
 8013694:	60b9      	str	r1, [r7, #8]
 8013696:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013698:	2300      	movs	r3, #0
 801369a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801369c:	f3ef 8305 	mrs	r3, IPSR
 80136a0:	613b      	str	r3, [r7, #16]
  return(result);
 80136a2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d15f      	bne.n	8013768 <osMessageQueueNew+0xdc>
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d05c      	beq.n	8013768 <osMessageQueueNew+0xdc>
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d059      	beq.n	8013768 <osMessageQueueNew+0xdc>
    mem = -1;
 80136b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d029      	beq.n	8013714 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	689b      	ldr	r3, [r3, #8]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d012      	beq.n	80136ee <osMessageQueueNew+0x62>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	2b4f      	cmp	r3, #79	; 0x4f
 80136ce:	d90e      	bls.n	80136ee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d00a      	beq.n	80136ee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	695a      	ldr	r2, [r3, #20]
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	68b9      	ldr	r1, [r7, #8]
 80136e0:	fb01 f303 	mul.w	r3, r1, r3
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d302      	bcc.n	80136ee <osMessageQueueNew+0x62>
        mem = 1;
 80136e8:	2301      	movs	r3, #1
 80136ea:	61bb      	str	r3, [r7, #24]
 80136ec:	e014      	b.n	8013718 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	689b      	ldr	r3, [r3, #8]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d110      	bne.n	8013718 <osMessageQueueNew+0x8c>
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d10c      	bne.n	8013718 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013702:	2b00      	cmp	r3, #0
 8013704:	d108      	bne.n	8013718 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	695b      	ldr	r3, [r3, #20]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d104      	bne.n	8013718 <osMessageQueueNew+0x8c>
          mem = 0;
 801370e:	2300      	movs	r3, #0
 8013710:	61bb      	str	r3, [r7, #24]
 8013712:	e001      	b.n	8013718 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8013714:	2300      	movs	r3, #0
 8013716:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	2b01      	cmp	r3, #1
 801371c:	d10b      	bne.n	8013736 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	691a      	ldr	r2, [r3, #16]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	689b      	ldr	r3, [r3, #8]
 8013726:	2100      	movs	r1, #0
 8013728:	9100      	str	r1, [sp, #0]
 801372a:	68b9      	ldr	r1, [r7, #8]
 801372c:	68f8      	ldr	r0, [r7, #12]
 801372e:	f000 fc3d 	bl	8013fac <xQueueGenericCreateStatic>
 8013732:	61f8      	str	r0, [r7, #28]
 8013734:	e008      	b.n	8013748 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d105      	bne.n	8013748 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801373c:	2200      	movs	r2, #0
 801373e:	68b9      	ldr	r1, [r7, #8]
 8013740:	68f8      	ldr	r0, [r7, #12]
 8013742:	f000 fcab 	bl	801409c <xQueueGenericCreate>
 8013746:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d00c      	beq.n	8013768 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d003      	beq.n	801375c <osMessageQueueNew+0xd0>
        name = attr->name;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	617b      	str	r3, [r7, #20]
 801375a:	e001      	b.n	8013760 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801375c:	2300      	movs	r3, #0
 801375e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8013760:	6979      	ldr	r1, [r7, #20]
 8013762:	69f8      	ldr	r0, [r7, #28]
 8013764:	f001 f93e 	bl	80149e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013768:	69fb      	ldr	r3, [r7, #28]
}
 801376a:	4618      	mov	r0, r3
 801376c:	3720      	adds	r7, #32
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
	...

08013774 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013774:	b580      	push	{r7, lr}
 8013776:	b088      	sub	sp, #32
 8013778:	af00      	add	r7, sp, #0
 801377a:	60f8      	str	r0, [r7, #12]
 801377c:	60b9      	str	r1, [r7, #8]
 801377e:	603b      	str	r3, [r7, #0]
 8013780:	4613      	mov	r3, r2
 8013782:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013788:	2300      	movs	r3, #0
 801378a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801378c:	f3ef 8305 	mrs	r3, IPSR
 8013790:	617b      	str	r3, [r7, #20]
  return(result);
 8013792:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013794:	2b00      	cmp	r3, #0
 8013796:	d028      	beq.n	80137ea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013798:	69bb      	ldr	r3, [r7, #24]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d005      	beq.n	80137aa <osMessageQueuePut+0x36>
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d002      	beq.n	80137aa <osMessageQueuePut+0x36>
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d003      	beq.n	80137b2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80137aa:	f06f 0303 	mvn.w	r3, #3
 80137ae:	61fb      	str	r3, [r7, #28]
 80137b0:	e038      	b.n	8013824 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80137b2:	2300      	movs	r3, #0
 80137b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80137b6:	f107 0210 	add.w	r2, r7, #16
 80137ba:	2300      	movs	r3, #0
 80137bc:	68b9      	ldr	r1, [r7, #8]
 80137be:	69b8      	ldr	r0, [r7, #24]
 80137c0:	f000 fdc8 	bl	8014354 <xQueueGenericSendFromISR>
 80137c4:	4603      	mov	r3, r0
 80137c6:	2b01      	cmp	r3, #1
 80137c8:	d003      	beq.n	80137d2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80137ca:	f06f 0302 	mvn.w	r3, #2
 80137ce:	61fb      	str	r3, [r7, #28]
 80137d0:	e028      	b.n	8013824 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d025      	beq.n	8013824 <osMessageQueuePut+0xb0>
 80137d8:	4b15      	ldr	r3, [pc, #84]	; (8013830 <osMessageQueuePut+0xbc>)
 80137da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137de:	601a      	str	r2, [r3, #0]
 80137e0:	f3bf 8f4f 	dsb	sy
 80137e4:	f3bf 8f6f 	isb	sy
 80137e8:	e01c      	b.n	8013824 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d002      	beq.n	80137f6 <osMessageQueuePut+0x82>
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d103      	bne.n	80137fe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80137f6:	f06f 0303 	mvn.w	r3, #3
 80137fa:	61fb      	str	r3, [r7, #28]
 80137fc:	e012      	b.n	8013824 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80137fe:	2300      	movs	r3, #0
 8013800:	683a      	ldr	r2, [r7, #0]
 8013802:	68b9      	ldr	r1, [r7, #8]
 8013804:	69b8      	ldr	r0, [r7, #24]
 8013806:	f000 fca7 	bl	8014158 <xQueueGenericSend>
 801380a:	4603      	mov	r3, r0
 801380c:	2b01      	cmp	r3, #1
 801380e:	d009      	beq.n	8013824 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d003      	beq.n	801381e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8013816:	f06f 0301 	mvn.w	r3, #1
 801381a:	61fb      	str	r3, [r7, #28]
 801381c:	e002      	b.n	8013824 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801381e:	f06f 0302 	mvn.w	r3, #2
 8013822:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013824:	69fb      	ldr	r3, [r7, #28]
}
 8013826:	4618      	mov	r0, r3
 8013828:	3720      	adds	r7, #32
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
 801382e:	bf00      	nop
 8013830:	e000ed04 	.word	0xe000ed04

08013834 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013834:	b580      	push	{r7, lr}
 8013836:	b088      	sub	sp, #32
 8013838:	af00      	add	r7, sp, #0
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	607a      	str	r2, [r7, #4]
 8013840:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013846:	2300      	movs	r3, #0
 8013848:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801384a:	f3ef 8305 	mrs	r3, IPSR
 801384e:	617b      	str	r3, [r7, #20]
  return(result);
 8013850:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013852:	2b00      	cmp	r3, #0
 8013854:	d028      	beq.n	80138a8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013856:	69bb      	ldr	r3, [r7, #24]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d005      	beq.n	8013868 <osMessageQueueGet+0x34>
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d002      	beq.n	8013868 <osMessageQueueGet+0x34>
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d003      	beq.n	8013870 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013868:	f06f 0303 	mvn.w	r3, #3
 801386c:	61fb      	str	r3, [r7, #28]
 801386e:	e037      	b.n	80138e0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013870:	2300      	movs	r3, #0
 8013872:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013874:	f107 0310 	add.w	r3, r7, #16
 8013878:	461a      	mov	r2, r3
 801387a:	68b9      	ldr	r1, [r7, #8]
 801387c:	69b8      	ldr	r0, [r7, #24]
 801387e:	f000 fee5 	bl	801464c <xQueueReceiveFromISR>
 8013882:	4603      	mov	r3, r0
 8013884:	2b01      	cmp	r3, #1
 8013886:	d003      	beq.n	8013890 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013888:	f06f 0302 	mvn.w	r3, #2
 801388c:	61fb      	str	r3, [r7, #28]
 801388e:	e027      	b.n	80138e0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d024      	beq.n	80138e0 <osMessageQueueGet+0xac>
 8013896:	4b15      	ldr	r3, [pc, #84]	; (80138ec <osMessageQueueGet+0xb8>)
 8013898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801389c:	601a      	str	r2, [r3, #0]
 801389e:	f3bf 8f4f 	dsb	sy
 80138a2:	f3bf 8f6f 	isb	sy
 80138a6:	e01b      	b.n	80138e0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80138a8:	69bb      	ldr	r3, [r7, #24]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d002      	beq.n	80138b4 <osMessageQueueGet+0x80>
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d103      	bne.n	80138bc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80138b4:	f06f 0303 	mvn.w	r3, #3
 80138b8:	61fb      	str	r3, [r7, #28]
 80138ba:	e011      	b.n	80138e0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80138bc:	683a      	ldr	r2, [r7, #0]
 80138be:	68b9      	ldr	r1, [r7, #8]
 80138c0:	69b8      	ldr	r0, [r7, #24]
 80138c2:	f000 fde3 	bl	801448c <xQueueReceive>
 80138c6:	4603      	mov	r3, r0
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d009      	beq.n	80138e0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d003      	beq.n	80138da <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80138d2:	f06f 0301 	mvn.w	r3, #1
 80138d6:	61fb      	str	r3, [r7, #28]
 80138d8:	e002      	b.n	80138e0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80138da:	f06f 0302 	mvn.w	r3, #2
 80138de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80138e0:	69fb      	ldr	r3, [r7, #28]
}
 80138e2:	4618      	mov	r0, r3
 80138e4:	3720      	adds	r7, #32
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop
 80138ec:	e000ed04 	.word	0xe000ed04

080138f0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b086      	sub	sp, #24
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d102      	bne.n	8013908 <osMessageQueueGetCount+0x18>
    count = 0U;
 8013902:	2300      	movs	r3, #0
 8013904:	617b      	str	r3, [r7, #20]
 8013906:	e00e      	b.n	8013926 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013908:	f3ef 8305 	mrs	r3, IPSR
 801390c:	60fb      	str	r3, [r7, #12]
  return(result);
 801390e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013910:	2b00      	cmp	r3, #0
 8013912:	d004      	beq.n	801391e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8013914:	6938      	ldr	r0, [r7, #16]
 8013916:	f000 ff37 	bl	8014788 <uxQueueMessagesWaitingFromISR>
 801391a:	6178      	str	r0, [r7, #20]
 801391c:	e003      	b.n	8013926 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 801391e:	6938      	ldr	r0, [r7, #16]
 8013920:	f000 ff14 	bl	801474c <uxQueueMessagesWaiting>
 8013924:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8013926:	697b      	ldr	r3, [r7, #20]
}
 8013928:	4618      	mov	r0, r3
 801392a:	3718      	adds	r7, #24
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013930:	b480      	push	{r7}
 8013932:	b085      	sub	sp, #20
 8013934:	af00      	add	r7, sp, #0
 8013936:	60f8      	str	r0, [r7, #12]
 8013938:	60b9      	str	r1, [r7, #8]
 801393a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	4a07      	ldr	r2, [pc, #28]	; (801395c <vApplicationGetIdleTaskMemory+0x2c>)
 8013940:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	4a06      	ldr	r2, [pc, #24]	; (8013960 <vApplicationGetIdleTaskMemory+0x30>)
 8013946:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2280      	movs	r2, #128	; 0x80
 801394c:	601a      	str	r2, [r3, #0]
}
 801394e:	bf00      	nop
 8013950:	3714      	adds	r7, #20
 8013952:	46bd      	mov	sp, r7
 8013954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013958:	4770      	bx	lr
 801395a:	bf00      	nop
 801395c:	24000c94 	.word	0x24000c94
 8013960:	24000cf0 	.word	0x24000cf0

08013964 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013964:	b480      	push	{r7}
 8013966:	b085      	sub	sp, #20
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	4a07      	ldr	r2, [pc, #28]	; (8013990 <vApplicationGetTimerTaskMemory+0x2c>)
 8013974:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	4a06      	ldr	r2, [pc, #24]	; (8013994 <vApplicationGetTimerTaskMemory+0x30>)
 801397a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013982:	601a      	str	r2, [r3, #0]
}
 8013984:	bf00      	nop
 8013986:	3714      	adds	r7, #20
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr
 8013990:	24000ef0 	.word	0x24000ef0
 8013994:	24000f4c 	.word	0x24000f4c

08013998 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013998:	b580      	push	{r7, lr}
 801399a:	b086      	sub	sp, #24
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d10a      	bne.n	80139bc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80139a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139aa:	f383 8811 	msr	BASEPRI, r3
 80139ae:	f3bf 8f6f 	isb	sy
 80139b2:	f3bf 8f4f 	dsb	sy
 80139b6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80139b8:	bf00      	nop
 80139ba:	e7fe      	b.n	80139ba <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80139bc:	2320      	movs	r3, #32
 80139be:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	2b20      	cmp	r3, #32
 80139c4:	d00a      	beq.n	80139dc <xEventGroupCreateStatic+0x44>
	__asm volatile
 80139c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ca:	f383 8811 	msr	BASEPRI, r3
 80139ce:	f3bf 8f6f 	isb	sy
 80139d2:	f3bf 8f4f 	dsb	sy
 80139d6:	60fb      	str	r3, [r7, #12]
}
 80139d8:	bf00      	nop
 80139da:	e7fe      	b.n	80139da <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d00a      	beq.n	80139fc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	2200      	movs	r2, #0
 80139ea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	3304      	adds	r3, #4
 80139f0:	4618      	mov	r0, r3
 80139f2:	f000 f9bf 	bl	8013d74 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	2201      	movs	r2, #1
 80139fa:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80139fc:	697b      	ldr	r3, [r7, #20]
	}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3718      	adds	r7, #24
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}

08013a06 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013a06:	b580      	push	{r7, lr}
 8013a08:	b082      	sub	sp, #8
 8013a0a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013a0c:	2020      	movs	r0, #32
 8013a0e:	f002 fdc3 	bl	8016598 <pvPortMalloc>
 8013a12:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d00a      	beq.n	8013a30 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	3304      	adds	r3, #4
 8013a24:	4618      	mov	r0, r3
 8013a26:	f000 f9a5 	bl	8013d74 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013a30:	687b      	ldr	r3, [r7, #4]
	}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3708      	adds	r7, #8
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}
	...

08013a3c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b090      	sub	sp, #64	; 0x40
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	60f8      	str	r0, [r7, #12]
 8013a44:	60b9      	str	r1, [r7, #8]
 8013a46:	607a      	str	r2, [r7, #4]
 8013a48:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013a52:	2300      	movs	r3, #0
 8013a54:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d10a      	bne.n	8013a72 <xEventGroupWaitBits+0x36>
	__asm volatile
 8013a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a60:	f383 8811 	msr	BASEPRI, r3
 8013a64:	f3bf 8f6f 	isb	sy
 8013a68:	f3bf 8f4f 	dsb	sy
 8013a6c:	623b      	str	r3, [r7, #32]
}
 8013a6e:	bf00      	nop
 8013a70:	e7fe      	b.n	8013a70 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d00a      	beq.n	8013a92 <xEventGroupWaitBits+0x56>
	__asm volatile
 8013a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a80:	f383 8811 	msr	BASEPRI, r3
 8013a84:	f3bf 8f6f 	isb	sy
 8013a88:	f3bf 8f4f 	dsb	sy
 8013a8c:	61fb      	str	r3, [r7, #28]
}
 8013a8e:	bf00      	nop
 8013a90:	e7fe      	b.n	8013a90 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d10a      	bne.n	8013aae <xEventGroupWaitBits+0x72>
	__asm volatile
 8013a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9c:	f383 8811 	msr	BASEPRI, r3
 8013aa0:	f3bf 8f6f 	isb	sy
 8013aa4:	f3bf 8f4f 	dsb	sy
 8013aa8:	61bb      	str	r3, [r7, #24]
}
 8013aaa:	bf00      	nop
 8013aac:	e7fe      	b.n	8013aac <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013aae:	f001 febb 	bl	8015828 <xTaskGetSchedulerState>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d102      	bne.n	8013abe <xEventGroupWaitBits+0x82>
 8013ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d101      	bne.n	8013ac2 <xEventGroupWaitBits+0x86>
 8013abe:	2301      	movs	r3, #1
 8013ac0:	e000      	b.n	8013ac4 <xEventGroupWaitBits+0x88>
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d10a      	bne.n	8013ade <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013acc:	f383 8811 	msr	BASEPRI, r3
 8013ad0:	f3bf 8f6f 	isb	sy
 8013ad4:	f3bf 8f4f 	dsb	sy
 8013ad8:	617b      	str	r3, [r7, #20]
}
 8013ada:	bf00      	nop
 8013adc:	e7fe      	b.n	8013adc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013ade:	f001 fa1b 	bl	8014f18 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013ae8:	683a      	ldr	r2, [r7, #0]
 8013aea:	68b9      	ldr	r1, [r7, #8]
 8013aec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013aee:	f000 f90b 	bl	8013d08 <prvTestWaitCondition>
 8013af2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d00e      	beq.n	8013b18 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013afc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013afe:	2300      	movs	r3, #0
 8013b00:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d028      	beq.n	8013b5a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	43db      	mvns	r3, r3
 8013b10:	401a      	ands	r2, r3
 8013b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b14:	601a      	str	r2, [r3, #0]
 8013b16:	e020      	b.n	8013b5a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d104      	bne.n	8013b28 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b20:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013b22:	2301      	movs	r3, #1
 8013b24:	633b      	str	r3, [r7, #48]	; 0x30
 8013b26:	e018      	b.n	8013b5a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d003      	beq.n	8013b36 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013b34:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d003      	beq.n	8013b44 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013b42:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b46:	1d18      	adds	r0, r3, #4
 8013b48:	68ba      	ldr	r2, [r7, #8]
 8013b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b4c:	4313      	orrs	r3, r2
 8013b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013b50:	4619      	mov	r1, r3
 8013b52:	f001 fbe1 	bl	8015318 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013b56:	2300      	movs	r3, #0
 8013b58:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013b5a:	f001 f9eb 	bl	8014f34 <xTaskResumeAll>
 8013b5e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d031      	beq.n	8013bca <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d107      	bne.n	8013b7c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013b6c:	4b19      	ldr	r3, [pc, #100]	; (8013bd4 <xEventGroupWaitBits+0x198>)
 8013b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b72:	601a      	str	r2, [r3, #0]
 8013b74:	f3bf 8f4f 	dsb	sy
 8013b78:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013b7c:	f001 fee0 	bl	8015940 <uxTaskResetEventItemValue>
 8013b80:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d11a      	bne.n	8013bc2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013b8c:	f002 fbe2 	bl	8016354 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013b96:	683a      	ldr	r2, [r7, #0]
 8013b98:	68b9      	ldr	r1, [r7, #8]
 8013b9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013b9c:	f000 f8b4 	bl	8013d08 <prvTestWaitCondition>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d009      	beq.n	8013bba <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d006      	beq.n	8013bba <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	43db      	mvns	r3, r3
 8013bb4:	401a      	ands	r2, r3
 8013bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bb8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013bba:	2301      	movs	r3, #1
 8013bbc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013bbe:	f002 fbf9 	bl	80163b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3740      	adds	r7, #64	; 0x40
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}
 8013bd4:	e000ed04 	.word	0xe000ed04

08013bd8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b08e      	sub	sp, #56	; 0x38
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013be2:	2300      	movs	r3, #0
 8013be4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013bea:	2300      	movs	r3, #0
 8013bec:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d10a      	bne.n	8013c0a <xEventGroupSetBits+0x32>
	__asm volatile
 8013bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf8:	f383 8811 	msr	BASEPRI, r3
 8013bfc:	f3bf 8f6f 	isb	sy
 8013c00:	f3bf 8f4f 	dsb	sy
 8013c04:	613b      	str	r3, [r7, #16]
}
 8013c06:	bf00      	nop
 8013c08:	e7fe      	b.n	8013c08 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d00a      	beq.n	8013c2a <xEventGroupSetBits+0x52>
	__asm volatile
 8013c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c18:	f383 8811 	msr	BASEPRI, r3
 8013c1c:	f3bf 8f6f 	isb	sy
 8013c20:	f3bf 8f4f 	dsb	sy
 8013c24:	60fb      	str	r3, [r7, #12]
}
 8013c26:	bf00      	nop
 8013c28:	e7fe      	b.n	8013c28 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2c:	3304      	adds	r3, #4
 8013c2e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c32:	3308      	adds	r3, #8
 8013c34:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013c36:	f001 f96f 	bl	8014f18 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3c:	68db      	ldr	r3, [r3, #12]
 8013c3e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	431a      	orrs	r2, r3
 8013c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013c4c:	e03c      	b.n	8013cc8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013c5e:	69bb      	ldr	r3, [r7, #24]
 8013c60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c64:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013c66:	69bb      	ldr	r3, [r7, #24]
 8013c68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013c6c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d108      	bne.n	8013c8a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	69bb      	ldr	r3, [r7, #24]
 8013c7e:	4013      	ands	r3, r2
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d00b      	beq.n	8013c9c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013c84:	2301      	movs	r3, #1
 8013c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c88:	e008      	b.n	8013c9c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	69bb      	ldr	r3, [r7, #24]
 8013c90:	4013      	ands	r3, r2
 8013c92:	69ba      	ldr	r2, [r7, #24]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d101      	bne.n	8013c9c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013c98:	2301      	movs	r3, #1
 8013c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d010      	beq.n	8013cc4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d003      	beq.n	8013cb4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cae:	69bb      	ldr	r3, [r7, #24]
 8013cb0:	4313      	orrs	r3, r2
 8013cb2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013cc0:	f001 fbf6 	bl	80154b0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013cc4:	69fb      	ldr	r3, [r7, #28]
 8013cc6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cca:	6a3b      	ldr	r3, [r7, #32]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d1be      	bne.n	8013c4e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd2:	681a      	ldr	r2, [r3, #0]
 8013cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd6:	43db      	mvns	r3, r3
 8013cd8:	401a      	ands	r2, r3
 8013cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cdc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013cde:	f001 f929 	bl	8014f34 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce4:	681b      	ldr	r3, [r3, #0]
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3738      	adds	r7, #56	; 0x38
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013cee:	b580      	push	{r7, lr}
 8013cf0:	b082      	sub	sp, #8
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	6078      	str	r0, [r7, #4]
 8013cf6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013cf8:	6839      	ldr	r1, [r7, #0]
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f7ff ff6c 	bl	8013bd8 <xEventGroupSetBits>
}
 8013d00:	bf00      	nop
 8013d02:	3708      	adds	r7, #8
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}

08013d08 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b087      	sub	sp, #28
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013d14:	2300      	movs	r3, #0
 8013d16:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d107      	bne.n	8013d2e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013d1e:	68fa      	ldr	r2, [r7, #12]
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	4013      	ands	r3, r2
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d00a      	beq.n	8013d3e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013d28:	2301      	movs	r3, #1
 8013d2a:	617b      	str	r3, [r7, #20]
 8013d2c:	e007      	b.n	8013d3e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013d2e:	68fa      	ldr	r2, [r7, #12]
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	4013      	ands	r3, r2
 8013d34:	68ba      	ldr	r2, [r7, #8]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d101      	bne.n	8013d3e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013d3e:	697b      	ldr	r3, [r7, #20]
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	371c      	adds	r7, #28
 8013d44:	46bd      	mov	sp, r7
 8013d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4a:	4770      	bx	lr

08013d4c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b086      	sub	sp, #24
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	60f8      	str	r0, [r7, #12]
 8013d54:	60b9      	str	r1, [r7, #8]
 8013d56:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	68ba      	ldr	r2, [r7, #8]
 8013d5c:	68f9      	ldr	r1, [r7, #12]
 8013d5e:	4804      	ldr	r0, [pc, #16]	; (8013d70 <xEventGroupSetBitsFromISR+0x24>)
 8013d60:	f002 f9a8 	bl	80160b4 <xTimerPendFunctionCallFromISR>
 8013d64:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013d66:	697b      	ldr	r3, [r7, #20]
	}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3718      	adds	r7, #24
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	08013cef 	.word	0x08013cef

08013d74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013d74:	b480      	push	{r7}
 8013d76:	b083      	sub	sp, #12
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f103 0208 	add.w	r2, r3, #8
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f103 0208 	add.w	r2, r3, #8
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f103 0208 	add.w	r2, r3, #8
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	2200      	movs	r2, #0
 8013da6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013da8:	bf00      	nop
 8013daa:	370c      	adds	r7, #12
 8013dac:	46bd      	mov	sp, r7
 8013dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db2:	4770      	bx	lr

08013db4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013db4:	b480      	push	{r7}
 8013db6:	b083      	sub	sp, #12
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013dc2:	bf00      	nop
 8013dc4:	370c      	adds	r7, #12
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr

08013dce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013dce:	b480      	push	{r7}
 8013dd0:	b085      	sub	sp, #20
 8013dd2:	af00      	add	r7, sp, #0
 8013dd4:	6078      	str	r0, [r7, #4]
 8013dd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	68fa      	ldr	r2, [r7, #12]
 8013de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	689a      	ldr	r2, [r3, #8]
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	689b      	ldr	r3, [r3, #8]
 8013df0:	683a      	ldr	r2, [r7, #0]
 8013df2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	683a      	ldr	r2, [r7, #0]
 8013df8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	1c5a      	adds	r2, r3, #1
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	601a      	str	r2, [r3, #0]
}
 8013e0a:	bf00      	nop
 8013e0c:	3714      	adds	r7, #20
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e14:	4770      	bx	lr

08013e16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013e16:	b480      	push	{r7}
 8013e18:	b085      	sub	sp, #20
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
 8013e1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013e26:	68bb      	ldr	r3, [r7, #8]
 8013e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e2c:	d103      	bne.n	8013e36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	691b      	ldr	r3, [r3, #16]
 8013e32:	60fb      	str	r3, [r7, #12]
 8013e34:	e00c      	b.n	8013e50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	3308      	adds	r3, #8
 8013e3a:	60fb      	str	r3, [r7, #12]
 8013e3c:	e002      	b.n	8013e44 <vListInsert+0x2e>
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	685b      	ldr	r3, [r3, #4]
 8013e42:	60fb      	str	r3, [r7, #12]
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	685b      	ldr	r3, [r3, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	68ba      	ldr	r2, [r7, #8]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d2f6      	bcs.n	8013e3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	685a      	ldr	r2, [r3, #4]
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	685b      	ldr	r3, [r3, #4]
 8013e5c:	683a      	ldr	r2, [r7, #0]
 8013e5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	68fa      	ldr	r2, [r7, #12]
 8013e64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	683a      	ldr	r2, [r7, #0]
 8013e6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	1c5a      	adds	r2, r3, #1
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	601a      	str	r2, [r3, #0]
}
 8013e7c:	bf00      	nop
 8013e7e:	3714      	adds	r7, #20
 8013e80:	46bd      	mov	sp, r7
 8013e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e86:	4770      	bx	lr

08013e88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b085      	sub	sp, #20
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	691b      	ldr	r3, [r3, #16]
 8013e94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	685b      	ldr	r3, [r3, #4]
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	6892      	ldr	r2, [r2, #8]
 8013e9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	689b      	ldr	r3, [r3, #8]
 8013ea4:	687a      	ldr	r2, [r7, #4]
 8013ea6:	6852      	ldr	r2, [r2, #4]
 8013ea8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	687a      	ldr	r2, [r7, #4]
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d103      	bne.n	8013ebc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	689a      	ldr	r2, [r3, #8]
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	1e5a      	subs	r2, r3, #1
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	681b      	ldr	r3, [r3, #0]
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3714      	adds	r7, #20
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr

08013edc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b084      	sub	sp, #16
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d10a      	bne.n	8013f06 <xQueueGenericReset+0x2a>
	__asm volatile
 8013ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef4:	f383 8811 	msr	BASEPRI, r3
 8013ef8:	f3bf 8f6f 	isb	sy
 8013efc:	f3bf 8f4f 	dsb	sy
 8013f00:	60bb      	str	r3, [r7, #8]
}
 8013f02:	bf00      	nop
 8013f04:	e7fe      	b.n	8013f04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013f06:	f002 fa25 	bl	8016354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f12:	68f9      	ldr	r1, [r7, #12]
 8013f14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013f16:	fb01 f303 	mul.w	r3, r1, r3
 8013f1a:	441a      	add	r2, r3
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	2200      	movs	r2, #0
 8013f24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	681a      	ldr	r2, [r3, #0]
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f36:	3b01      	subs	r3, #1
 8013f38:	68f9      	ldr	r1, [r7, #12]
 8013f3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013f3c:	fb01 f303 	mul.w	r3, r1, r3
 8013f40:	441a      	add	r2, r3
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	22ff      	movs	r2, #255	; 0xff
 8013f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	22ff      	movs	r2, #255	; 0xff
 8013f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d114      	bne.n	8013f86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	691b      	ldr	r3, [r3, #16]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d01a      	beq.n	8013f9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	3310      	adds	r3, #16
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f001 fa3d 	bl	80153e8 <xTaskRemoveFromEventList>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d012      	beq.n	8013f9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013f74:	4b0c      	ldr	r3, [pc, #48]	; (8013fa8 <xQueueGenericReset+0xcc>)
 8013f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f7a:	601a      	str	r2, [r3, #0]
 8013f7c:	f3bf 8f4f 	dsb	sy
 8013f80:	f3bf 8f6f 	isb	sy
 8013f84:	e009      	b.n	8013f9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	3310      	adds	r3, #16
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7ff fef2 	bl	8013d74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	3324      	adds	r3, #36	; 0x24
 8013f94:	4618      	mov	r0, r3
 8013f96:	f7ff feed 	bl	8013d74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013f9a:	f002 fa0b 	bl	80163b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013f9e:	2301      	movs	r3, #1
}
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3710      	adds	r7, #16
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	e000ed04 	.word	0xe000ed04

08013fac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b08e      	sub	sp, #56	; 0x38
 8013fb0:	af02      	add	r7, sp, #8
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	60b9      	str	r1, [r7, #8]
 8013fb6:	607a      	str	r2, [r7, #4]
 8013fb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d10a      	bne.n	8013fd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc4:	f383 8811 	msr	BASEPRI, r3
 8013fc8:	f3bf 8f6f 	isb	sy
 8013fcc:	f3bf 8f4f 	dsb	sy
 8013fd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013fd2:	bf00      	nop
 8013fd4:	e7fe      	b.n	8013fd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d10a      	bne.n	8013ff2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe0:	f383 8811 	msr	BASEPRI, r3
 8013fe4:	f3bf 8f6f 	isb	sy
 8013fe8:	f3bf 8f4f 	dsb	sy
 8013fec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013fee:	bf00      	nop
 8013ff0:	e7fe      	b.n	8013ff0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d002      	beq.n	8013ffe <xQueueGenericCreateStatic+0x52>
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d001      	beq.n	8014002 <xQueueGenericCreateStatic+0x56>
 8013ffe:	2301      	movs	r3, #1
 8014000:	e000      	b.n	8014004 <xQueueGenericCreateStatic+0x58>
 8014002:	2300      	movs	r3, #0
 8014004:	2b00      	cmp	r3, #0
 8014006:	d10a      	bne.n	801401e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801400c:	f383 8811 	msr	BASEPRI, r3
 8014010:	f3bf 8f6f 	isb	sy
 8014014:	f3bf 8f4f 	dsb	sy
 8014018:	623b      	str	r3, [r7, #32]
}
 801401a:	bf00      	nop
 801401c:	e7fe      	b.n	801401c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d102      	bne.n	801402a <xQueueGenericCreateStatic+0x7e>
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d101      	bne.n	801402e <xQueueGenericCreateStatic+0x82>
 801402a:	2301      	movs	r3, #1
 801402c:	e000      	b.n	8014030 <xQueueGenericCreateStatic+0x84>
 801402e:	2300      	movs	r3, #0
 8014030:	2b00      	cmp	r3, #0
 8014032:	d10a      	bne.n	801404a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014038:	f383 8811 	msr	BASEPRI, r3
 801403c:	f3bf 8f6f 	isb	sy
 8014040:	f3bf 8f4f 	dsb	sy
 8014044:	61fb      	str	r3, [r7, #28]
}
 8014046:	bf00      	nop
 8014048:	e7fe      	b.n	8014048 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801404a:	2350      	movs	r3, #80	; 0x50
 801404c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	2b50      	cmp	r3, #80	; 0x50
 8014052:	d00a      	beq.n	801406a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014058:	f383 8811 	msr	BASEPRI, r3
 801405c:	f3bf 8f6f 	isb	sy
 8014060:	f3bf 8f4f 	dsb	sy
 8014064:	61bb      	str	r3, [r7, #24]
}
 8014066:	bf00      	nop
 8014068:	e7fe      	b.n	8014068 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801406a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014072:	2b00      	cmp	r3, #0
 8014074:	d00d      	beq.n	8014092 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014078:	2201      	movs	r2, #1
 801407a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801407e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014084:	9300      	str	r3, [sp, #0]
 8014086:	4613      	mov	r3, r2
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	68b9      	ldr	r1, [r7, #8]
 801408c:	68f8      	ldr	r0, [r7, #12]
 801408e:	f000 f83f 	bl	8014110 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014094:	4618      	mov	r0, r3
 8014096:	3730      	adds	r7, #48	; 0x30
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801409c:	b580      	push	{r7, lr}
 801409e:	b08a      	sub	sp, #40	; 0x28
 80140a0:	af02      	add	r7, sp, #8
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	60b9      	str	r1, [r7, #8]
 80140a6:	4613      	mov	r3, r2
 80140a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d10a      	bne.n	80140c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80140b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140b4:	f383 8811 	msr	BASEPRI, r3
 80140b8:	f3bf 8f6f 	isb	sy
 80140bc:	f3bf 8f4f 	dsb	sy
 80140c0:	613b      	str	r3, [r7, #16]
}
 80140c2:	bf00      	nop
 80140c4:	e7fe      	b.n	80140c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	68ba      	ldr	r2, [r7, #8]
 80140ca:	fb02 f303 	mul.w	r3, r2, r3
 80140ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80140d0:	69fb      	ldr	r3, [r7, #28]
 80140d2:	3350      	adds	r3, #80	; 0x50
 80140d4:	4618      	mov	r0, r3
 80140d6:	f002 fa5f 	bl	8016598 <pvPortMalloc>
 80140da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80140dc:	69bb      	ldr	r3, [r7, #24]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d011      	beq.n	8014106 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80140e2:	69bb      	ldr	r3, [r7, #24]
 80140e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	3350      	adds	r3, #80	; 0x50
 80140ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80140ec:	69bb      	ldr	r3, [r7, #24]
 80140ee:	2200      	movs	r2, #0
 80140f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80140f4:	79fa      	ldrb	r2, [r7, #7]
 80140f6:	69bb      	ldr	r3, [r7, #24]
 80140f8:	9300      	str	r3, [sp, #0]
 80140fa:	4613      	mov	r3, r2
 80140fc:	697a      	ldr	r2, [r7, #20]
 80140fe:	68b9      	ldr	r1, [r7, #8]
 8014100:	68f8      	ldr	r0, [r7, #12]
 8014102:	f000 f805 	bl	8014110 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014106:	69bb      	ldr	r3, [r7, #24]
	}
 8014108:	4618      	mov	r0, r3
 801410a:	3720      	adds	r7, #32
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b084      	sub	sp, #16
 8014114:	af00      	add	r7, sp, #0
 8014116:	60f8      	str	r0, [r7, #12]
 8014118:	60b9      	str	r1, [r7, #8]
 801411a:	607a      	str	r2, [r7, #4]
 801411c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d103      	bne.n	801412c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014124:	69bb      	ldr	r3, [r7, #24]
 8014126:	69ba      	ldr	r2, [r7, #24]
 8014128:	601a      	str	r2, [r3, #0]
 801412a:	e002      	b.n	8014132 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801412c:	69bb      	ldr	r3, [r7, #24]
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014132:	69bb      	ldr	r3, [r7, #24]
 8014134:	68fa      	ldr	r2, [r7, #12]
 8014136:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	68ba      	ldr	r2, [r7, #8]
 801413c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801413e:	2101      	movs	r1, #1
 8014140:	69b8      	ldr	r0, [r7, #24]
 8014142:	f7ff fecb 	bl	8013edc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014146:	69bb      	ldr	r3, [r7, #24]
 8014148:	78fa      	ldrb	r2, [r7, #3]
 801414a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801414e:	bf00      	nop
 8014150:	3710      	adds	r7, #16
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
	...

08014158 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b08e      	sub	sp, #56	; 0x38
 801415c:	af00      	add	r7, sp, #0
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	60b9      	str	r1, [r7, #8]
 8014162:	607a      	str	r2, [r7, #4]
 8014164:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014166:	2300      	movs	r3, #0
 8014168:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014170:	2b00      	cmp	r3, #0
 8014172:	d10a      	bne.n	801418a <xQueueGenericSend+0x32>
	__asm volatile
 8014174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014178:	f383 8811 	msr	BASEPRI, r3
 801417c:	f3bf 8f6f 	isb	sy
 8014180:	f3bf 8f4f 	dsb	sy
 8014184:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014186:	bf00      	nop
 8014188:	e7fe      	b.n	8014188 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d103      	bne.n	8014198 <xQueueGenericSend+0x40>
 8014190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014194:	2b00      	cmp	r3, #0
 8014196:	d101      	bne.n	801419c <xQueueGenericSend+0x44>
 8014198:	2301      	movs	r3, #1
 801419a:	e000      	b.n	801419e <xQueueGenericSend+0x46>
 801419c:	2300      	movs	r3, #0
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d10a      	bne.n	80141b8 <xQueueGenericSend+0x60>
	__asm volatile
 80141a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a6:	f383 8811 	msr	BASEPRI, r3
 80141aa:	f3bf 8f6f 	isb	sy
 80141ae:	f3bf 8f4f 	dsb	sy
 80141b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80141b4:	bf00      	nop
 80141b6:	e7fe      	b.n	80141b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	2b02      	cmp	r3, #2
 80141bc:	d103      	bne.n	80141c6 <xQueueGenericSend+0x6e>
 80141be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141c2:	2b01      	cmp	r3, #1
 80141c4:	d101      	bne.n	80141ca <xQueueGenericSend+0x72>
 80141c6:	2301      	movs	r3, #1
 80141c8:	e000      	b.n	80141cc <xQueueGenericSend+0x74>
 80141ca:	2300      	movs	r3, #0
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d10a      	bne.n	80141e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80141d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141d4:	f383 8811 	msr	BASEPRI, r3
 80141d8:	f3bf 8f6f 	isb	sy
 80141dc:	f3bf 8f4f 	dsb	sy
 80141e0:	623b      	str	r3, [r7, #32]
}
 80141e2:	bf00      	nop
 80141e4:	e7fe      	b.n	80141e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80141e6:	f001 fb1f 	bl	8015828 <xTaskGetSchedulerState>
 80141ea:	4603      	mov	r3, r0
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d102      	bne.n	80141f6 <xQueueGenericSend+0x9e>
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d101      	bne.n	80141fa <xQueueGenericSend+0xa2>
 80141f6:	2301      	movs	r3, #1
 80141f8:	e000      	b.n	80141fc <xQueueGenericSend+0xa4>
 80141fa:	2300      	movs	r3, #0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d10a      	bne.n	8014216 <xQueueGenericSend+0xbe>
	__asm volatile
 8014200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014204:	f383 8811 	msr	BASEPRI, r3
 8014208:	f3bf 8f6f 	isb	sy
 801420c:	f3bf 8f4f 	dsb	sy
 8014210:	61fb      	str	r3, [r7, #28]
}
 8014212:	bf00      	nop
 8014214:	e7fe      	b.n	8014214 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014216:	f002 f89d 	bl	8016354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801421c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014222:	429a      	cmp	r2, r3
 8014224:	d302      	bcc.n	801422c <xQueueGenericSend+0xd4>
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	2b02      	cmp	r3, #2
 801422a:	d129      	bne.n	8014280 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801422c:	683a      	ldr	r2, [r7, #0]
 801422e:	68b9      	ldr	r1, [r7, #8]
 8014230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014232:	f000 fac7 	bl	80147c4 <prvCopyDataToQueue>
 8014236:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801423c:	2b00      	cmp	r3, #0
 801423e:	d010      	beq.n	8014262 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014242:	3324      	adds	r3, #36	; 0x24
 8014244:	4618      	mov	r0, r3
 8014246:	f001 f8cf 	bl	80153e8 <xTaskRemoveFromEventList>
 801424a:	4603      	mov	r3, r0
 801424c:	2b00      	cmp	r3, #0
 801424e:	d013      	beq.n	8014278 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014250:	4b3f      	ldr	r3, [pc, #252]	; (8014350 <xQueueGenericSend+0x1f8>)
 8014252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014256:	601a      	str	r2, [r3, #0]
 8014258:	f3bf 8f4f 	dsb	sy
 801425c:	f3bf 8f6f 	isb	sy
 8014260:	e00a      	b.n	8014278 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014264:	2b00      	cmp	r3, #0
 8014266:	d007      	beq.n	8014278 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014268:	4b39      	ldr	r3, [pc, #228]	; (8014350 <xQueueGenericSend+0x1f8>)
 801426a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801426e:	601a      	str	r2, [r3, #0]
 8014270:	f3bf 8f4f 	dsb	sy
 8014274:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014278:	f002 f89c 	bl	80163b4 <vPortExitCritical>
				return pdPASS;
 801427c:	2301      	movs	r3, #1
 801427e:	e063      	b.n	8014348 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d103      	bne.n	801428e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014286:	f002 f895 	bl	80163b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801428a:	2300      	movs	r3, #0
 801428c:	e05c      	b.n	8014348 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801428e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014290:	2b00      	cmp	r3, #0
 8014292:	d106      	bne.n	80142a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014294:	f107 0314 	add.w	r3, r7, #20
 8014298:	4618      	mov	r0, r3
 801429a:	f001 f96b 	bl	8015574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801429e:	2301      	movs	r3, #1
 80142a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80142a2:	f002 f887 	bl	80163b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80142a6:	f000 fe37 	bl	8014f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80142aa:	f002 f853 	bl	8016354 <vPortEnterCritical>
 80142ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142b4:	b25b      	sxtb	r3, r3
 80142b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142ba:	d103      	bne.n	80142c4 <xQueueGenericSend+0x16c>
 80142bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142be:	2200      	movs	r2, #0
 80142c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80142c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142ca:	b25b      	sxtb	r3, r3
 80142cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142d0:	d103      	bne.n	80142da <xQueueGenericSend+0x182>
 80142d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d4:	2200      	movs	r2, #0
 80142d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80142da:	f002 f86b 	bl	80163b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80142de:	1d3a      	adds	r2, r7, #4
 80142e0:	f107 0314 	add.w	r3, r7, #20
 80142e4:	4611      	mov	r1, r2
 80142e6:	4618      	mov	r0, r3
 80142e8:	f001 f95a 	bl	80155a0 <xTaskCheckForTimeOut>
 80142ec:	4603      	mov	r3, r0
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d124      	bne.n	801433c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80142f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142f4:	f000 fb5e 	bl	80149b4 <prvIsQueueFull>
 80142f8:	4603      	mov	r3, r0
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d018      	beq.n	8014330 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80142fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014300:	3310      	adds	r3, #16
 8014302:	687a      	ldr	r2, [r7, #4]
 8014304:	4611      	mov	r1, r2
 8014306:	4618      	mov	r0, r3
 8014308:	f000 ffe2 	bl	80152d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801430c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801430e:	f000 fae9 	bl	80148e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014312:	f000 fe0f 	bl	8014f34 <xTaskResumeAll>
 8014316:	4603      	mov	r3, r0
 8014318:	2b00      	cmp	r3, #0
 801431a:	f47f af7c 	bne.w	8014216 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801431e:	4b0c      	ldr	r3, [pc, #48]	; (8014350 <xQueueGenericSend+0x1f8>)
 8014320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014324:	601a      	str	r2, [r3, #0]
 8014326:	f3bf 8f4f 	dsb	sy
 801432a:	f3bf 8f6f 	isb	sy
 801432e:	e772      	b.n	8014216 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014332:	f000 fad7 	bl	80148e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014336:	f000 fdfd 	bl	8014f34 <xTaskResumeAll>
 801433a:	e76c      	b.n	8014216 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801433c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801433e:	f000 fad1 	bl	80148e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014342:	f000 fdf7 	bl	8014f34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014346:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014348:	4618      	mov	r0, r3
 801434a:	3738      	adds	r7, #56	; 0x38
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	e000ed04 	.word	0xe000ed04

08014354 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b090      	sub	sp, #64	; 0x40
 8014358:	af00      	add	r7, sp, #0
 801435a:	60f8      	str	r0, [r7, #12]
 801435c:	60b9      	str	r1, [r7, #8]
 801435e:	607a      	str	r2, [r7, #4]
 8014360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8014366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10a      	bne.n	8014382 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014370:	f383 8811 	msr	BASEPRI, r3
 8014374:	f3bf 8f6f 	isb	sy
 8014378:	f3bf 8f4f 	dsb	sy
 801437c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801437e:	bf00      	nop
 8014380:	e7fe      	b.n	8014380 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d103      	bne.n	8014390 <xQueueGenericSendFromISR+0x3c>
 8014388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801438c:	2b00      	cmp	r3, #0
 801438e:	d101      	bne.n	8014394 <xQueueGenericSendFromISR+0x40>
 8014390:	2301      	movs	r3, #1
 8014392:	e000      	b.n	8014396 <xQueueGenericSendFromISR+0x42>
 8014394:	2300      	movs	r3, #0
 8014396:	2b00      	cmp	r3, #0
 8014398:	d10a      	bne.n	80143b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801439e:	f383 8811 	msr	BASEPRI, r3
 80143a2:	f3bf 8f6f 	isb	sy
 80143a6:	f3bf 8f4f 	dsb	sy
 80143aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80143ac:	bf00      	nop
 80143ae:	e7fe      	b.n	80143ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	2b02      	cmp	r3, #2
 80143b4:	d103      	bne.n	80143be <xQueueGenericSendFromISR+0x6a>
 80143b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	d101      	bne.n	80143c2 <xQueueGenericSendFromISR+0x6e>
 80143be:	2301      	movs	r3, #1
 80143c0:	e000      	b.n	80143c4 <xQueueGenericSendFromISR+0x70>
 80143c2:	2300      	movs	r3, #0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d10a      	bne.n	80143de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80143c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143cc:	f383 8811 	msr	BASEPRI, r3
 80143d0:	f3bf 8f6f 	isb	sy
 80143d4:	f3bf 8f4f 	dsb	sy
 80143d8:	623b      	str	r3, [r7, #32]
}
 80143da:	bf00      	nop
 80143dc:	e7fe      	b.n	80143dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80143de:	f002 f89b 	bl	8016518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80143e2:	f3ef 8211 	mrs	r2, BASEPRI
 80143e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ea:	f383 8811 	msr	BASEPRI, r3
 80143ee:	f3bf 8f6f 	isb	sy
 80143f2:	f3bf 8f4f 	dsb	sy
 80143f6:	61fa      	str	r2, [r7, #28]
 80143f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80143fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80143fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80143fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014406:	429a      	cmp	r2, r3
 8014408:	d302      	bcc.n	8014410 <xQueueGenericSendFromISR+0xbc>
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	2b02      	cmp	r3, #2
 801440e:	d12f      	bne.n	8014470 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801441e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014420:	683a      	ldr	r2, [r7, #0]
 8014422:	68b9      	ldr	r1, [r7, #8]
 8014424:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014426:	f000 f9cd 	bl	80147c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801442a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801442e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014432:	d112      	bne.n	801445a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014438:	2b00      	cmp	r3, #0
 801443a:	d016      	beq.n	801446a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801443e:	3324      	adds	r3, #36	; 0x24
 8014440:	4618      	mov	r0, r3
 8014442:	f000 ffd1 	bl	80153e8 <xTaskRemoveFromEventList>
 8014446:	4603      	mov	r3, r0
 8014448:	2b00      	cmp	r3, #0
 801444a:	d00e      	beq.n	801446a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d00b      	beq.n	801446a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2201      	movs	r2, #1
 8014456:	601a      	str	r2, [r3, #0]
 8014458:	e007      	b.n	801446a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801445a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801445e:	3301      	adds	r3, #1
 8014460:	b2db      	uxtb	r3, r3
 8014462:	b25a      	sxtb	r2, r3
 8014464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801446a:	2301      	movs	r3, #1
 801446c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801446e:	e001      	b.n	8014474 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014470:	2300      	movs	r3, #0
 8014472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014476:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801447e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014482:	4618      	mov	r0, r3
 8014484:	3740      	adds	r7, #64	; 0x40
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
	...

0801448c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b08c      	sub	sp, #48	; 0x30
 8014490:	af00      	add	r7, sp, #0
 8014492:	60f8      	str	r0, [r7, #12]
 8014494:	60b9      	str	r1, [r7, #8]
 8014496:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014498:	2300      	movs	r3, #0
 801449a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80144a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d10a      	bne.n	80144bc <xQueueReceive+0x30>
	__asm volatile
 80144a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144aa:	f383 8811 	msr	BASEPRI, r3
 80144ae:	f3bf 8f6f 	isb	sy
 80144b2:	f3bf 8f4f 	dsb	sy
 80144b6:	623b      	str	r3, [r7, #32]
}
 80144b8:	bf00      	nop
 80144ba:	e7fe      	b.n	80144ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d103      	bne.n	80144ca <xQueueReceive+0x3e>
 80144c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d101      	bne.n	80144ce <xQueueReceive+0x42>
 80144ca:	2301      	movs	r3, #1
 80144cc:	e000      	b.n	80144d0 <xQueueReceive+0x44>
 80144ce:	2300      	movs	r3, #0
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d10a      	bne.n	80144ea <xQueueReceive+0x5e>
	__asm volatile
 80144d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d8:	f383 8811 	msr	BASEPRI, r3
 80144dc:	f3bf 8f6f 	isb	sy
 80144e0:	f3bf 8f4f 	dsb	sy
 80144e4:	61fb      	str	r3, [r7, #28]
}
 80144e6:	bf00      	nop
 80144e8:	e7fe      	b.n	80144e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80144ea:	f001 f99d 	bl	8015828 <xTaskGetSchedulerState>
 80144ee:	4603      	mov	r3, r0
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d102      	bne.n	80144fa <xQueueReceive+0x6e>
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d101      	bne.n	80144fe <xQueueReceive+0x72>
 80144fa:	2301      	movs	r3, #1
 80144fc:	e000      	b.n	8014500 <xQueueReceive+0x74>
 80144fe:	2300      	movs	r3, #0
 8014500:	2b00      	cmp	r3, #0
 8014502:	d10a      	bne.n	801451a <xQueueReceive+0x8e>
	__asm volatile
 8014504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014508:	f383 8811 	msr	BASEPRI, r3
 801450c:	f3bf 8f6f 	isb	sy
 8014510:	f3bf 8f4f 	dsb	sy
 8014514:	61bb      	str	r3, [r7, #24]
}
 8014516:	bf00      	nop
 8014518:	e7fe      	b.n	8014518 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801451a:	f001 ff1b 	bl	8016354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014522:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014526:	2b00      	cmp	r3, #0
 8014528:	d01f      	beq.n	801456a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801452a:	68b9      	ldr	r1, [r7, #8]
 801452c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801452e:	f000 f9b3 	bl	8014898 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014534:	1e5a      	subs	r2, r3, #1
 8014536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014538:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801453c:	691b      	ldr	r3, [r3, #16]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00f      	beq.n	8014562 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014544:	3310      	adds	r3, #16
 8014546:	4618      	mov	r0, r3
 8014548:	f000 ff4e 	bl	80153e8 <xTaskRemoveFromEventList>
 801454c:	4603      	mov	r3, r0
 801454e:	2b00      	cmp	r3, #0
 8014550:	d007      	beq.n	8014562 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014552:	4b3d      	ldr	r3, [pc, #244]	; (8014648 <xQueueReceive+0x1bc>)
 8014554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014558:	601a      	str	r2, [r3, #0]
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014562:	f001 ff27 	bl	80163b4 <vPortExitCritical>
				return pdPASS;
 8014566:	2301      	movs	r3, #1
 8014568:	e069      	b.n	801463e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d103      	bne.n	8014578 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014570:	f001 ff20 	bl	80163b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014574:	2300      	movs	r3, #0
 8014576:	e062      	b.n	801463e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801457a:	2b00      	cmp	r3, #0
 801457c:	d106      	bne.n	801458c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801457e:	f107 0310 	add.w	r3, r7, #16
 8014582:	4618      	mov	r0, r3
 8014584:	f000 fff6 	bl	8015574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014588:	2301      	movs	r3, #1
 801458a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801458c:	f001 ff12 	bl	80163b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014590:	f000 fcc2 	bl	8014f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014594:	f001 fede 	bl	8016354 <vPortEnterCritical>
 8014598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801459a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801459e:	b25b      	sxtb	r3, r3
 80145a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145a4:	d103      	bne.n	80145ae <xQueueReceive+0x122>
 80145a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a8:	2200      	movs	r2, #0
 80145aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145b4:	b25b      	sxtb	r3, r3
 80145b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145ba:	d103      	bne.n	80145c4 <xQueueReceive+0x138>
 80145bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145be:	2200      	movs	r2, #0
 80145c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80145c4:	f001 fef6 	bl	80163b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80145c8:	1d3a      	adds	r2, r7, #4
 80145ca:	f107 0310 	add.w	r3, r7, #16
 80145ce:	4611      	mov	r1, r2
 80145d0:	4618      	mov	r0, r3
 80145d2:	f000 ffe5 	bl	80155a0 <xTaskCheckForTimeOut>
 80145d6:	4603      	mov	r3, r0
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d123      	bne.n	8014624 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145de:	f000 f9d3 	bl	8014988 <prvIsQueueEmpty>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d017      	beq.n	8014618 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80145e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ea:	3324      	adds	r3, #36	; 0x24
 80145ec:	687a      	ldr	r2, [r7, #4]
 80145ee:	4611      	mov	r1, r2
 80145f0:	4618      	mov	r0, r3
 80145f2:	f000 fe6d 	bl	80152d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80145f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145f8:	f000 f974 	bl	80148e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80145fc:	f000 fc9a 	bl	8014f34 <xTaskResumeAll>
 8014600:	4603      	mov	r3, r0
 8014602:	2b00      	cmp	r3, #0
 8014604:	d189      	bne.n	801451a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014606:	4b10      	ldr	r3, [pc, #64]	; (8014648 <xQueueReceive+0x1bc>)
 8014608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801460c:	601a      	str	r2, [r3, #0]
 801460e:	f3bf 8f4f 	dsb	sy
 8014612:	f3bf 8f6f 	isb	sy
 8014616:	e780      	b.n	801451a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801461a:	f000 f963 	bl	80148e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801461e:	f000 fc89 	bl	8014f34 <xTaskResumeAll>
 8014622:	e77a      	b.n	801451a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014626:	f000 f95d 	bl	80148e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801462a:	f000 fc83 	bl	8014f34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801462e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014630:	f000 f9aa 	bl	8014988 <prvIsQueueEmpty>
 8014634:	4603      	mov	r3, r0
 8014636:	2b00      	cmp	r3, #0
 8014638:	f43f af6f 	beq.w	801451a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801463c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801463e:	4618      	mov	r0, r3
 8014640:	3730      	adds	r7, #48	; 0x30
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}
 8014646:	bf00      	nop
 8014648:	e000ed04 	.word	0xe000ed04

0801464c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b08e      	sub	sp, #56	; 0x38
 8014650:	af00      	add	r7, sp, #0
 8014652:	60f8      	str	r0, [r7, #12]
 8014654:	60b9      	str	r1, [r7, #8]
 8014656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465e:	2b00      	cmp	r3, #0
 8014660:	d10a      	bne.n	8014678 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014666:	f383 8811 	msr	BASEPRI, r3
 801466a:	f3bf 8f6f 	isb	sy
 801466e:	f3bf 8f4f 	dsb	sy
 8014672:	623b      	str	r3, [r7, #32]
}
 8014674:	bf00      	nop
 8014676:	e7fe      	b.n	8014676 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d103      	bne.n	8014686 <xQueueReceiveFromISR+0x3a>
 801467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014682:	2b00      	cmp	r3, #0
 8014684:	d101      	bne.n	801468a <xQueueReceiveFromISR+0x3e>
 8014686:	2301      	movs	r3, #1
 8014688:	e000      	b.n	801468c <xQueueReceiveFromISR+0x40>
 801468a:	2300      	movs	r3, #0
 801468c:	2b00      	cmp	r3, #0
 801468e:	d10a      	bne.n	80146a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014694:	f383 8811 	msr	BASEPRI, r3
 8014698:	f3bf 8f6f 	isb	sy
 801469c:	f3bf 8f4f 	dsb	sy
 80146a0:	61fb      	str	r3, [r7, #28]
}
 80146a2:	bf00      	nop
 80146a4:	e7fe      	b.n	80146a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80146a6:	f001 ff37 	bl	8016518 <vPortValidateInterruptPriority>
	__asm volatile
 80146aa:	f3ef 8211 	mrs	r2, BASEPRI
 80146ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b2:	f383 8811 	msr	BASEPRI, r3
 80146b6:	f3bf 8f6f 	isb	sy
 80146ba:	f3bf 8f4f 	dsb	sy
 80146be:	61ba      	str	r2, [r7, #24]
 80146c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80146c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80146c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80146c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80146cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d02f      	beq.n	8014732 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80146d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80146dc:	68b9      	ldr	r1, [r7, #8]
 80146de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146e0:	f000 f8da 	bl	8014898 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80146e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146e6:	1e5a      	subs	r2, r3, #1
 80146e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80146ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80146f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146f4:	d112      	bne.n	801471c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80146f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f8:	691b      	ldr	r3, [r3, #16]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d016      	beq.n	801472c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80146fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014700:	3310      	adds	r3, #16
 8014702:	4618      	mov	r0, r3
 8014704:	f000 fe70 	bl	80153e8 <xTaskRemoveFromEventList>
 8014708:	4603      	mov	r3, r0
 801470a:	2b00      	cmp	r3, #0
 801470c:	d00e      	beq.n	801472c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d00b      	beq.n	801472c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2201      	movs	r2, #1
 8014718:	601a      	str	r2, [r3, #0]
 801471a:	e007      	b.n	801472c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801471c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014720:	3301      	adds	r3, #1
 8014722:	b2db      	uxtb	r3, r3
 8014724:	b25a      	sxtb	r2, r3
 8014726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801472c:	2301      	movs	r3, #1
 801472e:	637b      	str	r3, [r7, #52]	; 0x34
 8014730:	e001      	b.n	8014736 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014732:	2300      	movs	r3, #0
 8014734:	637b      	str	r3, [r7, #52]	; 0x34
 8014736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014738:	613b      	str	r3, [r7, #16]
	__asm volatile
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	f383 8811 	msr	BASEPRI, r3
}
 8014740:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014744:	4618      	mov	r0, r3
 8014746:	3738      	adds	r7, #56	; 0x38
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}

0801474c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b084      	sub	sp, #16
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d10a      	bne.n	8014770 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 801475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801475e:	f383 8811 	msr	BASEPRI, r3
 8014762:	f3bf 8f6f 	isb	sy
 8014766:	f3bf 8f4f 	dsb	sy
 801476a:	60bb      	str	r3, [r7, #8]
}
 801476c:	bf00      	nop
 801476e:	e7fe      	b.n	801476e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8014770:	f001 fdf0 	bl	8016354 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014778:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801477a:	f001 fe1b 	bl	80163b4 <vPortExitCritical>

	return uxReturn;
 801477e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014780:	4618      	mov	r0, r3
 8014782:	3710      	adds	r7, #16
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8014788:	b480      	push	{r7}
 801478a:	b087      	sub	sp, #28
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d10a      	bne.n	80147b0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801479e:	f383 8811 	msr	BASEPRI, r3
 80147a2:	f3bf 8f6f 	isb	sy
 80147a6:	f3bf 8f4f 	dsb	sy
 80147aa:	60fb      	str	r3, [r7, #12]
}
 80147ac:	bf00      	nop
 80147ae:	e7fe      	b.n	80147ae <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147b4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80147b6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80147b8:	4618      	mov	r0, r3
 80147ba:	371c      	adds	r7, #28
 80147bc:	46bd      	mov	sp, r7
 80147be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c2:	4770      	bx	lr

080147c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b086      	sub	sp, #24
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	60b9      	str	r1, [r7, #8]
 80147ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80147d0:	2300      	movs	r3, #0
 80147d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d10d      	bne.n	80147fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d14d      	bne.n	8014886 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	689b      	ldr	r3, [r3, #8]
 80147ee:	4618      	mov	r0, r3
 80147f0:	f001 f838 	bl	8015864 <xTaskPriorityDisinherit>
 80147f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2200      	movs	r2, #0
 80147fa:	609a      	str	r2, [r3, #8]
 80147fc:	e043      	b.n	8014886 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d119      	bne.n	8014838 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	6858      	ldr	r0, [r3, #4]
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801480c:	461a      	mov	r2, r3
 801480e:	68b9      	ldr	r1, [r7, #8]
 8014810:	f002 f8e6 	bl	80169e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	685a      	ldr	r2, [r3, #4]
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801481c:	441a      	add	r2, r3
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	685a      	ldr	r2, [r3, #4]
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	689b      	ldr	r3, [r3, #8]
 801482a:	429a      	cmp	r2, r3
 801482c:	d32b      	bcc.n	8014886 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	681a      	ldr	r2, [r3, #0]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	605a      	str	r2, [r3, #4]
 8014836:	e026      	b.n	8014886 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	68d8      	ldr	r0, [r3, #12]
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014840:	461a      	mov	r2, r3
 8014842:	68b9      	ldr	r1, [r7, #8]
 8014844:	f002 f8cc 	bl	80169e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	68da      	ldr	r2, [r3, #12]
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014850:	425b      	negs	r3, r3
 8014852:	441a      	add	r2, r3
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	68da      	ldr	r2, [r3, #12]
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	429a      	cmp	r2, r3
 8014862:	d207      	bcs.n	8014874 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	689a      	ldr	r2, [r3, #8]
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801486c:	425b      	negs	r3, r3
 801486e:	441a      	add	r2, r3
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2b02      	cmp	r3, #2
 8014878:	d105      	bne.n	8014886 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d002      	beq.n	8014886 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	3b01      	subs	r3, #1
 8014884:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	1c5a      	adds	r2, r3, #1
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801488e:	697b      	ldr	r3, [r7, #20]
}
 8014890:	4618      	mov	r0, r3
 8014892:	3718      	adds	r7, #24
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d018      	beq.n	80148dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	68da      	ldr	r2, [r3, #12]
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148b2:	441a      	add	r2, r3
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	68da      	ldr	r2, [r3, #12]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	689b      	ldr	r3, [r3, #8]
 80148c0:	429a      	cmp	r2, r3
 80148c2:	d303      	bcc.n	80148cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	68d9      	ldr	r1, [r3, #12]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148d4:	461a      	mov	r2, r3
 80148d6:	6838      	ldr	r0, [r7, #0]
 80148d8:	f002 f882 	bl	80169e0 <memcpy>
	}
}
 80148dc:	bf00      	nop
 80148de:	3708      	adds	r7, #8
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}

080148e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80148ec:	f001 fd32 	bl	8016354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148f8:	e011      	b.n	801491e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d012      	beq.n	8014928 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	3324      	adds	r3, #36	; 0x24
 8014906:	4618      	mov	r0, r3
 8014908:	f000 fd6e 	bl	80153e8 <xTaskRemoveFromEventList>
 801490c:	4603      	mov	r3, r0
 801490e:	2b00      	cmp	r3, #0
 8014910:	d001      	beq.n	8014916 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014912:	f000 fea7 	bl	8015664 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014916:	7bfb      	ldrb	r3, [r7, #15]
 8014918:	3b01      	subs	r3, #1
 801491a:	b2db      	uxtb	r3, r3
 801491c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801491e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014922:	2b00      	cmp	r3, #0
 8014924:	dce9      	bgt.n	80148fa <prvUnlockQueue+0x16>
 8014926:	e000      	b.n	801492a <prvUnlockQueue+0x46>
					break;
 8014928:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	22ff      	movs	r2, #255	; 0xff
 801492e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014932:	f001 fd3f 	bl	80163b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014936:	f001 fd0d 	bl	8016354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014940:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014942:	e011      	b.n	8014968 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	691b      	ldr	r3, [r3, #16]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d012      	beq.n	8014972 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	3310      	adds	r3, #16
 8014950:	4618      	mov	r0, r3
 8014952:	f000 fd49 	bl	80153e8 <xTaskRemoveFromEventList>
 8014956:	4603      	mov	r3, r0
 8014958:	2b00      	cmp	r3, #0
 801495a:	d001      	beq.n	8014960 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801495c:	f000 fe82 	bl	8015664 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014960:	7bbb      	ldrb	r3, [r7, #14]
 8014962:	3b01      	subs	r3, #1
 8014964:	b2db      	uxtb	r3, r3
 8014966:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801496c:	2b00      	cmp	r3, #0
 801496e:	dce9      	bgt.n	8014944 <prvUnlockQueue+0x60>
 8014970:	e000      	b.n	8014974 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014972:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	22ff      	movs	r2, #255	; 0xff
 8014978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801497c:	f001 fd1a 	bl	80163b4 <vPortExitCritical>
}
 8014980:	bf00      	nop
 8014982:	3710      	adds	r7, #16
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}

08014988 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b084      	sub	sp, #16
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014990:	f001 fce0 	bl	8016354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014998:	2b00      	cmp	r3, #0
 801499a:	d102      	bne.n	80149a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801499c:	2301      	movs	r3, #1
 801499e:	60fb      	str	r3, [r7, #12]
 80149a0:	e001      	b.n	80149a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80149a2:	2300      	movs	r3, #0
 80149a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80149a6:	f001 fd05 	bl	80163b4 <vPortExitCritical>

	return xReturn;
 80149aa:	68fb      	ldr	r3, [r7, #12]
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3710      	adds	r7, #16
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b084      	sub	sp, #16
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80149bc:	f001 fcca 	bl	8016354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149c8:	429a      	cmp	r2, r3
 80149ca:	d102      	bne.n	80149d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80149cc:	2301      	movs	r3, #1
 80149ce:	60fb      	str	r3, [r7, #12]
 80149d0:	e001      	b.n	80149d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80149d2:	2300      	movs	r3, #0
 80149d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80149d6:	f001 fced 	bl	80163b4 <vPortExitCritical>

	return xReturn;
 80149da:	68fb      	ldr	r3, [r7, #12]
}
 80149dc:	4618      	mov	r0, r3
 80149de:	3710      	adds	r7, #16
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80149e4:	b480      	push	{r7}
 80149e6:	b085      	sub	sp, #20
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80149ee:	2300      	movs	r3, #0
 80149f0:	60fb      	str	r3, [r7, #12]
 80149f2:	e014      	b.n	8014a1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80149f4:	4a0f      	ldr	r2, [pc, #60]	; (8014a34 <vQueueAddToRegistry+0x50>)
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d10b      	bne.n	8014a18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014a00:	490c      	ldr	r1, [pc, #48]	; (8014a34 <vQueueAddToRegistry+0x50>)
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	683a      	ldr	r2, [r7, #0]
 8014a06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014a0a:	4a0a      	ldr	r2, [pc, #40]	; (8014a34 <vQueueAddToRegistry+0x50>)
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	00db      	lsls	r3, r3, #3
 8014a10:	4413      	add	r3, r2
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014a16:	e006      	b.n	8014a26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	60fb      	str	r3, [r7, #12]
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	2b07      	cmp	r3, #7
 8014a22:	d9e7      	bls.n	80149f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014a24:	bf00      	nop
 8014a26:	bf00      	nop
 8014a28:	3714      	adds	r7, #20
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr
 8014a32:	bf00      	nop
 8014a34:	2400134c 	.word	0x2400134c

08014a38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	60f8      	str	r0, [r7, #12]
 8014a40:	60b9      	str	r1, [r7, #8]
 8014a42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014a48:	f001 fc84 	bl	8016354 <vPortEnterCritical>
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a52:	b25b      	sxtb	r3, r3
 8014a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a58:	d103      	bne.n	8014a62 <vQueueWaitForMessageRestricted+0x2a>
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014a62:	697b      	ldr	r3, [r7, #20]
 8014a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a68:	b25b      	sxtb	r3, r3
 8014a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a6e:	d103      	bne.n	8014a78 <vQueueWaitForMessageRestricted+0x40>
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	2200      	movs	r2, #0
 8014a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014a78:	f001 fc9c 	bl	80163b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d106      	bne.n	8014a92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	3324      	adds	r3, #36	; 0x24
 8014a88:	687a      	ldr	r2, [r7, #4]
 8014a8a:	68b9      	ldr	r1, [r7, #8]
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f000 fc7f 	bl	8015390 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014a92:	6978      	ldr	r0, [r7, #20]
 8014a94:	f7ff ff26 	bl	80148e4 <prvUnlockQueue>
	}
 8014a98:	bf00      	nop
 8014a9a:	3718      	adds	r7, #24
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}

08014aa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b08e      	sub	sp, #56	; 0x38
 8014aa4:	af04      	add	r7, sp, #16
 8014aa6:	60f8      	str	r0, [r7, #12]
 8014aa8:	60b9      	str	r1, [r7, #8]
 8014aaa:	607a      	str	r2, [r7, #4]
 8014aac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d10a      	bne.n	8014aca <xTaskCreateStatic+0x2a>
	__asm volatile
 8014ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab8:	f383 8811 	msr	BASEPRI, r3
 8014abc:	f3bf 8f6f 	isb	sy
 8014ac0:	f3bf 8f4f 	dsb	sy
 8014ac4:	623b      	str	r3, [r7, #32]
}
 8014ac6:	bf00      	nop
 8014ac8:	e7fe      	b.n	8014ac8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d10a      	bne.n	8014ae6 <xTaskCreateStatic+0x46>
	__asm volatile
 8014ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad4:	f383 8811 	msr	BASEPRI, r3
 8014ad8:	f3bf 8f6f 	isb	sy
 8014adc:	f3bf 8f4f 	dsb	sy
 8014ae0:	61fb      	str	r3, [r7, #28]
}
 8014ae2:	bf00      	nop
 8014ae4:	e7fe      	b.n	8014ae4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014ae6:	235c      	movs	r3, #92	; 0x5c
 8014ae8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	2b5c      	cmp	r3, #92	; 0x5c
 8014aee:	d00a      	beq.n	8014b06 <xTaskCreateStatic+0x66>
	__asm volatile
 8014af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014af4:	f383 8811 	msr	BASEPRI, r3
 8014af8:	f3bf 8f6f 	isb	sy
 8014afc:	f3bf 8f4f 	dsb	sy
 8014b00:	61bb      	str	r3, [r7, #24]
}
 8014b02:	bf00      	nop
 8014b04:	e7fe      	b.n	8014b04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014b06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d01e      	beq.n	8014b4c <xTaskCreateStatic+0xac>
 8014b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d01b      	beq.n	8014b4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b20:	2202      	movs	r2, #2
 8014b22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014b26:	2300      	movs	r3, #0
 8014b28:	9303      	str	r3, [sp, #12]
 8014b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b2c:	9302      	str	r3, [sp, #8]
 8014b2e:	f107 0314 	add.w	r3, r7, #20
 8014b32:	9301      	str	r3, [sp, #4]
 8014b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b36:	9300      	str	r3, [sp, #0]
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	687a      	ldr	r2, [r7, #4]
 8014b3c:	68b9      	ldr	r1, [r7, #8]
 8014b3e:	68f8      	ldr	r0, [r7, #12]
 8014b40:	f000 f850 	bl	8014be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b46:	f000 f8dd 	bl	8014d04 <prvAddNewTaskToReadyList>
 8014b4a:	e001      	b.n	8014b50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014b50:	697b      	ldr	r3, [r7, #20]
	}
 8014b52:	4618      	mov	r0, r3
 8014b54:	3728      	adds	r7, #40	; 0x28
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}

08014b5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014b5a:	b580      	push	{r7, lr}
 8014b5c:	b08c      	sub	sp, #48	; 0x30
 8014b5e:	af04      	add	r7, sp, #16
 8014b60:	60f8      	str	r0, [r7, #12]
 8014b62:	60b9      	str	r1, [r7, #8]
 8014b64:	603b      	str	r3, [r7, #0]
 8014b66:	4613      	mov	r3, r2
 8014b68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014b6a:	88fb      	ldrh	r3, [r7, #6]
 8014b6c:	009b      	lsls	r3, r3, #2
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f001 fd12 	bl	8016598 <pvPortMalloc>
 8014b74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d00e      	beq.n	8014b9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014b7c:	205c      	movs	r0, #92	; 0x5c
 8014b7e:	f001 fd0b 	bl	8016598 <pvPortMalloc>
 8014b82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014b84:	69fb      	ldr	r3, [r7, #28]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d003      	beq.n	8014b92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	697a      	ldr	r2, [r7, #20]
 8014b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8014b90:	e005      	b.n	8014b9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014b92:	6978      	ldr	r0, [r7, #20]
 8014b94:	f001 fdcc 	bl	8016730 <vPortFree>
 8014b98:	e001      	b.n	8014b9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014b9e:	69fb      	ldr	r3, [r7, #28]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d017      	beq.n	8014bd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014ba4:	69fb      	ldr	r3, [r7, #28]
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014bac:	88fa      	ldrh	r2, [r7, #6]
 8014bae:	2300      	movs	r3, #0
 8014bb0:	9303      	str	r3, [sp, #12]
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	9302      	str	r3, [sp, #8]
 8014bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bb8:	9301      	str	r3, [sp, #4]
 8014bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bbc:	9300      	str	r3, [sp, #0]
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	68b9      	ldr	r1, [r7, #8]
 8014bc2:	68f8      	ldr	r0, [r7, #12]
 8014bc4:	f000 f80e 	bl	8014be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014bc8:	69f8      	ldr	r0, [r7, #28]
 8014bca:	f000 f89b 	bl	8014d04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014bce:	2301      	movs	r3, #1
 8014bd0:	61bb      	str	r3, [r7, #24]
 8014bd2:	e002      	b.n	8014bda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014bda:	69bb      	ldr	r3, [r7, #24]
	}
 8014bdc:	4618      	mov	r0, r3
 8014bde:	3720      	adds	r7, #32
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bd80      	pop	{r7, pc}

08014be4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b088      	sub	sp, #32
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	60f8      	str	r0, [r7, #12]
 8014bec:	60b9      	str	r1, [r7, #8]
 8014bee:	607a      	str	r2, [r7, #4]
 8014bf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	009b      	lsls	r3, r3, #2
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	21a5      	movs	r1, #165	; 0xa5
 8014bfe:	f001 fefd 	bl	80169fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014c06:	6879      	ldr	r1, [r7, #4]
 8014c08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014c0c:	440b      	add	r3, r1
 8014c0e:	009b      	lsls	r3, r3, #2
 8014c10:	4413      	add	r3, r2
 8014c12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	f023 0307 	bic.w	r3, r3, #7
 8014c1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014c1c:	69bb      	ldr	r3, [r7, #24]
 8014c1e:	f003 0307 	and.w	r3, r3, #7
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d00a      	beq.n	8014c3c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c2a:	f383 8811 	msr	BASEPRI, r3
 8014c2e:	f3bf 8f6f 	isb	sy
 8014c32:	f3bf 8f4f 	dsb	sy
 8014c36:	617b      	str	r3, [r7, #20]
}
 8014c38:	bf00      	nop
 8014c3a:	e7fe      	b.n	8014c3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014c3c:	68bb      	ldr	r3, [r7, #8]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d01f      	beq.n	8014c82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014c42:	2300      	movs	r3, #0
 8014c44:	61fb      	str	r3, [r7, #28]
 8014c46:	e012      	b.n	8014c6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014c48:	68ba      	ldr	r2, [r7, #8]
 8014c4a:	69fb      	ldr	r3, [r7, #28]
 8014c4c:	4413      	add	r3, r2
 8014c4e:	7819      	ldrb	r1, [r3, #0]
 8014c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c52:	69fb      	ldr	r3, [r7, #28]
 8014c54:	4413      	add	r3, r2
 8014c56:	3334      	adds	r3, #52	; 0x34
 8014c58:	460a      	mov	r2, r1
 8014c5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014c5c:	68ba      	ldr	r2, [r7, #8]
 8014c5e:	69fb      	ldr	r3, [r7, #28]
 8014c60:	4413      	add	r3, r2
 8014c62:	781b      	ldrb	r3, [r3, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d006      	beq.n	8014c76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	3301      	adds	r3, #1
 8014c6c:	61fb      	str	r3, [r7, #28]
 8014c6e:	69fb      	ldr	r3, [r7, #28]
 8014c70:	2b0f      	cmp	r3, #15
 8014c72:	d9e9      	bls.n	8014c48 <prvInitialiseNewTask+0x64>
 8014c74:	e000      	b.n	8014c78 <prvInitialiseNewTask+0x94>
			{
				break;
 8014c76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014c80:	e003      	b.n	8014c8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c84:	2200      	movs	r2, #0
 8014c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c8c:	2b37      	cmp	r3, #55	; 0x37
 8014c8e:	d901      	bls.n	8014c94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014c90:	2337      	movs	r3, #55	; 0x37
 8014c92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca8:	3304      	adds	r3, #4
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7ff f882 	bl	8013db4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb2:	3318      	adds	r3, #24
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7ff f87d 	bl	8013db4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd8:	2200      	movs	r2, #0
 8014cda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014cde:	683a      	ldr	r2, [r7, #0]
 8014ce0:	68f9      	ldr	r1, [r7, #12]
 8014ce2:	69b8      	ldr	r0, [r7, #24]
 8014ce4:	f001 fa06 	bl	80160f4 <pxPortInitialiseStack>
 8014ce8:	4602      	mov	r2, r0
 8014cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d002      	beq.n	8014cfa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014cfa:	bf00      	nop
 8014cfc:	3720      	adds	r7, #32
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}
	...

08014d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b082      	sub	sp, #8
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014d0c:	f001 fb22 	bl	8016354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014d10:	4b2d      	ldr	r3, [pc, #180]	; (8014dc8 <prvAddNewTaskToReadyList+0xc4>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	3301      	adds	r3, #1
 8014d16:	4a2c      	ldr	r2, [pc, #176]	; (8014dc8 <prvAddNewTaskToReadyList+0xc4>)
 8014d18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014d1a:	4b2c      	ldr	r3, [pc, #176]	; (8014dcc <prvAddNewTaskToReadyList+0xc8>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d109      	bne.n	8014d36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014d22:	4a2a      	ldr	r2, [pc, #168]	; (8014dcc <prvAddNewTaskToReadyList+0xc8>)
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014d28:	4b27      	ldr	r3, [pc, #156]	; (8014dc8 <prvAddNewTaskToReadyList+0xc4>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	2b01      	cmp	r3, #1
 8014d2e:	d110      	bne.n	8014d52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014d30:	f000 fcbc 	bl	80156ac <prvInitialiseTaskLists>
 8014d34:	e00d      	b.n	8014d52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014d36:	4b26      	ldr	r3, [pc, #152]	; (8014dd0 <prvAddNewTaskToReadyList+0xcc>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d109      	bne.n	8014d52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014d3e:	4b23      	ldr	r3, [pc, #140]	; (8014dcc <prvAddNewTaskToReadyList+0xc8>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d802      	bhi.n	8014d52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014d4c:	4a1f      	ldr	r2, [pc, #124]	; (8014dcc <prvAddNewTaskToReadyList+0xc8>)
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014d52:	4b20      	ldr	r3, [pc, #128]	; (8014dd4 <prvAddNewTaskToReadyList+0xd0>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	3301      	adds	r3, #1
 8014d58:	4a1e      	ldr	r2, [pc, #120]	; (8014dd4 <prvAddNewTaskToReadyList+0xd0>)
 8014d5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014d5c:	4b1d      	ldr	r3, [pc, #116]	; (8014dd4 <prvAddNewTaskToReadyList+0xd0>)
 8014d5e:	681a      	ldr	r2, [r3, #0]
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d68:	4b1b      	ldr	r3, [pc, #108]	; (8014dd8 <prvAddNewTaskToReadyList+0xd4>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d903      	bls.n	8014d78 <prvAddNewTaskToReadyList+0x74>
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d74:	4a18      	ldr	r2, [pc, #96]	; (8014dd8 <prvAddNewTaskToReadyList+0xd4>)
 8014d76:	6013      	str	r3, [r2, #0]
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d7c:	4613      	mov	r3, r2
 8014d7e:	009b      	lsls	r3, r3, #2
 8014d80:	4413      	add	r3, r2
 8014d82:	009b      	lsls	r3, r3, #2
 8014d84:	4a15      	ldr	r2, [pc, #84]	; (8014ddc <prvAddNewTaskToReadyList+0xd8>)
 8014d86:	441a      	add	r2, r3
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	3304      	adds	r3, #4
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	4610      	mov	r0, r2
 8014d90:	f7ff f81d 	bl	8013dce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014d94:	f001 fb0e 	bl	80163b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014d98:	4b0d      	ldr	r3, [pc, #52]	; (8014dd0 <prvAddNewTaskToReadyList+0xcc>)
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d00e      	beq.n	8014dbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014da0:	4b0a      	ldr	r3, [pc, #40]	; (8014dcc <prvAddNewTaskToReadyList+0xc8>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d207      	bcs.n	8014dbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014dae:	4b0c      	ldr	r3, [pc, #48]	; (8014de0 <prvAddNewTaskToReadyList+0xdc>)
 8014db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014db4:	601a      	str	r2, [r3, #0]
 8014db6:	f3bf 8f4f 	dsb	sy
 8014dba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014dbe:	bf00      	nop
 8014dc0:	3708      	adds	r7, #8
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	24001860 	.word	0x24001860
 8014dcc:	2400138c 	.word	0x2400138c
 8014dd0:	2400186c 	.word	0x2400186c
 8014dd4:	2400187c 	.word	0x2400187c
 8014dd8:	24001868 	.word	0x24001868
 8014ddc:	24001390 	.word	0x24001390
 8014de0:	e000ed04 	.word	0xe000ed04

08014de4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014dec:	2300      	movs	r3, #0
 8014dee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d017      	beq.n	8014e26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014df6:	4b13      	ldr	r3, [pc, #76]	; (8014e44 <vTaskDelay+0x60>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d00a      	beq.n	8014e14 <vTaskDelay+0x30>
	__asm volatile
 8014dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e02:	f383 8811 	msr	BASEPRI, r3
 8014e06:	f3bf 8f6f 	isb	sy
 8014e0a:	f3bf 8f4f 	dsb	sy
 8014e0e:	60bb      	str	r3, [r7, #8]
}
 8014e10:	bf00      	nop
 8014e12:	e7fe      	b.n	8014e12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014e14:	f000 f880 	bl	8014f18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014e18:	2100      	movs	r1, #0
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f000 fda8 	bl	8015970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014e20:	f000 f888 	bl	8014f34 <xTaskResumeAll>
 8014e24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d107      	bne.n	8014e3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014e2c:	4b06      	ldr	r3, [pc, #24]	; (8014e48 <vTaskDelay+0x64>)
 8014e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e32:	601a      	str	r2, [r3, #0]
 8014e34:	f3bf 8f4f 	dsb	sy
 8014e38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014e3c:	bf00      	nop
 8014e3e:	3710      	adds	r7, #16
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}
 8014e44:	24001888 	.word	0x24001888
 8014e48:	e000ed04 	.word	0xe000ed04

08014e4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b08a      	sub	sp, #40	; 0x28
 8014e50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014e52:	2300      	movs	r3, #0
 8014e54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014e56:	2300      	movs	r3, #0
 8014e58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014e5a:	463a      	mov	r2, r7
 8014e5c:	1d39      	adds	r1, r7, #4
 8014e5e:	f107 0308 	add.w	r3, r7, #8
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7fe fd64 	bl	8013930 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014e68:	6839      	ldr	r1, [r7, #0]
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	68ba      	ldr	r2, [r7, #8]
 8014e6e:	9202      	str	r2, [sp, #8]
 8014e70:	9301      	str	r3, [sp, #4]
 8014e72:	2300      	movs	r3, #0
 8014e74:	9300      	str	r3, [sp, #0]
 8014e76:	2300      	movs	r3, #0
 8014e78:	460a      	mov	r2, r1
 8014e7a:	4921      	ldr	r1, [pc, #132]	; (8014f00 <vTaskStartScheduler+0xb4>)
 8014e7c:	4821      	ldr	r0, [pc, #132]	; (8014f04 <vTaskStartScheduler+0xb8>)
 8014e7e:	f7ff fe0f 	bl	8014aa0 <xTaskCreateStatic>
 8014e82:	4603      	mov	r3, r0
 8014e84:	4a20      	ldr	r2, [pc, #128]	; (8014f08 <vTaskStartScheduler+0xbc>)
 8014e86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014e88:	4b1f      	ldr	r3, [pc, #124]	; (8014f08 <vTaskStartScheduler+0xbc>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d002      	beq.n	8014e96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014e90:	2301      	movs	r3, #1
 8014e92:	617b      	str	r3, [r7, #20]
 8014e94:	e001      	b.n	8014e9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014e96:	2300      	movs	r3, #0
 8014e98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	2b01      	cmp	r3, #1
 8014e9e:	d102      	bne.n	8014ea6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014ea0:	f000 fdba 	bl	8015a18 <xTimerCreateTimerTask>
 8014ea4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	2b01      	cmp	r3, #1
 8014eaa:	d116      	bne.n	8014eda <vTaskStartScheduler+0x8e>
	__asm volatile
 8014eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eb0:	f383 8811 	msr	BASEPRI, r3
 8014eb4:	f3bf 8f6f 	isb	sy
 8014eb8:	f3bf 8f4f 	dsb	sy
 8014ebc:	613b      	str	r3, [r7, #16]
}
 8014ebe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014ec0:	4b12      	ldr	r3, [pc, #72]	; (8014f0c <vTaskStartScheduler+0xc0>)
 8014ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ec6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014ec8:	4b11      	ldr	r3, [pc, #68]	; (8014f10 <vTaskStartScheduler+0xc4>)
 8014eca:	2201      	movs	r2, #1
 8014ecc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014ece:	4b11      	ldr	r3, [pc, #68]	; (8014f14 <vTaskStartScheduler+0xc8>)
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014ed4:	f001 f99c 	bl	8016210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014ed8:	e00e      	b.n	8014ef8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ee0:	d10a      	bne.n	8014ef8 <vTaskStartScheduler+0xac>
	__asm volatile
 8014ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee6:	f383 8811 	msr	BASEPRI, r3
 8014eea:	f3bf 8f6f 	isb	sy
 8014eee:	f3bf 8f4f 	dsb	sy
 8014ef2:	60fb      	str	r3, [r7, #12]
}
 8014ef4:	bf00      	nop
 8014ef6:	e7fe      	b.n	8014ef6 <vTaskStartScheduler+0xaa>
}
 8014ef8:	bf00      	nop
 8014efa:	3718      	adds	r7, #24
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	08017680 	.word	0x08017680
 8014f04:	0801567d 	.word	0x0801567d
 8014f08:	24001884 	.word	0x24001884
 8014f0c:	24001880 	.word	0x24001880
 8014f10:	2400186c 	.word	0x2400186c
 8014f14:	24001864 	.word	0x24001864

08014f18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014f18:	b480      	push	{r7}
 8014f1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014f1c:	4b04      	ldr	r3, [pc, #16]	; (8014f30 <vTaskSuspendAll+0x18>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	3301      	adds	r3, #1
 8014f22:	4a03      	ldr	r2, [pc, #12]	; (8014f30 <vTaskSuspendAll+0x18>)
 8014f24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014f26:	bf00      	nop
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2e:	4770      	bx	lr
 8014f30:	24001888 	.word	0x24001888

08014f34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b084      	sub	sp, #16
 8014f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014f42:	4b42      	ldr	r3, [pc, #264]	; (801504c <xTaskResumeAll+0x118>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d10a      	bne.n	8014f60 <xTaskResumeAll+0x2c>
	__asm volatile
 8014f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f4e:	f383 8811 	msr	BASEPRI, r3
 8014f52:	f3bf 8f6f 	isb	sy
 8014f56:	f3bf 8f4f 	dsb	sy
 8014f5a:	603b      	str	r3, [r7, #0]
}
 8014f5c:	bf00      	nop
 8014f5e:	e7fe      	b.n	8014f5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014f60:	f001 f9f8 	bl	8016354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014f64:	4b39      	ldr	r3, [pc, #228]	; (801504c <xTaskResumeAll+0x118>)
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	3b01      	subs	r3, #1
 8014f6a:	4a38      	ldr	r2, [pc, #224]	; (801504c <xTaskResumeAll+0x118>)
 8014f6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f6e:	4b37      	ldr	r3, [pc, #220]	; (801504c <xTaskResumeAll+0x118>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d162      	bne.n	801503c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014f76:	4b36      	ldr	r3, [pc, #216]	; (8015050 <xTaskResumeAll+0x11c>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d05e      	beq.n	801503c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014f7e:	e02f      	b.n	8014fe0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f80:	4b34      	ldr	r3, [pc, #208]	; (8015054 <xTaskResumeAll+0x120>)
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	3318      	adds	r3, #24
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7fe ff7b 	bl	8013e88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	3304      	adds	r3, #4
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7fe ff76 	bl	8013e88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fa0:	4b2d      	ldr	r3, [pc, #180]	; (8015058 <xTaskResumeAll+0x124>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d903      	bls.n	8014fb0 <xTaskResumeAll+0x7c>
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fac:	4a2a      	ldr	r2, [pc, #168]	; (8015058 <xTaskResumeAll+0x124>)
 8014fae:	6013      	str	r3, [r2, #0]
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fb4:	4613      	mov	r3, r2
 8014fb6:	009b      	lsls	r3, r3, #2
 8014fb8:	4413      	add	r3, r2
 8014fba:	009b      	lsls	r3, r3, #2
 8014fbc:	4a27      	ldr	r2, [pc, #156]	; (801505c <xTaskResumeAll+0x128>)
 8014fbe:	441a      	add	r2, r3
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	3304      	adds	r3, #4
 8014fc4:	4619      	mov	r1, r3
 8014fc6:	4610      	mov	r0, r2
 8014fc8:	f7fe ff01 	bl	8013dce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fd0:	4b23      	ldr	r3, [pc, #140]	; (8015060 <xTaskResumeAll+0x12c>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d302      	bcc.n	8014fe0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014fda:	4b22      	ldr	r3, [pc, #136]	; (8015064 <xTaskResumeAll+0x130>)
 8014fdc:	2201      	movs	r2, #1
 8014fde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014fe0:	4b1c      	ldr	r3, [pc, #112]	; (8015054 <xTaskResumeAll+0x120>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d1cb      	bne.n	8014f80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d001      	beq.n	8014ff2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014fee:	f000 fbfb 	bl	80157e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014ff2:	4b1d      	ldr	r3, [pc, #116]	; (8015068 <xTaskResumeAll+0x134>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d010      	beq.n	8015020 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014ffe:	f000 f847 	bl	8015090 <xTaskIncrementTick>
 8015002:	4603      	mov	r3, r0
 8015004:	2b00      	cmp	r3, #0
 8015006:	d002      	beq.n	801500e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015008:	4b16      	ldr	r3, [pc, #88]	; (8015064 <xTaskResumeAll+0x130>)
 801500a:	2201      	movs	r2, #1
 801500c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	3b01      	subs	r3, #1
 8015012:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d1f1      	bne.n	8014ffe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801501a:	4b13      	ldr	r3, [pc, #76]	; (8015068 <xTaskResumeAll+0x134>)
 801501c:	2200      	movs	r2, #0
 801501e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015020:	4b10      	ldr	r3, [pc, #64]	; (8015064 <xTaskResumeAll+0x130>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d009      	beq.n	801503c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015028:	2301      	movs	r3, #1
 801502a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801502c:	4b0f      	ldr	r3, [pc, #60]	; (801506c <xTaskResumeAll+0x138>)
 801502e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015032:	601a      	str	r2, [r3, #0]
 8015034:	f3bf 8f4f 	dsb	sy
 8015038:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801503c:	f001 f9ba 	bl	80163b4 <vPortExitCritical>

	return xAlreadyYielded;
 8015040:	68bb      	ldr	r3, [r7, #8]
}
 8015042:	4618      	mov	r0, r3
 8015044:	3710      	adds	r7, #16
 8015046:	46bd      	mov	sp, r7
 8015048:	bd80      	pop	{r7, pc}
 801504a:	bf00      	nop
 801504c:	24001888 	.word	0x24001888
 8015050:	24001860 	.word	0x24001860
 8015054:	24001820 	.word	0x24001820
 8015058:	24001868 	.word	0x24001868
 801505c:	24001390 	.word	0x24001390
 8015060:	2400138c 	.word	0x2400138c
 8015064:	24001874 	.word	0x24001874
 8015068:	24001870 	.word	0x24001870
 801506c:	e000ed04 	.word	0xe000ed04

08015070 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015070:	b480      	push	{r7}
 8015072:	b083      	sub	sp, #12
 8015074:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015076:	4b05      	ldr	r3, [pc, #20]	; (801508c <xTaskGetTickCount+0x1c>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801507c:	687b      	ldr	r3, [r7, #4]
}
 801507e:	4618      	mov	r0, r3
 8015080:	370c      	adds	r7, #12
 8015082:	46bd      	mov	sp, r7
 8015084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015088:	4770      	bx	lr
 801508a:	bf00      	nop
 801508c:	24001864 	.word	0x24001864

08015090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b086      	sub	sp, #24
 8015094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015096:	2300      	movs	r3, #0
 8015098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801509a:	4b53      	ldr	r3, [pc, #332]	; (80151e8 <xTaskIncrementTick+0x158>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	f040 8095 	bne.w	80151ce <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80150a4:	4b51      	ldr	r3, [pc, #324]	; (80151ec <xTaskIncrementTick+0x15c>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	3301      	adds	r3, #1
 80150aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80150ac:	4a4f      	ldr	r2, [pc, #316]	; (80151ec <xTaskIncrementTick+0x15c>)
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d120      	bne.n	80150fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80150b8:	4b4d      	ldr	r3, [pc, #308]	; (80151f0 <xTaskIncrementTick+0x160>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d00a      	beq.n	80150d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80150c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c6:	f383 8811 	msr	BASEPRI, r3
 80150ca:	f3bf 8f6f 	isb	sy
 80150ce:	f3bf 8f4f 	dsb	sy
 80150d2:	603b      	str	r3, [r7, #0]
}
 80150d4:	bf00      	nop
 80150d6:	e7fe      	b.n	80150d6 <xTaskIncrementTick+0x46>
 80150d8:	4b45      	ldr	r3, [pc, #276]	; (80151f0 <xTaskIncrementTick+0x160>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	60fb      	str	r3, [r7, #12]
 80150de:	4b45      	ldr	r3, [pc, #276]	; (80151f4 <xTaskIncrementTick+0x164>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	4a43      	ldr	r2, [pc, #268]	; (80151f0 <xTaskIncrementTick+0x160>)
 80150e4:	6013      	str	r3, [r2, #0]
 80150e6:	4a43      	ldr	r2, [pc, #268]	; (80151f4 <xTaskIncrementTick+0x164>)
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	6013      	str	r3, [r2, #0]
 80150ec:	4b42      	ldr	r3, [pc, #264]	; (80151f8 <xTaskIncrementTick+0x168>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	3301      	adds	r3, #1
 80150f2:	4a41      	ldr	r2, [pc, #260]	; (80151f8 <xTaskIncrementTick+0x168>)
 80150f4:	6013      	str	r3, [r2, #0]
 80150f6:	f000 fb77 	bl	80157e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80150fa:	4b40      	ldr	r3, [pc, #256]	; (80151fc <xTaskIncrementTick+0x16c>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	693a      	ldr	r2, [r7, #16]
 8015100:	429a      	cmp	r2, r3
 8015102:	d349      	bcc.n	8015198 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015104:	4b3a      	ldr	r3, [pc, #232]	; (80151f0 <xTaskIncrementTick+0x160>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d104      	bne.n	8015118 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801510e:	4b3b      	ldr	r3, [pc, #236]	; (80151fc <xTaskIncrementTick+0x16c>)
 8015110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015114:	601a      	str	r2, [r3, #0]
					break;
 8015116:	e03f      	b.n	8015198 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015118:	4b35      	ldr	r3, [pc, #212]	; (80151f0 <xTaskIncrementTick+0x160>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	68db      	ldr	r3, [r3, #12]
 801511e:	68db      	ldr	r3, [r3, #12]
 8015120:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015128:	693a      	ldr	r2, [r7, #16]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	429a      	cmp	r2, r3
 801512e:	d203      	bcs.n	8015138 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015130:	4a32      	ldr	r2, [pc, #200]	; (80151fc <xTaskIncrementTick+0x16c>)
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015136:	e02f      	b.n	8015198 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	3304      	adds	r3, #4
 801513c:	4618      	mov	r0, r3
 801513e:	f7fe fea3 	bl	8013e88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015146:	2b00      	cmp	r3, #0
 8015148:	d004      	beq.n	8015154 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	3318      	adds	r3, #24
 801514e:	4618      	mov	r0, r3
 8015150:	f7fe fe9a 	bl	8013e88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015158:	4b29      	ldr	r3, [pc, #164]	; (8015200 <xTaskIncrementTick+0x170>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	429a      	cmp	r2, r3
 801515e:	d903      	bls.n	8015168 <xTaskIncrementTick+0xd8>
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015164:	4a26      	ldr	r2, [pc, #152]	; (8015200 <xTaskIncrementTick+0x170>)
 8015166:	6013      	str	r3, [r2, #0]
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801516c:	4613      	mov	r3, r2
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	4413      	add	r3, r2
 8015172:	009b      	lsls	r3, r3, #2
 8015174:	4a23      	ldr	r2, [pc, #140]	; (8015204 <xTaskIncrementTick+0x174>)
 8015176:	441a      	add	r2, r3
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	3304      	adds	r3, #4
 801517c:	4619      	mov	r1, r3
 801517e:	4610      	mov	r0, r2
 8015180:	f7fe fe25 	bl	8013dce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015184:	68bb      	ldr	r3, [r7, #8]
 8015186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015188:	4b1f      	ldr	r3, [pc, #124]	; (8015208 <xTaskIncrementTick+0x178>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801518e:	429a      	cmp	r2, r3
 8015190:	d3b8      	bcc.n	8015104 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015192:	2301      	movs	r3, #1
 8015194:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015196:	e7b5      	b.n	8015104 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015198:	4b1b      	ldr	r3, [pc, #108]	; (8015208 <xTaskIncrementTick+0x178>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801519e:	4919      	ldr	r1, [pc, #100]	; (8015204 <xTaskIncrementTick+0x174>)
 80151a0:	4613      	mov	r3, r2
 80151a2:	009b      	lsls	r3, r3, #2
 80151a4:	4413      	add	r3, r2
 80151a6:	009b      	lsls	r3, r3, #2
 80151a8:	440b      	add	r3, r1
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	2b01      	cmp	r3, #1
 80151ae:	d901      	bls.n	80151b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80151b0:	2301      	movs	r3, #1
 80151b2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80151b4:	4b15      	ldr	r3, [pc, #84]	; (801520c <xTaskIncrementTick+0x17c>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d101      	bne.n	80151c0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80151bc:	f7eb fdcc 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80151c0:	4b13      	ldr	r3, [pc, #76]	; (8015210 <xTaskIncrementTick+0x180>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d009      	beq.n	80151dc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80151c8:	2301      	movs	r3, #1
 80151ca:	617b      	str	r3, [r7, #20]
 80151cc:	e006      	b.n	80151dc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80151ce:	4b0f      	ldr	r3, [pc, #60]	; (801520c <xTaskIncrementTick+0x17c>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	3301      	adds	r3, #1
 80151d4:	4a0d      	ldr	r2, [pc, #52]	; (801520c <xTaskIncrementTick+0x17c>)
 80151d6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80151d8:	f7eb fdbe 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80151dc:	697b      	ldr	r3, [r7, #20]
}
 80151de:	4618      	mov	r0, r3
 80151e0:	3718      	adds	r7, #24
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}
 80151e6:	bf00      	nop
 80151e8:	24001888 	.word	0x24001888
 80151ec:	24001864 	.word	0x24001864
 80151f0:	24001818 	.word	0x24001818
 80151f4:	2400181c 	.word	0x2400181c
 80151f8:	24001878 	.word	0x24001878
 80151fc:	24001880 	.word	0x24001880
 8015200:	24001868 	.word	0x24001868
 8015204:	24001390 	.word	0x24001390
 8015208:	2400138c 	.word	0x2400138c
 801520c:	24001870 	.word	0x24001870
 8015210:	24001874 	.word	0x24001874

08015214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015214:	b480      	push	{r7}
 8015216:	b085      	sub	sp, #20
 8015218:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801521a:	4b28      	ldr	r3, [pc, #160]	; (80152bc <vTaskSwitchContext+0xa8>)
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d003      	beq.n	801522a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015222:	4b27      	ldr	r3, [pc, #156]	; (80152c0 <vTaskSwitchContext+0xac>)
 8015224:	2201      	movs	r2, #1
 8015226:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015228:	e041      	b.n	80152ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801522a:	4b25      	ldr	r3, [pc, #148]	; (80152c0 <vTaskSwitchContext+0xac>)
 801522c:	2200      	movs	r2, #0
 801522e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015230:	4b24      	ldr	r3, [pc, #144]	; (80152c4 <vTaskSwitchContext+0xb0>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	60fb      	str	r3, [r7, #12]
 8015236:	e010      	b.n	801525a <vTaskSwitchContext+0x46>
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d10a      	bne.n	8015254 <vTaskSwitchContext+0x40>
	__asm volatile
 801523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015242:	f383 8811 	msr	BASEPRI, r3
 8015246:	f3bf 8f6f 	isb	sy
 801524a:	f3bf 8f4f 	dsb	sy
 801524e:	607b      	str	r3, [r7, #4]
}
 8015250:	bf00      	nop
 8015252:	e7fe      	b.n	8015252 <vTaskSwitchContext+0x3e>
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	3b01      	subs	r3, #1
 8015258:	60fb      	str	r3, [r7, #12]
 801525a:	491b      	ldr	r1, [pc, #108]	; (80152c8 <vTaskSwitchContext+0xb4>)
 801525c:	68fa      	ldr	r2, [r7, #12]
 801525e:	4613      	mov	r3, r2
 8015260:	009b      	lsls	r3, r3, #2
 8015262:	4413      	add	r3, r2
 8015264:	009b      	lsls	r3, r3, #2
 8015266:	440b      	add	r3, r1
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d0e4      	beq.n	8015238 <vTaskSwitchContext+0x24>
 801526e:	68fa      	ldr	r2, [r7, #12]
 8015270:	4613      	mov	r3, r2
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	4413      	add	r3, r2
 8015276:	009b      	lsls	r3, r3, #2
 8015278:	4a13      	ldr	r2, [pc, #76]	; (80152c8 <vTaskSwitchContext+0xb4>)
 801527a:	4413      	add	r3, r2
 801527c:	60bb      	str	r3, [r7, #8]
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	685b      	ldr	r3, [r3, #4]
 8015282:	685a      	ldr	r2, [r3, #4]
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	605a      	str	r2, [r3, #4]
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	685a      	ldr	r2, [r3, #4]
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	3308      	adds	r3, #8
 8015290:	429a      	cmp	r2, r3
 8015292:	d104      	bne.n	801529e <vTaskSwitchContext+0x8a>
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	685a      	ldr	r2, [r3, #4]
 801529a:	68bb      	ldr	r3, [r7, #8]
 801529c:	605a      	str	r2, [r3, #4]
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	68db      	ldr	r3, [r3, #12]
 80152a4:	4a09      	ldr	r2, [pc, #36]	; (80152cc <vTaskSwitchContext+0xb8>)
 80152a6:	6013      	str	r3, [r2, #0]
 80152a8:	4a06      	ldr	r2, [pc, #24]	; (80152c4 <vTaskSwitchContext+0xb0>)
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	6013      	str	r3, [r2, #0]
}
 80152ae:	bf00      	nop
 80152b0:	3714      	adds	r7, #20
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr
 80152ba:	bf00      	nop
 80152bc:	24001888 	.word	0x24001888
 80152c0:	24001874 	.word	0x24001874
 80152c4:	24001868 	.word	0x24001868
 80152c8:	24001390 	.word	0x24001390
 80152cc:	2400138c 	.word	0x2400138c

080152d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
 80152d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d10a      	bne.n	80152f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80152e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152e4:	f383 8811 	msr	BASEPRI, r3
 80152e8:	f3bf 8f6f 	isb	sy
 80152ec:	f3bf 8f4f 	dsb	sy
 80152f0:	60fb      	str	r3, [r7, #12]
}
 80152f2:	bf00      	nop
 80152f4:	e7fe      	b.n	80152f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80152f6:	4b07      	ldr	r3, [pc, #28]	; (8015314 <vTaskPlaceOnEventList+0x44>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	3318      	adds	r3, #24
 80152fc:	4619      	mov	r1, r3
 80152fe:	6878      	ldr	r0, [r7, #4]
 8015300:	f7fe fd89 	bl	8013e16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015304:	2101      	movs	r1, #1
 8015306:	6838      	ldr	r0, [r7, #0]
 8015308:	f000 fb32 	bl	8015970 <prvAddCurrentTaskToDelayedList>
}
 801530c:	bf00      	nop
 801530e:	3710      	adds	r7, #16
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	2400138c 	.word	0x2400138c

08015318 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b086      	sub	sp, #24
 801531c:	af00      	add	r7, sp, #0
 801531e:	60f8      	str	r0, [r7, #12]
 8015320:	60b9      	str	r1, [r7, #8]
 8015322:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d10a      	bne.n	8015340 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801532e:	f383 8811 	msr	BASEPRI, r3
 8015332:	f3bf 8f6f 	isb	sy
 8015336:	f3bf 8f4f 	dsb	sy
 801533a:	617b      	str	r3, [r7, #20]
}
 801533c:	bf00      	nop
 801533e:	e7fe      	b.n	801533e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8015340:	4b11      	ldr	r3, [pc, #68]	; (8015388 <vTaskPlaceOnUnorderedEventList+0x70>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d10a      	bne.n	801535e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801534c:	f383 8811 	msr	BASEPRI, r3
 8015350:	f3bf 8f6f 	isb	sy
 8015354:	f3bf 8f4f 	dsb	sy
 8015358:	613b      	str	r3, [r7, #16]
}
 801535a:	bf00      	nop
 801535c:	e7fe      	b.n	801535c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801535e:	4b0b      	ldr	r3, [pc, #44]	; (801538c <vTaskPlaceOnUnorderedEventList+0x74>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	68ba      	ldr	r2, [r7, #8]
 8015364:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015368:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801536a:	4b08      	ldr	r3, [pc, #32]	; (801538c <vTaskPlaceOnUnorderedEventList+0x74>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	3318      	adds	r3, #24
 8015370:	4619      	mov	r1, r3
 8015372:	68f8      	ldr	r0, [r7, #12]
 8015374:	f7fe fd2b 	bl	8013dce <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015378:	2101      	movs	r1, #1
 801537a:	6878      	ldr	r0, [r7, #4]
 801537c:	f000 faf8 	bl	8015970 <prvAddCurrentTaskToDelayedList>
}
 8015380:	bf00      	nop
 8015382:	3718      	adds	r7, #24
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	24001888 	.word	0x24001888
 801538c:	2400138c 	.word	0x2400138c

08015390 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015390:	b580      	push	{r7, lr}
 8015392:	b086      	sub	sp, #24
 8015394:	af00      	add	r7, sp, #0
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	60b9      	str	r1, [r7, #8]
 801539a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d10a      	bne.n	80153b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80153a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a6:	f383 8811 	msr	BASEPRI, r3
 80153aa:	f3bf 8f6f 	isb	sy
 80153ae:	f3bf 8f4f 	dsb	sy
 80153b2:	617b      	str	r3, [r7, #20]
}
 80153b4:	bf00      	nop
 80153b6:	e7fe      	b.n	80153b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80153b8:	4b0a      	ldr	r3, [pc, #40]	; (80153e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	3318      	adds	r3, #24
 80153be:	4619      	mov	r1, r3
 80153c0:	68f8      	ldr	r0, [r7, #12]
 80153c2:	f7fe fd04 	bl	8013dce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d002      	beq.n	80153d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80153cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80153d2:	6879      	ldr	r1, [r7, #4]
 80153d4:	68b8      	ldr	r0, [r7, #8]
 80153d6:	f000 facb 	bl	8015970 <prvAddCurrentTaskToDelayedList>
	}
 80153da:	bf00      	nop
 80153dc:	3718      	adds	r7, #24
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
 80153e2:	bf00      	nop
 80153e4:	2400138c 	.word	0x2400138c

080153e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b086      	sub	sp, #24
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	68db      	ldr	r3, [r3, #12]
 80153f4:	68db      	ldr	r3, [r3, #12]
 80153f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d10a      	bne.n	8015414 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80153fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015402:	f383 8811 	msr	BASEPRI, r3
 8015406:	f3bf 8f6f 	isb	sy
 801540a:	f3bf 8f4f 	dsb	sy
 801540e:	60fb      	str	r3, [r7, #12]
}
 8015410:	bf00      	nop
 8015412:	e7fe      	b.n	8015412 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	3318      	adds	r3, #24
 8015418:	4618      	mov	r0, r3
 801541a:	f7fe fd35 	bl	8013e88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801541e:	4b1e      	ldr	r3, [pc, #120]	; (8015498 <xTaskRemoveFromEventList+0xb0>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d11d      	bne.n	8015462 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	3304      	adds	r3, #4
 801542a:	4618      	mov	r0, r3
 801542c:	f7fe fd2c 	bl	8013e88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015434:	4b19      	ldr	r3, [pc, #100]	; (801549c <xTaskRemoveFromEventList+0xb4>)
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	429a      	cmp	r2, r3
 801543a:	d903      	bls.n	8015444 <xTaskRemoveFromEventList+0x5c>
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015440:	4a16      	ldr	r2, [pc, #88]	; (801549c <xTaskRemoveFromEventList+0xb4>)
 8015442:	6013      	str	r3, [r2, #0]
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015448:	4613      	mov	r3, r2
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	4413      	add	r3, r2
 801544e:	009b      	lsls	r3, r3, #2
 8015450:	4a13      	ldr	r2, [pc, #76]	; (80154a0 <xTaskRemoveFromEventList+0xb8>)
 8015452:	441a      	add	r2, r3
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	3304      	adds	r3, #4
 8015458:	4619      	mov	r1, r3
 801545a:	4610      	mov	r0, r2
 801545c:	f7fe fcb7 	bl	8013dce <vListInsertEnd>
 8015460:	e005      	b.n	801546e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	3318      	adds	r3, #24
 8015466:	4619      	mov	r1, r3
 8015468:	480e      	ldr	r0, [pc, #56]	; (80154a4 <xTaskRemoveFromEventList+0xbc>)
 801546a:	f7fe fcb0 	bl	8013dce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801546e:	693b      	ldr	r3, [r7, #16]
 8015470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015472:	4b0d      	ldr	r3, [pc, #52]	; (80154a8 <xTaskRemoveFromEventList+0xc0>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015478:	429a      	cmp	r2, r3
 801547a:	d905      	bls.n	8015488 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801547c:	2301      	movs	r3, #1
 801547e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015480:	4b0a      	ldr	r3, [pc, #40]	; (80154ac <xTaskRemoveFromEventList+0xc4>)
 8015482:	2201      	movs	r2, #1
 8015484:	601a      	str	r2, [r3, #0]
 8015486:	e001      	b.n	801548c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015488:	2300      	movs	r3, #0
 801548a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801548c:	697b      	ldr	r3, [r7, #20]
}
 801548e:	4618      	mov	r0, r3
 8015490:	3718      	adds	r7, #24
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	24001888 	.word	0x24001888
 801549c:	24001868 	.word	0x24001868
 80154a0:	24001390 	.word	0x24001390
 80154a4:	24001820 	.word	0x24001820
 80154a8:	2400138c 	.word	0x2400138c
 80154ac:	24001874 	.word	0x24001874

080154b0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b086      	sub	sp, #24
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80154ba:	4b29      	ldr	r3, [pc, #164]	; (8015560 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d10a      	bne.n	80154d8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80154c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154c6:	f383 8811 	msr	BASEPRI, r3
 80154ca:	f3bf 8f6f 	isb	sy
 80154ce:	f3bf 8f4f 	dsb	sy
 80154d2:	613b      	str	r3, [r7, #16]
}
 80154d4:	bf00      	nop
 80154d6:	e7fe      	b.n	80154d6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	68db      	ldr	r3, [r3, #12]
 80154e6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80154e8:	697b      	ldr	r3, [r7, #20]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d10a      	bne.n	8015504 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80154ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f2:	f383 8811 	msr	BASEPRI, r3
 80154f6:	f3bf 8f6f 	isb	sy
 80154fa:	f3bf 8f4f 	dsb	sy
 80154fe:	60fb      	str	r3, [r7, #12]
}
 8015500:	bf00      	nop
 8015502:	e7fe      	b.n	8015502 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8015504:	6878      	ldr	r0, [r7, #4]
 8015506:	f7fe fcbf 	bl	8013e88 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	3304      	adds	r3, #4
 801550e:	4618      	mov	r0, r3
 8015510:	f7fe fcba 	bl	8013e88 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015518:	4b12      	ldr	r3, [pc, #72]	; (8015564 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	429a      	cmp	r2, r3
 801551e:	d903      	bls.n	8015528 <vTaskRemoveFromUnorderedEventList+0x78>
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015524:	4a0f      	ldr	r2, [pc, #60]	; (8015564 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015526:	6013      	str	r3, [r2, #0]
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801552c:	4613      	mov	r3, r2
 801552e:	009b      	lsls	r3, r3, #2
 8015530:	4413      	add	r3, r2
 8015532:	009b      	lsls	r3, r3, #2
 8015534:	4a0c      	ldr	r2, [pc, #48]	; (8015568 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015536:	441a      	add	r2, r3
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	3304      	adds	r3, #4
 801553c:	4619      	mov	r1, r3
 801553e:	4610      	mov	r0, r2
 8015540:	f7fe fc45 	bl	8013dce <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015548:	4b08      	ldr	r3, [pc, #32]	; (801556c <vTaskRemoveFromUnorderedEventList+0xbc>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801554e:	429a      	cmp	r2, r3
 8015550:	d902      	bls.n	8015558 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8015552:	4b07      	ldr	r3, [pc, #28]	; (8015570 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015554:	2201      	movs	r2, #1
 8015556:	601a      	str	r2, [r3, #0]
	}
}
 8015558:	bf00      	nop
 801555a:	3718      	adds	r7, #24
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}
 8015560:	24001888 	.word	0x24001888
 8015564:	24001868 	.word	0x24001868
 8015568:	24001390 	.word	0x24001390
 801556c:	2400138c 	.word	0x2400138c
 8015570:	24001874 	.word	0x24001874

08015574 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015574:	b480      	push	{r7}
 8015576:	b083      	sub	sp, #12
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801557c:	4b06      	ldr	r3, [pc, #24]	; (8015598 <vTaskInternalSetTimeOutState+0x24>)
 801557e:	681a      	ldr	r2, [r3, #0]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015584:	4b05      	ldr	r3, [pc, #20]	; (801559c <vTaskInternalSetTimeOutState+0x28>)
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	605a      	str	r2, [r3, #4]
}
 801558c:	bf00      	nop
 801558e:	370c      	adds	r7, #12
 8015590:	46bd      	mov	sp, r7
 8015592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015596:	4770      	bx	lr
 8015598:	24001878 	.word	0x24001878
 801559c:	24001864 	.word	0x24001864

080155a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b088      	sub	sp, #32
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
 80155a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d10a      	bne.n	80155c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80155b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155b4:	f383 8811 	msr	BASEPRI, r3
 80155b8:	f3bf 8f6f 	isb	sy
 80155bc:	f3bf 8f4f 	dsb	sy
 80155c0:	613b      	str	r3, [r7, #16]
}
 80155c2:	bf00      	nop
 80155c4:	e7fe      	b.n	80155c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d10a      	bne.n	80155e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80155cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155d0:	f383 8811 	msr	BASEPRI, r3
 80155d4:	f3bf 8f6f 	isb	sy
 80155d8:	f3bf 8f4f 	dsb	sy
 80155dc:	60fb      	str	r3, [r7, #12]
}
 80155de:	bf00      	nop
 80155e0:	e7fe      	b.n	80155e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80155e2:	f000 feb7 	bl	8016354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80155e6:	4b1d      	ldr	r3, [pc, #116]	; (801565c <xTaskCheckForTimeOut+0xbc>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	685b      	ldr	r3, [r3, #4]
 80155f0:	69ba      	ldr	r2, [r7, #24]
 80155f2:	1ad3      	subs	r3, r2, r3
 80155f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80155fe:	d102      	bne.n	8015606 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015600:	2300      	movs	r3, #0
 8015602:	61fb      	str	r3, [r7, #28]
 8015604:	e023      	b.n	801564e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	4b15      	ldr	r3, [pc, #84]	; (8015660 <xTaskCheckForTimeOut+0xc0>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	429a      	cmp	r2, r3
 8015610:	d007      	beq.n	8015622 <xTaskCheckForTimeOut+0x82>
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	69ba      	ldr	r2, [r7, #24]
 8015618:	429a      	cmp	r2, r3
 801561a:	d302      	bcc.n	8015622 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801561c:	2301      	movs	r3, #1
 801561e:	61fb      	str	r3, [r7, #28]
 8015620:	e015      	b.n	801564e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	697a      	ldr	r2, [r7, #20]
 8015628:	429a      	cmp	r2, r3
 801562a:	d20b      	bcs.n	8015644 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	681a      	ldr	r2, [r3, #0]
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	1ad2      	subs	r2, r2, r3
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f7ff ff9b 	bl	8015574 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801563e:	2300      	movs	r3, #0
 8015640:	61fb      	str	r3, [r7, #28]
 8015642:	e004      	b.n	801564e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	2200      	movs	r2, #0
 8015648:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801564a:	2301      	movs	r3, #1
 801564c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801564e:	f000 feb1 	bl	80163b4 <vPortExitCritical>

	return xReturn;
 8015652:	69fb      	ldr	r3, [r7, #28]
}
 8015654:	4618      	mov	r0, r3
 8015656:	3720      	adds	r7, #32
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}
 801565c:	24001864 	.word	0x24001864
 8015660:	24001878 	.word	0x24001878

08015664 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015664:	b480      	push	{r7}
 8015666:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015668:	4b03      	ldr	r3, [pc, #12]	; (8015678 <vTaskMissedYield+0x14>)
 801566a:	2201      	movs	r2, #1
 801566c:	601a      	str	r2, [r3, #0]
}
 801566e:	bf00      	nop
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr
 8015678:	24001874 	.word	0x24001874

0801567c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015684:	f000 f852 	bl	801572c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015688:	4b06      	ldr	r3, [pc, #24]	; (80156a4 <prvIdleTask+0x28>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	2b01      	cmp	r3, #1
 801568e:	d9f9      	bls.n	8015684 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015690:	4b05      	ldr	r3, [pc, #20]	; (80156a8 <prvIdleTask+0x2c>)
 8015692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015696:	601a      	str	r2, [r3, #0]
 8015698:	f3bf 8f4f 	dsb	sy
 801569c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80156a0:	e7f0      	b.n	8015684 <prvIdleTask+0x8>
 80156a2:	bf00      	nop
 80156a4:	24001390 	.word	0x24001390
 80156a8:	e000ed04 	.word	0xe000ed04

080156ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156b2:	2300      	movs	r3, #0
 80156b4:	607b      	str	r3, [r7, #4]
 80156b6:	e00c      	b.n	80156d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80156b8:	687a      	ldr	r2, [r7, #4]
 80156ba:	4613      	mov	r3, r2
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	4413      	add	r3, r2
 80156c0:	009b      	lsls	r3, r3, #2
 80156c2:	4a12      	ldr	r2, [pc, #72]	; (801570c <prvInitialiseTaskLists+0x60>)
 80156c4:	4413      	add	r3, r2
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7fe fb54 	bl	8013d74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	3301      	adds	r3, #1
 80156d0:	607b      	str	r3, [r7, #4]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2b37      	cmp	r3, #55	; 0x37
 80156d6:	d9ef      	bls.n	80156b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80156d8:	480d      	ldr	r0, [pc, #52]	; (8015710 <prvInitialiseTaskLists+0x64>)
 80156da:	f7fe fb4b 	bl	8013d74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80156de:	480d      	ldr	r0, [pc, #52]	; (8015714 <prvInitialiseTaskLists+0x68>)
 80156e0:	f7fe fb48 	bl	8013d74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80156e4:	480c      	ldr	r0, [pc, #48]	; (8015718 <prvInitialiseTaskLists+0x6c>)
 80156e6:	f7fe fb45 	bl	8013d74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80156ea:	480c      	ldr	r0, [pc, #48]	; (801571c <prvInitialiseTaskLists+0x70>)
 80156ec:	f7fe fb42 	bl	8013d74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80156f0:	480b      	ldr	r0, [pc, #44]	; (8015720 <prvInitialiseTaskLists+0x74>)
 80156f2:	f7fe fb3f 	bl	8013d74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80156f6:	4b0b      	ldr	r3, [pc, #44]	; (8015724 <prvInitialiseTaskLists+0x78>)
 80156f8:	4a05      	ldr	r2, [pc, #20]	; (8015710 <prvInitialiseTaskLists+0x64>)
 80156fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80156fc:	4b0a      	ldr	r3, [pc, #40]	; (8015728 <prvInitialiseTaskLists+0x7c>)
 80156fe:	4a05      	ldr	r2, [pc, #20]	; (8015714 <prvInitialiseTaskLists+0x68>)
 8015700:	601a      	str	r2, [r3, #0]
}
 8015702:	bf00      	nop
 8015704:	3708      	adds	r7, #8
 8015706:	46bd      	mov	sp, r7
 8015708:	bd80      	pop	{r7, pc}
 801570a:	bf00      	nop
 801570c:	24001390 	.word	0x24001390
 8015710:	240017f0 	.word	0x240017f0
 8015714:	24001804 	.word	0x24001804
 8015718:	24001820 	.word	0x24001820
 801571c:	24001834 	.word	0x24001834
 8015720:	2400184c 	.word	0x2400184c
 8015724:	24001818 	.word	0x24001818
 8015728:	2400181c 	.word	0x2400181c

0801572c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b082      	sub	sp, #8
 8015730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015732:	e019      	b.n	8015768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015734:	f000 fe0e 	bl	8016354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015738:	4b10      	ldr	r3, [pc, #64]	; (801577c <prvCheckTasksWaitingTermination+0x50>)
 801573a:	68db      	ldr	r3, [r3, #12]
 801573c:	68db      	ldr	r3, [r3, #12]
 801573e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	3304      	adds	r3, #4
 8015744:	4618      	mov	r0, r3
 8015746:	f7fe fb9f 	bl	8013e88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801574a:	4b0d      	ldr	r3, [pc, #52]	; (8015780 <prvCheckTasksWaitingTermination+0x54>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	3b01      	subs	r3, #1
 8015750:	4a0b      	ldr	r2, [pc, #44]	; (8015780 <prvCheckTasksWaitingTermination+0x54>)
 8015752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015754:	4b0b      	ldr	r3, [pc, #44]	; (8015784 <prvCheckTasksWaitingTermination+0x58>)
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	3b01      	subs	r3, #1
 801575a:	4a0a      	ldr	r2, [pc, #40]	; (8015784 <prvCheckTasksWaitingTermination+0x58>)
 801575c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801575e:	f000 fe29 	bl	80163b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015762:	6878      	ldr	r0, [r7, #4]
 8015764:	f000 f810 	bl	8015788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015768:	4b06      	ldr	r3, [pc, #24]	; (8015784 <prvCheckTasksWaitingTermination+0x58>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d1e1      	bne.n	8015734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015770:	bf00      	nop
 8015772:	bf00      	nop
 8015774:	3708      	adds	r7, #8
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}
 801577a:	bf00      	nop
 801577c:	24001834 	.word	0x24001834
 8015780:	24001860 	.word	0x24001860
 8015784:	24001848 	.word	0x24001848

08015788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015796:	2b00      	cmp	r3, #0
 8015798:	d108      	bne.n	80157ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801579e:	4618      	mov	r0, r3
 80157a0:	f000 ffc6 	bl	8016730 <vPortFree>
				vPortFree( pxTCB );
 80157a4:	6878      	ldr	r0, [r7, #4]
 80157a6:	f000 ffc3 	bl	8016730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80157aa:	e018      	b.n	80157de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157b2:	2b01      	cmp	r3, #1
 80157b4:	d103      	bne.n	80157be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f000 ffba 	bl	8016730 <vPortFree>
	}
 80157bc:	e00f      	b.n	80157de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157c4:	2b02      	cmp	r3, #2
 80157c6:	d00a      	beq.n	80157de <prvDeleteTCB+0x56>
	__asm volatile
 80157c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157cc:	f383 8811 	msr	BASEPRI, r3
 80157d0:	f3bf 8f6f 	isb	sy
 80157d4:	f3bf 8f4f 	dsb	sy
 80157d8:	60fb      	str	r3, [r7, #12]
}
 80157da:	bf00      	nop
 80157dc:	e7fe      	b.n	80157dc <prvDeleteTCB+0x54>
	}
 80157de:	bf00      	nop
 80157e0:	3710      	adds	r7, #16
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
	...

080157e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80157e8:	b480      	push	{r7}
 80157ea:	b083      	sub	sp, #12
 80157ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80157ee:	4b0c      	ldr	r3, [pc, #48]	; (8015820 <prvResetNextTaskUnblockTime+0x38>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d104      	bne.n	8015802 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80157f8:	4b0a      	ldr	r3, [pc, #40]	; (8015824 <prvResetNextTaskUnblockTime+0x3c>)
 80157fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80157fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015800:	e008      	b.n	8015814 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015802:	4b07      	ldr	r3, [pc, #28]	; (8015820 <prvResetNextTaskUnblockTime+0x38>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	68db      	ldr	r3, [r3, #12]
 8015808:	68db      	ldr	r3, [r3, #12]
 801580a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	685b      	ldr	r3, [r3, #4]
 8015810:	4a04      	ldr	r2, [pc, #16]	; (8015824 <prvResetNextTaskUnblockTime+0x3c>)
 8015812:	6013      	str	r3, [r2, #0]
}
 8015814:	bf00      	nop
 8015816:	370c      	adds	r7, #12
 8015818:	46bd      	mov	sp, r7
 801581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581e:	4770      	bx	lr
 8015820:	24001818 	.word	0x24001818
 8015824:	24001880 	.word	0x24001880

08015828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015828:	b480      	push	{r7}
 801582a:	b083      	sub	sp, #12
 801582c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801582e:	4b0b      	ldr	r3, [pc, #44]	; (801585c <xTaskGetSchedulerState+0x34>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d102      	bne.n	801583c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015836:	2301      	movs	r3, #1
 8015838:	607b      	str	r3, [r7, #4]
 801583a:	e008      	b.n	801584e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801583c:	4b08      	ldr	r3, [pc, #32]	; (8015860 <xTaskGetSchedulerState+0x38>)
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d102      	bne.n	801584a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015844:	2302      	movs	r3, #2
 8015846:	607b      	str	r3, [r7, #4]
 8015848:	e001      	b.n	801584e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801584a:	2300      	movs	r3, #0
 801584c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801584e:	687b      	ldr	r3, [r7, #4]
	}
 8015850:	4618      	mov	r0, r3
 8015852:	370c      	adds	r7, #12
 8015854:	46bd      	mov	sp, r7
 8015856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585a:	4770      	bx	lr
 801585c:	2400186c 	.word	0x2400186c
 8015860:	24001888 	.word	0x24001888

08015864 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015864:	b580      	push	{r7, lr}
 8015866:	b086      	sub	sp, #24
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015870:	2300      	movs	r3, #0
 8015872:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d056      	beq.n	8015928 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801587a:	4b2e      	ldr	r3, [pc, #184]	; (8015934 <xTaskPriorityDisinherit+0xd0>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	693a      	ldr	r2, [r7, #16]
 8015880:	429a      	cmp	r2, r3
 8015882:	d00a      	beq.n	801589a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015888:	f383 8811 	msr	BASEPRI, r3
 801588c:	f3bf 8f6f 	isb	sy
 8015890:	f3bf 8f4f 	dsb	sy
 8015894:	60fb      	str	r3, [r7, #12]
}
 8015896:	bf00      	nop
 8015898:	e7fe      	b.n	8015898 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801589a:	693b      	ldr	r3, [r7, #16]
 801589c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d10a      	bne.n	80158b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80158a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158a6:	f383 8811 	msr	BASEPRI, r3
 80158aa:	f3bf 8f6f 	isb	sy
 80158ae:	f3bf 8f4f 	dsb	sy
 80158b2:	60bb      	str	r3, [r7, #8]
}
 80158b4:	bf00      	nop
 80158b6:	e7fe      	b.n	80158b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80158b8:	693b      	ldr	r3, [r7, #16]
 80158ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158bc:	1e5a      	subs	r2, r3, #1
 80158be:	693b      	ldr	r3, [r7, #16]
 80158c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d02c      	beq.n	8015928 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d128      	bne.n	8015928 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	3304      	adds	r3, #4
 80158da:	4618      	mov	r0, r3
 80158dc:	f7fe fad4 	bl	8013e88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80158e0:	693b      	ldr	r3, [r7, #16]
 80158e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80158e4:	693b      	ldr	r3, [r7, #16]
 80158e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158e8:	693b      	ldr	r3, [r7, #16]
 80158ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80158f4:	693b      	ldr	r3, [r7, #16]
 80158f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158f8:	4b0f      	ldr	r3, [pc, #60]	; (8015938 <xTaskPriorityDisinherit+0xd4>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d903      	bls.n	8015908 <xTaskPriorityDisinherit+0xa4>
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015904:	4a0c      	ldr	r2, [pc, #48]	; (8015938 <xTaskPriorityDisinherit+0xd4>)
 8015906:	6013      	str	r3, [r2, #0]
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801590c:	4613      	mov	r3, r2
 801590e:	009b      	lsls	r3, r3, #2
 8015910:	4413      	add	r3, r2
 8015912:	009b      	lsls	r3, r3, #2
 8015914:	4a09      	ldr	r2, [pc, #36]	; (801593c <xTaskPriorityDisinherit+0xd8>)
 8015916:	441a      	add	r2, r3
 8015918:	693b      	ldr	r3, [r7, #16]
 801591a:	3304      	adds	r3, #4
 801591c:	4619      	mov	r1, r3
 801591e:	4610      	mov	r0, r2
 8015920:	f7fe fa55 	bl	8013dce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015924:	2301      	movs	r3, #1
 8015926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015928:	697b      	ldr	r3, [r7, #20]
	}
 801592a:	4618      	mov	r0, r3
 801592c:	3718      	adds	r7, #24
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}
 8015932:	bf00      	nop
 8015934:	2400138c 	.word	0x2400138c
 8015938:	24001868 	.word	0x24001868
 801593c:	24001390 	.word	0x24001390

08015940 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015940:	b480      	push	{r7}
 8015942:	b083      	sub	sp, #12
 8015944:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015946:	4b09      	ldr	r3, [pc, #36]	; (801596c <uxTaskResetEventItemValue+0x2c>)
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	699b      	ldr	r3, [r3, #24]
 801594c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801594e:	4b07      	ldr	r3, [pc, #28]	; (801596c <uxTaskResetEventItemValue+0x2c>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015954:	4b05      	ldr	r3, [pc, #20]	; (801596c <uxTaskResetEventItemValue+0x2c>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801595c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801595e:	687b      	ldr	r3, [r7, #4]
}
 8015960:	4618      	mov	r0, r3
 8015962:	370c      	adds	r7, #12
 8015964:	46bd      	mov	sp, r7
 8015966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596a:	4770      	bx	lr
 801596c:	2400138c 	.word	0x2400138c

08015970 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b084      	sub	sp, #16
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
 8015978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801597a:	4b21      	ldr	r3, [pc, #132]	; (8015a00 <prvAddCurrentTaskToDelayedList+0x90>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015980:	4b20      	ldr	r3, [pc, #128]	; (8015a04 <prvAddCurrentTaskToDelayedList+0x94>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	3304      	adds	r3, #4
 8015986:	4618      	mov	r0, r3
 8015988:	f7fe fa7e 	bl	8013e88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015992:	d10a      	bne.n	80159aa <prvAddCurrentTaskToDelayedList+0x3a>
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d007      	beq.n	80159aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801599a:	4b1a      	ldr	r3, [pc, #104]	; (8015a04 <prvAddCurrentTaskToDelayedList+0x94>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	3304      	adds	r3, #4
 80159a0:	4619      	mov	r1, r3
 80159a2:	4819      	ldr	r0, [pc, #100]	; (8015a08 <prvAddCurrentTaskToDelayedList+0x98>)
 80159a4:	f7fe fa13 	bl	8013dce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80159a8:	e026      	b.n	80159f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80159aa:	68fa      	ldr	r2, [r7, #12]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	4413      	add	r3, r2
 80159b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80159b2:	4b14      	ldr	r3, [pc, #80]	; (8015a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	68ba      	ldr	r2, [r7, #8]
 80159b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80159ba:	68ba      	ldr	r2, [r7, #8]
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	429a      	cmp	r2, r3
 80159c0:	d209      	bcs.n	80159d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80159c2:	4b12      	ldr	r3, [pc, #72]	; (8015a0c <prvAddCurrentTaskToDelayedList+0x9c>)
 80159c4:	681a      	ldr	r2, [r3, #0]
 80159c6:	4b0f      	ldr	r3, [pc, #60]	; (8015a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	3304      	adds	r3, #4
 80159cc:	4619      	mov	r1, r3
 80159ce:	4610      	mov	r0, r2
 80159d0:	f7fe fa21 	bl	8013e16 <vListInsert>
}
 80159d4:	e010      	b.n	80159f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80159d6:	4b0e      	ldr	r3, [pc, #56]	; (8015a10 <prvAddCurrentTaskToDelayedList+0xa0>)
 80159d8:	681a      	ldr	r2, [r3, #0]
 80159da:	4b0a      	ldr	r3, [pc, #40]	; (8015a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	3304      	adds	r3, #4
 80159e0:	4619      	mov	r1, r3
 80159e2:	4610      	mov	r0, r2
 80159e4:	f7fe fa17 	bl	8013e16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80159e8:	4b0a      	ldr	r3, [pc, #40]	; (8015a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	68ba      	ldr	r2, [r7, #8]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d202      	bcs.n	80159f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80159f2:	4a08      	ldr	r2, [pc, #32]	; (8015a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80159f4:	68bb      	ldr	r3, [r7, #8]
 80159f6:	6013      	str	r3, [r2, #0]
}
 80159f8:	bf00      	nop
 80159fa:	3710      	adds	r7, #16
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}
 8015a00:	24001864 	.word	0x24001864
 8015a04:	2400138c 	.word	0x2400138c
 8015a08:	2400184c 	.word	0x2400184c
 8015a0c:	2400181c 	.word	0x2400181c
 8015a10:	24001818 	.word	0x24001818
 8015a14:	24001880 	.word	0x24001880

08015a18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b08a      	sub	sp, #40	; 0x28
 8015a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015a22:	f000 fb07 	bl	8016034 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015a26:	4b1c      	ldr	r3, [pc, #112]	; (8015a98 <xTimerCreateTimerTask+0x80>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d021      	beq.n	8015a72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015a32:	2300      	movs	r3, #0
 8015a34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015a36:	1d3a      	adds	r2, r7, #4
 8015a38:	f107 0108 	add.w	r1, r7, #8
 8015a3c:	f107 030c 	add.w	r3, r7, #12
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7fd ff8f 	bl	8013964 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015a46:	6879      	ldr	r1, [r7, #4]
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	68fa      	ldr	r2, [r7, #12]
 8015a4c:	9202      	str	r2, [sp, #8]
 8015a4e:	9301      	str	r3, [sp, #4]
 8015a50:	2302      	movs	r3, #2
 8015a52:	9300      	str	r3, [sp, #0]
 8015a54:	2300      	movs	r3, #0
 8015a56:	460a      	mov	r2, r1
 8015a58:	4910      	ldr	r1, [pc, #64]	; (8015a9c <xTimerCreateTimerTask+0x84>)
 8015a5a:	4811      	ldr	r0, [pc, #68]	; (8015aa0 <xTimerCreateTimerTask+0x88>)
 8015a5c:	f7ff f820 	bl	8014aa0 <xTaskCreateStatic>
 8015a60:	4603      	mov	r3, r0
 8015a62:	4a10      	ldr	r2, [pc, #64]	; (8015aa4 <xTimerCreateTimerTask+0x8c>)
 8015a64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015a66:	4b0f      	ldr	r3, [pc, #60]	; (8015aa4 <xTimerCreateTimerTask+0x8c>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d001      	beq.n	8015a72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015a6e:	2301      	movs	r3, #1
 8015a70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015a72:	697b      	ldr	r3, [r7, #20]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d10a      	bne.n	8015a8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a7c:	f383 8811 	msr	BASEPRI, r3
 8015a80:	f3bf 8f6f 	isb	sy
 8015a84:	f3bf 8f4f 	dsb	sy
 8015a88:	613b      	str	r3, [r7, #16]
}
 8015a8a:	bf00      	nop
 8015a8c:	e7fe      	b.n	8015a8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015a8e:	697b      	ldr	r3, [r7, #20]
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	3718      	adds	r7, #24
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	240018bc 	.word	0x240018bc
 8015a9c:	08017688 	.word	0x08017688
 8015aa0:	08015bdd 	.word	0x08015bdd
 8015aa4:	240018c0 	.word	0x240018c0

08015aa8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b08a      	sub	sp, #40	; 0x28
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	60f8      	str	r0, [r7, #12]
 8015ab0:	60b9      	str	r1, [r7, #8]
 8015ab2:	607a      	str	r2, [r7, #4]
 8015ab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d10a      	bne.n	8015ad6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ac4:	f383 8811 	msr	BASEPRI, r3
 8015ac8:	f3bf 8f6f 	isb	sy
 8015acc:	f3bf 8f4f 	dsb	sy
 8015ad0:	623b      	str	r3, [r7, #32]
}
 8015ad2:	bf00      	nop
 8015ad4:	e7fe      	b.n	8015ad4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015ad6:	4b1a      	ldr	r3, [pc, #104]	; (8015b40 <xTimerGenericCommand+0x98>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d02a      	beq.n	8015b34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	2b05      	cmp	r3, #5
 8015aee:	dc18      	bgt.n	8015b22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015af0:	f7ff fe9a 	bl	8015828 <xTaskGetSchedulerState>
 8015af4:	4603      	mov	r3, r0
 8015af6:	2b02      	cmp	r3, #2
 8015af8:	d109      	bne.n	8015b0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015afa:	4b11      	ldr	r3, [pc, #68]	; (8015b40 <xTimerGenericCommand+0x98>)
 8015afc:	6818      	ldr	r0, [r3, #0]
 8015afe:	f107 0110 	add.w	r1, r7, #16
 8015b02:	2300      	movs	r3, #0
 8015b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b06:	f7fe fb27 	bl	8014158 <xQueueGenericSend>
 8015b0a:	6278      	str	r0, [r7, #36]	; 0x24
 8015b0c:	e012      	b.n	8015b34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015b0e:	4b0c      	ldr	r3, [pc, #48]	; (8015b40 <xTimerGenericCommand+0x98>)
 8015b10:	6818      	ldr	r0, [r3, #0]
 8015b12:	f107 0110 	add.w	r1, r7, #16
 8015b16:	2300      	movs	r3, #0
 8015b18:	2200      	movs	r2, #0
 8015b1a:	f7fe fb1d 	bl	8014158 <xQueueGenericSend>
 8015b1e:	6278      	str	r0, [r7, #36]	; 0x24
 8015b20:	e008      	b.n	8015b34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015b22:	4b07      	ldr	r3, [pc, #28]	; (8015b40 <xTimerGenericCommand+0x98>)
 8015b24:	6818      	ldr	r0, [r3, #0]
 8015b26:	f107 0110 	add.w	r1, r7, #16
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	683a      	ldr	r2, [r7, #0]
 8015b2e:	f7fe fc11 	bl	8014354 <xQueueGenericSendFromISR>
 8015b32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3728      	adds	r7, #40	; 0x28
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}
 8015b3e:	bf00      	nop
 8015b40:	240018bc 	.word	0x240018bc

08015b44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b088      	sub	sp, #32
 8015b48:	af02      	add	r7, sp, #8
 8015b4a:	6078      	str	r0, [r7, #4]
 8015b4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b4e:	4b22      	ldr	r3, [pc, #136]	; (8015bd8 <prvProcessExpiredTimer+0x94>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	68db      	ldr	r3, [r3, #12]
 8015b54:	68db      	ldr	r3, [r3, #12]
 8015b56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	3304      	adds	r3, #4
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7fe f993 	bl	8013e88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b68:	f003 0304 	and.w	r3, r3, #4
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d022      	beq.n	8015bb6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	699a      	ldr	r2, [r3, #24]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	18d1      	adds	r1, r2, r3
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	683a      	ldr	r2, [r7, #0]
 8015b7c:	6978      	ldr	r0, [r7, #20]
 8015b7e:	f000 f8d1 	bl	8015d24 <prvInsertTimerInActiveList>
 8015b82:	4603      	mov	r3, r0
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d01f      	beq.n	8015bc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015b88:	2300      	movs	r3, #0
 8015b8a:	9300      	str	r3, [sp, #0]
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	687a      	ldr	r2, [r7, #4]
 8015b90:	2100      	movs	r1, #0
 8015b92:	6978      	ldr	r0, [r7, #20]
 8015b94:	f7ff ff88 	bl	8015aa8 <xTimerGenericCommand>
 8015b98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d113      	bne.n	8015bc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ba4:	f383 8811 	msr	BASEPRI, r3
 8015ba8:	f3bf 8f6f 	isb	sy
 8015bac:	f3bf 8f4f 	dsb	sy
 8015bb0:	60fb      	str	r3, [r7, #12]
}
 8015bb2:	bf00      	nop
 8015bb4:	e7fe      	b.n	8015bb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015bb6:	697b      	ldr	r3, [r7, #20]
 8015bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015bbc:	f023 0301 	bic.w	r3, r3, #1
 8015bc0:	b2da      	uxtb	r2, r3
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015bc8:	697b      	ldr	r3, [r7, #20]
 8015bca:	6a1b      	ldr	r3, [r3, #32]
 8015bcc:	6978      	ldr	r0, [r7, #20]
 8015bce:	4798      	blx	r3
}
 8015bd0:	bf00      	nop
 8015bd2:	3718      	adds	r7, #24
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}
 8015bd8:	240018b4 	.word	0x240018b4

08015bdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015be4:	f107 0308 	add.w	r3, r7, #8
 8015be8:	4618      	mov	r0, r3
 8015bea:	f000 f857 	bl	8015c9c <prvGetNextExpireTime>
 8015bee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	4619      	mov	r1, r3
 8015bf4:	68f8      	ldr	r0, [r7, #12]
 8015bf6:	f000 f803 	bl	8015c00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015bfa:	f000 f8d5 	bl	8015da8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015bfe:	e7f1      	b.n	8015be4 <prvTimerTask+0x8>

08015c00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b084      	sub	sp, #16
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015c0a:	f7ff f985 	bl	8014f18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015c0e:	f107 0308 	add.w	r3, r7, #8
 8015c12:	4618      	mov	r0, r3
 8015c14:	f000 f866 	bl	8015ce4 <prvSampleTimeNow>
 8015c18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d130      	bne.n	8015c82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d10a      	bne.n	8015c3c <prvProcessTimerOrBlockTask+0x3c>
 8015c26:	687a      	ldr	r2, [r7, #4]
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d806      	bhi.n	8015c3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015c2e:	f7ff f981 	bl	8014f34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015c32:	68f9      	ldr	r1, [r7, #12]
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f7ff ff85 	bl	8015b44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015c3a:	e024      	b.n	8015c86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d008      	beq.n	8015c54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015c42:	4b13      	ldr	r3, [pc, #76]	; (8015c90 <prvProcessTimerOrBlockTask+0x90>)
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d101      	bne.n	8015c50 <prvProcessTimerOrBlockTask+0x50>
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	e000      	b.n	8015c52 <prvProcessTimerOrBlockTask+0x52>
 8015c50:	2300      	movs	r3, #0
 8015c52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015c54:	4b0f      	ldr	r3, [pc, #60]	; (8015c94 <prvProcessTimerOrBlockTask+0x94>)
 8015c56:	6818      	ldr	r0, [r3, #0]
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	1ad3      	subs	r3, r2, r3
 8015c5e:	683a      	ldr	r2, [r7, #0]
 8015c60:	4619      	mov	r1, r3
 8015c62:	f7fe fee9 	bl	8014a38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015c66:	f7ff f965 	bl	8014f34 <xTaskResumeAll>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d10a      	bne.n	8015c86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015c70:	4b09      	ldr	r3, [pc, #36]	; (8015c98 <prvProcessTimerOrBlockTask+0x98>)
 8015c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c76:	601a      	str	r2, [r3, #0]
 8015c78:	f3bf 8f4f 	dsb	sy
 8015c7c:	f3bf 8f6f 	isb	sy
}
 8015c80:	e001      	b.n	8015c86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015c82:	f7ff f957 	bl	8014f34 <xTaskResumeAll>
}
 8015c86:	bf00      	nop
 8015c88:	3710      	adds	r7, #16
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}
 8015c8e:	bf00      	nop
 8015c90:	240018b8 	.word	0x240018b8
 8015c94:	240018bc 	.word	0x240018bc
 8015c98:	e000ed04 	.word	0xe000ed04

08015c9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015c9c:	b480      	push	{r7}
 8015c9e:	b085      	sub	sp, #20
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015ca4:	4b0e      	ldr	r3, [pc, #56]	; (8015ce0 <prvGetNextExpireTime+0x44>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d101      	bne.n	8015cb2 <prvGetNextExpireTime+0x16>
 8015cae:	2201      	movs	r2, #1
 8015cb0:	e000      	b.n	8015cb4 <prvGetNextExpireTime+0x18>
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d105      	bne.n	8015ccc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015cc0:	4b07      	ldr	r3, [pc, #28]	; (8015ce0 <prvGetNextExpireTime+0x44>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	68db      	ldr	r3, [r3, #12]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	60fb      	str	r3, [r7, #12]
 8015cca:	e001      	b.n	8015cd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015cd0:	68fb      	ldr	r3, [r7, #12]
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3714      	adds	r7, #20
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cdc:	4770      	bx	lr
 8015cde:	bf00      	nop
 8015ce0:	240018b4 	.word	0x240018b4

08015ce4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015cec:	f7ff f9c0 	bl	8015070 <xTaskGetTickCount>
 8015cf0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015cf2:	4b0b      	ldr	r3, [pc, #44]	; (8015d20 <prvSampleTimeNow+0x3c>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	68fa      	ldr	r2, [r7, #12]
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d205      	bcs.n	8015d08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015cfc:	f000 f936 	bl	8015f6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2201      	movs	r2, #1
 8015d04:	601a      	str	r2, [r3, #0]
 8015d06:	e002      	b.n	8015d0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015d0e:	4a04      	ldr	r2, [pc, #16]	; (8015d20 <prvSampleTimeNow+0x3c>)
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015d14:	68fb      	ldr	r3, [r7, #12]
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3710      	adds	r7, #16
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
 8015d1e:	bf00      	nop
 8015d20:	240018c4 	.word	0x240018c4

08015d24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b086      	sub	sp, #24
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	60f8      	str	r0, [r7, #12]
 8015d2c:	60b9      	str	r1, [r7, #8]
 8015d2e:	607a      	str	r2, [r7, #4]
 8015d30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015d32:	2300      	movs	r3, #0
 8015d34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	68ba      	ldr	r2, [r7, #8]
 8015d3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	68fa      	ldr	r2, [r7, #12]
 8015d40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015d42:	68ba      	ldr	r2, [r7, #8]
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	429a      	cmp	r2, r3
 8015d48:	d812      	bhi.n	8015d70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015d4a:	687a      	ldr	r2, [r7, #4]
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	1ad2      	subs	r2, r2, r3
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	699b      	ldr	r3, [r3, #24]
 8015d54:	429a      	cmp	r2, r3
 8015d56:	d302      	bcc.n	8015d5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015d58:	2301      	movs	r3, #1
 8015d5a:	617b      	str	r3, [r7, #20]
 8015d5c:	e01b      	b.n	8015d96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015d5e:	4b10      	ldr	r3, [pc, #64]	; (8015da0 <prvInsertTimerInActiveList+0x7c>)
 8015d60:	681a      	ldr	r2, [r3, #0]
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	3304      	adds	r3, #4
 8015d66:	4619      	mov	r1, r3
 8015d68:	4610      	mov	r0, r2
 8015d6a:	f7fe f854 	bl	8013e16 <vListInsert>
 8015d6e:	e012      	b.n	8015d96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015d70:	687a      	ldr	r2, [r7, #4]
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d206      	bcs.n	8015d86 <prvInsertTimerInActiveList+0x62>
 8015d78:	68ba      	ldr	r2, [r7, #8]
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d302      	bcc.n	8015d86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015d80:	2301      	movs	r3, #1
 8015d82:	617b      	str	r3, [r7, #20]
 8015d84:	e007      	b.n	8015d96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015d86:	4b07      	ldr	r3, [pc, #28]	; (8015da4 <prvInsertTimerInActiveList+0x80>)
 8015d88:	681a      	ldr	r2, [r3, #0]
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	3304      	adds	r3, #4
 8015d8e:	4619      	mov	r1, r3
 8015d90:	4610      	mov	r0, r2
 8015d92:	f7fe f840 	bl	8013e16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015d96:	697b      	ldr	r3, [r7, #20]
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3718      	adds	r7, #24
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	240018b8 	.word	0x240018b8
 8015da4:	240018b4 	.word	0x240018b4

08015da8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b08e      	sub	sp, #56	; 0x38
 8015dac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015dae:	e0ca      	b.n	8015f46 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	da18      	bge.n	8015de8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015db6:	1d3b      	adds	r3, r7, #4
 8015db8:	3304      	adds	r3, #4
 8015dba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d10a      	bne.n	8015dd8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dc6:	f383 8811 	msr	BASEPRI, r3
 8015dca:	f3bf 8f6f 	isb	sy
 8015dce:	f3bf 8f4f 	dsb	sy
 8015dd2:	61fb      	str	r3, [r7, #28]
}
 8015dd4:	bf00      	nop
 8015dd6:	e7fe      	b.n	8015dd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015dde:	6850      	ldr	r0, [r2, #4]
 8015de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015de2:	6892      	ldr	r2, [r2, #8]
 8015de4:	4611      	mov	r1, r2
 8015de6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	f2c0 80aa 	blt.w	8015f44 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df6:	695b      	ldr	r3, [r3, #20]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d004      	beq.n	8015e06 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dfe:	3304      	adds	r3, #4
 8015e00:	4618      	mov	r0, r3
 8015e02:	f7fe f841 	bl	8013e88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015e06:	463b      	mov	r3, r7
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f7ff ff6b 	bl	8015ce4 <prvSampleTimeNow>
 8015e0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	2b09      	cmp	r3, #9
 8015e14:	f200 8097 	bhi.w	8015f46 <prvProcessReceivedCommands+0x19e>
 8015e18:	a201      	add	r2, pc, #4	; (adr r2, 8015e20 <prvProcessReceivedCommands+0x78>)
 8015e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e1e:	bf00      	nop
 8015e20:	08015e49 	.word	0x08015e49
 8015e24:	08015e49 	.word	0x08015e49
 8015e28:	08015e49 	.word	0x08015e49
 8015e2c:	08015ebd 	.word	0x08015ebd
 8015e30:	08015ed1 	.word	0x08015ed1
 8015e34:	08015f1b 	.word	0x08015f1b
 8015e38:	08015e49 	.word	0x08015e49
 8015e3c:	08015e49 	.word	0x08015e49
 8015e40:	08015ebd 	.word	0x08015ebd
 8015e44:	08015ed1 	.word	0x08015ed1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e4e:	f043 0301 	orr.w	r3, r3, #1
 8015e52:	b2da      	uxtb	r2, r3
 8015e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015e5a:	68ba      	ldr	r2, [r7, #8]
 8015e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e5e:	699b      	ldr	r3, [r3, #24]
 8015e60:	18d1      	adds	r1, r2, r3
 8015e62:	68bb      	ldr	r3, [r7, #8]
 8015e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e68:	f7ff ff5c 	bl	8015d24 <prvInsertTimerInActiveList>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d069      	beq.n	8015f46 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e74:	6a1b      	ldr	r3, [r3, #32]
 8015e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e80:	f003 0304 	and.w	r3, r3, #4
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d05e      	beq.n	8015f46 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015e88:	68ba      	ldr	r2, [r7, #8]
 8015e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e8c:	699b      	ldr	r3, [r3, #24]
 8015e8e:	441a      	add	r2, r3
 8015e90:	2300      	movs	r3, #0
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	2300      	movs	r3, #0
 8015e96:	2100      	movs	r1, #0
 8015e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e9a:	f7ff fe05 	bl	8015aa8 <xTimerGenericCommand>
 8015e9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015ea0:	6a3b      	ldr	r3, [r7, #32]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d14f      	bne.n	8015f46 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eaa:	f383 8811 	msr	BASEPRI, r3
 8015eae:	f3bf 8f6f 	isb	sy
 8015eb2:	f3bf 8f4f 	dsb	sy
 8015eb6:	61bb      	str	r3, [r7, #24]
}
 8015eb8:	bf00      	nop
 8015eba:	e7fe      	b.n	8015eba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ec2:	f023 0301 	bic.w	r3, r3, #1
 8015ec6:	b2da      	uxtb	r2, r3
 8015ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015ece:	e03a      	b.n	8015f46 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ed6:	f043 0301 	orr.w	r3, r3, #1
 8015eda:	b2da      	uxtb	r2, r3
 8015edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015ee2:	68ba      	ldr	r2, [r7, #8]
 8015ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eea:	699b      	ldr	r3, [r3, #24]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d10a      	bne.n	8015f06 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ef4:	f383 8811 	msr	BASEPRI, r3
 8015ef8:	f3bf 8f6f 	isb	sy
 8015efc:	f3bf 8f4f 	dsb	sy
 8015f00:	617b      	str	r3, [r7, #20]
}
 8015f02:	bf00      	nop
 8015f04:	e7fe      	b.n	8015f04 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f08:	699a      	ldr	r2, [r3, #24]
 8015f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0c:	18d1      	adds	r1, r2, r3
 8015f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f14:	f7ff ff06 	bl	8015d24 <prvInsertTimerInActiveList>
					break;
 8015f18:	e015      	b.n	8015f46 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f20:	f003 0302 	and.w	r3, r3, #2
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d103      	bne.n	8015f30 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f2a:	f000 fc01 	bl	8016730 <vPortFree>
 8015f2e:	e00a      	b.n	8015f46 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f36:	f023 0301 	bic.w	r3, r3, #1
 8015f3a:	b2da      	uxtb	r2, r3
 8015f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015f42:	e000      	b.n	8015f46 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015f44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015f46:	4b08      	ldr	r3, [pc, #32]	; (8015f68 <prvProcessReceivedCommands+0x1c0>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	1d39      	adds	r1, r7, #4
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7fe fa9c 	bl	801448c <xQueueReceive>
 8015f54:	4603      	mov	r3, r0
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	f47f af2a 	bne.w	8015db0 <prvProcessReceivedCommands+0x8>
	}
}
 8015f5c:	bf00      	nop
 8015f5e:	bf00      	nop
 8015f60:	3730      	adds	r7, #48	; 0x30
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}
 8015f66:	bf00      	nop
 8015f68:	240018bc 	.word	0x240018bc

08015f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b088      	sub	sp, #32
 8015f70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015f72:	e048      	b.n	8016006 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015f74:	4b2d      	ldr	r3, [pc, #180]	; (801602c <prvSwitchTimerLists+0xc0>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f7e:	4b2b      	ldr	r3, [pc, #172]	; (801602c <prvSwitchTimerLists+0xc0>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	68db      	ldr	r3, [r3, #12]
 8015f84:	68db      	ldr	r3, [r3, #12]
 8015f86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	3304      	adds	r3, #4
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f7fd ff7b 	bl	8013e88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	6a1b      	ldr	r3, [r3, #32]
 8015f96:	68f8      	ldr	r0, [r7, #12]
 8015f98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fa0:	f003 0304 	and.w	r3, r3, #4
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d02e      	beq.n	8016006 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	699b      	ldr	r3, [r3, #24]
 8015fac:	693a      	ldr	r2, [r7, #16]
 8015fae:	4413      	add	r3, r2
 8015fb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015fb2:	68ba      	ldr	r2, [r7, #8]
 8015fb4:	693b      	ldr	r3, [r7, #16]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d90e      	bls.n	8015fd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	68ba      	ldr	r2, [r7, #8]
 8015fbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	68fa      	ldr	r2, [r7, #12]
 8015fc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015fc6:	4b19      	ldr	r3, [pc, #100]	; (801602c <prvSwitchTimerLists+0xc0>)
 8015fc8:	681a      	ldr	r2, [r3, #0]
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	3304      	adds	r3, #4
 8015fce:	4619      	mov	r1, r3
 8015fd0:	4610      	mov	r0, r2
 8015fd2:	f7fd ff20 	bl	8013e16 <vListInsert>
 8015fd6:	e016      	b.n	8016006 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015fd8:	2300      	movs	r3, #0
 8015fda:	9300      	str	r3, [sp, #0]
 8015fdc:	2300      	movs	r3, #0
 8015fde:	693a      	ldr	r2, [r7, #16]
 8015fe0:	2100      	movs	r1, #0
 8015fe2:	68f8      	ldr	r0, [r7, #12]
 8015fe4:	f7ff fd60 	bl	8015aa8 <xTimerGenericCommand>
 8015fe8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d10a      	bne.n	8016006 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff4:	f383 8811 	msr	BASEPRI, r3
 8015ff8:	f3bf 8f6f 	isb	sy
 8015ffc:	f3bf 8f4f 	dsb	sy
 8016000:	603b      	str	r3, [r7, #0]
}
 8016002:	bf00      	nop
 8016004:	e7fe      	b.n	8016004 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016006:	4b09      	ldr	r3, [pc, #36]	; (801602c <prvSwitchTimerLists+0xc0>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d1b1      	bne.n	8015f74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016010:	4b06      	ldr	r3, [pc, #24]	; (801602c <prvSwitchTimerLists+0xc0>)
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016016:	4b06      	ldr	r3, [pc, #24]	; (8016030 <prvSwitchTimerLists+0xc4>)
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	4a04      	ldr	r2, [pc, #16]	; (801602c <prvSwitchTimerLists+0xc0>)
 801601c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801601e:	4a04      	ldr	r2, [pc, #16]	; (8016030 <prvSwitchTimerLists+0xc4>)
 8016020:	697b      	ldr	r3, [r7, #20]
 8016022:	6013      	str	r3, [r2, #0]
}
 8016024:	bf00      	nop
 8016026:	3718      	adds	r7, #24
 8016028:	46bd      	mov	sp, r7
 801602a:	bd80      	pop	{r7, pc}
 801602c:	240018b4 	.word	0x240018b4
 8016030:	240018b8 	.word	0x240018b8

08016034 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b082      	sub	sp, #8
 8016038:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801603a:	f000 f98b 	bl	8016354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801603e:	4b15      	ldr	r3, [pc, #84]	; (8016094 <prvCheckForValidListAndQueue+0x60>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d120      	bne.n	8016088 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016046:	4814      	ldr	r0, [pc, #80]	; (8016098 <prvCheckForValidListAndQueue+0x64>)
 8016048:	f7fd fe94 	bl	8013d74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801604c:	4813      	ldr	r0, [pc, #76]	; (801609c <prvCheckForValidListAndQueue+0x68>)
 801604e:	f7fd fe91 	bl	8013d74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016052:	4b13      	ldr	r3, [pc, #76]	; (80160a0 <prvCheckForValidListAndQueue+0x6c>)
 8016054:	4a10      	ldr	r2, [pc, #64]	; (8016098 <prvCheckForValidListAndQueue+0x64>)
 8016056:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016058:	4b12      	ldr	r3, [pc, #72]	; (80160a4 <prvCheckForValidListAndQueue+0x70>)
 801605a:	4a10      	ldr	r2, [pc, #64]	; (801609c <prvCheckForValidListAndQueue+0x68>)
 801605c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801605e:	2300      	movs	r3, #0
 8016060:	9300      	str	r3, [sp, #0]
 8016062:	4b11      	ldr	r3, [pc, #68]	; (80160a8 <prvCheckForValidListAndQueue+0x74>)
 8016064:	4a11      	ldr	r2, [pc, #68]	; (80160ac <prvCheckForValidListAndQueue+0x78>)
 8016066:	2110      	movs	r1, #16
 8016068:	200a      	movs	r0, #10
 801606a:	f7fd ff9f 	bl	8013fac <xQueueGenericCreateStatic>
 801606e:	4603      	mov	r3, r0
 8016070:	4a08      	ldr	r2, [pc, #32]	; (8016094 <prvCheckForValidListAndQueue+0x60>)
 8016072:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016074:	4b07      	ldr	r3, [pc, #28]	; (8016094 <prvCheckForValidListAndQueue+0x60>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d005      	beq.n	8016088 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801607c:	4b05      	ldr	r3, [pc, #20]	; (8016094 <prvCheckForValidListAndQueue+0x60>)
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	490b      	ldr	r1, [pc, #44]	; (80160b0 <prvCheckForValidListAndQueue+0x7c>)
 8016082:	4618      	mov	r0, r3
 8016084:	f7fe fcae 	bl	80149e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016088:	f000 f994 	bl	80163b4 <vPortExitCritical>
}
 801608c:	bf00      	nop
 801608e:	46bd      	mov	sp, r7
 8016090:	bd80      	pop	{r7, pc}
 8016092:	bf00      	nop
 8016094:	240018bc 	.word	0x240018bc
 8016098:	2400188c 	.word	0x2400188c
 801609c:	240018a0 	.word	0x240018a0
 80160a0:	240018b4 	.word	0x240018b4
 80160a4:	240018b8 	.word	0x240018b8
 80160a8:	24001968 	.word	0x24001968
 80160ac:	240018c8 	.word	0x240018c8
 80160b0:	08017690 	.word	0x08017690

080160b4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b08a      	sub	sp, #40	; 0x28
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	60f8      	str	r0, [r7, #12]
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	607a      	str	r2, [r7, #4]
 80160c0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80160c2:	f06f 0301 	mvn.w	r3, #1
 80160c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80160d4:	4b06      	ldr	r3, [pc, #24]	; (80160f0 <xTimerPendFunctionCallFromISR+0x3c>)
 80160d6:	6818      	ldr	r0, [r3, #0]
 80160d8:	f107 0114 	add.w	r1, r7, #20
 80160dc:	2300      	movs	r3, #0
 80160de:	683a      	ldr	r2, [r7, #0]
 80160e0:	f7fe f938 	bl	8014354 <xQueueGenericSendFromISR>
 80160e4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80160e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80160e8:	4618      	mov	r0, r3
 80160ea:	3728      	adds	r7, #40	; 0x28
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}
 80160f0:	240018bc 	.word	0x240018bc

080160f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80160f4:	b480      	push	{r7}
 80160f6:	b085      	sub	sp, #20
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	60f8      	str	r0, [r7, #12]
 80160fc:	60b9      	str	r1, [r7, #8]
 80160fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	3b04      	subs	r3, #4
 8016104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801610c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	3b04      	subs	r3, #4
 8016112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016114:	68bb      	ldr	r3, [r7, #8]
 8016116:	f023 0201 	bic.w	r2, r3, #1
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	3b04      	subs	r3, #4
 8016122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016124:	4a0c      	ldr	r2, [pc, #48]	; (8016158 <pxPortInitialiseStack+0x64>)
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	3b14      	subs	r3, #20
 801612e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016130:	687a      	ldr	r2, [r7, #4]
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	3b04      	subs	r3, #4
 801613a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	f06f 0202 	mvn.w	r2, #2
 8016142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	3b20      	subs	r3, #32
 8016148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801614a:	68fb      	ldr	r3, [r7, #12]
}
 801614c:	4618      	mov	r0, r3
 801614e:	3714      	adds	r7, #20
 8016150:	46bd      	mov	sp, r7
 8016152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016156:	4770      	bx	lr
 8016158:	0801615d 	.word	0x0801615d

0801615c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801615c:	b480      	push	{r7}
 801615e:	b085      	sub	sp, #20
 8016160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016162:	2300      	movs	r3, #0
 8016164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016166:	4b12      	ldr	r3, [pc, #72]	; (80161b0 <prvTaskExitError+0x54>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801616e:	d00a      	beq.n	8016186 <prvTaskExitError+0x2a>
	__asm volatile
 8016170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016174:	f383 8811 	msr	BASEPRI, r3
 8016178:	f3bf 8f6f 	isb	sy
 801617c:	f3bf 8f4f 	dsb	sy
 8016180:	60fb      	str	r3, [r7, #12]
}
 8016182:	bf00      	nop
 8016184:	e7fe      	b.n	8016184 <prvTaskExitError+0x28>
	__asm volatile
 8016186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801618a:	f383 8811 	msr	BASEPRI, r3
 801618e:	f3bf 8f6f 	isb	sy
 8016192:	f3bf 8f4f 	dsb	sy
 8016196:	60bb      	str	r3, [r7, #8]
}
 8016198:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801619a:	bf00      	nop
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d0fc      	beq.n	801619c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80161a2:	bf00      	nop
 80161a4:	bf00      	nop
 80161a6:	3714      	adds	r7, #20
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr
 80161b0:	24000098 	.word	0x24000098
	...

080161c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80161c0:	4b07      	ldr	r3, [pc, #28]	; (80161e0 <pxCurrentTCBConst2>)
 80161c2:	6819      	ldr	r1, [r3, #0]
 80161c4:	6808      	ldr	r0, [r1, #0]
 80161c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ca:	f380 8809 	msr	PSP, r0
 80161ce:	f3bf 8f6f 	isb	sy
 80161d2:	f04f 0000 	mov.w	r0, #0
 80161d6:	f380 8811 	msr	BASEPRI, r0
 80161da:	4770      	bx	lr
 80161dc:	f3af 8000 	nop.w

080161e0 <pxCurrentTCBConst2>:
 80161e0:	2400138c 	.word	0x2400138c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80161e4:	bf00      	nop
 80161e6:	bf00      	nop

080161e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80161e8:	4808      	ldr	r0, [pc, #32]	; (801620c <prvPortStartFirstTask+0x24>)
 80161ea:	6800      	ldr	r0, [r0, #0]
 80161ec:	6800      	ldr	r0, [r0, #0]
 80161ee:	f380 8808 	msr	MSP, r0
 80161f2:	f04f 0000 	mov.w	r0, #0
 80161f6:	f380 8814 	msr	CONTROL, r0
 80161fa:	b662      	cpsie	i
 80161fc:	b661      	cpsie	f
 80161fe:	f3bf 8f4f 	dsb	sy
 8016202:	f3bf 8f6f 	isb	sy
 8016206:	df00      	svc	0
 8016208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801620a:	bf00      	nop
 801620c:	e000ed08 	.word	0xe000ed08

08016210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b086      	sub	sp, #24
 8016214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016216:	4b46      	ldr	r3, [pc, #280]	; (8016330 <xPortStartScheduler+0x120>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	4a46      	ldr	r2, [pc, #280]	; (8016334 <xPortStartScheduler+0x124>)
 801621c:	4293      	cmp	r3, r2
 801621e:	d10a      	bne.n	8016236 <xPortStartScheduler+0x26>
	__asm volatile
 8016220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016224:	f383 8811 	msr	BASEPRI, r3
 8016228:	f3bf 8f6f 	isb	sy
 801622c:	f3bf 8f4f 	dsb	sy
 8016230:	613b      	str	r3, [r7, #16]
}
 8016232:	bf00      	nop
 8016234:	e7fe      	b.n	8016234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016236:	4b3e      	ldr	r3, [pc, #248]	; (8016330 <xPortStartScheduler+0x120>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	4a3f      	ldr	r2, [pc, #252]	; (8016338 <xPortStartScheduler+0x128>)
 801623c:	4293      	cmp	r3, r2
 801623e:	d10a      	bne.n	8016256 <xPortStartScheduler+0x46>
	__asm volatile
 8016240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016244:	f383 8811 	msr	BASEPRI, r3
 8016248:	f3bf 8f6f 	isb	sy
 801624c:	f3bf 8f4f 	dsb	sy
 8016250:	60fb      	str	r3, [r7, #12]
}
 8016252:	bf00      	nop
 8016254:	e7fe      	b.n	8016254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016256:	4b39      	ldr	r3, [pc, #228]	; (801633c <xPortStartScheduler+0x12c>)
 8016258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801625a:	697b      	ldr	r3, [r7, #20]
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	b2db      	uxtb	r3, r3
 8016260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	22ff      	movs	r2, #255	; 0xff
 8016266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016268:	697b      	ldr	r3, [r7, #20]
 801626a:	781b      	ldrb	r3, [r3, #0]
 801626c:	b2db      	uxtb	r3, r3
 801626e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016270:	78fb      	ldrb	r3, [r7, #3]
 8016272:	b2db      	uxtb	r3, r3
 8016274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016278:	b2da      	uxtb	r2, r3
 801627a:	4b31      	ldr	r3, [pc, #196]	; (8016340 <xPortStartScheduler+0x130>)
 801627c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801627e:	4b31      	ldr	r3, [pc, #196]	; (8016344 <xPortStartScheduler+0x134>)
 8016280:	2207      	movs	r2, #7
 8016282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016284:	e009      	b.n	801629a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016286:	4b2f      	ldr	r3, [pc, #188]	; (8016344 <xPortStartScheduler+0x134>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	3b01      	subs	r3, #1
 801628c:	4a2d      	ldr	r2, [pc, #180]	; (8016344 <xPortStartScheduler+0x134>)
 801628e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016290:	78fb      	ldrb	r3, [r7, #3]
 8016292:	b2db      	uxtb	r3, r3
 8016294:	005b      	lsls	r3, r3, #1
 8016296:	b2db      	uxtb	r3, r3
 8016298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801629a:	78fb      	ldrb	r3, [r7, #3]
 801629c:	b2db      	uxtb	r3, r3
 801629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80162a2:	2b80      	cmp	r3, #128	; 0x80
 80162a4:	d0ef      	beq.n	8016286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80162a6:	4b27      	ldr	r3, [pc, #156]	; (8016344 <xPortStartScheduler+0x134>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	f1c3 0307 	rsb	r3, r3, #7
 80162ae:	2b04      	cmp	r3, #4
 80162b0:	d00a      	beq.n	80162c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80162b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b6:	f383 8811 	msr	BASEPRI, r3
 80162ba:	f3bf 8f6f 	isb	sy
 80162be:	f3bf 8f4f 	dsb	sy
 80162c2:	60bb      	str	r3, [r7, #8]
}
 80162c4:	bf00      	nop
 80162c6:	e7fe      	b.n	80162c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80162c8:	4b1e      	ldr	r3, [pc, #120]	; (8016344 <xPortStartScheduler+0x134>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	021b      	lsls	r3, r3, #8
 80162ce:	4a1d      	ldr	r2, [pc, #116]	; (8016344 <xPortStartScheduler+0x134>)
 80162d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80162d2:	4b1c      	ldr	r3, [pc, #112]	; (8016344 <xPortStartScheduler+0x134>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80162da:	4a1a      	ldr	r2, [pc, #104]	; (8016344 <xPortStartScheduler+0x134>)
 80162dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	b2da      	uxtb	r2, r3
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80162e6:	4b18      	ldr	r3, [pc, #96]	; (8016348 <xPortStartScheduler+0x138>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	4a17      	ldr	r2, [pc, #92]	; (8016348 <xPortStartScheduler+0x138>)
 80162ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80162f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80162f2:	4b15      	ldr	r3, [pc, #84]	; (8016348 <xPortStartScheduler+0x138>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	4a14      	ldr	r2, [pc, #80]	; (8016348 <xPortStartScheduler+0x138>)
 80162f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80162fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80162fe:	f000 f8dd 	bl	80164bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016302:	4b12      	ldr	r3, [pc, #72]	; (801634c <xPortStartScheduler+0x13c>)
 8016304:	2200      	movs	r2, #0
 8016306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016308:	f000 f8fc 	bl	8016504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801630c:	4b10      	ldr	r3, [pc, #64]	; (8016350 <xPortStartScheduler+0x140>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	4a0f      	ldr	r2, [pc, #60]	; (8016350 <xPortStartScheduler+0x140>)
 8016312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016318:	f7ff ff66 	bl	80161e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801631c:	f7fe ff7a 	bl	8015214 <vTaskSwitchContext>
	prvTaskExitError();
 8016320:	f7ff ff1c 	bl	801615c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016324:	2300      	movs	r3, #0
}
 8016326:	4618      	mov	r0, r3
 8016328:	3718      	adds	r7, #24
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}
 801632e:	bf00      	nop
 8016330:	e000ed00 	.word	0xe000ed00
 8016334:	410fc271 	.word	0x410fc271
 8016338:	410fc270 	.word	0x410fc270
 801633c:	e000e400 	.word	0xe000e400
 8016340:	240019b8 	.word	0x240019b8
 8016344:	240019bc 	.word	0x240019bc
 8016348:	e000ed20 	.word	0xe000ed20
 801634c:	24000098 	.word	0x24000098
 8016350:	e000ef34 	.word	0xe000ef34

08016354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016354:	b480      	push	{r7}
 8016356:	b083      	sub	sp, #12
 8016358:	af00      	add	r7, sp, #0
	__asm volatile
 801635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801635e:	f383 8811 	msr	BASEPRI, r3
 8016362:	f3bf 8f6f 	isb	sy
 8016366:	f3bf 8f4f 	dsb	sy
 801636a:	607b      	str	r3, [r7, #4]
}
 801636c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801636e:	4b0f      	ldr	r3, [pc, #60]	; (80163ac <vPortEnterCritical+0x58>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	3301      	adds	r3, #1
 8016374:	4a0d      	ldr	r2, [pc, #52]	; (80163ac <vPortEnterCritical+0x58>)
 8016376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016378:	4b0c      	ldr	r3, [pc, #48]	; (80163ac <vPortEnterCritical+0x58>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	2b01      	cmp	r3, #1
 801637e:	d10f      	bne.n	80163a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016380:	4b0b      	ldr	r3, [pc, #44]	; (80163b0 <vPortEnterCritical+0x5c>)
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	b2db      	uxtb	r3, r3
 8016386:	2b00      	cmp	r3, #0
 8016388:	d00a      	beq.n	80163a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801638e:	f383 8811 	msr	BASEPRI, r3
 8016392:	f3bf 8f6f 	isb	sy
 8016396:	f3bf 8f4f 	dsb	sy
 801639a:	603b      	str	r3, [r7, #0]
}
 801639c:	bf00      	nop
 801639e:	e7fe      	b.n	801639e <vPortEnterCritical+0x4a>
	}
}
 80163a0:	bf00      	nop
 80163a2:	370c      	adds	r7, #12
 80163a4:	46bd      	mov	sp, r7
 80163a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163aa:	4770      	bx	lr
 80163ac:	24000098 	.word	0x24000098
 80163b0:	e000ed04 	.word	0xe000ed04

080163b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80163b4:	b480      	push	{r7}
 80163b6:	b083      	sub	sp, #12
 80163b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80163ba:	4b12      	ldr	r3, [pc, #72]	; (8016404 <vPortExitCritical+0x50>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d10a      	bne.n	80163d8 <vPortExitCritical+0x24>
	__asm volatile
 80163c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163c6:	f383 8811 	msr	BASEPRI, r3
 80163ca:	f3bf 8f6f 	isb	sy
 80163ce:	f3bf 8f4f 	dsb	sy
 80163d2:	607b      	str	r3, [r7, #4]
}
 80163d4:	bf00      	nop
 80163d6:	e7fe      	b.n	80163d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80163d8:	4b0a      	ldr	r3, [pc, #40]	; (8016404 <vPortExitCritical+0x50>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	3b01      	subs	r3, #1
 80163de:	4a09      	ldr	r2, [pc, #36]	; (8016404 <vPortExitCritical+0x50>)
 80163e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80163e2:	4b08      	ldr	r3, [pc, #32]	; (8016404 <vPortExitCritical+0x50>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d105      	bne.n	80163f6 <vPortExitCritical+0x42>
 80163ea:	2300      	movs	r3, #0
 80163ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	f383 8811 	msr	BASEPRI, r3
}
 80163f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80163f6:	bf00      	nop
 80163f8:	370c      	adds	r7, #12
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr
 8016402:	bf00      	nop
 8016404:	24000098 	.word	0x24000098
	...

08016410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016410:	f3ef 8009 	mrs	r0, PSP
 8016414:	f3bf 8f6f 	isb	sy
 8016418:	4b15      	ldr	r3, [pc, #84]	; (8016470 <pxCurrentTCBConst>)
 801641a:	681a      	ldr	r2, [r3, #0]
 801641c:	f01e 0f10 	tst.w	lr, #16
 8016420:	bf08      	it	eq
 8016422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801642a:	6010      	str	r0, [r2, #0]
 801642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016434:	f380 8811 	msr	BASEPRI, r0
 8016438:	f3bf 8f4f 	dsb	sy
 801643c:	f3bf 8f6f 	isb	sy
 8016440:	f7fe fee8 	bl	8015214 <vTaskSwitchContext>
 8016444:	f04f 0000 	mov.w	r0, #0
 8016448:	f380 8811 	msr	BASEPRI, r0
 801644c:	bc09      	pop	{r0, r3}
 801644e:	6819      	ldr	r1, [r3, #0]
 8016450:	6808      	ldr	r0, [r1, #0]
 8016452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016456:	f01e 0f10 	tst.w	lr, #16
 801645a:	bf08      	it	eq
 801645c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016460:	f380 8809 	msr	PSP, r0
 8016464:	f3bf 8f6f 	isb	sy
 8016468:	4770      	bx	lr
 801646a:	bf00      	nop
 801646c:	f3af 8000 	nop.w

08016470 <pxCurrentTCBConst>:
 8016470:	2400138c 	.word	0x2400138c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016474:	bf00      	nop
 8016476:	bf00      	nop

08016478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b082      	sub	sp, #8
 801647c:	af00      	add	r7, sp, #0
	__asm volatile
 801647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016482:	f383 8811 	msr	BASEPRI, r3
 8016486:	f3bf 8f6f 	isb	sy
 801648a:	f3bf 8f4f 	dsb	sy
 801648e:	607b      	str	r3, [r7, #4]
}
 8016490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016492:	f7fe fdfd 	bl	8015090 <xTaskIncrementTick>
 8016496:	4603      	mov	r3, r0
 8016498:	2b00      	cmp	r3, #0
 801649a:	d003      	beq.n	80164a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801649c:	4b06      	ldr	r3, [pc, #24]	; (80164b8 <xPortSysTickHandler+0x40>)
 801649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164a2:	601a      	str	r2, [r3, #0]
 80164a4:	2300      	movs	r3, #0
 80164a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	f383 8811 	msr	BASEPRI, r3
}
 80164ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80164b0:	bf00      	nop
 80164b2:	3708      	adds	r7, #8
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}
 80164b8:	e000ed04 	.word	0xe000ed04

080164bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80164bc:	b480      	push	{r7}
 80164be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80164c0:	4b0b      	ldr	r3, [pc, #44]	; (80164f0 <vPortSetupTimerInterrupt+0x34>)
 80164c2:	2200      	movs	r2, #0
 80164c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80164c6:	4b0b      	ldr	r3, [pc, #44]	; (80164f4 <vPortSetupTimerInterrupt+0x38>)
 80164c8:	2200      	movs	r2, #0
 80164ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80164cc:	4b0a      	ldr	r3, [pc, #40]	; (80164f8 <vPortSetupTimerInterrupt+0x3c>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	4a0a      	ldr	r2, [pc, #40]	; (80164fc <vPortSetupTimerInterrupt+0x40>)
 80164d2:	fba2 2303 	umull	r2, r3, r2, r3
 80164d6:	099b      	lsrs	r3, r3, #6
 80164d8:	4a09      	ldr	r2, [pc, #36]	; (8016500 <vPortSetupTimerInterrupt+0x44>)
 80164da:	3b01      	subs	r3, #1
 80164dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80164de:	4b04      	ldr	r3, [pc, #16]	; (80164f0 <vPortSetupTimerInterrupt+0x34>)
 80164e0:	2207      	movs	r2, #7
 80164e2:	601a      	str	r2, [r3, #0]
}
 80164e4:	bf00      	nop
 80164e6:	46bd      	mov	sp, r7
 80164e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ec:	4770      	bx	lr
 80164ee:	bf00      	nop
 80164f0:	e000e010 	.word	0xe000e010
 80164f4:	e000e018 	.word	0xe000e018
 80164f8:	24000088 	.word	0x24000088
 80164fc:	10624dd3 	.word	0x10624dd3
 8016500:	e000e014 	.word	0xe000e014

08016504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016514 <vPortEnableVFP+0x10>
 8016508:	6801      	ldr	r1, [r0, #0]
 801650a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801650e:	6001      	str	r1, [r0, #0]
 8016510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016512:	bf00      	nop
 8016514:	e000ed88 	.word	0xe000ed88

08016518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016518:	b480      	push	{r7}
 801651a:	b085      	sub	sp, #20
 801651c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801651e:	f3ef 8305 	mrs	r3, IPSR
 8016522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2b0f      	cmp	r3, #15
 8016528:	d914      	bls.n	8016554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801652a:	4a17      	ldr	r2, [pc, #92]	; (8016588 <vPortValidateInterruptPriority+0x70>)
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	4413      	add	r3, r2
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016534:	4b15      	ldr	r3, [pc, #84]	; (801658c <vPortValidateInterruptPriority+0x74>)
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	7afa      	ldrb	r2, [r7, #11]
 801653a:	429a      	cmp	r2, r3
 801653c:	d20a      	bcs.n	8016554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016542:	f383 8811 	msr	BASEPRI, r3
 8016546:	f3bf 8f6f 	isb	sy
 801654a:	f3bf 8f4f 	dsb	sy
 801654e:	607b      	str	r3, [r7, #4]
}
 8016550:	bf00      	nop
 8016552:	e7fe      	b.n	8016552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016554:	4b0e      	ldr	r3, [pc, #56]	; (8016590 <vPortValidateInterruptPriority+0x78>)
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801655c:	4b0d      	ldr	r3, [pc, #52]	; (8016594 <vPortValidateInterruptPriority+0x7c>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	429a      	cmp	r2, r3
 8016562:	d90a      	bls.n	801657a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016568:	f383 8811 	msr	BASEPRI, r3
 801656c:	f3bf 8f6f 	isb	sy
 8016570:	f3bf 8f4f 	dsb	sy
 8016574:	603b      	str	r3, [r7, #0]
}
 8016576:	bf00      	nop
 8016578:	e7fe      	b.n	8016578 <vPortValidateInterruptPriority+0x60>
	}
 801657a:	bf00      	nop
 801657c:	3714      	adds	r7, #20
 801657e:	46bd      	mov	sp, r7
 8016580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016584:	4770      	bx	lr
 8016586:	bf00      	nop
 8016588:	e000e3f0 	.word	0xe000e3f0
 801658c:	240019b8 	.word	0x240019b8
 8016590:	e000ed0c 	.word	0xe000ed0c
 8016594:	240019bc 	.word	0x240019bc

08016598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b08a      	sub	sp, #40	; 0x28
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80165a0:	2300      	movs	r3, #0
 80165a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80165a4:	f7fe fcb8 	bl	8014f18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80165a8:	4b5b      	ldr	r3, [pc, #364]	; (8016718 <pvPortMalloc+0x180>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d101      	bne.n	80165b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80165b0:	f000 f920 	bl	80167f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80165b4:	4b59      	ldr	r3, [pc, #356]	; (801671c <pvPortMalloc+0x184>)
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	4013      	ands	r3, r2
 80165bc:	2b00      	cmp	r3, #0
 80165be:	f040 8093 	bne.w	80166e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d01d      	beq.n	8016604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80165c8:	2208      	movs	r2, #8
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	4413      	add	r3, r2
 80165ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f003 0307 	and.w	r3, r3, #7
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d014      	beq.n	8016604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f023 0307 	bic.w	r3, r3, #7
 80165e0:	3308      	adds	r3, #8
 80165e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f003 0307 	and.w	r3, r3, #7
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d00a      	beq.n	8016604 <pvPortMalloc+0x6c>
	__asm volatile
 80165ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165f2:	f383 8811 	msr	BASEPRI, r3
 80165f6:	f3bf 8f6f 	isb	sy
 80165fa:	f3bf 8f4f 	dsb	sy
 80165fe:	617b      	str	r3, [r7, #20]
}
 8016600:	bf00      	nop
 8016602:	e7fe      	b.n	8016602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d06e      	beq.n	80166e8 <pvPortMalloc+0x150>
 801660a:	4b45      	ldr	r3, [pc, #276]	; (8016720 <pvPortMalloc+0x188>)
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	687a      	ldr	r2, [r7, #4]
 8016610:	429a      	cmp	r2, r3
 8016612:	d869      	bhi.n	80166e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016614:	4b43      	ldr	r3, [pc, #268]	; (8016724 <pvPortMalloc+0x18c>)
 8016616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016618:	4b42      	ldr	r3, [pc, #264]	; (8016724 <pvPortMalloc+0x18c>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801661e:	e004      	b.n	801662a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	687a      	ldr	r2, [r7, #4]
 8016630:	429a      	cmp	r2, r3
 8016632:	d903      	bls.n	801663c <pvPortMalloc+0xa4>
 8016634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d1f1      	bne.n	8016620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801663c:	4b36      	ldr	r3, [pc, #216]	; (8016718 <pvPortMalloc+0x180>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016642:	429a      	cmp	r2, r3
 8016644:	d050      	beq.n	80166e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016646:	6a3b      	ldr	r3, [r7, #32]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	2208      	movs	r2, #8
 801664c:	4413      	add	r3, r2
 801664e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016652:	681a      	ldr	r2, [r3, #0]
 8016654:	6a3b      	ldr	r3, [r7, #32]
 8016656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665a:	685a      	ldr	r2, [r3, #4]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	1ad2      	subs	r2, r2, r3
 8016660:	2308      	movs	r3, #8
 8016662:	005b      	lsls	r3, r3, #1
 8016664:	429a      	cmp	r2, r3
 8016666:	d91f      	bls.n	80166a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	4413      	add	r3, r2
 801666e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	f003 0307 	and.w	r3, r3, #7
 8016676:	2b00      	cmp	r3, #0
 8016678:	d00a      	beq.n	8016690 <pvPortMalloc+0xf8>
	__asm volatile
 801667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667e:	f383 8811 	msr	BASEPRI, r3
 8016682:	f3bf 8f6f 	isb	sy
 8016686:	f3bf 8f4f 	dsb	sy
 801668a:	613b      	str	r3, [r7, #16]
}
 801668c:	bf00      	nop
 801668e:	e7fe      	b.n	801668e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016692:	685a      	ldr	r2, [r3, #4]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	1ad2      	subs	r2, r2, r3
 8016698:	69bb      	ldr	r3, [r7, #24]
 801669a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80166a2:	69b8      	ldr	r0, [r7, #24]
 80166a4:	f000 f908 	bl	80168b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80166a8:	4b1d      	ldr	r3, [pc, #116]	; (8016720 <pvPortMalloc+0x188>)
 80166aa:	681a      	ldr	r2, [r3, #0]
 80166ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ae:	685b      	ldr	r3, [r3, #4]
 80166b0:	1ad3      	subs	r3, r2, r3
 80166b2:	4a1b      	ldr	r2, [pc, #108]	; (8016720 <pvPortMalloc+0x188>)
 80166b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80166b6:	4b1a      	ldr	r3, [pc, #104]	; (8016720 <pvPortMalloc+0x188>)
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	4b1b      	ldr	r3, [pc, #108]	; (8016728 <pvPortMalloc+0x190>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	429a      	cmp	r2, r3
 80166c0:	d203      	bcs.n	80166ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80166c2:	4b17      	ldr	r3, [pc, #92]	; (8016720 <pvPortMalloc+0x188>)
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	4a18      	ldr	r2, [pc, #96]	; (8016728 <pvPortMalloc+0x190>)
 80166c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80166ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166cc:	685a      	ldr	r2, [r3, #4]
 80166ce:	4b13      	ldr	r3, [pc, #76]	; (801671c <pvPortMalloc+0x184>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	431a      	orrs	r2, r3
 80166d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80166d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166da:	2200      	movs	r2, #0
 80166dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80166de:	4b13      	ldr	r3, [pc, #76]	; (801672c <pvPortMalloc+0x194>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	3301      	adds	r3, #1
 80166e4:	4a11      	ldr	r2, [pc, #68]	; (801672c <pvPortMalloc+0x194>)
 80166e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80166e8:	f7fe fc24 	bl	8014f34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	f003 0307 	and.w	r3, r3, #7
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d00a      	beq.n	801670c <pvPortMalloc+0x174>
	__asm volatile
 80166f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166fa:	f383 8811 	msr	BASEPRI, r3
 80166fe:	f3bf 8f6f 	isb	sy
 8016702:	f3bf 8f4f 	dsb	sy
 8016706:	60fb      	str	r3, [r7, #12]
}
 8016708:	bf00      	nop
 801670a:	e7fe      	b.n	801670a <pvPortMalloc+0x172>
	return pvReturn;
 801670c:	69fb      	ldr	r3, [r7, #28]
}
 801670e:	4618      	mov	r0, r3
 8016710:	3728      	adds	r7, #40	; 0x28
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	240055c8 	.word	0x240055c8
 801671c:	240055dc 	.word	0x240055dc
 8016720:	240055cc 	.word	0x240055cc
 8016724:	240055c0 	.word	0x240055c0
 8016728:	240055d0 	.word	0x240055d0
 801672c:	240055d4 	.word	0x240055d4

08016730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b086      	sub	sp, #24
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d04d      	beq.n	80167de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016742:	2308      	movs	r3, #8
 8016744:	425b      	negs	r3, r3
 8016746:	697a      	ldr	r2, [r7, #20]
 8016748:	4413      	add	r3, r2
 801674a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016750:	693b      	ldr	r3, [r7, #16]
 8016752:	685a      	ldr	r2, [r3, #4]
 8016754:	4b24      	ldr	r3, [pc, #144]	; (80167e8 <vPortFree+0xb8>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	4013      	ands	r3, r2
 801675a:	2b00      	cmp	r3, #0
 801675c:	d10a      	bne.n	8016774 <vPortFree+0x44>
	__asm volatile
 801675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016762:	f383 8811 	msr	BASEPRI, r3
 8016766:	f3bf 8f6f 	isb	sy
 801676a:	f3bf 8f4f 	dsb	sy
 801676e:	60fb      	str	r3, [r7, #12]
}
 8016770:	bf00      	nop
 8016772:	e7fe      	b.n	8016772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016774:	693b      	ldr	r3, [r7, #16]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d00a      	beq.n	8016792 <vPortFree+0x62>
	__asm volatile
 801677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016780:	f383 8811 	msr	BASEPRI, r3
 8016784:	f3bf 8f6f 	isb	sy
 8016788:	f3bf 8f4f 	dsb	sy
 801678c:	60bb      	str	r3, [r7, #8]
}
 801678e:	bf00      	nop
 8016790:	e7fe      	b.n	8016790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	685a      	ldr	r2, [r3, #4]
 8016796:	4b14      	ldr	r3, [pc, #80]	; (80167e8 <vPortFree+0xb8>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	4013      	ands	r3, r2
 801679c:	2b00      	cmp	r3, #0
 801679e:	d01e      	beq.n	80167de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d11a      	bne.n	80167de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	685a      	ldr	r2, [r3, #4]
 80167ac:	4b0e      	ldr	r3, [pc, #56]	; (80167e8 <vPortFree+0xb8>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	43db      	mvns	r3, r3
 80167b2:	401a      	ands	r2, r3
 80167b4:	693b      	ldr	r3, [r7, #16]
 80167b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80167b8:	f7fe fbae 	bl	8014f18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80167bc:	693b      	ldr	r3, [r7, #16]
 80167be:	685a      	ldr	r2, [r3, #4]
 80167c0:	4b0a      	ldr	r3, [pc, #40]	; (80167ec <vPortFree+0xbc>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	4413      	add	r3, r2
 80167c6:	4a09      	ldr	r2, [pc, #36]	; (80167ec <vPortFree+0xbc>)
 80167c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80167ca:	6938      	ldr	r0, [r7, #16]
 80167cc:	f000 f874 	bl	80168b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80167d0:	4b07      	ldr	r3, [pc, #28]	; (80167f0 <vPortFree+0xc0>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	3301      	adds	r3, #1
 80167d6:	4a06      	ldr	r2, [pc, #24]	; (80167f0 <vPortFree+0xc0>)
 80167d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80167da:	f7fe fbab 	bl	8014f34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80167de:	bf00      	nop
 80167e0:	3718      	adds	r7, #24
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}
 80167e6:	bf00      	nop
 80167e8:	240055dc 	.word	0x240055dc
 80167ec:	240055cc 	.word	0x240055cc
 80167f0:	240055d8 	.word	0x240055d8

080167f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80167f4:	b480      	push	{r7}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80167fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80167fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016800:	4b27      	ldr	r3, [pc, #156]	; (80168a0 <prvHeapInit+0xac>)
 8016802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	f003 0307 	and.w	r3, r3, #7
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00c      	beq.n	8016828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	3307      	adds	r3, #7
 8016812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	f023 0307 	bic.w	r3, r3, #7
 801681a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801681c:	68ba      	ldr	r2, [r7, #8]
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	1ad3      	subs	r3, r2, r3
 8016822:	4a1f      	ldr	r2, [pc, #124]	; (80168a0 <prvHeapInit+0xac>)
 8016824:	4413      	add	r3, r2
 8016826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801682c:	4a1d      	ldr	r2, [pc, #116]	; (80168a4 <prvHeapInit+0xb0>)
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016832:	4b1c      	ldr	r3, [pc, #112]	; (80168a4 <prvHeapInit+0xb0>)
 8016834:	2200      	movs	r2, #0
 8016836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	68ba      	ldr	r2, [r7, #8]
 801683c:	4413      	add	r3, r2
 801683e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016840:	2208      	movs	r2, #8
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	1a9b      	subs	r3, r3, r2
 8016846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	f023 0307 	bic.w	r3, r3, #7
 801684e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	4a15      	ldr	r2, [pc, #84]	; (80168a8 <prvHeapInit+0xb4>)
 8016854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016856:	4b14      	ldr	r3, [pc, #80]	; (80168a8 <prvHeapInit+0xb4>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	2200      	movs	r2, #0
 801685c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801685e:	4b12      	ldr	r3, [pc, #72]	; (80168a8 <prvHeapInit+0xb4>)
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	2200      	movs	r2, #0
 8016864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	68fa      	ldr	r2, [r7, #12]
 801686e:	1ad2      	subs	r2, r2, r3
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016874:	4b0c      	ldr	r3, [pc, #48]	; (80168a8 <prvHeapInit+0xb4>)
 8016876:	681a      	ldr	r2, [r3, #0]
 8016878:	683b      	ldr	r3, [r7, #0]
 801687a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	4a0a      	ldr	r2, [pc, #40]	; (80168ac <prvHeapInit+0xb8>)
 8016882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	685b      	ldr	r3, [r3, #4]
 8016888:	4a09      	ldr	r2, [pc, #36]	; (80168b0 <prvHeapInit+0xbc>)
 801688a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801688c:	4b09      	ldr	r3, [pc, #36]	; (80168b4 <prvHeapInit+0xc0>)
 801688e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016892:	601a      	str	r2, [r3, #0]
}
 8016894:	bf00      	nop
 8016896:	3714      	adds	r7, #20
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr
 80168a0:	240019c0 	.word	0x240019c0
 80168a4:	240055c0 	.word	0x240055c0
 80168a8:	240055c8 	.word	0x240055c8
 80168ac:	240055d0 	.word	0x240055d0
 80168b0:	240055cc 	.word	0x240055cc
 80168b4:	240055dc 	.word	0x240055dc

080168b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80168b8:	b480      	push	{r7}
 80168ba:	b085      	sub	sp, #20
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80168c0:	4b28      	ldr	r3, [pc, #160]	; (8016964 <prvInsertBlockIntoFreeList+0xac>)
 80168c2:	60fb      	str	r3, [r7, #12]
 80168c4:	e002      	b.n	80168cc <prvInsertBlockIntoFreeList+0x14>
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	60fb      	str	r3, [r7, #12]
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	429a      	cmp	r2, r3
 80168d4:	d8f7      	bhi.n	80168c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	68ba      	ldr	r2, [r7, #8]
 80168e0:	4413      	add	r3, r2
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	429a      	cmp	r2, r3
 80168e6:	d108      	bne.n	80168fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	685a      	ldr	r2, [r3, #4]
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	441a      	add	r2, r3
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	685b      	ldr	r3, [r3, #4]
 8016902:	68ba      	ldr	r2, [r7, #8]
 8016904:	441a      	add	r2, r3
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	429a      	cmp	r2, r3
 801690c:	d118      	bne.n	8016940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	681a      	ldr	r2, [r3, #0]
 8016912:	4b15      	ldr	r3, [pc, #84]	; (8016968 <prvInsertBlockIntoFreeList+0xb0>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	429a      	cmp	r2, r3
 8016918:	d00d      	beq.n	8016936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	685a      	ldr	r2, [r3, #4]
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	685b      	ldr	r3, [r3, #4]
 8016924:	441a      	add	r2, r3
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	681a      	ldr	r2, [r3, #0]
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	601a      	str	r2, [r3, #0]
 8016934:	e008      	b.n	8016948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016936:	4b0c      	ldr	r3, [pc, #48]	; (8016968 <prvInsertBlockIntoFreeList+0xb0>)
 8016938:	681a      	ldr	r2, [r3, #0]
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	601a      	str	r2, [r3, #0]
 801693e:	e003      	b.n	8016948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016948:	68fa      	ldr	r2, [r7, #12]
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	429a      	cmp	r2, r3
 801694e:	d002      	beq.n	8016956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	687a      	ldr	r2, [r7, #4]
 8016954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016956:	bf00      	nop
 8016958:	3714      	adds	r7, #20
 801695a:	46bd      	mov	sp, r7
 801695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016960:	4770      	bx	lr
 8016962:	bf00      	nop
 8016964:	240055c0 	.word	0x240055c0
 8016968:	240055c8 	.word	0x240055c8

0801696c <__errno>:
 801696c:	4b01      	ldr	r3, [pc, #4]	; (8016974 <__errno+0x8>)
 801696e:	6818      	ldr	r0, [r3, #0]
 8016970:	4770      	bx	lr
 8016972:	bf00      	nop
 8016974:	2400009c 	.word	0x2400009c

08016978 <__libc_init_array>:
 8016978:	b570      	push	{r4, r5, r6, lr}
 801697a:	4d0d      	ldr	r5, [pc, #52]	; (80169b0 <__libc_init_array+0x38>)
 801697c:	4c0d      	ldr	r4, [pc, #52]	; (80169b4 <__libc_init_array+0x3c>)
 801697e:	1b64      	subs	r4, r4, r5
 8016980:	10a4      	asrs	r4, r4, #2
 8016982:	2600      	movs	r6, #0
 8016984:	42a6      	cmp	r6, r4
 8016986:	d109      	bne.n	801699c <__libc_init_array+0x24>
 8016988:	4d0b      	ldr	r5, [pc, #44]	; (80169b8 <__libc_init_array+0x40>)
 801698a:	4c0c      	ldr	r4, [pc, #48]	; (80169bc <__libc_init_array+0x44>)
 801698c:	f000 fd3c 	bl	8017408 <_init>
 8016990:	1b64      	subs	r4, r4, r5
 8016992:	10a4      	asrs	r4, r4, #2
 8016994:	2600      	movs	r6, #0
 8016996:	42a6      	cmp	r6, r4
 8016998:	d105      	bne.n	80169a6 <__libc_init_array+0x2e>
 801699a:	bd70      	pop	{r4, r5, r6, pc}
 801699c:	f855 3b04 	ldr.w	r3, [r5], #4
 80169a0:	4798      	blx	r3
 80169a2:	3601      	adds	r6, #1
 80169a4:	e7ee      	b.n	8016984 <__libc_init_array+0xc>
 80169a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80169aa:	4798      	blx	r3
 80169ac:	3601      	adds	r6, #1
 80169ae:	e7f2      	b.n	8016996 <__libc_init_array+0x1e>
 80169b0:	080178f4 	.word	0x080178f4
 80169b4:	080178f4 	.word	0x080178f4
 80169b8:	080178f4 	.word	0x080178f4
 80169bc:	080178f8 	.word	0x080178f8

080169c0 <malloc>:
 80169c0:	4b02      	ldr	r3, [pc, #8]	; (80169cc <malloc+0xc>)
 80169c2:	4601      	mov	r1, r0
 80169c4:	6818      	ldr	r0, [r3, #0]
 80169c6:	f000 b88d 	b.w	8016ae4 <_malloc_r>
 80169ca:	bf00      	nop
 80169cc:	2400009c 	.word	0x2400009c

080169d0 <free>:
 80169d0:	4b02      	ldr	r3, [pc, #8]	; (80169dc <free+0xc>)
 80169d2:	4601      	mov	r1, r0
 80169d4:	6818      	ldr	r0, [r3, #0]
 80169d6:	f000 b819 	b.w	8016a0c <_free_r>
 80169da:	bf00      	nop
 80169dc:	2400009c 	.word	0x2400009c

080169e0 <memcpy>:
 80169e0:	440a      	add	r2, r1
 80169e2:	4291      	cmp	r1, r2
 80169e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80169e8:	d100      	bne.n	80169ec <memcpy+0xc>
 80169ea:	4770      	bx	lr
 80169ec:	b510      	push	{r4, lr}
 80169ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169f6:	4291      	cmp	r1, r2
 80169f8:	d1f9      	bne.n	80169ee <memcpy+0xe>
 80169fa:	bd10      	pop	{r4, pc}

080169fc <memset>:
 80169fc:	4402      	add	r2, r0
 80169fe:	4603      	mov	r3, r0
 8016a00:	4293      	cmp	r3, r2
 8016a02:	d100      	bne.n	8016a06 <memset+0xa>
 8016a04:	4770      	bx	lr
 8016a06:	f803 1b01 	strb.w	r1, [r3], #1
 8016a0a:	e7f9      	b.n	8016a00 <memset+0x4>

08016a0c <_free_r>:
 8016a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a0e:	2900      	cmp	r1, #0
 8016a10:	d044      	beq.n	8016a9c <_free_r+0x90>
 8016a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a16:	9001      	str	r0, [sp, #4]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8016a1e:	bfb8      	it	lt
 8016a20:	18e4      	addlt	r4, r4, r3
 8016a22:	f000 fc39 	bl	8017298 <__malloc_lock>
 8016a26:	4a1e      	ldr	r2, [pc, #120]	; (8016aa0 <_free_r+0x94>)
 8016a28:	9801      	ldr	r0, [sp, #4]
 8016a2a:	6813      	ldr	r3, [r2, #0]
 8016a2c:	b933      	cbnz	r3, 8016a3c <_free_r+0x30>
 8016a2e:	6063      	str	r3, [r4, #4]
 8016a30:	6014      	str	r4, [r2, #0]
 8016a32:	b003      	add	sp, #12
 8016a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a38:	f000 bc34 	b.w	80172a4 <__malloc_unlock>
 8016a3c:	42a3      	cmp	r3, r4
 8016a3e:	d908      	bls.n	8016a52 <_free_r+0x46>
 8016a40:	6825      	ldr	r5, [r4, #0]
 8016a42:	1961      	adds	r1, r4, r5
 8016a44:	428b      	cmp	r3, r1
 8016a46:	bf01      	itttt	eq
 8016a48:	6819      	ldreq	r1, [r3, #0]
 8016a4a:	685b      	ldreq	r3, [r3, #4]
 8016a4c:	1949      	addeq	r1, r1, r5
 8016a4e:	6021      	streq	r1, [r4, #0]
 8016a50:	e7ed      	b.n	8016a2e <_free_r+0x22>
 8016a52:	461a      	mov	r2, r3
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	b10b      	cbz	r3, 8016a5c <_free_r+0x50>
 8016a58:	42a3      	cmp	r3, r4
 8016a5a:	d9fa      	bls.n	8016a52 <_free_r+0x46>
 8016a5c:	6811      	ldr	r1, [r2, #0]
 8016a5e:	1855      	adds	r5, r2, r1
 8016a60:	42a5      	cmp	r5, r4
 8016a62:	d10b      	bne.n	8016a7c <_free_r+0x70>
 8016a64:	6824      	ldr	r4, [r4, #0]
 8016a66:	4421      	add	r1, r4
 8016a68:	1854      	adds	r4, r2, r1
 8016a6a:	42a3      	cmp	r3, r4
 8016a6c:	6011      	str	r1, [r2, #0]
 8016a6e:	d1e0      	bne.n	8016a32 <_free_r+0x26>
 8016a70:	681c      	ldr	r4, [r3, #0]
 8016a72:	685b      	ldr	r3, [r3, #4]
 8016a74:	6053      	str	r3, [r2, #4]
 8016a76:	4421      	add	r1, r4
 8016a78:	6011      	str	r1, [r2, #0]
 8016a7a:	e7da      	b.n	8016a32 <_free_r+0x26>
 8016a7c:	d902      	bls.n	8016a84 <_free_r+0x78>
 8016a7e:	230c      	movs	r3, #12
 8016a80:	6003      	str	r3, [r0, #0]
 8016a82:	e7d6      	b.n	8016a32 <_free_r+0x26>
 8016a84:	6825      	ldr	r5, [r4, #0]
 8016a86:	1961      	adds	r1, r4, r5
 8016a88:	428b      	cmp	r3, r1
 8016a8a:	bf04      	itt	eq
 8016a8c:	6819      	ldreq	r1, [r3, #0]
 8016a8e:	685b      	ldreq	r3, [r3, #4]
 8016a90:	6063      	str	r3, [r4, #4]
 8016a92:	bf04      	itt	eq
 8016a94:	1949      	addeq	r1, r1, r5
 8016a96:	6021      	streq	r1, [r4, #0]
 8016a98:	6054      	str	r4, [r2, #4]
 8016a9a:	e7ca      	b.n	8016a32 <_free_r+0x26>
 8016a9c:	b003      	add	sp, #12
 8016a9e:	bd30      	pop	{r4, r5, pc}
 8016aa0:	240055e0 	.word	0x240055e0

08016aa4 <sbrk_aligned>:
 8016aa4:	b570      	push	{r4, r5, r6, lr}
 8016aa6:	4e0e      	ldr	r6, [pc, #56]	; (8016ae0 <sbrk_aligned+0x3c>)
 8016aa8:	460c      	mov	r4, r1
 8016aaa:	6831      	ldr	r1, [r6, #0]
 8016aac:	4605      	mov	r5, r0
 8016aae:	b911      	cbnz	r1, 8016ab6 <sbrk_aligned+0x12>
 8016ab0:	f000 f902 	bl	8016cb8 <_sbrk_r>
 8016ab4:	6030      	str	r0, [r6, #0]
 8016ab6:	4621      	mov	r1, r4
 8016ab8:	4628      	mov	r0, r5
 8016aba:	f000 f8fd 	bl	8016cb8 <_sbrk_r>
 8016abe:	1c43      	adds	r3, r0, #1
 8016ac0:	d00a      	beq.n	8016ad8 <sbrk_aligned+0x34>
 8016ac2:	1cc4      	adds	r4, r0, #3
 8016ac4:	f024 0403 	bic.w	r4, r4, #3
 8016ac8:	42a0      	cmp	r0, r4
 8016aca:	d007      	beq.n	8016adc <sbrk_aligned+0x38>
 8016acc:	1a21      	subs	r1, r4, r0
 8016ace:	4628      	mov	r0, r5
 8016ad0:	f000 f8f2 	bl	8016cb8 <_sbrk_r>
 8016ad4:	3001      	adds	r0, #1
 8016ad6:	d101      	bne.n	8016adc <sbrk_aligned+0x38>
 8016ad8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016adc:	4620      	mov	r0, r4
 8016ade:	bd70      	pop	{r4, r5, r6, pc}
 8016ae0:	240055e4 	.word	0x240055e4

08016ae4 <_malloc_r>:
 8016ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ae8:	1ccd      	adds	r5, r1, #3
 8016aea:	f025 0503 	bic.w	r5, r5, #3
 8016aee:	3508      	adds	r5, #8
 8016af0:	2d0c      	cmp	r5, #12
 8016af2:	bf38      	it	cc
 8016af4:	250c      	movcc	r5, #12
 8016af6:	2d00      	cmp	r5, #0
 8016af8:	4607      	mov	r7, r0
 8016afa:	db01      	blt.n	8016b00 <_malloc_r+0x1c>
 8016afc:	42a9      	cmp	r1, r5
 8016afe:	d905      	bls.n	8016b0c <_malloc_r+0x28>
 8016b00:	230c      	movs	r3, #12
 8016b02:	603b      	str	r3, [r7, #0]
 8016b04:	2600      	movs	r6, #0
 8016b06:	4630      	mov	r0, r6
 8016b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b0c:	4e2e      	ldr	r6, [pc, #184]	; (8016bc8 <_malloc_r+0xe4>)
 8016b0e:	f000 fbc3 	bl	8017298 <__malloc_lock>
 8016b12:	6833      	ldr	r3, [r6, #0]
 8016b14:	461c      	mov	r4, r3
 8016b16:	bb34      	cbnz	r4, 8016b66 <_malloc_r+0x82>
 8016b18:	4629      	mov	r1, r5
 8016b1a:	4638      	mov	r0, r7
 8016b1c:	f7ff ffc2 	bl	8016aa4 <sbrk_aligned>
 8016b20:	1c43      	adds	r3, r0, #1
 8016b22:	4604      	mov	r4, r0
 8016b24:	d14d      	bne.n	8016bc2 <_malloc_r+0xde>
 8016b26:	6834      	ldr	r4, [r6, #0]
 8016b28:	4626      	mov	r6, r4
 8016b2a:	2e00      	cmp	r6, #0
 8016b2c:	d140      	bne.n	8016bb0 <_malloc_r+0xcc>
 8016b2e:	6823      	ldr	r3, [r4, #0]
 8016b30:	4631      	mov	r1, r6
 8016b32:	4638      	mov	r0, r7
 8016b34:	eb04 0803 	add.w	r8, r4, r3
 8016b38:	f000 f8be 	bl	8016cb8 <_sbrk_r>
 8016b3c:	4580      	cmp	r8, r0
 8016b3e:	d13a      	bne.n	8016bb6 <_malloc_r+0xd2>
 8016b40:	6821      	ldr	r1, [r4, #0]
 8016b42:	3503      	adds	r5, #3
 8016b44:	1a6d      	subs	r5, r5, r1
 8016b46:	f025 0503 	bic.w	r5, r5, #3
 8016b4a:	3508      	adds	r5, #8
 8016b4c:	2d0c      	cmp	r5, #12
 8016b4e:	bf38      	it	cc
 8016b50:	250c      	movcc	r5, #12
 8016b52:	4629      	mov	r1, r5
 8016b54:	4638      	mov	r0, r7
 8016b56:	f7ff ffa5 	bl	8016aa4 <sbrk_aligned>
 8016b5a:	3001      	adds	r0, #1
 8016b5c:	d02b      	beq.n	8016bb6 <_malloc_r+0xd2>
 8016b5e:	6823      	ldr	r3, [r4, #0]
 8016b60:	442b      	add	r3, r5
 8016b62:	6023      	str	r3, [r4, #0]
 8016b64:	e00e      	b.n	8016b84 <_malloc_r+0xa0>
 8016b66:	6822      	ldr	r2, [r4, #0]
 8016b68:	1b52      	subs	r2, r2, r5
 8016b6a:	d41e      	bmi.n	8016baa <_malloc_r+0xc6>
 8016b6c:	2a0b      	cmp	r2, #11
 8016b6e:	d916      	bls.n	8016b9e <_malloc_r+0xba>
 8016b70:	1961      	adds	r1, r4, r5
 8016b72:	42a3      	cmp	r3, r4
 8016b74:	6025      	str	r5, [r4, #0]
 8016b76:	bf18      	it	ne
 8016b78:	6059      	strne	r1, [r3, #4]
 8016b7a:	6863      	ldr	r3, [r4, #4]
 8016b7c:	bf08      	it	eq
 8016b7e:	6031      	streq	r1, [r6, #0]
 8016b80:	5162      	str	r2, [r4, r5]
 8016b82:	604b      	str	r3, [r1, #4]
 8016b84:	4638      	mov	r0, r7
 8016b86:	f104 060b 	add.w	r6, r4, #11
 8016b8a:	f000 fb8b 	bl	80172a4 <__malloc_unlock>
 8016b8e:	f026 0607 	bic.w	r6, r6, #7
 8016b92:	1d23      	adds	r3, r4, #4
 8016b94:	1af2      	subs	r2, r6, r3
 8016b96:	d0b6      	beq.n	8016b06 <_malloc_r+0x22>
 8016b98:	1b9b      	subs	r3, r3, r6
 8016b9a:	50a3      	str	r3, [r4, r2]
 8016b9c:	e7b3      	b.n	8016b06 <_malloc_r+0x22>
 8016b9e:	6862      	ldr	r2, [r4, #4]
 8016ba0:	42a3      	cmp	r3, r4
 8016ba2:	bf0c      	ite	eq
 8016ba4:	6032      	streq	r2, [r6, #0]
 8016ba6:	605a      	strne	r2, [r3, #4]
 8016ba8:	e7ec      	b.n	8016b84 <_malloc_r+0xa0>
 8016baa:	4623      	mov	r3, r4
 8016bac:	6864      	ldr	r4, [r4, #4]
 8016bae:	e7b2      	b.n	8016b16 <_malloc_r+0x32>
 8016bb0:	4634      	mov	r4, r6
 8016bb2:	6876      	ldr	r6, [r6, #4]
 8016bb4:	e7b9      	b.n	8016b2a <_malloc_r+0x46>
 8016bb6:	230c      	movs	r3, #12
 8016bb8:	603b      	str	r3, [r7, #0]
 8016bba:	4638      	mov	r0, r7
 8016bbc:	f000 fb72 	bl	80172a4 <__malloc_unlock>
 8016bc0:	e7a1      	b.n	8016b06 <_malloc_r+0x22>
 8016bc2:	6025      	str	r5, [r4, #0]
 8016bc4:	e7de      	b.n	8016b84 <_malloc_r+0xa0>
 8016bc6:	bf00      	nop
 8016bc8:	240055e0 	.word	0x240055e0

08016bcc <_puts_r>:
 8016bcc:	b570      	push	{r4, r5, r6, lr}
 8016bce:	460e      	mov	r6, r1
 8016bd0:	4605      	mov	r5, r0
 8016bd2:	b118      	cbz	r0, 8016bdc <_puts_r+0x10>
 8016bd4:	6983      	ldr	r3, [r0, #24]
 8016bd6:	b90b      	cbnz	r3, 8016bdc <_puts_r+0x10>
 8016bd8:	f000 fa58 	bl	801708c <__sinit>
 8016bdc:	69ab      	ldr	r3, [r5, #24]
 8016bde:	68ac      	ldr	r4, [r5, #8]
 8016be0:	b913      	cbnz	r3, 8016be8 <_puts_r+0x1c>
 8016be2:	4628      	mov	r0, r5
 8016be4:	f000 fa52 	bl	801708c <__sinit>
 8016be8:	4b2c      	ldr	r3, [pc, #176]	; (8016c9c <_puts_r+0xd0>)
 8016bea:	429c      	cmp	r4, r3
 8016bec:	d120      	bne.n	8016c30 <_puts_r+0x64>
 8016bee:	686c      	ldr	r4, [r5, #4]
 8016bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bf2:	07db      	lsls	r3, r3, #31
 8016bf4:	d405      	bmi.n	8016c02 <_puts_r+0x36>
 8016bf6:	89a3      	ldrh	r3, [r4, #12]
 8016bf8:	0598      	lsls	r0, r3, #22
 8016bfa:	d402      	bmi.n	8016c02 <_puts_r+0x36>
 8016bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bfe:	f000 fae3 	bl	80171c8 <__retarget_lock_acquire_recursive>
 8016c02:	89a3      	ldrh	r3, [r4, #12]
 8016c04:	0719      	lsls	r1, r3, #28
 8016c06:	d51d      	bpl.n	8016c44 <_puts_r+0x78>
 8016c08:	6923      	ldr	r3, [r4, #16]
 8016c0a:	b1db      	cbz	r3, 8016c44 <_puts_r+0x78>
 8016c0c:	3e01      	subs	r6, #1
 8016c0e:	68a3      	ldr	r3, [r4, #8]
 8016c10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016c14:	3b01      	subs	r3, #1
 8016c16:	60a3      	str	r3, [r4, #8]
 8016c18:	bb39      	cbnz	r1, 8016c6a <_puts_r+0x9e>
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	da38      	bge.n	8016c90 <_puts_r+0xc4>
 8016c1e:	4622      	mov	r2, r4
 8016c20:	210a      	movs	r1, #10
 8016c22:	4628      	mov	r0, r5
 8016c24:	f000 f858 	bl	8016cd8 <__swbuf_r>
 8016c28:	3001      	adds	r0, #1
 8016c2a:	d011      	beq.n	8016c50 <_puts_r+0x84>
 8016c2c:	250a      	movs	r5, #10
 8016c2e:	e011      	b.n	8016c54 <_puts_r+0x88>
 8016c30:	4b1b      	ldr	r3, [pc, #108]	; (8016ca0 <_puts_r+0xd4>)
 8016c32:	429c      	cmp	r4, r3
 8016c34:	d101      	bne.n	8016c3a <_puts_r+0x6e>
 8016c36:	68ac      	ldr	r4, [r5, #8]
 8016c38:	e7da      	b.n	8016bf0 <_puts_r+0x24>
 8016c3a:	4b1a      	ldr	r3, [pc, #104]	; (8016ca4 <_puts_r+0xd8>)
 8016c3c:	429c      	cmp	r4, r3
 8016c3e:	bf08      	it	eq
 8016c40:	68ec      	ldreq	r4, [r5, #12]
 8016c42:	e7d5      	b.n	8016bf0 <_puts_r+0x24>
 8016c44:	4621      	mov	r1, r4
 8016c46:	4628      	mov	r0, r5
 8016c48:	f000 f898 	bl	8016d7c <__swsetup_r>
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	d0dd      	beq.n	8016c0c <_puts_r+0x40>
 8016c50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c56:	07da      	lsls	r2, r3, #31
 8016c58:	d405      	bmi.n	8016c66 <_puts_r+0x9a>
 8016c5a:	89a3      	ldrh	r3, [r4, #12]
 8016c5c:	059b      	lsls	r3, r3, #22
 8016c5e:	d402      	bmi.n	8016c66 <_puts_r+0x9a>
 8016c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c62:	f000 fab2 	bl	80171ca <__retarget_lock_release_recursive>
 8016c66:	4628      	mov	r0, r5
 8016c68:	bd70      	pop	{r4, r5, r6, pc}
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	da04      	bge.n	8016c78 <_puts_r+0xac>
 8016c6e:	69a2      	ldr	r2, [r4, #24]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	dc06      	bgt.n	8016c82 <_puts_r+0xb6>
 8016c74:	290a      	cmp	r1, #10
 8016c76:	d004      	beq.n	8016c82 <_puts_r+0xb6>
 8016c78:	6823      	ldr	r3, [r4, #0]
 8016c7a:	1c5a      	adds	r2, r3, #1
 8016c7c:	6022      	str	r2, [r4, #0]
 8016c7e:	7019      	strb	r1, [r3, #0]
 8016c80:	e7c5      	b.n	8016c0e <_puts_r+0x42>
 8016c82:	4622      	mov	r2, r4
 8016c84:	4628      	mov	r0, r5
 8016c86:	f000 f827 	bl	8016cd8 <__swbuf_r>
 8016c8a:	3001      	adds	r0, #1
 8016c8c:	d1bf      	bne.n	8016c0e <_puts_r+0x42>
 8016c8e:	e7df      	b.n	8016c50 <_puts_r+0x84>
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	250a      	movs	r5, #10
 8016c94:	1c5a      	adds	r2, r3, #1
 8016c96:	6022      	str	r2, [r4, #0]
 8016c98:	701d      	strb	r5, [r3, #0]
 8016c9a:	e7db      	b.n	8016c54 <_puts_r+0x88>
 8016c9c:	080178ac 	.word	0x080178ac
 8016ca0:	080178cc 	.word	0x080178cc
 8016ca4:	0801788c 	.word	0x0801788c

08016ca8 <puts>:
 8016ca8:	4b02      	ldr	r3, [pc, #8]	; (8016cb4 <puts+0xc>)
 8016caa:	4601      	mov	r1, r0
 8016cac:	6818      	ldr	r0, [r3, #0]
 8016cae:	f7ff bf8d 	b.w	8016bcc <_puts_r>
 8016cb2:	bf00      	nop
 8016cb4:	2400009c 	.word	0x2400009c

08016cb8 <_sbrk_r>:
 8016cb8:	b538      	push	{r3, r4, r5, lr}
 8016cba:	4d06      	ldr	r5, [pc, #24]	; (8016cd4 <_sbrk_r+0x1c>)
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	4608      	mov	r0, r1
 8016cc2:	602b      	str	r3, [r5, #0]
 8016cc4:	f7ec fafc 	bl	80032c0 <_sbrk>
 8016cc8:	1c43      	adds	r3, r0, #1
 8016cca:	d102      	bne.n	8016cd2 <_sbrk_r+0x1a>
 8016ccc:	682b      	ldr	r3, [r5, #0]
 8016cce:	b103      	cbz	r3, 8016cd2 <_sbrk_r+0x1a>
 8016cd0:	6023      	str	r3, [r4, #0]
 8016cd2:	bd38      	pop	{r3, r4, r5, pc}
 8016cd4:	240055ec 	.word	0x240055ec

08016cd8 <__swbuf_r>:
 8016cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cda:	460e      	mov	r6, r1
 8016cdc:	4614      	mov	r4, r2
 8016cde:	4605      	mov	r5, r0
 8016ce0:	b118      	cbz	r0, 8016cea <__swbuf_r+0x12>
 8016ce2:	6983      	ldr	r3, [r0, #24]
 8016ce4:	b90b      	cbnz	r3, 8016cea <__swbuf_r+0x12>
 8016ce6:	f000 f9d1 	bl	801708c <__sinit>
 8016cea:	4b21      	ldr	r3, [pc, #132]	; (8016d70 <__swbuf_r+0x98>)
 8016cec:	429c      	cmp	r4, r3
 8016cee:	d12b      	bne.n	8016d48 <__swbuf_r+0x70>
 8016cf0:	686c      	ldr	r4, [r5, #4]
 8016cf2:	69a3      	ldr	r3, [r4, #24]
 8016cf4:	60a3      	str	r3, [r4, #8]
 8016cf6:	89a3      	ldrh	r3, [r4, #12]
 8016cf8:	071a      	lsls	r2, r3, #28
 8016cfa:	d52f      	bpl.n	8016d5c <__swbuf_r+0x84>
 8016cfc:	6923      	ldr	r3, [r4, #16]
 8016cfe:	b36b      	cbz	r3, 8016d5c <__swbuf_r+0x84>
 8016d00:	6923      	ldr	r3, [r4, #16]
 8016d02:	6820      	ldr	r0, [r4, #0]
 8016d04:	1ac0      	subs	r0, r0, r3
 8016d06:	6963      	ldr	r3, [r4, #20]
 8016d08:	b2f6      	uxtb	r6, r6
 8016d0a:	4283      	cmp	r3, r0
 8016d0c:	4637      	mov	r7, r6
 8016d0e:	dc04      	bgt.n	8016d1a <__swbuf_r+0x42>
 8016d10:	4621      	mov	r1, r4
 8016d12:	4628      	mov	r0, r5
 8016d14:	f000 f926 	bl	8016f64 <_fflush_r>
 8016d18:	bb30      	cbnz	r0, 8016d68 <__swbuf_r+0x90>
 8016d1a:	68a3      	ldr	r3, [r4, #8]
 8016d1c:	3b01      	subs	r3, #1
 8016d1e:	60a3      	str	r3, [r4, #8]
 8016d20:	6823      	ldr	r3, [r4, #0]
 8016d22:	1c5a      	adds	r2, r3, #1
 8016d24:	6022      	str	r2, [r4, #0]
 8016d26:	701e      	strb	r6, [r3, #0]
 8016d28:	6963      	ldr	r3, [r4, #20]
 8016d2a:	3001      	adds	r0, #1
 8016d2c:	4283      	cmp	r3, r0
 8016d2e:	d004      	beq.n	8016d3a <__swbuf_r+0x62>
 8016d30:	89a3      	ldrh	r3, [r4, #12]
 8016d32:	07db      	lsls	r3, r3, #31
 8016d34:	d506      	bpl.n	8016d44 <__swbuf_r+0x6c>
 8016d36:	2e0a      	cmp	r6, #10
 8016d38:	d104      	bne.n	8016d44 <__swbuf_r+0x6c>
 8016d3a:	4621      	mov	r1, r4
 8016d3c:	4628      	mov	r0, r5
 8016d3e:	f000 f911 	bl	8016f64 <_fflush_r>
 8016d42:	b988      	cbnz	r0, 8016d68 <__swbuf_r+0x90>
 8016d44:	4638      	mov	r0, r7
 8016d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d48:	4b0a      	ldr	r3, [pc, #40]	; (8016d74 <__swbuf_r+0x9c>)
 8016d4a:	429c      	cmp	r4, r3
 8016d4c:	d101      	bne.n	8016d52 <__swbuf_r+0x7a>
 8016d4e:	68ac      	ldr	r4, [r5, #8]
 8016d50:	e7cf      	b.n	8016cf2 <__swbuf_r+0x1a>
 8016d52:	4b09      	ldr	r3, [pc, #36]	; (8016d78 <__swbuf_r+0xa0>)
 8016d54:	429c      	cmp	r4, r3
 8016d56:	bf08      	it	eq
 8016d58:	68ec      	ldreq	r4, [r5, #12]
 8016d5a:	e7ca      	b.n	8016cf2 <__swbuf_r+0x1a>
 8016d5c:	4621      	mov	r1, r4
 8016d5e:	4628      	mov	r0, r5
 8016d60:	f000 f80c 	bl	8016d7c <__swsetup_r>
 8016d64:	2800      	cmp	r0, #0
 8016d66:	d0cb      	beq.n	8016d00 <__swbuf_r+0x28>
 8016d68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016d6c:	e7ea      	b.n	8016d44 <__swbuf_r+0x6c>
 8016d6e:	bf00      	nop
 8016d70:	080178ac 	.word	0x080178ac
 8016d74:	080178cc 	.word	0x080178cc
 8016d78:	0801788c 	.word	0x0801788c

08016d7c <__swsetup_r>:
 8016d7c:	4b32      	ldr	r3, [pc, #200]	; (8016e48 <__swsetup_r+0xcc>)
 8016d7e:	b570      	push	{r4, r5, r6, lr}
 8016d80:	681d      	ldr	r5, [r3, #0]
 8016d82:	4606      	mov	r6, r0
 8016d84:	460c      	mov	r4, r1
 8016d86:	b125      	cbz	r5, 8016d92 <__swsetup_r+0x16>
 8016d88:	69ab      	ldr	r3, [r5, #24]
 8016d8a:	b913      	cbnz	r3, 8016d92 <__swsetup_r+0x16>
 8016d8c:	4628      	mov	r0, r5
 8016d8e:	f000 f97d 	bl	801708c <__sinit>
 8016d92:	4b2e      	ldr	r3, [pc, #184]	; (8016e4c <__swsetup_r+0xd0>)
 8016d94:	429c      	cmp	r4, r3
 8016d96:	d10f      	bne.n	8016db8 <__swsetup_r+0x3c>
 8016d98:	686c      	ldr	r4, [r5, #4]
 8016d9a:	89a3      	ldrh	r3, [r4, #12]
 8016d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016da0:	0719      	lsls	r1, r3, #28
 8016da2:	d42c      	bmi.n	8016dfe <__swsetup_r+0x82>
 8016da4:	06dd      	lsls	r5, r3, #27
 8016da6:	d411      	bmi.n	8016dcc <__swsetup_r+0x50>
 8016da8:	2309      	movs	r3, #9
 8016daa:	6033      	str	r3, [r6, #0]
 8016dac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016db0:	81a3      	strh	r3, [r4, #12]
 8016db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016db6:	e03e      	b.n	8016e36 <__swsetup_r+0xba>
 8016db8:	4b25      	ldr	r3, [pc, #148]	; (8016e50 <__swsetup_r+0xd4>)
 8016dba:	429c      	cmp	r4, r3
 8016dbc:	d101      	bne.n	8016dc2 <__swsetup_r+0x46>
 8016dbe:	68ac      	ldr	r4, [r5, #8]
 8016dc0:	e7eb      	b.n	8016d9a <__swsetup_r+0x1e>
 8016dc2:	4b24      	ldr	r3, [pc, #144]	; (8016e54 <__swsetup_r+0xd8>)
 8016dc4:	429c      	cmp	r4, r3
 8016dc6:	bf08      	it	eq
 8016dc8:	68ec      	ldreq	r4, [r5, #12]
 8016dca:	e7e6      	b.n	8016d9a <__swsetup_r+0x1e>
 8016dcc:	0758      	lsls	r0, r3, #29
 8016dce:	d512      	bpl.n	8016df6 <__swsetup_r+0x7a>
 8016dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016dd2:	b141      	cbz	r1, 8016de6 <__swsetup_r+0x6a>
 8016dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016dd8:	4299      	cmp	r1, r3
 8016dda:	d002      	beq.n	8016de2 <__swsetup_r+0x66>
 8016ddc:	4630      	mov	r0, r6
 8016dde:	f7ff fe15 	bl	8016a0c <_free_r>
 8016de2:	2300      	movs	r3, #0
 8016de4:	6363      	str	r3, [r4, #52]	; 0x34
 8016de6:	89a3      	ldrh	r3, [r4, #12]
 8016de8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016dec:	81a3      	strh	r3, [r4, #12]
 8016dee:	2300      	movs	r3, #0
 8016df0:	6063      	str	r3, [r4, #4]
 8016df2:	6923      	ldr	r3, [r4, #16]
 8016df4:	6023      	str	r3, [r4, #0]
 8016df6:	89a3      	ldrh	r3, [r4, #12]
 8016df8:	f043 0308 	orr.w	r3, r3, #8
 8016dfc:	81a3      	strh	r3, [r4, #12]
 8016dfe:	6923      	ldr	r3, [r4, #16]
 8016e00:	b94b      	cbnz	r3, 8016e16 <__swsetup_r+0x9a>
 8016e02:	89a3      	ldrh	r3, [r4, #12]
 8016e04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e0c:	d003      	beq.n	8016e16 <__swsetup_r+0x9a>
 8016e0e:	4621      	mov	r1, r4
 8016e10:	4630      	mov	r0, r6
 8016e12:	f000 fa01 	bl	8017218 <__smakebuf_r>
 8016e16:	89a0      	ldrh	r0, [r4, #12]
 8016e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e1c:	f010 0301 	ands.w	r3, r0, #1
 8016e20:	d00a      	beq.n	8016e38 <__swsetup_r+0xbc>
 8016e22:	2300      	movs	r3, #0
 8016e24:	60a3      	str	r3, [r4, #8]
 8016e26:	6963      	ldr	r3, [r4, #20]
 8016e28:	425b      	negs	r3, r3
 8016e2a:	61a3      	str	r3, [r4, #24]
 8016e2c:	6923      	ldr	r3, [r4, #16]
 8016e2e:	b943      	cbnz	r3, 8016e42 <__swsetup_r+0xc6>
 8016e30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016e34:	d1ba      	bne.n	8016dac <__swsetup_r+0x30>
 8016e36:	bd70      	pop	{r4, r5, r6, pc}
 8016e38:	0781      	lsls	r1, r0, #30
 8016e3a:	bf58      	it	pl
 8016e3c:	6963      	ldrpl	r3, [r4, #20]
 8016e3e:	60a3      	str	r3, [r4, #8]
 8016e40:	e7f4      	b.n	8016e2c <__swsetup_r+0xb0>
 8016e42:	2000      	movs	r0, #0
 8016e44:	e7f7      	b.n	8016e36 <__swsetup_r+0xba>
 8016e46:	bf00      	nop
 8016e48:	2400009c 	.word	0x2400009c
 8016e4c:	080178ac 	.word	0x080178ac
 8016e50:	080178cc 	.word	0x080178cc
 8016e54:	0801788c 	.word	0x0801788c

08016e58 <__sflush_r>:
 8016e58:	898a      	ldrh	r2, [r1, #12]
 8016e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e5e:	4605      	mov	r5, r0
 8016e60:	0710      	lsls	r0, r2, #28
 8016e62:	460c      	mov	r4, r1
 8016e64:	d458      	bmi.n	8016f18 <__sflush_r+0xc0>
 8016e66:	684b      	ldr	r3, [r1, #4]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	dc05      	bgt.n	8016e78 <__sflush_r+0x20>
 8016e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	dc02      	bgt.n	8016e78 <__sflush_r+0x20>
 8016e72:	2000      	movs	r0, #0
 8016e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e7a:	2e00      	cmp	r6, #0
 8016e7c:	d0f9      	beq.n	8016e72 <__sflush_r+0x1a>
 8016e7e:	2300      	movs	r3, #0
 8016e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e84:	682f      	ldr	r7, [r5, #0]
 8016e86:	602b      	str	r3, [r5, #0]
 8016e88:	d032      	beq.n	8016ef0 <__sflush_r+0x98>
 8016e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e8c:	89a3      	ldrh	r3, [r4, #12]
 8016e8e:	075a      	lsls	r2, r3, #29
 8016e90:	d505      	bpl.n	8016e9e <__sflush_r+0x46>
 8016e92:	6863      	ldr	r3, [r4, #4]
 8016e94:	1ac0      	subs	r0, r0, r3
 8016e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e98:	b10b      	cbz	r3, 8016e9e <__sflush_r+0x46>
 8016e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e9c:	1ac0      	subs	r0, r0, r3
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	4602      	mov	r2, r0
 8016ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ea4:	6a21      	ldr	r1, [r4, #32]
 8016ea6:	4628      	mov	r0, r5
 8016ea8:	47b0      	blx	r6
 8016eaa:	1c43      	adds	r3, r0, #1
 8016eac:	89a3      	ldrh	r3, [r4, #12]
 8016eae:	d106      	bne.n	8016ebe <__sflush_r+0x66>
 8016eb0:	6829      	ldr	r1, [r5, #0]
 8016eb2:	291d      	cmp	r1, #29
 8016eb4:	d82c      	bhi.n	8016f10 <__sflush_r+0xb8>
 8016eb6:	4a2a      	ldr	r2, [pc, #168]	; (8016f60 <__sflush_r+0x108>)
 8016eb8:	40ca      	lsrs	r2, r1
 8016eba:	07d6      	lsls	r6, r2, #31
 8016ebc:	d528      	bpl.n	8016f10 <__sflush_r+0xb8>
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	6062      	str	r2, [r4, #4]
 8016ec2:	04d9      	lsls	r1, r3, #19
 8016ec4:	6922      	ldr	r2, [r4, #16]
 8016ec6:	6022      	str	r2, [r4, #0]
 8016ec8:	d504      	bpl.n	8016ed4 <__sflush_r+0x7c>
 8016eca:	1c42      	adds	r2, r0, #1
 8016ecc:	d101      	bne.n	8016ed2 <__sflush_r+0x7a>
 8016ece:	682b      	ldr	r3, [r5, #0]
 8016ed0:	b903      	cbnz	r3, 8016ed4 <__sflush_r+0x7c>
 8016ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8016ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ed6:	602f      	str	r7, [r5, #0]
 8016ed8:	2900      	cmp	r1, #0
 8016eda:	d0ca      	beq.n	8016e72 <__sflush_r+0x1a>
 8016edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ee0:	4299      	cmp	r1, r3
 8016ee2:	d002      	beq.n	8016eea <__sflush_r+0x92>
 8016ee4:	4628      	mov	r0, r5
 8016ee6:	f7ff fd91 	bl	8016a0c <_free_r>
 8016eea:	2000      	movs	r0, #0
 8016eec:	6360      	str	r0, [r4, #52]	; 0x34
 8016eee:	e7c1      	b.n	8016e74 <__sflush_r+0x1c>
 8016ef0:	6a21      	ldr	r1, [r4, #32]
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	47b0      	blx	r6
 8016ef8:	1c41      	adds	r1, r0, #1
 8016efa:	d1c7      	bne.n	8016e8c <__sflush_r+0x34>
 8016efc:	682b      	ldr	r3, [r5, #0]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d0c4      	beq.n	8016e8c <__sflush_r+0x34>
 8016f02:	2b1d      	cmp	r3, #29
 8016f04:	d001      	beq.n	8016f0a <__sflush_r+0xb2>
 8016f06:	2b16      	cmp	r3, #22
 8016f08:	d101      	bne.n	8016f0e <__sflush_r+0xb6>
 8016f0a:	602f      	str	r7, [r5, #0]
 8016f0c:	e7b1      	b.n	8016e72 <__sflush_r+0x1a>
 8016f0e:	89a3      	ldrh	r3, [r4, #12]
 8016f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f14:	81a3      	strh	r3, [r4, #12]
 8016f16:	e7ad      	b.n	8016e74 <__sflush_r+0x1c>
 8016f18:	690f      	ldr	r7, [r1, #16]
 8016f1a:	2f00      	cmp	r7, #0
 8016f1c:	d0a9      	beq.n	8016e72 <__sflush_r+0x1a>
 8016f1e:	0793      	lsls	r3, r2, #30
 8016f20:	680e      	ldr	r6, [r1, #0]
 8016f22:	bf08      	it	eq
 8016f24:	694b      	ldreq	r3, [r1, #20]
 8016f26:	600f      	str	r7, [r1, #0]
 8016f28:	bf18      	it	ne
 8016f2a:	2300      	movne	r3, #0
 8016f2c:	eba6 0807 	sub.w	r8, r6, r7
 8016f30:	608b      	str	r3, [r1, #8]
 8016f32:	f1b8 0f00 	cmp.w	r8, #0
 8016f36:	dd9c      	ble.n	8016e72 <__sflush_r+0x1a>
 8016f38:	6a21      	ldr	r1, [r4, #32]
 8016f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f3c:	4643      	mov	r3, r8
 8016f3e:	463a      	mov	r2, r7
 8016f40:	4628      	mov	r0, r5
 8016f42:	47b0      	blx	r6
 8016f44:	2800      	cmp	r0, #0
 8016f46:	dc06      	bgt.n	8016f56 <__sflush_r+0xfe>
 8016f48:	89a3      	ldrh	r3, [r4, #12]
 8016f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f4e:	81a3      	strh	r3, [r4, #12]
 8016f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f54:	e78e      	b.n	8016e74 <__sflush_r+0x1c>
 8016f56:	4407      	add	r7, r0
 8016f58:	eba8 0800 	sub.w	r8, r8, r0
 8016f5c:	e7e9      	b.n	8016f32 <__sflush_r+0xda>
 8016f5e:	bf00      	nop
 8016f60:	20400001 	.word	0x20400001

08016f64 <_fflush_r>:
 8016f64:	b538      	push	{r3, r4, r5, lr}
 8016f66:	690b      	ldr	r3, [r1, #16]
 8016f68:	4605      	mov	r5, r0
 8016f6a:	460c      	mov	r4, r1
 8016f6c:	b913      	cbnz	r3, 8016f74 <_fflush_r+0x10>
 8016f6e:	2500      	movs	r5, #0
 8016f70:	4628      	mov	r0, r5
 8016f72:	bd38      	pop	{r3, r4, r5, pc}
 8016f74:	b118      	cbz	r0, 8016f7e <_fflush_r+0x1a>
 8016f76:	6983      	ldr	r3, [r0, #24]
 8016f78:	b90b      	cbnz	r3, 8016f7e <_fflush_r+0x1a>
 8016f7a:	f000 f887 	bl	801708c <__sinit>
 8016f7e:	4b14      	ldr	r3, [pc, #80]	; (8016fd0 <_fflush_r+0x6c>)
 8016f80:	429c      	cmp	r4, r3
 8016f82:	d11b      	bne.n	8016fbc <_fflush_r+0x58>
 8016f84:	686c      	ldr	r4, [r5, #4]
 8016f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d0ef      	beq.n	8016f6e <_fflush_r+0xa>
 8016f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f90:	07d0      	lsls	r0, r2, #31
 8016f92:	d404      	bmi.n	8016f9e <_fflush_r+0x3a>
 8016f94:	0599      	lsls	r1, r3, #22
 8016f96:	d402      	bmi.n	8016f9e <_fflush_r+0x3a>
 8016f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f9a:	f000 f915 	bl	80171c8 <__retarget_lock_acquire_recursive>
 8016f9e:	4628      	mov	r0, r5
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	f7ff ff59 	bl	8016e58 <__sflush_r>
 8016fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016fa8:	07da      	lsls	r2, r3, #31
 8016faa:	4605      	mov	r5, r0
 8016fac:	d4e0      	bmi.n	8016f70 <_fflush_r+0xc>
 8016fae:	89a3      	ldrh	r3, [r4, #12]
 8016fb0:	059b      	lsls	r3, r3, #22
 8016fb2:	d4dd      	bmi.n	8016f70 <_fflush_r+0xc>
 8016fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fb6:	f000 f908 	bl	80171ca <__retarget_lock_release_recursive>
 8016fba:	e7d9      	b.n	8016f70 <_fflush_r+0xc>
 8016fbc:	4b05      	ldr	r3, [pc, #20]	; (8016fd4 <_fflush_r+0x70>)
 8016fbe:	429c      	cmp	r4, r3
 8016fc0:	d101      	bne.n	8016fc6 <_fflush_r+0x62>
 8016fc2:	68ac      	ldr	r4, [r5, #8]
 8016fc4:	e7df      	b.n	8016f86 <_fflush_r+0x22>
 8016fc6:	4b04      	ldr	r3, [pc, #16]	; (8016fd8 <_fflush_r+0x74>)
 8016fc8:	429c      	cmp	r4, r3
 8016fca:	bf08      	it	eq
 8016fcc:	68ec      	ldreq	r4, [r5, #12]
 8016fce:	e7da      	b.n	8016f86 <_fflush_r+0x22>
 8016fd0:	080178ac 	.word	0x080178ac
 8016fd4:	080178cc 	.word	0x080178cc
 8016fd8:	0801788c 	.word	0x0801788c

08016fdc <std>:
 8016fdc:	2300      	movs	r3, #0
 8016fde:	b510      	push	{r4, lr}
 8016fe0:	4604      	mov	r4, r0
 8016fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8016fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016fea:	6083      	str	r3, [r0, #8]
 8016fec:	8181      	strh	r1, [r0, #12]
 8016fee:	6643      	str	r3, [r0, #100]	; 0x64
 8016ff0:	81c2      	strh	r2, [r0, #14]
 8016ff2:	6183      	str	r3, [r0, #24]
 8016ff4:	4619      	mov	r1, r3
 8016ff6:	2208      	movs	r2, #8
 8016ff8:	305c      	adds	r0, #92	; 0x5c
 8016ffa:	f7ff fcff 	bl	80169fc <memset>
 8016ffe:	4b05      	ldr	r3, [pc, #20]	; (8017014 <std+0x38>)
 8017000:	6263      	str	r3, [r4, #36]	; 0x24
 8017002:	4b05      	ldr	r3, [pc, #20]	; (8017018 <std+0x3c>)
 8017004:	62a3      	str	r3, [r4, #40]	; 0x28
 8017006:	4b05      	ldr	r3, [pc, #20]	; (801701c <std+0x40>)
 8017008:	62e3      	str	r3, [r4, #44]	; 0x2c
 801700a:	4b05      	ldr	r3, [pc, #20]	; (8017020 <std+0x44>)
 801700c:	6224      	str	r4, [r4, #32]
 801700e:	6323      	str	r3, [r4, #48]	; 0x30
 8017010:	bd10      	pop	{r4, pc}
 8017012:	bf00      	nop
 8017014:	080172b1 	.word	0x080172b1
 8017018:	080172d3 	.word	0x080172d3
 801701c:	0801730b 	.word	0x0801730b
 8017020:	0801732f 	.word	0x0801732f

08017024 <_cleanup_r>:
 8017024:	4901      	ldr	r1, [pc, #4]	; (801702c <_cleanup_r+0x8>)
 8017026:	f000 b8af 	b.w	8017188 <_fwalk_reent>
 801702a:	bf00      	nop
 801702c:	08016f65 	.word	0x08016f65

08017030 <__sfmoreglue>:
 8017030:	b570      	push	{r4, r5, r6, lr}
 8017032:	2268      	movs	r2, #104	; 0x68
 8017034:	1e4d      	subs	r5, r1, #1
 8017036:	4355      	muls	r5, r2
 8017038:	460e      	mov	r6, r1
 801703a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801703e:	f7ff fd51 	bl	8016ae4 <_malloc_r>
 8017042:	4604      	mov	r4, r0
 8017044:	b140      	cbz	r0, 8017058 <__sfmoreglue+0x28>
 8017046:	2100      	movs	r1, #0
 8017048:	e9c0 1600 	strd	r1, r6, [r0]
 801704c:	300c      	adds	r0, #12
 801704e:	60a0      	str	r0, [r4, #8]
 8017050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017054:	f7ff fcd2 	bl	80169fc <memset>
 8017058:	4620      	mov	r0, r4
 801705a:	bd70      	pop	{r4, r5, r6, pc}

0801705c <__sfp_lock_acquire>:
 801705c:	4801      	ldr	r0, [pc, #4]	; (8017064 <__sfp_lock_acquire+0x8>)
 801705e:	f000 b8b3 	b.w	80171c8 <__retarget_lock_acquire_recursive>
 8017062:	bf00      	nop
 8017064:	240055e9 	.word	0x240055e9

08017068 <__sfp_lock_release>:
 8017068:	4801      	ldr	r0, [pc, #4]	; (8017070 <__sfp_lock_release+0x8>)
 801706a:	f000 b8ae 	b.w	80171ca <__retarget_lock_release_recursive>
 801706e:	bf00      	nop
 8017070:	240055e9 	.word	0x240055e9

08017074 <__sinit_lock_acquire>:
 8017074:	4801      	ldr	r0, [pc, #4]	; (801707c <__sinit_lock_acquire+0x8>)
 8017076:	f000 b8a7 	b.w	80171c8 <__retarget_lock_acquire_recursive>
 801707a:	bf00      	nop
 801707c:	240055ea 	.word	0x240055ea

08017080 <__sinit_lock_release>:
 8017080:	4801      	ldr	r0, [pc, #4]	; (8017088 <__sinit_lock_release+0x8>)
 8017082:	f000 b8a2 	b.w	80171ca <__retarget_lock_release_recursive>
 8017086:	bf00      	nop
 8017088:	240055ea 	.word	0x240055ea

0801708c <__sinit>:
 801708c:	b510      	push	{r4, lr}
 801708e:	4604      	mov	r4, r0
 8017090:	f7ff fff0 	bl	8017074 <__sinit_lock_acquire>
 8017094:	69a3      	ldr	r3, [r4, #24]
 8017096:	b11b      	cbz	r3, 80170a0 <__sinit+0x14>
 8017098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801709c:	f7ff bff0 	b.w	8017080 <__sinit_lock_release>
 80170a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80170a4:	6523      	str	r3, [r4, #80]	; 0x50
 80170a6:	4b13      	ldr	r3, [pc, #76]	; (80170f4 <__sinit+0x68>)
 80170a8:	4a13      	ldr	r2, [pc, #76]	; (80170f8 <__sinit+0x6c>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80170ae:	42a3      	cmp	r3, r4
 80170b0:	bf04      	itt	eq
 80170b2:	2301      	moveq	r3, #1
 80170b4:	61a3      	streq	r3, [r4, #24]
 80170b6:	4620      	mov	r0, r4
 80170b8:	f000 f820 	bl	80170fc <__sfp>
 80170bc:	6060      	str	r0, [r4, #4]
 80170be:	4620      	mov	r0, r4
 80170c0:	f000 f81c 	bl	80170fc <__sfp>
 80170c4:	60a0      	str	r0, [r4, #8]
 80170c6:	4620      	mov	r0, r4
 80170c8:	f000 f818 	bl	80170fc <__sfp>
 80170cc:	2200      	movs	r2, #0
 80170ce:	60e0      	str	r0, [r4, #12]
 80170d0:	2104      	movs	r1, #4
 80170d2:	6860      	ldr	r0, [r4, #4]
 80170d4:	f7ff ff82 	bl	8016fdc <std>
 80170d8:	68a0      	ldr	r0, [r4, #8]
 80170da:	2201      	movs	r2, #1
 80170dc:	2109      	movs	r1, #9
 80170de:	f7ff ff7d 	bl	8016fdc <std>
 80170e2:	68e0      	ldr	r0, [r4, #12]
 80170e4:	2202      	movs	r2, #2
 80170e6:	2112      	movs	r1, #18
 80170e8:	f7ff ff78 	bl	8016fdc <std>
 80170ec:	2301      	movs	r3, #1
 80170ee:	61a3      	str	r3, [r4, #24]
 80170f0:	e7d2      	b.n	8017098 <__sinit+0xc>
 80170f2:	bf00      	nop
 80170f4:	08017888 	.word	0x08017888
 80170f8:	08017025 	.word	0x08017025

080170fc <__sfp>:
 80170fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170fe:	4607      	mov	r7, r0
 8017100:	f7ff ffac 	bl	801705c <__sfp_lock_acquire>
 8017104:	4b1e      	ldr	r3, [pc, #120]	; (8017180 <__sfp+0x84>)
 8017106:	681e      	ldr	r6, [r3, #0]
 8017108:	69b3      	ldr	r3, [r6, #24]
 801710a:	b913      	cbnz	r3, 8017112 <__sfp+0x16>
 801710c:	4630      	mov	r0, r6
 801710e:	f7ff ffbd 	bl	801708c <__sinit>
 8017112:	3648      	adds	r6, #72	; 0x48
 8017114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017118:	3b01      	subs	r3, #1
 801711a:	d503      	bpl.n	8017124 <__sfp+0x28>
 801711c:	6833      	ldr	r3, [r6, #0]
 801711e:	b30b      	cbz	r3, 8017164 <__sfp+0x68>
 8017120:	6836      	ldr	r6, [r6, #0]
 8017122:	e7f7      	b.n	8017114 <__sfp+0x18>
 8017124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017128:	b9d5      	cbnz	r5, 8017160 <__sfp+0x64>
 801712a:	4b16      	ldr	r3, [pc, #88]	; (8017184 <__sfp+0x88>)
 801712c:	60e3      	str	r3, [r4, #12]
 801712e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017132:	6665      	str	r5, [r4, #100]	; 0x64
 8017134:	f000 f847 	bl	80171c6 <__retarget_lock_init_recursive>
 8017138:	f7ff ff96 	bl	8017068 <__sfp_lock_release>
 801713c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017140:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017144:	6025      	str	r5, [r4, #0]
 8017146:	61a5      	str	r5, [r4, #24]
 8017148:	2208      	movs	r2, #8
 801714a:	4629      	mov	r1, r5
 801714c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017150:	f7ff fc54 	bl	80169fc <memset>
 8017154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801715c:	4620      	mov	r0, r4
 801715e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017160:	3468      	adds	r4, #104	; 0x68
 8017162:	e7d9      	b.n	8017118 <__sfp+0x1c>
 8017164:	2104      	movs	r1, #4
 8017166:	4638      	mov	r0, r7
 8017168:	f7ff ff62 	bl	8017030 <__sfmoreglue>
 801716c:	4604      	mov	r4, r0
 801716e:	6030      	str	r0, [r6, #0]
 8017170:	2800      	cmp	r0, #0
 8017172:	d1d5      	bne.n	8017120 <__sfp+0x24>
 8017174:	f7ff ff78 	bl	8017068 <__sfp_lock_release>
 8017178:	230c      	movs	r3, #12
 801717a:	603b      	str	r3, [r7, #0]
 801717c:	e7ee      	b.n	801715c <__sfp+0x60>
 801717e:	bf00      	nop
 8017180:	08017888 	.word	0x08017888
 8017184:	ffff0001 	.word	0xffff0001

08017188 <_fwalk_reent>:
 8017188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801718c:	4606      	mov	r6, r0
 801718e:	4688      	mov	r8, r1
 8017190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017194:	2700      	movs	r7, #0
 8017196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801719a:	f1b9 0901 	subs.w	r9, r9, #1
 801719e:	d505      	bpl.n	80171ac <_fwalk_reent+0x24>
 80171a0:	6824      	ldr	r4, [r4, #0]
 80171a2:	2c00      	cmp	r4, #0
 80171a4:	d1f7      	bne.n	8017196 <_fwalk_reent+0xe>
 80171a6:	4638      	mov	r0, r7
 80171a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171ac:	89ab      	ldrh	r3, [r5, #12]
 80171ae:	2b01      	cmp	r3, #1
 80171b0:	d907      	bls.n	80171c2 <_fwalk_reent+0x3a>
 80171b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80171b6:	3301      	adds	r3, #1
 80171b8:	d003      	beq.n	80171c2 <_fwalk_reent+0x3a>
 80171ba:	4629      	mov	r1, r5
 80171bc:	4630      	mov	r0, r6
 80171be:	47c0      	blx	r8
 80171c0:	4307      	orrs	r7, r0
 80171c2:	3568      	adds	r5, #104	; 0x68
 80171c4:	e7e9      	b.n	801719a <_fwalk_reent+0x12>

080171c6 <__retarget_lock_init_recursive>:
 80171c6:	4770      	bx	lr

080171c8 <__retarget_lock_acquire_recursive>:
 80171c8:	4770      	bx	lr

080171ca <__retarget_lock_release_recursive>:
 80171ca:	4770      	bx	lr

080171cc <__swhatbuf_r>:
 80171cc:	b570      	push	{r4, r5, r6, lr}
 80171ce:	460e      	mov	r6, r1
 80171d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171d4:	2900      	cmp	r1, #0
 80171d6:	b096      	sub	sp, #88	; 0x58
 80171d8:	4614      	mov	r4, r2
 80171da:	461d      	mov	r5, r3
 80171dc:	da08      	bge.n	80171f0 <__swhatbuf_r+0x24>
 80171de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80171e2:	2200      	movs	r2, #0
 80171e4:	602a      	str	r2, [r5, #0]
 80171e6:	061a      	lsls	r2, r3, #24
 80171e8:	d410      	bmi.n	801720c <__swhatbuf_r+0x40>
 80171ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171ee:	e00e      	b.n	801720e <__swhatbuf_r+0x42>
 80171f0:	466a      	mov	r2, sp
 80171f2:	f000 f8c3 	bl	801737c <_fstat_r>
 80171f6:	2800      	cmp	r0, #0
 80171f8:	dbf1      	blt.n	80171de <__swhatbuf_r+0x12>
 80171fa:	9a01      	ldr	r2, [sp, #4]
 80171fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017200:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017204:	425a      	negs	r2, r3
 8017206:	415a      	adcs	r2, r3
 8017208:	602a      	str	r2, [r5, #0]
 801720a:	e7ee      	b.n	80171ea <__swhatbuf_r+0x1e>
 801720c:	2340      	movs	r3, #64	; 0x40
 801720e:	2000      	movs	r0, #0
 8017210:	6023      	str	r3, [r4, #0]
 8017212:	b016      	add	sp, #88	; 0x58
 8017214:	bd70      	pop	{r4, r5, r6, pc}
	...

08017218 <__smakebuf_r>:
 8017218:	898b      	ldrh	r3, [r1, #12]
 801721a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801721c:	079d      	lsls	r5, r3, #30
 801721e:	4606      	mov	r6, r0
 8017220:	460c      	mov	r4, r1
 8017222:	d507      	bpl.n	8017234 <__smakebuf_r+0x1c>
 8017224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017228:	6023      	str	r3, [r4, #0]
 801722a:	6123      	str	r3, [r4, #16]
 801722c:	2301      	movs	r3, #1
 801722e:	6163      	str	r3, [r4, #20]
 8017230:	b002      	add	sp, #8
 8017232:	bd70      	pop	{r4, r5, r6, pc}
 8017234:	ab01      	add	r3, sp, #4
 8017236:	466a      	mov	r2, sp
 8017238:	f7ff ffc8 	bl	80171cc <__swhatbuf_r>
 801723c:	9900      	ldr	r1, [sp, #0]
 801723e:	4605      	mov	r5, r0
 8017240:	4630      	mov	r0, r6
 8017242:	f7ff fc4f 	bl	8016ae4 <_malloc_r>
 8017246:	b948      	cbnz	r0, 801725c <__smakebuf_r+0x44>
 8017248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801724c:	059a      	lsls	r2, r3, #22
 801724e:	d4ef      	bmi.n	8017230 <__smakebuf_r+0x18>
 8017250:	f023 0303 	bic.w	r3, r3, #3
 8017254:	f043 0302 	orr.w	r3, r3, #2
 8017258:	81a3      	strh	r3, [r4, #12]
 801725a:	e7e3      	b.n	8017224 <__smakebuf_r+0xc>
 801725c:	4b0d      	ldr	r3, [pc, #52]	; (8017294 <__smakebuf_r+0x7c>)
 801725e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017260:	89a3      	ldrh	r3, [r4, #12]
 8017262:	6020      	str	r0, [r4, #0]
 8017264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017268:	81a3      	strh	r3, [r4, #12]
 801726a:	9b00      	ldr	r3, [sp, #0]
 801726c:	6163      	str	r3, [r4, #20]
 801726e:	9b01      	ldr	r3, [sp, #4]
 8017270:	6120      	str	r0, [r4, #16]
 8017272:	b15b      	cbz	r3, 801728c <__smakebuf_r+0x74>
 8017274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017278:	4630      	mov	r0, r6
 801727a:	f000 f891 	bl	80173a0 <_isatty_r>
 801727e:	b128      	cbz	r0, 801728c <__smakebuf_r+0x74>
 8017280:	89a3      	ldrh	r3, [r4, #12]
 8017282:	f023 0303 	bic.w	r3, r3, #3
 8017286:	f043 0301 	orr.w	r3, r3, #1
 801728a:	81a3      	strh	r3, [r4, #12]
 801728c:	89a0      	ldrh	r0, [r4, #12]
 801728e:	4305      	orrs	r5, r0
 8017290:	81a5      	strh	r5, [r4, #12]
 8017292:	e7cd      	b.n	8017230 <__smakebuf_r+0x18>
 8017294:	08017025 	.word	0x08017025

08017298 <__malloc_lock>:
 8017298:	4801      	ldr	r0, [pc, #4]	; (80172a0 <__malloc_lock+0x8>)
 801729a:	f7ff bf95 	b.w	80171c8 <__retarget_lock_acquire_recursive>
 801729e:	bf00      	nop
 80172a0:	240055e8 	.word	0x240055e8

080172a4 <__malloc_unlock>:
 80172a4:	4801      	ldr	r0, [pc, #4]	; (80172ac <__malloc_unlock+0x8>)
 80172a6:	f7ff bf90 	b.w	80171ca <__retarget_lock_release_recursive>
 80172aa:	bf00      	nop
 80172ac:	240055e8 	.word	0x240055e8

080172b0 <__sread>:
 80172b0:	b510      	push	{r4, lr}
 80172b2:	460c      	mov	r4, r1
 80172b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172b8:	f000 f894 	bl	80173e4 <_read_r>
 80172bc:	2800      	cmp	r0, #0
 80172be:	bfab      	itete	ge
 80172c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80172c2:	89a3      	ldrhlt	r3, [r4, #12]
 80172c4:	181b      	addge	r3, r3, r0
 80172c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80172ca:	bfac      	ite	ge
 80172cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80172ce:	81a3      	strhlt	r3, [r4, #12]
 80172d0:	bd10      	pop	{r4, pc}

080172d2 <__swrite>:
 80172d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172d6:	461f      	mov	r7, r3
 80172d8:	898b      	ldrh	r3, [r1, #12]
 80172da:	05db      	lsls	r3, r3, #23
 80172dc:	4605      	mov	r5, r0
 80172de:	460c      	mov	r4, r1
 80172e0:	4616      	mov	r6, r2
 80172e2:	d505      	bpl.n	80172f0 <__swrite+0x1e>
 80172e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172e8:	2302      	movs	r3, #2
 80172ea:	2200      	movs	r2, #0
 80172ec:	f000 f868 	bl	80173c0 <_lseek_r>
 80172f0:	89a3      	ldrh	r3, [r4, #12]
 80172f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80172fa:	81a3      	strh	r3, [r4, #12]
 80172fc:	4632      	mov	r2, r6
 80172fe:	463b      	mov	r3, r7
 8017300:	4628      	mov	r0, r5
 8017302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017306:	f000 b817 	b.w	8017338 <_write_r>

0801730a <__sseek>:
 801730a:	b510      	push	{r4, lr}
 801730c:	460c      	mov	r4, r1
 801730e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017312:	f000 f855 	bl	80173c0 <_lseek_r>
 8017316:	1c43      	adds	r3, r0, #1
 8017318:	89a3      	ldrh	r3, [r4, #12]
 801731a:	bf15      	itete	ne
 801731c:	6560      	strne	r0, [r4, #84]	; 0x54
 801731e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017326:	81a3      	strheq	r3, [r4, #12]
 8017328:	bf18      	it	ne
 801732a:	81a3      	strhne	r3, [r4, #12]
 801732c:	bd10      	pop	{r4, pc}

0801732e <__sclose>:
 801732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017332:	f000 b813 	b.w	801735c <_close_r>
	...

08017338 <_write_r>:
 8017338:	b538      	push	{r3, r4, r5, lr}
 801733a:	4d07      	ldr	r5, [pc, #28]	; (8017358 <_write_r+0x20>)
 801733c:	4604      	mov	r4, r0
 801733e:	4608      	mov	r0, r1
 8017340:	4611      	mov	r1, r2
 8017342:	2200      	movs	r2, #0
 8017344:	602a      	str	r2, [r5, #0]
 8017346:	461a      	mov	r2, r3
 8017348:	f7eb ff69 	bl	800321e <_write>
 801734c:	1c43      	adds	r3, r0, #1
 801734e:	d102      	bne.n	8017356 <_write_r+0x1e>
 8017350:	682b      	ldr	r3, [r5, #0]
 8017352:	b103      	cbz	r3, 8017356 <_write_r+0x1e>
 8017354:	6023      	str	r3, [r4, #0]
 8017356:	bd38      	pop	{r3, r4, r5, pc}
 8017358:	240055ec 	.word	0x240055ec

0801735c <_close_r>:
 801735c:	b538      	push	{r3, r4, r5, lr}
 801735e:	4d06      	ldr	r5, [pc, #24]	; (8017378 <_close_r+0x1c>)
 8017360:	2300      	movs	r3, #0
 8017362:	4604      	mov	r4, r0
 8017364:	4608      	mov	r0, r1
 8017366:	602b      	str	r3, [r5, #0]
 8017368:	f7eb ff75 	bl	8003256 <_close>
 801736c:	1c43      	adds	r3, r0, #1
 801736e:	d102      	bne.n	8017376 <_close_r+0x1a>
 8017370:	682b      	ldr	r3, [r5, #0]
 8017372:	b103      	cbz	r3, 8017376 <_close_r+0x1a>
 8017374:	6023      	str	r3, [r4, #0]
 8017376:	bd38      	pop	{r3, r4, r5, pc}
 8017378:	240055ec 	.word	0x240055ec

0801737c <_fstat_r>:
 801737c:	b538      	push	{r3, r4, r5, lr}
 801737e:	4d07      	ldr	r5, [pc, #28]	; (801739c <_fstat_r+0x20>)
 8017380:	2300      	movs	r3, #0
 8017382:	4604      	mov	r4, r0
 8017384:	4608      	mov	r0, r1
 8017386:	4611      	mov	r1, r2
 8017388:	602b      	str	r3, [r5, #0]
 801738a:	f7eb ff70 	bl	800326e <_fstat>
 801738e:	1c43      	adds	r3, r0, #1
 8017390:	d102      	bne.n	8017398 <_fstat_r+0x1c>
 8017392:	682b      	ldr	r3, [r5, #0]
 8017394:	b103      	cbz	r3, 8017398 <_fstat_r+0x1c>
 8017396:	6023      	str	r3, [r4, #0]
 8017398:	bd38      	pop	{r3, r4, r5, pc}
 801739a:	bf00      	nop
 801739c:	240055ec 	.word	0x240055ec

080173a0 <_isatty_r>:
 80173a0:	b538      	push	{r3, r4, r5, lr}
 80173a2:	4d06      	ldr	r5, [pc, #24]	; (80173bc <_isatty_r+0x1c>)
 80173a4:	2300      	movs	r3, #0
 80173a6:	4604      	mov	r4, r0
 80173a8:	4608      	mov	r0, r1
 80173aa:	602b      	str	r3, [r5, #0]
 80173ac:	f7eb ff6f 	bl	800328e <_isatty>
 80173b0:	1c43      	adds	r3, r0, #1
 80173b2:	d102      	bne.n	80173ba <_isatty_r+0x1a>
 80173b4:	682b      	ldr	r3, [r5, #0]
 80173b6:	b103      	cbz	r3, 80173ba <_isatty_r+0x1a>
 80173b8:	6023      	str	r3, [r4, #0]
 80173ba:	bd38      	pop	{r3, r4, r5, pc}
 80173bc:	240055ec 	.word	0x240055ec

080173c0 <_lseek_r>:
 80173c0:	b538      	push	{r3, r4, r5, lr}
 80173c2:	4d07      	ldr	r5, [pc, #28]	; (80173e0 <_lseek_r+0x20>)
 80173c4:	4604      	mov	r4, r0
 80173c6:	4608      	mov	r0, r1
 80173c8:	4611      	mov	r1, r2
 80173ca:	2200      	movs	r2, #0
 80173cc:	602a      	str	r2, [r5, #0]
 80173ce:	461a      	mov	r2, r3
 80173d0:	f7eb ff68 	bl	80032a4 <_lseek>
 80173d4:	1c43      	adds	r3, r0, #1
 80173d6:	d102      	bne.n	80173de <_lseek_r+0x1e>
 80173d8:	682b      	ldr	r3, [r5, #0]
 80173da:	b103      	cbz	r3, 80173de <_lseek_r+0x1e>
 80173dc:	6023      	str	r3, [r4, #0]
 80173de:	bd38      	pop	{r3, r4, r5, pc}
 80173e0:	240055ec 	.word	0x240055ec

080173e4 <_read_r>:
 80173e4:	b538      	push	{r3, r4, r5, lr}
 80173e6:	4d07      	ldr	r5, [pc, #28]	; (8017404 <_read_r+0x20>)
 80173e8:	4604      	mov	r4, r0
 80173ea:	4608      	mov	r0, r1
 80173ec:	4611      	mov	r1, r2
 80173ee:	2200      	movs	r2, #0
 80173f0:	602a      	str	r2, [r5, #0]
 80173f2:	461a      	mov	r2, r3
 80173f4:	f7eb fef6 	bl	80031e4 <_read>
 80173f8:	1c43      	adds	r3, r0, #1
 80173fa:	d102      	bne.n	8017402 <_read_r+0x1e>
 80173fc:	682b      	ldr	r3, [r5, #0]
 80173fe:	b103      	cbz	r3, 8017402 <_read_r+0x1e>
 8017400:	6023      	str	r3, [r4, #0]
 8017402:	bd38      	pop	{r3, r4, r5, pc}
 8017404:	240055ec 	.word	0x240055ec

08017408 <_init>:
 8017408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801740a:	bf00      	nop
 801740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801740e:	bc08      	pop	{r3}
 8017410:	469e      	mov	lr, r3
 8017412:	4770      	bx	lr

08017414 <_fini>:
 8017414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017416:	bf00      	nop
 8017418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801741a:	bc08      	pop	{r3}
 801741c:	469e      	mov	lr, r3
 801741e:	4770      	bx	lr
